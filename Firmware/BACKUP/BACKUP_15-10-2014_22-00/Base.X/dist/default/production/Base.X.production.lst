

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Oct 13 15:26:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  0105                     	;# 
   123  0107                     	;# 
   124  0108                     	;# 
   125  0109                     	;# 
   126  010C                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0187                     	;# 
   133  0188                     	;# 
   134  0189                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0089                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  008F                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0093                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0098                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0105                     	;# 
   427  0107                     	;# 
   428  0108                     	;# 
   429  0109                     	;# 
   430  010C                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  010F                     	;# 
   435  0185                     	;# 
   436  0187                     	;# 
   437  0188                     	;# 
   438  0189                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000D                     	;# 
   454  000E                     	;# 
   455  000E                     	;# 
   456  000F                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0017                     	;# 
   466  0018                     	;# 
   467  0019                     	;# 
   468  001A                     	;# 
   469  001B                     	;# 
   470  001B                     	;# 
   471  001C                     	;# 
   472  001D                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  0081                     	;# 
   476  0085                     	;# 
   477  0086                     	;# 
   478  0087                     	;# 
   479  0089                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  008F                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0093                     	;# 
   489  0093                     	;# 
   490  0094                     	;# 
   491  0095                     	;# 
   492  0096                     	;# 
   493  0097                     	;# 
   494  0098                     	;# 
   495  0099                     	;# 
   496  009A                     	;# 
   497  009B                     	;# 
   498  009C                     	;# 
   499  009D                     	;# 
   500  009E                     	;# 
   501  009F                     	;# 
   502  0105                     	;# 
   503  0107                     	;# 
   504  0108                     	;# 
   505  0109                     	;# 
   506  010C                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  0185                     	;# 
   512  0187                     	;# 
   513  0188                     	;# 
   514  0189                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  000E                     	;# 
   532  000F                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  001D                     	;# 
   549  001E                     	;# 
   550  001F                     	;# 
   551  0081                     	;# 
   552  0085                     	;# 
   553  0086                     	;# 
   554  0087                     	;# 
   555  0089                     	;# 
   556  008C                     	;# 
   557  008D                     	;# 
   558  008E                     	;# 
   559  008F                     	;# 
   560  0090                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0093                     	;# 
   564  0093                     	;# 
   565  0093                     	;# 
   566  0094                     	;# 
   567  0095                     	;# 
   568  0096                     	;# 
   569  0097                     	;# 
   570  0098                     	;# 
   571  0099                     	;# 
   572  009A                     	;# 
   573  009B                     	;# 
   574  009C                     	;# 
   575  009D                     	;# 
   576  009E                     	;# 
   577  009F                     	;# 
   578  0105                     	;# 
   579  0107                     	;# 
   580  0108                     	;# 
   581  0109                     	;# 
   582  010C                     	;# 
   583  010C                     	;# 
   584  010D                     	;# 
   585  010E                     	;# 
   586  010F                     	;# 
   587  0185                     	;# 
   588  0187                     	;# 
   589  0188                     	;# 
   590  0189                     	;# 
   591  018C                     	;# 
   592  018D                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000D                     	;# 
   606  000E                     	;# 
   607  000E                     	;# 
   608  000F                     	;# 
   609  0010                     	;# 
   610  0011                     	;# 
   611  0012                     	;# 
   612  0013                     	;# 
   613  0014                     	;# 
   614  0015                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  001D                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  0081                     	;# 
   628  0085                     	;# 
   629  0086                     	;# 
   630  0087                     	;# 
   631  0089                     	;# 
   632  008C                     	;# 
   633  008D                     	;# 
   634  008E                     	;# 
   635  008F                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0093                     	;# 
   640  0093                     	;# 
   641  0093                     	;# 
   642  0094                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0098                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  0105                     	;# 
   655  0107                     	;# 
   656  0108                     	;# 
   657  0109                     	;# 
   658  010C                     	;# 
   659  010C                     	;# 
   660  010D                     	;# 
   661  010E                     	;# 
   662  010F                     	;# 
   663  0185                     	;# 
   664  0187                     	;# 
   665  0188                     	;# 
   666  0189                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0009                     	;# 
   678  000A                     	;# 
   679  000B                     	;# 
   680  000C                     	;# 
   681  000D                     	;# 
   682  000E                     	;# 
   683  000E                     	;# 
   684  000F                     	;# 
   685  0010                     	;# 
   686  0011                     	;# 
   687  0012                     	;# 
   688  0013                     	;# 
   689  0014                     	;# 
   690  0015                     	;# 
   691  0015                     	;# 
   692  0016                     	;# 
   693  0017                     	;# 
   694  0018                     	;# 
   695  0019                     	;# 
   696  001A                     	;# 
   697  001B                     	;# 
   698  001B                     	;# 
   699  001C                     	;# 
   700  001D                     	;# 
   701  001E                     	;# 
   702  001F                     	;# 
   703  0081                     	;# 
   704  0085                     	;# 
   705  0086                     	;# 
   706  0087                     	;# 
   707  0089                     	;# 
   708  008C                     	;# 
   709  008D                     	;# 
   710  008E                     	;# 
   711  008F                     	;# 
   712  0090                     	;# 
   713  0091                     	;# 
   714  0092                     	;# 
   715  0093                     	;# 
   716  0093                     	;# 
   717  0093                     	;# 
   718  0094                     	;# 
   719  0095                     	;# 
   720  0096                     	;# 
   721  0097                     	;# 
   722  0098                     	;# 
   723  0099                     	;# 
   724  009A                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  009F                     	;# 
   730  0105                     	;# 
   731  0107                     	;# 
   732  0108                     	;# 
   733  0109                     	;# 
   734  010C                     	;# 
   735  010C                     	;# 
   736  010D                     	;# 
   737  010E                     	;# 
   738  010F                     	;# 
   739  0185                     	;# 
   740  0187                     	;# 
   741  0188                     	;# 
   742  0189                     	;# 
   743  018C                     	;# 
   744  018D                     	;# 
   745  0000                     	;# 
   746  0001                     	;# 
   747  0002                     	;# 
   748  0003                     	;# 
   749  0004                     	;# 
   750  0005                     	;# 
   751  0006                     	;# 
   752  0007                     	;# 
   753  0009                     	;# 
   754  000A                     	;# 
   755  000B                     	;# 
   756  000C                     	;# 
   757  000D                     	;# 
   758  000E                     	;# 
   759  000E                     	;# 
   760  000F                     	;# 
   761  0010                     	;# 
   762  0011                     	;# 
   763  0012                     	;# 
   764  0013                     	;# 
   765  0014                     	;# 
   766  0015                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0017                     	;# 
   770  0018                     	;# 
   771  0019                     	;# 
   772  001A                     	;# 
   773  001B                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  001D                     	;# 
   777  001E                     	;# 
   778  001F                     	;# 
   779  0081                     	;# 
   780  0085                     	;# 
   781  0086                     	;# 
   782  0087                     	;# 
   783  0089                     	;# 
   784  008C                     	;# 
   785  008D                     	;# 
   786  008E                     	;# 
   787  008F                     	;# 
   788  0090                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0093                     	;# 
   792  0093                     	;# 
   793  0093                     	;# 
   794  0094                     	;# 
   795  0095                     	;# 
   796  0096                     	;# 
   797  0097                     	;# 
   798  0098                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009C                     	;# 
   803  009D                     	;# 
   804  009E                     	;# 
   805  009F                     	;# 
   806  0105                     	;# 
   807  0107                     	;# 
   808  0108                     	;# 
   809  0109                     	;# 
   810  010C                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0185                     	;# 
   816  0187                     	;# 
   817  0188                     	;# 
   818  0189                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  000E                     	;# 
   836  000F                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0013                     	;# 
   841  0014                     	;# 
   842  0015                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  001D                     	;# 
   853  001E                     	;# 
   854  001F                     	;# 
   855  0081                     	;# 
   856  0085                     	;# 
   857  0086                     	;# 
   858  0087                     	;# 
   859  0089                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  008F                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0093                     	;# 
   868  0093                     	;# 
   869  0093                     	;# 
   870  0094                     	;# 
   871  0095                     	;# 
   872  0096                     	;# 
   873  0097                     	;# 
   874  0098                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009C                     	;# 
   879  009D                     	;# 
   880  009E                     	;# 
   881  009F                     	;# 
   882  0105                     	;# 
   883  0107                     	;# 
   884  0108                     	;# 
   885  0109                     	;# 
   886  010C                     	;# 
   887  010C                     	;# 
   888  010D                     	;# 
   889  010E                     	;# 
   890  010F                     	;# 
   891  0185                     	;# 
   892  0187                     	;# 
   893  0188                     	;# 
   894  0189                     	;# 
   895  018C                     	;# 
   896  018D                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  000E                     	;# 
   912  000F                     	;# 
   913  0010                     	;# 
   914  0011                     	;# 
   915  0012                     	;# 
   916  0013                     	;# 
   917  0014                     	;# 
   918  0015                     	;# 
   919  0015                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001B                     	;# 
   927  001C                     	;# 
   928  001D                     	;# 
   929  001E                     	;# 
   930  001F                     	;# 
   931  0081                     	;# 
   932  0085                     	;# 
   933  0086                     	;# 
   934  0087                     	;# 
   935  0089                     	;# 
   936  008C                     	;# 
   937  008D                     	;# 
   938  008E                     	;# 
   939  008F                     	;# 
   940  0090                     	;# 
   941  0091                     	;# 
   942  0092                     	;# 
   943  0093                     	;# 
   944  0093                     	;# 
   945  0093                     	;# 
   946  0094                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0098                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009C                     	;# 
   955  009D                     	;# 
   956  009E                     	;# 
   957  009F                     	;# 
   958  0105                     	;# 
   959  0107                     	;# 
   960  0108                     	;# 
   961  0109                     	;# 
   962  010C                     	;# 
   963  010C                     	;# 
   964  010D                     	;# 
   965  010E                     	;# 
   966  010F                     	;# 
   967  0185                     	;# 
   968  0187                     	;# 
   969  0188                     	;# 
   970  0189                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  000E                     	;# 
   988  000F                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0014                     	;# 
   994  0015                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001D                     	;# 
  1005  001E                     	;# 
  1006  001F                     	;# 
  1007  0081                     	;# 
  1008  0085                     	;# 
  1009  0086                     	;# 
  1010  0087                     	;# 
  1011  0089                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0093                     	;# 
  1021  0093                     	;# 
  1022  0094                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009A                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  0105                     	;# 
  1035  0107                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0187                     	;# 
  1045  0188                     	;# 
  1046  0189                     	;# 
  1047  018C                     	;# 
  1048  018D                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  000E                     	;# 
  1064  000F                     	;# 
  1065  0010                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0013                     	;# 
  1069  0014                     	;# 
  1070  0015                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001D                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  0081                     	;# 
  1084  0085                     	;# 
  1085  0086                     	;# 
  1086  0087                     	;# 
  1087  0089                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  008F                     	;# 
  1092  0090                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0093                     	;# 
  1097  0093                     	;# 
  1098  0094                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0097                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009A                     	;# 
  1105  009B                     	;# 
  1106  009C                     	;# 
  1107  009D                     	;# 
  1108  009E                     	;# 
  1109  009F                     	;# 
  1110  0105                     	;# 
  1111  0107                     	;# 
  1112  0108                     	;# 
  1113  0109                     	;# 
  1114  010C                     	;# 
  1115  010C                     	;# 
  1116  010D                     	;# 
  1117  010E                     	;# 
  1118  010F                     	;# 
  1119  0185                     	;# 
  1120  0187                     	;# 
  1121  0188                     	;# 
  1122  0189                     	;# 
  1123  018C                     	;# 
  1124  018D                     	;# 
  1125                           
  1126                           	psect	idataBANK0
  1127  0695                     __pidataBANK0:	
  1128                           
  1129                           ;initializer for _cc1PaTable
  1130  0695  3403               	retlw	3
  1131  0696  340F               	retlw	15
  1132  0697  341E               	retlw	30
  1133  0698  3427               	retlw	39
  1134  0699  3450               	retlw	80
  1135  069A  3481               	retlw	129
  1136  069B  34CB               	retlw	203
  1137  069C  34C2               	retlw	194
  1138                           
  1139                           	psect	idataBANK1
  1140  02B4                     __pidataBANK1:	
  1141                           
  1142                           ;initializer for _cc1InitVal
  1143  02B4  3447               	retlw	71
  1144  02B5  3446               	retlw	70
  1145  02B6  3480               	retlw	128
  1146  02B7  340F               	retlw	15
  1147  02B8  34D3               	retlw	211
  1148  02B9  3491               	retlw	145
  1149  02BA  3405               	retlw	5
  1150  02BB  3408               	retlw	8
  1151  02BC  3404               	retlw	4
  1152  02BD  3400               	retlw	0
  1153  02BE  3400               	retlw	0
  1154  02BF  3406               	retlw	6
  1155  02C0  3400               	retlw	0
  1156  02C1  3421               	retlw	33
  1157  02C2  3463               	retlw	99
  1158  02C3  3491               	retlw	145
  1159  02C4  34CA               	retlw	202
  1160  02C5  3483               	retlw	131
  1161  02C6  3402               	retlw	2
  1162  02C7  3402               	retlw	2
  1163  02C8  343B               	retlw	59
  1164  02C9  3434               	retlw	52
  1165  02CA  3407               	retlw	7
  1166  02CB  343F               	retlw	63
  1167  02CC  3408               	retlw	8
  1168  02CD  3416               	retlw	22
  1169  02CE  346C               	retlw	108
  1170  02CF  3403               	retlw	3
  1171  02D0  3440               	retlw	64
  1172  02D1  3491               	retlw	145
  1173  02D2  3487               	retlw	135
  1174  02D3  346B               	retlw	107
  1175  02D4  34FB               	retlw	251
  1176  02D5  3456               	retlw	86
  1177  02D6  3416               	retlw	22
  1178  02D7  34E9               	retlw	233
  1179  02D8  342A               	retlw	42
  1180  02D9  3400               	retlw	0
  1181  02DA  341F               	retlw	31
  1182  02DB  3441               	retlw	65
  1183  02DC  3400               	retlw	0
  1184  02DD  3459               	retlw	89
  1185  02DE  34BF               	retlw	191
  1186  02DF  343F               	retlw	63
  1187  02E0  3481               	retlw	129
  1188  02E1  3435               	retlw	53
  1189  02E2  3409               	retlw	9
  1190  001F                     _ADCON0	set	31
  1191  001F                     _ADCON0bits	set	31
  1192  001E                     _ADRESH	set	30
  1193  000B                     _INTCON	set	11
  1194  000B                     _INTCONbits	set	11
  1195  000C                     _PIR1	set	12
  1196  000C                     _PIR1bits	set	12
  1197  000D                     _PIR2	set	13
  1198  0005                     _PORTA	set	5
  1199  0005                     _PORTAbits	set	5
  1200  0006                     _PORTBbits	set	6
  1201  0007                     _PORTC	set	7
  1202  0007                     _PORTCbits	set	7
  1203  0013                     _SSPBUF	set	19
  1204  0014                     _SSPCON	set	20
  1205  0014                     _SSPCONbits	set	20
  1206  0010                     _T1CON	set	16
  1207  0001                     _TMR0	set	1
  1208  000F                     _TMR1H	set	15
  1209  000E                     _TMR1L	set	14
  1210  0018                     _CARRY	set	24
  1211  005F                     _GIE	set	95
  1212  009F                     _ADCON1	set	159
  1213  0096                     _IOCB	set	150
  1214  0081                     _OPTION_REG	set	129
  1215  008F                     _OSCCON	set	143
  1216  008C                     _PIE1	set	140
  1217  008D                     _PIE2	set	141
  1218  0091                     _SSPCON2	set	145
  1219  0094                     _SSPSTAT	set	148
  1220  0085                     _TRISA	set	133
  1221  0086                     _TRISB	set	134
  1222  0087                     _TRISC	set	135
  1223  0095                     _WPUB	set	149
  1224  010D                     _EEADR	set	269
  1225  010C                     _EEDATA	set	268
  1226  0105                     _WDTCON	set	261
  1227  0188                     _ANSEL	set	392
  1228  0189                     _ANSELH	set	393
  1229  018C                     _EECON1	set	396
  1230  018D                     _EECON2	set	397
  1231  0C60                     _RD	set	3168
  1232  0C61                     _WR	set	3169
  1233  0C62                     _WREN	set	3170
  1234                           
  1235                           ; #config settings
  1236  0000                     
  1237                           	psect	cinit
  1238  0013                     start_initialization:	
  1239  0013                     __initialization:	
  1240                           
  1241                           ; Clear objects allocated to COMMON
  1242  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1243  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1244  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1245  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1246                           
  1247                           ; Clear objects allocated to BANK0
  1248  0017  1383               	bcf	3,7	;select IRP bank0
  1249  0018  3020               	movlw	low __pbssBANK0
  1250  0019  0084               	movwf	4
  1251  001A  3046               	movlw	low (__pbssBANK0+38)
  1252  001B  118A  269D  118A   	fcall	clear_ram0
  1253                           
  1254                           ; Initialize objects allocated to BANK1
  1255  001E  30CF               	movlw	low (__pdataBANK1+47)
  1256  001F  00FD               	movwf	btemp+-1
  1257  0020  3002               	movlw	high __pidataBANK1
  1258  0021  00FE               	movwf	btemp
  1259  0022  30B4               	movlw	low __pidataBANK1
  1260  0023  00FF               	movwf	btemp+1
  1261  0024  30A0               	movlw	low __pdataBANK1
  1262  0025  0084               	movwf	4
  1263  0026  118A  262B  118A   	fcall	init_ram0
  1264                           
  1265                           ; Initialize objects allocated to BANK0
  1266  0029  3063               	movlw	low (__pdataBANK0+8)
  1267  002A  00FD               	movwf	btemp+-1
  1268  002B  3006               	movlw	high __pidataBANK0
  1269  002C  00FE               	movwf	btemp
  1270  002D  3095               	movlw	low __pidataBANK0
  1271  002E  00FF               	movwf	btemp+1
  1272  002F  305B               	movlw	low __pdataBANK0
  1273  0030  0084               	movwf	4
  1274  0031  118A  262B         	fcall	init_ram0
  1275  0033                     end_of_initialization:	
  1276                           ;End of C runtime variable initialization code
  1277                           
  1278  0033                     __end_of__initialization:	
  1279  0033  0183               	clrf	3
  1280  0034  118A  28A0         	ljmp	_main	;jump to C main() function
  1281                           
  1282                           	psect	bssCOMMON
  1283  0076                     __pbssCOMMON:	
  1284  0076                     ADCTask@cntSum:	
  1285  0076                     	ds	1
  1286  0077                     _u_flg_din:	
  1287  0077                     	ds	1
  1288  0078                     _u_in_sta_currTask:	
  1289  0078                     	ds	1
  1290  0079                     _u_in_sta_tmpTask:	
  1291  0079                     	ds	1
  1292                           
  1293                           	psect	bssBANK0
  1294  0020                     __pbssBANK0:	
  1295  0020                     ADCTask@sumBatt:	
  1296  0020                     	ds	2
  1297  0022                     ADCTask@sumTemp:	
  1298  0022                     	ds	2
  1299  0024                     _rtx_ev:	
  1300  0024                     	ds	2
  1301  0026                     _tmrLongSel:	
  1302  0026                     	ds	2
  1303  0028                     _adc_ch:	
  1304  0028                     	ds	1
  1305  0029                     _batt:	
  1306  0029                     	ds	1
  1307  002A                     _cntSndData:	
  1308  002A                     	ds	1
  1309  002B                     _flg_slp:	
  1310  002B                     	ds	1
  1311  002C                     _rtx_flg:	
  1312  002C                     	ds	1
  1313  002D                     _s_CC1_FLG:	
  1314  002D                     	ds	1
  1315  002E                     _sys_pgm_sta:	
  1316  002E                     	ds	1
  1317  002F                     _temp:	
  1318  002F                     	ds	1
  1319  0030                     _tmrDbncSel:	
  1320  0030                     	ds	1
  1321  0031                     _tmrPgm:	
  1322  0031                     	ds	1
  1323  0032                     _tmrRcvPkt:	
  1324  0032                     	ds	1
  1325  0033                     _u_SYS_STA:	
  1326  0033                     	ds	1
  1327  0034                     _u_in_ev_down:	
  1328  0034                     	ds	1
  1329  0035                     _u_in_ev_long:	
  1330  0035                     	ds	1
  1331  0036                     _u_in_ev_up:	
  1332  0036                     	ds	1
  1333  0037                     _pgm_cfg:	
  1334  0037                     	ds	5
  1335  003C                     _pktRx:	
  1336  003C                     	ds	5
  1337  0041                     _pktTx:	
  1338  0041                     	ds	5
  1339                           
  1340                           	psect	dataBANK0
  1341  005B                     __pdataBANK0:	
  1342  005B                     _cc1PaTable:	
  1343  005B                     	ds	8
  1344                           
  1345                           	psect	dataBANK1
  1346  00A0                     __pdataBANK1:	
  1347  00A0                     _cc1InitVal:	
  1348  00A0                     	ds	47
  1349                           
  1350                           	psect	clrtext
  1351  069D                     clear_ram0:	
  1352                           ;	Called with FSR containing the base address, and
  1353                           ;	W with the last address+1
  1354                           
  1355  069D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1356  069E                     clrloop0:	
  1357  069E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1358  069F  0A84               	incf	4,f	;increment pointer
  1359  06A0  0604               	xorwf	4,w	;XOR with final address
  1360  06A1  1903               	btfsc	3,2	;have we reached the end yet?
  1361  06A2  3400               	retlw	0	;all done for this memory range, return
  1362  06A3  0604               	xorwf	4,w	;XOR again to restore value
  1363  06A4  2E9E               	goto	clrloop0	;do the next byte
  1364                           
  1365                           	psect	inittext
  1366  0627                     init_fetch0:	
  1367                           ;	Called with low address in FSR and high address in W
  1368                           
  1369  0627  087E               	movf	126,w
  1370  0628  008A               	movwf	10
  1371  0629  087F               	movf	127,w
  1372  062A  0082               	movwf	2
  1373  062B                     init_ram0:	
  1374                           ;Called with:
  1375                           ;	high address of idata address in btemp 
  1376                           ;	low address of idata address in btemp+1 
  1377                           ;	low address of data in FSR
  1378                           ;	high address + 1 of data in btemp-1
  1379                           
  1380  062B  2627  118A         	fcall	init_fetch0
  1381  062D  0080               	movwf	0
  1382  062E  0A84               	incf	4,f
  1383  062F  0804               	movf	4,w
  1384  0630  067D               	xorwf	125,w
  1385  0631  1903               	btfsc	3,2
  1386  0632  3400               	retlw	0
  1387  0633  0AFF               	incf	127,f
  1388  0634  1903               	btfsc	3,2
  1389  0635  0AFE               	incf	126,f
  1390  0636  2E2B               	goto	init_ram0
  1391                           
  1392                           	psect	cstackCOMMON
  1393  0070                     __pcstackCOMMON:	
  1394  0070                     ?_CC1Strobe:	
  1395  0070                     ?_PGMReadNvm:	
  1396                           ; 0 bytes @ 0x0
  1397                           
  1398  0070                     ?_PGMCheckNvm:	
  1399                           ; 0 bytes @ 0x0
  1400                           
  1401  0070                     ?_PGMNvmReset:	
  1402                           ; 0 bytes @ 0x0
  1403                           
  1404  0070                     ?_RTXSendData:	
  1405                           ; 0 bytes @ 0x0
  1406                           
  1407  0070                     ?_RTXReadPkt:	
  1408                           ; 0 bytes @ 0x0
  1409                           
  1410  0070                     ?_RTXSendRPgm:	
  1411                           ; 0 bytes @ 0x0
  1412                           
  1413  0070                     ?_INInit:	
  1414                           ; 0 bytes @ 0x0
  1415                           
  1416  0070                     ?_OUTInit:	
  1417                           ; 0 bytes @ 0x0
  1418                           
  1419  0070                     ?_SPIInit:	
  1420                           ; 0 bytes @ 0x0
  1421                           
  1422  0070                     ?_ADCInit:	
  1423                           ; 0 bytes @ 0x0
  1424                           
  1425  0070                     ?_ADCTask:	
  1426                           ; 0 bytes @ 0x0
  1427                           
  1428  0070                     ?_CC1Init:	
  1429                           ; 0 bytes @ 0x0
  1430                           
  1431  0070                     ?_CC1Sleep:	
  1432                           ; 0 bytes @ 0x0
  1433                           
  1434  0070                     ?_LEDInit:	
  1435                           ; 0 bytes @ 0x0
  1436                           
  1437  0070                     ?_LEDNormalFlash:	
  1438                           ; 0 bytes @ 0x0
  1439                           
  1440  0070                     ?_LEDFastFlash:	
  1441                           ; 0 bytes @ 0x0
  1442                           
  1443  0070                     ?_DINInit:	
  1444                           ; 0 bytes @ 0x0
  1445                           
  1446  0070                     ?_DINTick:	
  1447                           ; 0 bytes @ 0x0
  1448                           
  1449  0070                     ?_DINTask:	
  1450                           ; 0 bytes @ 0x0
  1451                           
  1452  0070                     ?_SLPSleep:	
  1453                           ; 0 bytes @ 0x0
  1454                           
  1455  0070                     ?_PGMInit:	
  1456                           ; 0 bytes @ 0x0
  1457                           
  1458  0070                     ?_PGMWriteNvm:	
  1459                           ; 0 bytes @ 0x0
  1460                           
  1461  0070                     ?_PGMSelLong:	
  1462                           ; 0 bytes @ 0x0
  1463                           
  1464  0070                     ?_RTXInit:	
  1465                           ; 0 bytes @ 0x0
  1466                           
  1467  0070                     ?_RTXTick:	
  1468                           ; 0 bytes @ 0x0
  1469                           
  1470  0070                     ?_RTXTask:	
  1471                           ; 0 bytes @ 0x0
  1472                           
  1473  0070                     ?_SYSInit:	
  1474                           ; 0 bytes @ 0x0
  1475                           
  1476  0070                     ?_SYSInt:	
  1477                           ; 0 bytes @ 0x0
  1478                           
  1479  0070                     ??_SYSInt:	
  1480                           ; 0 bytes @ 0x0
  1481                           
  1482  0070                     ?_SYSTask:	
  1483                           ; 0 bytes @ 0x0
  1484                           
  1485  0070                     ?_INTIsr:	
  1486                           ; 0 bytes @ 0x0
  1487                           
  1488  0070                     ??_INTIsr:	
  1489                           ; 0 bytes @ 0x0
  1490                           
  1491  0070                     ?_main:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_eeprom_read:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497                           
  1498                           ; 1 bytes @ 0x0
  1499  0070                     	ds	4
  1500  0074                     ??_eeprom_read:	
  1501  0074                     ?_eeprom_write:	
  1502                           ; 0 bytes @ 0x4
  1503                           
  1504  0074                     ??_INInit:	
  1505                           ; 0 bytes @ 0x4
  1506                           
  1507  0074                     ??_OUTInit:	
  1508                           ; 0 bytes @ 0x4
  1509                           
  1510  0074                     ??_SPIInit:	
  1511                           ; 0 bytes @ 0x4
  1512                           
  1513  0074                     ?_SPIRead:	
  1514                           ; 0 bytes @ 0x4
  1515                           
  1516  0074                     ?_SPIWrite:	
  1517                           ; 0 bytes @ 0x4
  1518                           
  1519  0074                     ??_ADCInit:	
  1520                           ; 0 bytes @ 0x4
  1521                           
  1522  0074                     ?_DLYDelay_ms:	
  1523                           ; 0 bytes @ 0x4
  1524                           
  1525  0074                     ??_LEDInit:	
  1526                           ; 0 bytes @ 0x4
  1527                           
  1528  0074                     ??_DINInit:	
  1529                           ; 0 bytes @ 0x4
  1530                           
  1531  0074                     ??_DINTick:	
  1532                           ; 0 bytes @ 0x4
  1533                           
  1534  0074                     ??_DINTask:	
  1535                           ; 0 bytes @ 0x4
  1536                           
  1537  0074                     ??_SYSInit:	
  1538                           ; 0 bytes @ 0x4
  1539                           
  1540  0074                     ??___lwdiv:	
  1541                           ; 0 bytes @ 0x4
  1542                           
  1543  0074                     SPIRead@len:	
  1544                           ; 0 bytes @ 0x4
  1545                           
  1546  0074                     SPIWrite@len:	
  1547                           ; 1 bytes @ 0x4
  1548                           
  1549  0074                     LEDInit@sta:	
  1550                           ; 1 bytes @ 0x4
  1551                           
  1552  0074                     DINInit@sta:	
  1553                           ; 1 bytes @ 0x4
  1554                           
  1555  0074                     eeprom_write@value:	
  1556                           ; 1 bytes @ 0x4
  1557                           
  1558  0074                     DLYDelay_ms@val:	
  1559                           ; 1 bytes @ 0x4
  1560                           
  1561                           
  1562                           ; 2 bytes @ 0x4
  1563  0074                     	ds	1
  1564  0075                     ??_eeprom_write:	
  1565  0075                     ??_SPIWrite:	
  1566                           ; 0 bytes @ 0x5
  1567                           
  1568  0075                     INInit@sta:	
  1569                           ; 0 bytes @ 0x5
  1570                           
  1571  0075                     OUTInit@sta:	
  1572                           ; 1 bytes @ 0x5
  1573                           
  1574  0075                     SPIInit@state:	
  1575                           ; 1 bytes @ 0x5
  1576                           
  1577  0075                     ADCInit@state:	
  1578                           ; 1 bytes @ 0x5
  1579                           
  1580  0075                     SYSInit@state:	
  1581                           ; 1 bytes @ 0x5
  1582                           
  1583  0075                     eeprom_read@addr:	
  1584                           ; 1 bytes @ 0x5
  1585                           
  1586                           
  1587                           ; 1 bytes @ 0x5
  1588  0075                     	ds	1
  1589  0076                     ??_PGMCheckNvm:	
  1590  0076                     ??_CC1Sleep:	
  1591                           ; 0 bytes @ 0x6
  1592                           
  1593  0076                     ??_PGMInit:	
  1594                           ; 0 bytes @ 0x6
  1595                           
  1596  0076                     ??_RTXInit:	
  1597                           ; 0 bytes @ 0x6
  1598                           
  1599  0076                     ??_RTXTick:	
  1600                           ; 0 bytes @ 0x6
  1601                           
  1602  0076                     ??_RTXTask:	
  1603                           ; 0 bytes @ 0x6
  1604                           
  1605                           
  1606                           	psect	cstackBANK0
  1607  0046                     __pcstackBANK0:	
  1608                           ; 0 bytes @ 0x6
  1609                           
  1610  0046                     ??_SPIRead:	
  1611  0046                     ??_DLYDelay_ms:	
  1612                           ; 0 bytes @ 0x0
  1613                           
  1614  0046                     ?_NVMRead:	
  1615                           ; 0 bytes @ 0x0
  1616                           
  1617  0046                     ?___lwdiv:	
  1618                           ; 0 bytes @ 0x0
  1619                           
  1620  0046                     SPIWrite@srcPtr:	
  1621                           ; 2 bytes @ 0x0
  1622                           
  1623  0046                     NVMRead@dest:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0046                     eeprom_write@addr:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0046                     ___lwdiv@divisor:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632                           
  1633                           ; 2 bytes @ 0x0
  1634  0046                     	ds	1
  1635  0047                     ?_NVMWrite:	
  1636  0047                     SPIWrite@i:	
  1637                           ; 0 bytes @ 0x1
  1638                           
  1639  0047                     NVMRead@len:	
  1640                           ; 1 bytes @ 0x1
  1641                           
  1642  0047                     NVMWrite@source:	
  1643                           ; 1 bytes @ 0x1
  1644                           
  1645                           
  1646                           ; 1 bytes @ 0x1
  1647  0047                     	ds	1
  1648  0048                     ??_CC1Strobe:	
  1649  0048                     ?_CC1Write:	
  1650                           ; 0 bytes @ 0x2
  1651                           
  1652  0048                     ??_NVMRead:	
  1653                           ; 0 bytes @ 0x2
  1654                           
  1655  0048                     SPIRead@dstPtr:	
  1656                           ; 0 bytes @ 0x2
  1657                           
  1658  0048                     CC1Write@src:	
  1659                           ; 1 bytes @ 0x2
  1660                           
  1661  0048                     NVMWrite@len:	
  1662                           ; 1 bytes @ 0x2
  1663                           
  1664  0048                     DLYDelay_ms@i:	
  1665                           ; 1 bytes @ 0x2
  1666                           
  1667  0048                     ___lwdiv@dividend:	
  1668                           ; 2 bytes @ 0x2
  1669                           
  1670                           
  1671                           ; 2 bytes @ 0x2
  1672  0048                     	ds	1
  1673  0049                     ??_NVMWrite:	
  1674  0049                     SPIRead@i:	
  1675                           ; 0 bytes @ 0x3
  1676                           
  1677  0049                     CC1Strobe@e_stb:	
  1678                           ; 1 bytes @ 0x3
  1679                           
  1680  0049                     CC1Write@len:	
  1681                           ; 1 bytes @ 0x3
  1682                           
  1683                           
  1684                           ; 1 bytes @ 0x3
  1685  0049                     	ds	1
  1686  004A                     ??_CC1Write:	
  1687  004A                     ?_CC1Read:	
  1688                           ; 0 bytes @ 0x4
  1689                           
  1690  004A                     ??_LEDNormalFlash:	
  1691                           ; 0 bytes @ 0x4
  1692                           
  1693  004A                     ??_LEDFastFlash:	
  1694                           ; 0 bytes @ 0x4
  1695                           
  1696  004A                     CC1Strobe@cc1Stb:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  004A                     CC1Read@dst:	
  1700                           ; 1 bytes @ 0x4
  1701                           
  1702  004A                     NVMRead@addr:	
  1703                           ; 1 bytes @ 0x4
  1704                           
  1705  004A                     ___lwdiv@counter:	
  1706                           ; 1 bytes @ 0x4
  1707                           
  1708                           
  1709                           ; 1 bytes @ 0x4
  1710  004A                     	ds	1
  1711  004B                     ??_SLPSleep:	
  1712  004B                     CC1Read@len:	
  1713                           ; 0 bytes @ 0x5
  1714                           
  1715  004B                     CC1Write@addr:	
  1716                           ; 1 bytes @ 0x5
  1717                           
  1718  004B                     LEDNormalFlash@num:	
  1719                           ; 1 bytes @ 0x5
  1720                           
  1721  004B                     LEDFastFlash@num:	
  1722                           ; 1 bytes @ 0x5
  1723                           
  1724  004B                     NVMRead@i:	
  1725                           ; 1 bytes @ 0x5
  1726                           
  1727  004B                     NVMWrite@addr:	
  1728                           ; 1 bytes @ 0x5
  1729                           
  1730  004B                     ___lwdiv@quotient:	
  1731                           ; 1 bytes @ 0x5
  1732                           
  1733                           
  1734                           ; 2 bytes @ 0x5
  1735  004B                     	ds	1
  1736  004C                     ??_PGMReadNvm:	
  1737  004C                     ??_CC1Read:	
  1738                           ; 0 bytes @ 0x6
  1739                           
  1740  004C                     CC1Write@cc1Addr:	
  1741                           ; 0 bytes @ 0x6
  1742                           
  1743  004C                     LEDNormalFlash@i:	
  1744                           ; 1 bytes @ 0x6
  1745                           
  1746  004C                     LEDFastFlash@i:	
  1747                           ; 1 bytes @ 0x6
  1748                           
  1749  004C                     NVMWrite@i:	
  1750                           ; 1 bytes @ 0x6
  1751                           
  1752  004C                     SLPSleep@IOCBTmp:	
  1753                           ; 1 bytes @ 0x6
  1754                           
  1755                           
  1756                           ; 1 bytes @ 0x6
  1757  004C                     	ds	1
  1758  004D                     ??_ADCTask:	
  1759  004D                     ??_CC1Init:	
  1760                           ; 0 bytes @ 0x7
  1761                           
  1762  004D                     ??_PGMWriteNvm:	
  1763                           ; 0 bytes @ 0x7
  1764                           
  1765  004D                     CC1Read@addr:	
  1766                           ; 0 bytes @ 0x7
  1767                           
  1768  004D                     SLPSleep@INTCONTmp:	
  1769                           ; 1 bytes @ 0x7
  1770                           
  1771                           
  1772                           ; 1 bytes @ 0x7
  1773  004D                     	ds	1
  1774  004E                     CC1Read@cc1Addr:	
  1775  004E                     SLPSleep@WPUBTmp:	
  1776                           ; 1 bytes @ 0x8
  1777                           
  1778                           
  1779                           ; 1 bytes @ 0x8
  1780  004E                     	ds	1
  1781  004F                     ??_PGMNvmReset:	
  1782  004F                     ??_PGMSelLong:	
  1783                           ; 0 bytes @ 0x9
  1784                           
  1785  004F                     ?_RTXSndPkt:	
  1786                           ; 0 bytes @ 0x9
  1787                           
  1788  004F                     ?_RTXRcvPkt:	
  1789                           ; 0 bytes @ 0x9
  1790                           
  1791  004F                     CC1Init@state:	
  1792                           ; 0 bytes @ 0x9
  1793                           
  1794  004F                     SLPSleep@WDTCONTmp:	
  1795                           ; 1 bytes @ 0x9
  1796                           
  1797  004F                     RTXSndPkt@len:	
  1798                           ; 1 bytes @ 0x9
  1799                           
  1800  004F                     RTXRcvPkt@len:	
  1801                           ; 1 bytes @ 0x9
  1802                           
  1803                           
  1804                           ; 1 bytes @ 0x9
  1805  004F                     	ds	1
  1806  0050                     ??_RTXSndPkt:	
  1807  0050                     ??_RTXRcvPkt:	
  1808                           ; 0 bytes @ 0xA
  1809                           
  1810  0050                     SLPSleep@OPTION_REGTmp:	
  1811                           ; 0 bytes @ 0xA
  1812                           
  1813  0050                     PGMInit@state:	
  1814                           ; 1 bytes @ 0xA
  1815                           
  1816                           
  1817                           ; 1 bytes @ 0xA
  1818  0050                     	ds	2
  1819  0052                     RTXSndPkt@src:	
  1820  0052                     RTXRcvPkt@dst:	
  1821                           ; 1 bytes @ 0xC
  1822                           
  1823                           
  1824                           ; 1 bytes @ 0xC
  1825  0052                     	ds	1
  1826  0053                     RTXSndPkt@numRxByte:	
  1827                           
  1828                           ; 1 bytes @ 0xD
  1829  0053                     	ds	1
  1830  0054                     RTXSndPkt@numTxByte:	
  1831                           
  1832                           ; 1 bytes @ 0xE
  1833  0054                     	ds	1
  1834  0055                     RTXSndPkt@sta:	
  1835                           
  1836                           ; 1 bytes @ 0xF
  1837  0055                     	ds	1
  1838  0056                     ??_RTXSendData:	
  1839  0056                     ??_RTXSendRPgm:	
  1840                           ; 0 bytes @ 0x10
  1841                           
  1842                           
  1843                           ; 0 bytes @ 0x10
  1844  0056                     	ds	1
  1845  0057                     ??_RTXReadPkt:	
  1846  0057                     ??_SYSTask:	
  1847                           ; 0 bytes @ 0x11
  1848                           
  1849  0057                     RTXInit@state:	
  1850                           ; 0 bytes @ 0x11
  1851                           
  1852                           
  1853                           ; 1 bytes @ 0x11
  1854  0057                     	ds	1
  1855  0058                     RTXReadPkt@numRxByte:	
  1856  0058                     SYSTask@i:	
  1857                           ; 1 bytes @ 0x12
  1858                           
  1859                           
  1860                           ; 1 bytes @ 0x12
  1861  0058                     	ds	1
  1862  0059                     ??_main:	
  1863                           
  1864                           ; 0 bytes @ 0x13
  1865  0059                     	ds	1
  1866  005A                     main@i:	
  1867                           
  1868                           ; 1 bytes @ 0x14
  1869  005A                     	ds	1
  1870                           
  1871                           	psect	maintext
  1872  00A0                     __pmaintext:	
  1873 ;;
  1874 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1875 ;;
  1876 ;; *************** function _main *****************
  1877 ;; Defined at:
  1878 ;;		line 40 in file "Sensore.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  i               1   20[BANK0 ] unsigned char 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;		None               void
  1885 ;; Registers used:
  1886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 17F/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1892 ;;      Params:         0       0       0       0
  1893 ;;      Locals:         0       1       0       0
  1894 ;;      Temps:          0       1       0       0
  1895 ;;      Totals:         0       2       0       0
  1896 ;;Total ram usage:        2 bytes
  1897 ;; Hardware stack levels required when called:    8
  1898 ;; This function calls:
  1899 ;;		_INInit
  1900 ;;		_OUTInit
  1901 ;;		_SPIInit
  1902 ;;		_ADCInit
  1903 ;;		_ADCTask
  1904 ;;		_CC1Init
  1905 ;;		_LEDInit
  1906 ;;		_DINInit
  1907 ;;		_DINTask
  1908 ;;		_PGMInit
  1909 ;;		_RTXInit
  1910 ;;		_RTXTask
  1911 ;;		_SYSInit
  1912 ;;		_SYSTask
  1913 ;; This function is called by:
  1914 ;;		Startup code after reset
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           
  1919                           ;psect for function _main
  1920  00A0                     _main:	
  1921                           
  1922                           ;Sensore.c: 41: unsigned char i;
  1923                           ;Sensore.c: 44: for(i=0;i<3;i++)
  1924                           
  1925                           ;incstack = 0
  1926                           ; Regs used in _main: [allreg]
  1927  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1928  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1929  00A2  01DA               	clrf	main@i
  1930  00A3  3003               	movlw	3
  1931  00A4  025A               	subwf	main@i,w
  1932  00A5  1803               	btfsc	3,0
  1933  00A6  28EE               	goto	l548
  1934  00A7                     l547:	
  1935  00A7  0064               	clrwdt	;# 
  1936                           
  1937                           ;Sensore.c: 48: SYSInit(i);
  1938  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1939  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1940  00AA  085A               	movf	main@i,w
  1941  00AB  118A  2312  118A   	fcall	_SYSInit
  1942                           
  1943                           ;Sensore.c: 49: INInit(i);
  1944  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1945  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1946  00B0  085A               	movf	main@i,w
  1947  00B1  118A  2594  118A   	fcall	_INInit
  1948                           
  1949                           ;Sensore.c: 50: OUTInit(i);
  1950  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1951  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1952  00B6  085A               	movf	main@i,w
  1953  00B7  118A  2540  118A   	fcall	_OUTInit
  1954                           
  1955                           ;Sensore.c: 51: DINInit(i);
  1956  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1957  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1958  00BC  085A               	movf	main@i,w
  1959  00BD  118A  2616  118A   	fcall	_DINInit
  1960                           
  1961                           ;Sensore.c: 52: LEDInit(i);
  1962  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1963  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1964  00C2  085A               	movf	main@i,w
  1965  00C3  118A  267F  118A   	fcall	_LEDInit
  1966                           
  1967                           ;Sensore.c: 53: SPIInit(i);
  1968  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1969  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1970  00C8  085A               	movf	main@i,w
  1971  00C9  118A  2424  118A   	fcall	_SPIInit
  1972                           
  1973                           ;Sensore.c: 54: CC1Init(i);
  1974  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1975  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1976  00CE  085A               	movf	main@i,w
  1977  00CF  118A  22E3  118A   	fcall	_CC1Init
  1978                           
  1979                           ;Sensore.c: 55: RTXInit(i);
  1980  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1981  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1982  00D4  085A               	movf	main@i,w
  1983  00D5  118A  2390  118A   	fcall	_RTXInit
  1984                           
  1985                           ;Sensore.c: 56: PGMInit(i);
  1986  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1987  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1988  00DA  085A               	movf	main@i,w
  1989  00DB  118A  25C6  118A   	fcall	_PGMInit
  1990                           
  1991                           ;Sensore.c: 57: ADCInit(i);
  1992  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1993  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1994  00E0  085A               	movf	main@i,w
  1995  00E1  118A  23B7  118A   	fcall	_ADCInit
  1996  00E4  3001               	movlw	1
  1997  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1998  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1999  00E7  00D9               	movwf	??_main
  2000  00E8  0859               	movf	??_main,w
  2001  00E9  07DA               	addwf	main@i,f
  2002  00EA  3003               	movlw	3
  2003  00EB  025A               	subwf	main@i,w
  2004  00EC  1C03               	skipc
  2005  00ED  28A7               	goto	l547
  2006  00EE                     l548:	
  2007                           
  2008                           ;Sensore.c: 58: }
  2009                           ;Sensore.c: 61: INTCONbits.GIE=1;
  2010  00EE  178B               	bsf	11,7	;volatile
  2011  00EF                     l549:	
  2012                           ;Sensore.c: 64: while(1)
  2013                           
  2014  00EF  0064               	clrwdt	;# 
  2015                           
  2016                           ;Sensore.c: 68: SYSTask();
  2017  00F0  118A  224C  118A   	fcall	_SYSTask
  2018                           
  2019                           ;Sensore.c: 69: DINTask();
  2020  00F3  118A  2523  118A   	fcall	_DINTask
  2021                           
  2022                           ;Sensore.c: 70: ADCTask();
  2023  00F6  118A  2036  118A   	fcall	_ADCTask
  2024                           
  2025                           ;Sensore.c: 71: RTXTask();
  2026  00F9  118A  26A5  118A   	fcall	_RTXTask
  2027  00FC  28EF               	goto	l549
  2028  00FD                     __end_of_main:	
  2029                           
  2030                           	psect	text1
  2031  024C                     __ptext1:	
  2032 ;; *************** function _SYSTask *****************
  2033 ;; Defined at:
  2034 ;;		line 44 in file "SYS.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  i               1   18[BANK0 ] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;		None               void
  2041 ;; Registers used:
  2042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2048 ;;      Params:         0       0       0       0
  2049 ;;      Locals:         0       1       0       0
  2050 ;;      Temps:          0       1       0       0
  2051 ;;      Totals:         0       2       0       0
  2052 ;;Total ram usage:        2 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    7
  2055 ;; This function calls:
  2056 ;;		_CC1Init
  2057 ;;		_DINTick
  2058 ;;		_SLPSleep
  2059 ;;		_PGMSelLong
  2060 ;;		_RTXTick
  2061 ;; This function is called by:
  2062 ;;		_main
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _SYSTask
  2068  024C                     _SYSTask:	
  2069                           
  2070                           ;SYS.c: 45: unsigned char i;
  2071                           ;SYS.c: 48: if(u_SYS_STA.TICK)
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _SYSTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2075  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2076  024D  1303               	bcf	3,6	;RP1=0, select bank0
  2077  024E  1C33               	btfss	_u_SYS_STA,0
  2078  024F  2A57               	goto	l2684
  2079                           
  2080                           ;SYS.c: 49: {
  2081                           ;SYS.c: 51: u_SYS_STA.TICK=0;
  2082  0250  1033               	bcf	_u_SYS_STA,0
  2083                           
  2084                           ;SYS.c: 54: RTXTick();
  2085  0251  118A  2489  118A   	fcall	_RTXTick
  2086                           
  2087                           ;SYS.c: 55: DINTick();
  2088  0254  118A  2368  118A   	fcall	_DINTick
  2089  0257                     l2684:	
  2090                           
  2091                           ;SYS.c: 56: }
  2092                           ;SYS.c: 58: if(u_in_ev_long.sel)
  2093  0257  1283               	bcf	3,5	;RP0=0, select bank0
  2094  0258  1303               	bcf	3,6	;RP1=0, select bank0
  2095  0259  1C35               	btfss	_u_in_ev_long,0
  2096  025A  2A5F               	goto	l2690
  2097                           
  2098                           ;SYS.c: 59: {
  2099                           ;SYS.c: 61: u_in_ev_long.sel=0;
  2100  025B  1035               	bcf	_u_in_ev_long,0
  2101                           
  2102                           ;SYS.c: 62: PGMSelLong();
  2103  025C  118A  2637  118A   	fcall	_PGMSelLong
  2104  025F                     l2690:	
  2105                           
  2106                           ;SYS.c: 63: }
  2107                           ;SYS.c: 65: if(rtx_ev.sleep && (!(!PORTBbits.RB2)))
  2108  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2109  0260  1303               	bcf	3,6	;RP1=0, select bank0
  2110  0261  0825               	movf	_rtx_ev+1,w
  2111  0262  0424               	iorwf	_rtx_ev,w
  2112  0263  1D03               	btfss	3,2
  2113  0264  1D06               	btfss	6,2	;volatile
  2114  0265  2A6B               	goto	l2698
  2115                           
  2116                           ;SYS.c: 66: {
  2117                           ;SYS.c: 68: rtx_ev.sleep=0;
  2118  0266  01A4               	clrf	_rtx_ev
  2119  0267  01A5               	clrf	_rtx_ev+1
  2120                           
  2121                           ;SYS.c: 70: SLPSleep();
  2122  0268  118A  20FD  118A   	fcall	_SLPSleep
  2123  026B                     l2698:	
  2124                           
  2125                           ;SYS.c: 71: }
  2126                           ;SYS.c: 73: if(flg_slp.exitSleep)
  2127  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2128  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2129  026D  1C2B               	btfss	_flg_slp,0
  2130  026E  0008               	return
  2131                           
  2132                           ;SYS.c: 74: {
  2133                           ;SYS.c: 76: flg_slp.exitSleep=0;
  2134  026F  102B               	bcf	_flg_slp,0
  2135                           
  2136                           ;SYS.c: 78: for(i=0;i<3;i++)
  2137  0270  01D8               	clrf	SYSTask@i
  2138  0271                     L1:	
  2139  0271  3003               	movlw	3
  2140  0272  0258               	subwf	SYSTask@i,w
  2141  0273  1803               	btfsc	3,0
  2142  0274  0008               	return
  2143                           
  2144                           ;SYS.c: 79: CC1Init(i);
  2145  0275  0858               	movf	SYSTask@i,w
  2146  0276  118A  22E3  118A   	fcall	_CC1Init
  2147  0279  3001               	movlw	1
  2148  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2149  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2150  027C  00D7               	movwf	??_SYSTask
  2151  027D  0857               	movf	??_SYSTask,w
  2152  027E  07D8               	addwf	SYSTask@i,f
  2153  027F  2A71               	goto	L1
  2154  0280                     __end_of_SYSTask:	
  2155                           
  2156                           	psect	text2
  2157  0489                     __ptext2:	
  2158 ;; *************** function _RTXTick *****************
  2159 ;; Defined at:
  2160 ;;		line 79 in file "RTX.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;		None
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;		None               void
  2167 ;; Registers used:
  2168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2174 ;;      Params:         0       0       0       0
  2175 ;;      Locals:         0       0       0       0
  2176 ;;      Temps:          0       0       0       0
  2177 ;;      Totals:         0       0       0       0
  2178 ;;Total ram usage:        0 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    6
  2181 ;; This function calls:
  2182 ;;		_RTXSendData
  2183 ;; This function is called by:
  2184 ;;		_SYSTask
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function _RTXTick
  2190  0489                     _RTXTick:	
  2191                           
  2192                           ;RTX.c: 81: if(tmrRcvPkt)
  2193                           
  2194                           ;incstack = 0
  2195                           ; Regs used in _RTXTick: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2196  0489  1283               	bcf	3,5	;RP0=0, select bank0
  2197  048A  1303               	bcf	3,6	;RP1=0, select bank0
  2198  048B  0832               	movf	_tmrRcvPkt,w
  2199  048C  1903               	btfsc	3,2
  2200  048D  2C98               	goto	l2600
  2201                           
  2202                           ;RTX.c: 82: {
  2203                           ;RTX.c: 83: tmrRcvPkt--;
  2204  048E  3001               	movlw	1
  2205  048F  02B2               	subwf	_tmrRcvPkt,f
  2206                           
  2207                           ;RTX.c: 84: if(!(tmrRcvPkt))
  2208  0490  08B2               	movf	_tmrRcvPkt,f
  2209  0491  1D03               	skipz
  2210  0492  2C98               	goto	l2600
  2211                           
  2212                           ;RTX.c: 85: RTXSendData();
  2213  0493  118A  2280  118A   	fcall	_RTXSendData
  2214  0496  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0497  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0498                     l2600:	
  2217                           
  2218                           ;RTX.c: 86: }
  2219                           ;RTX.c: 89: if(tmrPgm)
  2220  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2222  049A  0831               	movf	_tmrPgm,w
  2223  049B  1903               	btfsc	3,2
  2224  049C  0008               	return
  2225                           
  2226                           ;RTX.c: 90: {
  2227                           ;RTX.c: 91: tmrPgm--;
  2228  049D  3001               	movlw	1
  2229  049E  02B1               	subwf	_tmrPgm,f
  2230                           
  2231                           ;RTX.c: 92: if(!(tmrPgm))
  2232  049F  08B1               	movf	_tmrPgm,f
  2233  04A0  1D03               	skipz
  2234  04A1  0008               	return
  2235                           
  2236                           ;RTX.c: 93: {
  2237                           ;RTX.c: 95: rtx_flg.pgmRq=0;
  2238  04A2  102C               	bcf	_rtx_flg,0
  2239                           
  2240                           ;RTX.c: 97: cntSndData=0;
  2241  04A3  01AA               	clrf	_cntSndData
  2242                           
  2243                           ;RTX.c: 99: RTXSendData();
  2244  04A4  118A  2280         	fcall	_RTXSendData
  2245  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2246  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2247  04A8  0008               	return
  2248  04A9                     __end_of_RTXTick:	
  2249                           
  2250                           	psect	text3
  2251  0637                     __ptext3:	
  2252 ;; *************** function _PGMSelLong *****************
  2253 ;; Defined at:
  2254 ;;		line 71 in file "PGM.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;		None               void
  2261 ;; Registers used:
  2262 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2268 ;;      Params:         0       0       0       0
  2269 ;;      Locals:         0       0       0       0
  2270 ;;      Temps:          0       1       0       0
  2271 ;;      Totals:         0       1       0       0
  2272 ;;Total ram usage:        1 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    5
  2275 ;; This function calls:
  2276 ;;		_LEDNormalFlash
  2277 ;;		_PGMWriteNvm
  2278 ;; This function is called by:
  2279 ;;		_SYSTask
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           
  2284                           ;psect for function _PGMSelLong
  2285  0637                     _PGMSelLong:	
  2286                           
  2287                           ;PGM.c: 73: pgm_cfg.sensId=TMR1L^TMR1H;
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _PGMSelLong: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2291  0637  1283               	bcf	3,5	;RP0=0, select bank0
  2292  0638  1303               	bcf	3,6	;RP1=0, select bank0
  2293  0639  080E               	movf	14,w	;volatile
  2294  063A  060F               	xorwf	15,w	;volatile
  2295  063B  00CF               	movwf	??_PGMSelLong
  2296  063C  084F               	movf	??_PGMSelLong,w
  2297  063D  00BA               	movwf	_pgm_cfg+3
  2298                           
  2299                           ;PGM.c: 75: pgm_cfg.menu=0x01;
  2300  063E  01B9               	clrf	_pgm_cfg+2
  2301  063F  0AB9               	incf	_pgm_cfg+2,f
  2302                           
  2303                           ;PGM.c: 77: PGMWriteNvm();
  2304  0640  118A  2656  118A   	fcall	_PGMWriteNvm
  2305                           
  2306                           ;PGM.c: 79: LEDNormalFlash(3);
  2307  0643  3003               	movlw	3
  2308  0644  118A  23DC         	fcall	_LEDNormalFlash
  2309  0646  0008               	return
  2310  0647                     __end_of_PGMSelLong:	
  2311                           
  2312                           	psect	text4
  2313  00FD                     __ptext4:	
  2314 ;; *************** function _SLPSleep *****************
  2315 ;; Defined at:
  2316 ;;		line 7 in file "SLP.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;		None
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  OPTION_REGTm    1   10[BANK0 ] unsigned char 
  2321 ;;  WDTCONTmp       1    9[BANK0 ] unsigned char 
  2322 ;;  WPUBTmp         1    8[BANK0 ] unsigned char 
  2323 ;;  INTCONTmp       1    7[BANK0 ] unsigned char 
  2324 ;;  IOCBTmp         1    6[BANK0 ] unsigned char 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;		None               void
  2327 ;; Registers used:
  2328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2334 ;;      Params:         0       0       0       0
  2335 ;;      Locals:         0       5       0       0
  2336 ;;      Temps:          0       1       0       0
  2337 ;;      Totals:         0       6       0       0
  2338 ;;Total ram usage:        6 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    5
  2341 ;; This function calls:
  2342 ;;		_CC1Sleep
  2343 ;; This function is called by:
  2344 ;;		_SYSTask
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           
  2349                           ;psect for function _SLPSleep
  2350  00FD                     _SLPSleep:	
  2351                           
  2352                           ;SLP.c: 8: unsigned char IOCBTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp;
  2353                           ;SLP.c: 10: CC1Sleep();
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _SLPSleep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2357  00FD  118A  268B  118A   	fcall	_CC1Sleep
  2358                           
  2359                           ;SLP.c: 12: IOCBTmp=IOCB;
  2360  0100  1683               	bsf	3,5	;RP0=1, select bank1
  2361  0101  1303               	bcf	3,6	;RP1=0, select bank1
  2362  0102  0816               	movf	22,w	;volatile
  2363  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2364  0104  1303               	bcf	3,6	;RP1=0, select bank0
  2365  0105  00CB               	movwf	??_SLPSleep
  2366  0106  084B               	movf	??_SLPSleep,w
  2367  0107  00CC               	movwf	SLPSleep@IOCBTmp
  2368                           
  2369                           ;SLP.c: 13: IOCB=0b00000100;
  2370  0108  3004               	movlw	4
  2371  0109  1683               	bsf	3,5	;RP0=1, select bank1
  2372  010A  1303               	bcf	3,6	;RP1=0, select bank1
  2373  010B  0096               	movwf	22	;volatile
  2374                           
  2375                           ;SLP.c: 14: INTCONTmp=INTCON;
  2376  010C  080B               	movf	11,w	;volatile
  2377  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2378  010E  1303               	bcf	3,6	;RP1=0, select bank0
  2379  010F  00CB               	movwf	??_SLPSleep
  2380  0110  084B               	movf	??_SLPSleep,w
  2381  0111  00CD               	movwf	SLPSleep@INTCONTmp
  2382                           
  2383                           ;SLP.c: 15: INTCON=0b10001000;
  2384  0112  3088               	movlw	136
  2385  0113  008B               	movwf	11	;volatile
  2386                           
  2387                           ;SLP.c: 17: WPUBTmp=WPUB;
  2388  0114  1683               	bsf	3,5	;RP0=1, select bank1
  2389  0115  1303               	bcf	3,6	;RP1=0, select bank1
  2390  0116  0815               	movf	21,w	;volatile
  2391  0117  1283               	bcf	3,5	;RP0=0, select bank0
  2392  0118  1303               	bcf	3,6	;RP1=0, select bank0
  2393  0119  00CB               	movwf	??_SLPSleep
  2394  011A  084B               	movf	??_SLPSleep,w
  2395  011B  00CE               	movwf	SLPSleep@WPUBTmp
  2396                           
  2397                           ;SLP.c: 18: WPUB=0b00000100;
  2398  011C  3004               	movlw	4
  2399  011D  1683               	bsf	3,5	;RP0=1, select bank1
  2400  011E  1303               	bcf	3,6	;RP1=0, select bank1
  2401  011F  0095               	movwf	21	;volatile
  2402                           
  2403                           ;SLP.c: 20: WDTCONTmp=WDTCON;
  2404  0120  1283               	bcf	3,5	;RP0=0, select bank2
  2405  0121  1703               	bsf	3,6	;RP1=1, select bank2
  2406  0122  0805               	movf	5,w	;volatile
  2407  0123  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0124  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0125  00CB               	movwf	??_SLPSleep
  2410  0126  084B               	movf	??_SLPSleep,w
  2411  0127  00CF               	movwf	SLPSleep@WDTCONTmp
  2412                           
  2413                           ;SLP.c: 21: WDTCON=0b00010111;
  2414  0128  3017               	movlw	23
  2415  0129  1283               	bcf	3,5	;RP0=0, select bank2
  2416  012A  1703               	bsf	3,6	;RP1=1, select bank2
  2417  012B  0085               	movwf	5	;volatile
  2418                           
  2419                           ;SLP.c: 23: OPTION_REGTmp=OPTION_REG;
  2420  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2421  012D  1303               	bcf	3,6	;RP1=0, select bank1
  2422  012E  0801               	movf	1,w	;volatile
  2423  012F  1283               	bcf	3,5	;RP0=0, select bank0
  2424  0130  1303               	bcf	3,6	;RP1=0, select bank0
  2425  0131  00CB               	movwf	??_SLPSleep
  2426  0132  084B               	movf	??_SLPSleep,w
  2427  0133  00D0               	movwf	SLPSleep@OPTION_REGTmp
  2428                           
  2429                           ;SLP.c: 24: OPTION_REG=0b00001010;
  2430  0134  300A               	movlw	10
  2431  0135  1683               	bsf	3,5	;RP0=1, select bank1
  2432  0136  1303               	bcf	3,6	;RP1=0, select bank1
  2433  0137  0081               	movwf	1	;volatile
  2434  0138  0064               	clrwdt	;# 
  2435  0139  0063               	sleep	;# 
  2436                           
  2437                           ;SLP.c: 29: IOCB=IOCBTmp;
  2438  013A  1283               	bcf	3,5	;RP0=0, select bank0
  2439  013B  1303               	bcf	3,6	;RP1=0, select bank0
  2440  013C  084C               	movf	SLPSleep@IOCBTmp,w
  2441  013D  1683               	bsf	3,5	;RP0=1, select bank1
  2442  013E  1303               	bcf	3,6	;RP1=0, select bank1
  2443  013F  0096               	movwf	22	;volatile
  2444                           
  2445                           ;SLP.c: 30: INTCON=INTCONTmp;
  2446  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2447  0141  1303               	bcf	3,6	;RP1=0, select bank0
  2448  0142  084D               	movf	SLPSleep@INTCONTmp,w
  2449  0143  008B               	movwf	11	;volatile
  2450                           
  2451                           ;SLP.c: 31: WPUB=WPUBTmp;
  2452  0144  084E               	movf	SLPSleep@WPUBTmp,w
  2453  0145  1683               	bsf	3,5	;RP0=1, select bank1
  2454  0146  1303               	bcf	3,6	;RP1=0, select bank1
  2455  0147  0095               	movwf	21	;volatile
  2456                           
  2457                           ;SLP.c: 32: WDTCON=WDTCONTmp;
  2458  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2459  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2460  014A  084F               	movf	SLPSleep@WDTCONTmp,w
  2461  014B  1283               	bcf	3,5	;RP0=0, select bank2
  2462  014C  1703               	bsf	3,6	;RP1=1, select bank2
  2463  014D  0085               	movwf	5	;volatile
  2464                           
  2465                           ;SLP.c: 33: OPTION_REG=OPTION_REGTmp;
  2466  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2467  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2468  0150  0850               	movf	SLPSleep@OPTION_REGTmp,w
  2469  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2470  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2471  0153  0081               	movwf	1	;volatile
  2472                           
  2473                           ;SLP.c: 35: flg_slp.exitSleep=1;
  2474  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0156  142B               	bsf	_flg_slp,0
  2477  0157  0008               	return
  2478  0158                     __end_of_SLPSleep:	
  2479                           
  2480                           	psect	text5
  2481  068B                     __ptext5:	
  2482 ;; *************** function _CC1Sleep *****************
  2483 ;; Defined at:
  2484 ;;		line 144 in file "CC1.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;		None               void
  2491 ;; Registers used:
  2492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2498 ;;      Params:         0       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          0       0       0       0
  2501 ;;      Totals:         0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    4
  2505 ;; This function calls:
  2506 ;;		_CC1Strobe
  2507 ;; This function is called by:
  2508 ;;		_SLPSleep
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _CC1Sleep
  2514  068B                     _CC1Sleep:	
  2515                           
  2516                           ;CC1.c: 146: PORTAbits.RA5=0;
  2517                           
  2518                           ;incstack = 0
  2519                           ; Regs used in _CC1Sleep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2520  068B  1283               	bcf	3,5	;RP0=0, select bank0
  2521  068C  1303               	bcf	3,6	;RP1=0, select bank0
  2522  068D  1285               	bcf	5,5	;volatile
  2523                           
  2524                           ;CC1.c: 148: CC1Strobe(SWOR);
  2525  068E  3038               	movlw	56
  2526  068F  118A  25DE         	fcall	_CC1Strobe
  2527                           
  2528                           ;CC1.c: 150: PORTAbits.RA5=1;
  2529  0691  1283               	bcf	3,5	;RP0=0, select bank0
  2530  0692  1303               	bcf	3,6	;RP1=0, select bank0
  2531  0693  1685               	bsf	5,5	;volatile
  2532  0694  0008               	return
  2533  0695                     __end_of_CC1Sleep:	
  2534                           
  2535                           	psect	text6
  2536  0368                     __ptext6:	
  2537 ;; *************** function _DINTick *****************
  2538 ;; Defined at:
  2539 ;;		line 47 in file "DIN.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;		None
  2544 ;; Return value:  Size  Location     Type
  2545 ;;		None               void
  2546 ;; Registers used:
  2547 ;;		wreg, status,2, status,0
  2548 ;; Tracked objects:
  2549 ;;		On entry : 0/0
  2550 ;;		On exit  : 0/0
  2551 ;;		Unchanged: 0/0
  2552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2553 ;;      Params:         0       0       0       0
  2554 ;;      Locals:         0       0       0       0
  2555 ;;      Temps:          1       0       0       0
  2556 ;;      Totals:         1       0       0       0
  2557 ;;Total ram usage:        1 bytes
  2558 ;; Hardware stack levels used:    1
  2559 ;; Hardware stack levels required when called:    2
  2560 ;; This function calls:
  2561 ;;		Nothing
  2562 ;; This function is called by:
  2563 ;;		_SYSTask
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           
  2568                           ;psect for function _DINTick
  2569  0368                     _DINTick:	
  2570                           
  2571                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  2575  0368  1C77               	btfss	_u_flg_din,0
  2576  0369  2B7B               	goto	l235
  2577                           
  2578                           ;DIN.c: 51: {
  2579                           ;DIN.c: 52: tmrDbncSel++;
  2580  036A  3001               	movlw	1
  2581  036B  00F4               	movwf	??_DINTick
  2582  036C  0874               	movf	??_DINTick,w
  2583  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2584  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2585  036F  07B0               	addwf	_tmrDbncSel,f
  2586                           
  2587                           ;DIN.c: 53: if(tmrDbncSel>5)
  2588  0370  3006               	movlw	6
  2589  0371  0230               	subwf	_tmrDbncSel,w
  2590  0372  1C03               	skipc
  2591  0373  2B7B               	goto	l235
  2592                           
  2593                           ;DIN.c: 54: {
  2594                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  2595  0374  1077               	bcf	_u_flg_din,0
  2596                           
  2597                           ;DIN.c: 56: tmrDbncSel=0;
  2598  0375  01B0               	clrf	_tmrDbncSel
  2599                           
  2600                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  2601  0376  1C78               	btfss	_u_in_sta_currTask,0
  2602  0377  2B7A               	goto	l237
  2603                           
  2604                           ;DIN.c: 59: u_in_ev_down.sel=1;
  2605  0378  1434               	bsf	_u_in_ev_down,0
  2606  0379  2B7B               	goto	l235
  2607  037A                     l237:	
  2608                           
  2609                           ;DIN.c: 60: else
  2610                           ;DIN.c: 61: u_in_ev_up.sel=1;
  2611  037A  1436               	bsf	_u_in_ev_up,0
  2612  037B                     l235:	
  2613                           
  2614                           ;DIN.c: 62: }
  2615                           ;DIN.c: 63: }
  2616                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  2617  037B  1CF7               	btfss	_u_flg_din,1
  2618  037C  0008               	return
  2619                           
  2620                           ;DIN.c: 67: {
  2621                           ;DIN.c: 68: tmrLongSel++;
  2622  037D  3001               	movlw	1
  2623  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2624  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2625  0380  07A6               	addwf	_tmrLongSel,f
  2626  0381  1803               	skipnc
  2627  0382  0AA7               	incf	_tmrLongSel+1,f
  2628  0383  3000               	movlw	0
  2629  0384  07A7               	addwf	_tmrLongSel+1,f
  2630                           
  2631                           ;DIN.c: 69: if(tmrLongSel>200)
  2632  0385  3000               	movlw	0
  2633  0386  0227               	subwf	_tmrLongSel+1,w
  2634  0387  30C9               	movlw	201
  2635  0388  1903               	skipnz
  2636  0389  0226               	subwf	_tmrLongSel,w
  2637  038A  1C03               	skipc
  2638  038B  0008               	return
  2639                           
  2640                           ;DIN.c: 70: {
  2641                           ;DIN.c: 72: tmrLongSel=0;
  2642  038C  01A6               	clrf	_tmrLongSel
  2643  038D  01A7               	clrf	_tmrLongSel+1
  2644                           
  2645                           ;DIN.c: 74: u_in_ev_long.sel=1;
  2646  038E  1435               	bsf	_u_in_ev_long,0
  2647  038F  0008               	return
  2648  0390                     __end_of_DINTick:	
  2649                           
  2650                           	psect	text7
  2651  02E3                     __ptext7:	
  2652 ;; *************** function _CC1Init *****************
  2653 ;; Defined at:
  2654 ;;		line 74 in file "CC1.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  state           1    wreg     unsigned char 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  state           1    9[BANK0 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;		None               void
  2661 ;; Registers used:
  2662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2668 ;;      Params:         0       0       0       0
  2669 ;;      Locals:         0       1       0       0
  2670 ;;      Temps:          0       2       0       0
  2671 ;;      Totals:         0       3       0       0
  2672 ;;Total ram usage:        3 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    4
  2675 ;; This function calls:
  2676 ;;		_CC1Strobe
  2677 ;;		_CC1Write
  2678 ;; This function is called by:
  2679 ;;		_SYSTask
  2680 ;;		_main
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           
  2685                           ;psect for function _CC1Init
  2686  02E3                     _CC1Init:	
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in _CC1Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2690                           ;CC1Init@state stored from wreg
  2691  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2692  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2693  02E5  00CF               	movwf	CC1Init@state
  2694                           
  2695                           ;CC1.c: 75: switch(state)
  2696  02E6  2B07               	goto	l2394
  2697  02E7                     l2390:	
  2698                           ;CC1.c: 83: case 2:
  2699                           
  2700                           ;CC1.c: 82: break;
  2701                           
  2702                           ;CC1.c: 76: {
  2703                           ;CC1.c: 80: case 1:
  2704                           
  2705                           
  2706                           ;CC1.c: 85: CC1Strobe(SRES);
  2707  02E7  3030               	movlw	48
  2708  02E8  118A  25DE  118A   	fcall	_CC1Strobe
  2709                           
  2710                           ;CC1.c: 86: CC1Write(0x00,cc1InitVal,0x2E);
  2711  02EB  30A0               	movlw	_cc1InitVal& (0+255)
  2712  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2713  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2714  02EE  00CD               	movwf	??_CC1Init
  2715  02EF  084D               	movf	??_CC1Init,w
  2716  02F0  00C8               	movwf	?_CC1Write
  2717  02F1  302E               	movlw	46
  2718  02F2  00CE               	movwf	??_CC1Init+1
  2719  02F3  084E               	movf	??_CC1Init+1,w
  2720  02F4  00C9               	movwf	?_CC1Write+1
  2721  02F5  3000               	movlw	0
  2722  02F6  118A  2506  118A   	fcall	_CC1Write
  2723                           
  2724                           ;CC1.c: 87: CC1Write(0x3E,cc1PaTable,8);
  2725  02F9  305B               	movlw	_cc1PaTable& (0+255)
  2726  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2727  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  2728  02FC  00CD               	movwf	??_CC1Init
  2729  02FD  084D               	movf	??_CC1Init,w
  2730  02FE  00C8               	movwf	?_CC1Write
  2731  02FF  3008               	movlw	8
  2732  0300  00CE               	movwf	??_CC1Init+1
  2733  0301  084E               	movf	??_CC1Init+1,w
  2734  0302  00C9               	movwf	?_CC1Write+1
  2735  0303  303E               	movlw	62
  2736  0304  118A  2506         	fcall	_CC1Write
  2737                           
  2738                           ;CC1.c: 89: }
  2739                           
  2740                           ;CC1.c: 88: break;
  2741  0306  0008               	return
  2742  0307                     l2394:	
  2743  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2744  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2745  0309  084F               	movf	CC1Init@state,w
  2746                           
  2747                           ; Switch size 1, requested type "space"
  2748                           ; Number of cases is 2, Range of values is 1 to 2
  2749                           ; switch strategies available:
  2750                           ; Name         Instructions Cycles
  2751                           ; simple_byte            7     4 (average)
  2752                           ; direct_byte           14    10 (fixed)
  2753                           ; jumptable            263     9 (fixed)
  2754                           ;	Chosen strategy is simple_byte
  2755  030A  3A01               	xorlw	1	; case 1
  2756  030B  1903               	skipnz
  2757  030C  2B11               	goto	l158
  2758  030D  3A03               	xorlw	3	; case 2
  2759  030E  1903               	skipnz
  2760  030F  2AE7               	goto	l2390
  2761  0310  2B11               	goto	l158
  2762  0311                     l158:	
  2763  0311  0008               	return
  2764  0312                     __end_of_CC1Init:	
  2765                           
  2766                           	psect	text8
  2767  0312                     __ptext8:	
  2768 ;; *************** function _SYSInit *****************
  2769 ;; Defined at:
  2770 ;;		line 17 in file "SYS.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;  state           1    wreg     unsigned char 
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;  state           1    5[COMMON] unsigned char 
  2775 ;; Return value:  Size  Location     Type
  2776 ;;		None               void
  2777 ;; Registers used:
  2778 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2784 ;;      Params:         0       0       0       0
  2785 ;;      Locals:         1       0       0       0
  2786 ;;      Temps:          1       0       0       0
  2787 ;;      Totals:         2       0       0       0
  2788 ;;Total ram usage:        2 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    2
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_main
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           
  2799                           ;psect for function _SYSInit
  2800  0312                     _SYSInit:	
  2801                           
  2802                           ;incstack = 0
  2803                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  2804                           ;SYSInit@state stored from wreg
  2805  0312  00F5               	movwf	SYSInit@state
  2806                           
  2807                           ;SYS.c: 18: switch(state)
  2808  0313  2B35               	goto	l2224
  2809  0314                     l2202:	
  2810                           ;SYS.c: 19: {
  2811                           ;SYS.c: 20: case 0:
  2812                           
  2813                           
  2814                           ;SYS.c: 22: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; IOCB=0b00000000
      +                          ; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000
      +                          ; PIE1=0b00000000; PIE2=0b00000000;
  2815  0314  3006               	movlw	6
  2816  0315  1683               	bsf	3,5	;RP0=1, select bank1
  2817  0316  1303               	bcf	3,6	;RP1=0, select bank1
  2818  0317  0081               	movwf	1	;volatile
  2819  0318  3071               	movlw	113
  2820  0319  008F               	movwf	15	;volatile
  2821  031A  3009               	movlw	9
  2822  031B  1283               	bcf	3,5	;RP0=0, select bank2
  2823  031C  1703               	bsf	3,6	;RP1=1, select bank2
  2824  031D  0085               	movwf	5	;volatile
  2825  031E  1683               	bsf	3,5	;RP0=1, select bank1
  2826  031F  1303               	bcf	3,6	;RP1=0, select bank1
  2827  0320  0196               	clrf	22	;volatile
  2828  0321  3063               	movlw	99
  2829  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2831  0324  0081               	movwf	1	;volatile
  2832  0325  168B               	bsf	11,5	;volatile
  2833  0326  30FB               	movlw	251
  2834  0327  00F4               	movwf	??_SYSInit
  2835  0328  0874               	movf	??_SYSInit,w
  2836  0329  058B               	andwf	11,f	;volatile
  2837  032A  018C               	clrf	12	;volatile
  2838  032B  018D               	clrf	13	;volatile
  2839  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2840  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2841  032E  018C               	clrf	12	;volatile
  2842  032F  018D               	clrf	13	;volatile
  2843                           
  2844                           ;SYS.c: 23: break;
  2845  0330  0008               	return
  2846  0331                     l2220:	
  2847                           ;SYS.c: 24: case 1:
  2848                           
  2849                           
  2850                           ;SYS.c: 26: u_SYS_STA.VAL=0;
  2851  0331  1283               	bcf	3,5	;RP0=0, select bank0
  2852  0332  1303               	bcf	3,6	;RP1=0, select bank0
  2853  0333  01B3               	clrf	_u_SYS_STA
  2854                           
  2855                           ;SYS.c: 31: }
  2856                           
  2857                           ;SYS.c: 27: break;
  2858  0334  0008               	return
  2859  0335                     l2224:	
  2860  0335  0875               	movf	SYSInit@state,w
  2861                           
  2862                           ; Switch size 1, requested type "space"
  2863                           ; Number of cases is 2, Range of values is 0 to 1
  2864                           ; switch strategies available:
  2865                           ; Name         Instructions Cycles
  2866                           ; simple_byte            7     4 (average)
  2867                           ; direct_byte           11     7 (fixed)
  2868                           ; jumptable            260     6 (fixed)
  2869                           ;	Chosen strategy is simple_byte
  2870  0336  3A00               	xorlw	0	; case 0
  2871  0337  1903               	skipnz
  2872  0338  2B14               	goto	l2202
  2873  0339  3A01               	xorlw	1	; case 1
  2874  033A  1903               	skipnz
  2875  033B  2B31               	goto	l2220
  2876  033C  2B3D               	goto	l476
  2877  033D                     l476:	
  2878  033D  0008               	return
  2879  033E                     __end_of_SYSInit:	
  2880                           
  2881                           	psect	text9
  2882  06A5                     __ptext9:	
  2883 ;; *************** function _RTXTask *****************
  2884 ;; Defined at:
  2885 ;;		line 105 in file "RTX.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;		None               void
  2892 ;; Registers used:
  2893 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2899 ;;      Params:         0       0       0       0
  2900 ;;      Locals:         0       0       0       0
  2901 ;;      Temps:          0       0       0       0
  2902 ;;      Totals:         0       0       0       0
  2903 ;;Total ram usage:        0 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    7
  2906 ;; This function calls:
  2907 ;;		_RTXReadPkt
  2908 ;; This function is called by:
  2909 ;;		_main
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           
  2914                           ;psect for function _RTXTask
  2915  06A5                     _RTXTask:	
  2916                           
  2917                           ;RTX.c: 107: if(!(PORTBbits.RB0))
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in _RTXTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2921  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  2922  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  2923  06A7  1806               	btfsc	6,0	;volatile
  2924  06A8  0008               	return
  2925                           
  2926                           ;RTX.c: 108: RTXReadPkt();
  2927  06A9  118A  2158         	fcall	_RTXReadPkt
  2928  06AB  0008               	return
  2929  06AC                     __end_of_RTXTask:	
  2930                           
  2931                           	psect	text10
  2932  0158                     __ptext10:	
  2933 ;; *************** function _RTXReadPkt *****************
  2934 ;; Defined at:
  2935 ;;		line 142 in file "RTX.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;  numRxByte       1   18[BANK0 ] unsigned char 
  2940 ;; Return value:  Size  Location     Type
  2941 ;;		None               void
  2942 ;; Registers used:
  2943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2949 ;;      Params:         0       0       0       0
  2950 ;;      Locals:         0       1       0       0
  2951 ;;      Temps:          0       1       0       0
  2952 ;;      Totals:         0       2       0       0
  2953 ;;Total ram usage:        2 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    6
  2956 ;; This function calls:
  2957 ;;		_CC1Strobe
  2958 ;;		_CC1Read
  2959 ;;		_LEDNormalFlash
  2960 ;;		_PGMWriteNvm
  2961 ;;		_RTXSendData
  2962 ;;		_RTXRcvPkt
  2963 ;;		_RTXSendRPgm
  2964 ;; This function is called by:
  2965 ;;		_RTXTask
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           
  2970                           ;psect for function _RTXReadPkt
  2971  0158                     _RTXReadPkt:	
  2972  0158                     l2656:	
  2973                           
  2974                           ;RTX.c: 193: }
  2975                           ;RTX.c: 194: }
  2976                           ;RTX.c: 195: }
  2977                           ;RTX.c: 197: CC1Read(0x3B,(&(numRxByte)),1);
  2978  0158  3058               	movlw	RTXReadPkt@numRxByte& (0+255)
  2979  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2980  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2981  015B  00D7               	movwf	??_RTXReadPkt
  2982  015C  0857               	movf	??_RTXReadPkt,w
  2983  015D  00CA               	movwf	?_CC1Read
  2984  015E  01CB               	clrf	?_CC1Read+1
  2985  015F  0ACB               	incf	?_CC1Read+1,f
  2986  0160  303B               	movlw	59
  2987  0161  118A  24E9  118A   	fcall	_CC1Read
  2988  0164  3005               	movlw	5
  2989  0165  1283               	bcf	3,5	;RP0=0, select bank0
  2990  0166  1303               	bcf	3,6	;RP1=0, select bank0
  2991  0167  0258               	subwf	RTXReadPkt@numRxByte,w
  2992  0168  1C03               	btfss	3,0
  2993  0169  0008               	return
  2994                           
  2995                           ;RTX.c: 147: while(numRxByte>=5)
  2996                           
  2997                           ;RTX.c: 143: unsigned char numRxByte;
  2998                           ;RTX.c: 146: CC1Read(0x3B,(&(numRxByte)),1);
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in _RTXReadPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3002  016A  0064               	clrwdt	;# 
  3003                           
  3004                           ;RTX.c: 151: RTXRcvPkt(pktRx,5);
  3005  016B  3005               	movlw	5
  3006  016C  1283               	bcf	3,5	;RP0=0, select bank0
  3007  016D  1303               	bcf	3,6	;RP1=0, select bank0
  3008  016E  00D7               	movwf	??_RTXReadPkt
  3009  016F  0857               	movf	??_RTXReadPkt,w
  3010  0170  00CF               	movwf	?_RTXRcvPkt
  3011  0171  303C               	movlw	_pktRx& (0+255)
  3012  0172  118A  2647  118A   	fcall	_RTXRcvPkt
  3013                           
  3014                           ;RTX.c: 153: if(rtx_flg.pgmRq)
  3015  0175  1283               	bcf	3,5	;RP0=0, select bank0
  3016  0176  1303               	bcf	3,6	;RP1=0, select bank0
  3017  0177  1C2C               	btfss	_rtx_flg,0
  3018  0178  2997               	goto	l2642
  3019                           
  3020                           ;RTX.c: 154: {
  3021                           ;RTX.c: 155: if(pktRx[0]==0x00)
  3022  0179  08BC               	movf	_pktRx,f
  3023  017A  1D03               	skipz
  3024  017B  2958               	goto	l2656
  3025                           
  3026                           ;RTX.c: 156: {
  3027                           ;RTX.c: 158: if(pktRx[2]==PGM)
  3028  017C  083E               	movf	_pktRx+2,w
  3029  017D  3A01               	xorlw	1
  3030  017E  1D03               	skipz
  3031  017F  2958               	goto	l2656
  3032                           
  3033                           ;RTX.c: 159: {
  3034                           ;RTX.c: 161: pgm_cfg.baseId=pktRx[1];
  3035  0180  083D               	movf	_pktRx+1,w
  3036  0181  00D7               	movwf	??_RTXReadPkt
  3037  0182  0857               	movf	??_RTXReadPkt,w
  3038  0183  00BB               	movwf	_pgm_cfg+4
  3039                           
  3040                           ;RTX.c: 162: PGMWriteNvm();
  3041  0184  118A  2656  118A   	fcall	_PGMWriteNvm
  3042                           
  3043                           ;RTX.c: 164: RTXSendRPgm();
  3044  0187  118A  25AE  118A   	fcall	_RTXSendRPgm
  3045                           
  3046                           ;RTX.c: 166: rtx_flg.pgmRq=0;
  3047  018A  1283               	bcf	3,5	;RP0=0, select bank0
  3048  018B  1303               	bcf	3,6	;RP1=0, select bank0
  3049  018C  102C               	bcf	_rtx_flg,0
  3050                           
  3051                           ;RTX.c: 168: tmrRcvPkt=0;
  3052  018D  01B2               	clrf	_tmrRcvPkt
  3053                           
  3054                           ;RTX.c: 170: cntSndData=0;
  3055  018E  01AA               	clrf	_cntSndData
  3056                           
  3057                           ;RTX.c: 172: RTXSendData();
  3058  018F  118A  2280  118A   	fcall	_RTXSendData
  3059                           
  3060                           ;RTX.c: 174: LEDNormalFlash(3);
  3061  0192  3003               	movlw	3
  3062  0193  118A  23DC  118A   	fcall	_LEDNormalFlash
  3063                           
  3064                           ;RTX.c: 175: }
  3065                           ;RTX.c: 176: }
  3066                           ;RTX.c: 177: }
  3067  0196  2958               	goto	l2656
  3068  0197                     l2642:	
  3069                           
  3070                           ;RTX.c: 178: else
  3071                           ;RTX.c: 179: {
  3072                           ;RTX.c: 180: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  3073  0197  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0198  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0199  083A               	movf	_pgm_cfg+3,w
  3076  019A  063C               	xorwf	_pktRx,w
  3077  019B  1D03               	skipz
  3078  019C  2958               	goto	l2656
  3079  019D  083B               	movf	_pgm_cfg+4,w
  3080  019E  063D               	xorwf	_pktRx+1,w
  3081  019F  1D03               	skipz
  3082  01A0  2958               	goto	l2656
  3083                           
  3084                           ;RTX.c: 181: {
  3085                           ;RTX.c: 183: if(pktRx[2]==rDAT)
  3086  01A1  083E               	movf	_pktRx+2,w
  3087  01A2  3A80               	xorlw	128
  3088  01A3  1D03               	skipz
  3089  01A4  2958               	goto	l2656
  3090                           
  3091                           ;RTX.c: 184: {
  3092                           ;RTX.c: 186: CC1Strobe(SIDLE);
  3093  01A5  3036               	movlw	54
  3094  01A6  118A  25DE  118A   	fcall	_CC1Strobe
  3095                           
  3096                           ;RTX.c: 188: tmrRcvPkt=0;
  3097  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  3098  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  3099  01AB  01B2               	clrf	_tmrRcvPkt
  3100                           
  3101                           ;RTX.c: 190: cntSndData=0;
  3102  01AC  01AA               	clrf	_cntSndData
  3103                           
  3104                           ;RTX.c: 192: rtx_ev.sleep=1;
  3105  01AD  3001               	movlw	1
  3106  01AE  00A4               	movwf	_rtx_ev
  3107  01AF  3000               	movlw	0
  3108  01B0  00A5               	movwf	_rtx_ev+1
  3109  01B1  2958               	goto	l2656
  3110  01B2                     __end_of_RTXReadPkt:	
  3111                           
  3112                           	psect	text11
  3113  05AE                     __ptext11:	
  3114 ;; *************** function _RTXSendRPgm *****************
  3115 ;; Defined at:
  3116 ;;		line 230 in file "RTX.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;		None
  3121 ;; Return value:  Size  Location     Type
  3122 ;;		None               void
  3123 ;; Registers used:
  3124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3130 ;;      Params:         0       0       0       0
  3131 ;;      Locals:         0       0       0       0
  3132 ;;      Temps:          0       1       0       0
  3133 ;;      Totals:         0       1       0       0
  3134 ;;Total ram usage:        1 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    5
  3137 ;; This function calls:
  3138 ;;		_RTXSndPkt
  3139 ;; This function is called by:
  3140 ;;		_RTXReadPkt
  3141 ;; This function uses a non-reentrant model
  3142 ;;
  3143                           
  3144                           
  3145                           ;psect for function _RTXSendRPgm
  3146  05AE                     _RTXSendRPgm:	
  3147                           
  3148                           ;RTX.c: 232: pktTx[0]=pgm_cfg.baseId;
  3149                           
  3150                           ;incstack = 0
  3151                           ; Regs used in _RTXSendRPgm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3152  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3153  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  3154  05B0  083B               	movf	_pgm_cfg+4,w
  3155  05B1  00D6               	movwf	??_RTXSendRPgm
  3156  05B2  0856               	movf	??_RTXSendRPgm,w
  3157  05B3  00C1               	movwf	_pktTx
  3158                           
  3159                           ;RTX.c: 233: pktTx[1]=pgm_cfg.sensId;
  3160  05B4  083A               	movf	_pgm_cfg+3,w
  3161  05B5  00D6               	movwf	??_RTXSendRPgm
  3162  05B6  0856               	movf	??_RTXSendRPgm,w
  3163  05B7  00C2               	movwf	_pktTx+1
  3164                           
  3165                           ;RTX.c: 234: pktTx[2]=rPGM;
  3166  05B8  3081               	movlw	129
  3167  05B9  00D6               	movwf	??_RTXSendRPgm
  3168  05BA  0856               	movf	??_RTXSendRPgm,w
  3169  05BB  00C3               	movwf	_pktTx+2
  3170                           
  3171                           ;RTX.c: 235: pktTx[3]=0x00;
  3172  05BC  01C4               	clrf	_pktTx+3
  3173                           
  3174                           ;RTX.c: 236: pktTx[4]=0x00;
  3175  05BD  01C5               	clrf	_pktTx+4
  3176                           
  3177                           ;RTX.c: 239: RTXSndPkt(pktTx,5);
  3178  05BE  3005               	movlw	5
  3179  05BF  00D6               	movwf	??_RTXSendRPgm
  3180  05C0  0856               	movf	??_RTXSendRPgm,w
  3181  05C1  00CF               	movwf	?_RTXSndPkt
  3182  05C2  3041               	movlw	_pktTx& (0+255)
  3183  05C3  118A  21B2         	fcall	_RTXSndPkt
  3184  05C5  0008               	return
  3185  05C6                     __end_of_RTXSendRPgm:	
  3186                           
  3187                           	psect	text12
  3188  0647                     __ptext12:	
  3189 ;; *************** function _RTXRcvPkt *****************
  3190 ;; Defined at:
  3191 ;;		line 136 in file "RTX.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  dst             1    wreg     PTR unsigned char 
  3194 ;;		 -> pktRx(5), 
  3195 ;;  len             1    9[BANK0 ] unsigned char 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  dst             1   12[BANK0 ] PTR unsigned char 
  3198 ;;		 -> pktRx(5), 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;		None               void
  3201 ;; Registers used:
  3202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 0/0
  3205 ;;		On exit  : 0/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3208 ;;      Params:         0       1       0       0
  3209 ;;      Locals:         0       1       0       0
  3210 ;;      Temps:          0       2       0       0
  3211 ;;      Totals:         0       4       0       0
  3212 ;;Total ram usage:        4 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:    4
  3215 ;; This function calls:
  3216 ;;		_CC1Read
  3217 ;; This function is called by:
  3218 ;;		_RTXReadPkt
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           
  3223                           ;psect for function _RTXRcvPkt
  3224  0647                     _RTXRcvPkt:	
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in _RTXRcvPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3228                           ;RTXRcvPkt@dst stored from wreg
  3229  0647  1283               	bcf	3,5	;RP0=0, select bank0
  3230  0648  1303               	bcf	3,6	;RP1=0, select bank0
  3231  0649  00D2               	movwf	RTXRcvPkt@dst
  3232                           
  3233                           ;RTX.c: 138: CC1Read(0x3F,dst,len);
  3234  064A  0852               	movf	RTXRcvPkt@dst,w
  3235  064B  00D0               	movwf	??_RTXRcvPkt
  3236  064C  0850               	movf	??_RTXRcvPkt,w
  3237  064D  00CA               	movwf	?_CC1Read
  3238  064E  084F               	movf	RTXRcvPkt@len,w
  3239  064F  00D1               	movwf	??_RTXRcvPkt+1
  3240  0650  0851               	movf	??_RTXRcvPkt+1,w
  3241  0651  00CB               	movwf	?_CC1Read+1
  3242  0652  303F               	movlw	63
  3243  0653  118A  24E9         	fcall	_CC1Read
  3244  0655  0008               	return
  3245  0656                     __end_of_RTXRcvPkt:	
  3246                           
  3247                           	psect	text13
  3248  03DC                     __ptext13:	
  3249 ;; *************** function _LEDNormalFlash *****************
  3250 ;; Defined at:
  3251 ;;		line 25 in file "LED.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  num             1    wreg     unsigned char 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  num             1    5[BANK0 ] unsigned char 
  3256 ;;  i               1    6[BANK0 ] unsigned char 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;		None               void
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0, pclath, cstack
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3266 ;;      Params:         0       0       0       0
  3267 ;;      Locals:         0       2       0       0
  3268 ;;      Temps:          0       1       0       0
  3269 ;;      Totals:         0       3       0       0
  3270 ;;Total ram usage:        3 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    3
  3273 ;; This function calls:
  3274 ;;		_DLYDelay_ms
  3275 ;; This function is called by:
  3276 ;;		_PGMSelLong
  3277 ;;		_RTXReadPkt
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _LEDNormalFlash
  3283  03DC                     _LEDNormalFlash:	
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  3287                           ;LEDNormalFlash@num stored from wreg
  3288  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  3289  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  3290  03DE  00CB               	movwf	LEDNormalFlash@num
  3291                           
  3292                           ;LED.c: 26: unsigned char i;
  3293                           ;LED.c: 28: for(i=0;i<num;i++)
  3294  03DF  01CC               	clrf	LEDNormalFlash@i
  3295  03E0                     l2438:	
  3296  03E0  084B               	movf	LEDNormalFlash@num,w
  3297  03E1  024C               	subwf	LEDNormalFlash@i,w
  3298  03E2  1803               	btfsc	3,0
  3299  03E3  0008               	return
  3300  03E4  0064               	clrwdt	;# 
  3301                           
  3302                           ;LED.c: 31: PORTCbits.RC7=0;
  3303  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3304  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3305  03E7  1387               	bcf	7,7	;volatile
  3306                           
  3307                           ;LED.c: 32: DLYDelay_ms(200);
  3308  03E8  30C8               	movlw	200
  3309  03E9  00F4               	movwf	?_DLYDelay_ms
  3310  03EA  3000               	movlw	0
  3311  03EB  00F5               	movwf	?_DLYDelay_ms+1
  3312  03EC  118A  2447  118A   	fcall	_DLYDelay_ms
  3313                           
  3314                           ;LED.c: 33: PORTCbits.RC7=1;
  3315  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  3316  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  3317  03F1  1787               	bsf	7,7	;volatile
  3318                           
  3319                           ;LED.c: 34: DLYDelay_ms(200);
  3320  03F2  30C8               	movlw	200
  3321  03F3  00F4               	movwf	?_DLYDelay_ms
  3322  03F4  3000               	movlw	0
  3323  03F5  00F5               	movwf	?_DLYDelay_ms+1
  3324  03F6  118A  2447  118A   	fcall	_DLYDelay_ms
  3325  03F9  3001               	movlw	1
  3326  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3327  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3328  03FC  00CA               	movwf	??_LEDNormalFlash
  3329  03FD  084A               	movf	??_LEDNormalFlash,w
  3330  03FE  07CC               	addwf	LEDNormalFlash@i,f
  3331  03FF  2BE0               	goto	l2438
  3332  0400                     __end_of_LEDNormalFlash:	
  3333                           
  3334                           	psect	text14
  3335  0390                     __ptext14:	
  3336 ;; *************** function _RTXInit *****************
  3337 ;; Defined at:
  3338 ;;		line 54 in file "RTX.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  state           1    wreg     unsigned char 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  state           1   17[BANK0 ] unsigned char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;		None               void
  3345 ;; Registers used:
  3346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3352 ;;      Params:         0       0       0       0
  3353 ;;      Locals:         0       1       0       0
  3354 ;;      Temps:          0       0       0       0
  3355 ;;      Totals:         0       1       0       0
  3356 ;;Total ram usage:        1 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    6
  3359 ;; This function calls:
  3360 ;;		_CC1Strobe
  3361 ;;		_RTXSendData
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _RTXInit
  3369  0390                     _RTXInit:	
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in _RTXInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3373                           ;RTXInit@state stored from wreg
  3374  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3375  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3376  0392  00D7               	movwf	RTXInit@state
  3377                           
  3378                           ;RTX.c: 55: switch(state)
  3379  0393  2BA9               	goto	l2570
  3380  0394                     l2564:	
  3381                           ;RTX.c: 60: case 1:
  3382                           
  3383                           ;RTX.c: 59: break;
  3384                           
  3385                           ;RTX.c: 56: {
  3386                           ;RTX.c: 57: case 0:
  3387                           
  3388                           
  3389                           ;RTX.c: 62: tmrRcvPkt=0;
  3390  0394  01B2               	clrf	_tmrRcvPkt
  3391                           
  3392                           ;RTX.c: 63: tmrPgm=0;
  3393  0395  01B1               	clrf	_tmrPgm
  3394                           
  3395                           ;RTX.c: 64: cntSndData=0;
  3396  0396  01AA               	clrf	_cntSndData
  3397                           
  3398                           ;RTX.c: 65: rtx_ev.val=0;
  3399  0397  01A4               	clrf	_rtx_ev
  3400                           
  3401                           ;RTX.c: 66: rtx_flg.val=0;
  3402  0398  01AC               	clrf	_rtx_flg
  3403                           
  3404                           ;RTX.c: 67: break;
  3405  0399  0008               	return
  3406  039A                     l2566:	
  3407                           ;RTX.c: 68: case 2:
  3408                           
  3409                           
  3410                           ;RTX.c: 70: CC1Strobe(SIDLE);
  3411  039A  3036               	movlw	54
  3412  039B  118A  25DE  118A   	fcall	_CC1Strobe
  3413                           
  3414                           ;RTX.c: 71: CC1Strobe(SCAL);
  3415  039E  3033               	movlw	51
  3416  039F  118A  25DE  118A   	fcall	_CC1Strobe
  3417                           
  3418                           ;RTX.c: 72: CC1Strobe(SRX);
  3419  03A2  3034               	movlw	52
  3420  03A3  118A  25DE  118A   	fcall	_CC1Strobe
  3421                           
  3422                           ;RTX.c: 73: RTXSendData();
  3423  03A6  118A  2280         	fcall	_RTXSendData
  3424                           
  3425                           ;RTX.c: 75: }
  3426                           
  3427                           ;RTX.c: 74: break;
  3428  03A8  0008               	return
  3429  03A9                     l2570:	
  3430  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  3431  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  3432  03AB  0857               	movf	RTXInit@state,w
  3433                           
  3434                           ; Switch size 1, requested type "space"
  3435                           ; Number of cases is 3, Range of values is 0 to 2
  3436                           ; switch strategies available:
  3437                           ; Name         Instructions Cycles
  3438                           ; simple_byte           10     6 (average)
  3439                           ; direct_byte           13     7 (fixed)
  3440                           ; jumptable            260     6 (fixed)
  3441                           ;	Chosen strategy is simple_byte
  3442  03AC  3A00               	xorlw	0	; case 0
  3443  03AD  1903               	skipnz
  3444  03AE  2BB6               	goto	l375
  3445  03AF  3A01               	xorlw	1	; case 1
  3446  03B0  1903               	skipnz
  3447  03B1  2B94               	goto	l2564
  3448  03B2  3A03               	xorlw	3	; case 2
  3449  03B3  1903               	skipnz
  3450  03B4  2B9A               	goto	l2566
  3451  03B5  2BB6               	goto	l375
  3452  03B6                     l375:	
  3453  03B6  0008               	return
  3454  03B7                     __end_of_RTXInit:	
  3455                           
  3456                           	psect	text15
  3457  0280                     __ptext15:	
  3458 ;; *************** function _RTXSendData *****************
  3459 ;; Defined at:
  3460 ;;		line 202 in file "RTX.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;		None               void
  3467 ;; Registers used:
  3468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3474 ;;      Params:         0       0       0       0
  3475 ;;      Locals:         0       0       0       0
  3476 ;;      Temps:          0       1       0       0
  3477 ;;      Totals:         0       1       0       0
  3478 ;;Total ram usage:        1 bytes
  3479 ;; Hardware stack levels used:    1
  3480 ;; Hardware stack levels required when called:    5
  3481 ;; This function calls:
  3482 ;;		_LEDFastFlash
  3483 ;;		_RTXSndPkt
  3484 ;; This function is called by:
  3485 ;;		_RTXInit
  3486 ;;		_RTXTick
  3487 ;;		_RTXReadPkt
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           
  3492                           ;psect for function _RTXSendData
  3493  0280                     _RTXSendData:	
  3494                           
  3495                           ;RTX.c: 204: if(cntSndData<5)
  3496                           
  3497                           ;incstack = 0
  3498                           ; Regs used in _RTXSendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3499  0280  3005               	movlw	5
  3500  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0283  022A               	subwf	_cntSndData,w
  3503  0284  1803               	skipnc
  3504  0285  2AAD               	goto	l2590
  3505                           
  3506                           ;RTX.c: 205: {
  3507                           ;RTX.c: 207: pktTx[0]=pgm_cfg.baseId;
  3508  0286  083B               	movf	_pgm_cfg+4,w
  3509  0287  00D6               	movwf	??_RTXSendData
  3510  0288  0856               	movf	??_RTXSendData,w
  3511  0289  00C1               	movwf	_pktTx
  3512                           
  3513                           ;RTX.c: 208: pktTx[1]=pgm_cfg.sensId;
  3514  028A  083A               	movf	_pgm_cfg+3,w
  3515  028B  00D6               	movwf	??_RTXSendData
  3516  028C  0856               	movf	??_RTXSendData,w
  3517  028D  00C2               	movwf	_pktTx+1
  3518                           
  3519                           ;RTX.c: 209: pktTx[2]=DAT;
  3520  028E  01C3               	clrf	_pktTx+2
  3521                           
  3522                           ;RTX.c: 210: pktTx[3]=temp;;
  3523  028F  082F               	movf	_temp,w
  3524  0290  00D6               	movwf	??_RTXSendData
  3525  0291  0856               	movf	??_RTXSendData,w
  3526  0292  00C4               	movwf	_pktTx+3
  3527                           
  3528                           ;RTX.c: 211: pktTx[4]=batt;;
  3529  0293  0829               	movf	_batt,w
  3530  0294  00D6               	movwf	??_RTXSendData
  3531  0295  0856               	movf	??_RTXSendData,w
  3532  0296  00C5               	movwf	_pktTx+4
  3533                           
  3534                           ;RTX.c: 214: RTXSndPkt(pktTx,5);
  3535  0297  3005               	movlw	5
  3536  0298  00D6               	movwf	??_RTXSendData
  3537  0299  0856               	movf	??_RTXSendData,w
  3538  029A  00CF               	movwf	?_RTXSndPkt
  3539  029B  3041               	movlw	_pktTx& (0+255)
  3540  029C  118A  21B2  118A   	fcall	_RTXSndPkt
  3541                           
  3542                           ;RTX.c: 217: tmrRcvPkt=100;
  3543  029F  3064               	movlw	100
  3544  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3545  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3546  02A2  00D6               	movwf	??_RTXSendData
  3547  02A3  0856               	movf	??_RTXSendData,w
  3548  02A4  00B2               	movwf	_tmrRcvPkt
  3549                           
  3550                           ;RTX.c: 220: cntSndData++;
  3551  02A5  3001               	movlw	1
  3552  02A6  00D6               	movwf	??_RTXSendData
  3553  02A7  0856               	movf	??_RTXSendData,w
  3554  02A8  07AA               	addwf	_cntSndData,f
  3555                           
  3556                           ;RTX.c: 223: LEDFastFlash(1);
  3557  02A9  3001               	movlw	1
  3558  02AA  118A  2400         	fcall	_LEDFastFlash
  3559                           
  3560                           ;RTX.c: 224: }
  3561  02AC  0008               	return
  3562  02AD                     l2590:	
  3563                           
  3564                           ;RTX.c: 225: else
  3565                           ;RTX.c: 226: rtx_ev.sleep=1;
  3566  02AD  3001               	movlw	1
  3567  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3568  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  3569  02B0  00A4               	movwf	_rtx_ev
  3570  02B1  3000               	movlw	0
  3571  02B2  00A5               	movwf	_rtx_ev+1
  3572  02B3  0008               	return
  3573  02B4                     __end_of_RTXSendData:	
  3574                           
  3575                           	psect	text16
  3576  01B2                     __ptext16:	
  3577 ;; *************** function _RTXSndPkt *****************
  3578 ;; Defined at:
  3579 ;;		line 112 in file "RTX.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;  src             1    wreg     PTR unsigned char 
  3582 ;;		 -> pktTx(5), 
  3583 ;;  len             1    9[BANK0 ] unsigned char 
  3584 ;; Auto vars:     Size  Location     Type
  3585 ;;  src             1   12[BANK0 ] PTR unsigned char 
  3586 ;;		 -> pktTx(5), 
  3587 ;;  sta             1   15[BANK0 ] unsigned char 
  3588 ;;  numTxByte       1   14[BANK0 ] unsigned char 
  3589 ;;  numRxByte       1   13[BANK0 ] unsigned char 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;		None               void
  3592 ;; Registers used:
  3593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3599 ;;      Params:         0       1       0       0
  3600 ;;      Locals:         0       4       0       0
  3601 ;;      Temps:          0       2       0       0
  3602 ;;      Totals:         0       7       0       0
  3603 ;;Total ram usage:        7 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    4
  3606 ;; This function calls:
  3607 ;;		_CC1Strobe
  3608 ;;		_CC1Write
  3609 ;;		_CC1Read
  3610 ;; This function is called by:
  3611 ;;		_RTXSendData
  3612 ;;		_RTXSendRPgm
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _RTXSndPkt
  3618  01B2                     _RTXSndPkt:	
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _RTXSndPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3622                           ;RTXSndPkt@src stored from wreg
  3623  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  3624  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  3625  01B4  00D2               	movwf	RTXSndPkt@src
  3626  01B5                     l389:	
  3627                           ;RTX.c: 113: unsigned char sta,numRxByte,numTxByte;
  3628                           ;RTX.c: 116: do
  3629                           
  3630  01B5  0064               	clrwdt	;# 
  3631                           
  3632                           ;RTX.c: 119: CC1Read(0x35,(&(sta)),1);
  3633  01B6  3055               	movlw	RTXSndPkt@sta& (0+255)
  3634  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3635  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3636  01B9  00D0               	movwf	??_RTXSndPkt
  3637  01BA  0850               	movf	??_RTXSndPkt,w
  3638  01BB  00CA               	movwf	?_CC1Read
  3639  01BC  01CB               	clrf	?_CC1Read+1
  3640  01BD  0ACB               	incf	?_CC1Read+1,f
  3641  01BE  3035               	movlw	53
  3642  01BF  118A  24E9  118A   	fcall	_CC1Read
  3643                           
  3644                           ;RTX.c: 120: }
  3645                           ;RTX.c: 121: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  3646  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3647  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3648  01C4  0855               	movf	RTXSndPkt@sta,w
  3649  01C5  391F               	andlw	31
  3650  01C6  3A0D               	xorlw	13
  3651  01C7  1903               	skipnz
  3652  01C8  29CE               	goto	l2664
  3653  01C9  0855               	movf	RTXSndPkt@sta,w
  3654  01CA  391F               	andlw	31
  3655  01CB  3A01               	xorlw	1
  3656  01CC  1D03               	skipz
  3657  01CD  29B5               	goto	l389
  3658  01CE                     l2664:	
  3659                           
  3660                           ;RTX.c: 123: CC1Strobe(SIDLE);
  3661  01CE  3036               	movlw	54
  3662  01CF  118A  25DE  118A   	fcall	_CC1Strobe
  3663                           
  3664                           ;RTX.c: 124: CC1Read(0x3B,(&(numRxByte)),1);
  3665  01D2  3053               	movlw	RTXSndPkt@numRxByte& (0+255)
  3666  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  3667  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  3668  01D5  00D0               	movwf	??_RTXSndPkt
  3669  01D6  0850               	movf	??_RTXSndPkt,w
  3670  01D7  00CA               	movwf	?_CC1Read
  3671  01D8  01CB               	clrf	?_CC1Read+1
  3672  01D9  0ACB               	incf	?_CC1Read+1,f
  3673  01DA  303B               	movlw	59
  3674  01DB  118A  24E9  118A   	fcall	_CC1Read
  3675                           
  3676                           ;RTX.c: 125: CC1Read(0x3A,(&(numTxByte)),1);
  3677  01DE  3054               	movlw	RTXSndPkt@numTxByte& (0+255)
  3678  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  3679  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  3680  01E1  00D0               	movwf	??_RTXSndPkt
  3681  01E2  0850               	movf	??_RTXSndPkt,w
  3682  01E3  00CA               	movwf	?_CC1Read
  3683  01E4  01CB               	clrf	?_CC1Read+1
  3684  01E5  0ACB               	incf	?_CC1Read+1,f
  3685  01E6  303A               	movlw	58
  3686  01E7  118A  24E9  118A   	fcall	_CC1Read
  3687                           
  3688                           ;RTX.c: 127: CC1Strobe(SFTX);
  3689  01EA  303B               	movlw	59
  3690  01EB  118A  25DE  118A   	fcall	_CC1Strobe
  3691                           
  3692                           ;RTX.c: 128: CC1Read(0x3A,(&(numTxByte)),1);
  3693  01EE  3054               	movlw	RTXSndPkt@numTxByte& (0+255)
  3694  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3695  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  3696  01F1  00D0               	movwf	??_RTXSndPkt
  3697  01F2  0850               	movf	??_RTXSndPkt,w
  3698  01F3  00CA               	movwf	?_CC1Read
  3699  01F4  01CB               	clrf	?_CC1Read+1
  3700  01F5  0ACB               	incf	?_CC1Read+1,f
  3701  01F6  303A               	movlw	58
  3702  01F7  118A  24E9  118A   	fcall	_CC1Read
  3703                           
  3704                           ;RTX.c: 130: CC1Write(0x3F,src,len);
  3705  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3706  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  3707  01FC  0852               	movf	RTXSndPkt@src,w
  3708  01FD  00D0               	movwf	??_RTXSndPkt
  3709  01FE  0850               	movf	??_RTXSndPkt,w
  3710  01FF  00C8               	movwf	?_CC1Write
  3711  0200  084F               	movf	RTXSndPkt@len,w
  3712  0201  00D1               	movwf	??_RTXSndPkt+1
  3713  0202  0851               	movf	??_RTXSndPkt+1,w
  3714  0203  00C9               	movwf	?_CC1Write+1
  3715  0204  303F               	movlw	63
  3716  0205  118A  2506  118A   	fcall	_CC1Write
  3717                           
  3718                           ;RTX.c: 132: CC1Strobe(STX);
  3719  0208  3035               	movlw	53
  3720  0209  118A  25DE         	fcall	_CC1Strobe
  3721  020B  0008               	return
  3722  020C                     __end_of_RTXSndPkt:	
  3723                           
  3724                           	psect	text17
  3725  04E9                     __ptext17:	
  3726 ;; *************** function _CC1Read *****************
  3727 ;; Defined at:
  3728 ;;		line 108 in file "CC1.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  addr            1    wreg     unsigned char 
  3731 ;;  dst             1    4[BANK0 ] PTR unsigned char 
  3732 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3733 ;;		 -> RTXSndPkt@sta(1), 
  3734 ;;  len             1    5[BANK0 ] unsigned char 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  addr            1    7[BANK0 ] unsigned char 
  3737 ;;  cc1Addr         1    8[BANK0 ] unsigned char 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;		None               void
  3740 ;; Registers used:
  3741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3747 ;;      Params:         0       2       0       0
  3748 ;;      Locals:         0       2       0       0
  3749 ;;      Temps:          0       1       0       0
  3750 ;;      Totals:         0       5       0       0
  3751 ;;Total ram usage:        5 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    3
  3754 ;; This function calls:
  3755 ;;		_SPIRead
  3756 ;;		_SPIWrite
  3757 ;; This function is called by:
  3758 ;;		_RTXSndPkt
  3759 ;;		_RTXRcvPkt
  3760 ;;		_RTXReadPkt
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           
  3765                           ;psect for function _CC1Read
  3766  04E9                     _CC1Read:	
  3767                           
  3768                           ;incstack = 0
  3769                           ; Regs used in _CC1Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3770                           ;CC1Read@addr stored from wreg
  3771  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  3772  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  3773  04EB  00CD               	movwf	CC1Read@addr
  3774                           
  3775                           ;CC1.c: 109: unsigned char cc1Addr;
  3776                           ;CC1.c: 112: PORTAbits.RA5=0;
  3777  04EC  1285               	bcf	5,5	;volatile
  3778                           
  3779                           ;CC1.c: 115: cc1Addr=((addr&0b00111111)|0b11000000);
  3780  04ED  084D               	movf	CC1Read@addr,w
  3781  04EE  393F               	andlw	63
  3782  04EF  38C0               	iorlw	192
  3783  04F0  00CC               	movwf	??_CC1Read
  3784  04F1  084C               	movf	??_CC1Read,w
  3785  04F2  00CE               	movwf	CC1Read@cc1Addr
  3786                           
  3787                           ;CC1.c: 116: SPIWrite((&(cc1Addr)),1);
  3788  04F3  01F4               	clrf	?_SPIWrite
  3789  04F4  0AF4               	incf	?_SPIWrite,f
  3790  04F5  304E               	movlw	CC1Read@cc1Addr& (0+255)
  3791  04F6  118A  255D  118A   	fcall	_SPIWrite
  3792                           
  3793                           ;CC1.c: 119: SPIRead(dst,len);
  3794  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3795  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  3796  04FB  084B               	movf	CC1Read@len,w
  3797  04FC  00CC               	movwf	??_CC1Read
  3798  04FD  084C               	movf	??_CC1Read,w
  3799  04FE  00F4               	movwf	?_SPIRead
  3800  04FF  084A               	movf	CC1Read@dst,w
  3801  0500  118A  24A9         	fcall	_SPIRead
  3802                           
  3803                           ;CC1.c: 122: PORTAbits.RA5=1;
  3804  0502  1283               	bcf	3,5	;RP0=0, select bank0
  3805  0503  1303               	bcf	3,6	;RP1=0, select bank0
  3806  0504  1685               	bsf	5,5	;volatile
  3807  0505  0008               	return
  3808  0506                     __end_of_CC1Read:	
  3809                           
  3810                           	psect	text18
  3811  04A9                     __ptext18:	
  3812 ;; *************** function _SPIRead *****************
  3813 ;; Defined at:
  3814 ;;		line 26 in file "SPI.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  dstPtr          1    wreg     PTR unsigned char 
  3817 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3818 ;;		 -> RTXSndPkt@sta(1), 
  3819 ;;  len             1    4[COMMON] unsigned char 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  dstPtr          1    2[BANK0 ] PTR unsigned char 
  3822 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3823 ;;		 -> RTXSndPkt@sta(1), 
  3824 ;;  i               1    3[BANK0 ] unsigned char 
  3825 ;; Return value:  Size  Location     Type
  3826 ;;		None               void
  3827 ;; Registers used:
  3828 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3829 ;; Tracked objects:
  3830 ;;		On entry : 0/0
  3831 ;;		On exit  : 0/0
  3832 ;;		Unchanged: 0/0
  3833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3834 ;;      Params:         1       0       0       0
  3835 ;;      Locals:         0       2       0       0
  3836 ;;      Temps:          0       2       0       0
  3837 ;;      Totals:         1       4       0       0
  3838 ;;Total ram usage:        5 bytes
  3839 ;; Hardware stack levels used:    1
  3840 ;; Hardware stack levels required when called:    2
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_CC1Read
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           
  3849                           ;psect for function _SPIRead
  3850  04A9                     _SPIRead:	
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _SPIRead: [wreg-fsr0h+status,2+status,0]
  3854                           ;SPIRead@dstPtr stored from wreg
  3855  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3856  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3857  04AB  00C8               	movwf	SPIRead@dstPtr
  3858                           
  3859                           ;SPI.c: 27: unsigned char i;
  3860                           ;SPI.c: 29: for(i=0;i<len;i++)
  3861  04AC  01C9               	clrf	SPIRead@i
  3862  04AD                     l2336:	
  3863  04AD  0874               	movf	SPIRead@len,w
  3864  04AE  0249               	subwf	SPIRead@i,w
  3865  04AF  1803               	btfsc	3,0
  3866  04B0  0008               	return
  3867                           
  3868                           ;SPI.c: 30: {
  3869                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  3870  04B1  118C               	bcf	12,3	;volatile
  3871                           
  3872                           ;SPI.c: 32: SSPBUF=0xFF;
  3873  04B2  30FF               	movlw	255
  3874  04B3  0093               	movwf	19	;volatile
  3875  04B4                     l66:	
  3876                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  3877                           
  3878  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  3879  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  3880  04B6  198C               	btfsc	12,3	;volatile
  3881  04B7  2CBA               	goto	l2332
  3882                           
  3883                           ;SPI.c: 34: _nop();
  3884  04B8  0000               	nop
  3885  04B9  2CB4               	goto	l66
  3886  04BA                     l2332:	
  3887                           
  3888                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  3889  04BA  0813               	movf	19,w	;volatile
  3890  04BB  00C6               	movwf	??_SPIRead
  3891  04BC  0849               	movf	SPIRead@i,w
  3892  04BD  0748               	addwf	SPIRead@dstPtr,w
  3893  04BE  00C7               	movwf	??_SPIRead+1
  3894  04BF  0847               	movf	??_SPIRead+1,w
  3895  04C0  0084               	movwf	4
  3896  04C1  0846               	movf	??_SPIRead,w
  3897  04C2  1383               	bcf	3,7	;select IRP bank0
  3898  04C3  0080               	movwf	0
  3899  04C4  3001               	movlw	1
  3900  04C5  00C6               	movwf	??_SPIRead
  3901  04C6  0846               	movf	??_SPIRead,w
  3902  04C7  07C9               	addwf	SPIRead@i,f
  3903  04C8  2CAD               	goto	l2336
  3904  04C9                     __end_of_SPIRead:	
  3905                           
  3906                           	psect	text19
  3907  0506                     __ptext19:	
  3908 ;; *************** function _CC1Write *****************
  3909 ;; Defined at:
  3910 ;;		line 126 in file "CC1.c"
  3911 ;; Parameters:    Size  Location     Type
  3912 ;;  addr            1    wreg     unsigned char 
  3913 ;;  src             1    2[BANK0 ] PTR unsigned char 
  3914 ;;		 -> pktTx(5), cc1PaTable(8), cc1InitVal(47), 
  3915 ;;  len             1    3[BANK0 ] unsigned char 
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;  addr            1    5[BANK0 ] unsigned char 
  3918 ;;  cc1Addr         1    6[BANK0 ] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;		None               void
  3921 ;; Registers used:
  3922 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3923 ;; Tracked objects:
  3924 ;;		On entry : 0/0
  3925 ;;		On exit  : 0/0
  3926 ;;		Unchanged: 0/0
  3927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3928 ;;      Params:         0       2       0       0
  3929 ;;      Locals:         0       2       0       0
  3930 ;;      Temps:          0       1       0       0
  3931 ;;      Totals:         0       5       0       0
  3932 ;;Total ram usage:        5 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    3
  3935 ;; This function calls:
  3936 ;;		_SPIWrite
  3937 ;; This function is called by:
  3938 ;;		_CC1Init
  3939 ;;		_RTXSndPkt
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _CC1Write
  3945  0506                     _CC1Write:	
  3946                           
  3947                           ;incstack = 0
  3948                           ; Regs used in _CC1Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3949                           ;CC1Write@addr stored from wreg
  3950  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3952  0508  00CB               	movwf	CC1Write@addr
  3953                           
  3954                           ;CC1.c: 127: unsigned char cc1Addr;
  3955                           ;CC1.c: 130: PORTAbits.RA5=0;
  3956  0509  1285               	bcf	5,5	;volatile
  3957                           
  3958                           ;CC1.c: 133: cc1Addr=((addr&0b00111111)|0b01000000);
  3959  050A  084B               	movf	CC1Write@addr,w
  3960  050B  393F               	andlw	63
  3961  050C  3840               	iorlw	64
  3962  050D  00CA               	movwf	??_CC1Write
  3963  050E  084A               	movf	??_CC1Write,w
  3964  050F  00CC               	movwf	CC1Write@cc1Addr
  3965                           
  3966                           ;CC1.c: 134: SPIWrite((&(cc1Addr)),1);
  3967  0510  01F4               	clrf	?_SPIWrite
  3968  0511  0AF4               	incf	?_SPIWrite,f
  3969  0512  304C               	movlw	CC1Write@cc1Addr& (0+255)
  3970  0513  118A  255D  118A   	fcall	_SPIWrite
  3971                           
  3972                           ;CC1.c: 137: SPIWrite(src,len);
  3973  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3974  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3975  0518  0849               	movf	CC1Write@len,w
  3976  0519  00CA               	movwf	??_CC1Write
  3977  051A  084A               	movf	??_CC1Write,w
  3978  051B  00F4               	movwf	?_SPIWrite
  3979  051C  0848               	movf	CC1Write@src,w
  3980  051D  118A  255D         	fcall	_SPIWrite
  3981                           
  3982                           ;CC1.c: 140: PORTAbits.RA5=1;
  3983  051F  1283               	bcf	3,5	;RP0=0, select bank0
  3984  0520  1303               	bcf	3,6	;RP1=0, select bank0
  3985  0521  1685               	bsf	5,5	;volatile
  3986  0522  0008               	return
  3987  0523                     __end_of_CC1Write:	
  3988                           
  3989                           	psect	text20
  3990  05DE                     __ptext20:	
  3991 ;; *************** function _CC1Strobe *****************
  3992 ;; Defined at:
  3993 ;;		line 93 in file "CC1.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  e_stb           1    wreg     enum E1565
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;  e_stb           1    3[BANK0 ] enum E1565
  3998 ;;  cc1Stb          1    4[BANK0 ] unsigned char 
  3999 ;;  i               1    0        unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;		None               void
  4002 ;; Registers used:
  4003 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4009 ;;      Params:         0       0       0       0
  4010 ;;      Locals:         0       2       0       0
  4011 ;;      Temps:          0       1       0       0
  4012 ;;      Totals:         0       3       0       0
  4013 ;;Total ram usage:        3 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    3
  4016 ;; This function calls:
  4017 ;;		_SPIWrite
  4018 ;; This function is called by:
  4019 ;;		_CC1Init
  4020 ;;		_CC1Sleep
  4021 ;;		_RTXInit
  4022 ;;		_RTXSndPkt
  4023 ;;		_RTXReadPkt
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function _CC1Strobe
  4029  05DE                     _CC1Strobe:	
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in _CC1Strobe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4033                           ;CC1Strobe@e_stb stored from wreg
  4034  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  4035  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  4036  05E0  00C9               	movwf	CC1Strobe@e_stb
  4037                           
  4038                           ;CC1.c: 94: unsigned char cc1Stb,i;
  4039                           ;CC1.c: 97: PORTAbits.RA5=0;
  4040  05E1  1285               	bcf	5,5	;volatile
  4041                           
  4042                           ;CC1.c: 100: cc1Stb=((e_stb&0b00111111)|0b10000000);
  4043  05E2  0849               	movf	CC1Strobe@e_stb,w
  4044  05E3  393F               	andlw	63
  4045  05E4  3880               	iorlw	128
  4046  05E5  00C8               	movwf	??_CC1Strobe
  4047  05E6  0848               	movf	??_CC1Strobe,w
  4048  05E7  00CA               	movwf	CC1Strobe@cc1Stb
  4049                           
  4050                           ;CC1.c: 101: SPIWrite((&(cc1Stb)),1);
  4051  05E8  01F4               	clrf	?_SPIWrite
  4052  05E9  0AF4               	incf	?_SPIWrite,f
  4053  05EA  304A               	movlw	CC1Strobe@cc1Stb& (0+255)
  4054  05EB  118A  255D         	fcall	_SPIWrite
  4055                           
  4056                           ;CC1.c: 104: PORTAbits.RA5=1;
  4057  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  4058  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  4059  05EF  1685               	bsf	5,5	;volatile
  4060  05F0  0008               	return
  4061  05F1                     __end_of_CC1Strobe:	
  4062                           
  4063                           	psect	text21
  4064  055D                     __ptext21:	
  4065 ;; *************** function _SPIWrite *****************
  4066 ;; Defined at:
  4067 ;;		line 40 in file "SPI.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  srcPtr          1    wreg     PTR unsigned char 
  4070 ;;		 -> pktTx(5), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  4071 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  4072 ;;  len             1    4[COMMON] unsigned char 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  srcPtr          1    0[BANK0 ] PTR unsigned char 
  4075 ;;		 -> pktTx(5), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  4076 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  4077 ;;  i               1    1[BANK0 ] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;		None               void
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4087 ;;      Params:         1       0       0       0
  4088 ;;      Locals:         0       2       0       0
  4089 ;;      Temps:          1       0       0       0
  4090 ;;      Totals:         2       2       0       0
  4091 ;;Total ram usage:        4 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    2
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_CC1Strobe
  4098 ;;		_CC1Read
  4099 ;;		_CC1Write
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function _SPIWrite
  4105  055D                     _SPIWrite:	
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in _SPIWrite: [wreg-fsr0h+status,2+status,0]
  4109                           ;SPIWrite@srcPtr stored from wreg
  4110  055D  1283               	bcf	3,5	;RP0=0, select bank0
  4111  055E  1303               	bcf	3,6	;RP1=0, select bank0
  4112  055F  00C6               	movwf	SPIWrite@srcPtr
  4113                           
  4114                           ;SPI.c: 41: unsigned char i;
  4115                           ;SPI.c: 43: for(i=0;i<len;i++)
  4116  0560  01C7               	clrf	SPIWrite@i
  4117  0561                     l2344:	
  4118  0561  0874               	movf	SPIWrite@len,w
  4119  0562  0247               	subwf	SPIWrite@i,w
  4120  0563  1803               	btfsc	3,0
  4121  0564  0008               	return
  4122                           
  4123                           ;SPI.c: 44: {
  4124                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  4125  0565  118C               	bcf	12,3	;volatile
  4126                           
  4127                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  4128  0566  0847               	movf	SPIWrite@i,w
  4129  0567  0746               	addwf	SPIWrite@srcPtr,w
  4130  0568  00F5               	movwf	??_SPIWrite
  4131  0569  0875               	movf	??_SPIWrite,w
  4132  056A  0084               	movwf	4
  4133  056B  1383               	bcf	3,7	;select IRP bank0
  4134  056C  0800               	movf	0,w
  4135  056D  0093               	movwf	19	;volatile
  4136  056E                     l75:	
  4137                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  4138                           
  4139  056E  1283               	bcf	3,5	;RP0=0, select bank0
  4140  056F  1303               	bcf	3,6	;RP1=0, select bank0
  4141  0570  198C               	btfsc	12,3	;volatile
  4142  0571  2D74               	goto	l2342
  4143                           
  4144                           ;SPI.c: 48: _nop();
  4145  0572  0000               	nop
  4146  0573  2D6E               	goto	l75
  4147  0574                     l2342:	
  4148  0574  3001               	movlw	1
  4149  0575  00F5               	movwf	??_SPIWrite
  4150  0576  0875               	movf	??_SPIWrite,w
  4151  0577  07C7               	addwf	SPIWrite@i,f
  4152  0578  2D61               	goto	l2344
  4153  0579                     __end_of_SPIWrite:	
  4154                           
  4155                           	psect	text22
  4156  0400                     __ptext22:	
  4157 ;; *************** function _LEDFastFlash *****************
  4158 ;; Defined at:
  4159 ;;		line 39 in file "LED.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  num             1    wreg     unsigned char 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  num             1    5[BANK0 ] unsigned char 
  4164 ;;  i               1    6[BANK0 ] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;		None               void
  4167 ;; Registers used:
  4168 ;;		wreg, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4174 ;;      Params:         0       0       0       0
  4175 ;;      Locals:         0       2       0       0
  4176 ;;      Temps:          0       1       0       0
  4177 ;;      Totals:         0       3       0       0
  4178 ;;Total ram usage:        3 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    3
  4181 ;; This function calls:
  4182 ;;		_DLYDelay_ms
  4183 ;; This function is called by:
  4184 ;;		_RTXSendData
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           
  4189                           ;psect for function _LEDFastFlash
  4190  0400                     _LEDFastFlash:	
  4191                           
  4192                           ;incstack = 0
  4193                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  4194                           ;LEDFastFlash@num stored from wreg
  4195  0400  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0401  1303               	bcf	3,6	;RP1=0, select bank0
  4197  0402  00CB               	movwf	LEDFastFlash@num
  4198                           
  4199                           ;LED.c: 40: unsigned char i;
  4200                           ;LED.c: 42: for(i=0;i<num;i++)
  4201  0403  01CC               	clrf	LEDFastFlash@i
  4202  0404                     l2448:	
  4203  0404  084B               	movf	LEDFastFlash@num,w
  4204  0405  024C               	subwf	LEDFastFlash@i,w
  4205  0406  1803               	btfsc	3,0
  4206  0407  0008               	return
  4207  0408  0064               	clrwdt	;# 
  4208                           
  4209                           ;LED.c: 45: PORTCbits.RC7=0;
  4210  0409  1283               	bcf	3,5	;RP0=0, select bank0
  4211  040A  1303               	bcf	3,6	;RP1=0, select bank0
  4212  040B  1387               	bcf	7,7	;volatile
  4213                           
  4214                           ;LED.c: 46: DLYDelay_ms(5);
  4215  040C  3005               	movlw	5
  4216  040D  00F4               	movwf	?_DLYDelay_ms
  4217  040E  3000               	movlw	0
  4218  040F  00F5               	movwf	?_DLYDelay_ms+1
  4219  0410  118A  2447  118A   	fcall	_DLYDelay_ms
  4220                           
  4221                           ;LED.c: 47: PORTCbits.RC7=1;
  4222  0413  1283               	bcf	3,5	;RP0=0, select bank0
  4223  0414  1303               	bcf	3,6	;RP1=0, select bank0
  4224  0415  1787               	bsf	7,7	;volatile
  4225                           
  4226                           ;LED.c: 48: DLYDelay_ms(5);
  4227  0416  3005               	movlw	5
  4228  0417  00F4               	movwf	?_DLYDelay_ms
  4229  0418  3000               	movlw	0
  4230  0419  00F5               	movwf	?_DLYDelay_ms+1
  4231  041A  118A  2447  118A   	fcall	_DLYDelay_ms
  4232  041D  3001               	movlw	1
  4233  041E  1283               	bcf	3,5	;RP0=0, select bank0
  4234  041F  1303               	bcf	3,6	;RP1=0, select bank0
  4235  0420  00CA               	movwf	??_LEDFastFlash
  4236  0421  084A               	movf	??_LEDFastFlash,w
  4237  0422  07CC               	addwf	LEDFastFlash@i,f
  4238  0423  2C04               	goto	l2448
  4239  0424                     __end_of_LEDFastFlash:	
  4240                           
  4241                           	psect	text23
  4242  0447                     __ptext23:	
  4243 ;; *************** function _DLYDelay_ms *****************
  4244 ;; Defined at:
  4245 ;;		line 18 in file "DLY.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  val             2    4[COMMON] unsigned short 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  i               2    2[BANK0 ] unsigned short 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg, status,2
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4259 ;;      Params:         2       0       0       0
  4260 ;;      Locals:         0       2       0       0
  4261 ;;      Temps:          0       2       0       0
  4262 ;;      Totals:         2       4       0       0
  4263 ;;Total ram usage:        6 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    2
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_LEDNormalFlash
  4270 ;;		_LEDFastFlash
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _DLYDelay_ms
  4276  0447                     _DLYDelay_ms:	
  4277                           
  4278                           ;DLY.c: 19: unsigned short i;
  4279                           ;DLY.c: 21: for(i=0;i<val;i++)
  4280                           
  4281                           ;incstack = 0
  4282                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  4283  0447  1283               	bcf	3,5	;RP0=0, select bank0
  4284  0448  1303               	bcf	3,6	;RP1=0, select bank0
  4285  0449  01C8               	clrf	DLYDelay_ms@i
  4286  044A  01C9               	clrf	DLYDelay_ms@i+1
  4287  044B                     l132:	
  4288  044B  0875               	movf	DLYDelay_ms@val+1,w
  4289  044C  0249               	subwf	DLYDelay_ms@i+1,w
  4290  044D  1D03               	skipz
  4291  044E  2C51               	goto	u1315
  4292  044F  0874               	movf	DLYDelay_ms@val,w
  4293  0450  0248               	subwf	DLYDelay_ms@i,w
  4294  0451                     u1315:	
  4295  0451  1803               	btfsc	3,0
  4296  0452  0008               	return
  4297  0453  0064               	clrwdt	;# 
  4298                           
  4299                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  4300  0454  3003               	movlw	3
  4301  0455  1283               	bcf	3,5	;RP0=0, select bank0
  4302  0456  1303               	bcf	3,6	;RP1=0, select bank0
  4303  0457  00C7               	movwf	??_DLYDelay_ms+1
  4304  0458  3097               	movlw	151
  4305  0459  00C6               	movwf	??_DLYDelay_ms
  4306  045A                     u1727:	
  4307  045A  0BC6               	decfsz	??_DLYDelay_ms,f
  4308  045B  2C5A               	goto	u1727
  4309  045C  0BC7               	decfsz	??_DLYDelay_ms+1,f
  4310  045D  2C5A               	goto	u1727
  4311  045E  2C5F               	nop2
  4312  045F  3001               	movlw	1
  4313  0460  1283               	bcf	3,5	;RP0=0, select bank0
  4314  0461  1303               	bcf	3,6	;RP1=0, select bank0
  4315  0462  07C8               	addwf	DLYDelay_ms@i,f
  4316  0463  1803               	skipnc
  4317  0464  0AC9               	incf	DLYDelay_ms@i+1,f
  4318  0465  3000               	movlw	0
  4319  0466  07C9               	addwf	DLYDelay_ms@i+1,f
  4320  0467  2C4B               	goto	l132
  4321  0468                     __end_of_DLYDelay_ms:	
  4322                           
  4323                           	psect	text24
  4324  05C6                     __ptext24:	
  4325 ;; *************** function _PGMInit *****************
  4326 ;; Defined at:
  4327 ;;		line 21 in file "PGM.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  state           1    wreg     unsigned char 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  state           1   10[BANK0 ] unsigned char 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;		None               void
  4334 ;; Registers used:
  4335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4341 ;;      Params:         0       0       0       0
  4342 ;;      Locals:         0       1       0       0
  4343 ;;      Temps:          0       0       0       0
  4344 ;;      Totals:         0       1       0       0
  4345 ;;Total ram usage:        1 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    7
  4348 ;; This function calls:
  4349 ;;		_PGMReadNvm
  4350 ;;		_PGMCheckNvm
  4351 ;; This function is called by:
  4352 ;;		_main
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _PGMInit
  4358  05C6                     _PGMInit:	
  4359                           
  4360                           ;incstack = 0
  4361                           ; Regs used in _PGMInit: [allreg]
  4362                           ;PGMInit@state stored from wreg
  4363  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  4364  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  4365  05C8  00D0               	movwf	PGMInit@state
  4366                           
  4367                           ;PGM.c: 22: switch(state)
  4368  05C9  2DD3               	goto	l2530
  4369  05CA                     l2522:	
  4370                           ;PGM.c: 23: {
  4371                           ;PGM.c: 24: case 0:
  4372                           
  4373                           
  4374                           ;PGM.c: 26: T1CON=0b00000001;
  4375  05CA  3001               	movlw	1
  4376  05CB  0090               	movwf	16	;volatile
  4377                           
  4378                           ;PGM.c: 27: break;
  4379  05CC  0008               	return
  4380  05CD                     l2524:	
  4381                           ;PGM.c: 28: case 1:
  4382                           
  4383                           
  4384                           ;PGM.c: 30: PGMReadNvm();
  4385  05CD  118A  2664  118A   	fcall	_PGMReadNvm
  4386                           
  4387                           ;PGM.c: 31: PGMCheckNvm();
  4388  05D0  118A  2672         	fcall	_PGMCheckNvm
  4389                           
  4390                           ;PGM.c: 36: }
  4391                           
  4392                           ;PGM.c: 32: break;
  4393  05D2  0008               	return
  4394  05D3                     l2530:	
  4395  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  4396  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  4397  05D5  0850               	movf	PGMInit@state,w
  4398                           
  4399                           ; Switch size 1, requested type "space"
  4400                           ; Number of cases is 2, Range of values is 0 to 1
  4401                           ; switch strategies available:
  4402                           ; Name         Instructions Cycles
  4403                           ; simple_byte            7     4 (average)
  4404                           ; direct_byte           11     7 (fixed)
  4405                           ; jumptable            260     6 (fixed)
  4406                           ;	Chosen strategy is simple_byte
  4407  05D6  3A00               	xorlw	0	; case 0
  4408  05D7  1903               	skipnz
  4409  05D8  2DCA               	goto	l2522
  4410  05D9  3A01               	xorlw	1	; case 1
  4411  05DA  1903               	skipnz
  4412  05DB  2DCD               	goto	l2524
  4413  05DC  2DDD               	goto	l302
  4414  05DD                     l302:	
  4415  05DD  0008               	return
  4416  05DE                     __end_of_PGMInit:	
  4417                           
  4418                           	psect	text25
  4419  0672                     __ptext25:	
  4420 ;; *************** function _PGMCheckNvm *****************
  4421 ;; Defined at:
  4422 ;;		line 50 in file "PGM.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;		None
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;		None               void
  4429 ;; Registers used:
  4430 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4436 ;;      Params:         0       0       0       0
  4437 ;;      Locals:         0       0       0       0
  4438 ;;      Temps:          0       0       0       0
  4439 ;;      Totals:         0       0       0       0
  4440 ;;Total ram usage:        0 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    6
  4443 ;; This function calls:
  4444 ;;		_PGMNvmReset
  4445 ;; This function is called by:
  4446 ;;		_PGMInit
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _PGMCheckNvm
  4452  0672                     _PGMCheckNvm:	
  4453                           
  4454                           ;PGM.c: 51: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _PGMCheckNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4458  0672  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0673  1303               	bcf	3,6	;RP1=0, select bank0
  4460  0674  0837               	movf	_pgm_cfg,w
  4461  0675  3AC5               	xorlw	197
  4462  0676  1D03               	skipz
  4463  0677  2E7C               	goto	l2538
  4464  0678  0838               	movf	_pgm_cfg+1,w
  4465  0679  3A5C               	xorlw	92
  4466  067A  1903               	skipnz
  4467  067B  0008               	return
  4468  067C                     l2538:	
  4469                           
  4470                           ;PGM.c: 52: PGMNvmReset();
  4471  067C  118A  2604         	fcall	_PGMNvmReset
  4472  067E  0008               	return
  4473  067F                     __end_of_PGMCheckNvm:	
  4474                           
  4475                           	psect	text26
  4476  0604                     __ptext26:	
  4477 ;; *************** function _PGMNvmReset *****************
  4478 ;; Defined at:
  4479 ;;		line 56 in file "PGM.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;		None               void
  4486 ;; Registers used:
  4487 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4493 ;;      Params:         0       0       0       0
  4494 ;;      Locals:         0       0       0       0
  4495 ;;      Temps:          0       1       0       0
  4496 ;;      Totals:         0       1       0       0
  4497 ;;Total ram usage:        1 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    5
  4500 ;; This function calls:
  4501 ;;		_PGMWriteNvm
  4502 ;; This function is called by:
  4503 ;;		_PGMCheckNvm
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _PGMNvmReset
  4509  0604                     _PGMNvmReset:	
  4510                           
  4511                           ;PGM.c: 58: pgm_cfg.valChk1=0xC5;
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _PGMNvmReset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4515  0604  30C5               	movlw	197
  4516  0605  1283               	bcf	3,5	;RP0=0, select bank0
  4517  0606  1303               	bcf	3,6	;RP1=0, select bank0
  4518  0607  00CF               	movwf	??_PGMNvmReset
  4519  0608  084F               	movf	??_PGMNvmReset,w
  4520  0609  00B7               	movwf	_pgm_cfg
  4521                           
  4522                           ;PGM.c: 59: pgm_cfg.valChk2=0x5C;
  4523  060A  305C               	movlw	92
  4524  060B  00CF               	movwf	??_PGMNvmReset
  4525  060C  084F               	movf	??_PGMNvmReset,w
  4526  060D  00B8               	movwf	_pgm_cfg+1
  4527                           
  4528                           ;PGM.c: 60: pgm_cfg.menu=0x00;
  4529  060E  01B9               	clrf	_pgm_cfg+2
  4530                           
  4531                           ;PGM.c: 61: pgm_cfg.sensId=0x00;
  4532  060F  01BA               	clrf	_pgm_cfg+3
  4533                           
  4534                           ;PGM.c: 62: pgm_cfg.baseId=0x00;
  4535  0610  01BB               	clrf	_pgm_cfg+4
  4536                           
  4537                           ;PGM.c: 64: PGMWriteNvm();
  4538  0611  118A  2656  118A   	fcall	_PGMWriteNvm
  4539  0614                     l2552:	
  4540                           ;PGM.c: 66: while(1)
  4541                           
  4542                           
  4543                           ;PGM.c: 67: _nop();
  4544  0614  0000               	nop
  4545  0615  2E14               	goto	l2552
  4546  0616                     __end_of_PGMNvmReset:	
  4547                           
  4548                           	psect	text27
  4549  0656                     __ptext27:	
  4550 ;; *************** function _PGMWriteNvm *****************
  4551 ;; Defined at:
  4552 ;;		line 45 in file "PGM.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;		None
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;		None
  4557 ;; Return value:  Size  Location     Type
  4558 ;;		None               void
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4566 ;;      Params:         0       0       0       0
  4567 ;;      Locals:         0       0       0       0
  4568 ;;      Temps:          0       2       0       0
  4569 ;;      Totals:         0       2       0       0
  4570 ;;Total ram usage:        2 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    4
  4573 ;; This function calls:
  4574 ;;		_NVMWrite
  4575 ;; This function is called by:
  4576 ;;		_PGMNvmReset
  4577 ;;		_PGMSelLong
  4578 ;;		_RTXReadPkt
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _PGMWriteNvm
  4584  0656                     _PGMWriteNvm:	
  4585                           
  4586                           ;PGM.c: 46: NVMWrite(0x00,(char *)(&(pgm_cfg)),sizeof(ts_PGM_CFG));
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _PGMWriteNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4590  0656  3037               	movlw	_pgm_cfg& (0+255)
  4591  0657  1283               	bcf	3,5	;RP0=0, select bank0
  4592  0658  1303               	bcf	3,6	;RP1=0, select bank0
  4593  0659  00CD               	movwf	??_PGMWriteNvm
  4594  065A  084D               	movf	??_PGMWriteNvm,w
  4595  065B  00C7               	movwf	?_NVMWrite
  4596  065C  3005               	movlw	5
  4597  065D  00CE               	movwf	??_PGMWriteNvm+1
  4598  065E  084E               	movf	??_PGMWriteNvm+1,w
  4599  065F  00C8               	movwf	?_NVMWrite+1
  4600  0660  3000               	movlw	0
  4601  0661  118A  2468         	fcall	_NVMWrite
  4602  0663  0008               	return
  4603  0664                     __end_of_PGMWriteNvm:	
  4604                           
  4605                           	psect	text28
  4606  0468                     __ptext28:	
  4607 ;; *************** function _NVMWrite *****************
  4608 ;; Defined at:
  4609 ;;		line 16 in file "NVM.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  addr            1    wreg     unsigned char 
  4612 ;;  source          1    1[BANK0 ] PTR unsigned char 
  4613 ;;		 -> pgm_cfg(5), 
  4614 ;;  len             1    2[BANK0 ] unsigned char 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  addr            1    5[BANK0 ] unsigned char 
  4617 ;;  i               1    6[BANK0 ] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;		None               void
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4627 ;;      Params:         0       2       0       0
  4628 ;;      Locals:         0       2       0       0
  4629 ;;      Temps:          0       2       0       0
  4630 ;;      Totals:         0       6       0       0
  4631 ;;Total ram usage:        6 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    3
  4634 ;; This function calls:
  4635 ;;		_eeprom_write
  4636 ;; This function is called by:
  4637 ;;		_PGMWriteNvm
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           
  4642                           ;psect for function _NVMWrite
  4643  0468                     _NVMWrite:	
  4644                           
  4645                           ;incstack = 0
  4646                           ; Regs used in _NVMWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4647                           ;NVMWrite@addr stored from wreg
  4648  0468  1283               	bcf	3,5	;RP0=0, select bank0
  4649  0469  1303               	bcf	3,6	;RP1=0, select bank0
  4650  046A  00CB               	movwf	NVMWrite@addr
  4651                           
  4652                           ;NVM.c: 17: unsigned char i;
  4653                           ;NVM.c: 19: for(i=0;i<len;i++)
  4654  046B  01CC               	clrf	NVMWrite@i
  4655  046C                     l2464:	
  4656  046C  0848               	movf	NVMWrite@len,w
  4657  046D  024C               	subwf	NVMWrite@i,w
  4658  046E  1803               	btfsc	3,0
  4659  046F  0008               	return
  4660  0470  0064               	clrwdt	;# 
  4661                           
  4662                           ;NVM.c: 22: eeprom_write((addr+i),(*(source+i)));
  4663  0471  1283               	bcf	3,5	;RP0=0, select bank0
  4664  0472  1303               	bcf	3,6	;RP1=0, select bank0
  4665  0473  084C               	movf	NVMWrite@i,w
  4666  0474  0747               	addwf	NVMWrite@source,w
  4667  0475  00C9               	movwf	??_NVMWrite
  4668  0476  0849               	movf	??_NVMWrite,w
  4669  0477  0084               	movwf	4
  4670  0478  1383               	bcf	3,7	;select IRP bank0
  4671  0479  0800               	movf	0,w
  4672  047A  00CA               	movwf	??_NVMWrite+1
  4673  047B  084A               	movf	??_NVMWrite+1,w
  4674  047C  00F4               	movwf	?_eeprom_write
  4675  047D  084C               	movf	NVMWrite@i,w
  4676  047E  074B               	addwf	NVMWrite@addr,w
  4677  047F  118A  233E  118A   	fcall	_eeprom_write
  4678  0482  3001               	movlw	1
  4679  0483  1283               	bcf	3,5	;RP0=0, select bank0
  4680  0484  1303               	bcf	3,6	;RP1=0, select bank0
  4681  0485  00C9               	movwf	??_NVMWrite
  4682  0486  0849               	movf	??_NVMWrite,w
  4683  0487  07CC               	addwf	NVMWrite@i,f
  4684  0488  2C6C               	goto	l2464
  4685  0489                     __end_of_NVMWrite:	
  4686                           
  4687                           	psect	text29
  4688  033E                     __ptext29:	
  4689 ;; *************** function _eeprom_write *****************
  4690 ;; Defined at:
  4691 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\eewrite.c"
  4692 ;; Parameters:    Size  Location     Type
  4693 ;;  addr            1    wreg     unsigned char 
  4694 ;;  value           1    4[COMMON] unsigned char 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  addr            1    0[BANK0 ] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;		None               void
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4706 ;;      Params:         1       0       0       0
  4707 ;;      Locals:         0       1       0       0
  4708 ;;      Temps:          1       0       0       0
  4709 ;;      Totals:         2       1       0       0
  4710 ;;Total ram usage:        3 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    2
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_NVMWrite
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           
  4721                           ;psect for function _eeprom_write
  4722  033E                     _eeprom_write:	
  4723                           
  4724                           ;incstack = 0
  4725                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4726                           ;eeprom_write@addr stored from wreg
  4727  033E  1283               	bcf	3,5	;RP0=0, select bank0
  4728  033F  1303               	bcf	3,6	;RP1=0, select bank0
  4729  0340  00C6               	movwf	eeprom_write@addr
  4730  0341                     l587:	
  4731  0341  1683               	bsf	3,5	;RP0=1, select bank3
  4732  0342  1703               	bsf	3,6	;RP1=1, select bank3
  4733  0343  188C               	btfsc	12,1	;volsfr
  4734  0344  2B41               	goto	l587
  4735  0345  1283               	bcf	3,5	;RP0=0, select bank0
  4736  0346  1303               	bcf	3,6	;RP1=0, select bank0
  4737  0347  0846               	movf	eeprom_write@addr,w
  4738  0348  1283               	bcf	3,5	;RP0=0, select bank2
  4739  0349  1703               	bsf	3,6	;RP1=1, select bank2
  4740  034A  008D               	movwf	13	;volatile
  4741  034B  0874               	movf	eeprom_write@value,w
  4742  034C  008C               	movwf	12	;volatile
  4743  034D  303F               	movlw	63
  4744  034E  00F5               	movwf	??_eeprom_write
  4745  034F  0875               	movf	??_eeprom_write,w
  4746  0350  1683               	bsf	3,5	;RP0=1, select bank3
  4747  0351  1703               	bsf	3,6	;RP1=1, select bank3
  4748  0352  058C               	andwf	12,f	;volsfr
  4749  0353  1283               	bcf	3,5	;RP0=0, select bank0
  4750  0354  1303               	bcf	3,6	;RP1=0, select bank0
  4751  0355  1003               	bcf	3,0	;volatile
  4752  0356  1B8B               	btfsc	11,7	;volatile
  4753  0357  1403               	bsf	3,0	;volatile
  4754  0358  138B               	bcf	11,7	;volatile
  4755  0359  1683               	bsf	3,5	;RP0=1, select bank3
  4756  035A  1703               	bsf	3,6	;RP1=1, select bank3
  4757  035B  150C               	bsf	12,2	;volsfr
  4758  035C  3055               	movlw	85
  4759  035D  008D               	movwf	13	;volsfr
  4760  035E  30AA               	movlw	170
  4761  035F  008D               	movwf	13	;volsfr
  4762  0360  148C               	bsf	12,1	;volsfr
  4763  0361  110C               	bcf	12,2	;volsfr
  4764  0362  1283               	bcf	3,5	;RP0=0, select bank0
  4765  0363  1303               	bcf	3,6	;RP1=0, select bank0
  4766  0364  1C03               	btfss	3,0	;volatile
  4767  0365  0008               	return
  4768  0366  178B               	bsf	11,7	;volatile
  4769  0367  0008               	return
  4770  0368                     __end_of_eeprom_write:	
  4771                           
  4772                           	psect	text30
  4773  0664                     __ptext30:	
  4774 ;; *************** function _PGMReadNvm *****************
  4775 ;; Defined at:
  4776 ;;		line 40 in file "PGM.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;		None
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;		None
  4781 ;; Return value:  Size  Location     Type
  4782 ;;		None               void
  4783 ;; Registers used:
  4784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 0/0
  4787 ;;		On exit  : 0/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4790 ;;      Params:         0       0       0       0
  4791 ;;      Locals:         0       0       0       0
  4792 ;;      Temps:          0       2       0       0
  4793 ;;      Totals:         0       2       0       0
  4794 ;;Total ram usage:        2 bytes
  4795 ;; Hardware stack levels used:    1
  4796 ;; Hardware stack levels required when called:    4
  4797 ;; This function calls:
  4798 ;;		_NVMRead
  4799 ;; This function is called by:
  4800 ;;		_PGMInit
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           
  4805                           ;psect for function _PGMReadNvm
  4806  0664                     _PGMReadNvm:	
  4807                           
  4808                           ;PGM.c: 41: NVMRead(0x00,(char *)(&(pgm_cfg)),sizeof(ts_PGM_CFG));
  4809                           
  4810                           ;incstack = 0
  4811                           ; Regs used in _PGMReadNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4812  0664  3037               	movlw	_pgm_cfg& (0+255)
  4813  0665  1283               	bcf	3,5	;RP0=0, select bank0
  4814  0666  1303               	bcf	3,6	;RP1=0, select bank0
  4815  0667  00CC               	movwf	??_PGMReadNvm
  4816  0668  084C               	movf	??_PGMReadNvm,w
  4817  0669  00C6               	movwf	?_NVMRead
  4818  066A  3005               	movlw	5
  4819  066B  00CD               	movwf	??_PGMReadNvm+1
  4820  066C  084D               	movf	??_PGMReadNvm+1,w
  4821  066D  00C7               	movwf	?_NVMRead+1
  4822  066E  3000               	movlw	0
  4823  066F  118A  24C9         	fcall	_NVMRead
  4824  0671  0008               	return
  4825  0672                     __end_of_PGMReadNvm:	
  4826                           
  4827                           	psect	text31
  4828  04C9                     __ptext31:	
  4829 ;; *************** function _NVMRead *****************
  4830 ;; Defined at:
  4831 ;;		line 5 in file "NVM.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  addr            1    wreg     unsigned char 
  4834 ;;  dest            1    0[BANK0 ] PTR unsigned char 
  4835 ;;		 -> pgm_cfg(5), 
  4836 ;;  len             1    1[BANK0 ] unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  addr            1    4[BANK0 ] unsigned char 
  4839 ;;  i               1    5[BANK0 ] unsigned char 
  4840 ;; Return value:  Size  Location     Type
  4841 ;;		None               void
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4849 ;;      Params:         0       2       0       0
  4850 ;;      Locals:         0       2       0       0
  4851 ;;      Temps:          0       2       0       0
  4852 ;;      Totals:         0       6       0       0
  4853 ;;Total ram usage:        6 bytes
  4854 ;; Hardware stack levels used:    1
  4855 ;; Hardware stack levels required when called:    3
  4856 ;; This function calls:
  4857 ;;		_eeprom_read
  4858 ;; This function is called by:
  4859 ;;		_PGMReadNvm
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           
  4864                           ;psect for function _NVMRead
  4865  04C9                     _NVMRead:	
  4866                           
  4867                           ;incstack = 0
  4868                           ; Regs used in _NVMRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4869                           ;NVMRead@addr stored from wreg
  4870  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  4871  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  4872  04CB  00CA               	movwf	NVMRead@addr
  4873                           
  4874                           ;NVM.c: 6: unsigned char i;
  4875                           ;NVM.c: 8: for(i=0;i<len;i++)
  4876  04CC  01CB               	clrf	NVMRead@i
  4877  04CD                     l2456:	
  4878  04CD  0847               	movf	NVMRead@len,w
  4879  04CE  024B               	subwf	NVMRead@i,w
  4880  04CF  1803               	btfsc	3,0
  4881  04D0  0008               	return
  4882  04D1  0064               	clrwdt	;# 
  4883                           
  4884                           ;NVM.c: 11: (*(dest+i))=eeprom_read(addr+i);
  4885  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  4886  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  4887  04D4  084B               	movf	NVMRead@i,w
  4888  04D5  074A               	addwf	NVMRead@addr,w
  4889  04D6  118A  2579  118A   	fcall	_eeprom_read
  4890  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  4891  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  4892  04DB  00C8               	movwf	??_NVMRead
  4893  04DC  084B               	movf	NVMRead@i,w
  4894  04DD  0746               	addwf	NVMRead@dest,w
  4895  04DE  00C9               	movwf	??_NVMRead+1
  4896  04DF  0849               	movf	??_NVMRead+1,w
  4897  04E0  0084               	movwf	4
  4898  04E1  0848               	movf	??_NVMRead,w
  4899  04E2  1383               	bcf	3,7	;select IRP bank0
  4900  04E3  0080               	movwf	0
  4901  04E4  3001               	movlw	1
  4902  04E5  00C8               	movwf	??_NVMRead
  4903  04E6  0848               	movf	??_NVMRead,w
  4904  04E7  07CB               	addwf	NVMRead@i,f
  4905  04E8  2CCD               	goto	l2456
  4906  04E9                     __end_of_NVMRead:	
  4907                           
  4908                           	psect	text32
  4909  0579                     __ptext32:	
  4910 ;; *************** function _eeprom_read *****************
  4911 ;; Defined at:
  4912 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\eeread.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  addr            1    wreg     unsigned char 
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  addr            1    5[COMMON] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      unsigned char 
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4926 ;;      Params:         0       0       0       0
  4927 ;;      Locals:         1       0       0       0
  4928 ;;      Temps:          1       0       0       0
  4929 ;;      Totals:         2       0       0       0
  4930 ;;Total ram usage:        2 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    2
  4933 ;; This function calls:
  4934 ;;		Nothing
  4935 ;; This function is called by:
  4936 ;;		_NVMRead
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           
  4941                           ;psect for function _eeprom_read
  4942  0579                     _eeprom_read:	
  4943                           
  4944                           ;incstack = 0
  4945                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4946                           ;eeprom_read@addr stored from wreg
  4947  0579  00F5               	movwf	eeprom_read@addr
  4948  057A                     l565:	
  4949  057A  0064               	clrwdt	;# 
  4950  057B  1683               	bsf	3,5	;RP0=1, select bank3
  4951  057C  1703               	bsf	3,6	;RP1=1, select bank3
  4952  057D  188C               	btfsc	12,1	;volsfr
  4953  057E  2D7A               	goto	l565
  4954  057F  0875               	movf	eeprom_read@addr,w
  4955  0580  1283               	bcf	3,5	;RP0=0, select bank2
  4956  0581  1703               	bsf	3,6	;RP1=1, select bank2
  4957  0582  008D               	movwf	13	;volatile
  4958  0583  303F               	movlw	63
  4959  0584  00F4               	movwf	??_eeprom_read
  4960  0585  0874               	movf	??_eeprom_read,w
  4961  0586  1683               	bsf	3,5	;RP0=1, select bank3
  4962  0587  1703               	bsf	3,6	;RP1=1, select bank3
  4963  0588  058C               	andwf	12,f	;volsfr
  4964  0589  140C               	bsf	12,0	;volsfr
  4965  058A  1003               	clrc
  4966  058B  180C               	btfsc	12,0	;volsfr
  4967  058C  1403               	setc
  4968  058D  3000               	movlw	0
  4969  058E  1803               	skipnc
  4970  058F  3001               	movlw	1
  4971  0590  1283               	bcf	3,5	;RP0=0, select bank2
  4972  0591  1703               	bsf	3,6	;RP1=1, select bank2
  4973  0592  080C               	movf	12,w	;volatile
  4974  0593  0008               	return
  4975  0594                     __end_of_eeprom_read:	
  4976                           
  4977                           	psect	text33
  4978  0523                     __ptext33:	
  4979 ;; *************** function _DINTask *****************
  4980 ;; Defined at:
  4981 ;;		line 80 in file "DIN.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;		None
  4986 ;; Return value:  Size  Location     Type
  4987 ;;		None               void
  4988 ;; Registers used:
  4989 ;;		wreg, status,2, status,0
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4995 ;;      Params:         0       0       0       0
  4996 ;;      Locals:         0       0       0       0
  4997 ;;      Temps:          1       0       0       0
  4998 ;;      Totals:         1       0       0       0
  4999 ;;Total ram usage:        1 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    2
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_main
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           
  5010                           ;psect for function _DINTask
  5011  0523                     _DINTask:	
  5012                           
  5013                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  5014                           
  5015                           ;incstack = 0
  5016                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  5017  0523  01F9               	clrf	_u_in_sta_tmpTask
  5018                           
  5019                           ;DIN.c: 82: if(!PORTBbits.RB2)
  5020  0524  1283               	bcf	3,5	;RP0=0, select bank0
  5021  0525  1303               	bcf	3,6	;RP1=0, select bank0
  5022  0526  1D06               	btfss	6,2	;volatile
  5023                           
  5024                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  5025  0527  1479               	bsf	_u_in_sta_tmpTask,0
  5026                           
  5027                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  5028  0528  0879               	movf	_u_in_sta_tmpTask,w
  5029  0529  3901               	andlw	1
  5030  052A  00F4               	movwf	??_DINTask
  5031  052B  0878               	movf	_u_in_sta_currTask,w
  5032  052C  3901               	andlw	1
  5033  052D  0674               	xorwf	??_DINTask,w
  5034  052E  1903               	skipnz
  5035  052F  2D38               	goto	l1994
  5036                           
  5037                           ;DIN.c: 87: {
  5038                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  5039  0530  1078               	bcf	_u_in_sta_currTask,0
  5040  0531  1C79               	btfss	_u_in_sta_tmpTask,0
  5041  0532  2D34               	goto	l1990
  5042  0533  1478               	bsf	_u_in_sta_currTask,0
  5043  0534                     l1990:	
  5044                           
  5045                           ;DIN.c: 89: tmrDbncSel=0;
  5046  0534  1283               	bcf	3,5	;RP0=0, select bank0
  5047  0535  1303               	bcf	3,6	;RP1=0, select bank0
  5048  0536  01B0               	clrf	_tmrDbncSel
  5049                           
  5050                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  5051  0537  1477               	bsf	_u_flg_din,0
  5052  0538                     l1994:	
  5053                           
  5054                           ;DIN.c: 91: }
  5055                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  5056  0538  1C78               	btfss	_u_in_sta_currTask,0
  5057  0539  2D3C               	goto	l1998
  5058                           
  5059                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  5060  053A  14F7               	bsf	_u_flg_din,1
  5061  053B  0008               	return
  5062  053C                     l1998:	
  5063                           
  5064                           ;DIN.c: 96: else
  5065                           ;DIN.c: 97: {
  5066                           ;DIN.c: 98: tmrLongSel=0;
  5067  053C  01A6               	clrf	_tmrLongSel
  5068  053D  01A7               	clrf	_tmrLongSel+1
  5069                           
  5070                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  5071  053E  10F7               	bcf	_u_flg_din,1
  5072  053F  0008               	return
  5073  0540                     __end_of_DINTask:	
  5074                           
  5075                           	psect	text34
  5076  0616                     __ptext34:	
  5077 ;; *************** function _DINInit *****************
  5078 ;; Defined at:
  5079 ;;		line 25 in file "DIN.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  sta             1    wreg     unsigned char 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  sta             1    4[COMMON] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5093 ;;      Params:         0       0       0       0
  5094 ;;      Locals:         1       0       0       0
  5095 ;;      Temps:          0       0       0       0
  5096 ;;      Totals:         1       0       0       0
  5097 ;;Total ram usage:        1 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    2
  5100 ;; This function calls:
  5101 ;;		Nothing
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           
  5108                           ;psect for function _DINInit
  5109  0616                     _DINInit:	
  5110                           
  5111                           ;incstack = 0
  5112                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  5113                           ;DINInit@sta stored from wreg
  5114  0616  00F4               	movwf	DINInit@sta
  5115                           
  5116                           ;DIN.c: 26: switch(sta)
  5117  0617  2E21               	goto	l1958
  5118  0618                     l1954:	
  5119                           ;DIN.c: 27: {
  5120                           ;DIN.c: 31: case 1:
  5121                           
  5122                           
  5123                           ;DIN.c: 33: u_flg_din.val=0;
  5124  0618  01F7               	clrf	_u_flg_din
  5125                           
  5126                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  5127  0619  01F8               	clrf	_u_in_sta_currTask
  5128                           
  5129                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  5130  061A  01F9               	clrf	_u_in_sta_tmpTask
  5131                           
  5132                           ;DIN.c: 36: u_in_ev_up.val=0;
  5133  061B  1283               	bcf	3,5	;RP0=0, select bank0
  5134  061C  1303               	bcf	3,6	;RP1=0, select bank0
  5135  061D  01B6               	clrf	_u_in_ev_up
  5136                           
  5137                           ;DIN.c: 37: u_in_ev_down.val=0;
  5138  061E  01B4               	clrf	_u_in_ev_down
  5139                           
  5140                           ;DIN.c: 38: u_in_ev_long.val=0;
  5141  061F  01B5               	clrf	_u_in_ev_long
  5142                           
  5143                           ;DIN.c: 43: }
  5144                           
  5145                           ;DIN.c: 39: break;
  5146  0620  0008               	return
  5147  0621                     l1958:	
  5148  0621  0874               	movf	DINInit@sta,w
  5149                           
  5150                           ; Switch size 1, requested type "space"
  5151                           ; Number of cases is 1, Range of values is 1 to 1
  5152                           ; switch strategies available:
  5153                           ; Name         Instructions Cycles
  5154                           ; simple_byte            4     3 (average)
  5155                           ; direct_byte           12    10 (fixed)
  5156                           ; jumptable            263     9 (fixed)
  5157                           ;	Chosen strategy is simple_byte
  5158  0622  3A01               	xorlw	1	; case 1
  5159  0623  1903               	skipnz
  5160  0624  2E18               	goto	l1954
  5161  0625  2E26               	goto	l232
  5162  0626                     l232:	
  5163  0626  0008               	return
  5164  0627                     __end_of_DINInit:	
  5165                           
  5166                           	psect	text35
  5167  067F                     __ptext35:	
  5168 ;; *************** function _LEDInit *****************
  5169 ;; Defined at:
  5170 ;;		line 8 in file "LED.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  sta             1    wreg     unsigned char 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  sta             1    4[COMMON] unsigned char 
  5175 ;; Return value:  Size  Location     Type
  5176 ;;		None               void
  5177 ;; Registers used:
  5178 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5184 ;;      Params:         0       0       0       0
  5185 ;;      Locals:         1       0       0       0
  5186 ;;      Temps:          0       0       0       0
  5187 ;;      Totals:         1       0       0       0
  5188 ;;Total ram usage:        1 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    2
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_main
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function _LEDInit
  5200  067F                     _LEDInit:	
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  5204                           ;LEDInit@sta stored from wreg
  5205  067F  00F4               	movwf	LEDInit@sta
  5206                           
  5207                           ;LED.c: 9: switch(sta)
  5208  0680  2E85               	goto	l1890
  5209  0681                     l178:	
  5210                           ;LED.c: 10: {
  5211                           ;LED.c: 17: case 2:
  5212                           
  5213                           
  5214                           ;LED.c: 19: PORTCbits.RC7=1;
  5215  0681  1283               	bcf	3,5	;RP0=0, select bank0
  5216  0682  1303               	bcf	3,6	;RP1=0, select bank0
  5217  0683  1787               	bsf	7,7	;volatile
  5218                           
  5219                           ;LED.c: 21: }
  5220                           
  5221                           ;LED.c: 20: break;
  5222  0684  0008               	return
  5223  0685                     l1890:	
  5224  0685  0874               	movf	LEDInit@sta,w
  5225                           
  5226                           ; Switch size 1, requested type "space"
  5227                           ; Number of cases is 1, Range of values is 2 to 2
  5228                           ; switch strategies available:
  5229                           ; Name         Instructions Cycles
  5230                           ; simple_byte            4     3 (average)
  5231                           ; direct_byte           12    10 (fixed)
  5232                           ; jumptable            263     9 (fixed)
  5233                           ;	Chosen strategy is simple_byte
  5234  0686  3A02               	xorlw	2	; case 2
  5235  0687  1903               	skipnz
  5236  0688  2E81               	goto	l178
  5237  0689  2E8A               	goto	l180
  5238  068A                     l180:	
  5239  068A  0008               	return
  5240  068B                     __end_of_LEDInit:	
  5241                           
  5242                           	psect	text36
  5243  0036                     __ptext36:	
  5244 ;; *************** function _ADCTask *****************
  5245 ;; Defined at:
  5246 ;;		line 45 in file "ADC.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5260 ;;      Params:         0       0       0       0
  5261 ;;      Locals:         0       0       0       0
  5262 ;;      Temps:          0       2       0       0
  5263 ;;      Totals:         0       2       0       0
  5264 ;;Total ram usage:        2 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    3
  5267 ;; This function calls:
  5268 ;;		___lwdiv
  5269 ;; This function is called by:
  5270 ;;		_main
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           
  5275                           ;psect for function _ADCTask
  5276  0036                     _ADCTask:	
  5277                           
  5278                           ;ADC.c: 46: static unsigned short sumBatt=0,sumTemp=0;
  5279                           ;ADC.c: 47: static unsigned char cntSum=0;
  5280                           ;ADC.c: 50: if(!(ADCON0bits.GO))
  5281                           
  5282                           ;incstack = 0
  5283                           ; Regs used in _ADCTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5284  0036  1283               	bcf	3,5	;RP0=0, select bank0
  5285  0037  1303               	bcf	3,6	;RP1=0, select bank0
  5286  0038  1C9F               	btfss	31,1	;volatile
  5287  0039  288F               	goto	l2378
  5288  003A  2897               	goto	l2380
  5289  003B                     l2350:	
  5290                           ;ADC.c: 54: {
  5291                           ;ADC.c: 55: case ADC_CH_BATT:
  5292                           
  5293                           ;ADC.c: 51: {
  5294                           ;ADC.c: 53: switch(adc_ch)
  5295                           
  5296                           
  5297                           ;ADC.c: 57: if(cntSum==10)
  5298  003B  0876               	movf	ADCTask@cntSum,w
  5299  003C  3A0A               	xorlw	10
  5300  003D  1D03               	skipz
  5301  003E  2855               	goto	l2356
  5302                           
  5303                           ;ADC.c: 58: {
  5304                           ;ADC.c: 60: batt=sumBatt/10;
  5305  003F  300A               	movlw	10
  5306  0040  00C6               	movwf	?___lwdiv
  5307  0041  3000               	movlw	0
  5308  0042  00C7               	movwf	?___lwdiv+1
  5309  0043  0821               	movf	ADCTask@sumBatt+1,w
  5310  0044  01C9               	clrf	?___lwdiv+3
  5311  0045  07C9               	addwf	?___lwdiv+3,f
  5312  0046  0820               	movf	ADCTask@sumBatt,w
  5313  0047  01C8               	clrf	?___lwdiv+2
  5314  0048  07C8               	addwf	?___lwdiv+2,f
  5315  0049  118A  220C  118A   	fcall	___lwdiv
  5316  004C  1283               	bcf	3,5	;RP0=0, select bank0
  5317  004D  1303               	bcf	3,6	;RP1=0, select bank0
  5318  004E  0846               	movf	?___lwdiv,w
  5319  004F  00CD               	movwf	??_ADCTask
  5320  0050  084D               	movf	??_ADCTask,w
  5321  0051  00A9               	movwf	_batt
  5322                           
  5323                           ;ADC.c: 62: sumBatt=0;
  5324  0052  01A0               	clrf	ADCTask@sumBatt
  5325  0053  01A1               	clrf	ADCTask@sumBatt+1
  5326                           
  5327                           ;ADC.c: 63: }
  5328  0054  285E               	goto	l116
  5329  0055                     l2356:	
  5330                           
  5331                           ;ADC.c: 64: else
  5332                           ;ADC.c: 65: sumBatt+=ADRESH;
  5333  0055  081E               	movf	30,w	;volatile
  5334  0056  00CD               	movwf	??_ADCTask
  5335  0057  01CE               	clrf	??_ADCTask+1
  5336  0058  084D               	movf	??_ADCTask,w
  5337  0059  07A0               	addwf	ADCTask@sumBatt,f
  5338  005A  1803               	skipnc
  5339  005B  0AA1               	incf	ADCTask@sumBatt+1,f
  5340  005C  084E               	movf	??_ADCTask+1,w
  5341  005D  07A1               	addwf	ADCTask@sumBatt+1,f
  5342  005E                     l116:	
  5343                           
  5344                           ;ADC.c: 67: ADCON0=0b10101001;
  5345  005E  30A9               	movlw	169
  5346  005F  009F               	movwf	31	;volatile
  5347                           
  5348                           ;ADC.c: 68: adc_ch=ADC_CH_TEMP;
  5349  0060  01A8               	clrf	_adc_ch
  5350  0061  0AA8               	incf	_adc_ch,f
  5351                           
  5352                           ;ADC.c: 69: break;
  5353  0062  2897               	goto	l2380
  5354  0063                     l2360:	
  5355                           ;ADC.c: 70: case ADC_CH_TEMP:
  5356                           
  5357                           
  5358                           ;ADC.c: 72: if(cntSum==10)
  5359  0063  0876               	movf	ADCTask@cntSum,w
  5360  0064  3A0A               	xorlw	10
  5361  0065  1D03               	skipz
  5362  0066  287E               	goto	l2368
  5363                           
  5364                           ;ADC.c: 73: {
  5365                           ;ADC.c: 75: temp=sumTemp/10;
  5366  0067  300A               	movlw	10
  5367  0068  00C6               	movwf	?___lwdiv
  5368  0069  3000               	movlw	0
  5369  006A  00C7               	movwf	?___lwdiv+1
  5370  006B  0823               	movf	ADCTask@sumTemp+1,w
  5371  006C  01C9               	clrf	?___lwdiv+3
  5372  006D  07C9               	addwf	?___lwdiv+3,f
  5373  006E  0822               	movf	ADCTask@sumTemp,w
  5374  006F  01C8               	clrf	?___lwdiv+2
  5375  0070  07C8               	addwf	?___lwdiv+2,f
  5376  0071  118A  220C  118A   	fcall	___lwdiv
  5377  0074  1283               	bcf	3,5	;RP0=0, select bank0
  5378  0075  1303               	bcf	3,6	;RP1=0, select bank0
  5379  0076  0846               	movf	?___lwdiv,w
  5380  0077  00CD               	movwf	??_ADCTask
  5381  0078  084D               	movf	??_ADCTask,w
  5382  0079  00AF               	movwf	_temp
  5383                           
  5384                           ;ADC.c: 77: sumTemp=0;
  5385  007A  01A2               	clrf	ADCTask@sumTemp
  5386  007B  01A3               	clrf	ADCTask@sumTemp+1
  5387                           
  5388                           ;ADC.c: 79: cntSum=0;
  5389  007C  01F6               	clrf	ADCTask@cntSum
  5390                           
  5391                           ;ADC.c: 80: }
  5392  007D  288B               	goto	l2372
  5393  007E                     l2368:	
  5394                           
  5395                           ;ADC.c: 81: else
  5396                           ;ADC.c: 82: {
  5397                           ;ADC.c: 84: sumTemp+=ADRESH;
  5398  007E  081E               	movf	30,w	;volatile
  5399  007F  00CD               	movwf	??_ADCTask
  5400  0080  01CE               	clrf	??_ADCTask+1
  5401  0081  084D               	movf	??_ADCTask,w
  5402  0082  07A2               	addwf	ADCTask@sumTemp,f
  5403  0083  1803               	skipnc
  5404  0084  0AA3               	incf	ADCTask@sumTemp+1,f
  5405  0085  084E               	movf	??_ADCTask+1,w
  5406  0086  07A3               	addwf	ADCTask@sumTemp+1,f
  5407                           
  5408                           ;ADC.c: 86: cntSum++;
  5409  0087  3001               	movlw	1
  5410  0088  00CD               	movwf	??_ADCTask
  5411  0089  084D               	movf	??_ADCTask,w
  5412  008A  07F6               	addwf	ADCTask@cntSum,f
  5413  008B                     l2372:	
  5414                           
  5415                           ;ADC.c: 87: }
  5416                           ;ADC.c: 89: ADCON0=0b10000001;
  5417  008B  3081               	movlw	129
  5418  008C  009F               	movwf	31	;volatile
  5419                           
  5420                           ;ADC.c: 90: adc_ch=ADC_CH_BATT;
  5421  008D  01A8               	clrf	_adc_ch
  5422                           
  5423                           ;ADC.c: 92: }
  5424                           
  5425                           ;ADC.c: 91: break;
  5426  008E  2897               	goto	l2380
  5427  008F                     l2378:	
  5428  008F  0828               	movf	_adc_ch,w
  5429                           
  5430                           ; Switch size 1, requested type "space"
  5431                           ; Number of cases is 2, Range of values is 0 to 1
  5432                           ; switch strategies available:
  5433                           ; Name         Instructions Cycles
  5434                           ; simple_byte            7     4 (average)
  5435                           ; direct_byte           11     7 (fixed)
  5436                           ; jumptable            260     6 (fixed)
  5437                           ;	Chosen strategy is simple_byte
  5438  0090  3A00               	xorlw	0	; case 0
  5439  0091  1903               	skipnz
  5440  0092  283B               	goto	l2350
  5441  0093  3A01               	xorlw	1	; case 1
  5442  0094  1903               	skipnz
  5443  0095  2863               	goto	l2360
  5444  0096  2897               	goto	l2380
  5445  0097                     l2380:	
  5446                           
  5447                           ;ADC.c: 93: }
  5448                           ;ADC.c: 95: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5449  0097  3006               	movlw	6
  5450  0098  00CD               	movwf	??_ADCTask
  5451  0099                     u1737:	
  5452  0099  0BCD               	decfsz	??_ADCTask,f
  5453  009A  2899               	goto	u1737
  5454  009B  0000               	nop
  5455                           
  5456                           ;ADC.c: 97: ADCON0bits.GO=1;
  5457  009C  1283               	bcf	3,5	;RP0=0, select bank0
  5458  009D  1303               	bcf	3,6	;RP1=0, select bank0
  5459  009E  149F               	bsf	31,1	;volatile
  5460  009F  0008               	return
  5461  00A0                     __end_of_ADCTask:	
  5462                           
  5463                           	psect	text37
  5464  020C                     __ptext37:	
  5465 ;; *************** function ___lwdiv *****************
  5466 ;; Defined at:
  5467 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  divisor         2    0[BANK0 ] unsigned int 
  5470 ;;  dividend        2    2[BANK0 ] unsigned int 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  quotient        2    5[BANK0 ] unsigned int 
  5473 ;;  counter         1    4[BANK0 ] unsigned char 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  2    0[BANK0 ] unsigned int 
  5476 ;; Registers used:
  5477 ;;		wreg, status,2, status,0
  5478 ;; Tracked objects:
  5479 ;;		On entry : 0/0
  5480 ;;		On exit  : 0/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5483 ;;      Params:         0       4       0       0
  5484 ;;      Locals:         0       3       0       0
  5485 ;;      Temps:          1       0       0       0
  5486 ;;      Totals:         1       7       0       0
  5487 ;;Total ram usage:        8 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    2
  5490 ;; This function calls:
  5491 ;;		Nothing
  5492 ;; This function is called by:
  5493 ;;		_ADCTask
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           
  5498                           ;psect for function ___lwdiv
  5499  020C                     ___lwdiv:	
  5500                           
  5501                           ;incstack = 0
  5502                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5503  020C  1283               	bcf	3,5	;RP0=0, select bank0
  5504  020D  1303               	bcf	3,6	;RP1=0, select bank0
  5505  020E  01CB               	clrf	___lwdiv@quotient
  5506  020F  01CC               	clrf	___lwdiv@quotient+1
  5507  0210  0847               	movf	___lwdiv@divisor+1,w
  5508  0211  0446               	iorwf	___lwdiv@divisor,w
  5509  0212  1903               	skipnz
  5510  0213  2A45               	goto	l2760
  5511  0214  01CA               	clrf	___lwdiv@counter
  5512  0215  0ACA               	incf	___lwdiv@counter,f
  5513  0216                     l2748:	
  5514  0216  1BC7               	btfsc	___lwdiv@divisor+1,7
  5515  0217  2A24               	goto	l2750
  5516  0218  3001               	movlw	1
  5517  0219                     u1665:	
  5518  0219  1003               	clrc
  5519  021A  0DC6               	rlf	___lwdiv@divisor,f
  5520  021B  0DC7               	rlf	___lwdiv@divisor+1,f
  5521  021C  3EFF               	addlw	-1
  5522  021D  1D03               	skipz
  5523  021E  2A19               	goto	u1665
  5524  021F  3001               	movlw	1
  5525  0220  00F4               	movwf	??___lwdiv
  5526  0221  0874               	movf	??___lwdiv,w
  5527  0222  07CA               	addwf	___lwdiv@counter,f
  5528  0223  2A16               	goto	l2748
  5529  0224                     l2750:	
  5530  0224  3001               	movlw	1
  5531  0225                     u1685:	
  5532  0225  1003               	clrc
  5533  0226  0DCB               	rlf	___lwdiv@quotient,f
  5534  0227  0DCC               	rlf	___lwdiv@quotient+1,f
  5535  0228  3EFF               	addlw	-1
  5536  0229  1D03               	skipz
  5537  022A  2A25               	goto	u1685
  5538  022B  0847               	movf	___lwdiv@divisor+1,w
  5539  022C  0249               	subwf	___lwdiv@dividend+1,w
  5540  022D  1D03               	skipz
  5541  022E  2A31               	goto	u1695
  5542  022F  0846               	movf	___lwdiv@divisor,w
  5543  0230  0248               	subwf	___lwdiv@dividend,w
  5544  0231                     u1695:	
  5545  0231  1C03               	skipc
  5546  0232  2A3A               	goto	l2756
  5547  0233  0846               	movf	___lwdiv@divisor,w
  5548  0234  02C8               	subwf	___lwdiv@dividend,f
  5549  0235  0847               	movf	___lwdiv@divisor+1,w
  5550  0236  1C03               	skipc
  5551  0237  03C9               	decf	___lwdiv@dividend+1,f
  5552  0238  02C9               	subwf	___lwdiv@dividend+1,f
  5553  0239  144B               	bsf	___lwdiv@quotient,0
  5554  023A                     l2756:	
  5555  023A  3001               	movlw	1
  5556  023B                     u1705:	
  5557  023B  1003               	clrc
  5558  023C  0CC7               	rrf	___lwdiv@divisor+1,f
  5559  023D  0CC6               	rrf	___lwdiv@divisor,f
  5560  023E  3EFF               	addlw	-1
  5561  023F  1D03               	skipz
  5562  0240  2A3B               	goto	u1705
  5563  0241  3001               	movlw	1
  5564  0242  02CA               	subwf	___lwdiv@counter,f
  5565  0243  1D03               	btfss	3,2
  5566  0244  2A24               	goto	l2750
  5567  0245                     l2760:	
  5568  0245  084C               	movf	___lwdiv@quotient+1,w
  5569  0246  01C7               	clrf	?___lwdiv+1
  5570  0247  07C7               	addwf	?___lwdiv+1,f
  5571  0248  084B               	movf	___lwdiv@quotient,w
  5572  0249  01C6               	clrf	?___lwdiv
  5573  024A  07C6               	addwf	?___lwdiv,f
  5574  024B  0008               	return
  5575  024C                     __end_of___lwdiv:	
  5576                           
  5577                           	psect	text38
  5578  03B7                     __ptext38:	
  5579 ;; *************** function _ADCInit *****************
  5580 ;; Defined at:
  5581 ;;		line 21 in file "ADC.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  state           1    wreg     unsigned char 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  state           1    5[COMMON] unsigned char 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;		None               void
  5588 ;; Registers used:
  5589 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5595 ;;      Params:         0       0       0       0
  5596 ;;      Locals:         1       0       0       0
  5597 ;;      Temps:          1       0       0       0
  5598 ;;      Totals:         2       0       0       0
  5599 ;;Total ram usage:        2 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    2
  5602 ;; This function calls:
  5603 ;;		Nothing
  5604 ;; This function is called by:
  5605 ;;		_main
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function _ADCInit
  5611  03B7                     _ADCInit:	
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  5615                           ;ADCInit@state stored from wreg
  5616  03B7  00F5               	movwf	ADCInit@state
  5617                           
  5618                           ;ADC.c: 22: switch(state)
  5619  03B8  2BD0               	goto	l1800
  5620  03B9                     l1788:	
  5621                           ;ADC.c: 23: {
  5622                           ;ADC.c: 24: case 0:
  5623                           
  5624                           
  5625                           ;ADC.c: 26: ADCON0=0b10000001; ADCON1=0b00000000;
  5626  03B9  3081               	movlw	129
  5627  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  5628  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  5629  03BC  009F               	movwf	31	;volatile
  5630  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  5631  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  5632  03BF  019F               	clrf	31	;volatile
  5633                           
  5634                           ;ADC.c: 27: break;
  5635  03C0  0008               	return
  5636  03C1                     l1792:	
  5637                           ;ADC.c: 28: case 1:
  5638                           
  5639                           
  5640                           ;ADC.c: 30: adc_ch=ADC_CH_BATT;
  5641  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  5642  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  5643  03C3  01A8               	clrf	_adc_ch
  5644                           
  5645                           ;ADC.c: 31: batt=0;
  5646  03C4  01A9               	clrf	_batt
  5647                           
  5648                           ;ADC.c: 32: temp=0;
  5649  03C5  01AF               	clrf	_temp
  5650                           
  5651                           ;ADC.c: 33: break;
  5652  03C6  0008               	return
  5653  03C7                     l1794:	
  5654                           ;ADC.c: 34: case 2:
  5655                           
  5656                           
  5657                           ;ADC.c: 37: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5658  03C7  3006               	movlw	6
  5659  03C8  00F4               	movwf	??_ADCInit
  5660  03C9                     u1747:	
  5661  03C9  0BF4               	decfsz	??_ADCInit,f
  5662  03CA  2BC9               	goto	u1747
  5663  03CB  0000               	nop
  5664                           
  5665                           ;ADC.c: 39: ADCON0bits.GO=1;
  5666  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  5667  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  5668  03CE  149F               	bsf	31,1	;volatile
  5669                           
  5670                           ;ADC.c: 41: }
  5671                           
  5672                           ;ADC.c: 40: break;
  5673  03CF  0008               	return
  5674  03D0                     l1800:	
  5675  03D0  0875               	movf	ADCInit@state,w
  5676                           
  5677                           ; Switch size 1, requested type "space"
  5678                           ; Number of cases is 3, Range of values is 0 to 2
  5679                           ; switch strategies available:
  5680                           ; Name         Instructions Cycles
  5681                           ; simple_byte           10     6 (average)
  5682                           ; direct_byte           13     7 (fixed)
  5683                           ; jumptable            260     6 (fixed)
  5684                           ;	Chosen strategy is simple_byte
  5685  03D1  3A00               	xorlw	0	; case 0
  5686  03D2  1903               	skipnz
  5687  03D3  2BB9               	goto	l1788
  5688  03D4  3A01               	xorlw	1	; case 1
  5689  03D5  1903               	skipnz
  5690  03D6  2BC1               	goto	l1792
  5691  03D7  3A03               	xorlw	3	; case 2
  5692  03D8  1903               	skipnz
  5693  03D9  2BC7               	goto	l1794
  5694  03DA  2BDB               	goto	l103
  5695  03DB                     l103:	
  5696  03DB  0008               	return
  5697  03DC                     __end_of_ADCInit:	
  5698                           
  5699                           	psect	text39
  5700  0424                     __ptext39:	
  5701 ;; *************** function _SPIInit *****************
  5702 ;; Defined at:
  5703 ;;		line 9 in file "SPI.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  state           1    wreg     unsigned char 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  state           1    5[COMMON] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;		None               void
  5710 ;; Registers used:
  5711 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5717 ;;      Params:         0       0       0       0
  5718 ;;      Locals:         1       0       0       0
  5719 ;;      Temps:          1       0       0       0
  5720 ;;      Totals:         2       0       0       0
  5721 ;;Total ram usage:        2 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    2
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_main
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _SPIInit
  5733  0424                     _SPIInit:	
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  5737                           ;SPIInit@state stored from wreg
  5738  0424  00F5               	movwf	SPIInit@state
  5739                           
  5740                           ;SPI.c: 10: switch(state)
  5741  0425  2C3B               	goto	l1766
  5742  0426                     l57:	
  5743                           ;SPI.c: 11: {
  5744                           ;SPI.c: 12: case 0:
  5745                           
  5746                           
  5747                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N=0b00000000; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  5748  0426  1683               	bsf	3,5	;RP0=1, select bank1
  5749  0427  1303               	bcf	3,6	;RP1=0, select bank1
  5750  0428  1607               	bsf	7,4	;volatile
  5751  0429  30D7               	movlw	215
  5752  042A  00F4               	movwf	??_SPIInit
  5753  042B  0874               	movf	??_SPIInit,w
  5754  042C  0587               	andwf	7,f	;volatile
  5755  042D  1283               	bcf	3,5	;RP0=0, select bank0
  5756  042E  1303               	bcf	3,6	;RP1=0, select bank0
  5757  042F  1294               	bcf	20,5	;volatile
  5758  0430  0193               	clrf	19	;volatile
  5759  0431  0194               	clrf	20	;volatile
  5760  0432  1683               	bsf	3,5	;RP0=1, select bank1
  5761  0433  1303               	bcf	3,6	;RP1=0, select bank1
  5762  0434  0191               	clrf	17	;volatile
  5763  0435  3040               	movlw	64
  5764  0436  0094               	movwf	20	;volatile
  5765  0437  1283               	bcf	3,5	;RP0=0, select bank0
  5766  0438  1303               	bcf	3,6	;RP1=0, select bank0
  5767  0439  1694               	bsf	20,5	;volatile
  5768                           
  5769                           ;SPI.c: 22: }
  5770                           
  5771                           ;SPI.c: 21: break;
  5772                           
  5773                           ;SPI.c: 19: case 2:
  5774                           
  5775                           ;SPI.c: 18: break;
  5776                           
  5777                           ;SPI.c: 16: case 1:
  5778                           
  5779                           ;SPI.c: 15: break;
  5780  043A  0008               	return
  5781  043B                     l1766:	
  5782  043B  0875               	movf	SPIInit@state,w
  5783                           
  5784                           ; Switch size 1, requested type "space"
  5785                           ; Number of cases is 3, Range of values is 0 to 2
  5786                           ; switch strategies available:
  5787                           ; Name         Instructions Cycles
  5788                           ; simple_byte           10     6 (average)
  5789                           ; direct_byte           13     7 (fixed)
  5790                           ; jumptable            260     6 (fixed)
  5791                           ;	Chosen strategy is simple_byte
  5792  043C  3A00               	xorlw	0	; case 0
  5793  043D  1903               	skipnz
  5794  043E  2C26               	goto	l57
  5795  043F  3A01               	xorlw	1	; case 1
  5796  0440  1903               	skipnz
  5797  0441  2C46               	goto	l61
  5798  0442  3A03               	xorlw	3	; case 2
  5799  0443  1903               	skipnz
  5800  0444  2C46               	goto	l61
  5801  0445  2C46               	goto	l61
  5802  0446                     l61:	
  5803  0446  0008               	return
  5804  0447                     __end_of_SPIInit:	
  5805                           
  5806                           	psect	text40
  5807  0540                     __ptext40:	
  5808 ;; *************** function _OUTInit *****************
  5809 ;; Defined at:
  5810 ;;		line 7 in file "OUT.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  sta             1    wreg     unsigned char 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  sta             1    5[COMMON] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;		None               void
  5817 ;; Registers used:
  5818 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5824 ;;      Params:         0       0       0       0
  5825 ;;      Locals:         1       0       0       0
  5826 ;;      Temps:          1       0       0       0
  5827 ;;      Totals:         2       0       0       0
  5828 ;;Total ram usage:        2 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:    2
  5831 ;; This function calls:
  5832 ;;		Nothing
  5833 ;; This function is called by:
  5834 ;;		_main
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           
  5839                           ;psect for function _OUTInit
  5840  0540                     _OUTInit:	
  5841                           
  5842                           ;incstack = 0
  5843                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  5844                           ;OUTInit@sta stored from wreg
  5845  0540  00F5               	movwf	OUTInit@sta
  5846                           
  5847                           ;OUT.c: 8: switch(sta)
  5848  0541  2D57               	goto	l1746
  5849  0542                     l1734:	
  5850                           ;OUT.c: 9: {
  5851                           ;OUT.c: 10: case 0:
  5852                           
  5853                           
  5854                           ;OUT.c: 12: TRISA=0b00000000; TRISC&=0b01010111; ANSEL&=0b11011111; PORTA&=0b00100000; P
      +                          ORTC|=0b10000000;
  5855  0542  1683               	bsf	3,5	;RP0=1, select bank1
  5856  0543  1303               	bcf	3,6	;RP1=0, select bank1
  5857  0544  0185               	clrf	5	;volatile
  5858  0545  3057               	movlw	87
  5859  0546  00F4               	movwf	??_OUTInit
  5860  0547  0874               	movf	??_OUTInit,w
  5861  0548  0587               	andwf	7,f	;volatile
  5862  0549  30DF               	movlw	223
  5863  054A  00F4               	movwf	??_OUTInit
  5864  054B  0874               	movf	??_OUTInit,w
  5865  054C  1683               	bsf	3,5	;RP0=1, select bank3
  5866  054D  1703               	bsf	3,6	;RP1=1, select bank3
  5867  054E  0588               	andwf	8,f	;volatile
  5868  054F  3020               	movlw	32
  5869  0550  00F4               	movwf	??_OUTInit
  5870  0551  0874               	movf	??_OUTInit,w
  5871  0552  1283               	bcf	3,5	;RP0=0, select bank0
  5872  0553  1303               	bcf	3,6	;RP1=0, select bank0
  5873  0554  0585               	andwf	5,f	;volatile
  5874  0555  1787               	bsf	7,7	;volatile
  5875                           
  5876                           ;OUT.c: 20: }
  5877                           
  5878                           ;OUT.c: 13: break;
  5879  0556  0008               	return
  5880  0557                     l1746:	
  5881  0557  0875               	movf	OUTInit@sta,w
  5882                           
  5883                           ; Switch size 1, requested type "space"
  5884                           ; Number of cases is 1, Range of values is 0 to 0
  5885                           ; switch strategies available:
  5886                           ; Name         Instructions Cycles
  5887                           ; simple_byte            4     3 (average)
  5888                           ; direct_byte            9     7 (fixed)
  5889                           ; jumptable            260     6 (fixed)
  5890                           ;	Chosen strategy is simple_byte
  5891  0558  3A00               	xorlw	0	; case 0
  5892  0559  1903               	skipnz
  5893  055A  2D42               	goto	l1734
  5894  055B  2D5C               	goto	l30
  5895  055C                     l30:	
  5896  055C  0008               	return
  5897  055D                     __end_of_OUTInit:	
  5898                           
  5899                           	psect	text41
  5900  0594                     __ptext41:	
  5901 ;; *************** function _INInit *****************
  5902 ;; Defined at:
  5903 ;;		line 7 in file "IN.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  sta             1    wreg     unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  sta             1    5[COMMON] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;		None               void
  5910 ;; Registers used:
  5911 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5917 ;;      Params:         0       0       0       0
  5918 ;;      Locals:         1       0       0       0
  5919 ;;      Temps:          1       0       0       0
  5920 ;;      Totals:         2       0       0       0
  5921 ;;Total ram usage:        2 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    2
  5924 ;; This function calls:
  5925 ;;		Nothing
  5926 ;; This function is called by:
  5927 ;;		_main
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function _INInit
  5933  0594                     _INInit:	
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  5937                           ;INInit@sta stored from wreg
  5938  0594  00F5               	movwf	INInit@sta
  5939                           
  5940                           ;IN.c: 8: switch(sta)
  5941  0595  2DA8               	goto	l1730
  5942  0596                     l1722:	
  5943                           ;IN.c: 9: {
  5944                           ;IN.c: 10: case 0:
  5945                           
  5946                           
  5947                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELH&=0b11111000; WPUB=0b00000111;
  5948  0596  3007               	movlw	7
  5949  0597  00F4               	movwf	??_INInit
  5950  0598  0874               	movf	??_INInit,w
  5951  0599  1683               	bsf	3,5	;RP0=1, select bank1
  5952  059A  1303               	bcf	3,6	;RP1=0, select bank1
  5953  059B  0486               	iorwf	6,f	;volatile
  5954  059C  1607               	bsf	7,4	;volatile
  5955  059D  30F8               	movlw	248
  5956  059E  00F4               	movwf	??_INInit
  5957  059F  0874               	movf	??_INInit,w
  5958  05A0  1683               	bsf	3,5	;RP0=1, select bank3
  5959  05A1  1703               	bsf	3,6	;RP1=1, select bank3
  5960  05A2  0589               	andwf	9,f	;volatile
  5961  05A3  3007               	movlw	7
  5962  05A4  1683               	bsf	3,5	;RP0=1, select bank1
  5963  05A5  1303               	bcf	3,6	;RP1=0, select bank1
  5964  05A6  0095               	movwf	21	;volatile
  5965                           
  5966                           ;IN.c: 20: }
  5967                           
  5968                           ;IN.c: 13: break;
  5969  05A7  0008               	return
  5970  05A8                     l1730:	
  5971  05A8  0875               	movf	INInit@sta,w
  5972                           
  5973                           ; Switch size 1, requested type "space"
  5974                           ; Number of cases is 1, Range of values is 0 to 0
  5975                           ; switch strategies available:
  5976                           ; Name         Instructions Cycles
  5977                           ; simple_byte            4     3 (average)
  5978                           ; direct_byte            9     7 (fixed)
  5979                           ; jumptable            260     6 (fixed)
  5980                           ;	Chosen strategy is simple_byte
  5981  05A9  3A00               	xorlw	0	; case 0
  5982  05AA  1903               	skipnz
  5983  05AB  2D96               	goto	l1722
  5984  05AC  2DAD               	goto	l14
  5985  05AD                     l14:	
  5986  05AD  0008               	return
  5987  05AE                     __end_of_INInit:	
  5988                           
  5989                           	psect	text42
  5990  05F1                     __ptext42:	
  5991 ;; *************** function _INTIsr *****************
  5992 ;; Defined at:
  5993 ;;		line 27 in file "Sensore.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6007 ;;      Params:         0       0       0       0
  6008 ;;      Locals:         0       0       0       0
  6009 ;;      Temps:          4       0       0       0
  6010 ;;      Totals:         4       0       0       0
  6011 ;;Total ram usage:        4 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    1
  6014 ;; This function calls:
  6015 ;;		_SYSInt
  6016 ;; This function is called by:
  6017 ;;		Interrupt level 1
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           
  6022                           ;psect for function _INTIsr
  6023  05F1                     _INTIsr:	
  6024                           
  6025                           ;Sensore.c: 29: if(INTCONbits.T0IF==1)
  6026  05F1  1D0B               	btfss	11,2	;volatile
  6027  05F2  2DF7               	goto	i1l544
  6028                           
  6029                           ;Sensore.c: 30: {
  6030                           ;Sensore.c: 32: INTCONbits.T0IF=0;
  6031  05F3  110B               	bcf	11,2	;volatile
  6032                           
  6033                           ;Sensore.c: 35: SYSInt();
  6034  05F4  118A  26AC  118A   	fcall	_SYSInt
  6035  05F7                     i1l544:	
  6036  05F7  0873               	movf	??_INTIsr+3,w
  6037  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  6038  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  6039  05FA  00FF               	movwf	127
  6040  05FB  0872               	movf	??_INTIsr+2,w
  6041  05FC  008A               	movwf	10
  6042  05FD  0871               	movf	??_INTIsr+1,w
  6043  05FE  0084               	movwf	4
  6044  05FF  0E70               	swapf	??_INTIsr^(0+-128),w
  6045  0600  0083               	movwf	3
  6046  0601  0EFE               	swapf	126,f
  6047  0602  0E7E               	swapf	126,w
  6048  0603  0009               	retfie
  6049  0604                     __end_of_INTIsr:	
  6050                           
  6051                           	psect	intentry
  6052  0004                     __pintentry:	
  6053                           ;incstack = 0
  6054                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  6055                           
  6056  0004                     interrupt_function:	
  6057  007E                     saved_w	set	btemp
  6058  0004  00FE               	movwf	btemp
  6059  0005  0E03               	swapf	3,w
  6060  0006  00F0               	movwf	??_INTIsr
  6061  0007  0804               	movf	4,w
  6062  0008  00F1               	movwf	??_INTIsr+1
  6063  0009  080A               	movf	10,w
  6064  000A  00F2               	movwf	??_INTIsr+2
  6065  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6066  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6067  000D  087F               	movf	btemp+1,w
  6068  000E  00F3               	movwf	??_INTIsr+3
  6069  000F  118A  2DF1         	ljmp	_INTIsr
  6070                           
  6071                           	psect	text43
  6072  06AC                     __ptext43:	
  6073 ;; *************** function _SYSInt *****************
  6074 ;; Defined at:
  6075 ;;		line 35 in file "SYS.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;		None
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;		None
  6080 ;; Return value:  Size  Location     Type
  6081 ;;		None               void
  6082 ;; Registers used:
  6083 ;;		wreg
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6089 ;;      Params:         0       0       0       0
  6090 ;;      Locals:         0       0       0       0
  6091 ;;      Temps:          0       0       0       0
  6092 ;;      Totals:         0       0       0       0
  6093 ;;Total ram usage:        0 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; This function calls:
  6096 ;;		Nothing
  6097 ;; This function is called by:
  6098 ;;		_INTIsr
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _SYSInt
  6104  06AC                     _SYSInt:	
  6105                           
  6106                           ;SYS.c: 37: u_SYS_STA.TICK=1;
  6107                           
  6108                           ;incstack = 0
  6109                           ; Regs used in _SYSInt: [wreg]
  6110  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  6111  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  6112  06AE  1433               	bsf	_u_SYS_STA,0
  6113                           
  6114                           ;SYS.c: 40: TMR0=255-156;
  6115  06AF  3063               	movlw	99
  6116  06B0  0081               	movwf	1	;volatile
  6117  06B1  0008               	return
  6118  06B2                     __end_of_SYSInt:	
  6119  007E                     btemp	set	126	;btemp
  6120  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     21      67
    BANK1            80      0      47
    BANK2            80      0       0

Pointer List with Targets:

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 5
		 -> pktTx(BANK0[5]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK0[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK0[5]), 

    CC1Write@src	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK0[5]), cc1PaTable(BANK0[8]), cc1InitVal(BANK1[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK0[5]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(BANK0[1]), 
		 -> cc1PaTable(BANK0[8]), cc1InitVal(BANK1[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_INInit
    _main->_OUTInit
    _main->_SPIInit
    _main->_ADCInit
    _main->_SYSInit
    _LEDNormalFlash->_DLYDelay_ms
    _CC1Read->_SPIWrite
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _NVMWrite->_eeprom_write
    _NVMRead->_eeprom_read
    _ADCTask->___lwdiv

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SYSTask
    _RTXTick->_RTXSendData
    _PGMSelLong->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _CC1Init->_CC1Write
    _RTXTask->_RTXReadPkt
    _RTXReadPkt->_RTXSendData
    _RTXReadPkt->_RTXSendRPgm
    _RTXSendRPgm->_RTXSndPkt
    _RTXRcvPkt->_CC1Read
    _LEDNormalFlash->_DLYDelay_ms
    _RTXInit->_RTXSendData
    _RTXSendData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _CC1Read->_SPIRead
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _NVMWrite->_eeprom_write
    _PGMReadNvm->_NVMRead
    _ADCTask->___lwdiv

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9729
                                             19 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _ADCTask
                            _CC1Init
                            _LEDInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              2     2      0    2596
                                             17 BANK0      2     2      0
                            _CC1Init
                            _DINTick
                           _SLPSleep
                         _PGMSelLong
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    1250
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0     390
                                              9 BANK0      1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             6     6      0     368
                                              5 BANK0      6     6      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CC1Init                                              3     3      0     489
                                              7 BANK0      3     3      0
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    3893
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    3893
                                             17 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                        _RTXSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                             16 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              9 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              4 BANK0      3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0    1479
                                             17 BANK0      1     1      0
                          _CC1Strobe
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          1     1      0    1250
                                             16 BANK0      1     1      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            7     6      1    1114
                                              9 BANK0      7     6      1
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2     390
                                              4 BANK0      5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     130
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             5     3      2     260
                                              2 BANK0      5     3      2
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              2 BANK0      3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             4     3      1     130
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0     136
                                              4 BANK0      3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2      68
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     499
                                             10 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     254
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     254
                                              9 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     254
                                              7 BANK0      2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                             6     4      2     254
                                              1 BANK0      6     4      2
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (5) _eeprom_write                                         3     2      1      62
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     214
                                              6 BANK0      2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              6     4      2     214
                                              0 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (4) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCTask                                              2     2      0     241
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     241
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTIsr                                               4     4      0       0
                                              0 COMMON     4     4      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (8) _SYSInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _ADCTask
     ___lwdiv
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _LEDInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
         _eeprom_read
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
             _eeprom_write
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXSendData
       _LEDFastFlash
         _DLYDelay_ms
       _RTXSndPkt
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _CC1Read
           _SPIRead
           _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
           _eeprom_write
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
   _SYSInit
   _SYSTask
     _CC1Init
       _CC1Strobe
         _SPIWrite
       _CC1Write
         _SPIWrite
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
           _eeprom_write
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      2F       5       58.8%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     15      43       3       83.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      86      10        0.0%
ABS                  0      0      7C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       A       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Oct 13 15:26:17 2014

      __size_of_CC1Strobe 0013                __CFG_CP$ON 0000           SLPSleep@WPUBTmp 004E  
                       pc 0002                        l14 05AD                        l30 055C  
                      l61 0446             ?_LEDFastFlash 0070                        l57 0426  
                      l66 04B4                        l75 056E                        _RD 0C60  
             __CFG_CPD$ON 0000                        _WR 0C61                        fsr 0004  
            ?_DLYDelay_ms 0074                       l103 03DB                       l116 005E  
                     l132 044B                       l302 05DD                       l232 0626  
                     l235 037B                       l180 068A                       l237 037A  
                     l158 0311                       l178 0681                       l375 03B6  
                     l547 00A7                       l476 033D                       l548 00EE  
                     l565 057A                       l389 01B5                       l549 00EF  
                     l587 0341                       _GIE 005F           __end_of_CC1Init 0312  
         __end_of_CC1Read 0506                       fsr0 0004           __end_of_ADCInit 03DC  
                     indf 0000           __end_of_ADCTask 00A0                _RTXReadPkt 0158  
         __end_of_DINInit 0627           __end_of_DINTask 0540           __end_of_DINTick 0390  
            __CFG_LVP$OFF 0000           __end_of_LEDInit 068B                      l2202 0314  
                    l2220 0331                      l2224 0335                      l2332 04BA  
                    l2350 003B                      l2342 0574                      l1800 03D0  
                    l2360 0063                      l2344 0561                      l2336 04AD  
                    l2600 0498                      l1722 0596                      l1730 05A8  
                    l2522 05CA                      l2530 05D3                      l2372 008B  
                    l2356 0055                      l2380 0097                      l2524 05CD  
                    l1734 0542                      l2438 03E0                      l2390 02E7  
                    l2368 007E                      l2456 04CD                      l2464 046C  
                    l2552 0614                      l2448 0404                      l1746 0557  
                    l2378 008F                      l2538 067C                      l2570 03A9  
                    l2642 0197                      l2394 0307                      l2564 0394  
                    l1766 043B                      l2750 0224                      l2590 02AD  
                    l2566 039A                      l1792 03C1                      l2760 0245  
                    l2664 01CE                      l2656 0158                      l1794 03C7  
                    l1890 0685                      l1954 0618                      l2690 025F  
                    l1788 03B9                      l2756 023A                      l2748 0216  
                    l2684 0257                      l1958 0621                      l1990 0534  
                    l1994 0538                      l2698 026B                      l1998 053C  
                    u1315 0451                      _IOCB 0096                      u1705 023B  
                    u1727 045A                      _PIE1 008C                      _PIE2 008D  
                    u1665 0219                      u1737 0099                      u1747 03C9  
                    u1685 0225                      u1695 0231                      _PIR1 000C  
                    _PIR2 000D                      _TMR0 0001                      _WREN 0C62  
                    _WPUB 0095            ??_eeprom_write 0075           __end_of_PGMInit 05DE  
        __end_of_CC1Sleep 0695                      _batt 0029                      _main 00A0  
        __end_of_CC1Write 0523           __end_of_NVMRead 04E9                      _temp 002F  
         __end_of_SPIInit 0447           __end_of_SPIRead 04C9                      btemp 007E  
         __end_of_OUTInit 055D                      start 0011           __end_of_RTXInit 03B7  
         __end_of_RTXTask 06AC           __end_of_RTXTick 04A9           __end_of_SYSInit 033E  
         __end_of_SYSTask 0280               ?_PGMReadNvm 0070            ??_LEDFastFlash 004A  
             ?_PGMSelLong 0070               _RTXSendData 0280               _RTXSendRPgm 05AE  
            SPIInit@state 0075                     ?_main 0070                     _EEADR 010D  
                   _CARRY 0018                     _ANSEL 0188                     _T1CON 0010  
         __end_of___lwdiv 024C                     i1l544 05F7                     _TMR1H 000F  
                   _TMR1L 000E                     _PORTA 0005                     _PORTC 0007  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
           __CFG_PWRTE$ON 0000               _sys_pgm_sta 002E         __end_of_CC1Strobe 05F1  
                   _pktRx 003C                     _pktTx 0041                     main@i 005A  
        __end_of_SLPSleep 0158          __end_of_NVMWrite 0489                     pclath 000A  
        __end_of_SPIWrite 0579         LEDNormalFlash@num 004B                     status 0003  
                   wtemp0 007E              ?_PGMCheckNvm 0070           __initialization 0013  
            DLYDelay_ms@i 0048              __end_of_main 00FD        __size_of_RTXRcvPkt 000F  
      __size_of_RTXSndPkt 005A                 ??_CC1Init 004D                 ??_CC1Read 004C  
               ??_ADCInit 0074            CC1Strobe@e_stb 0049                 ??_ADCTask 004D  
                  ??_main 0059                _cc1PaTable 005B              CC1Init@state 004F  
               ??_DINInit 0074              NVMWrite@addr 004B                 ??_DINTask 0074  
               ??_DINTick 0074                _cc1InitVal 00A0                 ??_LEDInit 0074  
            ?_PGMNvmReset 0070                 ??_PGMInit 0076               ?_RTXReadPkt 0070  
                  _ADCON0 001F                    _ADCON1 009F             SPIRead@dstPtr 0048  
               ??_NVMRead 0048                    _ADRESH 001E                    _EEDATA 010C  
               ??_SPIInit 0074                 ??_SPIRead 0046                    _EECON1 018C  
                  _EECON2 018D            _LEDNormalFlash 03DC                 ??_OUTInit 0074  
                  _ANSELH 0189       __size_of_PGMReadNvm 000E                 ??_RTXInit 0076  
            ?_PGMWriteNvm 0070                 ??_RTXTask 0076                 ??_RTXTick 0076  
     __size_of_PGMSelLong 0010                    _INTCON 000B                 ??_SYSInit 0074  
               ??_SYSTask 0057                    _INTIsr 05F1                    _OSCCON 008F  
                  _INInit 0594                    _WDTCON 0105                    _SSPCON 0014  
                  _SSPBUF 0013             LEDFastFlash@i 004C                    _SYSInt 06AC  
    __size_of_eeprom_read 001B       RTXReadPkt@numRxByte 0058                    _adc_ch 0028  
               ??___lwdiv 0074      __end_of_eeprom_write 0368                    _tmrPgm 0031  
                  _rtx_ev 0024                 ?_CC1Sleep 0070      __size_of_DLYDelay_ms 0021  
               ?_CC1Write 0048                    saved_w 007E    __end_of_LEDNormalFlash 0400  
       __end_of_RTXRcvPkt 0656         __end_of_RTXSndPkt 020C      __end_of_LEDFastFlash 0424  
 __end_of__initialization 0033           eeprom_read@addr 0075            __pcstackCOMMON 0070  
            __pidataBANK0 0695              __pidataBANK1 02B4       __size_of_RTXReadPkt 005A  
               ?_SLPSleep 0070                 ?_NVMWrite 0047           CC1Strobe@cc1Stb 004A  
               ?_SPIWrite 0074                CC1Read@len 004B                CC1Read@dst 004A  
              ??_CC1Sleep 0076                ??_CC1Write 004A              CC1Write@addr 004B  
       eeprom_write@value 0074           ?_LEDNormalFlash 0070                __pbssBANK0 0020  
                 ?_INTIsr 0070                   ?_INInit 0070                   ?_SYSInt 0070  
               INInit@sta 0075      __size_of_PGMCheckNvm 000D                __pmaintext 00A0  
            ??_PGMReadNvm 004C           CC1Write@cc1Addr 004C              ??_PGMSelLong 004F  
              __pintentry 0004              ?_RTXSendData 0070              ?_RTXSendRPgm 0070  
                 _CC1Init 02E3                   _CC1Read 04E9                   _ADCInit 03B7  
                 _ADCTask 0036         _u_in_sta_currTask 0078                ??_SLPSleep 004B  
              ??_NVMWrite 0049                _cntSndData 002A                ??_SPIWrite 0075  
                 _DINInit 0616                   _DINTick 0368                   _DINTask 0523  
            ADCInit@state 0075                   _LEDInit 067F                   _PGMInit 05C6  
    __size_of_PGMNvmReset 0012                   _SSPCON2 0091                   _NVMRead 04C9  
                 _SPIInit 0424                   _SPIRead 04A9                   _SSPSTAT 0094  
                 _OUTInit 0540                   _RTXInit 0390                   _RTXTick 0489  
                 _RTXTask 06A5        __end_of_PGMReadNvm 0672                   _SYSInit 0312  
                 _SYSTask 024C        __end_of_PGMSelLong 0647                 _CC1Strobe 05DE  
         __size_of_INTIsr 0013           __size_of_INInit 001A      __size_of_PGMWriteNvm 000E  
         __size_of_SYSInt 0006                 NVMWrite@i 004C                 SPIWrite@i 0047  
   __size_of_eeprom_write 002A              RTXInit@state 0057                   ___lwdiv 020C  
                 __ptext1 024C                   __ptext2 0489                   __ptext3 0637  
                 __ptext4 00FD                   __ptext5 068B                   __ptext6 0368  
                 __ptext7 02E3                   __ptext8 0312                   __ptext9 06A5  
                 _flg_slp 002B                   _pgm_cfg 0037     __size_of_LEDFastFlash 0024  
            ??_RTXReadPkt 0057                   clrloop0 069E                   _rtx_flg 002C  
            RTXRcvPkt@len 004F              RTXRcvPkt@dst 0052      end_of_initialization 0033  
              _u_in_ev_up 0036                ?_CC1Strobe 0070        RTXSndPkt@numRxByte 0053  
      RTXSndPkt@numTxByte 0054              _eeprom_write 033E              RTXSndPkt@len 004F  
            RTXSndPkt@src 0052              RTXSndPkt@sta 0055                _tmrDbncSel 0030  
      __end_of_RTXReadPkt 01B2                DINInit@sta 0074              _LEDFastFlash 0400  
               _PORTAbits 0005                 _PORTBbits 0006                 _PORTCbits 0007  
              _tmrLongSel 0026         __size_of_CC1Sleep 000A         __size_of_CC1Write 001D  
             NVMRead@addr 004A               NVMRead@dest 0046                 _RTXRcvPkt 0647  
               _RTXSndPkt 01B2             ??_eeprom_read 0074            __end_of_INTIsr 0604  
          __end_of_INInit 05AE            __end_of_SYSInt 06B2                LEDInit@sta 0074  
          DLYDelay_ms@val 0074             ??_DLYDelay_ms 0046      __size_of_RTXSendData 0034  
        ??_LEDNormalFlash 004A      __size_of_RTXSendRPgm 0018              SYSInit@state 0075  
       __size_of_SLPSleep 005B         __size_of_NVMWrite 0021         __size_of_SPIWrite 001C  
     start_initialization 0013               CC1Read@addr 004D               NVMWrite@len 0048  
                ??_INTIsr 0070                  ??_INInit 0074               ??_CC1Strobe 0048  
              ?_RTXRcvPkt 004F                ?_RTXSndPkt 004F                  ??_SYSInt 0070  
__CFG_FOSC$INTRC_NOCLKOUT 0000            CC1Read@cc1Addr 004E       __end_of_eeprom_read 0594  
              init_fetch0 0627                  ?_CC1Init 0070               __pdataBANK0 005B  
             __pdataBANK1 00A0                  ?_CC1Read 004A               SPIWrite@len 0074  
                ?_ADCInit 0070                  ?_ADCTask 0070                  ?_DINInit 0070  
                ?_DINTask 0070                  ?_DINTick 0070                  ?_LEDInit 0070  
             __pbssCOMMON 0076             __pcstackBANK0 0046            ADCTask@sumBatt 0020  
     __end_of_DLYDelay_ms 0468                 _s_CC1_FLG 002D                  ?_PGMInit 0070  
          ADCTask@sumTemp 0022                  ?_NVMRead 0046                  ?_SPIInit 0070  
                ?_SPIRead 0074            NVMWrite@source 0047                  ?_OUTInit 0070  
            PGMInit@state 0050                  ?_RTXInit 0070                  ?_RTXTask 0070  
                ?_RTXTick 0070          eeprom_write@addr 0046               CC1Write@len 0049  
                ?_SYSInit 0070               CC1Write@src 0048                  ?_SYSTask 0070  
           ??_PGMCheckNvm 0076          ___lwdiv@dividend 0048                  ?___lwdiv 0046  
               _u_SYS_STA 0033          _u_in_sta_tmpTask 0079                  NVMRead@i 004B  
                _CC1Sleep 068B             ??_PGMNvmReset 004F                  SPIRead@i 0049  
                _CC1Write 0506          ___lwdiv@quotient 004B             ??_PGMWriteNvm 004D  
       interrupt_function 0004                 _u_flg_din 0077               ??_RTXRcvPkt 0050  
             ??_RTXSndPkt 0050                 clear_ram0 069D               _eeprom_read 0579  
                SYSTask@i 0058                  _PIR1bits 000C       __end_of_PGMCheckNvm 067F  
   SLPSleep@OPTION_REGTmp 0050                 _tmrRcvPkt 0032          __size_of_CC1Init 002F  
        __size_of_CC1Read 001D                  _SLPSleep 00FD               _DLYDelay_ms 0447  
                _NVMWrite 0468          __size_of_ADCInit 0025                _ADCON0bits 001F  
        __size_of_ADCTask 006A                  _SPIWrite 055D                NVMRead@len 0047  
         LEDFastFlash@num 004B          __size_of_DINInit 0011          __size_of_DINTask 001D  
        __size_of_DINTick 0028          __size_of_LEDInit 000C                SPIRead@len 0074  
        __size_of_PGMInit 0018       __end_of_PGMNvmReset 0616          __size_of_NVMRead 0020  
        __size_of_SPIInit 0023          __size_of_SPIRead 0020              _u_in_ev_down 0034  
         LEDNormalFlash@i 004C              _u_in_ev_long 0035          __size_of_OUTInit 001D  
        __size_of_RTXInit 0027          __size_of_RTXTask 0007          __size_of_RTXTick 0020  
        __size_of_SYSInit 002C          __size_of_SYSTask 0034                OUTInit@sta 0075  
     __end_of_PGMWriteNvm 0664             ADCTask@cntSum 0076          __size_of___lwdiv 0040  
         ___lwdiv@divisor 0046           ___lwdiv@counter 004A                  __ptext10 0158  
                __ptext11 05AE                  __ptext20 05DE                  __ptext12 0647  
                __ptext21 055D                  __ptext13 03DC                  __ptext30 0664  
                __ptext22 0400                  __ptext14 0390                  __ptext31 04C9  
                __ptext23 0447                  __ptext15 0280                  __ptext40 0540  
                __ptext32 0579                  __ptext24 05C6                  __ptext16 01B2  
                __ptext41 0594                  __ptext33 0523                  __ptext25 0672  
                __ptext17 04E9                  __ptext42 05F1                  __ptext34 0616  
                __ptext26 0604                  __ptext18 04A9                  __ptext43 06AC  
                __ptext35 067F                  __ptext27 0656                  __ptext19 0506  
                __ptext36 0036                  __ptext28 0468                  __ptext37 020C  
                __ptext29 033E                  __ptext38 03B7                  __ptext39 0424  
       __CFG_BOR4V$BOR21V 0000             __size_of_main 005D               _PGMCheckNvm 0672  
           ??_RTXSendData 0056             ??_RTXSendRPgm 0056               _PGMNvmReset 0604  
              _INTCONbits 000B                  init_ram0 062B            SPIWrite@srcPtr 0046  
                intlevel1 0000               _PGMWriteNvm 0656                _PGMReadNvm 0664  
              _PGMSelLong 0637         SLPSleep@INTCONTmp 004D                _OPTION_REG 0081  
     __end_of_RTXSendData 02B4       __end_of_RTXSendRPgm 05C6   __size_of_LEDNormalFlash 0024  
           ?_eeprom_write 0074           SLPSleep@IOCBTmp 004C         SLPSleep@WDTCONTmp 004F  
            ?_eeprom_read 0070                _SSPCONbits 0014  
