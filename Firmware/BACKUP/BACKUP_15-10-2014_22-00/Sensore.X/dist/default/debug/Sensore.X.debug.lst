

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Oct 04 14:22:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  0105                     	;# 
   123  0107                     	;# 
   124  0108                     	;# 
   125  0109                     	;# 
   126  010C                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0187                     	;# 
   133  0188                     	;# 
   134  0189                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0089                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  008F                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0093                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0098                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0105                     	;# 
   427  0107                     	;# 
   428  0108                     	;# 
   429  0109                     	;# 
   430  010C                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  010F                     	;# 
   435  0185                     	;# 
   436  0187                     	;# 
   437  0188                     	;# 
   438  0189                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000D                     	;# 
   454  000E                     	;# 
   455  000E                     	;# 
   456  000F                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0017                     	;# 
   466  0018                     	;# 
   467  0019                     	;# 
   468  001A                     	;# 
   469  001B                     	;# 
   470  001B                     	;# 
   471  001C                     	;# 
   472  001D                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  0081                     	;# 
   476  0085                     	;# 
   477  0086                     	;# 
   478  0087                     	;# 
   479  0089                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  008F                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0093                     	;# 
   489  0093                     	;# 
   490  0094                     	;# 
   491  0095                     	;# 
   492  0096                     	;# 
   493  0097                     	;# 
   494  0098                     	;# 
   495  0099                     	;# 
   496  009A                     	;# 
   497  009B                     	;# 
   498  009C                     	;# 
   499  009D                     	;# 
   500  009E                     	;# 
   501  009F                     	;# 
   502  0105                     	;# 
   503  0107                     	;# 
   504  0108                     	;# 
   505  0109                     	;# 
   506  010C                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  0185                     	;# 
   512  0187                     	;# 
   513  0188                     	;# 
   514  0189                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  000E                     	;# 
   532  000F                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  001D                     	;# 
   549  001E                     	;# 
   550  001F                     	;# 
   551  0081                     	;# 
   552  0085                     	;# 
   553  0086                     	;# 
   554  0087                     	;# 
   555  0089                     	;# 
   556  008C                     	;# 
   557  008D                     	;# 
   558  008E                     	;# 
   559  008F                     	;# 
   560  0090                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0093                     	;# 
   564  0093                     	;# 
   565  0093                     	;# 
   566  0094                     	;# 
   567  0095                     	;# 
   568  0096                     	;# 
   569  0097                     	;# 
   570  0098                     	;# 
   571  0099                     	;# 
   572  009A                     	;# 
   573  009B                     	;# 
   574  009C                     	;# 
   575  009D                     	;# 
   576  009E                     	;# 
   577  009F                     	;# 
   578  0105                     	;# 
   579  0107                     	;# 
   580  0108                     	;# 
   581  0109                     	;# 
   582  010C                     	;# 
   583  010C                     	;# 
   584  010D                     	;# 
   585  010E                     	;# 
   586  010F                     	;# 
   587  0185                     	;# 
   588  0187                     	;# 
   589  0188                     	;# 
   590  0189                     	;# 
   591  018C                     	;# 
   592  018D                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000D                     	;# 
   606  000E                     	;# 
   607  000E                     	;# 
   608  000F                     	;# 
   609  0010                     	;# 
   610  0011                     	;# 
   611  0012                     	;# 
   612  0013                     	;# 
   613  0014                     	;# 
   614  0015                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  001D                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  0081                     	;# 
   628  0085                     	;# 
   629  0086                     	;# 
   630  0087                     	;# 
   631  0089                     	;# 
   632  008C                     	;# 
   633  008D                     	;# 
   634  008E                     	;# 
   635  008F                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0093                     	;# 
   640  0093                     	;# 
   641  0093                     	;# 
   642  0094                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0098                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  0105                     	;# 
   655  0107                     	;# 
   656  0108                     	;# 
   657  0109                     	;# 
   658  010C                     	;# 
   659  010C                     	;# 
   660  010D                     	;# 
   661  010E                     	;# 
   662  010F                     	;# 
   663  0185                     	;# 
   664  0187                     	;# 
   665  0188                     	;# 
   666  0189                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0009                     	;# 
   678  000A                     	;# 
   679  000B                     	;# 
   680  000C                     	;# 
   681  000D                     	;# 
   682  000E                     	;# 
   683  000E                     	;# 
   684  000F                     	;# 
   685  0010                     	;# 
   686  0011                     	;# 
   687  0012                     	;# 
   688  0013                     	;# 
   689  0014                     	;# 
   690  0015                     	;# 
   691  0015                     	;# 
   692  0016                     	;# 
   693  0017                     	;# 
   694  0018                     	;# 
   695  0019                     	;# 
   696  001A                     	;# 
   697  001B                     	;# 
   698  001B                     	;# 
   699  001C                     	;# 
   700  001D                     	;# 
   701  001E                     	;# 
   702  001F                     	;# 
   703  0081                     	;# 
   704  0085                     	;# 
   705  0086                     	;# 
   706  0087                     	;# 
   707  0089                     	;# 
   708  008C                     	;# 
   709  008D                     	;# 
   710  008E                     	;# 
   711  008F                     	;# 
   712  0090                     	;# 
   713  0091                     	;# 
   714  0092                     	;# 
   715  0093                     	;# 
   716  0093                     	;# 
   717  0093                     	;# 
   718  0094                     	;# 
   719  0095                     	;# 
   720  0096                     	;# 
   721  0097                     	;# 
   722  0098                     	;# 
   723  0099                     	;# 
   724  009A                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  009F                     	;# 
   730  0105                     	;# 
   731  0107                     	;# 
   732  0108                     	;# 
   733  0109                     	;# 
   734  010C                     	;# 
   735  010C                     	;# 
   736  010D                     	;# 
   737  010E                     	;# 
   738  010F                     	;# 
   739  0185                     	;# 
   740  0187                     	;# 
   741  0188                     	;# 
   742  0189                     	;# 
   743  018C                     	;# 
   744  018D                     	;# 
   745  0000                     	;# 
   746  0001                     	;# 
   747  0002                     	;# 
   748  0003                     	;# 
   749  0004                     	;# 
   750  0005                     	;# 
   751  0006                     	;# 
   752  0007                     	;# 
   753  0009                     	;# 
   754  000A                     	;# 
   755  000B                     	;# 
   756  000C                     	;# 
   757  000D                     	;# 
   758  000E                     	;# 
   759  000E                     	;# 
   760  000F                     	;# 
   761  0010                     	;# 
   762  0011                     	;# 
   763  0012                     	;# 
   764  0013                     	;# 
   765  0014                     	;# 
   766  0015                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0017                     	;# 
   770  0018                     	;# 
   771  0019                     	;# 
   772  001A                     	;# 
   773  001B                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  001D                     	;# 
   777  001E                     	;# 
   778  001F                     	;# 
   779  0081                     	;# 
   780  0085                     	;# 
   781  0086                     	;# 
   782  0087                     	;# 
   783  0089                     	;# 
   784  008C                     	;# 
   785  008D                     	;# 
   786  008E                     	;# 
   787  008F                     	;# 
   788  0090                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0093                     	;# 
   792  0093                     	;# 
   793  0093                     	;# 
   794  0094                     	;# 
   795  0095                     	;# 
   796  0096                     	;# 
   797  0097                     	;# 
   798  0098                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009C                     	;# 
   803  009D                     	;# 
   804  009E                     	;# 
   805  009F                     	;# 
   806  0105                     	;# 
   807  0107                     	;# 
   808  0108                     	;# 
   809  0109                     	;# 
   810  010C                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0185                     	;# 
   816  0187                     	;# 
   817  0188                     	;# 
   818  0189                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  000E                     	;# 
   836  000F                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0013                     	;# 
   841  0014                     	;# 
   842  0015                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  001D                     	;# 
   853  001E                     	;# 
   854  001F                     	;# 
   855  0081                     	;# 
   856  0085                     	;# 
   857  0086                     	;# 
   858  0087                     	;# 
   859  0089                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  008F                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0093                     	;# 
   868  0093                     	;# 
   869  0093                     	;# 
   870  0094                     	;# 
   871  0095                     	;# 
   872  0096                     	;# 
   873  0097                     	;# 
   874  0098                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009C                     	;# 
   879  009D                     	;# 
   880  009E                     	;# 
   881  009F                     	;# 
   882  0105                     	;# 
   883  0107                     	;# 
   884  0108                     	;# 
   885  0109                     	;# 
   886  010C                     	;# 
   887  010C                     	;# 
   888  010D                     	;# 
   889  010E                     	;# 
   890  010F                     	;# 
   891  0185                     	;# 
   892  0187                     	;# 
   893  0188                     	;# 
   894  0189                     	;# 
   895  018C                     	;# 
   896  018D                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  000E                     	;# 
   912  000F                     	;# 
   913  0010                     	;# 
   914  0011                     	;# 
   915  0012                     	;# 
   916  0013                     	;# 
   917  0014                     	;# 
   918  0015                     	;# 
   919  0015                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001B                     	;# 
   927  001C                     	;# 
   928  001D                     	;# 
   929  001E                     	;# 
   930  001F                     	;# 
   931  0081                     	;# 
   932  0085                     	;# 
   933  0086                     	;# 
   934  0087                     	;# 
   935  0089                     	;# 
   936  008C                     	;# 
   937  008D                     	;# 
   938  008E                     	;# 
   939  008F                     	;# 
   940  0090                     	;# 
   941  0091                     	;# 
   942  0092                     	;# 
   943  0093                     	;# 
   944  0093                     	;# 
   945  0093                     	;# 
   946  0094                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0098                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009C                     	;# 
   955  009D                     	;# 
   956  009E                     	;# 
   957  009F                     	;# 
   958  0105                     	;# 
   959  0107                     	;# 
   960  0108                     	;# 
   961  0109                     	;# 
   962  010C                     	;# 
   963  010C                     	;# 
   964  010D                     	;# 
   965  010E                     	;# 
   966  010F                     	;# 
   967  0185                     	;# 
   968  0187                     	;# 
   969  0188                     	;# 
   970  0189                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  000E                     	;# 
   988  000F                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0014                     	;# 
   994  0015                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001D                     	;# 
  1005  001E                     	;# 
  1006  001F                     	;# 
  1007  0081                     	;# 
  1008  0085                     	;# 
  1009  0086                     	;# 
  1010  0087                     	;# 
  1011  0089                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0093                     	;# 
  1021  0093                     	;# 
  1022  0094                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009A                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  0105                     	;# 
  1035  0107                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0187                     	;# 
  1045  0188                     	;# 
  1046  0189                     	;# 
  1047  018C                     	;# 
  1048  018D                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  000E                     	;# 
  1064  000F                     	;# 
  1065  0010                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0013                     	;# 
  1069  0014                     	;# 
  1070  0015                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001D                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  0081                     	;# 
  1084  0085                     	;# 
  1085  0086                     	;# 
  1086  0087                     	;# 
  1087  0089                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  008F                     	;# 
  1092  0090                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0093                     	;# 
  1097  0093                     	;# 
  1098  0094                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0097                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009A                     	;# 
  1105  009B                     	;# 
  1106  009C                     	;# 
  1107  009D                     	;# 
  1108  009E                     	;# 
  1109  009F                     	;# 
  1110  0105                     	;# 
  1111  0107                     	;# 
  1112  0108                     	;# 
  1113  0109                     	;# 
  1114  010C                     	;# 
  1115  010C                     	;# 
  1116  010D                     	;# 
  1117  010E                     	;# 
  1118  010F                     	;# 
  1119  0185                     	;# 
  1120  0187                     	;# 
  1121  0188                     	;# 
  1122  0189                     	;# 
  1123  018C                     	;# 
  1124  018D                     	;# 
  1125                           
  1126                           	psect	idataBANK0
  1127  06A4                     __pidataBANK0:	
  1128                           
  1129                           ;initializer for _cc1PaTable
  1130  06A4  3403               	retlw	3
  1131  06A5  340F               	retlw	15
  1132  06A6  341E               	retlw	30
  1133  06A7  3427               	retlw	39
  1134  06A8  3450               	retlw	80
  1135  06A9  3481               	retlw	129
  1136  06AA  34CB               	retlw	203
  1137  06AB  34C2               	retlw	194
  1138                           
  1139                           	psect	idataBANK1
  1140  02B4                     __pidataBANK1:	
  1141                           
  1142                           ;initializer for _cc1InitVal
  1143  02B4  3447               	retlw	71
  1144  02B5  3446               	retlw	70
  1145  02B6  3480               	retlw	128
  1146  02B7  340F               	retlw	15
  1147  02B8  34D3               	retlw	211
  1148  02B9  3491               	retlw	145
  1149  02BA  3405               	retlw	5
  1150  02BB  3408               	retlw	8
  1151  02BC  3404               	retlw	4
  1152  02BD  3400               	retlw	0
  1153  02BE  3400               	retlw	0
  1154  02BF  3406               	retlw	6
  1155  02C0  3400               	retlw	0
  1156  02C1  3421               	retlw	33
  1157  02C2  3463               	retlw	99
  1158  02C3  3491               	retlw	145
  1159  02C4  34CA               	retlw	202
  1160  02C5  3483               	retlw	131
  1161  02C6  3402               	retlw	2
  1162  02C7  3402               	retlw	2
  1163  02C8  343B               	retlw	59
  1164  02C9  3434               	retlw	52
  1165  02CA  3407               	retlw	7
  1166  02CB  343F               	retlw	63
  1167  02CC  3408               	retlw	8
  1168  02CD  3416               	retlw	22
  1169  02CE  346C               	retlw	108
  1170  02CF  3403               	retlw	3
  1171  02D0  3440               	retlw	64
  1172  02D1  3491               	retlw	145
  1173  02D2  3487               	retlw	135
  1174  02D3  346B               	retlw	107
  1175  02D4  34FB               	retlw	251
  1176  02D5  3456               	retlw	86
  1177  02D6  3416               	retlw	22
  1178  02D7  34E9               	retlw	233
  1179  02D8  342A               	retlw	42
  1180  02D9  3400               	retlw	0
  1181  02DA  341F               	retlw	31
  1182  02DB  3441               	retlw	65
  1183  02DC  3400               	retlw	0
  1184  02DD  3459               	retlw	89
  1185  02DE  34BF               	retlw	191
  1186  02DF  343F               	retlw	63
  1187  02E0  3481               	retlw	129
  1188  02E1  3435               	retlw	53
  1189  02E2  3409               	retlw	9
  1190  001F                     _ADCON0	set	31
  1191  001F                     _ADCON0bits	set	31
  1192  001E                     _ADRESH	set	30
  1193  000B                     _INTCON	set	11
  1194  000B                     _INTCONbits	set	11
  1195  000C                     _PIR1	set	12
  1196  000C                     _PIR1bits	set	12
  1197  000D                     _PIR2	set	13
  1198  0005                     _PORTAbits	set	5
  1199  0006                     _PORTBbits	set	6
  1200  0007                     _PORTC	set	7
  1201  0007                     _PORTCbits	set	7
  1202  0013                     _SSPBUF	set	19
  1203  0014                     _SSPCON	set	20
  1204  0014                     _SSPCONbits	set	20
  1205  0010                     _T1CON	set	16
  1206  0001                     _TMR0	set	1
  1207  000F                     _TMR1H	set	15
  1208  000E                     _TMR1L	set	14
  1209  0018                     _CARRY	set	24
  1210  005F                     _GIE	set	95
  1211  009F                     _ADCON1	set	159
  1212  0096                     _IOCB	set	150
  1213  0081                     _OPTION_REG	set	129
  1214  008F                     _OSCCON	set	143
  1215  008C                     _PIE1	set	140
  1216  008D                     _PIE2	set	141
  1217  0091                     _SSPCON2	set	145
  1218  0094                     _SSPSTAT	set	148
  1219  0085                     _TRISA	set	133
  1220  0086                     _TRISB	set	134
  1221  0087                     _TRISC	set	135
  1222  0095                     _WPUB	set	149
  1223  010D                     _EEADR	set	269
  1224  010C                     _EEDATA	set	268
  1225  0105                     _WDTCON	set	261
  1226  0188                     _ANSEL	set	392
  1227  0189                     _ANSELH	set	393
  1228  018C                     _EECON1	set	396
  1229  018D                     _EECON2	set	397
  1230  0C60                     _RD	set	3168
  1231  0C61                     _WR	set	3169
  1232  0C62                     _WREN	set	3170
  1233                           
  1234                           ; #config settings
  1235  0000                     
  1236                           	psect	cinit
  1237  0013                     start_initialization:	
  1238  0013                     __initialization:	
  1239                           
  1240                           ; Clear objects allocated to COMMON
  1241  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1242  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1243  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1244  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1245                           
  1246                           ; Clear objects allocated to BANK0
  1247  0017  1383               	bcf	3,7	;select IRP bank0
  1248  0018  3020               	movlw	low __pbssBANK0
  1249  0019  0084               	movwf	4
  1250  001A  3046               	movlw	low (__pbssBANK0+38)
  1251  001B  118A  26AC  118A   	fcall	clear_ram0
  1252                           
  1253                           ; Initialize objects allocated to BANK1
  1254  001E  30CF               	movlw	low (__pdataBANK1+47)
  1255  001F  00FD               	movwf	btemp+-1
  1256  0020  3002               	movlw	high __pidataBANK1
  1257  0021  00FE               	movwf	btemp
  1258  0022  30B4               	movlw	low __pidataBANK1
  1259  0023  00FF               	movwf	btemp+1
  1260  0024  30A0               	movlw	low __pdataBANK1
  1261  0025  0084               	movwf	4
  1262  0026  118A  263A  118A   	fcall	init_ram0
  1263                           
  1264                           ; Initialize objects allocated to BANK0
  1265  0029  3063               	movlw	low (__pdataBANK0+8)
  1266  002A  00FD               	movwf	btemp+-1
  1267  002B  3006               	movlw	high __pidataBANK0
  1268  002C  00FE               	movwf	btemp
  1269  002D  30A4               	movlw	low __pidataBANK0
  1270  002E  00FF               	movwf	btemp+1
  1271  002F  305B               	movlw	low __pdataBANK0
  1272  0030  0084               	movwf	4
  1273  0031  118A  263A         	fcall	init_ram0
  1274  0033                     end_of_initialization:	
  1275                           ;End of C runtime variable initialization code
  1276                           
  1277  0033                     __end_of__initialization:	
  1278  0033  0183               	clrf	3
  1279  0034  118A  28A0         	ljmp	_main	;jump to C main() function
  1280                           
  1281                           	psect	bssCOMMON
  1282  0076                     __pbssCOMMON:	
  1283  0076                     ADCTask@cntSum:	
  1284  0076                     	ds	1
  1285  0077                     _u_flg_din:	
  1286  0077                     	ds	1
  1287  0078                     _u_in_sta_currTask:	
  1288  0078                     	ds	1
  1289  0079                     _u_in_sta_tmpTask:	
  1290  0079                     	ds	1
  1291                           
  1292                           	psect	bssBANK0
  1293  0020                     __pbssBANK0:	
  1294  0020                     ADCTask@sumBatt:	
  1295  0020                     	ds	2
  1296  0022                     ADCTask@sumTemp:	
  1297  0022                     	ds	2
  1298  0024                     _rtx_ev:	
  1299  0024                     	ds	2
  1300  0026                     _tmrLongSel:	
  1301  0026                     	ds	2
  1302  0028                     _adc_ch:	
  1303  0028                     	ds	1
  1304  0029                     _batt:	
  1305  0029                     	ds	1
  1306  002A                     _cntSndData:	
  1307  002A                     	ds	1
  1308  002B                     _flg_slp:	
  1309  002B                     	ds	1
  1310  002C                     _rtx_flg:	
  1311  002C                     	ds	1
  1312  002D                     _s_CC1_FLG:	
  1313  002D                     	ds	1
  1314  002E                     _sys_pgm_sta:	
  1315  002E                     	ds	1
  1316  002F                     _temp:	
  1317  002F                     	ds	1
  1318  0030                     _tmrDbncSel:	
  1319  0030                     	ds	1
  1320  0031                     _tmrPgm:	
  1321  0031                     	ds	1
  1322  0032                     _tmrRcvPkt:	
  1323  0032                     	ds	1
  1324  0033                     _u_SYS_STA:	
  1325  0033                     	ds	1
  1326  0034                     _u_in_ev_down:	
  1327  0034                     	ds	1
  1328  0035                     _u_in_ev_long:	
  1329  0035                     	ds	1
  1330  0036                     _u_in_ev_up:	
  1331  0036                     	ds	1
  1332  0037                     _pgm_cfg:	
  1333  0037                     	ds	5
  1334  003C                     _pktRx:	
  1335  003C                     	ds	5
  1336  0041                     _pktTx:	
  1337  0041                     	ds	5
  1338                           
  1339                           	psect	dataBANK0
  1340  005B                     __pdataBANK0:	
  1341  005B                     _cc1PaTable:	
  1342  005B                     	ds	8
  1343                           
  1344                           	psect	dataBANK1
  1345  00A0                     __pdataBANK1:	
  1346  00A0                     _cc1InitVal:	
  1347  00A0                     	ds	47
  1348                           
  1349                           	psect	clrtext
  1350  06AC                     clear_ram0:	
  1351                           ;	Called with FSR containing the base address, and
  1352                           ;	W with the last address+1
  1353                           
  1354  06AC  0064               	clrwdt	;clear the watchdog before getting into this loop
  1355  06AD                     clrloop0:	
  1356  06AD  0180               	clrf	0	;clear RAM location pointed to by FSR
  1357  06AE  0A84               	incf	4,f	;increment pointer
  1358  06AF  0604               	xorwf	4,w	;XOR with final address
  1359  06B0  1903               	btfsc	3,2	;have we reached the end yet?
  1360  06B1  3400               	retlw	0	;all done for this memory range, return
  1361  06B2  0604               	xorwf	4,w	;XOR again to restore value
  1362  06B3  2EAD               	goto	clrloop0	;do the next byte
  1363                           
  1364                           	psect	inittext
  1365  0636                     init_fetch0:	
  1366                           ;	Called with low address in FSR and high address in W
  1367                           
  1368  0636  087E               	movf	126,w
  1369  0637  008A               	movwf	10
  1370  0638  087F               	movf	127,w
  1371  0639  0082               	movwf	2
  1372  063A                     init_ram0:	
  1373                           ;Called with:
  1374                           ;	high address of idata address in btemp 
  1375                           ;	low address of idata address in btemp+1 
  1376                           ;	low address of data in FSR
  1377                           ;	high address + 1 of data in btemp-1
  1378                           
  1379  063A  2636  118A         	fcall	init_fetch0
  1380  063C  0080               	movwf	0
  1381  063D  0A84               	incf	4,f
  1382  063E  0804               	movf	4,w
  1383  063F  067D               	xorwf	125,w
  1384  0640  1903               	btfsc	3,2
  1385  0641  3400               	retlw	0
  1386  0642  0AFF               	incf	127,f
  1387  0643  1903               	btfsc	3,2
  1388  0644  0AFE               	incf	126,f
  1389  0645  2E3A               	goto	init_ram0
  1390                           
  1391                           	psect	cstackCOMMON
  1392  0071                     __pcstackCOMMON:	
  1393  0071                     ?_CC1Strobe:	
  1394  0071                     ?_PGMReadNvm:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0071                     ?_PGMCheckNvm:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0071                     ?_PGMNvmReset:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0071                     ?_RTXSendData:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0071                     ?_RTXReadPkt:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0071                     ?_RTXSendRPgm:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0071                     ?_INInit:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0071                     ?_OUTInit:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0071                     ?_SPIInit:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0071                     ?_ADCInit:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0071                     ?_ADCTask:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0071                     ?_CC1Init:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0071                     ?_CC1Sleep:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0071                     ?_LEDInit:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0071                     ?_LEDNormalFlash:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0071                     ?_LEDFastFlash:	
  1440                           ; 0 bytes @ 0x0
  1441                           
  1442  0071                     ?_DINInit:	
  1443                           ; 0 bytes @ 0x0
  1444                           
  1445  0071                     ?_DINTick:	
  1446                           ; 0 bytes @ 0x0
  1447                           
  1448  0071                     ?_DINTask:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0071                     ?_SLPSleep:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0071                     ?_PGMInit:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0071                     ?_PGMWriteNvm:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0071                     ?_PGMSelLong:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0071                     ?_RTXInit:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0071                     ?_RTXTick:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0071                     ?_RTXTask:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0071                     ?_SYSInit:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0071                     ?_SYSInt:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0071                     ??_SYSInt:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0071                     ?_SYSTask:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0071                     ?_INTIsr:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0071                     ??_INTIsr:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0071                     ?_main:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0071                     ?_eeprom_read:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496                           
  1497                           ; 1 bytes @ 0x0
  1498  0071                     	ds	4
  1499  0075                     ??_eeprom_read:	
  1500  0075                     ?_eeprom_write:	
  1501                           ; 0 bytes @ 0x4
  1502                           
  1503  0075                     ??_INInit:	
  1504                           ; 0 bytes @ 0x4
  1505                           
  1506  0075                     ??_OUTInit:	
  1507                           ; 0 bytes @ 0x4
  1508                           
  1509  0075                     ??_SPIInit:	
  1510                           ; 0 bytes @ 0x4
  1511                           
  1512  0075                     ?_SPIRead:	
  1513                           ; 0 bytes @ 0x4
  1514                           
  1515  0075                     ?_SPIWrite:	
  1516                           ; 0 bytes @ 0x4
  1517                           
  1518  0075                     ??_ADCInit:	
  1519                           ; 0 bytes @ 0x4
  1520                           
  1521  0075                     ??_LEDInit:	
  1522                           ; 0 bytes @ 0x4
  1523                           
  1524  0075                     ??_LEDNormalFlash:	
  1525                           ; 0 bytes @ 0x4
  1526                           
  1527  0075                     ??_LEDFastFlash:	
  1528                           ; 0 bytes @ 0x4
  1529                           
  1530  0075                     ??_DINInit:	
  1531                           ; 0 bytes @ 0x4
  1532                           
  1533  0075                     ??_DINTick:	
  1534                           ; 0 bytes @ 0x4
  1535                           
  1536  0075                     ??_DINTask:	
  1537                           ; 0 bytes @ 0x4
  1538                           
  1539  0075                     ??_SYSInit:	
  1540                           ; 0 bytes @ 0x4
  1541                           
  1542  0075                     ??___lwdiv:	
  1543                           ; 0 bytes @ 0x4
  1544                           
  1545  0075                     SPIRead@len:	
  1546                           ; 0 bytes @ 0x4
  1547                           
  1548  0075                     SPIWrite@len:	
  1549                           ; 1 bytes @ 0x4
  1550                           
  1551  0075                     LEDInit@sta:	
  1552                           ; 1 bytes @ 0x4
  1553                           
  1554  0075                     DINInit@sta:	
  1555                           ; 1 bytes @ 0x4
  1556                           
  1557  0075                     eeprom_write@value:	
  1558                           ; 1 bytes @ 0x4
  1559                           
  1560                           
  1561                           ; 1 bytes @ 0x4
  1562  0075                     	ds	1
  1563  0076                     ??_PGMCheckNvm:	
  1564  0076                     ??_CC1Sleep:	
  1565                           ; 0 bytes @ 0x5
  1566                           
  1567  0076                     ??_PGMInit:	
  1568                           ; 0 bytes @ 0x5
  1569                           
  1570  0076                     ??_RTXInit:	
  1571                           ; 0 bytes @ 0x5
  1572                           
  1573  0076                     ??_RTXTick:	
  1574                           ; 0 bytes @ 0x5
  1575                           
  1576  0076                     ??_RTXTask:	
  1577                           ; 0 bytes @ 0x5
  1578                           
  1579                           
  1580                           	psect	cstackBANK0
  1581  0046                     __pcstackBANK0:	
  1582                           ; 0 bytes @ 0x5
  1583                           
  1584  0046                     ??_eeprom_write:	
  1585  0046                     ??_SPIRead:	
  1586                           ; 0 bytes @ 0x0
  1587                           
  1588  0046                     ??_SPIWrite:	
  1589                           ; 0 bytes @ 0x0
  1590                           
  1591  0046                     ?_DLYDelay_ms:	
  1592                           ; 0 bytes @ 0x0
  1593                           
  1594  0046                     ?___lwdiv:	
  1595                           ; 0 bytes @ 0x0
  1596                           
  1597  0046                     INInit@sta:	
  1598                           ; 2 bytes @ 0x0
  1599                           
  1600  0046                     OUTInit@sta:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603  0046                     SPIInit@state:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606  0046                     ADCInit@state:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0046                     SYSInit@state:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0046                     eeprom_read@addr:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615  0046                     DLYDelay_ms@val:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618  0046                     ___lwdiv@divisor:	
  1619                           ; 2 bytes @ 0x0
  1620                           
  1621                           
  1622                           ; 2 bytes @ 0x0
  1623  0046                     	ds	1
  1624  0047                     ?_NVMRead:	
  1625  0047                     SPIWrite@srcPtr:	
  1626                           ; 0 bytes @ 0x1
  1627                           
  1628  0047                     NVMRead@dest:	
  1629                           ; 1 bytes @ 0x1
  1630                           
  1631  0047                     eeprom_write@addr:	
  1632                           ; 1 bytes @ 0x1
  1633                           
  1634                           
  1635                           ; 1 bytes @ 0x1
  1636  0047                     	ds	1
  1637  0048                     ??_DLYDelay_ms:	
  1638  0048                     ?_NVMWrite:	
  1639                           ; 0 bytes @ 0x2
  1640                           
  1641  0048                     SPIRead@dstPtr:	
  1642                           ; 0 bytes @ 0x2
  1643                           
  1644  0048                     SPIWrite@i:	
  1645                           ; 1 bytes @ 0x2
  1646                           
  1647  0048                     NVMRead@len:	
  1648                           ; 1 bytes @ 0x2
  1649                           
  1650  0048                     NVMWrite@source:	
  1651                           ; 1 bytes @ 0x2
  1652                           
  1653  0048                     ___lwdiv@dividend:	
  1654                           ; 1 bytes @ 0x2
  1655                           
  1656                           
  1657                           ; 2 bytes @ 0x2
  1658  0048                     	ds	1
  1659  0049                     ??_CC1Strobe:	
  1660  0049                     ?_CC1Write:	
  1661                           ; 0 bytes @ 0x3
  1662                           
  1663  0049                     ??_NVMRead:	
  1664                           ; 0 bytes @ 0x3
  1665                           
  1666  0049                     SPIRead@i:	
  1667                           ; 0 bytes @ 0x3
  1668                           
  1669  0049                     CC1Write@src:	
  1670                           ; 1 bytes @ 0x3
  1671                           
  1672  0049                     NVMWrite@len:	
  1673                           ; 1 bytes @ 0x3
  1674                           
  1675                           
  1676                           ; 1 bytes @ 0x3
  1677  0049                     	ds	1
  1678  004A                     ?_CC1Read:	
  1679  004A                     ??_NVMWrite:	
  1680                           ; 0 bytes @ 0x4
  1681                           
  1682  004A                     CC1Strobe@e_stb:	
  1683                           ; 0 bytes @ 0x4
  1684                           
  1685  004A                     CC1Read@dst:	
  1686                           ; 1 bytes @ 0x4
  1687                           
  1688  004A                     CC1Write@len:	
  1689                           ; 1 bytes @ 0x4
  1690                           
  1691  004A                     ___lwdiv@counter:	
  1692                           ; 1 bytes @ 0x4
  1693                           
  1694  004A                     DLYDelay_ms@i:	
  1695                           ; 1 bytes @ 0x4
  1696                           
  1697                           
  1698                           ; 2 bytes @ 0x4
  1699  004A                     	ds	1
  1700  004B                     ??_CC1Write:	
  1701  004B                     CC1Strobe@cc1Stb:	
  1702                           ; 0 bytes @ 0x5
  1703                           
  1704  004B                     CC1Read@len:	
  1705                           ; 1 bytes @ 0x5
  1706                           
  1707  004B                     NVMRead@addr:	
  1708                           ; 1 bytes @ 0x5
  1709                           
  1710  004B                     ___lwdiv@quotient:	
  1711                           ; 1 bytes @ 0x5
  1712                           
  1713                           
  1714                           ; 2 bytes @ 0x5
  1715  004B                     	ds	1
  1716  004C                     ??_CC1Read:	
  1717  004C                     ??_SLPSleep:	
  1718                           ; 0 bytes @ 0x6
  1719                           
  1720  004C                     CC1Write@addr:	
  1721                           ; 0 bytes @ 0x6
  1722                           
  1723  004C                     LEDNormalFlash@num:	
  1724                           ; 1 bytes @ 0x6
  1725                           
  1726  004C                     LEDFastFlash@num:	
  1727                           ; 1 bytes @ 0x6
  1728                           
  1729  004C                     NVMRead@i:	
  1730                           ; 1 bytes @ 0x6
  1731                           
  1732  004C                     NVMWrite@addr:	
  1733                           ; 1 bytes @ 0x6
  1734                           
  1735                           
  1736                           ; 1 bytes @ 0x6
  1737  004C                     	ds	1
  1738  004D                     ??_PGMReadNvm:	
  1739  004D                     ??_ADCTask:	
  1740                           ; 0 bytes @ 0x7
  1741                           
  1742  004D                     CC1Read@addr:	
  1743                           ; 0 bytes @ 0x7
  1744                           
  1745  004D                     CC1Write@cc1Addr:	
  1746                           ; 1 bytes @ 0x7
  1747                           
  1748  004D                     LEDNormalFlash@i:	
  1749                           ; 1 bytes @ 0x7
  1750                           
  1751  004D                     LEDFastFlash@i:	
  1752                           ; 1 bytes @ 0x7
  1753                           
  1754  004D                     NVMWrite@i:	
  1755                           ; 1 bytes @ 0x7
  1756                           
  1757  004D                     SLPSleep@IOCBTmp:	
  1758                           ; 1 bytes @ 0x7
  1759                           
  1760                           
  1761                           ; 1 bytes @ 0x7
  1762  004D                     	ds	1
  1763  004E                     ??_CC1Init:	
  1764  004E                     ??_PGMWriteNvm:	
  1765                           ; 0 bytes @ 0x8
  1766                           
  1767  004E                     CC1Read@cc1Addr:	
  1768                           ; 0 bytes @ 0x8
  1769                           
  1770  004E                     SLPSleep@INTCONTmp:	
  1771                           ; 1 bytes @ 0x8
  1772                           
  1773                           
  1774                           ; 1 bytes @ 0x8
  1775  004E                     	ds	1
  1776  004F                     ?_RTXSndPkt:	
  1777  004F                     ?_RTXRcvPkt:	
  1778                           ; 0 bytes @ 0x9
  1779                           
  1780  004F                     SLPSleep@WPUBTmp:	
  1781                           ; 0 bytes @ 0x9
  1782                           
  1783  004F                     RTXSndPkt@len:	
  1784                           ; 1 bytes @ 0x9
  1785                           
  1786  004F                     RTXRcvPkt@len:	
  1787                           ; 1 bytes @ 0x9
  1788                           
  1789                           
  1790                           ; 1 bytes @ 0x9
  1791  004F                     	ds	1
  1792  0050                     ??_PGMNvmReset:	
  1793  0050                     ??_PGMSelLong:	
  1794                           ; 0 bytes @ 0xA
  1795                           
  1796  0050                     ??_RTXSndPkt:	
  1797                           ; 0 bytes @ 0xA
  1798                           
  1799  0050                     ??_RTXRcvPkt:	
  1800                           ; 0 bytes @ 0xA
  1801                           
  1802  0050                     CC1Init@state:	
  1803                           ; 0 bytes @ 0xA
  1804                           
  1805  0050                     SLPSleep@WDTCONTmp:	
  1806                           ; 1 bytes @ 0xA
  1807                           
  1808                           
  1809                           ; 1 bytes @ 0xA
  1810  0050                     	ds	1
  1811  0051                     SLPSleep@OPTION_REGTmp:	
  1812  0051                     PGMInit@state:	
  1813                           ; 1 bytes @ 0xB
  1814                           
  1815                           
  1816                           ; 1 bytes @ 0xB
  1817  0051                     	ds	1
  1818  0052                     RTXSndPkt@src:	
  1819  0052                     RTXRcvPkt@dst:	
  1820                           ; 1 bytes @ 0xC
  1821                           
  1822                           
  1823                           ; 1 bytes @ 0xC
  1824  0052                     	ds	1
  1825  0053                     RTXSndPkt@numRxByte:	
  1826                           
  1827                           ; 1 bytes @ 0xD
  1828  0053                     	ds	1
  1829  0054                     RTXSndPkt@numTxByte:	
  1830                           
  1831                           ; 1 bytes @ 0xE
  1832  0054                     	ds	1
  1833  0055                     RTXSndPkt@sta:	
  1834                           
  1835                           ; 1 bytes @ 0xF
  1836  0055                     	ds	1
  1837  0056                     ??_RTXSendData:	
  1838  0056                     ??_RTXSendRPgm:	
  1839                           ; 0 bytes @ 0x10
  1840                           
  1841                           
  1842                           ; 0 bytes @ 0x10
  1843  0056                     	ds	1
  1844  0057                     ??_RTXReadPkt:	
  1845  0057                     ??_SYSTask:	
  1846                           ; 0 bytes @ 0x11
  1847                           
  1848  0057                     RTXInit@state:	
  1849                           ; 0 bytes @ 0x11
  1850                           
  1851                           
  1852                           ; 1 bytes @ 0x11
  1853  0057                     	ds	1
  1854  0058                     RTXReadPkt@numRxByte:	
  1855  0058                     SYSTask@i:	
  1856                           ; 1 bytes @ 0x12
  1857                           
  1858                           
  1859                           ; 1 bytes @ 0x12
  1860  0058                     	ds	1
  1861  0059                     ??_main:	
  1862                           
  1863                           ; 0 bytes @ 0x13
  1864  0059                     	ds	1
  1865  005A                     main@i:	
  1866                           
  1867                           ; 1 bytes @ 0x14
  1868  005A                     	ds	1
  1869                           
  1870                           	psect	maintext
  1871  00A0                     __pmaintext:	
  1872 ;;
  1873 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1874 ;;
  1875 ;; *************** function _main *****************
  1876 ;; Defined at:
  1877 ;;		line 40 in file "Sensore.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  i               1   20[BANK0 ] unsigned char 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;		None               void
  1884 ;; Registers used:
  1885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 17F/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1891 ;;      Params:         0       0       0       0
  1892 ;;      Locals:         0       1       0       0
  1893 ;;      Temps:          0       1       0       0
  1894 ;;      Totals:         0       2       0       0
  1895 ;;Total ram usage:        2 bytes
  1896 ;; Hardware stack levels required when called:    8
  1897 ;; This function calls:
  1898 ;;		_INInit
  1899 ;;		_OUTInit
  1900 ;;		_SPIInit
  1901 ;;		_ADCInit
  1902 ;;		_ADCTask
  1903 ;;		_CC1Init
  1904 ;;		_LEDInit
  1905 ;;		_DINInit
  1906 ;;		_DINTask
  1907 ;;		_PGMInit
  1908 ;;		_RTXInit
  1909 ;;		_RTXTask
  1910 ;;		_SYSInit
  1911 ;;		_SYSTask
  1912 ;; This function is called by:
  1913 ;;		Startup code after reset
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           
  1918                           ;psect for function _main
  1919  00A0                     _main:	
  1920                           
  1921                           ;Sensore.c: 41: unsigned char i;
  1922                           ;Sensore.c: 44: for(i=0;i<3;i++)
  1923                           
  1924                           ;incstack = 0
  1925 ;; hardware stack exceeded
  1926                           ; Regs used in _main: [allreg]
  1927  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1928  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1929  00A2  01DA               	clrf	main@i
  1930  00A3  3003               	movlw	3
  1931  00A4  025A               	subwf	main@i,w
  1932  00A5  1803               	btfsc	3,0
  1933  00A6  28EE               	goto	l533
  1934  00A7                     l532:	
  1935  00A7  0064               	clrwdt	;# 
  1936                           
  1937                           ;Sensore.c: 48: SYSInit(i);
  1938  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1939  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1940  00AA  085A               	movf	main@i,w
  1941  00AB  118A  2312  118A   	fcall	_SYSInit
  1942                           
  1943                           ;Sensore.c: 49: INInit(i);
  1944  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1945  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1946  00B0  085A               	movf	main@i,w
  1947  00B1  118A  2584  118A   	fcall	_INInit
  1948                           
  1949                           ;Sensore.c: 50: OUTInit(i);
  1950  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1951  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1952  00B6  085A               	movf	main@i,w
  1953  00B7  118A  250F  118A   	fcall	_OUTInit
  1954                           
  1955                           ;Sensore.c: 51: DINInit(i);
  1956  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1957  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1958  00BC  085A               	movf	main@i,w
  1959  00BD  118A  2625  118A   	fcall	_DINInit
  1960                           
  1961                           ;Sensore.c: 52: LEDInit(i);
  1962  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1963  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1964  00C2  085A               	movf	main@i,w
  1965  00C3  118A  268E  118A   	fcall	_LEDInit
  1966                           
  1967                           ;Sensore.c: 53: SPIInit(i);
  1968  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1969  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1970  00C8  085A               	movf	main@i,w
  1971  00C9  118A  23BA  118A   	fcall	_SPIInit
  1972                           
  1973                           ;Sensore.c: 54: CC1Init(i);
  1974  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1975  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1976  00CE  085A               	movf	main@i,w
  1977  00CF  118A  22E3  118A   	fcall	_CC1Init
  1978                           
  1979                           ;Sensore.c: 55: RTXInit(i);
  1980  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1981  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1982  00D4  085A               	movf	main@i,w
  1983  00D5  118A  2393  118A   	fcall	_RTXInit
  1984                           
  1985                           ;Sensore.c: 56: PGMInit(i);
  1986  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1987  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1988  00DA  085A               	movf	main@i,w
  1989  00DB  118A  25D5  118A   	fcall	_PGMInit
  1990                           
  1991                           ;Sensore.c: 57: ADCInit(i);
  1992  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1993  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1994  00E0  085A               	movf	main@i,w
  1995  00E1  118A  2427  118A   	fcall	_ADCInit
  1996  00E4  3001               	movlw	1
  1997  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1998  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1999  00E7  00D9               	movwf	??_main
  2000  00E8  0859               	movf	??_main,w
  2001  00E9  07DA               	addwf	main@i,f
  2002  00EA  3003               	movlw	3
  2003  00EB  025A               	subwf	main@i,w
  2004  00EC  1C03               	skipc
  2005  00ED  28A7               	goto	l532
  2006  00EE                     l533:	
  2007                           
  2008                           ;Sensore.c: 58: }
  2009                           ;Sensore.c: 61: INTCONbits.GIE=1;
  2010  00EE  178B               	bsf	11,7	;volatile
  2011  00EF                     l534:	
  2012                           ;Sensore.c: 64: while(1)
  2013                           
  2014  00EF  0064               	clrwdt	;# 
  2015                           
  2016                           ;Sensore.c: 68: SYSTask();
  2017  00F0  118A  224C  118A   	fcall	_SYSTask
  2018                           
  2019                           ;Sensore.c: 69: DINTask();
  2020  00F3  118A  2567  118A   	fcall	_DINTask
  2021                           
  2022                           ;Sensore.c: 70: ADCTask();
  2023  00F6  118A  2036  118A   	fcall	_ADCTask
  2024                           
  2025                           ;Sensore.c: 71: RTXTask();
  2026  00F9  118A  26B4  118A   	fcall	_RTXTask
  2027  00FC  28EF               	goto	l534
  2028  00FD                     __end_of_main:	
  2029                           
  2030                           	psect	text1
  2031  024C                     __ptext1:	
  2032 ;; *************** function _SYSTask *****************
  2033 ;; Defined at:
  2034 ;;		line 44 in file "SYS.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  i               1   18[BANK0 ] unsigned char 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;		None               void
  2041 ;; Registers used:
  2042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2048 ;;      Params:         0       0       0       0
  2049 ;;      Locals:         0       1       0       0
  2050 ;;      Temps:          0       1       0       0
  2051 ;;      Totals:         0       2       0       0
  2052 ;;Total ram usage:        2 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    7
  2055 ;; This function calls:
  2056 ;;		_CC1Init
  2057 ;;		_DINTick
  2058 ;;		_SLPSleep
  2059 ;;		_PGMSelLong
  2060 ;;		_RTXTick
  2061 ;; This function is called by:
  2062 ;;		_main
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _SYSTask
  2068  024C                     _SYSTask:	
  2069                           
  2070                           ;SYS.c: 45: unsigned char i;
  2071                           ;SYS.c: 48: if(u_SYS_STA.TICK)
  2072                           
  2073                           ;incstack = 0
  2074 ;; hardware stack exceeded
  2075                           ; Regs used in _SYSTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2076  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2077  024D  1303               	bcf	3,6	;RP1=0, select bank0
  2078  024E  1C33               	btfss	_u_SYS_STA,0
  2079  024F  2A57               	goto	l2727
  2080                           
  2081                           ;SYS.c: 49: {
  2082                           ;SYS.c: 51: u_SYS_STA.TICK=0;
  2083  0250  1033               	bcf	_u_SYS_STA,0
  2084                           
  2085                           ;SYS.c: 54: RTXTick();
  2086  0251  118A  24AF  118A   	fcall	_RTXTick
  2087                           
  2088                           ;SYS.c: 55: DINTick();
  2089  0254  118A  236B  118A   	fcall	_DINTick
  2090  0257                     l2727:	
  2091                           
  2092                           ;SYS.c: 56: }
  2093                           ;SYS.c: 58: if(u_in_ev_long.sel)
  2094  0257  1283               	bcf	3,5	;RP0=0, select bank0
  2095  0258  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0259  1C35               	btfss	_u_in_ev_long,0
  2097  025A  2A5F               	goto	l2733
  2098                           
  2099                           ;SYS.c: 59: {
  2100                           ;SYS.c: 61: u_in_ev_long.sel=0;
  2101  025B  1035               	bcf	_u_in_ev_long,0
  2102                           
  2103                           ;SYS.c: 62: PGMSelLong();
  2104  025C  118A  2646  118A   	fcall	_PGMSelLong
  2105  025F                     l2733:	
  2106                           
  2107                           ;SYS.c: 63: }
  2108                           ;SYS.c: 65: if(rtx_ev.sleep && (!(!PORTBbits.RB2)))
  2109  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0260  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0261  0825               	movf	_rtx_ev+1,w
  2112  0262  0424               	iorwf	_rtx_ev,w
  2113  0263  1D03               	btfss	3,2
  2114  0264  1D06               	btfss	6,2	;volatile
  2115  0265  2A6B               	goto	l2741
  2116                           
  2117                           ;SYS.c: 66: {
  2118                           ;SYS.c: 68: rtx_ev.sleep=0;
  2119  0266  01A4               	clrf	_rtx_ev
  2120  0267  01A5               	clrf	_rtx_ev+1
  2121                           
  2122                           ;SYS.c: 70: SLPSleep();
  2123  0268  118A  20FD  118A   	fcall	_SLPSleep
  2124  026B                     l2741:	
  2125                           
  2126                           ;SYS.c: 71: }
  2127                           ;SYS.c: 73: if(flg_slp.exitSleep)
  2128  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2129  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2130  026D  1C2B               	btfss	_flg_slp,0
  2131  026E  0008               	return
  2132                           
  2133                           ;SYS.c: 74: {
  2134                           ;SYS.c: 76: flg_slp.exitSleep=0;
  2135  026F  102B               	bcf	_flg_slp,0
  2136                           
  2137                           ;SYS.c: 78: for(i=0;i<3;i++)
  2138  0270  01D8               	clrf	SYSTask@i
  2139  0271                     L1:	
  2140  0271  3003               	movlw	3
  2141  0272  0258               	subwf	SYSTask@i,w
  2142  0273  1803               	btfsc	3,0
  2143  0274  0008               	return
  2144                           
  2145                           ;SYS.c: 79: CC1Init(i);
  2146  0275  0858               	movf	SYSTask@i,w
  2147  0276  118A  22E3  118A   	fcall	_CC1Init
  2148  0279  3001               	movlw	1
  2149  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2150  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2151  027C  00D7               	movwf	??_SYSTask
  2152  027D  0857               	movf	??_SYSTask,w
  2153  027E  07D8               	addwf	SYSTask@i,f
  2154  027F  2A71               	goto	L1
  2155  0280                     __end_of_SYSTask:	
  2156                           
  2157                           	psect	text2
  2158  04AF                     __ptext2:	
  2159 ;; *************** function _RTXTick *****************
  2160 ;; Defined at:
  2161 ;;		line 79 in file "RTX.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;		None               void
  2168 ;; Registers used:
  2169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2175 ;;      Params:         0       0       0       0
  2176 ;;      Locals:         0       0       0       0
  2177 ;;      Temps:          0       0       0       0
  2178 ;;      Totals:         0       0       0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    6
  2182 ;; This function calls:
  2183 ;;		_RTXSendData
  2184 ;; This function is called by:
  2185 ;;		_SYSTask
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           
  2190                           ;psect for function _RTXTick
  2191  04AF                     _RTXTick:	
  2192                           
  2193                           ;RTX.c: 81: if(tmrRcvPkt)
  2194                           
  2195                           ;incstack = 0
  2196 ;; hardware stack exceeded
  2197                           ; Regs used in _RTXTick: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2198  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  2199  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  2200  04B1  0832               	movf	_tmrRcvPkt,w
  2201  04B2  1903               	btfsc	3,2
  2202  04B3  2CBE               	goto	l2617
  2203                           
  2204                           ;RTX.c: 82: {
  2205                           ;RTX.c: 83: tmrRcvPkt--;
  2206  04B4  3001               	movlw	1
  2207  04B5  02B2               	subwf	_tmrRcvPkt,f
  2208                           
  2209                           ;RTX.c: 84: if(!(tmrRcvPkt))
  2210  04B6  08B2               	movf	_tmrRcvPkt,f
  2211  04B7  1D03               	skipz
  2212  04B8  2CBE               	goto	l2617
  2213                           
  2214                           ;RTX.c: 85: RTXSendData();
  2215  04B9  118A  2280  118A   	fcall	_RTXSendData
  2216  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  2217  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  2218  04BE                     l2617:	
  2219                           
  2220                           ;RTX.c: 86: }
  2221                           ;RTX.c: 89: if(tmrPgm)
  2222  04BE  1283               	bcf	3,5	;RP0=0, select bank0
  2223  04BF  1303               	bcf	3,6	;RP1=0, select bank0
  2224  04C0  0831               	movf	_tmrPgm,w
  2225  04C1  1903               	btfsc	3,2
  2226  04C2  0008               	return
  2227                           
  2228                           ;RTX.c: 90: {
  2229                           ;RTX.c: 91: tmrPgm--;
  2230  04C3  3001               	movlw	1
  2231  04C4  02B1               	subwf	_tmrPgm,f
  2232                           
  2233                           ;RTX.c: 92: if(!(tmrPgm))
  2234  04C5  08B1               	movf	_tmrPgm,f
  2235  04C6  1D03               	skipz
  2236  04C7  0008               	return
  2237                           
  2238                           ;RTX.c: 93: {
  2239                           ;RTX.c: 95: rtx_flg.pgmRq=0;
  2240  04C8  102C               	bcf	_rtx_flg,0
  2241                           
  2242                           ;RTX.c: 97: cntSndData=0;
  2243  04C9  01AA               	clrf	_cntSndData
  2244                           
  2245                           ;RTX.c: 99: RTXSendData();
  2246  04CA  118A  2280         	fcall	_RTXSendData
  2247  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  2248  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  2249  04CE  0008               	return
  2250  04CF                     __end_of_RTXTick:	
  2251                           
  2252                           	psect	text3
  2253  0646                     __ptext3:	
  2254 ;; *************** function _PGMSelLong *****************
  2255 ;; Defined at:
  2256 ;;		line 71 in file "PGM.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;		None
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;		None
  2261 ;; Return value:  Size  Location     Type
  2262 ;;		None               void
  2263 ;; Registers used:
  2264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2270 ;;      Params:         0       0       0       0
  2271 ;;      Locals:         0       0       0       0
  2272 ;;      Temps:          0       1       0       0
  2273 ;;      Totals:         0       1       0       0
  2274 ;;Total ram usage:        1 bytes
  2275 ;; Hardware stack levels used:    1
  2276 ;; Hardware stack levels required when called:    5
  2277 ;; This function calls:
  2278 ;;		_LEDNormalFlash
  2279 ;;		_PGMWriteNvm
  2280 ;; This function is called by:
  2281 ;;		_SYSTask
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _PGMSelLong
  2287  0646                     _PGMSelLong:	
  2288                           
  2289                           ;PGM.c: 73: pgm_cfg.sensId=TMR1L^TMR1H;
  2290                           
  2291                           ;incstack = 0
  2292 ;; hardware stack exceeded
  2293                           ; Regs used in _PGMSelLong: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2294  0646  1283               	bcf	3,5	;RP0=0, select bank0
  2295  0647  1303               	bcf	3,6	;RP1=0, select bank0
  2296  0648  080E               	movf	14,w	;volatile
  2297  0649  060F               	xorwf	15,w	;volatile
  2298  064A  00D0               	movwf	??_PGMSelLong
  2299  064B  0850               	movf	??_PGMSelLong,w
  2300  064C  00BA               	movwf	_pgm_cfg+3
  2301                           
  2302                           ;PGM.c: 75: pgm_cfg.menu=0x01;
  2303  064D  01B9               	clrf	_pgm_cfg+2
  2304  064E  0AB9               	incf	_pgm_cfg+2,f
  2305                           
  2306                           ;PGM.c: 77: PGMWriteNvm();
  2307  064F  118A  2665  118A   	fcall	_PGMWriteNvm
  2308                           
  2309                           ;PGM.c: 79: LEDNormalFlash(3);
  2310  0652  3003               	movlw	3
  2311  0653  118A  23DF         	fcall	_LEDNormalFlash
  2312  0655  0008               	return
  2313  0656                     __end_of_PGMSelLong:	
  2314                           
  2315                           	psect	text4
  2316  00FD                     __ptext4:	
  2317 ;; *************** function _SLPSleep *****************
  2318 ;; Defined at:
  2319 ;;		line 7 in file "SLP.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  OPTION_REGTm    1   11[BANK0 ] unsigned char 
  2324 ;;  WDTCONTmp       1   10[BANK0 ] unsigned char 
  2325 ;;  WPUBTmp         1    9[BANK0 ] unsigned char 
  2326 ;;  INTCONTmp       1    8[BANK0 ] unsigned char 
  2327 ;;  IOCBTmp         1    7[BANK0 ] unsigned char 
  2328 ;; Return value:  Size  Location     Type
  2329 ;;		None               void
  2330 ;; Registers used:
  2331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2337 ;;      Params:         0       0       0       0
  2338 ;;      Locals:         0       5       0       0
  2339 ;;      Temps:          0       1       0       0
  2340 ;;      Totals:         0       6       0       0
  2341 ;;Total ram usage:        6 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    5
  2344 ;; This function calls:
  2345 ;;		_CC1Sleep
  2346 ;; This function is called by:
  2347 ;;		_SYSTask
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           
  2352                           ;psect for function _SLPSleep
  2353  00FD                     _SLPSleep:	
  2354                           
  2355                           ;SLP.c: 8: unsigned char IOCBTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp;
  2356                           ;SLP.c: 10: CC1Sleep();
  2357                           
  2358                           ;incstack = 0
  2359 ;; hardware stack exceeded
  2360                           ; Regs used in _SLPSleep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2361  00FD  118A  269A  118A   	fcall	_CC1Sleep
  2362                           
  2363                           ;SLP.c: 12: IOCBTmp=IOCB;
  2364  0100  1683               	bsf	3,5	;RP0=1, select bank1
  2365  0101  1303               	bcf	3,6	;RP1=0, select bank1
  2366  0102  0816               	movf	22,w	;volatile
  2367  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2368  0104  1303               	bcf	3,6	;RP1=0, select bank0
  2369  0105  00CC               	movwf	??_SLPSleep
  2370  0106  084C               	movf	??_SLPSleep,w
  2371  0107  00CD               	movwf	SLPSleep@IOCBTmp
  2372                           
  2373                           ;SLP.c: 13: IOCB=0b00000100;
  2374  0108  3004               	movlw	4
  2375  0109  1683               	bsf	3,5	;RP0=1, select bank1
  2376  010A  1303               	bcf	3,6	;RP1=0, select bank1
  2377  010B  0096               	movwf	22	;volatile
  2378                           
  2379                           ;SLP.c: 14: INTCONTmp=INTCON;
  2380  010C  080B               	movf	11,w	;volatile
  2381  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2382  010E  1303               	bcf	3,6	;RP1=0, select bank0
  2383  010F  00CC               	movwf	??_SLPSleep
  2384  0110  084C               	movf	??_SLPSleep,w
  2385  0111  00CE               	movwf	SLPSleep@INTCONTmp
  2386                           
  2387                           ;SLP.c: 15: INTCON=0b10001000;
  2388  0112  3088               	movlw	136
  2389  0113  008B               	movwf	11	;volatile
  2390                           
  2391                           ;SLP.c: 17: WPUBTmp=WPUB;
  2392  0114  1683               	bsf	3,5	;RP0=1, select bank1
  2393  0115  1303               	bcf	3,6	;RP1=0, select bank1
  2394  0116  0815               	movf	21,w	;volatile
  2395  0117  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0118  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0119  00CC               	movwf	??_SLPSleep
  2398  011A  084C               	movf	??_SLPSleep,w
  2399  011B  00CF               	movwf	SLPSleep@WPUBTmp
  2400                           
  2401                           ;SLP.c: 18: WPUB=0b00000100;
  2402  011C  3004               	movlw	4
  2403  011D  1683               	bsf	3,5	;RP0=1, select bank1
  2404  011E  1303               	bcf	3,6	;RP1=0, select bank1
  2405  011F  0095               	movwf	21	;volatile
  2406                           
  2407                           ;SLP.c: 20: WDTCONTmp=WDTCON;
  2408  0120  1283               	bcf	3,5	;RP0=0, select bank2
  2409  0121  1703               	bsf	3,6	;RP1=1, select bank2
  2410  0122  0805               	movf	5,w	;volatile
  2411  0123  1283               	bcf	3,5	;RP0=0, select bank0
  2412  0124  1303               	bcf	3,6	;RP1=0, select bank0
  2413  0125  00CC               	movwf	??_SLPSleep
  2414  0126  084C               	movf	??_SLPSleep,w
  2415  0127  00D0               	movwf	SLPSleep@WDTCONTmp
  2416                           
  2417                           ;SLP.c: 21: WDTCON=0b00010111;
  2418  0128  3017               	movlw	23
  2419  0129  1283               	bcf	3,5	;RP0=0, select bank2
  2420  012A  1703               	bsf	3,6	;RP1=1, select bank2
  2421  012B  0085               	movwf	5	;volatile
  2422                           
  2423                           ;SLP.c: 23: OPTION_REGTmp=OPTION_REG;
  2424  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2425  012D  1303               	bcf	3,6	;RP1=0, select bank1
  2426  012E  0801               	movf	1,w	;volatile
  2427  012F  1283               	bcf	3,5	;RP0=0, select bank0
  2428  0130  1303               	bcf	3,6	;RP1=0, select bank0
  2429  0131  00CC               	movwf	??_SLPSleep
  2430  0132  084C               	movf	??_SLPSleep,w
  2431  0133  00D1               	movwf	SLPSleep@OPTION_REGTmp
  2432                           
  2433                           ;SLP.c: 24: OPTION_REG=0b00001010;
  2434  0134  300A               	movlw	10
  2435  0135  1683               	bsf	3,5	;RP0=1, select bank1
  2436  0136  1303               	bcf	3,6	;RP1=0, select bank1
  2437  0137  0081               	movwf	1	;volatile
  2438  0138  0064               	clrwdt	;# 
  2439  0139  0063               	sleep	;# 
  2440                           
  2441                           ;SLP.c: 29: IOCB=IOCBTmp;
  2442  013A  1283               	bcf	3,5	;RP0=0, select bank0
  2443  013B  1303               	bcf	3,6	;RP1=0, select bank0
  2444  013C  084D               	movf	SLPSleep@IOCBTmp,w
  2445  013D  1683               	bsf	3,5	;RP0=1, select bank1
  2446  013E  1303               	bcf	3,6	;RP1=0, select bank1
  2447  013F  0096               	movwf	22	;volatile
  2448                           
  2449                           ;SLP.c: 30: INTCON=INTCONTmp;
  2450  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2451  0141  1303               	bcf	3,6	;RP1=0, select bank0
  2452  0142  084E               	movf	SLPSleep@INTCONTmp,w
  2453  0143  008B               	movwf	11	;volatile
  2454                           
  2455                           ;SLP.c: 31: WPUB=WPUBTmp;
  2456  0144  084F               	movf	SLPSleep@WPUBTmp,w
  2457  0145  1683               	bsf	3,5	;RP0=1, select bank1
  2458  0146  1303               	bcf	3,6	;RP1=0, select bank1
  2459  0147  0095               	movwf	21	;volatile
  2460                           
  2461                           ;SLP.c: 32: WDTCON=WDTCONTmp;
  2462  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2463  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2464  014A  0850               	movf	SLPSleep@WDTCONTmp,w
  2465  014B  1283               	bcf	3,5	;RP0=0, select bank2
  2466  014C  1703               	bsf	3,6	;RP1=1, select bank2
  2467  014D  0085               	movwf	5	;volatile
  2468                           
  2469                           ;SLP.c: 33: OPTION_REG=OPTION_REGTmp;
  2470  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2471  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2472  0150  0851               	movf	SLPSleep@OPTION_REGTmp,w
  2473  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2474  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2475  0153  0081               	movwf	1	;volatile
  2476                           
  2477                           ;SLP.c: 35: flg_slp.exitSleep=1;
  2478  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2479  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2480  0156  142B               	bsf	_flg_slp,0
  2481  0157  0008               	return
  2482  0158                     __end_of_SLPSleep:	
  2483                           
  2484                           	psect	text5
  2485  069A                     __ptext5:	
  2486 ;; *************** function _CC1Sleep *****************
  2487 ;; Defined at:
  2488 ;;		line 144 in file "CC1.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;		None
  2491 ;; Auto vars:     Size  Location     Type
  2492 ;;		None
  2493 ;; Return value:  Size  Location     Type
  2494 ;;		None               void
  2495 ;; Registers used:
  2496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 0/0
  2499 ;;		On exit  : 0/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2502 ;;      Params:         0       0       0       0
  2503 ;;      Locals:         0       0       0       0
  2504 ;;      Temps:          0       0       0       0
  2505 ;;      Totals:         0       0       0       0
  2506 ;;Total ram usage:        0 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    4
  2509 ;; This function calls:
  2510 ;;		_CC1Strobe
  2511 ;; This function is called by:
  2512 ;;		_SLPSleep
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           
  2517                           ;psect for function _CC1Sleep
  2518  069A                     _CC1Sleep:	
  2519                           
  2520                           ;CC1.c: 146: PORTAbits.RA5=0;
  2521                           
  2522                           ;incstack = 0
  2523 ;; hardware stack exceeded
  2524                           ; Regs used in _CC1Sleep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2525  069A  1283               	bcf	3,5	;RP0=0, select bank0
  2526  069B  1303               	bcf	3,6	;RP1=0, select bank0
  2527  069C  1285               	bcf	5,5	;volatile
  2528                           
  2529                           ;CC1.c: 148: CC1Strobe(SWOR);
  2530  069D  3038               	movlw	56
  2531  069E  118A  25ED         	fcall	_CC1Strobe
  2532                           
  2533                           ;CC1.c: 150: PORTAbits.RA5=1;
  2534  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  2535  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  2536  06A2  1685               	bsf	5,5	;volatile
  2537  06A3  0008               	return
  2538  06A4                     __end_of_CC1Sleep:	
  2539                           
  2540                           	psect	text6
  2541  036B                     __ptext6:	
  2542 ;; *************** function _DINTick *****************
  2543 ;; Defined at:
  2544 ;;		line 47 in file "DIN.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;		None               void
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2558 ;;      Params:         0       0       0       0
  2559 ;;      Locals:         0       0       0       0
  2560 ;;      Temps:          1       0       0       0
  2561 ;;      Totals:         1       0       0       0
  2562 ;;Total ram usage:        1 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    2
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_SYSTask
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _DINTick
  2574  036B                     _DINTick:	
  2575                           
  2576                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  2577                           
  2578                           ;incstack = 0
  2579                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  2580  036B  1C77               	btfss	_u_flg_din,0
  2581  036C  2B7E               	goto	l220
  2582                           
  2583                           ;DIN.c: 51: {
  2584                           ;DIN.c: 52: tmrDbncSel++;
  2585  036D  3001               	movlw	1
  2586  036E  00F5               	movwf	??_DINTick
  2587  036F  0875               	movf	??_DINTick,w
  2588  0370  1283               	bcf	3,5	;RP0=0, select bank0
  2589  0371  1303               	bcf	3,6	;RP1=0, select bank0
  2590  0372  07B0               	addwf	_tmrDbncSel,f
  2591                           
  2592                           ;DIN.c: 53: if(tmrDbncSel>5)
  2593  0373  3006               	movlw	6
  2594  0374  0230               	subwf	_tmrDbncSel,w
  2595  0375  1C03               	skipc
  2596  0376  2B7E               	goto	l220
  2597                           
  2598                           ;DIN.c: 54: {
  2599                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  2600  0377  1077               	bcf	_u_flg_din,0
  2601                           
  2602                           ;DIN.c: 56: tmrDbncSel=0;
  2603  0378  01B0               	clrf	_tmrDbncSel
  2604                           
  2605                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  2606  0379  1C78               	btfss	_u_in_sta_currTask,0
  2607  037A  2B7D               	goto	l222
  2608                           
  2609                           ;DIN.c: 59: u_in_ev_down.sel=1;
  2610  037B  1434               	bsf	_u_in_ev_down,0
  2611  037C  2B7E               	goto	l220
  2612  037D                     l222:	
  2613                           
  2614                           ;DIN.c: 60: else
  2615                           ;DIN.c: 61: u_in_ev_up.sel=1;
  2616  037D  1436               	bsf	_u_in_ev_up,0
  2617  037E                     l220:	
  2618                           
  2619                           ;DIN.c: 62: }
  2620                           ;DIN.c: 63: }
  2621                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  2622  037E  1CF7               	btfss	_u_flg_din,1
  2623  037F  0008               	return
  2624                           
  2625                           ;DIN.c: 67: {
  2626                           ;DIN.c: 68: tmrLongSel++;
  2627  0380  3001               	movlw	1
  2628  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2629  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2630  0383  07A6               	addwf	_tmrLongSel,f
  2631  0384  1803               	skipnc
  2632  0385  0AA7               	incf	_tmrLongSel+1,f
  2633  0386  3000               	movlw	0
  2634  0387  07A7               	addwf	_tmrLongSel+1,f
  2635                           
  2636                           ;DIN.c: 69: if(tmrLongSel>200)
  2637  0388  3000               	movlw	0
  2638  0389  0227               	subwf	_tmrLongSel+1,w
  2639  038A  30C9               	movlw	201
  2640  038B  1903               	skipnz
  2641  038C  0226               	subwf	_tmrLongSel,w
  2642  038D  1C03               	skipc
  2643  038E  0008               	return
  2644                           
  2645                           ;DIN.c: 70: {
  2646                           ;DIN.c: 72: tmrLongSel=0;
  2647  038F  01A6               	clrf	_tmrLongSel
  2648  0390  01A7               	clrf	_tmrLongSel+1
  2649                           
  2650                           ;DIN.c: 74: u_in_ev_long.sel=1;
  2651  0391  1435               	bsf	_u_in_ev_long,0
  2652  0392  0008               	return
  2653  0393                     __end_of_DINTick:	
  2654                           
  2655                           	psect	text7
  2656  02E3                     __ptext7:	
  2657 ;; *************** function _CC1Init *****************
  2658 ;; Defined at:
  2659 ;;		line 74 in file "CC1.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  state           1    wreg     unsigned char 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  state           1   10[BANK0 ] unsigned char 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;		None               void
  2666 ;; Registers used:
  2667 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2673 ;;      Params:         0       0       0       0
  2674 ;;      Locals:         0       1       0       0
  2675 ;;      Temps:          0       2       0       0
  2676 ;;      Totals:         0       3       0       0
  2677 ;;Total ram usage:        3 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    4
  2680 ;; This function calls:
  2681 ;;		_CC1Strobe
  2682 ;;		_CC1Write
  2683 ;; This function is called by:
  2684 ;;		_SYSTask
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function _CC1Init
  2691  02E3                     _CC1Init:	
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in _CC1Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2695                           ;CC1Init@state stored from wreg
  2696  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2697  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2698  02E5  00D0               	movwf	CC1Init@state
  2699                           
  2700                           ;CC1.c: 75: switch(state)
  2701  02E6  2B07               	goto	l2407
  2702  02E7                     l2403:	
  2703                           ;CC1.c: 83: case 2:
  2704                           
  2705                           ;CC1.c: 82: break;
  2706                           
  2707                           ;CC1.c: 76: {
  2708                           ;CC1.c: 80: case 1:
  2709                           
  2710                           
  2711                           ;CC1.c: 85: CC1Strobe(SRES);
  2712  02E7  3030               	movlw	48
  2713  02E8  118A  25ED  118A   	fcall	_CC1Strobe
  2714                           
  2715                           ;CC1.c: 86: CC1Write(0x00,cc1InitVal,0x2E);
  2716  02EB  30A0               	movlw	_cc1InitVal& (0+255)
  2717  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2718  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2719  02EE  00CE               	movwf	??_CC1Init
  2720  02EF  084E               	movf	??_CC1Init,w
  2721  02F0  00C9               	movwf	?_CC1Write
  2722  02F1  302E               	movlw	46
  2723  02F2  00CF               	movwf	??_CC1Init+1
  2724  02F3  084F               	movf	??_CC1Init+1,w
  2725  02F4  00CA               	movwf	?_CC1Write+1
  2726  02F5  3000               	movlw	0
  2727  02F6  118A  254A  118A   	fcall	_CC1Write
  2728                           
  2729                           ;CC1.c: 87: CC1Write(0x3E,cc1PaTable,8);
  2730  02F9  305B               	movlw	_cc1PaTable& (0+255)
  2731  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2732  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  2733  02FC  00CE               	movwf	??_CC1Init
  2734  02FD  084E               	movf	??_CC1Init,w
  2735  02FE  00C9               	movwf	?_CC1Write
  2736  02FF  3008               	movlw	8
  2737  0300  00CF               	movwf	??_CC1Init+1
  2738  0301  084F               	movf	??_CC1Init+1,w
  2739  0302  00CA               	movwf	?_CC1Write+1
  2740  0303  303E               	movlw	62
  2741  0304  118A  254A         	fcall	_CC1Write
  2742                           
  2743                           ;CC1.c: 89: }
  2744                           
  2745                           ;CC1.c: 88: break;
  2746  0306  0008               	return
  2747  0307                     l2407:	
  2748  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2749  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2750  0309  0850               	movf	CC1Init@state,w
  2751                           
  2752                           ; Switch size 1, requested type "space"
  2753                           ; Number of cases is 2, Range of values is 1 to 2
  2754                           ; switch strategies available:
  2755                           ; Name         Instructions Cycles
  2756                           ; simple_byte            7     4 (average)
  2757                           ; direct_byte           14    10 (fixed)
  2758                           ; jumptable            263     9 (fixed)
  2759                           ;	Chosen strategy is simple_byte
  2760  030A  3A01               	xorlw	1	; case 1
  2761  030B  1903               	skipnz
  2762  030C  2B11               	goto	l143
  2763  030D  3A03               	xorlw	3	; case 2
  2764  030E  1903               	skipnz
  2765  030F  2AE7               	goto	l2403
  2766  0310  2B11               	goto	l143
  2767  0311                     l143:	
  2768  0311  0008               	return
  2769  0312                     __end_of_CC1Init:	
  2770                           
  2771                           	psect	text8
  2772  0312                     __ptext8:	
  2773 ;; *************** function _SYSInit *****************
  2774 ;; Defined at:
  2775 ;;		line 17 in file "SYS.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  state           1    wreg     unsigned char 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  state           1    0[BANK0 ] unsigned char 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;		None               void
  2782 ;; Registers used:
  2783 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2789 ;;      Params:         0       0       0       0
  2790 ;;      Locals:         0       1       0       0
  2791 ;;      Temps:          1       0       0       0
  2792 ;;      Totals:         1       1       0       0
  2793 ;;Total ram usage:        2 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    2
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _SYSInit
  2805  0312                     _SYSInit:	
  2806                           
  2807                           ;incstack = 0
  2808                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  2809                           ;SYSInit@state stored from wreg
  2810  0312  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0313  1303               	bcf	3,6	;RP1=0, select bank0
  2812  0314  00C6               	movwf	SYSInit@state
  2813                           
  2814                           ;SYS.c: 18: switch(state)
  2815  0315  2B36               	goto	l2717
  2816  0316                     l2695:	
  2817                           ;SYS.c: 19: {
  2818                           ;SYS.c: 20: case 0:
  2819                           
  2820                           
  2821                           ;SYS.c: 22: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; IOCB=0b00000000
      +                          ; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000
      +                          ; PIE1=0b00000000; PIE2=0b00000000;
  2822  0316  3006               	movlw	6
  2823  0317  1683               	bsf	3,5	;RP0=1, select bank1
  2824  0318  1303               	bcf	3,6	;RP1=0, select bank1
  2825  0319  0081               	movwf	1	;volatile
  2826  031A  3071               	movlw	113
  2827  031B  008F               	movwf	15	;volatile
  2828  031C  3009               	movlw	9
  2829  031D  1283               	bcf	3,5	;RP0=0, select bank2
  2830  031E  1703               	bsf	3,6	;RP1=1, select bank2
  2831  031F  0085               	movwf	5	;volatile
  2832  0320  1683               	bsf	3,5	;RP0=1, select bank1
  2833  0321  1303               	bcf	3,6	;RP1=0, select bank1
  2834  0322  0196               	clrf	22	;volatile
  2835  0323  3063               	movlw	99
  2836  0324  1283               	bcf	3,5	;RP0=0, select bank0
  2837  0325  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0326  0081               	movwf	1	;volatile
  2839  0327  168B               	bsf	11,5	;volatile
  2840  0328  30FB               	movlw	251
  2841  0329  00F5               	movwf	??_SYSInit
  2842  032A  0875               	movf	??_SYSInit,w
  2843  032B  058B               	andwf	11,f	;volatile
  2844  032C  018C               	clrf	12	;volatile
  2845  032D  018D               	clrf	13	;volatile
  2846  032E  1683               	bsf	3,5	;RP0=1, select bank1
  2847  032F  1303               	bcf	3,6	;RP1=0, select bank1
  2848  0330  018C               	clrf	12	;volatile
  2849  0331  018D               	clrf	13	;volatile
  2850                           
  2851                           ;SYS.c: 23: break;
  2852  0332  0008               	return
  2853  0333                     l2713:	
  2854                           ;SYS.c: 24: case 1:
  2855                           
  2856                           
  2857                           ;SYS.c: 26: u_SYS_STA.VAL=0;
  2858  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2859  0334  01B3               	clrf	_u_SYS_STA
  2860                           
  2861                           ;SYS.c: 31: }
  2862                           
  2863                           ;SYS.c: 27: break;
  2864  0335  0008               	return
  2865  0336                     l2717:	
  2866  0336  0846               	movf	SYSInit@state,w
  2867                           
  2868                           ; Switch size 1, requested type "space"
  2869                           ; Number of cases is 2, Range of values is 0 to 1
  2870                           ; switch strategies available:
  2871                           ; Name         Instructions Cycles
  2872                           ; simple_byte            7     4 (average)
  2873                           ; direct_byte           11     7 (fixed)
  2874                           ; jumptable            260     6 (fixed)
  2875                           ;	Chosen strategy is simple_byte
  2876  0337  3A00               	xorlw	0	; case 0
  2877  0338  1903               	skipnz
  2878  0339  2B16               	goto	l2695
  2879  033A  3A01               	xorlw	1	; case 1
  2880  033B  1903               	skipnz
  2881  033C  2B33               	goto	l2713
  2882  033D  2B3E               	goto	l461
  2883  033E                     l461:	
  2884  033E  0008               	return
  2885  033F                     __end_of_SYSInit:	
  2886                           
  2887                           	psect	text9
  2888  06B4                     __ptext9:	
  2889 ;; *************** function _RTXTask *****************
  2890 ;; Defined at:
  2891 ;;		line 105 in file "RTX.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;		None               void
  2898 ;; Registers used:
  2899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : 0/0
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2905 ;;      Params:         0       0       0       0
  2906 ;;      Locals:         0       0       0       0
  2907 ;;      Temps:          0       0       0       0
  2908 ;;      Totals:         0       0       0       0
  2909 ;;Total ram usage:        0 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:    7
  2912 ;; This function calls:
  2913 ;;		_RTXReadPkt
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function _RTXTask
  2921  06B4                     _RTXTask:	
  2922                           
  2923                           ;RTX.c: 107: if(!(PORTBbits.RB0))
  2924                           
  2925                           ;incstack = 0
  2926 ;; hardware stack exceeded
  2927                           ; Regs used in _RTXTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2928  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  2929  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  2930  06B6  1806               	btfsc	6,0	;volatile
  2931  06B7  0008               	return
  2932                           
  2933                           ;RTX.c: 108: RTXReadPkt();
  2934  06B8  118A  2158         	fcall	_RTXReadPkt
  2935  06BA  0008               	return
  2936  06BB                     __end_of_RTXTask:	
  2937                           
  2938                           	psect	text10
  2939  0158                     __ptext10:	
  2940 ;; *************** function _RTXReadPkt *****************
  2941 ;; Defined at:
  2942 ;;		line 142 in file "RTX.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;  numRxByte       1   18[BANK0 ] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;		None               void
  2949 ;; Registers used:
  2950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2956 ;;      Params:         0       0       0       0
  2957 ;;      Locals:         0       1       0       0
  2958 ;;      Temps:          0       1       0       0
  2959 ;;      Totals:         0       2       0       0
  2960 ;;Total ram usage:        2 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    6
  2963 ;; This function calls:
  2964 ;;		_CC1Strobe
  2965 ;;		_CC1Read
  2966 ;;		_LEDNormalFlash
  2967 ;;		_PGMWriteNvm
  2968 ;;		_RTXSendData
  2969 ;;		_RTXRcvPkt
  2970 ;;		_RTXSendRPgm
  2971 ;; This function is called by:
  2972 ;;		_RTXTask
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _RTXReadPkt
  2978  0158                     _RTXReadPkt:	
  2979  0158                     l2673:	
  2980                           
  2981                           ;RTX.c: 193: }
  2982                           ;RTX.c: 194: }
  2983                           ;RTX.c: 195: }
  2984                           ;RTX.c: 197: CC1Read(0x3B,(&(numRxByte)),1);
  2985  0158  3058               	movlw	RTXReadPkt@numRxByte& (0+255)
  2986  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2987  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2988  015B  00D7               	movwf	??_RTXReadPkt
  2989  015C  0857               	movf	??_RTXReadPkt,w
  2990  015D  00CA               	movwf	?_CC1Read
  2991  015E  01CB               	clrf	?_CC1Read+1
  2992  015F  0ACB               	incf	?_CC1Read+1,f
  2993  0160  303B               	movlw	59
  2994  0161  118A  252D  118A   	fcall	_CC1Read
  2995  0164  3005               	movlw	5
  2996  0165  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0166  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0167  0258               	subwf	RTXReadPkt@numRxByte,w
  2999  0168  1C03               	btfss	3,0
  3000  0169  0008               	return
  3001                           
  3002                           ;RTX.c: 147: while(numRxByte>=5)
  3003                           
  3004                           ;RTX.c: 143: unsigned char numRxByte;
  3005                           ;RTX.c: 146: CC1Read(0x3B,(&(numRxByte)),1);
  3006                           
  3007                           ;incstack = 0
  3008 ;; hardware stack exceeded
  3009                           ; Regs used in _RTXReadPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3010  016A  0064               	clrwdt	;# 
  3011                           
  3012                           ;RTX.c: 151: RTXRcvPkt(pktRx,5);
  3013  016B  3005               	movlw	5
  3014  016C  1283               	bcf	3,5	;RP0=0, select bank0
  3015  016D  1303               	bcf	3,6	;RP1=0, select bank0
  3016  016E  00D7               	movwf	??_RTXReadPkt
  3017  016F  0857               	movf	??_RTXReadPkt,w
  3018  0170  00CF               	movwf	?_RTXRcvPkt
  3019  0171  303C               	movlw	_pktRx& (0+255)
  3020  0172  118A  2656  118A   	fcall	_RTXRcvPkt
  3021                           
  3022                           ;RTX.c: 153: if(rtx_flg.pgmRq)
  3023  0175  1283               	bcf	3,5	;RP0=0, select bank0
  3024  0176  1303               	bcf	3,6	;RP1=0, select bank0
  3025  0177  1C2C               	btfss	_rtx_flg,0
  3026  0178  2997               	goto	l2659
  3027                           
  3028                           ;RTX.c: 154: {
  3029                           ;RTX.c: 155: if(pktRx[0]==0x00)
  3030  0179  08BC               	movf	_pktRx,f
  3031  017A  1D03               	skipz
  3032  017B  2958               	goto	l2673
  3033                           
  3034                           ;RTX.c: 156: {
  3035                           ;RTX.c: 158: if(pktRx[2]==PGM)
  3036  017C  083E               	movf	_pktRx+2,w
  3037  017D  3A01               	xorlw	1
  3038  017E  1D03               	skipz
  3039  017F  2958               	goto	l2673
  3040                           
  3041                           ;RTX.c: 159: {
  3042                           ;RTX.c: 161: pgm_cfg.baseId=pktRx[1];
  3043  0180  083D               	movf	_pktRx+1,w
  3044  0181  00D7               	movwf	??_RTXReadPkt
  3045  0182  0857               	movf	??_RTXReadPkt,w
  3046  0183  00BB               	movwf	_pgm_cfg+4
  3047                           
  3048                           ;RTX.c: 162: PGMWriteNvm();
  3049  0184  118A  2665  118A   	fcall	_PGMWriteNvm
  3050                           
  3051                           ;RTX.c: 164: RTXSendRPgm();
  3052  0187  118A  25BD  118A   	fcall	_RTXSendRPgm
  3053                           
  3054                           ;RTX.c: 166: rtx_flg.pgmRq=0;
  3055  018A  1283               	bcf	3,5	;RP0=0, select bank0
  3056  018B  1303               	bcf	3,6	;RP1=0, select bank0
  3057  018C  102C               	bcf	_rtx_flg,0
  3058                           
  3059                           ;RTX.c: 168: tmrRcvPkt=0;
  3060  018D  01B2               	clrf	_tmrRcvPkt
  3061                           
  3062                           ;RTX.c: 170: cntSndData=0;
  3063  018E  01AA               	clrf	_cntSndData
  3064                           
  3065                           ;RTX.c: 172: RTXSendData();
  3066  018F  118A  2280  118A   	fcall	_RTXSendData
  3067                           
  3068                           ;RTX.c: 174: LEDNormalFlash(3);
  3069  0192  3003               	movlw	3
  3070  0193  118A  23DF  118A   	fcall	_LEDNormalFlash
  3071                           
  3072                           ;RTX.c: 175: }
  3073                           ;RTX.c: 176: }
  3074                           ;RTX.c: 177: }
  3075  0196  2958               	goto	l2673
  3076  0197                     l2659:	
  3077                           
  3078                           ;RTX.c: 178: else
  3079                           ;RTX.c: 179: {
  3080                           ;RTX.c: 180: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  3081  0197  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0198  1303               	bcf	3,6	;RP1=0, select bank0
  3083  0199  083A               	movf	_pgm_cfg+3,w
  3084  019A  063C               	xorwf	_pktRx,w
  3085  019B  1D03               	skipz
  3086  019C  2958               	goto	l2673
  3087  019D  083B               	movf	_pgm_cfg+4,w
  3088  019E  063D               	xorwf	_pktRx+1,w
  3089  019F  1D03               	skipz
  3090  01A0  2958               	goto	l2673
  3091                           
  3092                           ;RTX.c: 181: {
  3093                           ;RTX.c: 183: if(pktRx[2]==rDAT)
  3094  01A1  083E               	movf	_pktRx+2,w
  3095  01A2  3A80               	xorlw	128
  3096  01A3  1D03               	skipz
  3097  01A4  2958               	goto	l2673
  3098                           
  3099                           ;RTX.c: 184: {
  3100                           ;RTX.c: 186: CC1Strobe(SIDLE);
  3101  01A5  3036               	movlw	54
  3102  01A6  118A  25ED  118A   	fcall	_CC1Strobe
  3103                           
  3104                           ;RTX.c: 188: tmrRcvPkt=0;
  3105  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  3106  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  3107  01AB  01B2               	clrf	_tmrRcvPkt
  3108                           
  3109                           ;RTX.c: 190: cntSndData=0;
  3110  01AC  01AA               	clrf	_cntSndData
  3111                           
  3112                           ;RTX.c: 192: rtx_ev.sleep=1;
  3113  01AD  3001               	movlw	1
  3114  01AE  00A4               	movwf	_rtx_ev
  3115  01AF  3000               	movlw	0
  3116  01B0  00A5               	movwf	_rtx_ev+1
  3117  01B1  2958               	goto	l2673
  3118  01B2                     __end_of_RTXReadPkt:	
  3119                           
  3120                           	psect	text11
  3121  05BD                     __ptext11:	
  3122 ;; *************** function _RTXSendRPgm *****************
  3123 ;; Defined at:
  3124 ;;		line 230 in file "RTX.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;		None               void
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3138 ;;      Params:         0       0       0       0
  3139 ;;      Locals:         0       0       0       0
  3140 ;;      Temps:          0       1       0       0
  3141 ;;      Totals:         0       1       0       0
  3142 ;;Total ram usage:        1 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    5
  3145 ;; This function calls:
  3146 ;;		_RTXSndPkt
  3147 ;; This function is called by:
  3148 ;;		_RTXReadPkt
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           
  3153                           ;psect for function _RTXSendRPgm
  3154  05BD                     _RTXSendRPgm:	
  3155                           
  3156                           ;RTX.c: 232: pktTx[0]=pgm_cfg.baseId;
  3157                           
  3158                           ;incstack = 0
  3159 ;; hardware stack exceeded
  3160                           ; Regs used in _RTXSendRPgm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3161  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  3162  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  3163  05BF  083B               	movf	_pgm_cfg+4,w
  3164  05C0  00D6               	movwf	??_RTXSendRPgm
  3165  05C1  0856               	movf	??_RTXSendRPgm,w
  3166  05C2  00C1               	movwf	_pktTx
  3167                           
  3168                           ;RTX.c: 233: pktTx[1]=pgm_cfg.sensId;
  3169  05C3  083A               	movf	_pgm_cfg+3,w
  3170  05C4  00D6               	movwf	??_RTXSendRPgm
  3171  05C5  0856               	movf	??_RTXSendRPgm,w
  3172  05C6  00C2               	movwf	_pktTx+1
  3173                           
  3174                           ;RTX.c: 234: pktTx[2]=rPGM;
  3175  05C7  3081               	movlw	129
  3176  05C8  00D6               	movwf	??_RTXSendRPgm
  3177  05C9  0856               	movf	??_RTXSendRPgm,w
  3178  05CA  00C3               	movwf	_pktTx+2
  3179                           
  3180                           ;RTX.c: 235: pktTx[3]=0x00;
  3181  05CB  01C4               	clrf	_pktTx+3
  3182                           
  3183                           ;RTX.c: 236: pktTx[4]=0x00;
  3184  05CC  01C5               	clrf	_pktTx+4
  3185                           
  3186                           ;RTX.c: 239: RTXSndPkt(pktTx,5);
  3187  05CD  3005               	movlw	5
  3188  05CE  00D6               	movwf	??_RTXSendRPgm
  3189  05CF  0856               	movf	??_RTXSendRPgm,w
  3190  05D0  00CF               	movwf	?_RTXSndPkt
  3191  05D1  3041               	movlw	_pktTx& (0+255)
  3192  05D2  118A  21B2         	fcall	_RTXSndPkt
  3193  05D4  0008               	return
  3194  05D5                     __end_of_RTXSendRPgm:	
  3195                           
  3196                           	psect	text12
  3197  0656                     __ptext12:	
  3198 ;; *************** function _RTXRcvPkt *****************
  3199 ;; Defined at:
  3200 ;;		line 136 in file "RTX.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  dst             1    wreg     PTR unsigned char 
  3203 ;;		 -> pktRx(5), 
  3204 ;;  len             1    9[BANK0 ] unsigned char 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;  dst             1   12[BANK0 ] PTR unsigned char 
  3207 ;;		 -> pktRx(5), 
  3208 ;; Return value:  Size  Location     Type
  3209 ;;		None               void
  3210 ;; Registers used:
  3211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3212 ;; Tracked objects:
  3213 ;;		On entry : 0/0
  3214 ;;		On exit  : 0/0
  3215 ;;		Unchanged: 0/0
  3216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3217 ;;      Params:         0       1       0       0
  3218 ;;      Locals:         0       1       0       0
  3219 ;;      Temps:          0       2       0       0
  3220 ;;      Totals:         0       4       0       0
  3221 ;;Total ram usage:        4 bytes
  3222 ;; Hardware stack levels used:    1
  3223 ;; Hardware stack levels required when called:    4
  3224 ;; This function calls:
  3225 ;;		_CC1Read
  3226 ;; This function is called by:
  3227 ;;		_RTXReadPkt
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           
  3232                           ;psect for function _RTXRcvPkt
  3233  0656                     _RTXRcvPkt:	
  3234                           
  3235                           ;incstack = 0
  3236 ;; hardware stack exceeded
  3237                           ; Regs used in _RTXRcvPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3238                           ;RTXRcvPkt@dst stored from wreg
  3239  0656  1283               	bcf	3,5	;RP0=0, select bank0
  3240  0657  1303               	bcf	3,6	;RP1=0, select bank0
  3241  0658  00D2               	movwf	RTXRcvPkt@dst
  3242                           
  3243                           ;RTX.c: 138: CC1Read(0x3F,dst,len);
  3244  0659  0852               	movf	RTXRcvPkt@dst,w
  3245  065A  00D0               	movwf	??_RTXRcvPkt
  3246  065B  0850               	movf	??_RTXRcvPkt,w
  3247  065C  00CA               	movwf	?_CC1Read
  3248  065D  084F               	movf	RTXRcvPkt@len,w
  3249  065E  00D1               	movwf	??_RTXRcvPkt+1
  3250  065F  0851               	movf	??_RTXRcvPkt+1,w
  3251  0660  00CB               	movwf	?_CC1Read+1
  3252  0661  303F               	movlw	63
  3253  0662  118A  252D         	fcall	_CC1Read
  3254  0664  0008               	return
  3255  0665                     __end_of_RTXRcvPkt:	
  3256                           
  3257                           	psect	text13
  3258  03DF                     __ptext13:	
  3259 ;; *************** function _LEDNormalFlash *****************
  3260 ;; Defined at:
  3261 ;;		line 25 in file "LED.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  num             1    wreg     unsigned char 
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  num             1    6[BANK0 ] unsigned char 
  3266 ;;  i               1    7[BANK0 ] unsigned char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;		None               void
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, pclath, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3276 ;;      Params:         0       0       0       0
  3277 ;;      Locals:         0       2       0       0
  3278 ;;      Temps:          1       0       0       0
  3279 ;;      Totals:         1       2       0       0
  3280 ;;Total ram usage:        3 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    3
  3283 ;; This function calls:
  3284 ;;		_DLYDelay_ms
  3285 ;; This function is called by:
  3286 ;;		_PGMSelLong
  3287 ;;		_RTXReadPkt
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           
  3292                           ;psect for function _LEDNormalFlash
  3293  03DF                     _LEDNormalFlash:	
  3294                           
  3295                           ;incstack = 0
  3296                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  3297                           ;LEDNormalFlash@num stored from wreg
  3298  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  3299  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  3300  03E1  00CC               	movwf	LEDNormalFlash@num
  3301                           
  3302                           ;LED.c: 26: unsigned char i;
  3303                           ;LED.c: 28: for(i=0;i<num;i++)
  3304  03E2  01CD               	clrf	LEDNormalFlash@i
  3305  03E3                     l2451:	
  3306  03E3  084C               	movf	LEDNormalFlash@num,w
  3307  03E4  024D               	subwf	LEDNormalFlash@i,w
  3308  03E5  1803               	btfsc	3,0
  3309  03E6  0008               	return
  3310  03E7  0064               	clrwdt	;# 
  3311                           
  3312                           ;LED.c: 31: PORTCbits.RC7=0;
  3313  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  3314  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  3315  03EA  1387               	bcf	7,7	;volatile
  3316                           
  3317                           ;LED.c: 32: DLYDelay_ms(200);
  3318  03EB  30C8               	movlw	200
  3319  03EC  00C6               	movwf	?_DLYDelay_ms
  3320  03ED  3000               	movlw	0
  3321  03EE  00C7               	movwf	?_DLYDelay_ms+1
  3322  03EF  118A  246D  118A   	fcall	_DLYDelay_ms
  3323                           
  3324                           ;LED.c: 33: PORTCbits.RC7=1;
  3325  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3326  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  3327  03F4  1787               	bsf	7,7	;volatile
  3328                           
  3329                           ;LED.c: 34: DLYDelay_ms(200);
  3330  03F5  30C8               	movlw	200
  3331  03F6  00C6               	movwf	?_DLYDelay_ms
  3332  03F7  3000               	movlw	0
  3333  03F8  00C7               	movwf	?_DLYDelay_ms+1
  3334  03F9  118A  246D  118A   	fcall	_DLYDelay_ms
  3335  03FC  3001               	movlw	1
  3336  03FD  00F5               	movwf	??_LEDNormalFlash
  3337  03FE  0875               	movf	??_LEDNormalFlash,w
  3338  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  3339  0400  1303               	bcf	3,6	;RP1=0, select bank0
  3340  0401  07CD               	addwf	LEDNormalFlash@i,f
  3341  0402  2BE3               	goto	l2451
  3342  0403                     __end_of_LEDNormalFlash:	
  3343                           
  3344                           	psect	text14
  3345  0393                     __ptext14:	
  3346 ;; *************** function _RTXInit *****************
  3347 ;; Defined at:
  3348 ;;		line 54 in file "RTX.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  state           1    wreg     unsigned char 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  state           1   17[BANK0 ] unsigned char 
  3353 ;; Return value:  Size  Location     Type
  3354 ;;		None               void
  3355 ;; Registers used:
  3356 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3357 ;; Tracked objects:
  3358 ;;		On entry : 0/0
  3359 ;;		On exit  : 0/0
  3360 ;;		Unchanged: 0/0
  3361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3362 ;;      Params:         0       0       0       0
  3363 ;;      Locals:         0       1       0       0
  3364 ;;      Temps:          0       0       0       0
  3365 ;;      Totals:         0       1       0       0
  3366 ;;Total ram usage:        1 bytes
  3367 ;; Hardware stack levels used:    1
  3368 ;; Hardware stack levels required when called:    6
  3369 ;; This function calls:
  3370 ;;		_CC1Strobe
  3371 ;;		_RTXSendData
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           
  3378                           ;psect for function _RTXInit
  3379  0393                     _RTXInit:	
  3380                           
  3381                           ;incstack = 0
  3382 ;; hardware stack exceeded
  3383                           ; Regs used in _RTXInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3384                           ;RTXInit@state stored from wreg
  3385  0393  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0394  1303               	bcf	3,6	;RP1=0, select bank0
  3387  0395  00D7               	movwf	RTXInit@state
  3388                           
  3389                           ;RTX.c: 55: switch(state)
  3390  0396  2BAC               	goto	l2587
  3391  0397                     l2581:	
  3392                           ;RTX.c: 60: case 1:
  3393                           
  3394                           ;RTX.c: 59: break;
  3395                           
  3396                           ;RTX.c: 56: {
  3397                           ;RTX.c: 57: case 0:
  3398                           
  3399                           
  3400                           ;RTX.c: 62: tmrRcvPkt=0;
  3401  0397  01B2               	clrf	_tmrRcvPkt
  3402                           
  3403                           ;RTX.c: 63: tmrPgm=0;
  3404  0398  01B1               	clrf	_tmrPgm
  3405                           
  3406                           ;RTX.c: 64: cntSndData=0;
  3407  0399  01AA               	clrf	_cntSndData
  3408                           
  3409                           ;RTX.c: 65: rtx_ev.val=0;
  3410  039A  01A4               	clrf	_rtx_ev
  3411                           
  3412                           ;RTX.c: 66: rtx_flg.val=0;
  3413  039B  01AC               	clrf	_rtx_flg
  3414                           
  3415                           ;RTX.c: 67: break;
  3416  039C  0008               	return
  3417  039D                     l2583:	
  3418                           ;RTX.c: 68: case 2:
  3419                           
  3420                           
  3421                           ;RTX.c: 70: CC1Strobe(SIDLE);
  3422  039D  3036               	movlw	54
  3423  039E  118A  25ED  118A   	fcall	_CC1Strobe
  3424                           
  3425                           ;RTX.c: 71: CC1Strobe(SCAL);
  3426  03A1  3033               	movlw	51
  3427  03A2  118A  25ED  118A   	fcall	_CC1Strobe
  3428                           
  3429                           ;RTX.c: 72: CC1Strobe(SRX);
  3430  03A5  3034               	movlw	52
  3431  03A6  118A  25ED  118A   	fcall	_CC1Strobe
  3432                           
  3433                           ;RTX.c: 73: RTXSendData();
  3434  03A9  118A  2280         	fcall	_RTXSendData
  3435                           
  3436                           ;RTX.c: 75: }
  3437                           
  3438                           ;RTX.c: 74: break;
  3439  03AB  0008               	return
  3440  03AC                     l2587:	
  3441  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  3442  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  3443  03AE  0857               	movf	RTXInit@state,w
  3444                           
  3445                           ; Switch size 1, requested type "space"
  3446                           ; Number of cases is 3, Range of values is 0 to 2
  3447                           ; switch strategies available:
  3448                           ; Name         Instructions Cycles
  3449                           ; simple_byte           10     6 (average)
  3450                           ; direct_byte           13     7 (fixed)
  3451                           ; jumptable            260     6 (fixed)
  3452                           ;	Chosen strategy is simple_byte
  3453  03AF  3A00               	xorlw	0	; case 0
  3454  03B0  1903               	skipnz
  3455  03B1  2BB9               	goto	l360
  3456  03B2  3A01               	xorlw	1	; case 1
  3457  03B3  1903               	skipnz
  3458  03B4  2B97               	goto	l2581
  3459  03B5  3A03               	xorlw	3	; case 2
  3460  03B6  1903               	skipnz
  3461  03B7  2B9D               	goto	l2583
  3462  03B8  2BB9               	goto	l360
  3463  03B9                     l360:	
  3464  03B9  0008               	return
  3465  03BA                     __end_of_RTXInit:	
  3466                           
  3467                           	psect	text15
  3468  0280                     __ptext15:	
  3469 ;; *************** function _RTXSendData *****************
  3470 ;; Defined at:
  3471 ;;		line 202 in file "RTX.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;		None               void
  3478 ;; Registers used:
  3479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3485 ;;      Params:         0       0       0       0
  3486 ;;      Locals:         0       0       0       0
  3487 ;;      Temps:          0       1       0       0
  3488 ;;      Totals:         0       1       0       0
  3489 ;;Total ram usage:        1 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    5
  3492 ;; This function calls:
  3493 ;;		_LEDFastFlash
  3494 ;;		_RTXSndPkt
  3495 ;; This function is called by:
  3496 ;;		_RTXInit
  3497 ;;		_RTXTick
  3498 ;;		_RTXReadPkt
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           
  3503                           ;psect for function _RTXSendData
  3504  0280                     _RTXSendData:	
  3505                           
  3506                           ;RTX.c: 204: if(cntSndData<5)
  3507                           
  3508                           ;incstack = 0
  3509 ;; hardware stack exceeded
  3510                           ; Regs used in _RTXSendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3511  0280  3005               	movlw	5
  3512  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3514  0283  022A               	subwf	_cntSndData,w
  3515  0284  1803               	skipnc
  3516  0285  2AAD               	goto	l2607
  3517                           
  3518                           ;RTX.c: 205: {
  3519                           ;RTX.c: 207: pktTx[0]=pgm_cfg.baseId;
  3520  0286  083B               	movf	_pgm_cfg+4,w
  3521  0287  00D6               	movwf	??_RTXSendData
  3522  0288  0856               	movf	??_RTXSendData,w
  3523  0289  00C1               	movwf	_pktTx
  3524                           
  3525                           ;RTX.c: 208: pktTx[1]=pgm_cfg.sensId;
  3526  028A  083A               	movf	_pgm_cfg+3,w
  3527  028B  00D6               	movwf	??_RTXSendData
  3528  028C  0856               	movf	??_RTXSendData,w
  3529  028D  00C2               	movwf	_pktTx+1
  3530                           
  3531                           ;RTX.c: 209: pktTx[2]=DAT;
  3532  028E  01C3               	clrf	_pktTx+2
  3533                           
  3534                           ;RTX.c: 210: pktTx[3]=temp;;
  3535  028F  082F               	movf	_temp,w
  3536  0290  00D6               	movwf	??_RTXSendData
  3537  0291  0856               	movf	??_RTXSendData,w
  3538  0292  00C4               	movwf	_pktTx+3
  3539                           
  3540                           ;RTX.c: 211: pktTx[4]=batt;;
  3541  0293  0829               	movf	_batt,w
  3542  0294  00D6               	movwf	??_RTXSendData
  3543  0295  0856               	movf	??_RTXSendData,w
  3544  0296  00C5               	movwf	_pktTx+4
  3545                           
  3546                           ;RTX.c: 214: RTXSndPkt(pktTx,5);
  3547  0297  3005               	movlw	5
  3548  0298  00D6               	movwf	??_RTXSendData
  3549  0299  0856               	movf	??_RTXSendData,w
  3550  029A  00CF               	movwf	?_RTXSndPkt
  3551  029B  3041               	movlw	_pktTx& (0+255)
  3552  029C  118A  21B2  118A   	fcall	_RTXSndPkt
  3553                           
  3554                           ;RTX.c: 217: tmrRcvPkt=100;
  3555  029F  3064               	movlw	100
  3556  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3557  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3558  02A2  00D6               	movwf	??_RTXSendData
  3559  02A3  0856               	movf	??_RTXSendData,w
  3560  02A4  00B2               	movwf	_tmrRcvPkt
  3561                           
  3562                           ;RTX.c: 220: cntSndData++;
  3563  02A5  3001               	movlw	1
  3564  02A6  00D6               	movwf	??_RTXSendData
  3565  02A7  0856               	movf	??_RTXSendData,w
  3566  02A8  07AA               	addwf	_cntSndData,f
  3567                           
  3568                           ;RTX.c: 223: LEDFastFlash(1);
  3569  02A9  3001               	movlw	1
  3570  02AA  118A  2403         	fcall	_LEDFastFlash
  3571                           
  3572                           ;RTX.c: 224: }
  3573  02AC  0008               	return
  3574  02AD                     l2607:	
  3575                           
  3576                           ;RTX.c: 225: else
  3577                           ;RTX.c: 226: rtx_ev.sleep=1;
  3578  02AD  3001               	movlw	1
  3579  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3580  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  3581  02B0  00A4               	movwf	_rtx_ev
  3582  02B1  3000               	movlw	0
  3583  02B2  00A5               	movwf	_rtx_ev+1
  3584  02B3  0008               	return
  3585  02B4                     __end_of_RTXSendData:	
  3586                           
  3587                           	psect	text16
  3588  01B2                     __ptext16:	
  3589 ;; *************** function _RTXSndPkt *****************
  3590 ;; Defined at:
  3591 ;;		line 112 in file "RTX.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  src             1    wreg     PTR unsigned char 
  3594 ;;		 -> pktTx(5), 
  3595 ;;  len             1    9[BANK0 ] unsigned char 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;  src             1   12[BANK0 ] PTR unsigned char 
  3598 ;;		 -> pktTx(5), 
  3599 ;;  sta             1   15[BANK0 ] unsigned char 
  3600 ;;  numTxByte       1   14[BANK0 ] unsigned char 
  3601 ;;  numRxByte       1   13[BANK0 ] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;		None               void
  3604 ;; Registers used:
  3605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3611 ;;      Params:         0       1       0       0
  3612 ;;      Locals:         0       4       0       0
  3613 ;;      Temps:          0       2       0       0
  3614 ;;      Totals:         0       7       0       0
  3615 ;;Total ram usage:        7 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    4
  3618 ;; This function calls:
  3619 ;;		_CC1Strobe
  3620 ;;		_CC1Write
  3621 ;;		_CC1Read
  3622 ;; This function is called by:
  3623 ;;		_RTXSendData
  3624 ;;		_RTXSendRPgm
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _RTXSndPkt
  3630  01B2                     _RTXSndPkt:	
  3631                           
  3632                           ;incstack = 0
  3633 ;; hardware stack exceeded
  3634                           ; Regs used in _RTXSndPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3635                           ;RTXSndPkt@src stored from wreg
  3636  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  3637  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  3638  01B4  00D2               	movwf	RTXSndPkt@src
  3639  01B5                     l374:	
  3640                           ;RTX.c: 113: unsigned char sta,numRxByte,numTxByte;
  3641                           ;RTX.c: 116: do
  3642                           
  3643  01B5  0064               	clrwdt	;# 
  3644                           
  3645                           ;RTX.c: 119: CC1Read(0x35,(&(sta)),1);
  3646  01B6  3055               	movlw	RTXSndPkt@sta& (0+255)
  3647  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3648  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3649  01B9  00D0               	movwf	??_RTXSndPkt
  3650  01BA  0850               	movf	??_RTXSndPkt,w
  3651  01BB  00CA               	movwf	?_CC1Read
  3652  01BC  01CB               	clrf	?_CC1Read+1
  3653  01BD  0ACB               	incf	?_CC1Read+1,f
  3654  01BE  3035               	movlw	53
  3655  01BF  118A  252D  118A   	fcall	_CC1Read
  3656                           
  3657                           ;RTX.c: 120: }
  3658                           ;RTX.c: 121: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  3659  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3660  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3661  01C4  0855               	movf	RTXSndPkt@sta,w
  3662  01C5  391F               	andlw	31
  3663  01C6  3A0D               	xorlw	13
  3664  01C7  1903               	skipnz
  3665  01C8  29CE               	goto	l2681
  3666  01C9  0855               	movf	RTXSndPkt@sta,w
  3667  01CA  391F               	andlw	31
  3668  01CB  3A01               	xorlw	1
  3669  01CC  1D03               	skipz
  3670  01CD  29B5               	goto	l374
  3671  01CE                     l2681:	
  3672                           
  3673                           ;RTX.c: 123: CC1Strobe(SIDLE);
  3674  01CE  3036               	movlw	54
  3675  01CF  118A  25ED  118A   	fcall	_CC1Strobe
  3676                           
  3677                           ;RTX.c: 124: CC1Read(0x3B,(&(numRxByte)),1);
  3678  01D2  3053               	movlw	RTXSndPkt@numRxByte& (0+255)
  3679  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  3680  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  3681  01D5  00D0               	movwf	??_RTXSndPkt
  3682  01D6  0850               	movf	??_RTXSndPkt,w
  3683  01D7  00CA               	movwf	?_CC1Read
  3684  01D8  01CB               	clrf	?_CC1Read+1
  3685  01D9  0ACB               	incf	?_CC1Read+1,f
  3686  01DA  303B               	movlw	59
  3687  01DB  118A  252D  118A   	fcall	_CC1Read
  3688                           
  3689                           ;RTX.c: 125: CC1Read(0x3A,(&(numTxByte)),1);
  3690  01DE  3054               	movlw	RTXSndPkt@numTxByte& (0+255)
  3691  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  3692  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  3693  01E1  00D0               	movwf	??_RTXSndPkt
  3694  01E2  0850               	movf	??_RTXSndPkt,w
  3695  01E3  00CA               	movwf	?_CC1Read
  3696  01E4  01CB               	clrf	?_CC1Read+1
  3697  01E5  0ACB               	incf	?_CC1Read+1,f
  3698  01E6  303A               	movlw	58
  3699  01E7  118A  252D  118A   	fcall	_CC1Read
  3700                           
  3701                           ;RTX.c: 127: CC1Strobe(SFTX);
  3702  01EA  303B               	movlw	59
  3703  01EB  118A  25ED  118A   	fcall	_CC1Strobe
  3704                           
  3705                           ;RTX.c: 128: CC1Read(0x3A,(&(numTxByte)),1);
  3706  01EE  3054               	movlw	RTXSndPkt@numTxByte& (0+255)
  3707  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3708  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  3709  01F1  00D0               	movwf	??_RTXSndPkt
  3710  01F2  0850               	movf	??_RTXSndPkt,w
  3711  01F3  00CA               	movwf	?_CC1Read
  3712  01F4  01CB               	clrf	?_CC1Read+1
  3713  01F5  0ACB               	incf	?_CC1Read+1,f
  3714  01F6  303A               	movlw	58
  3715  01F7  118A  252D  118A   	fcall	_CC1Read
  3716                           
  3717                           ;RTX.c: 130: CC1Write(0x3F,src,len);
  3718  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3719  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  3720  01FC  0852               	movf	RTXSndPkt@src,w
  3721  01FD  00D0               	movwf	??_RTXSndPkt
  3722  01FE  0850               	movf	??_RTXSndPkt,w
  3723  01FF  00C9               	movwf	?_CC1Write
  3724  0200  084F               	movf	RTXSndPkt@len,w
  3725  0201  00D1               	movwf	??_RTXSndPkt+1
  3726  0202  0851               	movf	??_RTXSndPkt+1,w
  3727  0203  00CA               	movwf	?_CC1Write+1
  3728  0204  303F               	movlw	63
  3729  0205  118A  254A  118A   	fcall	_CC1Write
  3730                           
  3731                           ;RTX.c: 132: CC1Strobe(STX);
  3732  0208  3035               	movlw	53
  3733  0209  118A  25ED         	fcall	_CC1Strobe
  3734  020B  0008               	return
  3735  020C                     __end_of_RTXSndPkt:	
  3736                           
  3737                           	psect	text17
  3738  052D                     __ptext17:	
  3739 ;; *************** function _CC1Read *****************
  3740 ;; Defined at:
  3741 ;;		line 108 in file "CC1.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  addr            1    wreg     unsigned char 
  3744 ;;  dst             1    4[BANK0 ] PTR unsigned char 
  3745 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3746 ;;		 -> RTXSndPkt@sta(1), 
  3747 ;;  len             1    5[BANK0 ] unsigned char 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  addr            1    7[BANK0 ] unsigned char 
  3750 ;;  cc1Addr         1    8[BANK0 ] unsigned char 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;		None               void
  3753 ;; Registers used:
  3754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3760 ;;      Params:         0       2       0       0
  3761 ;;      Locals:         0       2       0       0
  3762 ;;      Temps:          0       1       0       0
  3763 ;;      Totals:         0       5       0       0
  3764 ;;Total ram usage:        5 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    3
  3767 ;; This function calls:
  3768 ;;		_SPIRead
  3769 ;;		_SPIWrite
  3770 ;; This function is called by:
  3771 ;;		_RTXSndPkt
  3772 ;;		_RTXRcvPkt
  3773 ;;		_RTXReadPkt
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _CC1Read
  3779  052D                     _CC1Read:	
  3780                           
  3781                           ;incstack = 0
  3782 ;; hardware stack exceeded
  3783                           ; Regs used in _CC1Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3784                           ;CC1Read@addr stored from wreg
  3785  052D  1283               	bcf	3,5	;RP0=0, select bank0
  3786  052E  1303               	bcf	3,6	;RP1=0, select bank0
  3787  052F  00CD               	movwf	CC1Read@addr
  3788                           
  3789                           ;CC1.c: 109: unsigned char cc1Addr;
  3790                           ;CC1.c: 112: PORTAbits.RA5=0;
  3791  0530  1285               	bcf	5,5	;volatile
  3792                           
  3793                           ;CC1.c: 115: cc1Addr=((addr&0b00111111)|0b11000000);
  3794  0531  084D               	movf	CC1Read@addr,w
  3795  0532  393F               	andlw	63
  3796  0533  38C0               	iorlw	192
  3797  0534  00CC               	movwf	??_CC1Read
  3798  0535  084C               	movf	??_CC1Read,w
  3799  0536  00CE               	movwf	CC1Read@cc1Addr
  3800                           
  3801                           ;CC1.c: 116: SPIWrite((&(cc1Addr)),1);
  3802  0537  01F5               	clrf	?_SPIWrite
  3803  0538  0AF5               	incf	?_SPIWrite,f
  3804  0539  304E               	movlw	CC1Read@cc1Addr& (0+255)
  3805  053A  118A  25A1  118A   	fcall	_SPIWrite
  3806                           
  3807                           ;CC1.c: 119: SPIRead(dst,len);
  3808  053D  1283               	bcf	3,5	;RP0=0, select bank0
  3809  053E  1303               	bcf	3,6	;RP1=0, select bank0
  3810  053F  084B               	movf	CC1Read@len,w
  3811  0540  00CC               	movwf	??_CC1Read
  3812  0541  084C               	movf	??_CC1Read,w
  3813  0542  00F5               	movwf	?_SPIRead
  3814  0543  084A               	movf	CC1Read@dst,w
  3815  0544  118A  24CF         	fcall	_SPIRead
  3816                           
  3817                           ;CC1.c: 122: PORTAbits.RA5=1;
  3818  0546  1283               	bcf	3,5	;RP0=0, select bank0
  3819  0547  1303               	bcf	3,6	;RP1=0, select bank0
  3820  0548  1685               	bsf	5,5	;volatile
  3821  0549  0008               	return
  3822  054A                     __end_of_CC1Read:	
  3823                           
  3824                           	psect	text18
  3825  04CF                     __ptext18:	
  3826 ;; *************** function _SPIRead *****************
  3827 ;; Defined at:
  3828 ;;		line 26 in file "SPI.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  dstPtr          1    wreg     PTR unsigned char 
  3831 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3832 ;;		 -> RTXSndPkt@sta(1), 
  3833 ;;  len             1    4[COMMON] unsigned char 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  dstPtr          1    2[BANK0 ] PTR unsigned char 
  3836 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3837 ;;		 -> RTXSndPkt@sta(1), 
  3838 ;;  i               1    3[BANK0 ] unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3848 ;;      Params:         1       0       0       0
  3849 ;;      Locals:         0       2       0       0
  3850 ;;      Temps:          0       2       0       0
  3851 ;;      Totals:         1       4       0       0
  3852 ;;Total ram usage:        5 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    2
  3855 ;; This function calls:
  3856 ;;		Nothing
  3857 ;; This function is called by:
  3858 ;;		_CC1Read
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           
  3863                           ;psect for function _SPIRead
  3864  04CF                     _SPIRead:	
  3865                           
  3866                           ;incstack = 0
  3867 ;; hardware stack exceeded
  3868                           ; Regs used in _SPIRead: [wreg-fsr0h+status,2+status,0]
  3869                           ;SPIRead@dstPtr stored from wreg
  3870  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3871  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3872  04D1  00C8               	movwf	SPIRead@dstPtr
  3873                           
  3874                           ;SPI.c: 27: unsigned char i;
  3875                           ;SPI.c: 29: for(i=0;i<len;i++)
  3876  04D2  01C9               	clrf	SPIRead@i
  3877  04D3                     l2333:	
  3878  04D3  0875               	movf	SPIRead@len,w
  3879  04D4  0249               	subwf	SPIRead@i,w
  3880  04D5  1803               	btfsc	3,0
  3881  04D6  0008               	return
  3882                           
  3883                           ;SPI.c: 30: {
  3884                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  3885  04D7  118C               	bcf	12,3	;volatile
  3886                           
  3887                           ;SPI.c: 32: SSPBUF=0xFF;
  3888  04D8  30FF               	movlw	255
  3889  04D9  0093               	movwf	19	;volatile
  3890  04DA                     l57:	
  3891                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  3892                           
  3893  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  3894  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  3895  04DC  198C               	btfsc	12,3	;volatile
  3896  04DD  2CE0               	goto	l2329
  3897                           
  3898                           ;SPI.c: 34: _nop();
  3899  04DE  0000               	nop
  3900  04DF  2CDA               	goto	l57
  3901  04E0                     l2329:	
  3902                           
  3903                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  3904  04E0  0813               	movf	19,w	;volatile
  3905  04E1  00C6               	movwf	??_SPIRead
  3906  04E2  0849               	movf	SPIRead@i,w
  3907  04E3  0748               	addwf	SPIRead@dstPtr,w
  3908  04E4  00C7               	movwf	??_SPIRead+1
  3909  04E5  0847               	movf	??_SPIRead+1,w
  3910  04E6  0084               	movwf	4
  3911  04E7  0846               	movf	??_SPIRead,w
  3912  04E8  1383               	bcf	3,7	;select IRP bank0
  3913  04E9  0080               	movwf	0
  3914  04EA  3001               	movlw	1
  3915  04EB  00C6               	movwf	??_SPIRead
  3916  04EC  0846               	movf	??_SPIRead,w
  3917  04ED  07C9               	addwf	SPIRead@i,f
  3918  04EE  2CD3               	goto	l2333
  3919  04EF                     __end_of_SPIRead:	
  3920                           
  3921                           	psect	text19
  3922  054A                     __ptext19:	
  3923 ;; *************** function _CC1Write *****************
  3924 ;; Defined at:
  3925 ;;		line 126 in file "CC1.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  addr            1    wreg     unsigned char 
  3928 ;;  src             1    3[BANK0 ] PTR unsigned char 
  3929 ;;		 -> pktTx(5), cc1PaTable(8), cc1InitVal(47), 
  3930 ;;  len             1    4[BANK0 ] unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  addr            1    6[BANK0 ] unsigned char 
  3933 ;;  cc1Addr         1    7[BANK0 ] unsigned char 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;		None               void
  3936 ;; Registers used:
  3937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3943 ;;      Params:         0       2       0       0
  3944 ;;      Locals:         0       2       0       0
  3945 ;;      Temps:          0       1       0       0
  3946 ;;      Totals:         0       5       0       0
  3947 ;;Total ram usage:        5 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:    3
  3950 ;; This function calls:
  3951 ;;		_SPIWrite
  3952 ;; This function is called by:
  3953 ;;		_CC1Init
  3954 ;;		_RTXSndPkt
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           
  3959                           ;psect for function _CC1Write
  3960  054A                     _CC1Write:	
  3961                           
  3962                           ;incstack = 0
  3963 ;; hardware stack exceeded
  3964                           ; Regs used in _CC1Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3965                           ;CC1Write@addr stored from wreg
  3966  054A  1283               	bcf	3,5	;RP0=0, select bank0
  3967  054B  1303               	bcf	3,6	;RP1=0, select bank0
  3968  054C  00CC               	movwf	CC1Write@addr
  3969                           
  3970                           ;CC1.c: 127: unsigned char cc1Addr;
  3971                           ;CC1.c: 130: PORTAbits.RA5=0;
  3972  054D  1285               	bcf	5,5	;volatile
  3973                           
  3974                           ;CC1.c: 133: cc1Addr=((addr&0b00111111)|0b01000000);
  3975  054E  084C               	movf	CC1Write@addr,w
  3976  054F  393F               	andlw	63
  3977  0550  3840               	iorlw	64
  3978  0551  00CB               	movwf	??_CC1Write
  3979  0552  084B               	movf	??_CC1Write,w
  3980  0553  00CD               	movwf	CC1Write@cc1Addr
  3981                           
  3982                           ;CC1.c: 134: SPIWrite((&(cc1Addr)),1);
  3983  0554  01F5               	clrf	?_SPIWrite
  3984  0555  0AF5               	incf	?_SPIWrite,f
  3985  0556  304D               	movlw	CC1Write@cc1Addr& (0+255)
  3986  0557  118A  25A1  118A   	fcall	_SPIWrite
  3987                           
  3988                           ;CC1.c: 137: SPIWrite(src,len);
  3989  055A  1283               	bcf	3,5	;RP0=0, select bank0
  3990  055B  1303               	bcf	3,6	;RP1=0, select bank0
  3991  055C  084A               	movf	CC1Write@len,w
  3992  055D  00CB               	movwf	??_CC1Write
  3993  055E  084B               	movf	??_CC1Write,w
  3994  055F  00F5               	movwf	?_SPIWrite
  3995  0560  0849               	movf	CC1Write@src,w
  3996  0561  118A  25A1         	fcall	_SPIWrite
  3997                           
  3998                           ;CC1.c: 140: PORTAbits.RA5=1;
  3999  0563  1283               	bcf	3,5	;RP0=0, select bank0
  4000  0564  1303               	bcf	3,6	;RP1=0, select bank0
  4001  0565  1685               	bsf	5,5	;volatile
  4002  0566  0008               	return
  4003  0567                     __end_of_CC1Write:	
  4004                           
  4005                           	psect	text20
  4006  05ED                     __ptext20:	
  4007 ;; *************** function _CC1Strobe *****************
  4008 ;; Defined at:
  4009 ;;		line 93 in file "CC1.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  e_stb           1    wreg     enum E1563
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  e_stb           1    4[BANK0 ] enum E1563
  4014 ;;  cc1Stb          1    5[BANK0 ] unsigned char 
  4015 ;;  i               1    0        unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;		None               void
  4018 ;; Registers used:
  4019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4025 ;;      Params:         0       0       0       0
  4026 ;;      Locals:         0       2       0       0
  4027 ;;      Temps:          0       1       0       0
  4028 ;;      Totals:         0       3       0       0
  4029 ;;Total ram usage:        3 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    3
  4032 ;; This function calls:
  4033 ;;		_SPIWrite
  4034 ;; This function is called by:
  4035 ;;		_CC1Init
  4036 ;;		_CC1Sleep
  4037 ;;		_RTXInit
  4038 ;;		_RTXSndPkt
  4039 ;;		_RTXReadPkt
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           
  4044                           ;psect for function _CC1Strobe
  4045  05ED                     _CC1Strobe:	
  4046                           
  4047                           ;incstack = 0
  4048 ;; hardware stack exceeded
  4049                           ; Regs used in _CC1Strobe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4050                           ;CC1Strobe@e_stb stored from wreg
  4051  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  4052  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  4053  05EF  00CA               	movwf	CC1Strobe@e_stb
  4054                           
  4055                           ;CC1.c: 94: unsigned char cc1Stb,i;
  4056                           ;CC1.c: 97: PORTAbits.RA5=0;
  4057  05F0  1285               	bcf	5,5	;volatile
  4058                           
  4059                           ;CC1.c: 100: cc1Stb=((e_stb&0b00111111)|0b10000000);
  4060  05F1  084A               	movf	CC1Strobe@e_stb,w
  4061  05F2  393F               	andlw	63
  4062  05F3  3880               	iorlw	128
  4063  05F4  00C9               	movwf	??_CC1Strobe
  4064  05F5  0849               	movf	??_CC1Strobe,w
  4065  05F6  00CB               	movwf	CC1Strobe@cc1Stb
  4066                           
  4067                           ;CC1.c: 101: SPIWrite((&(cc1Stb)),1);
  4068  05F7  01F5               	clrf	?_SPIWrite
  4069  05F8  0AF5               	incf	?_SPIWrite,f
  4070  05F9  304B               	movlw	CC1Strobe@cc1Stb& (0+255)
  4071  05FA  118A  25A1         	fcall	_SPIWrite
  4072                           
  4073                           ;CC1.c: 104: PORTAbits.RA5=1;
  4074  05FC  1283               	bcf	3,5	;RP0=0, select bank0
  4075  05FD  1303               	bcf	3,6	;RP1=0, select bank0
  4076  05FE  1685               	bsf	5,5	;volatile
  4077  05FF  0008               	return
  4078  0600                     __end_of_CC1Strobe:	
  4079                           
  4080                           	psect	text21
  4081  05A1                     __ptext21:	
  4082 ;; *************** function _SPIWrite *****************
  4083 ;; Defined at:
  4084 ;;		line 40 in file "SPI.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  srcPtr          1    wreg     PTR unsigned char 
  4087 ;;		 -> pktTx(5), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  4088 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  4089 ;;  len             1    4[COMMON] unsigned char 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  srcPtr          1    1[BANK0 ] PTR unsigned char 
  4092 ;;		 -> pktTx(5), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  4093 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  4094 ;;  i               1    2[BANK0 ] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;		None               void
  4097 ;; Registers used:
  4098 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4104 ;;      Params:         1       0       0       0
  4105 ;;      Locals:         0       2       0       0
  4106 ;;      Temps:          0       1       0       0
  4107 ;;      Totals:         1       3       0       0
  4108 ;;Total ram usage:        4 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    2
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_CC1Strobe
  4115 ;;		_CC1Read
  4116 ;;		_CC1Write
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _SPIWrite
  4122  05A1                     _SPIWrite:	
  4123                           
  4124                           ;incstack = 0
  4125 ;; hardware stack exceeded
  4126                           ; Regs used in _SPIWrite: [wreg-fsr0h+status,2+status,0]
  4127                           ;SPIWrite@srcPtr stored from wreg
  4128  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  4129  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  4130  05A3  00C7               	movwf	SPIWrite@srcPtr
  4131                           
  4132                           ;SPI.c: 41: unsigned char i;
  4133                           ;SPI.c: 43: for(i=0;i<len;i++)
  4134  05A4  01C8               	clrf	SPIWrite@i
  4135  05A5                     l2341:	
  4136  05A5  0875               	movf	SPIWrite@len,w
  4137  05A6  0248               	subwf	SPIWrite@i,w
  4138  05A7  1803               	btfsc	3,0
  4139  05A8  0008               	return
  4140                           
  4141                           ;SPI.c: 44: {
  4142                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  4143  05A9  118C               	bcf	12,3	;volatile
  4144                           
  4145                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  4146  05AA  0848               	movf	SPIWrite@i,w
  4147  05AB  0747               	addwf	SPIWrite@srcPtr,w
  4148  05AC  00C6               	movwf	??_SPIWrite
  4149  05AD  0846               	movf	??_SPIWrite,w
  4150  05AE  0084               	movwf	4
  4151  05AF  1383               	bcf	3,7	;select IRP bank0
  4152  05B0  0800               	movf	0,w
  4153  05B1  0093               	movwf	19	;volatile
  4154  05B2                     l66:	
  4155                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  4156                           
  4157  05B2  1283               	bcf	3,5	;RP0=0, select bank0
  4158  05B3  1303               	bcf	3,6	;RP1=0, select bank0
  4159  05B4  198C               	btfsc	12,3	;volatile
  4160  05B5  2DB8               	goto	l2339
  4161                           
  4162                           ;SPI.c: 48: _nop();
  4163  05B6  0000               	nop
  4164  05B7  2DB2               	goto	l66
  4165  05B8                     l2339:	
  4166  05B8  3001               	movlw	1
  4167  05B9  00C6               	movwf	??_SPIWrite
  4168  05BA  0846               	movf	??_SPIWrite,w
  4169  05BB  07C8               	addwf	SPIWrite@i,f
  4170  05BC  2DA5               	goto	l2341
  4171  05BD                     __end_of_SPIWrite:	
  4172                           
  4173                           	psect	text22
  4174  0403                     __ptext22:	
  4175 ;; *************** function _LEDFastFlash *****************
  4176 ;; Defined at:
  4177 ;;		line 39 in file "LED.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  num             1    wreg     unsigned char 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  num             1    6[BANK0 ] unsigned char 
  4182 ;;  i               1    7[BANK0 ] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;		None               void
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, pclath, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4192 ;;      Params:         0       0       0       0
  4193 ;;      Locals:         0       2       0       0
  4194 ;;      Temps:          1       0       0       0
  4195 ;;      Totals:         1       2       0       0
  4196 ;;Total ram usage:        3 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    3
  4199 ;; This function calls:
  4200 ;;		_DLYDelay_ms
  4201 ;; This function is called by:
  4202 ;;		_RTXSendData
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           
  4207                           ;psect for function _LEDFastFlash
  4208  0403                     _LEDFastFlash:	
  4209                           
  4210                           ;incstack = 0
  4211 ;; hardware stack exceeded
  4212                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  4213                           ;LEDFastFlash@num stored from wreg
  4214  0403  1283               	bcf	3,5	;RP0=0, select bank0
  4215  0404  1303               	bcf	3,6	;RP1=0, select bank0
  4216  0405  00CC               	movwf	LEDFastFlash@num
  4217                           
  4218                           ;LED.c: 40: unsigned char i;
  4219                           ;LED.c: 42: for(i=0;i<num;i++)
  4220  0406  01CD               	clrf	LEDFastFlash@i
  4221  0407                     l2461:	
  4222  0407  084C               	movf	LEDFastFlash@num,w
  4223  0408  024D               	subwf	LEDFastFlash@i,w
  4224  0409  1803               	btfsc	3,0
  4225  040A  0008               	return
  4226  040B  0064               	clrwdt	;# 
  4227                           
  4228                           ;LED.c: 45: PORTCbits.RC7=0;
  4229  040C  1283               	bcf	3,5	;RP0=0, select bank0
  4230  040D  1303               	bcf	3,6	;RP1=0, select bank0
  4231  040E  1387               	bcf	7,7	;volatile
  4232                           
  4233                           ;LED.c: 46: DLYDelay_ms(5);
  4234  040F  3005               	movlw	5
  4235  0410  00C6               	movwf	?_DLYDelay_ms
  4236  0411  3000               	movlw	0
  4237  0412  00C7               	movwf	?_DLYDelay_ms+1
  4238  0413  118A  246D  118A   	fcall	_DLYDelay_ms
  4239                           
  4240                           ;LED.c: 47: PORTCbits.RC7=1;
  4241  0416  1283               	bcf	3,5	;RP0=0, select bank0
  4242  0417  1303               	bcf	3,6	;RP1=0, select bank0
  4243  0418  1787               	bsf	7,7	;volatile
  4244                           
  4245                           ;LED.c: 48: DLYDelay_ms(5);
  4246  0419  3005               	movlw	5
  4247  041A  00C6               	movwf	?_DLYDelay_ms
  4248  041B  3000               	movlw	0
  4249  041C  00C7               	movwf	?_DLYDelay_ms+1
  4250  041D  118A  246D  118A   	fcall	_DLYDelay_ms
  4251  0420  3001               	movlw	1
  4252  0421  00F5               	movwf	??_LEDFastFlash
  4253  0422  0875               	movf	??_LEDFastFlash,w
  4254  0423  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0424  1303               	bcf	3,6	;RP1=0, select bank0
  4256  0425  07CD               	addwf	LEDFastFlash@i,f
  4257  0426  2C07               	goto	l2461
  4258  0427                     __end_of_LEDFastFlash:	
  4259                           
  4260                           	psect	text23
  4261  046D                     __ptext23:	
  4262 ;; *************** function _DLYDelay_ms *****************
  4263 ;; Defined at:
  4264 ;;		line 7 in file "DLY.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  val             2    0[BANK0 ] unsigned short 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  i               2    4[BANK0 ] unsigned short 
  4269 ;; Return value:  Size  Location     Type
  4270 ;;		None               void
  4271 ;; Registers used:
  4272 ;;		wreg, status,2
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4278 ;;      Params:         0       2       0       0
  4279 ;;      Locals:         0       2       0       0
  4280 ;;      Temps:          0       2       0       0
  4281 ;;      Totals:         0       6       0       0
  4282 ;;Total ram usage:        6 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    2
  4285 ;; This function calls:
  4286 ;;		Nothing
  4287 ;; This function is called by:
  4288 ;;		_LEDNormalFlash
  4289 ;;		_LEDFastFlash
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           
  4294                           ;psect for function _DLYDelay_ms
  4295  046D                     _DLYDelay_ms:	
  4296                           
  4297                           ;DLY.c: 8: unsigned short i;
  4298                           ;DLY.c: 10: for(i=0;i<val;i++)
  4299                           
  4300                           ;incstack = 0
  4301 ;; hardware stack exceeded
  4302                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  4303  046D  1283               	bcf	3,5	;RP0=0, select bank0
  4304  046E  1303               	bcf	3,6	;RP1=0, select bank0
  4305  046F  01CA               	clrf	DLYDelay_ms@i
  4306  0470  01CB               	clrf	DLYDelay_ms@i+1
  4307  0471                     l117:	
  4308  0471  0847               	movf	DLYDelay_ms@val+1,w
  4309  0472  024B               	subwf	DLYDelay_ms@i+1,w
  4310  0473  1D03               	skipz
  4311  0474  2C77               	goto	u1265
  4312  0475  0846               	movf	DLYDelay_ms@val,w
  4313  0476  024A               	subwf	DLYDelay_ms@i,w
  4314  0477                     u1265:	
  4315  0477  1803               	btfsc	3,0
  4316  0478  0008               	return
  4317  0479  0064               	clrwdt	;# 
  4318                           
  4319                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  4320  047A  3003               	movlw	3
  4321  047B  1283               	bcf	3,5	;RP0=0, select bank0
  4322  047C  1303               	bcf	3,6	;RP1=0, select bank0
  4323  047D  00C9               	movwf	??_DLYDelay_ms+1
  4324  047E  3097               	movlw	151
  4325  047F  00C8               	movwf	??_DLYDelay_ms
  4326  0480                     u1687:	
  4327  0480  0BC8               	decfsz	??_DLYDelay_ms,f
  4328  0481  2C80               	goto	u1687
  4329  0482  0BC9               	decfsz	??_DLYDelay_ms+1,f
  4330  0483  2C80               	goto	u1687
  4331  0484  2C85               	nop2
  4332  0485  3001               	movlw	1
  4333  0486  1283               	bcf	3,5	;RP0=0, select bank0
  4334  0487  1303               	bcf	3,6	;RP1=0, select bank0
  4335  0488  07CA               	addwf	DLYDelay_ms@i,f
  4336  0489  1803               	skipnc
  4337  048A  0ACB               	incf	DLYDelay_ms@i+1,f
  4338  048B  3000               	movlw	0
  4339  048C  07CB               	addwf	DLYDelay_ms@i+1,f
  4340  048D  2C71               	goto	l117
  4341  048E                     __end_of_DLYDelay_ms:	
  4342                           
  4343                           	psect	text24
  4344  05D5                     __ptext24:	
  4345 ;; *************** function _PGMInit *****************
  4346 ;; Defined at:
  4347 ;;		line 21 in file "PGM.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  state           1    wreg     unsigned char 
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  state           1   11[BANK0 ] unsigned char 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;		None               void
  4354 ;; Registers used:
  4355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4361 ;;      Params:         0       0       0       0
  4362 ;;      Locals:         0       1       0       0
  4363 ;;      Temps:          0       0       0       0
  4364 ;;      Totals:         0       1       0       0
  4365 ;;Total ram usage:        1 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    7
  4368 ;; This function calls:
  4369 ;;		_PGMReadNvm
  4370 ;;		_PGMCheckNvm
  4371 ;; This function is called by:
  4372 ;;		_main
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function _PGMInit
  4378  05D5                     _PGMInit:	
  4379                           
  4380                           ;incstack = 0
  4381 ;; hardware stack exceeded
  4382                           ; Regs used in _PGMInit: [allreg]
  4383                           ;PGMInit@state stored from wreg
  4384  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  4385  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  4386  05D7  00D1               	movwf	PGMInit@state
  4387                           
  4388                           ;PGM.c: 22: switch(state)
  4389  05D8  2DE2               	goto	l2547
  4390  05D9                     l2539:	
  4391                           ;PGM.c: 23: {
  4392                           ;PGM.c: 24: case 0:
  4393                           
  4394                           
  4395                           ;PGM.c: 26: T1CON=0b00000001;
  4396  05D9  3001               	movlw	1
  4397  05DA  0090               	movwf	16	;volatile
  4398                           
  4399                           ;PGM.c: 27: break;
  4400  05DB  0008               	return
  4401  05DC                     l2541:	
  4402                           ;PGM.c: 28: case 1:
  4403                           
  4404                           
  4405                           ;PGM.c: 30: PGMReadNvm();
  4406  05DC  118A  2673  118A   	fcall	_PGMReadNvm
  4407                           
  4408                           ;PGM.c: 31: PGMCheckNvm();
  4409  05DF  118A  2681         	fcall	_PGMCheckNvm
  4410                           
  4411                           ;PGM.c: 36: }
  4412                           
  4413                           ;PGM.c: 32: break;
  4414  05E1  0008               	return
  4415  05E2                     l2547:	
  4416  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  4417  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  4418  05E4  0851               	movf	PGMInit@state,w
  4419                           
  4420                           ; Switch size 1, requested type "space"
  4421                           ; Number of cases is 2, Range of values is 0 to 1
  4422                           ; switch strategies available:
  4423                           ; Name         Instructions Cycles
  4424                           ; simple_byte            7     4 (average)
  4425                           ; direct_byte           11     7 (fixed)
  4426                           ; jumptable            260     6 (fixed)
  4427                           ;	Chosen strategy is simple_byte
  4428  05E5  3A00               	xorlw	0	; case 0
  4429  05E6  1903               	skipnz
  4430  05E7  2DD9               	goto	l2539
  4431  05E8  3A01               	xorlw	1	; case 1
  4432  05E9  1903               	skipnz
  4433  05EA  2DDC               	goto	l2541
  4434  05EB  2DEC               	goto	l287
  4435  05EC                     l287:	
  4436  05EC  0008               	return
  4437  05ED                     __end_of_PGMInit:	
  4438                           
  4439                           	psect	text25
  4440  0681                     __ptext25:	
  4441 ;; *************** function _PGMCheckNvm *****************
  4442 ;; Defined at:
  4443 ;;		line 50 in file "PGM.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4457 ;;      Params:         0       0       0       0
  4458 ;;      Locals:         0       0       0       0
  4459 ;;      Temps:          0       0       0       0
  4460 ;;      Totals:         0       0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    6
  4464 ;; This function calls:
  4465 ;;		_PGMNvmReset
  4466 ;; This function is called by:
  4467 ;;		_PGMInit
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _PGMCheckNvm
  4473  0681                     _PGMCheckNvm:	
  4474                           
  4475                           ;PGM.c: 51: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  4476                           
  4477                           ;incstack = 0
  4478 ;; hardware stack exceeded
  4479                           ; Regs used in _PGMCheckNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4480  0681  1283               	bcf	3,5	;RP0=0, select bank0
  4481  0682  1303               	bcf	3,6	;RP1=0, select bank0
  4482  0683  0837               	movf	_pgm_cfg,w
  4483  0684  3AC5               	xorlw	197
  4484  0685  1D03               	skipz
  4485  0686  2E8B               	goto	l2555
  4486  0687  0838               	movf	_pgm_cfg+1,w
  4487  0688  3A5C               	xorlw	92
  4488  0689  1903               	skipnz
  4489  068A  0008               	return
  4490  068B                     l2555:	
  4491                           
  4492                           ;PGM.c: 52: PGMNvmReset();
  4493  068B  118A  2613         	fcall	_PGMNvmReset
  4494  068D  0008               	return
  4495  068E                     __end_of_PGMCheckNvm:	
  4496                           
  4497                           	psect	text26
  4498  0613                     __ptext26:	
  4499 ;; *************** function _PGMNvmReset *****************
  4500 ;; Defined at:
  4501 ;;		line 56 in file "PGM.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;		None               void
  4508 ;; Registers used:
  4509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4515 ;;      Params:         0       0       0       0
  4516 ;;      Locals:         0       0       0       0
  4517 ;;      Temps:          0       1       0       0
  4518 ;;      Totals:         0       1       0       0
  4519 ;;Total ram usage:        1 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    5
  4522 ;; This function calls:
  4523 ;;		_PGMWriteNvm
  4524 ;; This function is called by:
  4525 ;;		_PGMCheckNvm
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           
  4530                           ;psect for function _PGMNvmReset
  4531  0613                     _PGMNvmReset:	
  4532                           
  4533                           ;PGM.c: 58: pgm_cfg.valChk1=0xC5;
  4534                           
  4535                           ;incstack = 0
  4536 ;; hardware stack exceeded
  4537                           ; Regs used in _PGMNvmReset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4538  0613  30C5               	movlw	197
  4539  0614  1283               	bcf	3,5	;RP0=0, select bank0
  4540  0615  1303               	bcf	3,6	;RP1=0, select bank0
  4541  0616  00D0               	movwf	??_PGMNvmReset
  4542  0617  0850               	movf	??_PGMNvmReset,w
  4543  0618  00B7               	movwf	_pgm_cfg
  4544                           
  4545                           ;PGM.c: 59: pgm_cfg.valChk2=0x5C;
  4546  0619  305C               	movlw	92
  4547  061A  00D0               	movwf	??_PGMNvmReset
  4548  061B  0850               	movf	??_PGMNvmReset,w
  4549  061C  00B8               	movwf	_pgm_cfg+1
  4550                           
  4551                           ;PGM.c: 60: pgm_cfg.menu=0x00;
  4552  061D  01B9               	clrf	_pgm_cfg+2
  4553                           
  4554                           ;PGM.c: 61: pgm_cfg.sensId=0x00;
  4555  061E  01BA               	clrf	_pgm_cfg+3
  4556                           
  4557                           ;PGM.c: 62: pgm_cfg.baseId=0x00;
  4558  061F  01BB               	clrf	_pgm_cfg+4
  4559                           
  4560                           ;PGM.c: 64: PGMWriteNvm();
  4561  0620  118A  2665  118A   	fcall	_PGMWriteNvm
  4562  0623                     l2569:	
  4563                           ;PGM.c: 66: while(1)
  4564                           
  4565                           
  4566                           ;PGM.c: 67: _nop();
  4567  0623  0000               	nop
  4568  0624  2E23               	goto	l2569
  4569  0625                     __end_of_PGMNvmReset:	
  4570                           
  4571                           	psect	text27
  4572  0665                     __ptext27:	
  4573 ;; *************** function _PGMWriteNvm *****************
  4574 ;; Defined at:
  4575 ;;		line 45 in file "PGM.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;		None
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;		None
  4580 ;; Return value:  Size  Location     Type
  4581 ;;		None               void
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4589 ;;      Params:         0       0       0       0
  4590 ;;      Locals:         0       0       0       0
  4591 ;;      Temps:          0       2       0       0
  4592 ;;      Totals:         0       2       0       0
  4593 ;;Total ram usage:        2 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:    4
  4596 ;; This function calls:
  4597 ;;		_NVMWrite
  4598 ;; This function is called by:
  4599 ;;		_PGMNvmReset
  4600 ;;		_PGMSelLong
  4601 ;;		_RTXReadPkt
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _PGMWriteNvm
  4607  0665                     _PGMWriteNvm:	
  4608                           
  4609                           ;PGM.c: 46: NVMWrite(0x00,(char *)(&(pgm_cfg)),sizeof(ts_PGM_CFG));
  4610                           
  4611                           ;incstack = 0
  4612 ;; hardware stack exceeded
  4613                           ; Regs used in _PGMWriteNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4614  0665  3037               	movlw	_pgm_cfg& (0+255)
  4615  0666  1283               	bcf	3,5	;RP0=0, select bank0
  4616  0667  1303               	bcf	3,6	;RP1=0, select bank0
  4617  0668  00CE               	movwf	??_PGMWriteNvm
  4618  0669  084E               	movf	??_PGMWriteNvm,w
  4619  066A  00C8               	movwf	?_NVMWrite
  4620  066B  3005               	movlw	5
  4621  066C  00CF               	movwf	??_PGMWriteNvm+1
  4622  066D  084F               	movf	??_PGMWriteNvm+1,w
  4623  066E  00C9               	movwf	?_NVMWrite+1
  4624  066F  3000               	movlw	0
  4625  0670  118A  248E         	fcall	_NVMWrite
  4626  0672  0008               	return
  4627  0673                     __end_of_PGMWriteNvm:	
  4628                           
  4629                           	psect	text28
  4630  048E                     __ptext28:	
  4631 ;; *************** function _NVMWrite *****************
  4632 ;; Defined at:
  4633 ;;		line 16 in file "NVM.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  addr            1    wreg     unsigned char 
  4636 ;;  source          1    2[BANK0 ] PTR unsigned char 
  4637 ;;		 -> pgm_cfg(5), 
  4638 ;;  len             1    3[BANK0 ] unsigned char 
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  addr            1    6[BANK0 ] unsigned char 
  4641 ;;  i               1    7[BANK0 ] unsigned char 
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4651 ;;      Params:         0       2       0       0
  4652 ;;      Locals:         0       2       0       0
  4653 ;;      Temps:          0       2       0       0
  4654 ;;      Totals:         0       6       0       0
  4655 ;;Total ram usage:        6 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    3
  4658 ;; This function calls:
  4659 ;;		_eeprom_write
  4660 ;; This function is called by:
  4661 ;;		_PGMWriteNvm
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _NVMWrite
  4667  048E                     _NVMWrite:	
  4668                           
  4669                           ;incstack = 0
  4670 ;; hardware stack exceeded
  4671                           ; Regs used in _NVMWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4672                           ;NVMWrite@addr stored from wreg
  4673  048E  1283               	bcf	3,5	;RP0=0, select bank0
  4674  048F  1303               	bcf	3,6	;RP1=0, select bank0
  4675  0490  00CC               	movwf	NVMWrite@addr
  4676                           
  4677                           ;NVM.c: 17: unsigned char i;
  4678                           ;NVM.c: 19: for(i=0;i<len;i++)
  4679  0491  01CD               	clrf	NVMWrite@i
  4680  0492                     l2481:	
  4681  0492  0849               	movf	NVMWrite@len,w
  4682  0493  024D               	subwf	NVMWrite@i,w
  4683  0494  1803               	btfsc	3,0
  4684  0495  0008               	return
  4685  0496  0064               	clrwdt	;# 
  4686                           
  4687                           ;NVM.c: 22: eeprom_write((addr+i),(*(source+i)));
  4688  0497  1283               	bcf	3,5	;RP0=0, select bank0
  4689  0498  1303               	bcf	3,6	;RP1=0, select bank0
  4690  0499  084D               	movf	NVMWrite@i,w
  4691  049A  0748               	addwf	NVMWrite@source,w
  4692  049B  00CA               	movwf	??_NVMWrite
  4693  049C  084A               	movf	??_NVMWrite,w
  4694  049D  0084               	movwf	4
  4695  049E  1383               	bcf	3,7	;select IRP bank0
  4696  049F  0800               	movf	0,w
  4697  04A0  00CB               	movwf	??_NVMWrite+1
  4698  04A1  084B               	movf	??_NVMWrite+1,w
  4699  04A2  00F5               	movwf	?_eeprom_write
  4700  04A3  084D               	movf	NVMWrite@i,w
  4701  04A4  074C               	addwf	NVMWrite@addr,w
  4702  04A5  118A  233F  118A   	fcall	_eeprom_write
  4703  04A8  3001               	movlw	1
  4704  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  4705  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  4706  04AB  00CA               	movwf	??_NVMWrite
  4707  04AC  084A               	movf	??_NVMWrite,w
  4708  04AD  07CD               	addwf	NVMWrite@i,f
  4709  04AE  2C92               	goto	l2481
  4710  04AF                     __end_of_NVMWrite:	
  4711                           
  4712                           	psect	text29
  4713  033F                     __ptext29:	
  4714 ;; *************** function _eeprom_write *****************
  4715 ;; Defined at:
  4716 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\eewrite.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  addr            1    wreg     unsigned char 
  4719 ;;  value           1    4[COMMON] unsigned char 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  addr            1    1[BANK0 ] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;		None               void
  4724 ;; Registers used:
  4725 ;;		wreg, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4731 ;;      Params:         1       0       0       0
  4732 ;;      Locals:         0       1       0       0
  4733 ;;      Temps:          0       1       0       0
  4734 ;;      Totals:         1       2       0       0
  4735 ;;Total ram usage:        3 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    2
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_NVMWrite
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           
  4746                           ;psect for function _eeprom_write
  4747  033F                     _eeprom_write:	
  4748                           
  4749                           ;incstack = 0
  4750 ;; hardware stack exceeded
  4751                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4752                           ;eeprom_write@addr stored from wreg
  4753  033F  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0340  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0341  00C7               	movwf	eeprom_write@addr
  4756  0342                     l572:	
  4757  0342  1683               	bsf	3,5	;RP0=1, select bank3
  4758  0343  1703               	bsf	3,6	;RP1=1, select bank3
  4759  0344  188C               	btfsc	12,1	;volsfr
  4760  0345  2B42               	goto	l572
  4761  0346  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0347  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0348  0847               	movf	eeprom_write@addr,w
  4764  0349  1283               	bcf	3,5	;RP0=0, select bank2
  4765  034A  1703               	bsf	3,6	;RP1=1, select bank2
  4766  034B  008D               	movwf	13	;volatile
  4767  034C  0875               	movf	eeprom_write@value,w
  4768  034D  008C               	movwf	12	;volatile
  4769  034E  303F               	movlw	63
  4770  034F  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0350  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0351  00C6               	movwf	??_eeprom_write
  4773  0352  0846               	movf	??_eeprom_write,w
  4774  0353  1683               	bsf	3,5	;RP0=1, select bank3
  4775  0354  1703               	bsf	3,6	;RP1=1, select bank3
  4776  0355  058C               	andwf	12,f	;volsfr
  4777  0356  1283               	bcf	3,5	;RP0=0, select bank0
  4778  0357  1303               	bcf	3,6	;RP1=0, select bank0
  4779  0358  1003               	bcf	3,0	;volatile
  4780  0359  1B8B               	btfsc	11,7	;volatile
  4781  035A  1403               	bsf	3,0	;volatile
  4782  035B  138B               	bcf	11,7	;volatile
  4783  035C  1683               	bsf	3,5	;RP0=1, select bank3
  4784  035D  1703               	bsf	3,6	;RP1=1, select bank3
  4785  035E  150C               	bsf	12,2	;volsfr
  4786  035F  3055               	movlw	85
  4787  0360  008D               	movwf	13	;volsfr
  4788  0361  30AA               	movlw	170
  4789  0362  008D               	movwf	13	;volsfr
  4790  0363  148C               	bsf	12,1	;volsfr
  4791  0364  110C               	bcf	12,2	;volsfr
  4792  0365  1283               	bcf	3,5	;RP0=0, select bank0
  4793  0366  1303               	bcf	3,6	;RP1=0, select bank0
  4794  0367  1C03               	btfss	3,0	;volatile
  4795  0368  0008               	return
  4796  0369  178B               	bsf	11,7	;volatile
  4797  036A  0008               	return
  4798  036B                     __end_of_eeprom_write:	
  4799                           
  4800                           	psect	text30
  4801  0673                     __ptext30:	
  4802 ;; *************** function _PGMReadNvm *****************
  4803 ;; Defined at:
  4804 ;;		line 40 in file "PGM.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;		None               void
  4811 ;; Registers used:
  4812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4818 ;;      Params:         0       0       0       0
  4819 ;;      Locals:         0       0       0       0
  4820 ;;      Temps:          0       2       0       0
  4821 ;;      Totals:         0       2       0       0
  4822 ;;Total ram usage:        2 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    4
  4825 ;; This function calls:
  4826 ;;		_NVMRead
  4827 ;; This function is called by:
  4828 ;;		_PGMInit
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           
  4833                           ;psect for function _PGMReadNvm
  4834  0673                     _PGMReadNvm:	
  4835                           
  4836                           ;PGM.c: 41: NVMRead(0x00,(char *)(&(pgm_cfg)),sizeof(ts_PGM_CFG));
  4837                           
  4838                           ;incstack = 0
  4839                           ; Regs used in _PGMReadNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4840  0673  3037               	movlw	_pgm_cfg& (0+255)
  4841  0674  1283               	bcf	3,5	;RP0=0, select bank0
  4842  0675  1303               	bcf	3,6	;RP1=0, select bank0
  4843  0676  00CD               	movwf	??_PGMReadNvm
  4844  0677  084D               	movf	??_PGMReadNvm,w
  4845  0678  00C7               	movwf	?_NVMRead
  4846  0679  3005               	movlw	5
  4847  067A  00CE               	movwf	??_PGMReadNvm+1
  4848  067B  084E               	movf	??_PGMReadNvm+1,w
  4849  067C  00C8               	movwf	?_NVMRead+1
  4850  067D  3000               	movlw	0
  4851  067E  118A  24EF         	fcall	_NVMRead
  4852  0680  0008               	return
  4853  0681                     __end_of_PGMReadNvm:	
  4854                           
  4855                           	psect	text31
  4856  04EF                     __ptext31:	
  4857 ;; *************** function _NVMRead *****************
  4858 ;; Defined at:
  4859 ;;		line 5 in file "NVM.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  addr            1    wreg     unsigned char 
  4862 ;;  dest            1    1[BANK0 ] PTR unsigned char 
  4863 ;;		 -> pgm_cfg(5), 
  4864 ;;  len             1    2[BANK0 ] unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  addr            1    5[BANK0 ] unsigned char 
  4867 ;;  i               1    6[BANK0 ] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;		None               void
  4870 ;; Registers used:
  4871 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4877 ;;      Params:         0       2       0       0
  4878 ;;      Locals:         0       2       0       0
  4879 ;;      Temps:          0       2       0       0
  4880 ;;      Totals:         0       6       0       0
  4881 ;;Total ram usage:        6 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    3
  4884 ;; This function calls:
  4885 ;;		_eeprom_read
  4886 ;; This function is called by:
  4887 ;;		_PGMReadNvm
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           
  4892                           ;psect for function _NVMRead
  4893  04EF                     _NVMRead:	
  4894                           
  4895                           ;incstack = 0
  4896                           ; Regs used in _NVMRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4897                           ;NVMRead@addr stored from wreg
  4898  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  4899  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  4900  04F1  00CB               	movwf	NVMRead@addr
  4901                           
  4902                           ;NVM.c: 6: unsigned char i;
  4903                           ;NVM.c: 8: for(i=0;i<len;i++)
  4904  04F2  01CC               	clrf	NVMRead@i
  4905  04F3                     l2469:	
  4906  04F3  0848               	movf	NVMRead@len,w
  4907  04F4  024C               	subwf	NVMRead@i,w
  4908  04F5  1803               	btfsc	3,0
  4909  04F6  0008               	return
  4910  04F7  0064               	clrwdt	;# 
  4911                           
  4912                           ;NVM.c: 11: (*(dest+i))=eeprom_read(addr+i);
  4913  04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4914  04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4915  04FA  084C               	movf	NVMRead@i,w
  4916  04FB  074B               	addwf	NVMRead@addr,w
  4917  04FC  118A  244B  118A   	fcall	_eeprom_read
  4918  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  4919  0500  1303               	bcf	3,6	;RP1=0, select bank0
  4920  0501  00C9               	movwf	??_NVMRead
  4921  0502  084C               	movf	NVMRead@i,w
  4922  0503  0747               	addwf	NVMRead@dest,w
  4923  0504  00CA               	movwf	??_NVMRead+1
  4924  0505  084A               	movf	??_NVMRead+1,w
  4925  0506  0084               	movwf	4
  4926  0507  0849               	movf	??_NVMRead,w
  4927  0508  1383               	bcf	3,7	;select IRP bank0
  4928  0509  0080               	movwf	0
  4929  050A  3001               	movlw	1
  4930  050B  00C9               	movwf	??_NVMRead
  4931  050C  0849               	movf	??_NVMRead,w
  4932  050D  07CC               	addwf	NVMRead@i,f
  4933  050E  2CF3               	goto	l2469
  4934  050F                     __end_of_NVMRead:	
  4935                           
  4936                           	psect	text32
  4937  044B                     __ptext32:	
  4938 ;; *************** function _eeprom_read *****************
  4939 ;; Defined at:
  4940 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\eeread.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  addr            1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  addr            1    0[BANK0 ] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  1    wreg      unsigned char 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4954 ;;      Params:         0       0       0       0
  4955 ;;      Locals:         0       1       0       0
  4956 ;;      Temps:          1       0       0       0
  4957 ;;      Totals:         1       1       0       0
  4958 ;;Total ram usage:        2 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    2
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_NVMRead
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           
  4969                           ;psect for function _eeprom_read
  4970  044B                     _eeprom_read:	
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4974                           ;eeprom_read@addr stored from wreg
  4975  044B  1283               	bcf	3,5	;RP0=0, select bank0
  4976  044C  1303               	bcf	3,6	;RP1=0, select bank0
  4977  044D  00C6               	movwf	eeprom_read@addr
  4978  044E  2C51               	goto	l550
  4979  044F                     u1301:	
  4980  044F  1283               	bcf	3,5	;RP0=0, select bank0
  4981  0450  1303               	bcf	3,6	;RP1=0, select bank0
  4982  0451                     l550:	
  4983  0451  0064               	clrwdt	;# 
  4984  0452  1683               	bsf	3,5	;RP0=1, select bank3
  4985  0453  1703               	bsf	3,6	;RP1=1, select bank3
  4986  0454  188C               	btfsc	12,1	;volsfr
  4987  0455  2C4F               	goto	u1301
  4988  0456  1283               	bcf	3,5	;RP0=0, select bank0
  4989  0457  1303               	bcf	3,6	;RP1=0, select bank0
  4990  0458  0846               	movf	eeprom_read@addr,w
  4991  0459  1283               	bcf	3,5	;RP0=0, select bank2
  4992  045A  1703               	bsf	3,6	;RP1=1, select bank2
  4993  045B  008D               	movwf	13	;volatile
  4994  045C  303F               	movlw	63
  4995  045D  00F5               	movwf	??_eeprom_read
  4996  045E  0875               	movf	??_eeprom_read,w
  4997  045F  1683               	bsf	3,5	;RP0=1, select bank3
  4998  0460  1703               	bsf	3,6	;RP1=1, select bank3
  4999  0461  058C               	andwf	12,f	;volsfr
  5000  0462  140C               	bsf	12,0	;volsfr
  5001  0463  1003               	clrc
  5002  0464  180C               	btfsc	12,0	;volsfr
  5003  0465  1403               	setc
  5004  0466  3000               	movlw	0
  5005  0467  1803               	skipnc
  5006  0468  3001               	movlw	1
  5007  0469  1283               	bcf	3,5	;RP0=0, select bank2
  5008  046A  1703               	bsf	3,6	;RP1=1, select bank2
  5009  046B  080C               	movf	12,w	;volatile
  5010  046C  0008               	return
  5011  046D                     __end_of_eeprom_read:	
  5012                           
  5013                           	psect	text33
  5014  0567                     __ptext33:	
  5015 ;; *************** function _DINTask *****************
  5016 ;; Defined at:
  5017 ;;		line 80 in file "DIN.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;		None               void
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, status,0
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5031 ;;      Params:         0       0       0       0
  5032 ;;      Locals:         0       0       0       0
  5033 ;;      Temps:          1       0       0       0
  5034 ;;      Totals:         1       0       0       0
  5035 ;;Total ram usage:        1 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    2
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_main
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function _DINTask
  5047  0567                     _DINTask:	
  5048                           
  5049                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  5050                           
  5051                           ;incstack = 0
  5052                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  5053  0567  01F9               	clrf	_u_in_sta_tmpTask
  5054                           
  5055                           ;DIN.c: 82: if(!PORTBbits.RB2)
  5056  0568  1283               	bcf	3,5	;RP0=0, select bank0
  5057  0569  1303               	bcf	3,6	;RP1=0, select bank0
  5058  056A  1D06               	btfss	6,2	;volatile
  5059                           
  5060                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  5061  056B  1479               	bsf	_u_in_sta_tmpTask,0
  5062                           
  5063                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  5064  056C  0879               	movf	_u_in_sta_tmpTask,w
  5065  056D  3901               	andlw	1
  5066  056E  00F5               	movwf	??_DINTask
  5067  056F  0878               	movf	_u_in_sta_currTask,w
  5068  0570  3901               	andlw	1
  5069  0571  0675               	xorwf	??_DINTask,w
  5070  0572  1903               	skipnz
  5071  0573  2D7C               	goto	l1949
  5072                           
  5073                           ;DIN.c: 87: {
  5074                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  5075  0574  1078               	bcf	_u_in_sta_currTask,0
  5076  0575  1C79               	btfss	_u_in_sta_tmpTask,0
  5077  0576  2D78               	goto	l1945
  5078  0577  1478               	bsf	_u_in_sta_currTask,0
  5079  0578                     l1945:	
  5080                           
  5081                           ;DIN.c: 89: tmrDbncSel=0;
  5082  0578  1283               	bcf	3,5	;RP0=0, select bank0
  5083  0579  1303               	bcf	3,6	;RP1=0, select bank0
  5084  057A  01B0               	clrf	_tmrDbncSel
  5085                           
  5086                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  5087  057B  1477               	bsf	_u_flg_din,0
  5088  057C                     l1949:	
  5089                           
  5090                           ;DIN.c: 91: }
  5091                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  5092  057C  1C78               	btfss	_u_in_sta_currTask,0
  5093  057D  2D80               	goto	l1953
  5094                           
  5095                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  5096  057E  14F7               	bsf	_u_flg_din,1
  5097  057F  0008               	return
  5098  0580                     l1953:	
  5099                           
  5100                           ;DIN.c: 96: else
  5101                           ;DIN.c: 97: {
  5102                           ;DIN.c: 98: tmrLongSel=0;
  5103  0580  01A6               	clrf	_tmrLongSel
  5104  0581  01A7               	clrf	_tmrLongSel+1
  5105                           
  5106                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  5107  0582  10F7               	bcf	_u_flg_din,1
  5108  0583  0008               	return
  5109  0584                     __end_of_DINTask:	
  5110                           
  5111                           	psect	text34
  5112  0625                     __ptext34:	
  5113 ;; *************** function _DINInit *****************
  5114 ;; Defined at:
  5115 ;;		line 25 in file "DIN.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  sta             1    wreg     unsigned char 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  sta             1    4[COMMON] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;		None               void
  5122 ;; Registers used:
  5123 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5129 ;;      Params:         0       0       0       0
  5130 ;;      Locals:         1       0       0       0
  5131 ;;      Temps:          0       0       0       0
  5132 ;;      Totals:         1       0       0       0
  5133 ;;Total ram usage:        1 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    2
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_main
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           
  5144                           ;psect for function _DINInit
  5145  0625                     _DINInit:	
  5146                           
  5147                           ;incstack = 0
  5148                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  5149                           ;DINInit@sta stored from wreg
  5150  0625  00F5               	movwf	DINInit@sta
  5151                           
  5152                           ;DIN.c: 26: switch(sta)
  5153  0626  2E30               	goto	l1913
  5154  0627                     l1909:	
  5155                           ;DIN.c: 27: {
  5156                           ;DIN.c: 31: case 1:
  5157                           
  5158                           
  5159                           ;DIN.c: 33: u_flg_din.val=0;
  5160  0627  01F7               	clrf	_u_flg_din
  5161                           
  5162                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  5163  0628  01F8               	clrf	_u_in_sta_currTask
  5164                           
  5165                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  5166  0629  01F9               	clrf	_u_in_sta_tmpTask
  5167                           
  5168                           ;DIN.c: 36: u_in_ev_up.val=0;
  5169  062A  1283               	bcf	3,5	;RP0=0, select bank0
  5170  062B  1303               	bcf	3,6	;RP1=0, select bank0
  5171  062C  01B6               	clrf	_u_in_ev_up
  5172                           
  5173                           ;DIN.c: 37: u_in_ev_down.val=0;
  5174  062D  01B4               	clrf	_u_in_ev_down
  5175                           
  5176                           ;DIN.c: 38: u_in_ev_long.val=0;
  5177  062E  01B5               	clrf	_u_in_ev_long
  5178                           
  5179                           ;DIN.c: 43: }
  5180                           
  5181                           ;DIN.c: 39: break;
  5182  062F  0008               	return
  5183  0630                     l1913:	
  5184  0630  0875               	movf	DINInit@sta,w
  5185                           
  5186                           ; Switch size 1, requested type "space"
  5187                           ; Number of cases is 1, Range of values is 1 to 1
  5188                           ; switch strategies available:
  5189                           ; Name         Instructions Cycles
  5190                           ; simple_byte            4     3 (average)
  5191                           ; direct_byte           12    10 (fixed)
  5192                           ; jumptable            263     9 (fixed)
  5193                           ;	Chosen strategy is simple_byte
  5194  0631  3A01               	xorlw	1	; case 1
  5195  0632  1903               	skipnz
  5196  0633  2E27               	goto	l1909
  5197  0634  2E35               	goto	l217
  5198  0635                     l217:	
  5199  0635  0008               	return
  5200  0636                     __end_of_DINInit:	
  5201                           
  5202                           	psect	text35
  5203  068E                     __ptext35:	
  5204 ;; *************** function _LEDInit *****************
  5205 ;; Defined at:
  5206 ;;		line 8 in file "LED.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  sta             1    wreg     unsigned char 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  sta             1    4[COMMON] unsigned char 
  5211 ;; Return value:  Size  Location     Type
  5212 ;;		None               void
  5213 ;; Registers used:
  5214 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5215 ;; Tracked objects:
  5216 ;;		On entry : 0/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5220 ;;      Params:         0       0       0       0
  5221 ;;      Locals:         1       0       0       0
  5222 ;;      Temps:          0       0       0       0
  5223 ;;      Totals:         1       0       0       0
  5224 ;;Total ram usage:        1 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    2
  5227 ;; This function calls:
  5228 ;;		Nothing
  5229 ;; This function is called by:
  5230 ;;		_main
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           
  5235                           ;psect for function _LEDInit
  5236  068E                     _LEDInit:	
  5237                           
  5238                           ;incstack = 0
  5239                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  5240                           ;LEDInit@sta stored from wreg
  5241  068E  00F5               	movwf	LEDInit@sta
  5242                           
  5243                           ;LED.c: 9: switch(sta)
  5244  068F  2E94               	goto	l1845
  5245  0690                     l163:	
  5246                           ;LED.c: 10: {
  5247                           ;LED.c: 17: case 2:
  5248                           
  5249                           
  5250                           ;LED.c: 19: PORTCbits.RC7=1;
  5251  0690  1283               	bcf	3,5	;RP0=0, select bank0
  5252  0691  1303               	bcf	3,6	;RP1=0, select bank0
  5253  0692  1787               	bsf	7,7	;volatile
  5254                           
  5255                           ;LED.c: 21: }
  5256                           
  5257                           ;LED.c: 20: break;
  5258  0693  0008               	return
  5259  0694                     l1845:	
  5260  0694  0875               	movf	LEDInit@sta,w
  5261                           
  5262                           ; Switch size 1, requested type "space"
  5263                           ; Number of cases is 1, Range of values is 2 to 2
  5264                           ; switch strategies available:
  5265                           ; Name         Instructions Cycles
  5266                           ; simple_byte            4     3 (average)
  5267                           ; direct_byte           12    10 (fixed)
  5268                           ; jumptable            263     9 (fixed)
  5269                           ;	Chosen strategy is simple_byte
  5270  0695  3A02               	xorlw	2	; case 2
  5271  0696  1903               	skipnz
  5272  0697  2E90               	goto	l163
  5273  0698  2E99               	goto	l165
  5274  0699                     l165:	
  5275  0699  0008               	return
  5276  069A                     __end_of_LEDInit:	
  5277                           
  5278                           	psect	text36
  5279  0036                     __ptext36:	
  5280 ;; *************** function _ADCTask *****************
  5281 ;; Defined at:
  5282 ;;		line 45 in file "ADC.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;		None               void
  5289 ;; Registers used:
  5290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5296 ;;      Params:         0       0       0       0
  5297 ;;      Locals:         0       0       0       0
  5298 ;;      Temps:          0       2       0       0
  5299 ;;      Totals:         0       2       0       0
  5300 ;;Total ram usage:        2 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    3
  5303 ;; This function calls:
  5304 ;;		___lwdiv
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _ADCTask
  5312  0036                     _ADCTask:	
  5313                           
  5314                           ;ADC.c: 46: static unsigned short sumBatt=0,sumTemp=0;
  5315                           ;ADC.c: 47: static unsigned char cntSum=0;
  5316                           ;ADC.c: 50: if(!(ADCON0bits.GO))
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _ADCTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5320  0036  1283               	bcf	3,5	;RP0=0, select bank0
  5321  0037  1303               	bcf	3,6	;RP1=0, select bank0
  5322  0038  1C9F               	btfss	31,1	;volatile
  5323  0039  288F               	goto	l2391
  5324  003A  2897               	goto	l2393
  5325  003B                     l2363:	
  5326                           ;ADC.c: 54: {
  5327                           ;ADC.c: 55: case ADC_CH_BATT:
  5328                           
  5329                           ;ADC.c: 51: {
  5330                           ;ADC.c: 53: switch(adc_ch)
  5331                           
  5332                           
  5333                           ;ADC.c: 57: if(cntSum==10)
  5334  003B  0876               	movf	ADCTask@cntSum,w
  5335  003C  3A0A               	xorlw	10
  5336  003D  1D03               	skipz
  5337  003E  2855               	goto	l2369
  5338                           
  5339                           ;ADC.c: 58: {
  5340                           ;ADC.c: 60: batt=sumBatt/10;
  5341  003F  300A               	movlw	10
  5342  0040  00C6               	movwf	?___lwdiv
  5343  0041  3000               	movlw	0
  5344  0042  00C7               	movwf	?___lwdiv+1
  5345  0043  0821               	movf	ADCTask@sumBatt+1,w
  5346  0044  01C9               	clrf	?___lwdiv+3
  5347  0045  07C9               	addwf	?___lwdiv+3,f
  5348  0046  0820               	movf	ADCTask@sumBatt,w
  5349  0047  01C8               	clrf	?___lwdiv+2
  5350  0048  07C8               	addwf	?___lwdiv+2,f
  5351  0049  118A  220C  118A   	fcall	___lwdiv
  5352  004C  1283               	bcf	3,5	;RP0=0, select bank0
  5353  004D  1303               	bcf	3,6	;RP1=0, select bank0
  5354  004E  0846               	movf	?___lwdiv,w
  5355  004F  00CD               	movwf	??_ADCTask
  5356  0050  084D               	movf	??_ADCTask,w
  5357  0051  00A9               	movwf	_batt
  5358                           
  5359                           ;ADC.c: 62: sumBatt=0;
  5360  0052  01A0               	clrf	ADCTask@sumBatt
  5361  0053  01A1               	clrf	ADCTask@sumBatt+1
  5362                           
  5363                           ;ADC.c: 63: }
  5364  0054  285E               	goto	l107
  5365  0055                     l2369:	
  5366                           
  5367                           ;ADC.c: 64: else
  5368                           ;ADC.c: 65: sumBatt+=ADRESH;
  5369  0055  081E               	movf	30,w	;volatile
  5370  0056  00CD               	movwf	??_ADCTask
  5371  0057  01CE               	clrf	??_ADCTask+1
  5372  0058  084D               	movf	??_ADCTask,w
  5373  0059  07A0               	addwf	ADCTask@sumBatt,f
  5374  005A  1803               	skipnc
  5375  005B  0AA1               	incf	ADCTask@sumBatt+1,f
  5376  005C  084E               	movf	??_ADCTask+1,w
  5377  005D  07A1               	addwf	ADCTask@sumBatt+1,f
  5378  005E                     l107:	
  5379                           
  5380                           ;ADC.c: 67: ADCON0=0b10101001;
  5381  005E  30A9               	movlw	169
  5382  005F  009F               	movwf	31	;volatile
  5383                           
  5384                           ;ADC.c: 68: adc_ch=ADC_CH_TEMP;
  5385  0060  01A8               	clrf	_adc_ch
  5386  0061  0AA8               	incf	_adc_ch,f
  5387                           
  5388                           ;ADC.c: 69: break;
  5389  0062  2897               	goto	l2393
  5390  0063                     l2373:	
  5391                           ;ADC.c: 70: case ADC_CH_TEMP:
  5392                           
  5393                           
  5394                           ;ADC.c: 72: if(cntSum==10)
  5395  0063  0876               	movf	ADCTask@cntSum,w
  5396  0064  3A0A               	xorlw	10
  5397  0065  1D03               	skipz
  5398  0066  287E               	goto	l2381
  5399                           
  5400                           ;ADC.c: 73: {
  5401                           ;ADC.c: 75: temp=sumTemp/10;
  5402  0067  300A               	movlw	10
  5403  0068  00C6               	movwf	?___lwdiv
  5404  0069  3000               	movlw	0
  5405  006A  00C7               	movwf	?___lwdiv+1
  5406  006B  0823               	movf	ADCTask@sumTemp+1,w
  5407  006C  01C9               	clrf	?___lwdiv+3
  5408  006D  07C9               	addwf	?___lwdiv+3,f
  5409  006E  0822               	movf	ADCTask@sumTemp,w
  5410  006F  01C8               	clrf	?___lwdiv+2
  5411  0070  07C8               	addwf	?___lwdiv+2,f
  5412  0071  118A  220C  118A   	fcall	___lwdiv
  5413  0074  1283               	bcf	3,5	;RP0=0, select bank0
  5414  0075  1303               	bcf	3,6	;RP1=0, select bank0
  5415  0076  0846               	movf	?___lwdiv,w
  5416  0077  00CD               	movwf	??_ADCTask
  5417  0078  084D               	movf	??_ADCTask,w
  5418  0079  00AF               	movwf	_temp
  5419                           
  5420                           ;ADC.c: 77: sumTemp=0;
  5421  007A  01A2               	clrf	ADCTask@sumTemp
  5422  007B  01A3               	clrf	ADCTask@sumTemp+1
  5423                           
  5424                           ;ADC.c: 79: cntSum=0;
  5425  007C  01F6               	clrf	ADCTask@cntSum
  5426                           
  5427                           ;ADC.c: 80: }
  5428  007D  288B               	goto	l2385
  5429  007E                     l2381:	
  5430                           
  5431                           ;ADC.c: 81: else
  5432                           ;ADC.c: 82: {
  5433                           ;ADC.c: 84: sumTemp+=ADRESH;
  5434  007E  081E               	movf	30,w	;volatile
  5435  007F  00CD               	movwf	??_ADCTask
  5436  0080  01CE               	clrf	??_ADCTask+1
  5437  0081  084D               	movf	??_ADCTask,w
  5438  0082  07A2               	addwf	ADCTask@sumTemp,f
  5439  0083  1803               	skipnc
  5440  0084  0AA3               	incf	ADCTask@sumTemp+1,f
  5441  0085  084E               	movf	??_ADCTask+1,w
  5442  0086  07A3               	addwf	ADCTask@sumTemp+1,f
  5443                           
  5444                           ;ADC.c: 86: cntSum++;
  5445  0087  3001               	movlw	1
  5446  0088  00CD               	movwf	??_ADCTask
  5447  0089  084D               	movf	??_ADCTask,w
  5448  008A  07F6               	addwf	ADCTask@cntSum,f
  5449  008B                     l2385:	
  5450                           
  5451                           ;ADC.c: 87: }
  5452                           ;ADC.c: 89: ADCON0=0b10000001;
  5453  008B  3081               	movlw	129
  5454  008C  009F               	movwf	31	;volatile
  5455                           
  5456                           ;ADC.c: 90: adc_ch=ADC_CH_BATT;
  5457  008D  01A8               	clrf	_adc_ch
  5458                           
  5459                           ;ADC.c: 92: }
  5460                           
  5461                           ;ADC.c: 91: break;
  5462  008E  2897               	goto	l2393
  5463  008F                     l2391:	
  5464  008F  0828               	movf	_adc_ch,w
  5465                           
  5466                           ; Switch size 1, requested type "space"
  5467                           ; Number of cases is 2, Range of values is 0 to 1
  5468                           ; switch strategies available:
  5469                           ; Name         Instructions Cycles
  5470                           ; simple_byte            7     4 (average)
  5471                           ; direct_byte           11     7 (fixed)
  5472                           ; jumptable            260     6 (fixed)
  5473                           ;	Chosen strategy is simple_byte
  5474  0090  3A00               	xorlw	0	; case 0
  5475  0091  1903               	skipnz
  5476  0092  283B               	goto	l2363
  5477  0093  3A01               	xorlw	1	; case 1
  5478  0094  1903               	skipnz
  5479  0095  2863               	goto	l2373
  5480  0096  2897               	goto	l2393
  5481  0097                     l2393:	
  5482                           
  5483                           ;ADC.c: 93: }
  5484                           ;ADC.c: 95: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5485  0097  3006               	movlw	6
  5486  0098  00CD               	movwf	??_ADCTask
  5487  0099                     u1697:	
  5488  0099  0BCD               	decfsz	??_ADCTask,f
  5489  009A  2899               	goto	u1697
  5490  009B  0000               	nop
  5491                           
  5492                           ;ADC.c: 97: ADCON0bits.GO=1;
  5493  009C  1283               	bcf	3,5	;RP0=0, select bank0
  5494  009D  1303               	bcf	3,6	;RP1=0, select bank0
  5495  009E  149F               	bsf	31,1	;volatile
  5496  009F  0008               	return
  5497  00A0                     __end_of_ADCTask:	
  5498                           
  5499                           	psect	text37
  5500  020C                     __ptext37:	
  5501 ;; *************** function ___lwdiv *****************
  5502 ;; Defined at:
  5503 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  divisor         2    0[BANK0 ] unsigned int 
  5506 ;;  dividend        2    2[BANK0 ] unsigned int 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  quotient        2    5[BANK0 ] unsigned int 
  5509 ;;  counter         1    4[BANK0 ] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  2    0[BANK0 ] unsigned int 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5519 ;;      Params:         0       4       0       0
  5520 ;;      Locals:         0       3       0       0
  5521 ;;      Temps:          1       0       0       0
  5522 ;;      Totals:         1       7       0       0
  5523 ;;Total ram usage:        8 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    2
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		_ADCTask
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function ___lwdiv
  5535  020C                     ___lwdiv:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5539  020C  1283               	bcf	3,5	;RP0=0, select bank0
  5540  020D  1303               	bcf	3,6	;RP1=0, select bank0
  5541  020E  01CB               	clrf	___lwdiv@quotient
  5542  020F  01CC               	clrf	___lwdiv@quotient+1
  5543  0210  0847               	movf	___lwdiv@divisor+1,w
  5544  0211  0446               	iorwf	___lwdiv@divisor,w
  5545  0212  1903               	skipnz
  5546  0213  2A45               	goto	l2803
  5547  0214  01CA               	clrf	___lwdiv@counter
  5548  0215  0ACA               	incf	___lwdiv@counter,f
  5549  0216                     l2791:	
  5550  0216  1BC7               	btfsc	___lwdiv@divisor+1,7
  5551  0217  2A24               	goto	l2793
  5552  0218  3001               	movlw	1
  5553  0219                     u1625:	
  5554  0219  1003               	clrc
  5555  021A  0DC6               	rlf	___lwdiv@divisor,f
  5556  021B  0DC7               	rlf	___lwdiv@divisor+1,f
  5557  021C  3EFF               	addlw	-1
  5558  021D  1D03               	skipz
  5559  021E  2A19               	goto	u1625
  5560  021F  3001               	movlw	1
  5561  0220  00F5               	movwf	??___lwdiv
  5562  0221  0875               	movf	??___lwdiv,w
  5563  0222  07CA               	addwf	___lwdiv@counter,f
  5564  0223  2A16               	goto	l2791
  5565  0224                     l2793:	
  5566  0224  3001               	movlw	1
  5567  0225                     u1645:	
  5568  0225  1003               	clrc
  5569  0226  0DCB               	rlf	___lwdiv@quotient,f
  5570  0227  0DCC               	rlf	___lwdiv@quotient+1,f
  5571  0228  3EFF               	addlw	-1
  5572  0229  1D03               	skipz
  5573  022A  2A25               	goto	u1645
  5574  022B  0847               	movf	___lwdiv@divisor+1,w
  5575  022C  0249               	subwf	___lwdiv@dividend+1,w
  5576  022D  1D03               	skipz
  5577  022E  2A31               	goto	u1655
  5578  022F  0846               	movf	___lwdiv@divisor,w
  5579  0230  0248               	subwf	___lwdiv@dividend,w
  5580  0231                     u1655:	
  5581  0231  1C03               	skipc
  5582  0232  2A3A               	goto	l2799
  5583  0233  0846               	movf	___lwdiv@divisor,w
  5584  0234  02C8               	subwf	___lwdiv@dividend,f
  5585  0235  0847               	movf	___lwdiv@divisor+1,w
  5586  0236  1C03               	skipc
  5587  0237  03C9               	decf	___lwdiv@dividend+1,f
  5588  0238  02C9               	subwf	___lwdiv@dividend+1,f
  5589  0239  144B               	bsf	___lwdiv@quotient,0
  5590  023A                     l2799:	
  5591  023A  3001               	movlw	1
  5592  023B                     u1665:	
  5593  023B  1003               	clrc
  5594  023C  0CC7               	rrf	___lwdiv@divisor+1,f
  5595  023D  0CC6               	rrf	___lwdiv@divisor,f
  5596  023E  3EFF               	addlw	-1
  5597  023F  1D03               	skipz
  5598  0240  2A3B               	goto	u1665
  5599  0241  3001               	movlw	1
  5600  0242  02CA               	subwf	___lwdiv@counter,f
  5601  0243  1D03               	btfss	3,2
  5602  0244  2A24               	goto	l2793
  5603  0245                     l2803:	
  5604  0245  084C               	movf	___lwdiv@quotient+1,w
  5605  0246  01C7               	clrf	?___lwdiv+1
  5606  0247  07C7               	addwf	?___lwdiv+1,f
  5607  0248  084B               	movf	___lwdiv@quotient,w
  5608  0249  01C6               	clrf	?___lwdiv
  5609  024A  07C6               	addwf	?___lwdiv,f
  5610  024B  0008               	return
  5611  024C                     __end_of___lwdiv:	
  5612                           
  5613                           	psect	text38
  5614  0427                     __ptext38:	
  5615 ;; *************** function _ADCInit *****************
  5616 ;; Defined at:
  5617 ;;		line 21 in file "ADC.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  state           1    wreg     unsigned char 
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;  state           1    0[BANK0 ] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;		None               void
  5624 ;; Registers used:
  5625 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5631 ;;      Params:         0       0       0       0
  5632 ;;      Locals:         0       1       0       0
  5633 ;;      Temps:          1       0       0       0
  5634 ;;      Totals:         1       1       0       0
  5635 ;;Total ram usage:        2 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    2
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_main
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _ADCInit
  5647  0427                     _ADCInit:	
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  5651                           ;ADCInit@state stored from wreg
  5652  0427  1283               	bcf	3,5	;RP0=0, select bank0
  5653  0428  1303               	bcf	3,6	;RP1=0, select bank0
  5654  0429  00C6               	movwf	ADCInit@state
  5655                           
  5656                           ;ADC.c: 22: switch(state)
  5657  042A  2C3F               	goto	l2357
  5658  042B                     l2345:	
  5659                           ;ADC.c: 23: {
  5660                           ;ADC.c: 24: case 0:
  5661                           
  5662                           
  5663                           ;ADC.c: 26: ADCON0=0b10000001; ADCON1=0b00000000;
  5664  042B  3081               	movlw	129
  5665  042C  009F               	movwf	31	;volatile
  5666  042D  1683               	bsf	3,5	;RP0=1, select bank1
  5667  042E  1303               	bcf	3,6	;RP1=0, select bank1
  5668  042F  019F               	clrf	31	;volatile
  5669                           
  5670                           ;ADC.c: 27: break;
  5671  0430  0008               	return
  5672  0431                     l2349:	
  5673                           ;ADC.c: 28: case 1:
  5674                           
  5675                           
  5676                           ;ADC.c: 30: adc_ch=ADC_CH_BATT;
  5677  0431  1283               	bcf	3,5	;RP0=0, select bank0
  5678  0432  01A8               	clrf	_adc_ch
  5679                           
  5680                           ;ADC.c: 31: batt=0;
  5681  0433  01A9               	clrf	_batt
  5682                           
  5683                           ;ADC.c: 32: temp=0;
  5684  0434  01AF               	clrf	_temp
  5685                           
  5686                           ;ADC.c: 33: break;
  5687  0435  0008               	return
  5688  0436                     l2351:	
  5689                           ;ADC.c: 34: case 2:
  5690                           
  5691                           
  5692                           ;ADC.c: 37: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5693  0436  3006               	movlw	6
  5694  0437  00F5               	movwf	??_ADCInit
  5695  0438                     u1707:	
  5696  0438  0BF5               	decfsz	??_ADCInit,f
  5697  0439  2C38               	goto	u1707
  5698  043A  0000               	nop
  5699                           
  5700                           ;ADC.c: 39: ADCON0bits.GO=1;
  5701  043B  1283               	bcf	3,5	;RP0=0, select bank0
  5702  043C  1303               	bcf	3,6	;RP1=0, select bank0
  5703  043D  149F               	bsf	31,1	;volatile
  5704                           
  5705                           ;ADC.c: 41: }
  5706                           
  5707                           ;ADC.c: 40: break;
  5708  043E  0008               	return
  5709  043F                     l2357:	
  5710  043F  0846               	movf	ADCInit@state,w
  5711                           
  5712                           ; Switch size 1, requested type "space"
  5713                           ; Number of cases is 3, Range of values is 0 to 2
  5714                           ; switch strategies available:
  5715                           ; Name         Instructions Cycles
  5716                           ; simple_byte           10     6 (average)
  5717                           ; direct_byte           13     7 (fixed)
  5718                           ; jumptable            260     6 (fixed)
  5719                           ;	Chosen strategy is simple_byte
  5720  0440  3A00               	xorlw	0	; case 0
  5721  0441  1903               	skipnz
  5722  0442  2C2B               	goto	l2345
  5723  0443  3A01               	xorlw	1	; case 1
  5724  0444  1903               	skipnz
  5725  0445  2C31               	goto	l2349
  5726  0446  3A03               	xorlw	3	; case 2
  5727  0447  1903               	skipnz
  5728  0448  2C36               	goto	l2351
  5729  0449  2C4A               	goto	l94
  5730  044A                     l94:	
  5731  044A  0008               	return
  5732  044B                     __end_of_ADCInit:	
  5733                           
  5734                           	psect	text39
  5735  03BA                     __ptext39:	
  5736 ;; *************** function _SPIInit *****************
  5737 ;; Defined at:
  5738 ;;		line 9 in file "SPI.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  state           1    wreg     unsigned char 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  state           1    0[BANK0 ] unsigned char 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;		None               void
  5745 ;; Registers used:
  5746 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5752 ;;      Params:         0       0       0       0
  5753 ;;      Locals:         0       1       0       0
  5754 ;;      Temps:          1       0       0       0
  5755 ;;      Totals:         1       1       0       0
  5756 ;;Total ram usage:        2 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:    2
  5759 ;; This function calls:
  5760 ;;		Nothing
  5761 ;; This function is called by:
  5762 ;;		_main
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           
  5767                           ;psect for function _SPIInit
  5768  03BA                     _SPIInit:	
  5769                           
  5770                           ;incstack = 0
  5771                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  5772                           ;SPIInit@state stored from wreg
  5773  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  5774  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  5775  03BC  00C6               	movwf	SPIInit@state
  5776                           
  5777                           ;SPI.c: 10: switch(state)
  5778  03BD  2BD3               	goto	l2323
  5779  03BE                     l48:	
  5780                           ;SPI.c: 11: {
  5781                           ;SPI.c: 12: case 0:
  5782                           
  5783                           
  5784                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N=0b00000000; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  5785  03BE  1683               	bsf	3,5	;RP0=1, select bank1
  5786  03BF  1303               	bcf	3,6	;RP1=0, select bank1
  5787  03C0  1607               	bsf	7,4	;volatile
  5788  03C1  30D7               	movlw	215
  5789  03C2  00F5               	movwf	??_SPIInit
  5790  03C3  0875               	movf	??_SPIInit,w
  5791  03C4  0587               	andwf	7,f	;volatile
  5792  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  5793  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  5794  03C7  1294               	bcf	20,5	;volatile
  5795  03C8  0193               	clrf	19	;volatile
  5796  03C9  0194               	clrf	20	;volatile
  5797  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  5798  03CB  1303               	bcf	3,6	;RP1=0, select bank1
  5799  03CC  0191               	clrf	17	;volatile
  5800  03CD  3040               	movlw	64
  5801  03CE  0094               	movwf	20	;volatile
  5802  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  5803  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  5804  03D1  1694               	bsf	20,5	;volatile
  5805                           
  5806                           ;SPI.c: 22: }
  5807                           
  5808                           ;SPI.c: 21: break;
  5809                           
  5810                           ;SPI.c: 19: case 2:
  5811                           
  5812                           ;SPI.c: 18: break;
  5813                           
  5814                           ;SPI.c: 16: case 1:
  5815                           
  5816                           ;SPI.c: 15: break;
  5817  03D2  0008               	return
  5818  03D3                     l2323:	
  5819  03D3  0846               	movf	SPIInit@state,w
  5820                           
  5821                           ; Switch size 1, requested type "space"
  5822                           ; Number of cases is 3, Range of values is 0 to 2
  5823                           ; switch strategies available:
  5824                           ; Name         Instructions Cycles
  5825                           ; simple_byte           10     6 (average)
  5826                           ; direct_byte           13     7 (fixed)
  5827                           ; jumptable            260     6 (fixed)
  5828                           ;	Chosen strategy is simple_byte
  5829  03D4  3A00               	xorlw	0	; case 0
  5830  03D5  1903               	skipnz
  5831  03D6  2BBE               	goto	l48
  5832  03D7  3A01               	xorlw	1	; case 1
  5833  03D8  1903               	skipnz
  5834  03D9  2BDE               	goto	l52
  5835  03DA  3A03               	xorlw	3	; case 2
  5836  03DB  1903               	skipnz
  5837  03DC  2BDE               	goto	l52
  5838  03DD  2BDE               	goto	l52
  5839  03DE                     l52:	
  5840  03DE  0008               	return
  5841  03DF                     __end_of_SPIInit:	
  5842                           
  5843                           	psect	text40
  5844  050F                     __ptext40:	
  5845 ;; *************** function _OUTInit *****************
  5846 ;; Defined at:
  5847 ;;		line 7 in file "OUT.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  sta             1    wreg     unsigned char 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  sta             1    0[BANK0 ] unsigned char 
  5852 ;; Return value:  Size  Location     Type
  5853 ;;		None               void
  5854 ;; Registers used:
  5855 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5861 ;;      Params:         0       0       0       0
  5862 ;;      Locals:         0       1       0       0
  5863 ;;      Temps:          1       0       0       0
  5864 ;;      Totals:         1       1       0       0
  5865 ;;Total ram usage:        2 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    2
  5868 ;; This function calls:
  5869 ;;		Nothing
  5870 ;; This function is called by:
  5871 ;;		_main
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           
  5876                           ;psect for function _OUTInit
  5877  050F                     _OUTInit:	
  5878                           
  5879                           ;incstack = 0
  5880                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  5881                           ;OUTInit@sta stored from wreg
  5882  050F  1283               	bcf	3,5	;RP0=0, select bank0
  5883  0510  1303               	bcf	3,6	;RP1=0, select bank0
  5884  0511  00C6               	movwf	OUTInit@sta
  5885                           
  5886                           ;OUT.c: 8: switch(sta)
  5887  0512  2D27               	goto	l2303
  5888  0513                     l2297:	
  5889                           ;OUT.c: 9: {
  5890                           ;OUT.c: 10: case 0:
  5891                           
  5892                           
  5893                           ;OUT.c: 12: TRISA&=0b11011111; TRISC&=0b01010111; ANSEL&=0b11011111; PORTC|=0b10000000;
  5894  0513  30DF               	movlw	223
  5895  0514  00F5               	movwf	??_OUTInit
  5896  0515  0875               	movf	??_OUTInit,w
  5897  0516  1683               	bsf	3,5	;RP0=1, select bank1
  5898  0517  1303               	bcf	3,6	;RP1=0, select bank1
  5899  0518  0585               	andwf	5,f	;volatile
  5900  0519  3057               	movlw	87
  5901  051A  00F5               	movwf	??_OUTInit
  5902  051B  0875               	movf	??_OUTInit,w
  5903  051C  0587               	andwf	7,f	;volatile
  5904  051D  30DF               	movlw	223
  5905  051E  00F5               	movwf	??_OUTInit
  5906  051F  0875               	movf	??_OUTInit,w
  5907  0520  1683               	bsf	3,5	;RP0=1, select bank3
  5908  0521  1703               	bsf	3,6	;RP1=1, select bank3
  5909  0522  0588               	andwf	8,f	;volatile
  5910  0523  1283               	bcf	3,5	;RP0=0, select bank0
  5911  0524  1303               	bcf	3,6	;RP1=0, select bank0
  5912  0525  1787               	bsf	7,7	;volatile
  5913                           
  5914                           ;OUT.c: 20: }
  5915                           
  5916                           ;OUT.c: 13: break;
  5917  0526  0008               	return
  5918  0527                     l2303:	
  5919  0527  0846               	movf	OUTInit@sta,w
  5920                           
  5921                           ; Switch size 1, requested type "space"
  5922                           ; Number of cases is 1, Range of values is 0 to 0
  5923                           ; switch strategies available:
  5924                           ; Name         Instructions Cycles
  5925                           ; simple_byte            4     3 (average)
  5926                           ; direct_byte            9     7 (fixed)
  5927                           ; jumptable            260     6 (fixed)
  5928                           ;	Chosen strategy is simple_byte
  5929  0528  3A00               	xorlw	0	; case 0
  5930  0529  1903               	skipnz
  5931  052A  2D13               	goto	l2297
  5932  052B  2D2C               	goto	l28
  5933  052C                     l28:	
  5934  052C  0008               	return
  5935  052D                     __end_of_OUTInit:	
  5936                           
  5937                           	psect	text41
  5938  0584                     __ptext41:	
  5939 ;; *************** function _INInit *****************
  5940 ;; Defined at:
  5941 ;;		line 7 in file "IN.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  sta             1    wreg     unsigned char 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  sta             1    0[BANK0 ] unsigned char 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5955 ;;      Params:         0       0       0       0
  5956 ;;      Locals:         0       1       0       0
  5957 ;;      Temps:          1       0       0       0
  5958 ;;      Totals:         1       1       0       0
  5959 ;;Total ram usage:        2 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    2
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function _INInit
  5971  0584                     _INInit:	
  5972                           
  5973                           ;incstack = 0
  5974                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  5975                           ;INInit@sta stored from wreg
  5976  0584  1283               	bcf	3,5	;RP0=0, select bank0
  5977  0585  1303               	bcf	3,6	;RP1=0, select bank0
  5978  0586  00C6               	movwf	INInit@sta
  5979                           
  5980                           ;IN.c: 8: switch(sta)
  5981  0587  2D9A               	goto	l2293
  5982  0588                     l2285:	
  5983                           ;IN.c: 9: {
  5984                           ;IN.c: 10: case 0:
  5985                           
  5986                           
  5987                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELH&=0b11111000; WPUB=0b00000111;
  5988  0588  3007               	movlw	7
  5989  0589  00F5               	movwf	??_INInit
  5990  058A  0875               	movf	??_INInit,w
  5991  058B  1683               	bsf	3,5	;RP0=1, select bank1
  5992  058C  1303               	bcf	3,6	;RP1=0, select bank1
  5993  058D  0486               	iorwf	6,f	;volatile
  5994  058E  1607               	bsf	7,4	;volatile
  5995  058F  30F8               	movlw	248
  5996  0590  00F5               	movwf	??_INInit
  5997  0591  0875               	movf	??_INInit,w
  5998  0592  1683               	bsf	3,5	;RP0=1, select bank3
  5999  0593  1703               	bsf	3,6	;RP1=1, select bank3
  6000  0594  0589               	andwf	9,f	;volatile
  6001  0595  3007               	movlw	7
  6002  0596  1683               	bsf	3,5	;RP0=1, select bank1
  6003  0597  1303               	bcf	3,6	;RP1=0, select bank1
  6004  0598  0095               	movwf	21	;volatile
  6005                           
  6006                           ;IN.c: 20: }
  6007                           
  6008                           ;IN.c: 13: break;
  6009  0599  0008               	return
  6010  059A                     l2293:	
  6011  059A  1283               	bcf	3,5	;RP0=0, select bank0
  6012  059B  0846               	movf	INInit@sta,w
  6013                           
  6014                           ; Switch size 1, requested type "space"
  6015                           ; Number of cases is 1, Range of values is 0 to 0
  6016                           ; switch strategies available:
  6017                           ; Name         Instructions Cycles
  6018                           ; simple_byte            4     3 (average)
  6019                           ; direct_byte            9     7 (fixed)
  6020                           ; jumptable            260     6 (fixed)
  6021                           ;	Chosen strategy is simple_byte
  6022  059C  3A00               	xorlw	0	; case 0
  6023  059D  1903               	skipnz
  6024  059E  2D88               	goto	l2285
  6025  059F  2DA0               	goto	l14
  6026  05A0                     l14:	
  6027  05A0  0008               	return
  6028  05A1                     __end_of_INInit:	
  6029                           
  6030                           	psect	text42
  6031  0600                     __ptext42:	
  6032 ;; *************** function _INTIsr *****************
  6033 ;; Defined at:
  6034 ;;		line 27 in file "Sensore.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;		None               void
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, pclath, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6048 ;;      Params:         0       0       0       0
  6049 ;;      Locals:         0       0       0       0
  6050 ;;      Temps:          4       0       0       0
  6051 ;;      Totals:         4       0       0       0
  6052 ;;Total ram usage:        4 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    1
  6055 ;; This function calls:
  6056 ;;		_SYSInt
  6057 ;; This function is called by:
  6058 ;;		Interrupt level 1
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           
  6063                           ;psect for function _INTIsr
  6064  0600                     _INTIsr:	
  6065                           
  6066                           ;Sensore.c: 29: if(INTCONbits.T0IF==1)
  6067  0600  1D0B               	btfss	11,2	;volatile
  6068  0601  2E06               	goto	i1l529
  6069                           
  6070                           ;Sensore.c: 30: {
  6071                           ;Sensore.c: 32: INTCONbits.T0IF=0;
  6072  0602  110B               	bcf	11,2	;volatile
  6073                           
  6074                           ;Sensore.c: 35: SYSInt();
  6075  0603  118A  26BB  118A   	fcall	_SYSInt
  6076  0606                     i1l529:	
  6077  0606  0874               	movf	??_INTIsr+3,w
  6078  0607  1283               	bcf	3,5	;RP0=0, select bank0
  6079  0608  1303               	bcf	3,6	;RP1=0, select bank0
  6080  0609  00FF               	movwf	127
  6081  060A  0873               	movf	??_INTIsr+2,w
  6082  060B  008A               	movwf	10
  6083  060C  0872               	movf	??_INTIsr+1,w
  6084  060D  0084               	movwf	4
  6085  060E  0E71               	swapf	??_INTIsr^(0+-128),w
  6086  060F  0083               	movwf	3
  6087  0610  0EFE               	swapf	126,f
  6088  0611  0E7E               	swapf	126,w
  6089  0612  0009               	retfie
  6090  0613                     __end_of_INTIsr:	
  6091                           
  6092                           	psect	intentry
  6093  0004                     __pintentry:	
  6094                           ;incstack = 0
  6095 ;; hardware stack exceeded
  6096                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  6097                           
  6098  0004                     interrupt_function:	
  6099  007E                     saved_w	set	btemp
  6100  0004  00FE               	movwf	btemp
  6101  0005  0E03               	swapf	3,w
  6102  0006  00F1               	movwf	??_INTIsr
  6103  0007  0804               	movf	4,w
  6104  0008  00F2               	movwf	??_INTIsr+1
  6105  0009  080A               	movf	10,w
  6106  000A  00F3               	movwf	??_INTIsr+2
  6107  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6108  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6109  000D  087F               	movf	btemp+1,w
  6110  000E  00F4               	movwf	??_INTIsr+3
  6111  000F  118A  2E00         	ljmp	_INTIsr
  6112                           
  6113                           	psect	text43
  6114  06BB                     __ptext43:	
  6115 ;; *************** function _SYSInt *****************
  6116 ;; Defined at:
  6117 ;;		line 35 in file "SYS.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;		None               void
  6124 ;; Registers used:
  6125 ;;		wreg
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6131 ;;      Params:         0       0       0       0
  6132 ;;      Locals:         0       0       0       0
  6133 ;;      Temps:          0       0       0       0
  6134 ;;      Totals:         0       0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_INTIsr
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _SYSInt
  6146  06BB                     _SYSInt:	
  6147                           
  6148                           ;SYS.c: 37: u_SYS_STA.TICK=1;
  6149                           
  6150                           ;incstack = 0
  6151 ;; hardware stack exceeded
  6152                           ; Regs used in _SYSInt: [wreg]
  6153  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  6154  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  6155  06BD  1433               	bsf	_u_SYS_STA,0
  6156                           
  6157                           ;SYS.c: 40: TMR0=255-156;
  6158  06BE  3063               	movlw	99
  6159  06BF  0081               	movwf	1	;volatile
  6160  06C0  0008               	return
  6161  06C1                     __end_of_SYSInt:	
  6162  007E                     btemp	set	126	;btemp
  6163  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      5       9
    BANK0            80     21      67
    BANK1            80      0      47
    BANK2            69      0       0

Pointer List with Targets:

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 5
		 -> pktTx(BANK0[5]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK0[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK0[5]), 

    CC1Write@src	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK0[5]), cc1PaTable(BANK0[8]), cc1InitVal(BANK1[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK0[5]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(BANK0[1]), 
		 -> cc1PaTable(BANK0[8]), cc1InitVal(BANK1[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_INInit
    _main->_OUTInit
    _main->_SPIInit
    _main->_ADCInit
    _main->_LEDInit
    _main->_DINInit
    _main->_DINTask
    _main->_SYSInit
    _SYSTask->_DINTick
    _PGMSelLong->_LEDNormalFlash
    _RTXReadPkt->_LEDNormalFlash
    _RTXSendData->_LEDFastFlash
    _CC1Read->_SPIRead
    _CC1Read->_SPIWrite
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _NVMWrite->_eeprom_write
    _NVMRead->_eeprom_read
    _ADCTask->___lwdiv

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SYSTask
    _RTXTick->_RTXSendData
    _PGMSelLong->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _CC1Init->_CC1Write
    _RTXTask->_RTXReadPkt
    _RTXReadPkt->_RTXSendData
    _RTXReadPkt->_RTXSendRPgm
    _RTXSendRPgm->_RTXSndPkt
    _RTXRcvPkt->_CC1Read
    _LEDNormalFlash->_DLYDelay_ms
    _RTXInit->_RTXSendData
    _RTXSendData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _CC1Read->_SPIRead
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _NVMWrite->_eeprom_write
    _PGMReadNvm->_NVMRead
    _NVMRead->_eeprom_read
    _ADCTask->___lwdiv

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9783
                                             19 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _ADCTask
                            _CC1Init
                            _LEDInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              2     2      0    2596
                                             17 BANK0      2     2      0
                            _CC1Init
                            _DINTick
                           _SLPSleep
                         _PGMSelLong
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    1250
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0     390
                                             10 BANK0      1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             6     6      0     368
                                              6 BANK0      6     6      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CC1Init                                              3     3      0     489
                                              8 BANK0      3     3      0
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    3893
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    3893
                                             17 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                        _RTXSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                             16 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              9 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              4 COMMON     1     1      0
                                              6 BANK0      2     2      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0    1479
                                             17 BANK0      1     1      0
                          _CC1Strobe
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          1     1      0    1250
                                             16 BANK0      1     1      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            7     6      1    1114
                                              9 BANK0      7     6      1
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2     390
                                              4 BANK0      5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     130
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             5     3      2     260
                                              3 BANK0      5     3      2
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              3 BANK0      3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             4     3      1     130
                                              4 COMMON     1     0      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0     136
                                              4 COMMON     1     1      0
                                              6 BANK0      2     2      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2      68
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     508
                                             11 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     254
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     254
                                             10 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     254
                                              8 BANK0      2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                             6     4      2     254
                                              2 BANK0      6     4      2
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (5) _eeprom_write                                         3     2      1      62
                                              4 COMMON     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     223
                                              7 BANK0      2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              6     4      2     223
                                              1 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (4) _eeprom_read                                          2     2      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCTask                                              2     2      0     241
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     241
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      31
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTIsr                                               4     4      0       0
                                              0 COMMON     4     4      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (8) _SYSInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _ADCTask
     ___lwdiv
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _LEDInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
         _eeprom_read
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
             _eeprom_write
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXSendData
       _LEDFastFlash
         _DLYDelay_ms
       _RTXSndPkt
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _CC1Read
           _SPIRead
           _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
           _eeprom_write
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
   _SYSInit
   _SYSTask
     _CC1Init
       _CC1Strobe
         _SPIWrite
       _CC1Write
         _SPIWrite
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
           _eeprom_write
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               45      0       0       9        0.0%
BITBANK2            45      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      2F       7       58.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     15      43       3       83.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      5       9       1       69.2%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      85      10        0.0%
ABS                  0      0      7B       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       A       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Oct 04 14:22:55 2014

      __size_of_CC1Strobe 0013                __CFG_CP$ON 0000           SLPSleep@WPUBTmp 004F  
                       pc 0002                        l14 05A0                        l28 052C  
                      l52 03DE             ?_LEDFastFlash 0071                        l48 03BE  
                      l57 04DA                        l66 05B2                        l94 044A  
                      _RD 0C60               __CFG_CPD$ON 0000                        _WR 0C61  
                      fsr 0004              ?_DLYDelay_ms 0046                       l107 005E  
                     l220 037E                       l117 0471                       l222 037D  
                     l143 0311                       l217 0635                       l163 0690  
                     l165 0699                       l360 03B9                       l532 00A7  
                     l461 033E                       l533 00EE                       l550 0451  
                     l374 01B5                       l534 00EF                       l287 05EC  
                     l572 0342                       _GIE 005F           __end_of_CC1Init 0312  
         __end_of_CC1Read 054A                       fsr0 0004           __end_of_ADCInit 044B  
                     indf 0000           __end_of_ADCTask 00A0                _RTXReadPkt 0158  
         __end_of_DINInit 0636           __end_of_DINTask 0584           __end_of_DINTick 0393  
            __CFG_LVP$OFF 0000           __end_of_LEDInit 069A                      l2303 0527  
                    l2323 03D3                      l2403 02E7                      l2341 05A5  
                    l2333 04D3                      l2351 0436                      l2407 0307  
                    l2345 042B                      l2329 04E0                      l2363 003B  
                    l2339 05B8                      l2451 03E3                      l2285 0588  
                    l2293 059A                      l2349 0431                      l2357 043F  
                    l2381 007E                      l2373 0063                      l2541 05DC  
                    l2461 0407                      l2391 008F                      l2607 02AD  
                    l2297 0513                      l2385 008B                      l2369 0055  
                    l2393 0097                      l1913 0630                      l2481 0492  
                    l2713 0333                      l2617 04BE                      l2803 0245  
                    l2555 068B                      l2539 05D9                      l2547 05E2  
                    l1845 0694                      l1909 0627                      l2469 04F3  
                    l2581 0397                      l2717 0336                      l2741 026B  
                    l2733 025F                      l2583 039D                      l2727 0257  
                    l1953 0580                      l1945 0578                      l2569 0623  
                    l2681 01CE                      l2673 0158                      l2587 03AC  
                    l2659 0197                      l1949 057C                      l2791 0216  
                    l2695 0316                      l2793 0224                      l2799 023A  
                    u1301 044F                      _IOCB 0096                      u1265 0477  
                    u1625 0219                      u1707 0438                      u1645 0225  
                    u1655 0231                      _PIE1 008C                      _PIE2 008D  
                    u1665 023B                      u1687 0480                      u1697 0099  
                    _PIR1 000C                      _PIR2 000D                      _TMR0 0001  
                    _WREN 0C62                      _WPUB 0095            ??_eeprom_write 0046  
         __end_of_PGMInit 05ED          __end_of_CC1Sleep 06A4                      _batt 0029  
                    _main 00A0          __end_of_CC1Write 0567           __end_of_NVMRead 050F  
                    _temp 002F           __end_of_SPIInit 03DF           __end_of_SPIRead 04EF  
                    btemp 007E           __end_of_OUTInit 052D                      start 0011  
         __end_of_RTXInit 03BA           __end_of_RTXTask 06BB           __end_of_RTXTick 04CF  
         __end_of_SYSInit 033F           __end_of_SYSTask 0280               ?_PGMReadNvm 0071  
          ??_LEDFastFlash 0075               ?_PGMSelLong 0071               _RTXSendData 0280  
             _RTXSendRPgm 05BD              SPIInit@state 0046                     ?_main 0071  
                   _EEADR 010D                     _CARRY 0018                     _ANSEL 0188  
                   _T1CON 0010           __end_of___lwdiv 024C                     i1l529 0606  
                   _TMR1H 000F                     _TMR1L 000E                     _PORTC 0007  
                   _TRISA 0085                     _TRISB 0086                     _TRISC 0087  
           __CFG_PWRTE$ON 0000               _sys_pgm_sta 002E         __end_of_CC1Strobe 0600  
                   _pktRx 003C                     _pktTx 0041                     main@i 005A  
        __end_of_SLPSleep 0158          __end_of_NVMWrite 04AF                     pclath 000A  
        __end_of_SPIWrite 05BD         LEDNormalFlash@num 004C                     status 0003  
                   wtemp0 007E              ?_PGMCheckNvm 0071           __initialization 0013  
            DLYDelay_ms@i 004A              __end_of_main 00FD        __size_of_RTXRcvPkt 000F  
      __size_of_RTXSndPkt 005A                 ??_CC1Init 004E                 ??_CC1Read 004C  
               ??_ADCInit 0075            CC1Strobe@e_stb 004A                 ??_ADCTask 004D  
                  ??_main 0059                _cc1PaTable 005B              CC1Init@state 0050  
               ??_DINInit 0075              NVMWrite@addr 004C                 ??_DINTask 0075  
               ??_DINTick 0075                _cc1InitVal 00A0                 ??_LEDInit 0075  
            ?_PGMNvmReset 0071                 ??_PGMInit 0076               ?_RTXReadPkt 0071  
                  _ADCON0 001F                    _ADCON1 009F             SPIRead@dstPtr 0048  
               ??_NVMRead 0049                    _ADRESH 001E                    _EEDATA 010C  
               ??_SPIInit 0075                 ??_SPIRead 0046                    _EECON1 018C  
                  _EECON2 018D            _LEDNormalFlash 03DF                 ??_OUTInit 0075  
                  _ANSELH 0189       __size_of_PGMReadNvm 000E                 ??_RTXInit 0076  
            ?_PGMWriteNvm 0071                 ??_RTXTask 0076                 ??_RTXTick 0076  
     __size_of_PGMSelLong 0010                    _INTCON 000B                 ??_SYSInit 0075  
               ??_SYSTask 0057                    _INTIsr 0600                    _OSCCON 008F  
                  _INInit 0584                    _WDTCON 0105                    _SSPCON 0014  
                  _SSPBUF 0013             LEDFastFlash@i 004D                    _SYSInt 06BB  
    __size_of_eeprom_read 0022       RTXReadPkt@numRxByte 0058                    _adc_ch 0028  
               ??___lwdiv 0075      __end_of_eeprom_write 036B                    _tmrPgm 0031  
                  _rtx_ev 0024                 ?_CC1Sleep 0071      __size_of_DLYDelay_ms 0021  
               ?_CC1Write 0049                    saved_w 007E    __end_of_LEDNormalFlash 0403  
       __end_of_RTXRcvPkt 0665         __end_of_RTXSndPkt 020C      __end_of_LEDFastFlash 0427  
 __end_of__initialization 0033           eeprom_read@addr 0046            __pcstackCOMMON 0071  
            __pidataBANK0 06A4              __pidataBANK1 02B4       __size_of_RTXReadPkt 005A  
               ?_SLPSleep 0071                 ?_NVMWrite 0048           CC1Strobe@cc1Stb 004B  
               ?_SPIWrite 0075                CC1Read@len 004B                CC1Read@dst 004A  
              ??_CC1Sleep 0076                ??_CC1Write 004B              CC1Write@addr 004C  
       eeprom_write@value 0075           ?_LEDNormalFlash 0071                __pbssBANK0 0020  
                 ?_INTIsr 0071                   ?_INInit 0071                   ?_SYSInt 0071  
               INInit@sta 0046      __size_of_PGMCheckNvm 000D                __pmaintext 00A0  
            ??_PGMReadNvm 004D           CC1Write@cc1Addr 004D              ??_PGMSelLong 0050  
              __pintentry 0004              ?_RTXSendData 0071              ?_RTXSendRPgm 0071  
                 _CC1Init 02E3                   _CC1Read 052D                   _ADCInit 0427  
                 _ADCTask 0036         _u_in_sta_currTask 0078                ??_SLPSleep 004C  
              ??_NVMWrite 004A                _cntSndData 002A                ??_SPIWrite 0046  
                 _DINInit 0625                   _DINTick 036B                   _DINTask 0567  
            ADCInit@state 0046                   _LEDInit 068E                   _PGMInit 05D5  
    __size_of_PGMNvmReset 0012                   _SSPCON2 0091                   _NVMRead 04EF  
                 _SPIInit 03BA                   _SPIRead 04CF                   _SSPSTAT 0094  
                 _OUTInit 050F                   _RTXInit 0393                   _RTXTick 04AF  
                 _RTXTask 06B4        __end_of_PGMReadNvm 0681                   _SYSInit 0312  
                 _SYSTask 024C        __end_of_PGMSelLong 0656                 _CC1Strobe 05ED  
         __size_of_INTIsr 0013           __size_of_INInit 001D      __size_of_PGMWriteNvm 000E  
         __size_of_SYSInt 0006                 NVMWrite@i 004D                 SPIWrite@i 0048  
   __size_of_eeprom_write 002C              RTXInit@state 0057                   ___lwdiv 020C  
                 __ptext1 024C                   __ptext2 04AF                   __ptext3 0646  
                 __ptext4 00FD                   __ptext5 069A                   __ptext6 036B  
                 __ptext7 02E3                   __ptext8 0312                   __ptext9 06B4  
                 _flg_slp 002B                   _pgm_cfg 0037     __size_of_LEDFastFlash 0024  
            ??_RTXReadPkt 0057                   clrloop0 06AD                   _rtx_flg 002C  
            RTXRcvPkt@len 004F              RTXRcvPkt@dst 0052      end_of_initialization 0033  
              _u_in_ev_up 0036                ?_CC1Strobe 0071        RTXSndPkt@numRxByte 0053  
      RTXSndPkt@numTxByte 0054              _eeprom_write 033F              RTXSndPkt@len 004F  
            RTXSndPkt@src 0052              RTXSndPkt@sta 0055                _tmrDbncSel 0030  
      __end_of_RTXReadPkt 01B2                DINInit@sta 0075              _LEDFastFlash 0403  
               _PORTAbits 0005                 _PORTBbits 0006                 _PORTCbits 0007  
              _tmrLongSel 0026         __size_of_CC1Sleep 000A         __size_of_CC1Write 001D  
             NVMRead@addr 004B               NVMRead@dest 0047                 _RTXRcvPkt 0656  
               _RTXSndPkt 01B2             ??_eeprom_read 0075            __end_of_INTIsr 0613  
          __end_of_INInit 05A1            __end_of_SYSInt 06C1                LEDInit@sta 0075  
          DLYDelay_ms@val 0046             ??_DLYDelay_ms 0048      __size_of_RTXSendData 0034  
        ??_LEDNormalFlash 0075      __size_of_RTXSendRPgm 0018              SYSInit@state 0046  
       __size_of_SLPSleep 005B         __size_of_NVMWrite 0021         __size_of_SPIWrite 001C  
     start_initialization 0013               CC1Read@addr 004D               NVMWrite@len 0049  
                ??_INTIsr 0071                  ??_INInit 0075               ??_CC1Strobe 0049  
              ?_RTXRcvPkt 004F                ?_RTXSndPkt 004F                  ??_SYSInt 0071  
__CFG_FOSC$INTRC_NOCLKOUT 0000            CC1Read@cc1Addr 004E       __end_of_eeprom_read 046D  
              init_fetch0 0636                  ?_CC1Init 0071               __pdataBANK0 005B  
             __pdataBANK1 00A0                  ?_CC1Read 004A               SPIWrite@len 0075  
                ?_ADCInit 0071                  ?_ADCTask 0071                  ?_DINInit 0071  
                ?_DINTask 0071                  ?_DINTick 0071                  ?_LEDInit 0071  
             __pbssCOMMON 0076             __pcstackBANK0 0046            ADCTask@sumBatt 0020  
     __end_of_DLYDelay_ms 048E                 _s_CC1_FLG 002D                  ?_PGMInit 0071  
          ADCTask@sumTemp 0022                  ?_NVMRead 0047                  ?_SPIInit 0071  
                ?_SPIRead 0075            NVMWrite@source 0048                  ?_OUTInit 0071  
            PGMInit@state 0051                  ?_RTXInit 0071                  ?_RTXTask 0071  
                ?_RTXTick 0071          eeprom_write@addr 0047               CC1Write@len 004A  
                ?_SYSInit 0071               CC1Write@src 0049                  ?_SYSTask 0071  
           ??_PGMCheckNvm 0076          ___lwdiv@dividend 0048                  ?___lwdiv 0046  
               _u_SYS_STA 0033          _u_in_sta_tmpTask 0079                  NVMRead@i 004C  
                _CC1Sleep 069A             ??_PGMNvmReset 0050                  SPIRead@i 0049  
                _CC1Write 054A          ___lwdiv@quotient 004B             ??_PGMWriteNvm 004E  
       interrupt_function 0004                 _u_flg_din 0077               ??_RTXRcvPkt 0050  
             ??_RTXSndPkt 0050                 clear_ram0 06AC               _eeprom_read 044B  
                SYSTask@i 0058                  _PIR1bits 000C       __end_of_PGMCheckNvm 068E  
   SLPSleep@OPTION_REGTmp 0051                 _tmrRcvPkt 0032          __size_of_CC1Init 002F  
        __size_of_CC1Read 001D                  _SLPSleep 00FD               _DLYDelay_ms 046D  
                _NVMWrite 048E          __size_of_ADCInit 0024                _ADCON0bits 001F  
        __size_of_ADCTask 006A                  _SPIWrite 05A1                NVMRead@len 0048  
         LEDFastFlash@num 004C          __size_of_DINInit 0011          __size_of_DINTask 001D  
        __size_of_DINTick 0028          __size_of_LEDInit 000C                SPIRead@len 0075  
        __size_of_PGMInit 0018       __end_of_PGMNvmReset 0625          __size_of_NVMRead 0020  
        __size_of_SPIInit 0025          __size_of_SPIRead 0020              _u_in_ev_down 0034  
         LEDNormalFlash@i 004D              _u_in_ev_long 0035          __size_of_OUTInit 001E  
        __size_of_RTXInit 0027          __size_of_RTXTask 0007          __size_of_RTXTick 0020  
        __size_of_SYSInit 002D          __size_of_SYSTask 0034                OUTInit@sta 0046  
     __end_of_PGMWriteNvm 0673             ADCTask@cntSum 0076          __size_of___lwdiv 0040  
         ___lwdiv@divisor 0046           ___lwdiv@counter 004A                  __ptext10 0158  
                __ptext11 05BD                  __ptext20 05ED                  __ptext12 0656  
                __ptext21 05A1                  __ptext13 03DF                  __ptext30 0673  
                __ptext22 0403                  __ptext14 0393                  __ptext31 04EF  
                __ptext23 046D                  __ptext15 0280                  __ptext40 050F  
                __ptext32 044B                  __ptext24 05D5                  __ptext16 01B2  
                __ptext41 0584                  __ptext33 0567                  __ptext25 0681  
                __ptext17 052D                  __ptext42 0600                  __ptext34 0625  
                __ptext26 0613                  __ptext18 04CF                  __ptext43 06BB  
                __ptext35 068E                  __ptext27 0665                  __ptext19 054A  
                __ptext36 0036                  __ptext28 048E                  __ptext37 020C  
                __ptext29 033F                  __ptext38 0427                  __ptext39 03BA  
       __CFG_BOR4V$BOR21V 0000             __size_of_main 005D               _PGMCheckNvm 0681  
           ??_RTXSendData 0056             ??_RTXSendRPgm 0056               _PGMNvmReset 0613  
              _INTCONbits 000B                  init_ram0 063A            SPIWrite@srcPtr 0047  
                intlevel1 0000               _PGMWriteNvm 0665                _PGMReadNvm 0673  
              _PGMSelLong 0646         SLPSleep@INTCONTmp 004E                _OPTION_REG 0081  
     __end_of_RTXSendData 02B4       __end_of_RTXSendRPgm 05D5   __size_of_LEDNormalFlash 0024  
           ?_eeprom_write 0075           SLPSleep@IOCBTmp 004D         SLPSleep@WDTCONTmp 0050  
            ?_eeprom_read 0071                _SSPCONbits 0014  
