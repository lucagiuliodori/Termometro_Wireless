

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Oct 04 14:24:19 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F883
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	intentry,global,class=CODE,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	dabs	1,0x7E,2
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  008F                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  009F                     	;# 
   122  0105                     	;# 
   123  0107                     	;# 
   124  0108                     	;# 
   125  0109                     	;# 
   126  010C                     	;# 
   127  010C                     	;# 
   128  010D                     	;# 
   129  010E                     	;# 
   130  010F                     	;# 
   131  0185                     	;# 
   132  0187                     	;# 
   133  0188                     	;# 
   134  0189                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0089                     	;# 
   176  008C                     	;# 
   177  008D                     	;# 
   178  008E                     	;# 
   179  008F                     	;# 
   180  0090                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0094                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  009F                     	;# 
   198  0105                     	;# 
   199  0107                     	;# 
   200  0108                     	;# 
   201  0109                     	;# 
   202  010C                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  010F                     	;# 
   207  0185                     	;# 
   208  0187                     	;# 
   209  0188                     	;# 
   210  0189                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  0000                     	;# 
   214  0001                     	;# 
   215  0002                     	;# 
   216  0003                     	;# 
   217  0004                     	;# 
   218  0005                     	;# 
   219  0006                     	;# 
   220  0007                     	;# 
   221  0009                     	;# 
   222  000A                     	;# 
   223  000B                     	;# 
   224  000C                     	;# 
   225  000D                     	;# 
   226  000E                     	;# 
   227  000E                     	;# 
   228  000F                     	;# 
   229  0010                     	;# 
   230  0011                     	;# 
   231  0012                     	;# 
   232  0013                     	;# 
   233  0014                     	;# 
   234  0015                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0017                     	;# 
   238  0018                     	;# 
   239  0019                     	;# 
   240  001A                     	;# 
   241  001B                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001D                     	;# 
   245  001E                     	;# 
   246  001F                     	;# 
   247  0081                     	;# 
   248  0085                     	;# 
   249  0086                     	;# 
   250  0087                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0009                     	;# 
   374  000A                     	;# 
   375  000B                     	;# 
   376  000C                     	;# 
   377  000D                     	;# 
   378  000E                     	;# 
   379  000E                     	;# 
   380  000F                     	;# 
   381  0010                     	;# 
   382  0011                     	;# 
   383  0012                     	;# 
   384  0013                     	;# 
   385  0014                     	;# 
   386  0015                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001D                     	;# 
   397  001E                     	;# 
   398  001F                     	;# 
   399  0081                     	;# 
   400  0085                     	;# 
   401  0086                     	;# 
   402  0087                     	;# 
   403  0089                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  008F                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0093                     	;# 
   412  0093                     	;# 
   413  0093                     	;# 
   414  0094                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0098                     	;# 
   419  0099                     	;# 
   420  009A                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  009F                     	;# 
   426  0105                     	;# 
   427  0107                     	;# 
   428  0108                     	;# 
   429  0109                     	;# 
   430  010C                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  010F                     	;# 
   435  0185                     	;# 
   436  0187                     	;# 
   437  0188                     	;# 
   438  0189                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  0000                     	;# 
   442  0001                     	;# 
   443  0002                     	;# 
   444  0003                     	;# 
   445  0004                     	;# 
   446  0005                     	;# 
   447  0006                     	;# 
   448  0007                     	;# 
   449  0009                     	;# 
   450  000A                     	;# 
   451  000B                     	;# 
   452  000C                     	;# 
   453  000D                     	;# 
   454  000E                     	;# 
   455  000E                     	;# 
   456  000F                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0017                     	;# 
   466  0018                     	;# 
   467  0019                     	;# 
   468  001A                     	;# 
   469  001B                     	;# 
   470  001B                     	;# 
   471  001C                     	;# 
   472  001D                     	;# 
   473  001E                     	;# 
   474  001F                     	;# 
   475  0081                     	;# 
   476  0085                     	;# 
   477  0086                     	;# 
   478  0087                     	;# 
   479  0089                     	;# 
   480  008C                     	;# 
   481  008D                     	;# 
   482  008E                     	;# 
   483  008F                     	;# 
   484  0090                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0093                     	;# 
   489  0093                     	;# 
   490  0094                     	;# 
   491  0095                     	;# 
   492  0096                     	;# 
   493  0097                     	;# 
   494  0098                     	;# 
   495  0099                     	;# 
   496  009A                     	;# 
   497  009B                     	;# 
   498  009C                     	;# 
   499  009D                     	;# 
   500  009E                     	;# 
   501  009F                     	;# 
   502  0105                     	;# 
   503  0107                     	;# 
   504  0108                     	;# 
   505  0109                     	;# 
   506  010C                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  0185                     	;# 
   512  0187                     	;# 
   513  0188                     	;# 
   514  0189                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  000E                     	;# 
   532  000F                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  001D                     	;# 
   549  001E                     	;# 
   550  001F                     	;# 
   551  0081                     	;# 
   552  0085                     	;# 
   553  0086                     	;# 
   554  0087                     	;# 
   555  0089                     	;# 
   556  008C                     	;# 
   557  008D                     	;# 
   558  008E                     	;# 
   559  008F                     	;# 
   560  0090                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0093                     	;# 
   564  0093                     	;# 
   565  0093                     	;# 
   566  0094                     	;# 
   567  0095                     	;# 
   568  0096                     	;# 
   569  0097                     	;# 
   570  0098                     	;# 
   571  0099                     	;# 
   572  009A                     	;# 
   573  009B                     	;# 
   574  009C                     	;# 
   575  009D                     	;# 
   576  009E                     	;# 
   577  009F                     	;# 
   578  0105                     	;# 
   579  0107                     	;# 
   580  0108                     	;# 
   581  0109                     	;# 
   582  010C                     	;# 
   583  010C                     	;# 
   584  010D                     	;# 
   585  010E                     	;# 
   586  010F                     	;# 
   587  0185                     	;# 
   588  0187                     	;# 
   589  0188                     	;# 
   590  0189                     	;# 
   591  018C                     	;# 
   592  018D                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0009                     	;# 
   602  000A                     	;# 
   603  000B                     	;# 
   604  000C                     	;# 
   605  000D                     	;# 
   606  000E                     	;# 
   607  000E                     	;# 
   608  000F                     	;# 
   609  0010                     	;# 
   610  0011                     	;# 
   611  0012                     	;# 
   612  0013                     	;# 
   613  0014                     	;# 
   614  0015                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  001D                     	;# 
   625  001E                     	;# 
   626  001F                     	;# 
   627  0081                     	;# 
   628  0085                     	;# 
   629  0086                     	;# 
   630  0087                     	;# 
   631  0089                     	;# 
   632  008C                     	;# 
   633  008D                     	;# 
   634  008E                     	;# 
   635  008F                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0093                     	;# 
   640  0093                     	;# 
   641  0093                     	;# 
   642  0094                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0098                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  0105                     	;# 
   655  0107                     	;# 
   656  0108                     	;# 
   657  0109                     	;# 
   658  010C                     	;# 
   659  010C                     	;# 
   660  010D                     	;# 
   661  010E                     	;# 
   662  010F                     	;# 
   663  0185                     	;# 
   664  0187                     	;# 
   665  0188                     	;# 
   666  0189                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  0000                     	;# 
   670  0001                     	;# 
   671  0002                     	;# 
   672  0003                     	;# 
   673  0004                     	;# 
   674  0005                     	;# 
   675  0006                     	;# 
   676  0007                     	;# 
   677  0009                     	;# 
   678  000A                     	;# 
   679  000B                     	;# 
   680  000C                     	;# 
   681  000D                     	;# 
   682  000E                     	;# 
   683  000E                     	;# 
   684  000F                     	;# 
   685  0010                     	;# 
   686  0011                     	;# 
   687  0012                     	;# 
   688  0013                     	;# 
   689  0014                     	;# 
   690  0015                     	;# 
   691  0015                     	;# 
   692  0016                     	;# 
   693  0017                     	;# 
   694  0018                     	;# 
   695  0019                     	;# 
   696  001A                     	;# 
   697  001B                     	;# 
   698  001B                     	;# 
   699  001C                     	;# 
   700  001D                     	;# 
   701  001E                     	;# 
   702  001F                     	;# 
   703  0081                     	;# 
   704  0085                     	;# 
   705  0086                     	;# 
   706  0087                     	;# 
   707  0089                     	;# 
   708  008C                     	;# 
   709  008D                     	;# 
   710  008E                     	;# 
   711  008F                     	;# 
   712  0090                     	;# 
   713  0091                     	;# 
   714  0092                     	;# 
   715  0093                     	;# 
   716  0093                     	;# 
   717  0093                     	;# 
   718  0094                     	;# 
   719  0095                     	;# 
   720  0096                     	;# 
   721  0097                     	;# 
   722  0098                     	;# 
   723  0099                     	;# 
   724  009A                     	;# 
   725  009B                     	;# 
   726  009C                     	;# 
   727  009D                     	;# 
   728  009E                     	;# 
   729  009F                     	;# 
   730  0105                     	;# 
   731  0107                     	;# 
   732  0108                     	;# 
   733  0109                     	;# 
   734  010C                     	;# 
   735  010C                     	;# 
   736  010D                     	;# 
   737  010E                     	;# 
   738  010F                     	;# 
   739  0185                     	;# 
   740  0187                     	;# 
   741  0188                     	;# 
   742  0189                     	;# 
   743  018C                     	;# 
   744  018D                     	;# 
   745  0000                     	;# 
   746  0001                     	;# 
   747  0002                     	;# 
   748  0003                     	;# 
   749  0004                     	;# 
   750  0005                     	;# 
   751  0006                     	;# 
   752  0007                     	;# 
   753  0009                     	;# 
   754  000A                     	;# 
   755  000B                     	;# 
   756  000C                     	;# 
   757  000D                     	;# 
   758  000E                     	;# 
   759  000E                     	;# 
   760  000F                     	;# 
   761  0010                     	;# 
   762  0011                     	;# 
   763  0012                     	;# 
   764  0013                     	;# 
   765  0014                     	;# 
   766  0015                     	;# 
   767  0015                     	;# 
   768  0016                     	;# 
   769  0017                     	;# 
   770  0018                     	;# 
   771  0019                     	;# 
   772  001A                     	;# 
   773  001B                     	;# 
   774  001B                     	;# 
   775  001C                     	;# 
   776  001D                     	;# 
   777  001E                     	;# 
   778  001F                     	;# 
   779  0081                     	;# 
   780  0085                     	;# 
   781  0086                     	;# 
   782  0087                     	;# 
   783  0089                     	;# 
   784  008C                     	;# 
   785  008D                     	;# 
   786  008E                     	;# 
   787  008F                     	;# 
   788  0090                     	;# 
   789  0091                     	;# 
   790  0092                     	;# 
   791  0093                     	;# 
   792  0093                     	;# 
   793  0093                     	;# 
   794  0094                     	;# 
   795  0095                     	;# 
   796  0096                     	;# 
   797  0097                     	;# 
   798  0098                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009C                     	;# 
   803  009D                     	;# 
   804  009E                     	;# 
   805  009F                     	;# 
   806  0105                     	;# 
   807  0107                     	;# 
   808  0108                     	;# 
   809  0109                     	;# 
   810  010C                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0185                     	;# 
   816  0187                     	;# 
   817  0188                     	;# 
   818  0189                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0009                     	;# 
   830  000A                     	;# 
   831  000B                     	;# 
   832  000C                     	;# 
   833  000D                     	;# 
   834  000E                     	;# 
   835  000E                     	;# 
   836  000F                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0013                     	;# 
   841  0014                     	;# 
   842  0015                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  001D                     	;# 
   853  001E                     	;# 
   854  001F                     	;# 
   855  0081                     	;# 
   856  0085                     	;# 
   857  0086                     	;# 
   858  0087                     	;# 
   859  0089                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  008F                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0093                     	;# 
   868  0093                     	;# 
   869  0093                     	;# 
   870  0094                     	;# 
   871  0095                     	;# 
   872  0096                     	;# 
   873  0097                     	;# 
   874  0098                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009C                     	;# 
   879  009D                     	;# 
   880  009E                     	;# 
   881  009F                     	;# 
   882  0105                     	;# 
   883  0107                     	;# 
   884  0108                     	;# 
   885  0109                     	;# 
   886  010C                     	;# 
   887  010C                     	;# 
   888  010D                     	;# 
   889  010E                     	;# 
   890  010F                     	;# 
   891  0185                     	;# 
   892  0187                     	;# 
   893  0188                     	;# 
   894  0189                     	;# 
   895  018C                     	;# 
   896  018D                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  000E                     	;# 
   912  000F                     	;# 
   913  0010                     	;# 
   914  0011                     	;# 
   915  0012                     	;# 
   916  0013                     	;# 
   917  0014                     	;# 
   918  0015                     	;# 
   919  0015                     	;# 
   920  0016                     	;# 
   921  0017                     	;# 
   922  0018                     	;# 
   923  0019                     	;# 
   924  001A                     	;# 
   925  001B                     	;# 
   926  001B                     	;# 
   927  001C                     	;# 
   928  001D                     	;# 
   929  001E                     	;# 
   930  001F                     	;# 
   931  0081                     	;# 
   932  0085                     	;# 
   933  0086                     	;# 
   934  0087                     	;# 
   935  0089                     	;# 
   936  008C                     	;# 
   937  008D                     	;# 
   938  008E                     	;# 
   939  008F                     	;# 
   940  0090                     	;# 
   941  0091                     	;# 
   942  0092                     	;# 
   943  0093                     	;# 
   944  0093                     	;# 
   945  0093                     	;# 
   946  0094                     	;# 
   947  0095                     	;# 
   948  0096                     	;# 
   949  0097                     	;# 
   950  0098                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009C                     	;# 
   955  009D                     	;# 
   956  009E                     	;# 
   957  009F                     	;# 
   958  0105                     	;# 
   959  0107                     	;# 
   960  0108                     	;# 
   961  0109                     	;# 
   962  010C                     	;# 
   963  010C                     	;# 
   964  010D                     	;# 
   965  010E                     	;# 
   966  010F                     	;# 
   967  0185                     	;# 
   968  0187                     	;# 
   969  0188                     	;# 
   970  0189                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  0000                     	;# 
   974  0001                     	;# 
   975  0002                     	;# 
   976  0003                     	;# 
   977  0004                     	;# 
   978  0005                     	;# 
   979  0006                     	;# 
   980  0007                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  000E                     	;# 
   988  000F                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0014                     	;# 
   994  0015                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0017                     	;# 
   998  0018                     	;# 
   999  0019                     	;# 
  1000  001A                     	;# 
  1001  001B                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001D                     	;# 
  1005  001E                     	;# 
  1006  001F                     	;# 
  1007  0081                     	;# 
  1008  0085                     	;# 
  1009  0086                     	;# 
  1010  0087                     	;# 
  1011  0089                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0093                     	;# 
  1021  0093                     	;# 
  1022  0094                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0098                     	;# 
  1027  0099                     	;# 
  1028  009A                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  0105                     	;# 
  1035  0107                     	;# 
  1036  0108                     	;# 
  1037  0109                     	;# 
  1038  010C                     	;# 
  1039  010C                     	;# 
  1040  010D                     	;# 
  1041  010E                     	;# 
  1042  010F                     	;# 
  1043  0185                     	;# 
  1044  0187                     	;# 
  1045  0188                     	;# 
  1046  0189                     	;# 
  1047  018C                     	;# 
  1048  018D                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  000E                     	;# 
  1064  000F                     	;# 
  1065  0010                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0013                     	;# 
  1069  0014                     	;# 
  1070  0015                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  001D                     	;# 
  1081  001E                     	;# 
  1082  001F                     	;# 
  1083  0081                     	;# 
  1084  0085                     	;# 
  1085  0086                     	;# 
  1086  0087                     	;# 
  1087  0089                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  008F                     	;# 
  1092  0090                     	;# 
  1093  0091                     	;# 
  1094  0092                     	;# 
  1095  0093                     	;# 
  1096  0093                     	;# 
  1097  0093                     	;# 
  1098  0094                     	;# 
  1099  0095                     	;# 
  1100  0096                     	;# 
  1101  0097                     	;# 
  1102  0098                     	;# 
  1103  0099                     	;# 
  1104  009A                     	;# 
  1105  009B                     	;# 
  1106  009C                     	;# 
  1107  009D                     	;# 
  1108  009E                     	;# 
  1109  009F                     	;# 
  1110  0105                     	;# 
  1111  0107                     	;# 
  1112  0108                     	;# 
  1113  0109                     	;# 
  1114  010C                     	;# 
  1115  010C                     	;# 
  1116  010D                     	;# 
  1117  010E                     	;# 
  1118  010F                     	;# 
  1119  0185                     	;# 
  1120  0187                     	;# 
  1121  0188                     	;# 
  1122  0189                     	;# 
  1123  018C                     	;# 
  1124  018D                     	;# 
  1125                           
  1126                           	psect	idataBANK0
  1127  0694                     __pidataBANK0:	
  1128                           
  1129                           ;initializer for _cc1PaTable
  1130  0694  3403               	retlw	3
  1131  0695  340F               	retlw	15
  1132  0696  341E               	retlw	30
  1133  0697  3427               	retlw	39
  1134  0698  3450               	retlw	80
  1135  0699  3481               	retlw	129
  1136  069A  34CB               	retlw	203
  1137  069B  34C2               	retlw	194
  1138                           
  1139                           	psect	idataBANK1
  1140  02B4                     __pidataBANK1:	
  1141                           
  1142                           ;initializer for _cc1InitVal
  1143  02B4  3447               	retlw	71
  1144  02B5  3446               	retlw	70
  1145  02B6  3480               	retlw	128
  1146  02B7  340F               	retlw	15
  1147  02B8  34D3               	retlw	211
  1148  02B9  3491               	retlw	145
  1149  02BA  3405               	retlw	5
  1150  02BB  3408               	retlw	8
  1151  02BC  3404               	retlw	4
  1152  02BD  3400               	retlw	0
  1153  02BE  3400               	retlw	0
  1154  02BF  3406               	retlw	6
  1155  02C0  3400               	retlw	0
  1156  02C1  3421               	retlw	33
  1157  02C2  3463               	retlw	99
  1158  02C3  3491               	retlw	145
  1159  02C4  34CA               	retlw	202
  1160  02C5  3483               	retlw	131
  1161  02C6  3402               	retlw	2
  1162  02C7  3402               	retlw	2
  1163  02C8  343B               	retlw	59
  1164  02C9  3434               	retlw	52
  1165  02CA  3407               	retlw	7
  1166  02CB  343F               	retlw	63
  1167  02CC  3408               	retlw	8
  1168  02CD  3416               	retlw	22
  1169  02CE  346C               	retlw	108
  1170  02CF  3403               	retlw	3
  1171  02D0  3440               	retlw	64
  1172  02D1  3491               	retlw	145
  1173  02D2  3487               	retlw	135
  1174  02D3  346B               	retlw	107
  1175  02D4  34FB               	retlw	251
  1176  02D5  3456               	retlw	86
  1177  02D6  3416               	retlw	22
  1178  02D7  34E9               	retlw	233
  1179  02D8  342A               	retlw	42
  1180  02D9  3400               	retlw	0
  1181  02DA  341F               	retlw	31
  1182  02DB  3441               	retlw	65
  1183  02DC  3400               	retlw	0
  1184  02DD  3459               	retlw	89
  1185  02DE  34BF               	retlw	191
  1186  02DF  343F               	retlw	63
  1187  02E0  3481               	retlw	129
  1188  02E1  3435               	retlw	53
  1189  02E2  3409               	retlw	9
  1190  001F                     _ADCON0	set	31
  1191  001F                     _ADCON0bits	set	31
  1192  001E                     _ADRESH	set	30
  1193  000B                     _INTCON	set	11
  1194  000B                     _INTCONbits	set	11
  1195  000C                     _PIR1	set	12
  1196  000C                     _PIR1bits	set	12
  1197  000D                     _PIR2	set	13
  1198  0005                     _PORTAbits	set	5
  1199  0006                     _PORTBbits	set	6
  1200  0007                     _PORTC	set	7
  1201  0007                     _PORTCbits	set	7
  1202  0013                     _SSPBUF	set	19
  1203  0014                     _SSPCON	set	20
  1204  0014                     _SSPCONbits	set	20
  1205  0010                     _T1CON	set	16
  1206  0001                     _TMR0	set	1
  1207  000F                     _TMR1H	set	15
  1208  000E                     _TMR1L	set	14
  1209  0018                     _CARRY	set	24
  1210  005F                     _GIE	set	95
  1211  009F                     _ADCON1	set	159
  1212  0096                     _IOCB	set	150
  1213  0081                     _OPTION_REG	set	129
  1214  008F                     _OSCCON	set	143
  1215  008C                     _PIE1	set	140
  1216  008D                     _PIE2	set	141
  1217  0091                     _SSPCON2	set	145
  1218  0094                     _SSPSTAT	set	148
  1219  0085                     _TRISA	set	133
  1220  0086                     _TRISB	set	134
  1221  0087                     _TRISC	set	135
  1222  0095                     _WPUB	set	149
  1223  010D                     _EEADR	set	269
  1224  010C                     _EEDATA	set	268
  1225  0105                     _WDTCON	set	261
  1226  0188                     _ANSEL	set	392
  1227  0189                     _ANSELH	set	393
  1228  018C                     _EECON1	set	396
  1229  018D                     _EECON2	set	397
  1230  0C60                     _RD	set	3168
  1231  0C61                     _WR	set	3169
  1232  0C62                     _WREN	set	3170
  1233                           
  1234                           ; #config settings
  1235  0000                     
  1236                           	psect	cinit
  1237  0013                     start_initialization:	
  1238  0013                     __initialization:	
  1239                           
  1240                           ; Clear objects allocated to COMMON
  1241  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1242  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1243  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1244  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1245                           
  1246                           ; Clear objects allocated to BANK0
  1247  0017  1383               	bcf	3,7	;select IRP bank0
  1248  0018  3020               	movlw	low __pbssBANK0
  1249  0019  0084               	movwf	4
  1250  001A  3046               	movlw	low (__pbssBANK0+38)
  1251  001B  118A  269C  118A   	fcall	clear_ram0
  1252                           
  1253                           ; Initialize objects allocated to BANK1
  1254  001E  30CF               	movlw	low (__pdataBANK1+47)
  1255  001F  00FD               	movwf	btemp+-1
  1256  0020  3002               	movlw	high __pidataBANK1
  1257  0021  00FE               	movwf	btemp
  1258  0022  30B4               	movlw	low __pidataBANK1
  1259  0023  00FF               	movwf	btemp+1
  1260  0024  30A0               	movlw	low __pdataBANK1
  1261  0025  0084               	movwf	4
  1262  0026  118A  262A  118A   	fcall	init_ram0
  1263                           
  1264                           ; Initialize objects allocated to BANK0
  1265  0029  3063               	movlw	low (__pdataBANK0+8)
  1266  002A  00FD               	movwf	btemp+-1
  1267  002B  3006               	movlw	high __pidataBANK0
  1268  002C  00FE               	movwf	btemp
  1269  002D  3094               	movlw	low __pidataBANK0
  1270  002E  00FF               	movwf	btemp+1
  1271  002F  305B               	movlw	low __pdataBANK0
  1272  0030  0084               	movwf	4
  1273  0031  118A  262A         	fcall	init_ram0
  1274  0033                     end_of_initialization:	
  1275                           ;End of C runtime variable initialization code
  1276                           
  1277  0033                     __end_of__initialization:	
  1278  0033  0183               	clrf	3
  1279  0034  118A  28A0         	ljmp	_main	;jump to C main() function
  1280                           
  1281                           	psect	bssCOMMON
  1282  0076                     __pbssCOMMON:	
  1283  0076                     ADCTask@cntSum:	
  1284  0076                     	ds	1
  1285  0077                     _u_flg_din:	
  1286  0077                     	ds	1
  1287  0078                     _u_in_sta_currTask:	
  1288  0078                     	ds	1
  1289  0079                     _u_in_sta_tmpTask:	
  1290  0079                     	ds	1
  1291                           
  1292                           	psect	bssBANK0
  1293  0020                     __pbssBANK0:	
  1294  0020                     ADCTask@sumBatt:	
  1295  0020                     	ds	2
  1296  0022                     ADCTask@sumTemp:	
  1297  0022                     	ds	2
  1298  0024                     _rtx_ev:	
  1299  0024                     	ds	2
  1300  0026                     _tmrLongSel:	
  1301  0026                     	ds	2
  1302  0028                     _adc_ch:	
  1303  0028                     	ds	1
  1304  0029                     _batt:	
  1305  0029                     	ds	1
  1306  002A                     _cntSndData:	
  1307  002A                     	ds	1
  1308  002B                     _flg_slp:	
  1309  002B                     	ds	1
  1310  002C                     _rtx_flg:	
  1311  002C                     	ds	1
  1312  002D                     _s_CC1_FLG:	
  1313  002D                     	ds	1
  1314  002E                     _sys_pgm_sta:	
  1315  002E                     	ds	1
  1316  002F                     _temp:	
  1317  002F                     	ds	1
  1318  0030                     _tmrDbncSel:	
  1319  0030                     	ds	1
  1320  0031                     _tmrPgm:	
  1321  0031                     	ds	1
  1322  0032                     _tmrRcvPkt:	
  1323  0032                     	ds	1
  1324  0033                     _u_SYS_STA:	
  1325  0033                     	ds	1
  1326  0034                     _u_in_ev_down:	
  1327  0034                     	ds	1
  1328  0035                     _u_in_ev_long:	
  1329  0035                     	ds	1
  1330  0036                     _u_in_ev_up:	
  1331  0036                     	ds	1
  1332  0037                     _pgm_cfg:	
  1333  0037                     	ds	5
  1334  003C                     _pktRx:	
  1335  003C                     	ds	5
  1336  0041                     _pktTx:	
  1337  0041                     	ds	5
  1338                           
  1339                           	psect	dataBANK0
  1340  005B                     __pdataBANK0:	
  1341  005B                     _cc1PaTable:	
  1342  005B                     	ds	8
  1343                           
  1344                           	psect	dataBANK1
  1345  00A0                     __pdataBANK1:	
  1346  00A0                     _cc1InitVal:	
  1347  00A0                     	ds	47
  1348                           
  1349                           	psect	clrtext
  1350  069C                     clear_ram0:	
  1351                           ;	Called with FSR containing the base address, and
  1352                           ;	W with the last address+1
  1353                           
  1354  069C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1355  069D                     clrloop0:	
  1356  069D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1357  069E  0A84               	incf	4,f	;increment pointer
  1358  069F  0604               	xorwf	4,w	;XOR with final address
  1359  06A0  1903               	btfsc	3,2	;have we reached the end yet?
  1360  06A1  3400               	retlw	0	;all done for this memory range, return
  1361  06A2  0604               	xorwf	4,w	;XOR again to restore value
  1362  06A3  2E9D               	goto	clrloop0	;do the next byte
  1363                           
  1364                           	psect	inittext
  1365  0626                     init_fetch0:	
  1366                           ;	Called with low address in FSR and high address in W
  1367                           
  1368  0626  087E               	movf	126,w
  1369  0627  008A               	movwf	10
  1370  0628  087F               	movf	127,w
  1371  0629  0082               	movwf	2
  1372  062A                     init_ram0:	
  1373                           ;Called with:
  1374                           ;	high address of idata address in btemp 
  1375                           ;	low address of idata address in btemp+1 
  1376                           ;	low address of data in FSR
  1377                           ;	high address + 1 of data in btemp-1
  1378                           
  1379  062A  2626  118A         	fcall	init_fetch0
  1380  062C  0080               	movwf	0
  1381  062D  0A84               	incf	4,f
  1382  062E  0804               	movf	4,w
  1383  062F  067D               	xorwf	125,w
  1384  0630  1903               	btfsc	3,2
  1385  0631  3400               	retlw	0
  1386  0632  0AFF               	incf	127,f
  1387  0633  1903               	btfsc	3,2
  1388  0634  0AFE               	incf	126,f
  1389  0635  2E2A               	goto	init_ram0
  1390                           
  1391                           	psect	cstackCOMMON
  1392  0070                     __pcstackCOMMON:	
  1393  0070                     ?_CC1Strobe:	
  1394  0070                     ?_PGMReadNvm:	
  1395                           ; 0 bytes @ 0x0
  1396                           
  1397  0070                     ?_PGMCheckNvm:	
  1398                           ; 0 bytes @ 0x0
  1399                           
  1400  0070                     ?_PGMNvmReset:	
  1401                           ; 0 bytes @ 0x0
  1402                           
  1403  0070                     ?_RTXSendData:	
  1404                           ; 0 bytes @ 0x0
  1405                           
  1406  0070                     ?_RTXReadPkt:	
  1407                           ; 0 bytes @ 0x0
  1408                           
  1409  0070                     ?_RTXSendRPgm:	
  1410                           ; 0 bytes @ 0x0
  1411                           
  1412  0070                     ?_INInit:	
  1413                           ; 0 bytes @ 0x0
  1414                           
  1415  0070                     ?_OUTInit:	
  1416                           ; 0 bytes @ 0x0
  1417                           
  1418  0070                     ?_SPIInit:	
  1419                           ; 0 bytes @ 0x0
  1420                           
  1421  0070                     ?_ADCInit:	
  1422                           ; 0 bytes @ 0x0
  1423                           
  1424  0070                     ?_ADCTask:	
  1425                           ; 0 bytes @ 0x0
  1426                           
  1427  0070                     ?_CC1Init:	
  1428                           ; 0 bytes @ 0x0
  1429                           
  1430  0070                     ?_CC1Sleep:	
  1431                           ; 0 bytes @ 0x0
  1432                           
  1433  0070                     ?_LEDInit:	
  1434                           ; 0 bytes @ 0x0
  1435                           
  1436  0070                     ?_LEDNormalFlash:	
  1437                           ; 0 bytes @ 0x0
  1438                           
  1439  0070                     ?_LEDFastFlash:	
  1440                           ; 0 bytes @ 0x0
  1441                           
  1442  0070                     ?_DINInit:	
  1443                           ; 0 bytes @ 0x0
  1444                           
  1445  0070                     ?_DINTick:	
  1446                           ; 0 bytes @ 0x0
  1447                           
  1448  0070                     ?_DINTask:	
  1449                           ; 0 bytes @ 0x0
  1450                           
  1451  0070                     ?_SLPSleep:	
  1452                           ; 0 bytes @ 0x0
  1453                           
  1454  0070                     ?_PGMInit:	
  1455                           ; 0 bytes @ 0x0
  1456                           
  1457  0070                     ?_PGMWriteNvm:	
  1458                           ; 0 bytes @ 0x0
  1459                           
  1460  0070                     ?_PGMSelLong:	
  1461                           ; 0 bytes @ 0x0
  1462                           
  1463  0070                     ?_RTXInit:	
  1464                           ; 0 bytes @ 0x0
  1465                           
  1466  0070                     ?_RTXTick:	
  1467                           ; 0 bytes @ 0x0
  1468                           
  1469  0070                     ?_RTXTask:	
  1470                           ; 0 bytes @ 0x0
  1471                           
  1472  0070                     ?_SYSInit:	
  1473                           ; 0 bytes @ 0x0
  1474                           
  1475  0070                     ?_SYSInt:	
  1476                           ; 0 bytes @ 0x0
  1477                           
  1478  0070                     ??_SYSInt:	
  1479                           ; 0 bytes @ 0x0
  1480                           
  1481  0070                     ?_SYSTask:	
  1482                           ; 0 bytes @ 0x0
  1483                           
  1484  0070                     ?_INTIsr:	
  1485                           ; 0 bytes @ 0x0
  1486                           
  1487  0070                     ??_INTIsr:	
  1488                           ; 0 bytes @ 0x0
  1489                           
  1490  0070                     ?_main:	
  1491                           ; 0 bytes @ 0x0
  1492                           
  1493  0070                     ?_eeprom_read:	
  1494                           ; 0 bytes @ 0x0
  1495                           
  1496                           
  1497                           ; 1 bytes @ 0x0
  1498  0070                     	ds	4
  1499  0074                     ??_eeprom_read:	
  1500  0074                     ?_eeprom_write:	
  1501                           ; 0 bytes @ 0x4
  1502                           
  1503  0074                     ??_INInit:	
  1504                           ; 0 bytes @ 0x4
  1505                           
  1506  0074                     ??_OUTInit:	
  1507                           ; 0 bytes @ 0x4
  1508                           
  1509  0074                     ??_SPIInit:	
  1510                           ; 0 bytes @ 0x4
  1511                           
  1512  0074                     ?_SPIRead:	
  1513                           ; 0 bytes @ 0x4
  1514                           
  1515  0074                     ?_SPIWrite:	
  1516                           ; 0 bytes @ 0x4
  1517                           
  1518  0074                     ??_ADCInit:	
  1519                           ; 0 bytes @ 0x4
  1520                           
  1521  0074                     ?_DLYDelay_ms:	
  1522                           ; 0 bytes @ 0x4
  1523                           
  1524  0074                     ??_LEDInit:	
  1525                           ; 0 bytes @ 0x4
  1526                           
  1527  0074                     ??_DINInit:	
  1528                           ; 0 bytes @ 0x4
  1529                           
  1530  0074                     ??_DINTick:	
  1531                           ; 0 bytes @ 0x4
  1532                           
  1533  0074                     ??_DINTask:	
  1534                           ; 0 bytes @ 0x4
  1535                           
  1536  0074                     ??_SYSInit:	
  1537                           ; 0 bytes @ 0x4
  1538                           
  1539  0074                     ??___lwdiv:	
  1540                           ; 0 bytes @ 0x4
  1541                           
  1542  0074                     SPIRead@len:	
  1543                           ; 0 bytes @ 0x4
  1544                           
  1545  0074                     SPIWrite@len:	
  1546                           ; 1 bytes @ 0x4
  1547                           
  1548  0074                     LEDInit@sta:	
  1549                           ; 1 bytes @ 0x4
  1550                           
  1551  0074                     DINInit@sta:	
  1552                           ; 1 bytes @ 0x4
  1553                           
  1554  0074                     eeprom_write@value:	
  1555                           ; 1 bytes @ 0x4
  1556                           
  1557  0074                     DLYDelay_ms@val:	
  1558                           ; 1 bytes @ 0x4
  1559                           
  1560                           
  1561                           ; 2 bytes @ 0x4
  1562  0074                     	ds	1
  1563  0075                     ??_eeprom_write:	
  1564  0075                     ??_SPIWrite:	
  1565                           ; 0 bytes @ 0x5
  1566                           
  1567  0075                     INInit@sta:	
  1568                           ; 0 bytes @ 0x5
  1569                           
  1570  0075                     OUTInit@sta:	
  1571                           ; 1 bytes @ 0x5
  1572                           
  1573  0075                     SPIInit@state:	
  1574                           ; 1 bytes @ 0x5
  1575                           
  1576  0075                     ADCInit@state:	
  1577                           ; 1 bytes @ 0x5
  1578                           
  1579  0075                     SYSInit@state:	
  1580                           ; 1 bytes @ 0x5
  1581                           
  1582  0075                     eeprom_read@addr:	
  1583                           ; 1 bytes @ 0x5
  1584                           
  1585                           
  1586                           ; 1 bytes @ 0x5
  1587  0075                     	ds	1
  1588  0076                     ??_PGMCheckNvm:	
  1589  0076                     ??_CC1Sleep:	
  1590                           ; 0 bytes @ 0x6
  1591                           
  1592  0076                     ??_PGMInit:	
  1593                           ; 0 bytes @ 0x6
  1594                           
  1595  0076                     ??_RTXInit:	
  1596                           ; 0 bytes @ 0x6
  1597                           
  1598  0076                     ??_RTXTick:	
  1599                           ; 0 bytes @ 0x6
  1600                           
  1601  0076                     ??_RTXTask:	
  1602                           ; 0 bytes @ 0x6
  1603                           
  1604                           
  1605                           	psect	cstackBANK0
  1606  0046                     __pcstackBANK0:	
  1607                           ; 0 bytes @ 0x6
  1608                           
  1609  0046                     ??_SPIRead:	
  1610  0046                     ??_DLYDelay_ms:	
  1611                           ; 0 bytes @ 0x0
  1612                           
  1613  0046                     ?_NVMRead:	
  1614                           ; 0 bytes @ 0x0
  1615                           
  1616  0046                     ?___lwdiv:	
  1617                           ; 0 bytes @ 0x0
  1618                           
  1619  0046                     SPIWrite@srcPtr:	
  1620                           ; 2 bytes @ 0x0
  1621                           
  1622  0046                     NVMRead@dest:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0046                     eeprom_write@addr:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0046                     ___lwdiv@divisor:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631                           
  1632                           ; 2 bytes @ 0x0
  1633  0046                     	ds	1
  1634  0047                     ?_NVMWrite:	
  1635  0047                     SPIWrite@i:	
  1636                           ; 0 bytes @ 0x1
  1637                           
  1638  0047                     NVMRead@len:	
  1639                           ; 1 bytes @ 0x1
  1640                           
  1641  0047                     NVMWrite@source:	
  1642                           ; 1 bytes @ 0x1
  1643                           
  1644                           
  1645                           ; 1 bytes @ 0x1
  1646  0047                     	ds	1
  1647  0048                     ??_CC1Strobe:	
  1648  0048                     ?_CC1Write:	
  1649                           ; 0 bytes @ 0x2
  1650                           
  1651  0048                     ??_NVMRead:	
  1652                           ; 0 bytes @ 0x2
  1653                           
  1654  0048                     SPIRead@dstPtr:	
  1655                           ; 0 bytes @ 0x2
  1656                           
  1657  0048                     CC1Write@src:	
  1658                           ; 1 bytes @ 0x2
  1659                           
  1660  0048                     NVMWrite@len:	
  1661                           ; 1 bytes @ 0x2
  1662                           
  1663  0048                     DLYDelay_ms@i:	
  1664                           ; 1 bytes @ 0x2
  1665                           
  1666  0048                     ___lwdiv@dividend:	
  1667                           ; 2 bytes @ 0x2
  1668                           
  1669                           
  1670                           ; 2 bytes @ 0x2
  1671  0048                     	ds	1
  1672  0049                     ??_NVMWrite:	
  1673  0049                     SPIRead@i:	
  1674                           ; 0 bytes @ 0x3
  1675                           
  1676  0049                     CC1Strobe@e_stb:	
  1677                           ; 1 bytes @ 0x3
  1678                           
  1679  0049                     CC1Write@len:	
  1680                           ; 1 bytes @ 0x3
  1681                           
  1682                           
  1683                           ; 1 bytes @ 0x3
  1684  0049                     	ds	1
  1685  004A                     ??_CC1Write:	
  1686  004A                     ?_CC1Read:	
  1687                           ; 0 bytes @ 0x4
  1688                           
  1689  004A                     ??_LEDNormalFlash:	
  1690                           ; 0 bytes @ 0x4
  1691                           
  1692  004A                     ??_LEDFastFlash:	
  1693                           ; 0 bytes @ 0x4
  1694                           
  1695  004A                     CC1Strobe@cc1Stb:	
  1696                           ; 0 bytes @ 0x4
  1697                           
  1698  004A                     CC1Read@dst:	
  1699                           ; 1 bytes @ 0x4
  1700                           
  1701  004A                     NVMRead@addr:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704  004A                     ___lwdiv@counter:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707                           
  1708                           ; 1 bytes @ 0x4
  1709  004A                     	ds	1
  1710  004B                     ??_SLPSleep:	
  1711  004B                     CC1Read@len:	
  1712                           ; 0 bytes @ 0x5
  1713                           
  1714  004B                     CC1Write@addr:	
  1715                           ; 1 bytes @ 0x5
  1716                           
  1717  004B                     LEDNormalFlash@num:	
  1718                           ; 1 bytes @ 0x5
  1719                           
  1720  004B                     LEDFastFlash@num:	
  1721                           ; 1 bytes @ 0x5
  1722                           
  1723  004B                     NVMRead@i:	
  1724                           ; 1 bytes @ 0x5
  1725                           
  1726  004B                     NVMWrite@addr:	
  1727                           ; 1 bytes @ 0x5
  1728                           
  1729  004B                     ___lwdiv@quotient:	
  1730                           ; 1 bytes @ 0x5
  1731                           
  1732                           
  1733                           ; 2 bytes @ 0x5
  1734  004B                     	ds	1
  1735  004C                     ??_PGMReadNvm:	
  1736  004C                     ??_CC1Read:	
  1737                           ; 0 bytes @ 0x6
  1738                           
  1739  004C                     CC1Write@cc1Addr:	
  1740                           ; 0 bytes @ 0x6
  1741                           
  1742  004C                     LEDNormalFlash@i:	
  1743                           ; 1 bytes @ 0x6
  1744                           
  1745  004C                     LEDFastFlash@i:	
  1746                           ; 1 bytes @ 0x6
  1747                           
  1748  004C                     NVMWrite@i:	
  1749                           ; 1 bytes @ 0x6
  1750                           
  1751  004C                     SLPSleep@IOCBTmp:	
  1752                           ; 1 bytes @ 0x6
  1753                           
  1754                           
  1755                           ; 1 bytes @ 0x6
  1756  004C                     	ds	1
  1757  004D                     ??_ADCTask:	
  1758  004D                     ??_CC1Init:	
  1759                           ; 0 bytes @ 0x7
  1760                           
  1761  004D                     ??_PGMWriteNvm:	
  1762                           ; 0 bytes @ 0x7
  1763                           
  1764  004D                     CC1Read@addr:	
  1765                           ; 0 bytes @ 0x7
  1766                           
  1767  004D                     SLPSleep@INTCONTmp:	
  1768                           ; 1 bytes @ 0x7
  1769                           
  1770                           
  1771                           ; 1 bytes @ 0x7
  1772  004D                     	ds	1
  1773  004E                     CC1Read@cc1Addr:	
  1774  004E                     SLPSleep@WPUBTmp:	
  1775                           ; 1 bytes @ 0x8
  1776                           
  1777                           
  1778                           ; 1 bytes @ 0x8
  1779  004E                     	ds	1
  1780  004F                     ??_PGMNvmReset:	
  1781  004F                     ??_PGMSelLong:	
  1782                           ; 0 bytes @ 0x9
  1783                           
  1784  004F                     ?_RTXSndPkt:	
  1785                           ; 0 bytes @ 0x9
  1786                           
  1787  004F                     ?_RTXRcvPkt:	
  1788                           ; 0 bytes @ 0x9
  1789                           
  1790  004F                     CC1Init@state:	
  1791                           ; 0 bytes @ 0x9
  1792                           
  1793  004F                     SLPSleep@WDTCONTmp:	
  1794                           ; 1 bytes @ 0x9
  1795                           
  1796  004F                     RTXSndPkt@len:	
  1797                           ; 1 bytes @ 0x9
  1798                           
  1799  004F                     RTXRcvPkt@len:	
  1800                           ; 1 bytes @ 0x9
  1801                           
  1802                           
  1803                           ; 1 bytes @ 0x9
  1804  004F                     	ds	1
  1805  0050                     ??_RTXSndPkt:	
  1806  0050                     ??_RTXRcvPkt:	
  1807                           ; 0 bytes @ 0xA
  1808                           
  1809  0050                     SLPSleep@OPTION_REGTmp:	
  1810                           ; 0 bytes @ 0xA
  1811                           
  1812  0050                     PGMInit@state:	
  1813                           ; 1 bytes @ 0xA
  1814                           
  1815                           
  1816                           ; 1 bytes @ 0xA
  1817  0050                     	ds	2
  1818  0052                     RTXSndPkt@src:	
  1819  0052                     RTXRcvPkt@dst:	
  1820                           ; 1 bytes @ 0xC
  1821                           
  1822                           
  1823                           ; 1 bytes @ 0xC
  1824  0052                     	ds	1
  1825  0053                     RTXSndPkt@numRxByte:	
  1826                           
  1827                           ; 1 bytes @ 0xD
  1828  0053                     	ds	1
  1829  0054                     RTXSndPkt@numTxByte:	
  1830                           
  1831                           ; 1 bytes @ 0xE
  1832  0054                     	ds	1
  1833  0055                     RTXSndPkt@sta:	
  1834                           
  1835                           ; 1 bytes @ 0xF
  1836  0055                     	ds	1
  1837  0056                     ??_RTXSendData:	
  1838  0056                     ??_RTXSendRPgm:	
  1839                           ; 0 bytes @ 0x10
  1840                           
  1841                           
  1842                           ; 0 bytes @ 0x10
  1843  0056                     	ds	1
  1844  0057                     ??_RTXReadPkt:	
  1845  0057                     ??_SYSTask:	
  1846                           ; 0 bytes @ 0x11
  1847                           
  1848  0057                     RTXInit@state:	
  1849                           ; 0 bytes @ 0x11
  1850                           
  1851                           
  1852                           ; 1 bytes @ 0x11
  1853  0057                     	ds	1
  1854  0058                     RTXReadPkt@numRxByte:	
  1855  0058                     SYSTask@i:	
  1856                           ; 1 bytes @ 0x12
  1857                           
  1858                           
  1859                           ; 1 bytes @ 0x12
  1860  0058                     	ds	1
  1861  0059                     ??_main:	
  1862                           
  1863                           ; 0 bytes @ 0x13
  1864  0059                     	ds	1
  1865  005A                     main@i:	
  1866                           
  1867                           ; 1 bytes @ 0x14
  1868  005A                     	ds	1
  1869                           
  1870                           	psect	maintext
  1871  00A0                     __pmaintext:	
  1872 ;;
  1873 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1874 ;;
  1875 ;; *************** function _main *****************
  1876 ;; Defined at:
  1877 ;;		line 40 in file "Sensore.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;		None
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;  i               1   20[BANK0 ] unsigned char 
  1882 ;; Return value:  Size  Location     Type
  1883 ;;		None               void
  1884 ;; Registers used:
  1885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 17F/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1891 ;;      Params:         0       0       0       0
  1892 ;;      Locals:         0       1       0       0
  1893 ;;      Temps:          0       1       0       0
  1894 ;;      Totals:         0       2       0       0
  1895 ;;Total ram usage:        2 bytes
  1896 ;; Hardware stack levels required when called:    8
  1897 ;; This function calls:
  1898 ;;		_INInit
  1899 ;;		_OUTInit
  1900 ;;		_SPIInit
  1901 ;;		_ADCInit
  1902 ;;		_ADCTask
  1903 ;;		_CC1Init
  1904 ;;		_LEDInit
  1905 ;;		_DINInit
  1906 ;;		_DINTask
  1907 ;;		_PGMInit
  1908 ;;		_RTXInit
  1909 ;;		_RTXTask
  1910 ;;		_SYSInit
  1911 ;;		_SYSTask
  1912 ;; This function is called by:
  1913 ;;		Startup code after reset
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           
  1918                           ;psect for function _main
  1919  00A0                     _main:	
  1920                           
  1921                           ;Sensore.c: 41: unsigned char i;
  1922                           ;Sensore.c: 44: for(i=0;i<3;i++)
  1923                           
  1924                           ;incstack = 0
  1925                           ; Regs used in _main: [allreg]
  1926  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  1927  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  1928  00A2  01DA               	clrf	main@i
  1929  00A3  3003               	movlw	3
  1930  00A4  025A               	subwf	main@i,w
  1931  00A5  1803               	btfsc	3,0
  1932  00A6  28EE               	goto	l533
  1933  00A7                     l532:	
  1934  00A7  0064               	clrwdt	;# 
  1935                           
  1936                           ;Sensore.c: 48: SYSInit(i);
  1937  00A8  1283               	bcf	3,5	;RP0=0, select bank0
  1938  00A9  1303               	bcf	3,6	;RP1=0, select bank0
  1939  00AA  085A               	movf	main@i,w
  1940  00AB  118A  2312  118A   	fcall	_SYSInit
  1941                           
  1942                           ;Sensore.c: 49: INInit(i);
  1943  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1944  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  1945  00B0  085A               	movf	main@i,w
  1946  00B1  118A  2593  118A   	fcall	_INInit
  1947                           
  1948                           ;Sensore.c: 50: OUTInit(i);
  1949  00B4  1283               	bcf	3,5	;RP0=0, select bank0
  1950  00B5  1303               	bcf	3,6	;RP1=0, select bank0
  1951  00B6  085A               	movf	main@i,w
  1952  00B7  118A  255C  118A   	fcall	_OUTInit
  1953                           
  1954                           ;Sensore.c: 51: DINInit(i);
  1955  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1956  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1957  00BC  085A               	movf	main@i,w
  1958  00BD  118A  2615  118A   	fcall	_DINInit
  1959                           
  1960                           ;Sensore.c: 52: LEDInit(i);
  1961  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1962  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1963  00C2  085A               	movf	main@i,w
  1964  00C3  118A  267E  118A   	fcall	_LEDInit
  1965                           
  1966                           ;Sensore.c: 53: SPIInit(i);
  1967  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1968  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1969  00C8  085A               	movf	main@i,w
  1970  00C9  118A  2424  118A   	fcall	_SPIInit
  1971                           
  1972                           ;Sensore.c: 54: CC1Init(i);
  1973  00CC  1283               	bcf	3,5	;RP0=0, select bank0
  1974  00CD  1303               	bcf	3,6	;RP1=0, select bank0
  1975  00CE  085A               	movf	main@i,w
  1976  00CF  118A  22E3  118A   	fcall	_CC1Init
  1977                           
  1978                           ;Sensore.c: 55: RTXInit(i);
  1979  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1980  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1981  00D4  085A               	movf	main@i,w
  1982  00D5  118A  2390  118A   	fcall	_RTXInit
  1983                           
  1984                           ;Sensore.c: 56: PGMInit(i);
  1985  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  1986  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  1987  00DA  085A               	movf	main@i,w
  1988  00DB  118A  25C5  118A   	fcall	_PGMInit
  1989                           
  1990                           ;Sensore.c: 57: ADCInit(i);
  1991  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  1992  00DF  1303               	bcf	3,6	;RP1=0, select bank0
  1993  00E0  085A               	movf	main@i,w
  1994  00E1  118A  23B7  118A   	fcall	_ADCInit
  1995  00E4  3001               	movlw	1
  1996  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  1997  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  1998  00E7  00D9               	movwf	??_main
  1999  00E8  0859               	movf	??_main,w
  2000  00E9  07DA               	addwf	main@i,f
  2001  00EA  3003               	movlw	3
  2002  00EB  025A               	subwf	main@i,w
  2003  00EC  1C03               	skipc
  2004  00ED  28A7               	goto	l532
  2005  00EE                     l533:	
  2006                           
  2007                           ;Sensore.c: 58: }
  2008                           ;Sensore.c: 61: INTCONbits.GIE=1;
  2009  00EE  178B               	bsf	11,7	;volatile
  2010  00EF                     l534:	
  2011                           ;Sensore.c: 64: while(1)
  2012                           
  2013  00EF  0064               	clrwdt	;# 
  2014                           
  2015                           ;Sensore.c: 68: SYSTask();
  2016  00F0  118A  224C  118A   	fcall	_SYSTask
  2017                           
  2018                           ;Sensore.c: 69: DINTask();
  2019  00F3  118A  2523  118A   	fcall	_DINTask
  2020                           
  2021                           ;Sensore.c: 70: ADCTask();
  2022  00F6  118A  2036  118A   	fcall	_ADCTask
  2023                           
  2024                           ;Sensore.c: 71: RTXTask();
  2025  00F9  118A  26A4  118A   	fcall	_RTXTask
  2026  00FC  28EF               	goto	l534
  2027  00FD                     __end_of_main:	
  2028                           
  2029                           	psect	text1
  2030  024C                     __ptext1:	
  2031 ;; *************** function _SYSTask *****************
  2032 ;; Defined at:
  2033 ;;		line 44 in file "SYS.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;		None
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  i               1   18[BANK0 ] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;		None               void
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2047 ;;      Params:         0       0       0       0
  2048 ;;      Locals:         0       1       0       0
  2049 ;;      Temps:          0       1       0       0
  2050 ;;      Totals:         0       2       0       0
  2051 ;;Total ram usage:        2 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    7
  2054 ;; This function calls:
  2055 ;;		_CC1Init
  2056 ;;		_DINTick
  2057 ;;		_SLPSleep
  2058 ;;		_PGMSelLong
  2059 ;;		_RTXTick
  2060 ;; This function is called by:
  2061 ;;		_main
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           
  2066                           ;psect for function _SYSTask
  2067  024C                     _SYSTask:	
  2068                           
  2069                           ;SYS.c: 45: unsigned char i;
  2070                           ;SYS.c: 48: if(u_SYS_STA.TICK)
  2071                           
  2072                           ;incstack = 0
  2073                           ; Regs used in _SYSTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2074  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2075  024D  1303               	bcf	3,6	;RP1=0, select bank0
  2076  024E  1C33               	btfss	_u_SYS_STA,0
  2077  024F  2A57               	goto	l2639
  2078                           
  2079                           ;SYS.c: 49: {
  2080                           ;SYS.c: 51: u_SYS_STA.TICK=0;
  2081  0250  1033               	bcf	_u_SYS_STA,0
  2082                           
  2083                           ;SYS.c: 54: RTXTick();
  2084  0251  118A  2489  118A   	fcall	_RTXTick
  2085                           
  2086                           ;SYS.c: 55: DINTick();
  2087  0254  118A  2368  118A   	fcall	_DINTick
  2088  0257                     l2639:	
  2089                           
  2090                           ;SYS.c: 56: }
  2091                           ;SYS.c: 58: if(u_in_ev_long.sel)
  2092  0257  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0258  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0259  1C35               	btfss	_u_in_ev_long,0
  2095  025A  2A5F               	goto	l2645
  2096                           
  2097                           ;SYS.c: 59: {
  2098                           ;SYS.c: 61: u_in_ev_long.sel=0;
  2099  025B  1035               	bcf	_u_in_ev_long,0
  2100                           
  2101                           ;SYS.c: 62: PGMSelLong();
  2102  025C  118A  2636  118A   	fcall	_PGMSelLong
  2103  025F                     l2645:	
  2104                           
  2105                           ;SYS.c: 63: }
  2106                           ;SYS.c: 65: if(rtx_ev.sleep && (!(!PORTBbits.RB2)))
  2107  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2108  0260  1303               	bcf	3,6	;RP1=0, select bank0
  2109  0261  0825               	movf	_rtx_ev+1,w
  2110  0262  0424               	iorwf	_rtx_ev,w
  2111  0263  1D03               	btfss	3,2
  2112  0264  1D06               	btfss	6,2	;volatile
  2113  0265  2A6B               	goto	l2653
  2114                           
  2115                           ;SYS.c: 66: {
  2116                           ;SYS.c: 68: rtx_ev.sleep=0;
  2117  0266  01A4               	clrf	_rtx_ev
  2118  0267  01A5               	clrf	_rtx_ev+1
  2119                           
  2120                           ;SYS.c: 70: SLPSleep();
  2121  0268  118A  20FD  118A   	fcall	_SLPSleep
  2122  026B                     l2653:	
  2123                           
  2124                           ;SYS.c: 71: }
  2125                           ;SYS.c: 73: if(flg_slp.exitSleep)
  2126  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2127  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2128  026D  1C2B               	btfss	_flg_slp,0
  2129  026E  0008               	return
  2130                           
  2131                           ;SYS.c: 74: {
  2132                           ;SYS.c: 76: flg_slp.exitSleep=0;
  2133  026F  102B               	bcf	_flg_slp,0
  2134                           
  2135                           ;SYS.c: 78: for(i=0;i<3;i++)
  2136  0270  01D8               	clrf	SYSTask@i
  2137  0271                     L1:	
  2138  0271  3003               	movlw	3
  2139  0272  0258               	subwf	SYSTask@i,w
  2140  0273  1803               	btfsc	3,0
  2141  0274  0008               	return
  2142                           
  2143                           ;SYS.c: 79: CC1Init(i);
  2144  0275  0858               	movf	SYSTask@i,w
  2145  0276  118A  22E3  118A   	fcall	_CC1Init
  2146  0279  3001               	movlw	1
  2147  027A  1283               	bcf	3,5	;RP0=0, select bank0
  2148  027B  1303               	bcf	3,6	;RP1=0, select bank0
  2149  027C  00D7               	movwf	??_SYSTask
  2150  027D  0857               	movf	??_SYSTask,w
  2151  027E  07D8               	addwf	SYSTask@i,f
  2152  027F  2A71               	goto	L1
  2153  0280                     __end_of_SYSTask:	
  2154                           
  2155                           	psect	text2
  2156  0489                     __ptext2:	
  2157 ;; *************** function _RTXTick *****************
  2158 ;; Defined at:
  2159 ;;		line 79 in file "RTX.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;		None
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;		None
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2173 ;;      Params:         0       0       0       0
  2174 ;;      Locals:         0       0       0       0
  2175 ;;      Temps:          0       0       0       0
  2176 ;;      Totals:         0       0       0       0
  2177 ;;Total ram usage:        0 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    6
  2180 ;; This function calls:
  2181 ;;		_RTXSendData
  2182 ;; This function is called by:
  2183 ;;		_SYSTask
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           
  2188                           ;psect for function _RTXTick
  2189  0489                     _RTXTick:	
  2190                           
  2191                           ;RTX.c: 81: if(tmrRcvPkt)
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _RTXTick: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2195  0489  1283               	bcf	3,5	;RP0=0, select bank0
  2196  048A  1303               	bcf	3,6	;RP1=0, select bank0
  2197  048B  0832               	movf	_tmrRcvPkt,w
  2198  048C  1903               	btfsc	3,2
  2199  048D  2C98               	goto	l2555
  2200                           
  2201                           ;RTX.c: 82: {
  2202                           ;RTX.c: 83: tmrRcvPkt--;
  2203  048E  3001               	movlw	1
  2204  048F  02B2               	subwf	_tmrRcvPkt,f
  2205                           
  2206                           ;RTX.c: 84: if(!(tmrRcvPkt))
  2207  0490  08B2               	movf	_tmrRcvPkt,f
  2208  0491  1D03               	skipz
  2209  0492  2C98               	goto	l2555
  2210                           
  2211                           ;RTX.c: 85: RTXSendData();
  2212  0493  118A  2280  118A   	fcall	_RTXSendData
  2213  0496  1283               	bcf	3,5	;RP0=0, select bank0
  2214  0497  1303               	bcf	3,6	;RP1=0, select bank0
  2215  0498                     l2555:	
  2216                           
  2217                           ;RTX.c: 86: }
  2218                           ;RTX.c: 89: if(tmrPgm)
  2219  0498  1283               	bcf	3,5	;RP0=0, select bank0
  2220  0499  1303               	bcf	3,6	;RP1=0, select bank0
  2221  049A  0831               	movf	_tmrPgm,w
  2222  049B  1903               	btfsc	3,2
  2223  049C  0008               	return
  2224                           
  2225                           ;RTX.c: 90: {
  2226                           ;RTX.c: 91: tmrPgm--;
  2227  049D  3001               	movlw	1
  2228  049E  02B1               	subwf	_tmrPgm,f
  2229                           
  2230                           ;RTX.c: 92: if(!(tmrPgm))
  2231  049F  08B1               	movf	_tmrPgm,f
  2232  04A0  1D03               	skipz
  2233  04A1  0008               	return
  2234                           
  2235                           ;RTX.c: 93: {
  2236                           ;RTX.c: 95: rtx_flg.pgmRq=0;
  2237  04A2  102C               	bcf	_rtx_flg,0
  2238                           
  2239                           ;RTX.c: 97: cntSndData=0;
  2240  04A3  01AA               	clrf	_cntSndData
  2241                           
  2242                           ;RTX.c: 99: RTXSendData();
  2243  04A4  118A  2280         	fcall	_RTXSendData
  2244  04A6  1283               	bcf	3,5	;RP0=0, select bank0
  2245  04A7  1303               	bcf	3,6	;RP1=0, select bank0
  2246  04A8  0008               	return
  2247  04A9                     __end_of_RTXTick:	
  2248                           
  2249                           	psect	text3
  2250  0636                     __ptext3:	
  2251 ;; *************** function _PGMSelLong *****************
  2252 ;; Defined at:
  2253 ;;		line 71 in file "PGM.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;		None               void
  2260 ;; Registers used:
  2261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2267 ;;      Params:         0       0       0       0
  2268 ;;      Locals:         0       0       0       0
  2269 ;;      Temps:          0       1       0       0
  2270 ;;      Totals:         0       1       0       0
  2271 ;;Total ram usage:        1 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    5
  2274 ;; This function calls:
  2275 ;;		_LEDNormalFlash
  2276 ;;		_PGMWriteNvm
  2277 ;; This function is called by:
  2278 ;;		_SYSTask
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           
  2283                           ;psect for function _PGMSelLong
  2284  0636                     _PGMSelLong:	
  2285                           
  2286                           ;PGM.c: 73: pgm_cfg.sensId=TMR1L^TMR1H;
  2287                           
  2288                           ;incstack = 0
  2289                           ; Regs used in _PGMSelLong: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2290  0636  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0637  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0638  080E               	movf	14,w	;volatile
  2293  0639  060F               	xorwf	15,w	;volatile
  2294  063A  00CF               	movwf	??_PGMSelLong
  2295  063B  084F               	movf	??_PGMSelLong,w
  2296  063C  00BA               	movwf	_pgm_cfg+3
  2297                           
  2298                           ;PGM.c: 75: pgm_cfg.menu=0x01;
  2299  063D  01B9               	clrf	_pgm_cfg+2
  2300  063E  0AB9               	incf	_pgm_cfg+2,f
  2301                           
  2302                           ;PGM.c: 77: PGMWriteNvm();
  2303  063F  118A  2655  118A   	fcall	_PGMWriteNvm
  2304                           
  2305                           ;PGM.c: 79: LEDNormalFlash(3);
  2306  0642  3003               	movlw	3
  2307  0643  118A  23DC         	fcall	_LEDNormalFlash
  2308  0645  0008               	return
  2309  0646                     __end_of_PGMSelLong:	
  2310                           
  2311                           	psect	text4
  2312  00FD                     __ptext4:	
  2313 ;; *************** function _SLPSleep *****************
  2314 ;; Defined at:
  2315 ;;		line 7 in file "SLP.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;		None
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  OPTION_REGTm    1   10[BANK0 ] unsigned char 
  2320 ;;  WDTCONTmp       1    9[BANK0 ] unsigned char 
  2321 ;;  WPUBTmp         1    8[BANK0 ] unsigned char 
  2322 ;;  INTCONTmp       1    7[BANK0 ] unsigned char 
  2323 ;;  IOCBTmp         1    6[BANK0 ] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2333 ;;      Params:         0       0       0       0
  2334 ;;      Locals:         0       5       0       0
  2335 ;;      Temps:          0       1       0       0
  2336 ;;      Totals:         0       6       0       0
  2337 ;;Total ram usage:        6 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    5
  2340 ;; This function calls:
  2341 ;;		_CC1Sleep
  2342 ;; This function is called by:
  2343 ;;		_SYSTask
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           
  2348                           ;psect for function _SLPSleep
  2349  00FD                     _SLPSleep:	
  2350                           
  2351                           ;SLP.c: 8: unsigned char IOCBTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp;
  2352                           ;SLP.c: 10: CC1Sleep();
  2353                           
  2354                           ;incstack = 0
  2355                           ; Regs used in _SLPSleep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2356  00FD  118A  268A  118A   	fcall	_CC1Sleep
  2357                           
  2358                           ;SLP.c: 12: IOCBTmp=IOCB;
  2359  0100  1683               	bsf	3,5	;RP0=1, select bank1
  2360  0101  1303               	bcf	3,6	;RP1=0, select bank1
  2361  0102  0816               	movf	22,w	;volatile
  2362  0103  1283               	bcf	3,5	;RP0=0, select bank0
  2363  0104  1303               	bcf	3,6	;RP1=0, select bank0
  2364  0105  00CB               	movwf	??_SLPSleep
  2365  0106  084B               	movf	??_SLPSleep,w
  2366  0107  00CC               	movwf	SLPSleep@IOCBTmp
  2367                           
  2368                           ;SLP.c: 13: IOCB=0b00000100;
  2369  0108  3004               	movlw	4
  2370  0109  1683               	bsf	3,5	;RP0=1, select bank1
  2371  010A  1303               	bcf	3,6	;RP1=0, select bank1
  2372  010B  0096               	movwf	22	;volatile
  2373                           
  2374                           ;SLP.c: 14: INTCONTmp=INTCON;
  2375  010C  080B               	movf	11,w	;volatile
  2376  010D  1283               	bcf	3,5	;RP0=0, select bank0
  2377  010E  1303               	bcf	3,6	;RP1=0, select bank0
  2378  010F  00CB               	movwf	??_SLPSleep
  2379  0110  084B               	movf	??_SLPSleep,w
  2380  0111  00CD               	movwf	SLPSleep@INTCONTmp
  2381                           
  2382                           ;SLP.c: 15: INTCON=0b10001000;
  2383  0112  3088               	movlw	136
  2384  0113  008B               	movwf	11	;volatile
  2385                           
  2386                           ;SLP.c: 17: WPUBTmp=WPUB;
  2387  0114  1683               	bsf	3,5	;RP0=1, select bank1
  2388  0115  1303               	bcf	3,6	;RP1=0, select bank1
  2389  0116  0815               	movf	21,w	;volatile
  2390  0117  1283               	bcf	3,5	;RP0=0, select bank0
  2391  0118  1303               	bcf	3,6	;RP1=0, select bank0
  2392  0119  00CB               	movwf	??_SLPSleep
  2393  011A  084B               	movf	??_SLPSleep,w
  2394  011B  00CE               	movwf	SLPSleep@WPUBTmp
  2395                           
  2396                           ;SLP.c: 18: WPUB=0b00000100;
  2397  011C  3004               	movlw	4
  2398  011D  1683               	bsf	3,5	;RP0=1, select bank1
  2399  011E  1303               	bcf	3,6	;RP1=0, select bank1
  2400  011F  0095               	movwf	21	;volatile
  2401                           
  2402                           ;SLP.c: 20: WDTCONTmp=WDTCON;
  2403  0120  1283               	bcf	3,5	;RP0=0, select bank2
  2404  0121  1703               	bsf	3,6	;RP1=1, select bank2
  2405  0122  0805               	movf	5,w	;volatile
  2406  0123  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0124  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0125  00CB               	movwf	??_SLPSleep
  2409  0126  084B               	movf	??_SLPSleep,w
  2410  0127  00CF               	movwf	SLPSleep@WDTCONTmp
  2411                           
  2412                           ;SLP.c: 21: WDTCON=0b00010111;
  2413  0128  3017               	movlw	23
  2414  0129  1283               	bcf	3,5	;RP0=0, select bank2
  2415  012A  1703               	bsf	3,6	;RP1=1, select bank2
  2416  012B  0085               	movwf	5	;volatile
  2417                           
  2418                           ;SLP.c: 23: OPTION_REGTmp=OPTION_REG;
  2419  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2420  012D  1303               	bcf	3,6	;RP1=0, select bank1
  2421  012E  0801               	movf	1,w	;volatile
  2422  012F  1283               	bcf	3,5	;RP0=0, select bank0
  2423  0130  1303               	bcf	3,6	;RP1=0, select bank0
  2424  0131  00CB               	movwf	??_SLPSleep
  2425  0132  084B               	movf	??_SLPSleep,w
  2426  0133  00D0               	movwf	SLPSleep@OPTION_REGTmp
  2427                           
  2428                           ;SLP.c: 24: OPTION_REG=0b00001010;
  2429  0134  300A               	movlw	10
  2430  0135  1683               	bsf	3,5	;RP0=1, select bank1
  2431  0136  1303               	bcf	3,6	;RP1=0, select bank1
  2432  0137  0081               	movwf	1	;volatile
  2433  0138  0064               	clrwdt	;# 
  2434  0139  0063               	sleep	;# 
  2435                           
  2436                           ;SLP.c: 29: IOCB=IOCBTmp;
  2437  013A  1283               	bcf	3,5	;RP0=0, select bank0
  2438  013B  1303               	bcf	3,6	;RP1=0, select bank0
  2439  013C  084C               	movf	SLPSleep@IOCBTmp,w
  2440  013D  1683               	bsf	3,5	;RP0=1, select bank1
  2441  013E  1303               	bcf	3,6	;RP1=0, select bank1
  2442  013F  0096               	movwf	22	;volatile
  2443                           
  2444                           ;SLP.c: 30: INTCON=INTCONTmp;
  2445  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2446  0141  1303               	bcf	3,6	;RP1=0, select bank0
  2447  0142  084D               	movf	SLPSleep@INTCONTmp,w
  2448  0143  008B               	movwf	11	;volatile
  2449                           
  2450                           ;SLP.c: 31: WPUB=WPUBTmp;
  2451  0144  084E               	movf	SLPSleep@WPUBTmp,w
  2452  0145  1683               	bsf	3,5	;RP0=1, select bank1
  2453  0146  1303               	bcf	3,6	;RP1=0, select bank1
  2454  0147  0095               	movwf	21	;volatile
  2455                           
  2456                           ;SLP.c: 32: WDTCON=WDTCONTmp;
  2457  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2458  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2459  014A  084F               	movf	SLPSleep@WDTCONTmp,w
  2460  014B  1283               	bcf	3,5	;RP0=0, select bank2
  2461  014C  1703               	bsf	3,6	;RP1=1, select bank2
  2462  014D  0085               	movwf	5	;volatile
  2463                           
  2464                           ;SLP.c: 33: OPTION_REG=OPTION_REGTmp;
  2465  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2466  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2467  0150  0850               	movf	SLPSleep@OPTION_REGTmp,w
  2468  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2469  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2470  0153  0081               	movwf	1	;volatile
  2471                           
  2472                           ;SLP.c: 35: flg_slp.exitSleep=1;
  2473  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2474  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2475  0156  142B               	bsf	_flg_slp,0
  2476  0157  0008               	return
  2477  0158                     __end_of_SLPSleep:	
  2478                           
  2479                           	psect	text5
  2480  068A                     __ptext5:	
  2481 ;; *************** function _CC1Sleep *****************
  2482 ;; Defined at:
  2483 ;;		line 144 in file "CC1.c"
  2484 ;; Parameters:    Size  Location     Type
  2485 ;;		None
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;		None
  2488 ;; Return value:  Size  Location     Type
  2489 ;;		None               void
  2490 ;; Registers used:
  2491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2497 ;;      Params:         0       0       0       0
  2498 ;;      Locals:         0       0       0       0
  2499 ;;      Temps:          0       0       0       0
  2500 ;;      Totals:         0       0       0       0
  2501 ;;Total ram usage:        0 bytes
  2502 ;; Hardware stack levels used:    1
  2503 ;; Hardware stack levels required when called:    4
  2504 ;; This function calls:
  2505 ;;		_CC1Strobe
  2506 ;; This function is called by:
  2507 ;;		_SLPSleep
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           
  2512                           ;psect for function _CC1Sleep
  2513  068A                     _CC1Sleep:	
  2514                           
  2515                           ;CC1.c: 146: PORTAbits.RA5=0;
  2516                           
  2517                           ;incstack = 0
  2518                           ; Regs used in _CC1Sleep: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2519  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2520  068B  1303               	bcf	3,6	;RP1=0, select bank0
  2521  068C  1285               	bcf	5,5	;volatile
  2522                           
  2523                           ;CC1.c: 148: CC1Strobe(SWOR);
  2524  068D  3038               	movlw	56
  2525  068E  118A  25DD         	fcall	_CC1Strobe
  2526                           
  2527                           ;CC1.c: 150: PORTAbits.RA5=1;
  2528  0690  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0691  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0692  1685               	bsf	5,5	;volatile
  2531  0693  0008               	return
  2532  0694                     __end_of_CC1Sleep:	
  2533                           
  2534                           	psect	text6
  2535  0368                     __ptext6:	
  2536 ;; *************** function _DINTick *****************
  2537 ;; Defined at:
  2538 ;;		line 47 in file "DIN.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;		None
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;		None               void
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2552 ;;      Params:         0       0       0       0
  2553 ;;      Locals:         0       0       0       0
  2554 ;;      Temps:          1       0       0       0
  2555 ;;      Totals:         1       0       0       0
  2556 ;;Total ram usage:        1 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    2
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_SYSTask
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           
  2567                           ;psect for function _DINTick
  2568  0368                     _DINTick:	
  2569                           
  2570                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  2571                           
  2572                           ;incstack = 0
  2573                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  2574  0368  1C77               	btfss	_u_flg_din,0
  2575  0369  2B7B               	goto	l220
  2576                           
  2577                           ;DIN.c: 51: {
  2578                           ;DIN.c: 52: tmrDbncSel++;
  2579  036A  3001               	movlw	1
  2580  036B  00F4               	movwf	??_DINTick
  2581  036C  0874               	movf	??_DINTick,w
  2582  036D  1283               	bcf	3,5	;RP0=0, select bank0
  2583  036E  1303               	bcf	3,6	;RP1=0, select bank0
  2584  036F  07B0               	addwf	_tmrDbncSel,f
  2585                           
  2586                           ;DIN.c: 53: if(tmrDbncSel>5)
  2587  0370  3006               	movlw	6
  2588  0371  0230               	subwf	_tmrDbncSel,w
  2589  0372  1C03               	skipc
  2590  0373  2B7B               	goto	l220
  2591                           
  2592                           ;DIN.c: 54: {
  2593                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  2594  0374  1077               	bcf	_u_flg_din,0
  2595                           
  2596                           ;DIN.c: 56: tmrDbncSel=0;
  2597  0375  01B0               	clrf	_tmrDbncSel
  2598                           
  2599                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  2600  0376  1C78               	btfss	_u_in_sta_currTask,0
  2601  0377  2B7A               	goto	l222
  2602                           
  2603                           ;DIN.c: 59: u_in_ev_down.sel=1;
  2604  0378  1434               	bsf	_u_in_ev_down,0
  2605  0379  2B7B               	goto	l220
  2606  037A                     l222:	
  2607                           
  2608                           ;DIN.c: 60: else
  2609                           ;DIN.c: 61: u_in_ev_up.sel=1;
  2610  037A  1436               	bsf	_u_in_ev_up,0
  2611  037B                     l220:	
  2612                           
  2613                           ;DIN.c: 62: }
  2614                           ;DIN.c: 63: }
  2615                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  2616  037B  1CF7               	btfss	_u_flg_din,1
  2617  037C  0008               	return
  2618                           
  2619                           ;DIN.c: 67: {
  2620                           ;DIN.c: 68: tmrLongSel++;
  2621  037D  3001               	movlw	1
  2622  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2623  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2624  0380  07A6               	addwf	_tmrLongSel,f
  2625  0381  1803               	skipnc
  2626  0382  0AA7               	incf	_tmrLongSel+1,f
  2627  0383  3000               	movlw	0
  2628  0384  07A7               	addwf	_tmrLongSel+1,f
  2629                           
  2630                           ;DIN.c: 69: if(tmrLongSel>200)
  2631  0385  3000               	movlw	0
  2632  0386  0227               	subwf	_tmrLongSel+1,w
  2633  0387  30C9               	movlw	201
  2634  0388  1903               	skipnz
  2635  0389  0226               	subwf	_tmrLongSel,w
  2636  038A  1C03               	skipc
  2637  038B  0008               	return
  2638                           
  2639                           ;DIN.c: 70: {
  2640                           ;DIN.c: 72: tmrLongSel=0;
  2641  038C  01A6               	clrf	_tmrLongSel
  2642  038D  01A7               	clrf	_tmrLongSel+1
  2643                           
  2644                           ;DIN.c: 74: u_in_ev_long.sel=1;
  2645  038E  1435               	bsf	_u_in_ev_long,0
  2646  038F  0008               	return
  2647  0390                     __end_of_DINTick:	
  2648                           
  2649                           	psect	text7
  2650  02E3                     __ptext7:	
  2651 ;; *************** function _CC1Init *****************
  2652 ;; Defined at:
  2653 ;;		line 74 in file "CC1.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  state           1    wreg     unsigned char 
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;  state           1    9[BANK0 ] unsigned char 
  2658 ;; Return value:  Size  Location     Type
  2659 ;;		None               void
  2660 ;; Registers used:
  2661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2667 ;;      Params:         0       0       0       0
  2668 ;;      Locals:         0       1       0       0
  2669 ;;      Temps:          0       2       0       0
  2670 ;;      Totals:         0       3       0       0
  2671 ;;Total ram usage:        3 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    4
  2674 ;; This function calls:
  2675 ;;		_CC1Strobe
  2676 ;;		_CC1Write
  2677 ;; This function is called by:
  2678 ;;		_SYSTask
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _CC1Init
  2685  02E3                     _CC1Init:	
  2686                           
  2687                           ;incstack = 0
  2688                           ; Regs used in _CC1Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2689                           ;CC1Init@state stored from wreg
  2690  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  2691  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  2692  02E5  00CF               	movwf	CC1Init@state
  2693                           
  2694                           ;CC1.c: 75: switch(state)
  2695  02E6  2B07               	goto	l2349
  2696  02E7                     l2345:	
  2697                           ;CC1.c: 83: case 2:
  2698                           
  2699                           ;CC1.c: 82: break;
  2700                           
  2701                           ;CC1.c: 76: {
  2702                           ;CC1.c: 80: case 1:
  2703                           
  2704                           
  2705                           ;CC1.c: 85: CC1Strobe(SRES);
  2706  02E7  3030               	movlw	48
  2707  02E8  118A  25DD  118A   	fcall	_CC1Strobe
  2708                           
  2709                           ;CC1.c: 86: CC1Write(0x00,cc1InitVal,0x2E);
  2710  02EB  30A0               	movlw	_cc1InitVal& (0+255)
  2711  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2712  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2713  02EE  00CD               	movwf	??_CC1Init
  2714  02EF  084D               	movf	??_CC1Init,w
  2715  02F0  00C8               	movwf	?_CC1Write
  2716  02F1  302E               	movlw	46
  2717  02F2  00CE               	movwf	??_CC1Init+1
  2718  02F3  084E               	movf	??_CC1Init+1,w
  2719  02F4  00C9               	movwf	?_CC1Write+1
  2720  02F5  3000               	movlw	0
  2721  02F6  118A  2506  118A   	fcall	_CC1Write
  2722                           
  2723                           ;CC1.c: 87: CC1Write(0x3E,cc1PaTable,8);
  2724  02F9  305B               	movlw	_cc1PaTable& (0+255)
  2725  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2726  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  2727  02FC  00CD               	movwf	??_CC1Init
  2728  02FD  084D               	movf	??_CC1Init,w
  2729  02FE  00C8               	movwf	?_CC1Write
  2730  02FF  3008               	movlw	8
  2731  0300  00CE               	movwf	??_CC1Init+1
  2732  0301  084E               	movf	??_CC1Init+1,w
  2733  0302  00C9               	movwf	?_CC1Write+1
  2734  0303  303E               	movlw	62
  2735  0304  118A  2506         	fcall	_CC1Write
  2736                           
  2737                           ;CC1.c: 89: }
  2738                           
  2739                           ;CC1.c: 88: break;
  2740  0306  0008               	return
  2741  0307                     l2349:	
  2742  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2743  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2744  0309  084F               	movf	CC1Init@state,w
  2745                           
  2746                           ; Switch size 1, requested type "space"
  2747                           ; Number of cases is 2, Range of values is 1 to 2
  2748                           ; switch strategies available:
  2749                           ; Name         Instructions Cycles
  2750                           ; simple_byte            7     4 (average)
  2751                           ; direct_byte           14    10 (fixed)
  2752                           ; jumptable            263     9 (fixed)
  2753                           ;	Chosen strategy is simple_byte
  2754  030A  3A01               	xorlw	1	; case 1
  2755  030B  1903               	skipnz
  2756  030C  2B11               	goto	l143
  2757  030D  3A03               	xorlw	3	; case 2
  2758  030E  1903               	skipnz
  2759  030F  2AE7               	goto	l2345
  2760  0310  2B11               	goto	l143
  2761  0311                     l143:	
  2762  0311  0008               	return
  2763  0312                     __end_of_CC1Init:	
  2764                           
  2765                           	psect	text8
  2766  0312                     __ptext8:	
  2767 ;; *************** function _SYSInit *****************
  2768 ;; Defined at:
  2769 ;;		line 17 in file "SYS.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;  state           1    wreg     unsigned char 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  state           1    5[COMMON] unsigned char 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;		None               void
  2776 ;; Registers used:
  2777 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2783 ;;      Params:         0       0       0       0
  2784 ;;      Locals:         1       0       0       0
  2785 ;;      Temps:          1       0       0       0
  2786 ;;      Totals:         2       0       0       0
  2787 ;;Total ram usage:        2 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    2
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_main
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           
  2798                           ;psect for function _SYSInit
  2799  0312                     _SYSInit:	
  2800                           
  2801                           ;incstack = 0
  2802                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  2803                           ;SYSInit@state stored from wreg
  2804  0312  00F5               	movwf	SYSInit@state
  2805                           
  2806                           ;SYS.c: 18: switch(state)
  2807  0313  2B35               	goto	l2179
  2808  0314                     l2157:	
  2809                           ;SYS.c: 19: {
  2810                           ;SYS.c: 20: case 0:
  2811                           
  2812                           
  2813                           ;SYS.c: 22: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; IOCB=0b00000000
      +                          ; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000
      +                          ; PIE1=0b00000000; PIE2=0b00000000;
  2814  0314  3006               	movlw	6
  2815  0315  1683               	bsf	3,5	;RP0=1, select bank1
  2816  0316  1303               	bcf	3,6	;RP1=0, select bank1
  2817  0317  0081               	movwf	1	;volatile
  2818  0318  3071               	movlw	113
  2819  0319  008F               	movwf	15	;volatile
  2820  031A  3009               	movlw	9
  2821  031B  1283               	bcf	3,5	;RP0=0, select bank2
  2822  031C  1703               	bsf	3,6	;RP1=1, select bank2
  2823  031D  0085               	movwf	5	;volatile
  2824  031E  1683               	bsf	3,5	;RP0=1, select bank1
  2825  031F  1303               	bcf	3,6	;RP1=0, select bank1
  2826  0320  0196               	clrf	22	;volatile
  2827  0321  3063               	movlw	99
  2828  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2829  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2830  0324  0081               	movwf	1	;volatile
  2831  0325  168B               	bsf	11,5	;volatile
  2832  0326  30FB               	movlw	251
  2833  0327  00F4               	movwf	??_SYSInit
  2834  0328  0874               	movf	??_SYSInit,w
  2835  0329  058B               	andwf	11,f	;volatile
  2836  032A  018C               	clrf	12	;volatile
  2837  032B  018D               	clrf	13	;volatile
  2838  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2839  032D  1303               	bcf	3,6	;RP1=0, select bank1
  2840  032E  018C               	clrf	12	;volatile
  2841  032F  018D               	clrf	13	;volatile
  2842                           
  2843                           ;SYS.c: 23: break;
  2844  0330  0008               	return
  2845  0331                     l2175:	
  2846                           ;SYS.c: 24: case 1:
  2847                           
  2848                           
  2849                           ;SYS.c: 26: u_SYS_STA.VAL=0;
  2850  0331  1283               	bcf	3,5	;RP0=0, select bank0
  2851  0332  1303               	bcf	3,6	;RP1=0, select bank0
  2852  0333  01B3               	clrf	_u_SYS_STA
  2853                           
  2854                           ;SYS.c: 31: }
  2855                           
  2856                           ;SYS.c: 27: break;
  2857  0334  0008               	return
  2858  0335                     l2179:	
  2859  0335  0875               	movf	SYSInit@state,w
  2860                           
  2861                           ; Switch size 1, requested type "space"
  2862                           ; Number of cases is 2, Range of values is 0 to 1
  2863                           ; switch strategies available:
  2864                           ; Name         Instructions Cycles
  2865                           ; simple_byte            7     4 (average)
  2866                           ; direct_byte           11     7 (fixed)
  2867                           ; jumptable            260     6 (fixed)
  2868                           ;	Chosen strategy is simple_byte
  2869  0336  3A00               	xorlw	0	; case 0
  2870  0337  1903               	skipnz
  2871  0338  2B14               	goto	l2157
  2872  0339  3A01               	xorlw	1	; case 1
  2873  033A  1903               	skipnz
  2874  033B  2B31               	goto	l2175
  2875  033C  2B3D               	goto	l461
  2876  033D                     l461:	
  2877  033D  0008               	return
  2878  033E                     __end_of_SYSInit:	
  2879                           
  2880                           	psect	text9
  2881  06A4                     __ptext9:	
  2882 ;; *************** function _RTXTask *****************
  2883 ;; Defined at:
  2884 ;;		line 105 in file "RTX.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;		None
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;		None
  2889 ;; Return value:  Size  Location     Type
  2890 ;;		None               void
  2891 ;; Registers used:
  2892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2898 ;;      Params:         0       0       0       0
  2899 ;;      Locals:         0       0       0       0
  2900 ;;      Temps:          0       0       0       0
  2901 ;;      Totals:         0       0       0       0
  2902 ;;Total ram usage:        0 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    7
  2905 ;; This function calls:
  2906 ;;		_RTXReadPkt
  2907 ;; This function is called by:
  2908 ;;		_main
  2909 ;; This function uses a non-reentrant model
  2910 ;;
  2911                           
  2912                           
  2913                           ;psect for function _RTXTask
  2914  06A4                     _RTXTask:	
  2915                           
  2916                           ;RTX.c: 107: if(!(PORTBbits.RB0))
  2917                           
  2918                           ;incstack = 0
  2919                           ; Regs used in _RTXTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2920  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2921  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2922  06A6  1806               	btfsc	6,0	;volatile
  2923  06A7  0008               	return
  2924                           
  2925                           ;RTX.c: 108: RTXReadPkt();
  2926  06A8  118A  2158         	fcall	_RTXReadPkt
  2927  06AA  0008               	return
  2928  06AB                     __end_of_RTXTask:	
  2929                           
  2930                           	psect	text10
  2931  0158                     __ptext10:	
  2932 ;; *************** function _RTXReadPkt *****************
  2933 ;; Defined at:
  2934 ;;		line 142 in file "RTX.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  numRxByte       1   18[BANK0 ] unsigned char 
  2939 ;; Return value:  Size  Location     Type
  2940 ;;		None               void
  2941 ;; Registers used:
  2942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2948 ;;      Params:         0       0       0       0
  2949 ;;      Locals:         0       1       0       0
  2950 ;;      Temps:          0       1       0       0
  2951 ;;      Totals:         0       2       0       0
  2952 ;;Total ram usage:        2 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    6
  2955 ;; This function calls:
  2956 ;;		_CC1Strobe
  2957 ;;		_CC1Read
  2958 ;;		_LEDNormalFlash
  2959 ;;		_PGMWriteNvm
  2960 ;;		_RTXSendData
  2961 ;;		_RTXRcvPkt
  2962 ;;		_RTXSendRPgm
  2963 ;; This function is called by:
  2964 ;;		_RTXTask
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function _RTXReadPkt
  2970  0158                     _RTXReadPkt:	
  2971  0158                     l2611:	
  2972                           
  2973                           ;RTX.c: 193: }
  2974                           ;RTX.c: 194: }
  2975                           ;RTX.c: 195: }
  2976                           ;RTX.c: 197: CC1Read(0x3B,(&(numRxByte)),1);
  2977  0158  3058               	movlw	RTXReadPkt@numRxByte& (0+255)
  2978  0159  1283               	bcf	3,5	;RP0=0, select bank0
  2979  015A  1303               	bcf	3,6	;RP1=0, select bank0
  2980  015B  00D7               	movwf	??_RTXReadPkt
  2981  015C  0857               	movf	??_RTXReadPkt,w
  2982  015D  00CA               	movwf	?_CC1Read
  2983  015E  01CB               	clrf	?_CC1Read+1
  2984  015F  0ACB               	incf	?_CC1Read+1,f
  2985  0160  303B               	movlw	59
  2986  0161  118A  24E9  118A   	fcall	_CC1Read
  2987  0164  3005               	movlw	5
  2988  0165  1283               	bcf	3,5	;RP0=0, select bank0
  2989  0166  1303               	bcf	3,6	;RP1=0, select bank0
  2990  0167  0258               	subwf	RTXReadPkt@numRxByte,w
  2991  0168  1C03               	btfss	3,0
  2992  0169  0008               	return
  2993                           
  2994                           ;RTX.c: 147: while(numRxByte>=5)
  2995                           
  2996                           ;RTX.c: 143: unsigned char numRxByte;
  2997                           ;RTX.c: 146: CC1Read(0x3B,(&(numRxByte)),1);
  2998                           
  2999                           ;incstack = 0
  3000                           ; Regs used in _RTXReadPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3001  016A  0064               	clrwdt	;# 
  3002                           
  3003                           ;RTX.c: 151: RTXRcvPkt(pktRx,5);
  3004  016B  3005               	movlw	5
  3005  016C  1283               	bcf	3,5	;RP0=0, select bank0
  3006  016D  1303               	bcf	3,6	;RP1=0, select bank0
  3007  016E  00D7               	movwf	??_RTXReadPkt
  3008  016F  0857               	movf	??_RTXReadPkt,w
  3009  0170  00CF               	movwf	?_RTXRcvPkt
  3010  0171  303C               	movlw	_pktRx& (0+255)
  3011  0172  118A  2646  118A   	fcall	_RTXRcvPkt
  3012                           
  3013                           ;RTX.c: 153: if(rtx_flg.pgmRq)
  3014  0175  1283               	bcf	3,5	;RP0=0, select bank0
  3015  0176  1303               	bcf	3,6	;RP1=0, select bank0
  3016  0177  1C2C               	btfss	_rtx_flg,0
  3017  0178  2997               	goto	l2597
  3018                           
  3019                           ;RTX.c: 154: {
  3020                           ;RTX.c: 155: if(pktRx[0]==0x00)
  3021  0179  08BC               	movf	_pktRx,f
  3022  017A  1D03               	skipz
  3023  017B  2958               	goto	l2611
  3024                           
  3025                           ;RTX.c: 156: {
  3026                           ;RTX.c: 158: if(pktRx[2]==PGM)
  3027  017C  083E               	movf	_pktRx+2,w
  3028  017D  3A01               	xorlw	1
  3029  017E  1D03               	skipz
  3030  017F  2958               	goto	l2611
  3031                           
  3032                           ;RTX.c: 159: {
  3033                           ;RTX.c: 161: pgm_cfg.baseId=pktRx[1];
  3034  0180  083D               	movf	_pktRx+1,w
  3035  0181  00D7               	movwf	??_RTXReadPkt
  3036  0182  0857               	movf	??_RTXReadPkt,w
  3037  0183  00BB               	movwf	_pgm_cfg+4
  3038                           
  3039                           ;RTX.c: 162: PGMWriteNvm();
  3040  0184  118A  2655  118A   	fcall	_PGMWriteNvm
  3041                           
  3042                           ;RTX.c: 164: RTXSendRPgm();
  3043  0187  118A  25AD  118A   	fcall	_RTXSendRPgm
  3044                           
  3045                           ;RTX.c: 166: rtx_flg.pgmRq=0;
  3046  018A  1283               	bcf	3,5	;RP0=0, select bank0
  3047  018B  1303               	bcf	3,6	;RP1=0, select bank0
  3048  018C  102C               	bcf	_rtx_flg,0
  3049                           
  3050                           ;RTX.c: 168: tmrRcvPkt=0;
  3051  018D  01B2               	clrf	_tmrRcvPkt
  3052                           
  3053                           ;RTX.c: 170: cntSndData=0;
  3054  018E  01AA               	clrf	_cntSndData
  3055                           
  3056                           ;RTX.c: 172: RTXSendData();
  3057  018F  118A  2280  118A   	fcall	_RTXSendData
  3058                           
  3059                           ;RTX.c: 174: LEDNormalFlash(3);
  3060  0192  3003               	movlw	3
  3061  0193  118A  23DC  118A   	fcall	_LEDNormalFlash
  3062                           
  3063                           ;RTX.c: 175: }
  3064                           ;RTX.c: 176: }
  3065                           ;RTX.c: 177: }
  3066  0196  2958               	goto	l2611
  3067  0197                     l2597:	
  3068                           
  3069                           ;RTX.c: 178: else
  3070                           ;RTX.c: 179: {
  3071                           ;RTX.c: 180: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  3072  0197  1283               	bcf	3,5	;RP0=0, select bank0
  3073  0198  1303               	bcf	3,6	;RP1=0, select bank0
  3074  0199  083A               	movf	_pgm_cfg+3,w
  3075  019A  063C               	xorwf	_pktRx,w
  3076  019B  1D03               	skipz
  3077  019C  2958               	goto	l2611
  3078  019D  083B               	movf	_pgm_cfg+4,w
  3079  019E  063D               	xorwf	_pktRx+1,w
  3080  019F  1D03               	skipz
  3081  01A0  2958               	goto	l2611
  3082                           
  3083                           ;RTX.c: 181: {
  3084                           ;RTX.c: 183: if(pktRx[2]==rDAT)
  3085  01A1  083E               	movf	_pktRx+2,w
  3086  01A2  3A80               	xorlw	128
  3087  01A3  1D03               	skipz
  3088  01A4  2958               	goto	l2611
  3089                           
  3090                           ;RTX.c: 184: {
  3091                           ;RTX.c: 186: CC1Strobe(SIDLE);
  3092  01A5  3036               	movlw	54
  3093  01A6  118A  25DD  118A   	fcall	_CC1Strobe
  3094                           
  3095                           ;RTX.c: 188: tmrRcvPkt=0;
  3096  01A9  1283               	bcf	3,5	;RP0=0, select bank0
  3097  01AA  1303               	bcf	3,6	;RP1=0, select bank0
  3098  01AB  01B2               	clrf	_tmrRcvPkt
  3099                           
  3100                           ;RTX.c: 190: cntSndData=0;
  3101  01AC  01AA               	clrf	_cntSndData
  3102                           
  3103                           ;RTX.c: 192: rtx_ev.sleep=1;
  3104  01AD  3001               	movlw	1
  3105  01AE  00A4               	movwf	_rtx_ev
  3106  01AF  3000               	movlw	0
  3107  01B0  00A5               	movwf	_rtx_ev+1
  3108  01B1  2958               	goto	l2611
  3109  01B2                     __end_of_RTXReadPkt:	
  3110                           
  3111                           	psect	text11
  3112  05AD                     __ptext11:	
  3113 ;; *************** function _RTXSendRPgm *****************
  3114 ;; Defined at:
  3115 ;;		line 230 in file "RTX.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;		None               void
  3122 ;; Registers used:
  3123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3129 ;;      Params:         0       0       0       0
  3130 ;;      Locals:         0       0       0       0
  3131 ;;      Temps:          0       1       0       0
  3132 ;;      Totals:         0       1       0       0
  3133 ;;Total ram usage:        1 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    5
  3136 ;; This function calls:
  3137 ;;		_RTXSndPkt
  3138 ;; This function is called by:
  3139 ;;		_RTXReadPkt
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function _RTXSendRPgm
  3145  05AD                     _RTXSendRPgm:	
  3146                           
  3147                           ;RTX.c: 232: pktTx[0]=pgm_cfg.baseId;
  3148                           
  3149                           ;incstack = 0
  3150                           ; Regs used in _RTXSendRPgm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3151  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  3152  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  3153  05AF  083B               	movf	_pgm_cfg+4,w
  3154  05B0  00D6               	movwf	??_RTXSendRPgm
  3155  05B1  0856               	movf	??_RTXSendRPgm,w
  3156  05B2  00C1               	movwf	_pktTx
  3157                           
  3158                           ;RTX.c: 233: pktTx[1]=pgm_cfg.sensId;
  3159  05B3  083A               	movf	_pgm_cfg+3,w
  3160  05B4  00D6               	movwf	??_RTXSendRPgm
  3161  05B5  0856               	movf	??_RTXSendRPgm,w
  3162  05B6  00C2               	movwf	_pktTx+1
  3163                           
  3164                           ;RTX.c: 234: pktTx[2]=rPGM;
  3165  05B7  3081               	movlw	129
  3166  05B8  00D6               	movwf	??_RTXSendRPgm
  3167  05B9  0856               	movf	??_RTXSendRPgm,w
  3168  05BA  00C3               	movwf	_pktTx+2
  3169                           
  3170                           ;RTX.c: 235: pktTx[3]=0x00;
  3171  05BB  01C4               	clrf	_pktTx+3
  3172                           
  3173                           ;RTX.c: 236: pktTx[4]=0x00;
  3174  05BC  01C5               	clrf	_pktTx+4
  3175                           
  3176                           ;RTX.c: 239: RTXSndPkt(pktTx,5);
  3177  05BD  3005               	movlw	5
  3178  05BE  00D6               	movwf	??_RTXSendRPgm
  3179  05BF  0856               	movf	??_RTXSendRPgm,w
  3180  05C0  00CF               	movwf	?_RTXSndPkt
  3181  05C1  3041               	movlw	_pktTx& (0+255)
  3182  05C2  118A  21B2         	fcall	_RTXSndPkt
  3183  05C4  0008               	return
  3184  05C5                     __end_of_RTXSendRPgm:	
  3185                           
  3186                           	psect	text12
  3187  0646                     __ptext12:	
  3188 ;; *************** function _RTXRcvPkt *****************
  3189 ;; Defined at:
  3190 ;;		line 136 in file "RTX.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  dst             1    wreg     PTR unsigned char 
  3193 ;;		 -> pktRx(5), 
  3194 ;;  len             1    9[BANK0 ] unsigned char 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  dst             1   12[BANK0 ] PTR unsigned char 
  3197 ;;		 -> pktRx(5), 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3207 ;;      Params:         0       1       0       0
  3208 ;;      Locals:         0       1       0       0
  3209 ;;      Temps:          0       2       0       0
  3210 ;;      Totals:         0       4       0       0
  3211 ;;Total ram usage:        4 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    4
  3214 ;; This function calls:
  3215 ;;		_CC1Read
  3216 ;; This function is called by:
  3217 ;;		_RTXReadPkt
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function _RTXRcvPkt
  3223  0646                     _RTXRcvPkt:	
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _RTXRcvPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3227                           ;RTXRcvPkt@dst stored from wreg
  3228  0646  1283               	bcf	3,5	;RP0=0, select bank0
  3229  0647  1303               	bcf	3,6	;RP1=0, select bank0
  3230  0648  00D2               	movwf	RTXRcvPkt@dst
  3231                           
  3232                           ;RTX.c: 138: CC1Read(0x3F,dst,len);
  3233  0649  0852               	movf	RTXRcvPkt@dst,w
  3234  064A  00D0               	movwf	??_RTXRcvPkt
  3235  064B  0850               	movf	??_RTXRcvPkt,w
  3236  064C  00CA               	movwf	?_CC1Read
  3237  064D  084F               	movf	RTXRcvPkt@len,w
  3238  064E  00D1               	movwf	??_RTXRcvPkt+1
  3239  064F  0851               	movf	??_RTXRcvPkt+1,w
  3240  0650  00CB               	movwf	?_CC1Read+1
  3241  0651  303F               	movlw	63
  3242  0652  118A  24E9         	fcall	_CC1Read
  3243  0654  0008               	return
  3244  0655                     __end_of_RTXRcvPkt:	
  3245                           
  3246                           	psect	text13
  3247  03DC                     __ptext13:	
  3248 ;; *************** function _LEDNormalFlash *****************
  3249 ;; Defined at:
  3250 ;;		line 25 in file "LED.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  num             1    wreg     unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  num             1    5[BANK0 ] unsigned char 
  3255 ;;  i               1    6[BANK0 ] unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;		None               void
  3258 ;; Registers used:
  3259 ;;		wreg, status,2, status,0, pclath, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3265 ;;      Params:         0       0       0       0
  3266 ;;      Locals:         0       2       0       0
  3267 ;;      Temps:          0       1       0       0
  3268 ;;      Totals:         0       3       0       0
  3269 ;;Total ram usage:        3 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    3
  3272 ;; This function calls:
  3273 ;;		_DLYDelay_ms
  3274 ;; This function is called by:
  3275 ;;		_PGMSelLong
  3276 ;;		_RTXReadPkt
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           
  3281                           ;psect for function _LEDNormalFlash
  3282  03DC                     _LEDNormalFlash:	
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  3286                           ;LEDNormalFlash@num stored from wreg
  3287  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  3288  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  3289  03DE  00CB               	movwf	LEDNormalFlash@num
  3290                           
  3291                           ;LED.c: 26: unsigned char i;
  3292                           ;LED.c: 28: for(i=0;i<num;i++)
  3293  03DF  01CC               	clrf	LEDNormalFlash@i
  3294  03E0                     l2393:	
  3295  03E0  084B               	movf	LEDNormalFlash@num,w
  3296  03E1  024C               	subwf	LEDNormalFlash@i,w
  3297  03E2  1803               	btfsc	3,0
  3298  03E3  0008               	return
  3299  03E4  0064               	clrwdt	;# 
  3300                           
  3301                           ;LED.c: 31: PORTCbits.RC7=0;
  3302  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  3303  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  3304  03E7  1387               	bcf	7,7	;volatile
  3305                           
  3306                           ;LED.c: 32: DLYDelay_ms(200);
  3307  03E8  30C8               	movlw	200
  3308  03E9  00F4               	movwf	?_DLYDelay_ms
  3309  03EA  3000               	movlw	0
  3310  03EB  00F5               	movwf	?_DLYDelay_ms+1
  3311  03EC  118A  2447  118A   	fcall	_DLYDelay_ms
  3312                           
  3313                           ;LED.c: 33: PORTCbits.RC7=1;
  3314  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  3315  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  3316  03F1  1787               	bsf	7,7	;volatile
  3317                           
  3318                           ;LED.c: 34: DLYDelay_ms(200);
  3319  03F2  30C8               	movlw	200
  3320  03F3  00F4               	movwf	?_DLYDelay_ms
  3321  03F4  3000               	movlw	0
  3322  03F5  00F5               	movwf	?_DLYDelay_ms+1
  3323  03F6  118A  2447  118A   	fcall	_DLYDelay_ms
  3324  03F9  3001               	movlw	1
  3325  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  3326  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  3327  03FC  00CA               	movwf	??_LEDNormalFlash
  3328  03FD  084A               	movf	??_LEDNormalFlash,w
  3329  03FE  07CC               	addwf	LEDNormalFlash@i,f
  3330  03FF  2BE0               	goto	l2393
  3331  0400                     __end_of_LEDNormalFlash:	
  3332                           
  3333                           	psect	text14
  3334  0390                     __ptext14:	
  3335 ;; *************** function _RTXInit *****************
  3336 ;; Defined at:
  3337 ;;		line 54 in file "RTX.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  state           1    wreg     unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  state           1   17[BANK0 ] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;		None               void
  3344 ;; Registers used:
  3345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3351 ;;      Params:         0       0       0       0
  3352 ;;      Locals:         0       1       0       0
  3353 ;;      Temps:          0       0       0       0
  3354 ;;      Totals:         0       1       0       0
  3355 ;;Total ram usage:        1 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    6
  3358 ;; This function calls:
  3359 ;;		_CC1Strobe
  3360 ;;		_RTXSendData
  3361 ;; This function is called by:
  3362 ;;		_main
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           
  3367                           ;psect for function _RTXInit
  3368  0390                     _RTXInit:	
  3369                           
  3370                           ;incstack = 0
  3371                           ; Regs used in _RTXInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3372                           ;RTXInit@state stored from wreg
  3373  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3374  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3375  0392  00D7               	movwf	RTXInit@state
  3376                           
  3377                           ;RTX.c: 55: switch(state)
  3378  0393  2BA9               	goto	l2525
  3379  0394                     l2519:	
  3380                           ;RTX.c: 60: case 1:
  3381                           
  3382                           ;RTX.c: 59: break;
  3383                           
  3384                           ;RTX.c: 56: {
  3385                           ;RTX.c: 57: case 0:
  3386                           
  3387                           
  3388                           ;RTX.c: 62: tmrRcvPkt=0;
  3389  0394  01B2               	clrf	_tmrRcvPkt
  3390                           
  3391                           ;RTX.c: 63: tmrPgm=0;
  3392  0395  01B1               	clrf	_tmrPgm
  3393                           
  3394                           ;RTX.c: 64: cntSndData=0;
  3395  0396  01AA               	clrf	_cntSndData
  3396                           
  3397                           ;RTX.c: 65: rtx_ev.val=0;
  3398  0397  01A4               	clrf	_rtx_ev
  3399                           
  3400                           ;RTX.c: 66: rtx_flg.val=0;
  3401  0398  01AC               	clrf	_rtx_flg
  3402                           
  3403                           ;RTX.c: 67: break;
  3404  0399  0008               	return
  3405  039A                     l2521:	
  3406                           ;RTX.c: 68: case 2:
  3407                           
  3408                           
  3409                           ;RTX.c: 70: CC1Strobe(SIDLE);
  3410  039A  3036               	movlw	54
  3411  039B  118A  25DD  118A   	fcall	_CC1Strobe
  3412                           
  3413                           ;RTX.c: 71: CC1Strobe(SCAL);
  3414  039E  3033               	movlw	51
  3415  039F  118A  25DD  118A   	fcall	_CC1Strobe
  3416                           
  3417                           ;RTX.c: 72: CC1Strobe(SRX);
  3418  03A2  3034               	movlw	52
  3419  03A3  118A  25DD  118A   	fcall	_CC1Strobe
  3420                           
  3421                           ;RTX.c: 73: RTXSendData();
  3422  03A6  118A  2280         	fcall	_RTXSendData
  3423                           
  3424                           ;RTX.c: 75: }
  3425                           
  3426                           ;RTX.c: 74: break;
  3427  03A8  0008               	return
  3428  03A9                     l2525:	
  3429  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  3430  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  3431  03AB  0857               	movf	RTXInit@state,w
  3432                           
  3433                           ; Switch size 1, requested type "space"
  3434                           ; Number of cases is 3, Range of values is 0 to 2
  3435                           ; switch strategies available:
  3436                           ; Name         Instructions Cycles
  3437                           ; simple_byte           10     6 (average)
  3438                           ; direct_byte           13     7 (fixed)
  3439                           ; jumptable            260     6 (fixed)
  3440                           ;	Chosen strategy is simple_byte
  3441  03AC  3A00               	xorlw	0	; case 0
  3442  03AD  1903               	skipnz
  3443  03AE  2BB6               	goto	l360
  3444  03AF  3A01               	xorlw	1	; case 1
  3445  03B0  1903               	skipnz
  3446  03B1  2B94               	goto	l2519
  3447  03B2  3A03               	xorlw	3	; case 2
  3448  03B3  1903               	skipnz
  3449  03B4  2B9A               	goto	l2521
  3450  03B5  2BB6               	goto	l360
  3451  03B6                     l360:	
  3452  03B6  0008               	return
  3453  03B7                     __end_of_RTXInit:	
  3454                           
  3455                           	psect	text15
  3456  0280                     __ptext15:	
  3457 ;; *************** function _RTXSendData *****************
  3458 ;; Defined at:
  3459 ;;		line 202 in file "RTX.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;		None
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;		None
  3464 ;; Return value:  Size  Location     Type
  3465 ;;		None               void
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3473 ;;      Params:         0       0       0       0
  3474 ;;      Locals:         0       0       0       0
  3475 ;;      Temps:          0       1       0       0
  3476 ;;      Totals:         0       1       0       0
  3477 ;;Total ram usage:        1 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    5
  3480 ;; This function calls:
  3481 ;;		_LEDFastFlash
  3482 ;;		_RTXSndPkt
  3483 ;; This function is called by:
  3484 ;;		_RTXInit
  3485 ;;		_RTXTick
  3486 ;;		_RTXReadPkt
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           
  3491                           ;psect for function _RTXSendData
  3492  0280                     _RTXSendData:	
  3493                           
  3494                           ;RTX.c: 204: if(cntSndData<5)
  3495                           
  3496                           ;incstack = 0
  3497                           ; Regs used in _RTXSendData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3498  0280  3005               	movlw	5
  3499  0281  1283               	bcf	3,5	;RP0=0, select bank0
  3500  0282  1303               	bcf	3,6	;RP1=0, select bank0
  3501  0283  022A               	subwf	_cntSndData,w
  3502  0284  1803               	skipnc
  3503  0285  2AAD               	goto	l2545
  3504                           
  3505                           ;RTX.c: 205: {
  3506                           ;RTX.c: 207: pktTx[0]=pgm_cfg.baseId;
  3507  0286  083B               	movf	_pgm_cfg+4,w
  3508  0287  00D6               	movwf	??_RTXSendData
  3509  0288  0856               	movf	??_RTXSendData,w
  3510  0289  00C1               	movwf	_pktTx
  3511                           
  3512                           ;RTX.c: 208: pktTx[1]=pgm_cfg.sensId;
  3513  028A  083A               	movf	_pgm_cfg+3,w
  3514  028B  00D6               	movwf	??_RTXSendData
  3515  028C  0856               	movf	??_RTXSendData,w
  3516  028D  00C2               	movwf	_pktTx+1
  3517                           
  3518                           ;RTX.c: 209: pktTx[2]=DAT;
  3519  028E  01C3               	clrf	_pktTx+2
  3520                           
  3521                           ;RTX.c: 210: pktTx[3]=temp;;
  3522  028F  082F               	movf	_temp,w
  3523  0290  00D6               	movwf	??_RTXSendData
  3524  0291  0856               	movf	??_RTXSendData,w
  3525  0292  00C4               	movwf	_pktTx+3
  3526                           
  3527                           ;RTX.c: 211: pktTx[4]=batt;;
  3528  0293  0829               	movf	_batt,w
  3529  0294  00D6               	movwf	??_RTXSendData
  3530  0295  0856               	movf	??_RTXSendData,w
  3531  0296  00C5               	movwf	_pktTx+4
  3532                           
  3533                           ;RTX.c: 214: RTXSndPkt(pktTx,5);
  3534  0297  3005               	movlw	5
  3535  0298  00D6               	movwf	??_RTXSendData
  3536  0299  0856               	movf	??_RTXSendData,w
  3537  029A  00CF               	movwf	?_RTXSndPkt
  3538  029B  3041               	movlw	_pktTx& (0+255)
  3539  029C  118A  21B2  118A   	fcall	_RTXSndPkt
  3540                           
  3541                           ;RTX.c: 217: tmrRcvPkt=100;
  3542  029F  3064               	movlw	100
  3543  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  3544  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  3545  02A2  00D6               	movwf	??_RTXSendData
  3546  02A3  0856               	movf	??_RTXSendData,w
  3547  02A4  00B2               	movwf	_tmrRcvPkt
  3548                           
  3549                           ;RTX.c: 220: cntSndData++;
  3550  02A5  3001               	movlw	1
  3551  02A6  00D6               	movwf	??_RTXSendData
  3552  02A7  0856               	movf	??_RTXSendData,w
  3553  02A8  07AA               	addwf	_cntSndData,f
  3554                           
  3555                           ;RTX.c: 223: LEDFastFlash(1);
  3556  02A9  3001               	movlw	1
  3557  02AA  118A  2400         	fcall	_LEDFastFlash
  3558                           
  3559                           ;RTX.c: 224: }
  3560  02AC  0008               	return
  3561  02AD                     l2545:	
  3562                           
  3563                           ;RTX.c: 225: else
  3564                           ;RTX.c: 226: rtx_ev.sleep=1;
  3565  02AD  3001               	movlw	1
  3566  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3567  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  3568  02B0  00A4               	movwf	_rtx_ev
  3569  02B1  3000               	movlw	0
  3570  02B2  00A5               	movwf	_rtx_ev+1
  3571  02B3  0008               	return
  3572  02B4                     __end_of_RTXSendData:	
  3573                           
  3574                           	psect	text16
  3575  01B2                     __ptext16:	
  3576 ;; *************** function _RTXSndPkt *****************
  3577 ;; Defined at:
  3578 ;;		line 112 in file "RTX.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  src             1    wreg     PTR unsigned char 
  3581 ;;		 -> pktTx(5), 
  3582 ;;  len             1    9[BANK0 ] unsigned char 
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;  src             1   12[BANK0 ] PTR unsigned char 
  3585 ;;		 -> pktTx(5), 
  3586 ;;  sta             1   15[BANK0 ] unsigned char 
  3587 ;;  numTxByte       1   14[BANK0 ] unsigned char 
  3588 ;;  numRxByte       1   13[BANK0 ] unsigned char 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;		None               void
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3598 ;;      Params:         0       1       0       0
  3599 ;;      Locals:         0       4       0       0
  3600 ;;      Temps:          0       2       0       0
  3601 ;;      Totals:         0       7       0       0
  3602 ;;Total ram usage:        7 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    4
  3605 ;; This function calls:
  3606 ;;		_CC1Strobe
  3607 ;;		_CC1Write
  3608 ;;		_CC1Read
  3609 ;; This function is called by:
  3610 ;;		_RTXSendData
  3611 ;;		_RTXSendRPgm
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function _RTXSndPkt
  3617  01B2                     _RTXSndPkt:	
  3618                           
  3619                           ;incstack = 0
  3620                           ; Regs used in _RTXSndPkt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3621                           ;RTXSndPkt@src stored from wreg
  3622  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  3623  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  3624  01B4  00D2               	movwf	RTXSndPkt@src
  3625  01B5                     l374:	
  3626                           ;RTX.c: 113: unsigned char sta,numRxByte,numTxByte;
  3627                           ;RTX.c: 116: do
  3628                           
  3629  01B5  0064               	clrwdt	;# 
  3630                           
  3631                           ;RTX.c: 119: CC1Read(0x35,(&(sta)),1);
  3632  01B6  3055               	movlw	RTXSndPkt@sta& (0+255)
  3633  01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3634  01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3635  01B9  00D0               	movwf	??_RTXSndPkt
  3636  01BA  0850               	movf	??_RTXSndPkt,w
  3637  01BB  00CA               	movwf	?_CC1Read
  3638  01BC  01CB               	clrf	?_CC1Read+1
  3639  01BD  0ACB               	incf	?_CC1Read+1,f
  3640  01BE  3035               	movlw	53
  3641  01BF  118A  24E9  118A   	fcall	_CC1Read
  3642                           
  3643                           ;RTX.c: 120: }
  3644                           ;RTX.c: 121: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  3645  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  3646  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  3647  01C4  0855               	movf	RTXSndPkt@sta,w
  3648  01C5  391F               	andlw	31
  3649  01C6  3A0D               	xorlw	13
  3650  01C7  1903               	skipnz
  3651  01C8  29CE               	goto	l2619
  3652  01C9  0855               	movf	RTXSndPkt@sta,w
  3653  01CA  391F               	andlw	31
  3654  01CB  3A01               	xorlw	1
  3655  01CC  1D03               	skipz
  3656  01CD  29B5               	goto	l374
  3657  01CE                     l2619:	
  3658                           
  3659                           ;RTX.c: 123: CC1Strobe(SIDLE);
  3660  01CE  3036               	movlw	54
  3661  01CF  118A  25DD  118A   	fcall	_CC1Strobe
  3662                           
  3663                           ;RTX.c: 124: CC1Read(0x3B,(&(numRxByte)),1);
  3664  01D2  3053               	movlw	RTXSndPkt@numRxByte& (0+255)
  3665  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  3666  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  3667  01D5  00D0               	movwf	??_RTXSndPkt
  3668  01D6  0850               	movf	??_RTXSndPkt,w
  3669  01D7  00CA               	movwf	?_CC1Read
  3670  01D8  01CB               	clrf	?_CC1Read+1
  3671  01D9  0ACB               	incf	?_CC1Read+1,f
  3672  01DA  303B               	movlw	59
  3673  01DB  118A  24E9  118A   	fcall	_CC1Read
  3674                           
  3675                           ;RTX.c: 125: CC1Read(0x3A,(&(numTxByte)),1);
  3676  01DE  3054               	movlw	RTXSndPkt@numTxByte& (0+255)
  3677  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  3678  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  3679  01E1  00D0               	movwf	??_RTXSndPkt
  3680  01E2  0850               	movf	??_RTXSndPkt,w
  3681  01E3  00CA               	movwf	?_CC1Read
  3682  01E4  01CB               	clrf	?_CC1Read+1
  3683  01E5  0ACB               	incf	?_CC1Read+1,f
  3684  01E6  303A               	movlw	58
  3685  01E7  118A  24E9  118A   	fcall	_CC1Read
  3686                           
  3687                           ;RTX.c: 127: CC1Strobe(SFTX);
  3688  01EA  303B               	movlw	59
  3689  01EB  118A  25DD  118A   	fcall	_CC1Strobe
  3690                           
  3691                           ;RTX.c: 128: CC1Read(0x3A,(&(numTxByte)),1);
  3692  01EE  3054               	movlw	RTXSndPkt@numTxByte& (0+255)
  3693  01EF  1283               	bcf	3,5	;RP0=0, select bank0
  3694  01F0  1303               	bcf	3,6	;RP1=0, select bank0
  3695  01F1  00D0               	movwf	??_RTXSndPkt
  3696  01F2  0850               	movf	??_RTXSndPkt,w
  3697  01F3  00CA               	movwf	?_CC1Read
  3698  01F4  01CB               	clrf	?_CC1Read+1
  3699  01F5  0ACB               	incf	?_CC1Read+1,f
  3700  01F6  303A               	movlw	58
  3701  01F7  118A  24E9  118A   	fcall	_CC1Read
  3702                           
  3703                           ;RTX.c: 130: CC1Write(0x3F,src,len);
  3704  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3705  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  3706  01FC  0852               	movf	RTXSndPkt@src,w
  3707  01FD  00D0               	movwf	??_RTXSndPkt
  3708  01FE  0850               	movf	??_RTXSndPkt,w
  3709  01FF  00C8               	movwf	?_CC1Write
  3710  0200  084F               	movf	RTXSndPkt@len,w
  3711  0201  00D1               	movwf	??_RTXSndPkt+1
  3712  0202  0851               	movf	??_RTXSndPkt+1,w
  3713  0203  00C9               	movwf	?_CC1Write+1
  3714  0204  303F               	movlw	63
  3715  0205  118A  2506  118A   	fcall	_CC1Write
  3716                           
  3717                           ;RTX.c: 132: CC1Strobe(STX);
  3718  0208  3035               	movlw	53
  3719  0209  118A  25DD         	fcall	_CC1Strobe
  3720  020B  0008               	return
  3721  020C                     __end_of_RTXSndPkt:	
  3722                           
  3723                           	psect	text17
  3724  04E9                     __ptext17:	
  3725 ;; *************** function _CC1Read *****************
  3726 ;; Defined at:
  3727 ;;		line 108 in file "CC1.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;  addr            1    wreg     unsigned char 
  3730 ;;  dst             1    4[BANK0 ] PTR unsigned char 
  3731 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3732 ;;		 -> RTXSndPkt@sta(1), 
  3733 ;;  len             1    5[BANK0 ] unsigned char 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  addr            1    7[BANK0 ] unsigned char 
  3736 ;;  cc1Addr         1    8[BANK0 ] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;		None               void
  3739 ;; Registers used:
  3740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3746 ;;      Params:         0       2       0       0
  3747 ;;      Locals:         0       2       0       0
  3748 ;;      Temps:          0       1       0       0
  3749 ;;      Totals:         0       5       0       0
  3750 ;;Total ram usage:        5 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    3
  3753 ;; This function calls:
  3754 ;;		_SPIRead
  3755 ;;		_SPIWrite
  3756 ;; This function is called by:
  3757 ;;		_RTXSndPkt
  3758 ;;		_RTXRcvPkt
  3759 ;;		_RTXReadPkt
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           
  3764                           ;psect for function _CC1Read
  3765  04E9                     _CC1Read:	
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _CC1Read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3769                           ;CC1Read@addr stored from wreg
  3770  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  3771  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  3772  04EB  00CD               	movwf	CC1Read@addr
  3773                           
  3774                           ;CC1.c: 109: unsigned char cc1Addr;
  3775                           ;CC1.c: 112: PORTAbits.RA5=0;
  3776  04EC  1285               	bcf	5,5	;volatile
  3777                           
  3778                           ;CC1.c: 115: cc1Addr=((addr&0b00111111)|0b11000000);
  3779  04ED  084D               	movf	CC1Read@addr,w
  3780  04EE  393F               	andlw	63
  3781  04EF  38C0               	iorlw	192
  3782  04F0  00CC               	movwf	??_CC1Read
  3783  04F1  084C               	movf	??_CC1Read,w
  3784  04F2  00CE               	movwf	CC1Read@cc1Addr
  3785                           
  3786                           ;CC1.c: 116: SPIWrite((&(cc1Addr)),1);
  3787  04F3  01F4               	clrf	?_SPIWrite
  3788  04F4  0AF4               	incf	?_SPIWrite,f
  3789  04F5  304E               	movlw	CC1Read@cc1Addr& (0+255)
  3790  04F6  118A  2540  118A   	fcall	_SPIWrite
  3791                           
  3792                           ;CC1.c: 119: SPIRead(dst,len);
  3793  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3794  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  3795  04FB  084B               	movf	CC1Read@len,w
  3796  04FC  00CC               	movwf	??_CC1Read
  3797  04FD  084C               	movf	??_CC1Read,w
  3798  04FE  00F4               	movwf	?_SPIRead
  3799  04FF  084A               	movf	CC1Read@dst,w
  3800  0500  118A  24A9         	fcall	_SPIRead
  3801                           
  3802                           ;CC1.c: 122: PORTAbits.RA5=1;
  3803  0502  1283               	bcf	3,5	;RP0=0, select bank0
  3804  0503  1303               	bcf	3,6	;RP1=0, select bank0
  3805  0504  1685               	bsf	5,5	;volatile
  3806  0505  0008               	return
  3807  0506                     __end_of_CC1Read:	
  3808                           
  3809                           	psect	text18
  3810  04A9                     __ptext18:	
  3811 ;; *************** function _SPIRead *****************
  3812 ;; Defined at:
  3813 ;;		line 26 in file "SPI.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  dstPtr          1    wreg     PTR unsigned char 
  3816 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3817 ;;		 -> RTXSndPkt@sta(1), 
  3818 ;;  len             1    4[COMMON] unsigned char 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  dstPtr          1    2[BANK0 ] PTR unsigned char 
  3821 ;;		 -> pktRx(5), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  3822 ;;		 -> RTXSndPkt@sta(1), 
  3823 ;;  i               1    3[BANK0 ] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;		None               void
  3826 ;; Registers used:
  3827 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3833 ;;      Params:         1       0       0       0
  3834 ;;      Locals:         0       2       0       0
  3835 ;;      Temps:          0       2       0       0
  3836 ;;      Totals:         1       4       0       0
  3837 ;;Total ram usage:        5 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    2
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_CC1Read
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           
  3848                           ;psect for function _SPIRead
  3849  04A9                     _SPIRead:	
  3850                           
  3851                           ;incstack = 0
  3852                           ; Regs used in _SPIRead: [wreg-fsr0h+status,2+status,0]
  3853                           ;SPIRead@dstPtr stored from wreg
  3854  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  3855  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  3856  04AB  00C8               	movwf	SPIRead@dstPtr
  3857                           
  3858                           ;SPI.c: 27: unsigned char i;
  3859                           ;SPI.c: 29: for(i=0;i<len;i++)
  3860  04AC  01C9               	clrf	SPIRead@i
  3861  04AD                     l2291:	
  3862  04AD  0874               	movf	SPIRead@len,w
  3863  04AE  0249               	subwf	SPIRead@i,w
  3864  04AF  1803               	btfsc	3,0
  3865  04B0  0008               	return
  3866                           
  3867                           ;SPI.c: 30: {
  3868                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  3869  04B1  118C               	bcf	12,3	;volatile
  3870                           
  3871                           ;SPI.c: 32: SSPBUF=0xFF;
  3872  04B2  30FF               	movlw	255
  3873  04B3  0093               	movwf	19	;volatile
  3874  04B4                     l57:	
  3875                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  3876                           
  3877  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  3878  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  3879  04B6  198C               	btfsc	12,3	;volatile
  3880  04B7  2CBA               	goto	l2287
  3881                           
  3882                           ;SPI.c: 34: _nop();
  3883  04B8  0000               	nop
  3884  04B9  2CB4               	goto	l57
  3885  04BA                     l2287:	
  3886                           
  3887                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  3888  04BA  0813               	movf	19,w	;volatile
  3889  04BB  00C6               	movwf	??_SPIRead
  3890  04BC  0849               	movf	SPIRead@i,w
  3891  04BD  0748               	addwf	SPIRead@dstPtr,w
  3892  04BE  00C7               	movwf	??_SPIRead+1
  3893  04BF  0847               	movf	??_SPIRead+1,w
  3894  04C0  0084               	movwf	4
  3895  04C1  0846               	movf	??_SPIRead,w
  3896  04C2  1383               	bcf	3,7	;select IRP bank0
  3897  04C3  0080               	movwf	0
  3898  04C4  3001               	movlw	1
  3899  04C5  00C6               	movwf	??_SPIRead
  3900  04C6  0846               	movf	??_SPIRead,w
  3901  04C7  07C9               	addwf	SPIRead@i,f
  3902  04C8  2CAD               	goto	l2291
  3903  04C9                     __end_of_SPIRead:	
  3904                           
  3905                           	psect	text19
  3906  0506                     __ptext19:	
  3907 ;; *************** function _CC1Write *****************
  3908 ;; Defined at:
  3909 ;;		line 126 in file "CC1.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  addr            1    wreg     unsigned char 
  3912 ;;  src             1    2[BANK0 ] PTR unsigned char 
  3913 ;;		 -> pktTx(5), cc1PaTable(8), cc1InitVal(47), 
  3914 ;;  len             1    3[BANK0 ] unsigned char 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  addr            1    5[BANK0 ] unsigned char 
  3917 ;;  cc1Addr         1    6[BANK0 ] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;		None               void
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3927 ;;      Params:         0       2       0       0
  3928 ;;      Locals:         0       2       0       0
  3929 ;;      Temps:          0       1       0       0
  3930 ;;      Totals:         0       5       0       0
  3931 ;;Total ram usage:        5 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:    3
  3934 ;; This function calls:
  3935 ;;		_SPIWrite
  3936 ;; This function is called by:
  3937 ;;		_CC1Init
  3938 ;;		_RTXSndPkt
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _CC1Write
  3944  0506                     _CC1Write:	
  3945                           
  3946                           ;incstack = 0
  3947                           ; Regs used in _CC1Write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3948                           ;CC1Write@addr stored from wreg
  3949  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3950  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3951  0508  00CB               	movwf	CC1Write@addr
  3952                           
  3953                           ;CC1.c: 127: unsigned char cc1Addr;
  3954                           ;CC1.c: 130: PORTAbits.RA5=0;
  3955  0509  1285               	bcf	5,5	;volatile
  3956                           
  3957                           ;CC1.c: 133: cc1Addr=((addr&0b00111111)|0b01000000);
  3958  050A  084B               	movf	CC1Write@addr,w
  3959  050B  393F               	andlw	63
  3960  050C  3840               	iorlw	64
  3961  050D  00CA               	movwf	??_CC1Write
  3962  050E  084A               	movf	??_CC1Write,w
  3963  050F  00CC               	movwf	CC1Write@cc1Addr
  3964                           
  3965                           ;CC1.c: 134: SPIWrite((&(cc1Addr)),1);
  3966  0510  01F4               	clrf	?_SPIWrite
  3967  0511  0AF4               	incf	?_SPIWrite,f
  3968  0512  304C               	movlw	CC1Write@cc1Addr& (0+255)
  3969  0513  118A  2540  118A   	fcall	_SPIWrite
  3970                           
  3971                           ;CC1.c: 137: SPIWrite(src,len);
  3972  0516  1283               	bcf	3,5	;RP0=0, select bank0
  3973  0517  1303               	bcf	3,6	;RP1=0, select bank0
  3974  0518  0849               	movf	CC1Write@len,w
  3975  0519  00CA               	movwf	??_CC1Write
  3976  051A  084A               	movf	??_CC1Write,w
  3977  051B  00F4               	movwf	?_SPIWrite
  3978  051C  0848               	movf	CC1Write@src,w
  3979  051D  118A  2540         	fcall	_SPIWrite
  3980                           
  3981                           ;CC1.c: 140: PORTAbits.RA5=1;
  3982  051F  1283               	bcf	3,5	;RP0=0, select bank0
  3983  0520  1303               	bcf	3,6	;RP1=0, select bank0
  3984  0521  1685               	bsf	5,5	;volatile
  3985  0522  0008               	return
  3986  0523                     __end_of_CC1Write:	
  3987                           
  3988                           	psect	text20
  3989  05DD                     __ptext20:	
  3990 ;; *************** function _CC1Strobe *****************
  3991 ;; Defined at:
  3992 ;;		line 93 in file "CC1.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;  e_stb           1    wreg     enum E1563
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;  e_stb           1    3[BANK0 ] enum E1563
  3997 ;;  cc1Stb          1    4[BANK0 ] unsigned char 
  3998 ;;  i               1    0        unsigned char 
  3999 ;; Return value:  Size  Location     Type
  4000 ;;		None               void
  4001 ;; Registers used:
  4002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4008 ;;      Params:         0       0       0       0
  4009 ;;      Locals:         0       2       0       0
  4010 ;;      Temps:          0       1       0       0
  4011 ;;      Totals:         0       3       0       0
  4012 ;;Total ram usage:        3 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    3
  4015 ;; This function calls:
  4016 ;;		_SPIWrite
  4017 ;; This function is called by:
  4018 ;;		_CC1Init
  4019 ;;		_CC1Sleep
  4020 ;;		_RTXInit
  4021 ;;		_RTXSndPkt
  4022 ;;		_RTXReadPkt
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           
  4027                           ;psect for function _CC1Strobe
  4028  05DD                     _CC1Strobe:	
  4029                           
  4030                           ;incstack = 0
  4031                           ; Regs used in _CC1Strobe: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4032                           ;CC1Strobe@e_stb stored from wreg
  4033  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  4034  05DE  1303               	bcf	3,6	;RP1=0, select bank0
  4035  05DF  00C9               	movwf	CC1Strobe@e_stb
  4036                           
  4037                           ;CC1.c: 94: unsigned char cc1Stb,i;
  4038                           ;CC1.c: 97: PORTAbits.RA5=0;
  4039  05E0  1285               	bcf	5,5	;volatile
  4040                           
  4041                           ;CC1.c: 100: cc1Stb=((e_stb&0b00111111)|0b10000000);
  4042  05E1  0849               	movf	CC1Strobe@e_stb,w
  4043  05E2  393F               	andlw	63
  4044  05E3  3880               	iorlw	128
  4045  05E4  00C8               	movwf	??_CC1Strobe
  4046  05E5  0848               	movf	??_CC1Strobe,w
  4047  05E6  00CA               	movwf	CC1Strobe@cc1Stb
  4048                           
  4049                           ;CC1.c: 101: SPIWrite((&(cc1Stb)),1);
  4050  05E7  01F4               	clrf	?_SPIWrite
  4051  05E8  0AF4               	incf	?_SPIWrite,f
  4052  05E9  304A               	movlw	CC1Strobe@cc1Stb& (0+255)
  4053  05EA  118A  2540         	fcall	_SPIWrite
  4054                           
  4055                           ;CC1.c: 104: PORTAbits.RA5=1;
  4056  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  4057  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  4058  05EE  1685               	bsf	5,5	;volatile
  4059  05EF  0008               	return
  4060  05F0                     __end_of_CC1Strobe:	
  4061                           
  4062                           	psect	text21
  4063  0540                     __ptext21:	
  4064 ;; *************** function _SPIWrite *****************
  4065 ;; Defined at:
  4066 ;;		line 40 in file "SPI.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  srcPtr          1    wreg     PTR unsigned char 
  4069 ;;		 -> pktTx(5), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  4070 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  4071 ;;  len             1    4[COMMON] unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  srcPtr          1    0[BANK0 ] PTR unsigned char 
  4074 ;;		 -> pktTx(5), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  4075 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  4076 ;;  i               1    1[BANK0 ] unsigned char 
  4077 ;; Return value:  Size  Location     Type
  4078 ;;		None               void
  4079 ;; Registers used:
  4080 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4081 ;; Tracked objects:
  4082 ;;		On entry : 0/0
  4083 ;;		On exit  : 0/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4086 ;;      Params:         1       0       0       0
  4087 ;;      Locals:         0       2       0       0
  4088 ;;      Temps:          1       0       0       0
  4089 ;;      Totals:         2       2       0       0
  4090 ;;Total ram usage:        4 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; Hardware stack levels required when called:    2
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_CC1Strobe
  4097 ;;		_CC1Read
  4098 ;;		_CC1Write
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           
  4103                           ;psect for function _SPIWrite
  4104  0540                     _SPIWrite:	
  4105                           
  4106                           ;incstack = 0
  4107                           ; Regs used in _SPIWrite: [wreg-fsr0h+status,2+status,0]
  4108                           ;SPIWrite@srcPtr stored from wreg
  4109  0540  1283               	bcf	3,5	;RP0=0, select bank0
  4110  0541  1303               	bcf	3,6	;RP1=0, select bank0
  4111  0542  00C6               	movwf	SPIWrite@srcPtr
  4112                           
  4113                           ;SPI.c: 41: unsigned char i;
  4114                           ;SPI.c: 43: for(i=0;i<len;i++)
  4115  0543  01C7               	clrf	SPIWrite@i
  4116  0544                     l2299:	
  4117  0544  0874               	movf	SPIWrite@len,w
  4118  0545  0247               	subwf	SPIWrite@i,w
  4119  0546  1803               	btfsc	3,0
  4120  0547  0008               	return
  4121                           
  4122                           ;SPI.c: 44: {
  4123                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  4124  0548  118C               	bcf	12,3	;volatile
  4125                           
  4126                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  4127  0549  0847               	movf	SPIWrite@i,w
  4128  054A  0746               	addwf	SPIWrite@srcPtr,w
  4129  054B  00F5               	movwf	??_SPIWrite
  4130  054C  0875               	movf	??_SPIWrite,w
  4131  054D  0084               	movwf	4
  4132  054E  1383               	bcf	3,7	;select IRP bank0
  4133  054F  0800               	movf	0,w
  4134  0550  0093               	movwf	19	;volatile
  4135  0551                     l66:	
  4136                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  4137                           
  4138  0551  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0552  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0553  198C               	btfsc	12,3	;volatile
  4141  0554  2D57               	goto	l2297
  4142                           
  4143                           ;SPI.c: 48: _nop();
  4144  0555  0000               	nop
  4145  0556  2D51               	goto	l66
  4146  0557                     l2297:	
  4147  0557  3001               	movlw	1
  4148  0558  00F5               	movwf	??_SPIWrite
  4149  0559  0875               	movf	??_SPIWrite,w
  4150  055A  07C7               	addwf	SPIWrite@i,f
  4151  055B  2D44               	goto	l2299
  4152  055C                     __end_of_SPIWrite:	
  4153                           
  4154                           	psect	text22
  4155  0400                     __ptext22:	
  4156 ;; *************** function _LEDFastFlash *****************
  4157 ;; Defined at:
  4158 ;;		line 39 in file "LED.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  num             1    wreg     unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  num             1    5[BANK0 ] unsigned char 
  4163 ;;  i               1    6[BANK0 ] unsigned char 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;		None               void
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0, pclath, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4173 ;;      Params:         0       0       0       0
  4174 ;;      Locals:         0       2       0       0
  4175 ;;      Temps:          0       1       0       0
  4176 ;;      Totals:         0       3       0       0
  4177 ;;Total ram usage:        3 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    3
  4180 ;; This function calls:
  4181 ;;		_DLYDelay_ms
  4182 ;; This function is called by:
  4183 ;;		_RTXSendData
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           
  4188                           ;psect for function _LEDFastFlash
  4189  0400                     _LEDFastFlash:	
  4190                           
  4191                           ;incstack = 0
  4192                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  4193                           ;LEDFastFlash@num stored from wreg
  4194  0400  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0401  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0402  00CB               	movwf	LEDFastFlash@num
  4197                           
  4198                           ;LED.c: 40: unsigned char i;
  4199                           ;LED.c: 42: for(i=0;i<num;i++)
  4200  0403  01CC               	clrf	LEDFastFlash@i
  4201  0404                     l2403:	
  4202  0404  084B               	movf	LEDFastFlash@num,w
  4203  0405  024C               	subwf	LEDFastFlash@i,w
  4204  0406  1803               	btfsc	3,0
  4205  0407  0008               	return
  4206  0408  0064               	clrwdt	;# 
  4207                           
  4208                           ;LED.c: 45: PORTCbits.RC7=0;
  4209  0409  1283               	bcf	3,5	;RP0=0, select bank0
  4210  040A  1303               	bcf	3,6	;RP1=0, select bank0
  4211  040B  1387               	bcf	7,7	;volatile
  4212                           
  4213                           ;LED.c: 46: DLYDelay_ms(5);
  4214  040C  3005               	movlw	5
  4215  040D  00F4               	movwf	?_DLYDelay_ms
  4216  040E  3000               	movlw	0
  4217  040F  00F5               	movwf	?_DLYDelay_ms+1
  4218  0410  118A  2447  118A   	fcall	_DLYDelay_ms
  4219                           
  4220                           ;LED.c: 47: PORTCbits.RC7=1;
  4221  0413  1283               	bcf	3,5	;RP0=0, select bank0
  4222  0414  1303               	bcf	3,6	;RP1=0, select bank0
  4223  0415  1787               	bsf	7,7	;volatile
  4224                           
  4225                           ;LED.c: 48: DLYDelay_ms(5);
  4226  0416  3005               	movlw	5
  4227  0417  00F4               	movwf	?_DLYDelay_ms
  4228  0418  3000               	movlw	0
  4229  0419  00F5               	movwf	?_DLYDelay_ms+1
  4230  041A  118A  2447  118A   	fcall	_DLYDelay_ms
  4231  041D  3001               	movlw	1
  4232  041E  1283               	bcf	3,5	;RP0=0, select bank0
  4233  041F  1303               	bcf	3,6	;RP1=0, select bank0
  4234  0420  00CA               	movwf	??_LEDFastFlash
  4235  0421  084A               	movf	??_LEDFastFlash,w
  4236  0422  07CC               	addwf	LEDFastFlash@i,f
  4237  0423  2C04               	goto	l2403
  4238  0424                     __end_of_LEDFastFlash:	
  4239                           
  4240                           	psect	text23
  4241  0447                     __ptext23:	
  4242 ;; *************** function _DLYDelay_ms *****************
  4243 ;; Defined at:
  4244 ;;		line 7 in file "DLY.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  val             2    4[COMMON] unsigned short 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  i               2    2[BANK0 ] unsigned short 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;		None               void
  4251 ;; Registers used:
  4252 ;;		wreg, status,2
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4258 ;;      Params:         2       0       0       0
  4259 ;;      Locals:         0       2       0       0
  4260 ;;      Temps:          0       2       0       0
  4261 ;;      Totals:         2       4       0       0
  4262 ;;Total ram usage:        6 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    2
  4265 ;; This function calls:
  4266 ;;		Nothing
  4267 ;; This function is called by:
  4268 ;;		_LEDNormalFlash
  4269 ;;		_LEDFastFlash
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           
  4274                           ;psect for function _DLYDelay_ms
  4275  0447                     _DLYDelay_ms:	
  4276                           
  4277                           ;DLY.c: 8: unsigned short i;
  4278                           ;DLY.c: 10: for(i=0;i<val;i++)
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  4282  0447  1283               	bcf	3,5	;RP0=0, select bank0
  4283  0448  1303               	bcf	3,6	;RP1=0, select bank0
  4284  0449  01C8               	clrf	DLYDelay_ms@i
  4285  044A  01C9               	clrf	DLYDelay_ms@i+1
  4286  044B                     l117:	
  4287  044B  0875               	movf	DLYDelay_ms@val+1,w
  4288  044C  0249               	subwf	DLYDelay_ms@i+1,w
  4289  044D  1D03               	skipz
  4290  044E  2C51               	goto	u1265
  4291  044F  0874               	movf	DLYDelay_ms@val,w
  4292  0450  0248               	subwf	DLYDelay_ms@i,w
  4293  0451                     u1265:	
  4294  0451  1803               	btfsc	3,0
  4295  0452  0008               	return
  4296  0453  0064               	clrwdt	;# 
  4297                           
  4298                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000.0)));
  4299  0454  3003               	movlw	3
  4300  0455  1283               	bcf	3,5	;RP0=0, select bank0
  4301  0456  1303               	bcf	3,6	;RP1=0, select bank0
  4302  0457  00C7               	movwf	??_DLYDelay_ms+1
  4303  0458  3097               	movlw	151
  4304  0459  00C6               	movwf	??_DLYDelay_ms
  4305  045A                     u1677:	
  4306  045A  0BC6               	decfsz	??_DLYDelay_ms,f
  4307  045B  2C5A               	goto	u1677
  4308  045C  0BC7               	decfsz	??_DLYDelay_ms+1,f
  4309  045D  2C5A               	goto	u1677
  4310  045E  2C5F               	nop2
  4311  045F  3001               	movlw	1
  4312  0460  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0461  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0462  07C8               	addwf	DLYDelay_ms@i,f
  4315  0463  1803               	skipnc
  4316  0464  0AC9               	incf	DLYDelay_ms@i+1,f
  4317  0465  3000               	movlw	0
  4318  0466  07C9               	addwf	DLYDelay_ms@i+1,f
  4319  0467  2C4B               	goto	l117
  4320  0468                     __end_of_DLYDelay_ms:	
  4321                           
  4322                           	psect	text24
  4323  05C5                     __ptext24:	
  4324 ;; *************** function _PGMInit *****************
  4325 ;; Defined at:
  4326 ;;		line 21 in file "PGM.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  state           1    wreg     unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  state           1   10[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;		None               void
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4340 ;;      Params:         0       0       0       0
  4341 ;;      Locals:         0       1       0       0
  4342 ;;      Temps:          0       0       0       0
  4343 ;;      Totals:         0       1       0       0
  4344 ;;Total ram usage:        1 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    7
  4347 ;; This function calls:
  4348 ;;		_PGMReadNvm
  4349 ;;		_PGMCheckNvm
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _PGMInit
  4357  05C5                     _PGMInit:	
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _PGMInit: [allreg]
  4361                           ;PGMInit@state stored from wreg
  4362  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  4363  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  4364  05C7  00D0               	movwf	PGMInit@state
  4365                           
  4366                           ;PGM.c: 22: switch(state)
  4367  05C8  2DD2               	goto	l2485
  4368  05C9                     l2477:	
  4369                           ;PGM.c: 23: {
  4370                           ;PGM.c: 24: case 0:
  4371                           
  4372                           
  4373                           ;PGM.c: 26: T1CON=0b00000001;
  4374  05C9  3001               	movlw	1
  4375  05CA  0090               	movwf	16	;volatile
  4376                           
  4377                           ;PGM.c: 27: break;
  4378  05CB  0008               	return
  4379  05CC                     l2479:	
  4380                           ;PGM.c: 28: case 1:
  4381                           
  4382                           
  4383                           ;PGM.c: 30: PGMReadNvm();
  4384  05CC  118A  2663  118A   	fcall	_PGMReadNvm
  4385                           
  4386                           ;PGM.c: 31: PGMCheckNvm();
  4387  05CF  118A  2671         	fcall	_PGMCheckNvm
  4388                           
  4389                           ;PGM.c: 36: }
  4390                           
  4391                           ;PGM.c: 32: break;
  4392  05D1  0008               	return
  4393  05D2                     l2485:	
  4394  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4395  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  4396  05D4  0850               	movf	PGMInit@state,w
  4397                           
  4398                           ; Switch size 1, requested type "space"
  4399                           ; Number of cases is 2, Range of values is 0 to 1
  4400                           ; switch strategies available:
  4401                           ; Name         Instructions Cycles
  4402                           ; simple_byte            7     4 (average)
  4403                           ; direct_byte           11     7 (fixed)
  4404                           ; jumptable            260     6 (fixed)
  4405                           ;	Chosen strategy is simple_byte
  4406  05D5  3A00               	xorlw	0	; case 0
  4407  05D6  1903               	skipnz
  4408  05D7  2DC9               	goto	l2477
  4409  05D8  3A01               	xorlw	1	; case 1
  4410  05D9  1903               	skipnz
  4411  05DA  2DCC               	goto	l2479
  4412  05DB  2DDC               	goto	l287
  4413  05DC                     l287:	
  4414  05DC  0008               	return
  4415  05DD                     __end_of_PGMInit:	
  4416                           
  4417                           	psect	text25
  4418  0671                     __ptext25:	
  4419 ;; *************** function _PGMCheckNvm *****************
  4420 ;; Defined at:
  4421 ;;		line 50 in file "PGM.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;		None
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;		None
  4426 ;; Return value:  Size  Location     Type
  4427 ;;		None               void
  4428 ;; Registers used:
  4429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4435 ;;      Params:         0       0       0       0
  4436 ;;      Locals:         0       0       0       0
  4437 ;;      Temps:          0       0       0       0
  4438 ;;      Totals:         0       0       0       0
  4439 ;;Total ram usage:        0 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    6
  4442 ;; This function calls:
  4443 ;;		_PGMNvmReset
  4444 ;; This function is called by:
  4445 ;;		_PGMInit
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           
  4450                           ;psect for function _PGMCheckNvm
  4451  0671                     _PGMCheckNvm:	
  4452                           
  4453                           ;PGM.c: 51: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  4454                           
  4455                           ;incstack = 0
  4456                           ; Regs used in _PGMCheckNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4457  0671  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0672  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0673  0837               	movf	_pgm_cfg,w
  4460  0674  3AC5               	xorlw	197
  4461  0675  1D03               	skipz
  4462  0676  2E7B               	goto	l2493
  4463  0677  0838               	movf	_pgm_cfg+1,w
  4464  0678  3A5C               	xorlw	92
  4465  0679  1903               	skipnz
  4466  067A  0008               	return
  4467  067B                     l2493:	
  4468                           
  4469                           ;PGM.c: 52: PGMNvmReset();
  4470  067B  118A  2603         	fcall	_PGMNvmReset
  4471  067D  0008               	return
  4472  067E                     __end_of_PGMCheckNvm:	
  4473                           
  4474                           	psect	text26
  4475  0603                     __ptext26:	
  4476 ;; *************** function _PGMNvmReset *****************
  4477 ;; Defined at:
  4478 ;;		line 56 in file "PGM.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;		None
  4481 ;; Auto vars:     Size  Location     Type
  4482 ;;		None
  4483 ;; Return value:  Size  Location     Type
  4484 ;;		None               void
  4485 ;; Registers used:
  4486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4492 ;;      Params:         0       0       0       0
  4493 ;;      Locals:         0       0       0       0
  4494 ;;      Temps:          0       1       0       0
  4495 ;;      Totals:         0       1       0       0
  4496 ;;Total ram usage:        1 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    5
  4499 ;; This function calls:
  4500 ;;		_PGMWriteNvm
  4501 ;; This function is called by:
  4502 ;;		_PGMCheckNvm
  4503 ;; This function uses a non-reentrant model
  4504 ;;
  4505                           
  4506                           
  4507                           ;psect for function _PGMNvmReset
  4508  0603                     _PGMNvmReset:	
  4509                           
  4510                           ;PGM.c: 58: pgm_cfg.valChk1=0xC5;
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in _PGMNvmReset: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4514  0603  30C5               	movlw	197
  4515  0604  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0605  1303               	bcf	3,6	;RP1=0, select bank0
  4517  0606  00CF               	movwf	??_PGMNvmReset
  4518  0607  084F               	movf	??_PGMNvmReset,w
  4519  0608  00B7               	movwf	_pgm_cfg
  4520                           
  4521                           ;PGM.c: 59: pgm_cfg.valChk2=0x5C;
  4522  0609  305C               	movlw	92
  4523  060A  00CF               	movwf	??_PGMNvmReset
  4524  060B  084F               	movf	??_PGMNvmReset,w
  4525  060C  00B8               	movwf	_pgm_cfg+1
  4526                           
  4527                           ;PGM.c: 60: pgm_cfg.menu=0x00;
  4528  060D  01B9               	clrf	_pgm_cfg+2
  4529                           
  4530                           ;PGM.c: 61: pgm_cfg.sensId=0x00;
  4531  060E  01BA               	clrf	_pgm_cfg+3
  4532                           
  4533                           ;PGM.c: 62: pgm_cfg.baseId=0x00;
  4534  060F  01BB               	clrf	_pgm_cfg+4
  4535                           
  4536                           ;PGM.c: 64: PGMWriteNvm();
  4537  0610  118A  2655  118A   	fcall	_PGMWriteNvm
  4538  0613                     l2507:	
  4539                           ;PGM.c: 66: while(1)
  4540                           
  4541                           
  4542                           ;PGM.c: 67: _nop();
  4543  0613  0000               	nop
  4544  0614  2E13               	goto	l2507
  4545  0615                     __end_of_PGMNvmReset:	
  4546                           
  4547                           	psect	text27
  4548  0655                     __ptext27:	
  4549 ;; *************** function _PGMWriteNvm *****************
  4550 ;; Defined at:
  4551 ;;		line 45 in file "PGM.c"
  4552 ;; Parameters:    Size  Location     Type
  4553 ;;		None
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;		None
  4556 ;; Return value:  Size  Location     Type
  4557 ;;		None               void
  4558 ;; Registers used:
  4559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4565 ;;      Params:         0       0       0       0
  4566 ;;      Locals:         0       0       0       0
  4567 ;;      Temps:          0       2       0       0
  4568 ;;      Totals:         0       2       0       0
  4569 ;;Total ram usage:        2 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    4
  4572 ;; This function calls:
  4573 ;;		_NVMWrite
  4574 ;; This function is called by:
  4575 ;;		_PGMNvmReset
  4576 ;;		_PGMSelLong
  4577 ;;		_RTXReadPkt
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _PGMWriteNvm
  4583  0655                     _PGMWriteNvm:	
  4584                           
  4585                           ;PGM.c: 46: NVMWrite(0x00,(char *)(&(pgm_cfg)),sizeof(ts_PGM_CFG));
  4586                           
  4587                           ;incstack = 0
  4588                           ; Regs used in _PGMWriteNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4589  0655  3037               	movlw	_pgm_cfg& (0+255)
  4590  0656  1283               	bcf	3,5	;RP0=0, select bank0
  4591  0657  1303               	bcf	3,6	;RP1=0, select bank0
  4592  0658  00CD               	movwf	??_PGMWriteNvm
  4593  0659  084D               	movf	??_PGMWriteNvm,w
  4594  065A  00C7               	movwf	?_NVMWrite
  4595  065B  3005               	movlw	5
  4596  065C  00CE               	movwf	??_PGMWriteNvm+1
  4597  065D  084E               	movf	??_PGMWriteNvm+1,w
  4598  065E  00C8               	movwf	?_NVMWrite+1
  4599  065F  3000               	movlw	0
  4600  0660  118A  2468         	fcall	_NVMWrite
  4601  0662  0008               	return
  4602  0663                     __end_of_PGMWriteNvm:	
  4603                           
  4604                           	psect	text28
  4605  0468                     __ptext28:	
  4606 ;; *************** function _NVMWrite *****************
  4607 ;; Defined at:
  4608 ;;		line 16 in file "NVM.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  addr            1    wreg     unsigned char 
  4611 ;;  source          1    1[BANK0 ] PTR unsigned char 
  4612 ;;		 -> pgm_cfg(5), 
  4613 ;;  len             1    2[BANK0 ] unsigned char 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  addr            1    5[BANK0 ] unsigned char 
  4616 ;;  i               1    6[BANK0 ] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;		None               void
  4619 ;; Registers used:
  4620 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4626 ;;      Params:         0       2       0       0
  4627 ;;      Locals:         0       2       0       0
  4628 ;;      Temps:          0       2       0       0
  4629 ;;      Totals:         0       6       0       0
  4630 ;;Total ram usage:        6 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    3
  4633 ;; This function calls:
  4634 ;;		_eeprom_write
  4635 ;; This function is called by:
  4636 ;;		_PGMWriteNvm
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _NVMWrite
  4642  0468                     _NVMWrite:	
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _NVMWrite: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4646                           ;NVMWrite@addr stored from wreg
  4647  0468  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0469  1303               	bcf	3,6	;RP1=0, select bank0
  4649  046A  00CB               	movwf	NVMWrite@addr
  4650                           
  4651                           ;NVM.c: 17: unsigned char i;
  4652                           ;NVM.c: 19: for(i=0;i<len;i++)
  4653  046B  01CC               	clrf	NVMWrite@i
  4654  046C                     l2419:	
  4655  046C  0848               	movf	NVMWrite@len,w
  4656  046D  024C               	subwf	NVMWrite@i,w
  4657  046E  1803               	btfsc	3,0
  4658  046F  0008               	return
  4659  0470  0064               	clrwdt	;# 
  4660                           
  4661                           ;NVM.c: 22: eeprom_write((addr+i),(*(source+i)));
  4662  0471  1283               	bcf	3,5	;RP0=0, select bank0
  4663  0472  1303               	bcf	3,6	;RP1=0, select bank0
  4664  0473  084C               	movf	NVMWrite@i,w
  4665  0474  0747               	addwf	NVMWrite@source,w
  4666  0475  00C9               	movwf	??_NVMWrite
  4667  0476  0849               	movf	??_NVMWrite,w
  4668  0477  0084               	movwf	4
  4669  0478  1383               	bcf	3,7	;select IRP bank0
  4670  0479  0800               	movf	0,w
  4671  047A  00CA               	movwf	??_NVMWrite+1
  4672  047B  084A               	movf	??_NVMWrite+1,w
  4673  047C  00F4               	movwf	?_eeprom_write
  4674  047D  084C               	movf	NVMWrite@i,w
  4675  047E  074B               	addwf	NVMWrite@addr,w
  4676  047F  118A  233E  118A   	fcall	_eeprom_write
  4677  0482  3001               	movlw	1
  4678  0483  1283               	bcf	3,5	;RP0=0, select bank0
  4679  0484  1303               	bcf	3,6	;RP1=0, select bank0
  4680  0485  00C9               	movwf	??_NVMWrite
  4681  0486  0849               	movf	??_NVMWrite,w
  4682  0487  07CC               	addwf	NVMWrite@i,f
  4683  0488  2C6C               	goto	l2419
  4684  0489                     __end_of_NVMWrite:	
  4685                           
  4686                           	psect	text29
  4687  033E                     __ptext29:	
  4688 ;; *************** function _eeprom_write *****************
  4689 ;; Defined at:
  4690 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\eewrite.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  addr            1    wreg     unsigned char 
  4693 ;;  value           1    4[COMMON] unsigned char 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  addr            1    0[BANK0 ] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;		None               void
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4705 ;;      Params:         1       0       0       0
  4706 ;;      Locals:         0       1       0       0
  4707 ;;      Temps:          1       0       0       0
  4708 ;;      Totals:         2       1       0       0
  4709 ;;Total ram usage:        3 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    2
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_NVMWrite
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           
  4720                           ;psect for function _eeprom_write
  4721  033E                     _eeprom_write:	
  4722                           
  4723                           ;incstack = 0
  4724                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  4725                           ;eeprom_write@addr stored from wreg
  4726  033E  1283               	bcf	3,5	;RP0=0, select bank0
  4727  033F  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0340  00C6               	movwf	eeprom_write@addr
  4729  0341                     l572:	
  4730  0341  1683               	bsf	3,5	;RP0=1, select bank3
  4731  0342  1703               	bsf	3,6	;RP1=1, select bank3
  4732  0343  188C               	btfsc	12,1	;volsfr
  4733  0344  2B41               	goto	l572
  4734  0345  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0346  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0347  0846               	movf	eeprom_write@addr,w
  4737  0348  1283               	bcf	3,5	;RP0=0, select bank2
  4738  0349  1703               	bsf	3,6	;RP1=1, select bank2
  4739  034A  008D               	movwf	13	;volatile
  4740  034B  0874               	movf	eeprom_write@value,w
  4741  034C  008C               	movwf	12	;volatile
  4742  034D  303F               	movlw	63
  4743  034E  00F5               	movwf	??_eeprom_write
  4744  034F  0875               	movf	??_eeprom_write,w
  4745  0350  1683               	bsf	3,5	;RP0=1, select bank3
  4746  0351  1703               	bsf	3,6	;RP1=1, select bank3
  4747  0352  058C               	andwf	12,f	;volsfr
  4748  0353  1283               	bcf	3,5	;RP0=0, select bank0
  4749  0354  1303               	bcf	3,6	;RP1=0, select bank0
  4750  0355  1003               	bcf	3,0	;volatile
  4751  0356  1B8B               	btfsc	11,7	;volatile
  4752  0357  1403               	bsf	3,0	;volatile
  4753  0358  138B               	bcf	11,7	;volatile
  4754  0359  1683               	bsf	3,5	;RP0=1, select bank3
  4755  035A  1703               	bsf	3,6	;RP1=1, select bank3
  4756  035B  150C               	bsf	12,2	;volsfr
  4757  035C  3055               	movlw	85
  4758  035D  008D               	movwf	13	;volsfr
  4759  035E  30AA               	movlw	170
  4760  035F  008D               	movwf	13	;volsfr
  4761  0360  148C               	bsf	12,1	;volsfr
  4762  0361  110C               	bcf	12,2	;volsfr
  4763  0362  1283               	bcf	3,5	;RP0=0, select bank0
  4764  0363  1303               	bcf	3,6	;RP1=0, select bank0
  4765  0364  1C03               	btfss	3,0	;volatile
  4766  0365  0008               	return
  4767  0366  178B               	bsf	11,7	;volatile
  4768  0367  0008               	return
  4769  0368                     __end_of_eeprom_write:	
  4770                           
  4771                           	psect	text30
  4772  0663                     __ptext30:	
  4773 ;; *************** function _PGMReadNvm *****************
  4774 ;; Defined at:
  4775 ;;		line 40 in file "PGM.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;		None               void
  4782 ;; Registers used:
  4783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4789 ;;      Params:         0       0       0       0
  4790 ;;      Locals:         0       0       0       0
  4791 ;;      Temps:          0       2       0       0
  4792 ;;      Totals:         0       2       0       0
  4793 ;;Total ram usage:        2 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    4
  4796 ;; This function calls:
  4797 ;;		_NVMRead
  4798 ;; This function is called by:
  4799 ;;		_PGMInit
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           
  4804                           ;psect for function _PGMReadNvm
  4805  0663                     _PGMReadNvm:	
  4806                           
  4807                           ;PGM.c: 41: NVMRead(0x00,(char *)(&(pgm_cfg)),sizeof(ts_PGM_CFG));
  4808                           
  4809                           ;incstack = 0
  4810                           ; Regs used in _PGMReadNvm: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4811  0663  3037               	movlw	_pgm_cfg& (0+255)
  4812  0664  1283               	bcf	3,5	;RP0=0, select bank0
  4813  0665  1303               	bcf	3,6	;RP1=0, select bank0
  4814  0666  00CC               	movwf	??_PGMReadNvm
  4815  0667  084C               	movf	??_PGMReadNvm,w
  4816  0668  00C6               	movwf	?_NVMRead
  4817  0669  3005               	movlw	5
  4818  066A  00CD               	movwf	??_PGMReadNvm+1
  4819  066B  084D               	movf	??_PGMReadNvm+1,w
  4820  066C  00C7               	movwf	?_NVMRead+1
  4821  066D  3000               	movlw	0
  4822  066E  118A  24C9         	fcall	_NVMRead
  4823  0670  0008               	return
  4824  0671                     __end_of_PGMReadNvm:	
  4825                           
  4826                           	psect	text31
  4827  04C9                     __ptext31:	
  4828 ;; *************** function _NVMRead *****************
  4829 ;; Defined at:
  4830 ;;		line 5 in file "NVM.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  addr            1    wreg     unsigned char 
  4833 ;;  dest            1    0[BANK0 ] PTR unsigned char 
  4834 ;;		 -> pgm_cfg(5), 
  4835 ;;  len             1    1[BANK0 ] unsigned char 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  addr            1    4[BANK0 ] unsigned char 
  4838 ;;  i               1    5[BANK0 ] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;		None               void
  4841 ;; Registers used:
  4842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4848 ;;      Params:         0       2       0       0
  4849 ;;      Locals:         0       2       0       0
  4850 ;;      Temps:          0       2       0       0
  4851 ;;      Totals:         0       6       0       0
  4852 ;;Total ram usage:        6 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    3
  4855 ;; This function calls:
  4856 ;;		_eeprom_read
  4857 ;; This function is called by:
  4858 ;;		_PGMReadNvm
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           
  4863                           ;psect for function _NVMRead
  4864  04C9                     _NVMRead:	
  4865                           
  4866                           ;incstack = 0
  4867                           ; Regs used in _NVMRead: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4868                           ;NVMRead@addr stored from wreg
  4869  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  4870  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  4871  04CB  00CA               	movwf	NVMRead@addr
  4872                           
  4873                           ;NVM.c: 6: unsigned char i;
  4874                           ;NVM.c: 8: for(i=0;i<len;i++)
  4875  04CC  01CB               	clrf	NVMRead@i
  4876  04CD                     l2411:	
  4877  04CD  0847               	movf	NVMRead@len,w
  4878  04CE  024B               	subwf	NVMRead@i,w
  4879  04CF  1803               	btfsc	3,0
  4880  04D0  0008               	return
  4881  04D1  0064               	clrwdt	;# 
  4882                           
  4883                           ;NVM.c: 11: (*(dest+i))=eeprom_read(addr+i);
  4884  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  4885  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  4886  04D4  084B               	movf	NVMRead@i,w
  4887  04D5  074A               	addwf	NVMRead@addr,w
  4888  04D6  118A  2578  118A   	fcall	_eeprom_read
  4889  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  4890  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  4891  04DB  00C8               	movwf	??_NVMRead
  4892  04DC  084B               	movf	NVMRead@i,w
  4893  04DD  0746               	addwf	NVMRead@dest,w
  4894  04DE  00C9               	movwf	??_NVMRead+1
  4895  04DF  0849               	movf	??_NVMRead+1,w
  4896  04E0  0084               	movwf	4
  4897  04E1  0848               	movf	??_NVMRead,w
  4898  04E2  1383               	bcf	3,7	;select IRP bank0
  4899  04E3  0080               	movwf	0
  4900  04E4  3001               	movlw	1
  4901  04E5  00C8               	movwf	??_NVMRead
  4902  04E6  0848               	movf	??_NVMRead,w
  4903  04E7  07CB               	addwf	NVMRead@i,f
  4904  04E8  2CCD               	goto	l2411
  4905  04E9                     __end_of_NVMRead:	
  4906                           
  4907                           	psect	text32
  4908  0578                     __ptext32:	
  4909 ;; *************** function _eeprom_read *****************
  4910 ;; Defined at:
  4911 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\eeread.c"
  4912 ;; Parameters:    Size  Location     Type
  4913 ;;  addr            1    wreg     unsigned char 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  addr            1    5[COMMON] unsigned char 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      unsigned char 
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4925 ;;      Params:         0       0       0       0
  4926 ;;      Locals:         1       0       0       0
  4927 ;;      Temps:          1       0       0       0
  4928 ;;      Totals:         2       0       0       0
  4929 ;;Total ram usage:        2 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    2
  4932 ;; This function calls:
  4933 ;;		Nothing
  4934 ;; This function is called by:
  4935 ;;		_NVMRead
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _eeprom_read
  4941  0578                     _eeprom_read:	
  4942                           
  4943                           ;incstack = 0
  4944                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4945                           ;eeprom_read@addr stored from wreg
  4946  0578  00F5               	movwf	eeprom_read@addr
  4947  0579                     l550:	
  4948  0579  0064               	clrwdt	;# 
  4949  057A  1683               	bsf	3,5	;RP0=1, select bank3
  4950  057B  1703               	bsf	3,6	;RP1=1, select bank3
  4951  057C  188C               	btfsc	12,1	;volsfr
  4952  057D  2D79               	goto	l550
  4953  057E  0875               	movf	eeprom_read@addr,w
  4954  057F  1283               	bcf	3,5	;RP0=0, select bank2
  4955  0580  1703               	bsf	3,6	;RP1=1, select bank2
  4956  0581  008D               	movwf	13	;volatile
  4957  0582  303F               	movlw	63
  4958  0583  00F4               	movwf	??_eeprom_read
  4959  0584  0874               	movf	??_eeprom_read,w
  4960  0585  1683               	bsf	3,5	;RP0=1, select bank3
  4961  0586  1703               	bsf	3,6	;RP1=1, select bank3
  4962  0587  058C               	andwf	12,f	;volsfr
  4963  0588  140C               	bsf	12,0	;volsfr
  4964  0589  1003               	clrc
  4965  058A  180C               	btfsc	12,0	;volsfr
  4966  058B  1403               	setc
  4967  058C  3000               	movlw	0
  4968  058D  1803               	skipnc
  4969  058E  3001               	movlw	1
  4970  058F  1283               	bcf	3,5	;RP0=0, select bank2
  4971  0590  1703               	bsf	3,6	;RP1=1, select bank2
  4972  0591  080C               	movf	12,w	;volatile
  4973  0592  0008               	return
  4974  0593                     __end_of_eeprom_read:	
  4975                           
  4976                           	psect	text33
  4977  0523                     __ptext33:	
  4978 ;; *************** function _DINTask *****************
  4979 ;; Defined at:
  4980 ;;		line 80 in file "DIN.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;		None               void
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4994 ;;      Params:         0       0       0       0
  4995 ;;      Locals:         0       0       0       0
  4996 ;;      Temps:          1       0       0       0
  4997 ;;      Totals:         1       0       0       0
  4998 ;;Total ram usage:        1 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    2
  5001 ;; This function calls:
  5002 ;;		Nothing
  5003 ;; This function is called by:
  5004 ;;		_main
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _DINTask
  5010  0523                     _DINTask:	
  5011                           
  5012                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  5016  0523  01F9               	clrf	_u_in_sta_tmpTask
  5017                           
  5018                           ;DIN.c: 82: if(!PORTBbits.RB2)
  5019  0524  1283               	bcf	3,5	;RP0=0, select bank0
  5020  0525  1303               	bcf	3,6	;RP1=0, select bank0
  5021  0526  1D06               	btfss	6,2	;volatile
  5022                           
  5023                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  5024  0527  1479               	bsf	_u_in_sta_tmpTask,0
  5025                           
  5026                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  5027  0528  0879               	movf	_u_in_sta_tmpTask,w
  5028  0529  3901               	andlw	1
  5029  052A  00F4               	movwf	??_DINTask
  5030  052B  0878               	movf	_u_in_sta_currTask,w
  5031  052C  3901               	andlw	1
  5032  052D  0674               	xorwf	??_DINTask,w
  5033  052E  1903               	skipnz
  5034  052F  2D38               	goto	l1949
  5035                           
  5036                           ;DIN.c: 87: {
  5037                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  5038  0530  1078               	bcf	_u_in_sta_currTask,0
  5039  0531  1C79               	btfss	_u_in_sta_tmpTask,0
  5040  0532  2D34               	goto	l1945
  5041  0533  1478               	bsf	_u_in_sta_currTask,0
  5042  0534                     l1945:	
  5043                           
  5044                           ;DIN.c: 89: tmrDbncSel=0;
  5045  0534  1283               	bcf	3,5	;RP0=0, select bank0
  5046  0535  1303               	bcf	3,6	;RP1=0, select bank0
  5047  0536  01B0               	clrf	_tmrDbncSel
  5048                           
  5049                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  5050  0537  1477               	bsf	_u_flg_din,0
  5051  0538                     l1949:	
  5052                           
  5053                           ;DIN.c: 91: }
  5054                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  5055  0538  1C78               	btfss	_u_in_sta_currTask,0
  5056  0539  2D3C               	goto	l1953
  5057                           
  5058                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  5059  053A  14F7               	bsf	_u_flg_din,1
  5060  053B  0008               	return
  5061  053C                     l1953:	
  5062                           
  5063                           ;DIN.c: 96: else
  5064                           ;DIN.c: 97: {
  5065                           ;DIN.c: 98: tmrLongSel=0;
  5066  053C  01A6               	clrf	_tmrLongSel
  5067  053D  01A7               	clrf	_tmrLongSel+1
  5068                           
  5069                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  5070  053E  10F7               	bcf	_u_flg_din,1
  5071  053F  0008               	return
  5072  0540                     __end_of_DINTask:	
  5073                           
  5074                           	psect	text34
  5075  0615                     __ptext34:	
  5076 ;; *************** function _DINInit *****************
  5077 ;; Defined at:
  5078 ;;		line 25 in file "DIN.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;  sta             1    wreg     unsigned char 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  sta             1    4[COMMON] unsigned char 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;		None               void
  5085 ;; Registers used:
  5086 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5092 ;;      Params:         0       0       0       0
  5093 ;;      Locals:         1       0       0       0
  5094 ;;      Temps:          0       0       0       0
  5095 ;;      Totals:         1       0       0       0
  5096 ;;Total ram usage:        1 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    2
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_main
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           
  5107                           ;psect for function _DINInit
  5108  0615                     _DINInit:	
  5109                           
  5110                           ;incstack = 0
  5111                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  5112                           ;DINInit@sta stored from wreg
  5113  0615  00F4               	movwf	DINInit@sta
  5114                           
  5115                           ;DIN.c: 26: switch(sta)
  5116  0616  2E20               	goto	l1913
  5117  0617                     l1909:	
  5118                           ;DIN.c: 27: {
  5119                           ;DIN.c: 31: case 1:
  5120                           
  5121                           
  5122                           ;DIN.c: 33: u_flg_din.val=0;
  5123  0617  01F7               	clrf	_u_flg_din
  5124                           
  5125                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  5126  0618  01F8               	clrf	_u_in_sta_currTask
  5127                           
  5128                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  5129  0619  01F9               	clrf	_u_in_sta_tmpTask
  5130                           
  5131                           ;DIN.c: 36: u_in_ev_up.val=0;
  5132  061A  1283               	bcf	3,5	;RP0=0, select bank0
  5133  061B  1303               	bcf	3,6	;RP1=0, select bank0
  5134  061C  01B6               	clrf	_u_in_ev_up
  5135                           
  5136                           ;DIN.c: 37: u_in_ev_down.val=0;
  5137  061D  01B4               	clrf	_u_in_ev_down
  5138                           
  5139                           ;DIN.c: 38: u_in_ev_long.val=0;
  5140  061E  01B5               	clrf	_u_in_ev_long
  5141                           
  5142                           ;DIN.c: 43: }
  5143                           
  5144                           ;DIN.c: 39: break;
  5145  061F  0008               	return
  5146  0620                     l1913:	
  5147  0620  0874               	movf	DINInit@sta,w
  5148                           
  5149                           ; Switch size 1, requested type "space"
  5150                           ; Number of cases is 1, Range of values is 1 to 1
  5151                           ; switch strategies available:
  5152                           ; Name         Instructions Cycles
  5153                           ; simple_byte            4     3 (average)
  5154                           ; direct_byte           12    10 (fixed)
  5155                           ; jumptable            263     9 (fixed)
  5156                           ;	Chosen strategy is simple_byte
  5157  0621  3A01               	xorlw	1	; case 1
  5158  0622  1903               	skipnz
  5159  0623  2E17               	goto	l1909
  5160  0624  2E25               	goto	l217
  5161  0625                     l217:	
  5162  0625  0008               	return
  5163  0626                     __end_of_DINInit:	
  5164                           
  5165                           	psect	text35
  5166  067E                     __ptext35:	
  5167 ;; *************** function _LEDInit *****************
  5168 ;; Defined at:
  5169 ;;		line 8 in file "LED.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  sta             1    wreg     unsigned char 
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  sta             1    4[COMMON] unsigned char 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;		None               void
  5176 ;; Registers used:
  5177 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5183 ;;      Params:         0       0       0       0
  5184 ;;      Locals:         1       0       0       0
  5185 ;;      Temps:          0       0       0       0
  5186 ;;      Totals:         1       0       0       0
  5187 ;;Total ram usage:        1 bytes
  5188 ;; Hardware stack levels used:    1
  5189 ;; Hardware stack levels required when called:    2
  5190 ;; This function calls:
  5191 ;;		Nothing
  5192 ;; This function is called by:
  5193 ;;		_main
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function _LEDInit
  5199  067E                     _LEDInit:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  5203                           ;LEDInit@sta stored from wreg
  5204  067E  00F4               	movwf	LEDInit@sta
  5205                           
  5206                           ;LED.c: 9: switch(sta)
  5207  067F  2E84               	goto	l1845
  5208  0680                     l163:	
  5209                           ;LED.c: 10: {
  5210                           ;LED.c: 17: case 2:
  5211                           
  5212                           
  5213                           ;LED.c: 19: PORTCbits.RC7=1;
  5214  0680  1283               	bcf	3,5	;RP0=0, select bank0
  5215  0681  1303               	bcf	3,6	;RP1=0, select bank0
  5216  0682  1787               	bsf	7,7	;volatile
  5217                           
  5218                           ;LED.c: 21: }
  5219                           
  5220                           ;LED.c: 20: break;
  5221  0683  0008               	return
  5222  0684                     l1845:	
  5223  0684  0874               	movf	LEDInit@sta,w
  5224                           
  5225                           ; Switch size 1, requested type "space"
  5226                           ; Number of cases is 1, Range of values is 2 to 2
  5227                           ; switch strategies available:
  5228                           ; Name         Instructions Cycles
  5229                           ; simple_byte            4     3 (average)
  5230                           ; direct_byte           12    10 (fixed)
  5231                           ; jumptable            263     9 (fixed)
  5232                           ;	Chosen strategy is simple_byte
  5233  0685  3A02               	xorlw	2	; case 2
  5234  0686  1903               	skipnz
  5235  0687  2E80               	goto	l163
  5236  0688  2E89               	goto	l165
  5237  0689                     l165:	
  5238  0689  0008               	return
  5239  068A                     __end_of_LEDInit:	
  5240                           
  5241                           	psect	text36
  5242  0036                     __ptext36:	
  5243 ;; *************** function _ADCTask *****************
  5244 ;; Defined at:
  5245 ;;		line 45 in file "ADC.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;		None               void
  5252 ;; Registers used:
  5253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : 0/0
  5256 ;;		On exit  : 0/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5259 ;;      Params:         0       0       0       0
  5260 ;;      Locals:         0       0       0       0
  5261 ;;      Temps:          0       2       0       0
  5262 ;;      Totals:         0       2       0       0
  5263 ;;Total ram usage:        2 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    3
  5266 ;; This function calls:
  5267 ;;		___lwdiv
  5268 ;; This function is called by:
  5269 ;;		_main
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           
  5274                           ;psect for function _ADCTask
  5275  0036                     _ADCTask:	
  5276                           
  5277                           ;ADC.c: 46: static unsigned short sumBatt=0,sumTemp=0;
  5278                           ;ADC.c: 47: static unsigned char cntSum=0;
  5279                           ;ADC.c: 50: if(!(ADCON0bits.GO))
  5280                           
  5281                           ;incstack = 0
  5282                           ; Regs used in _ADCTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5283  0036  1283               	bcf	3,5	;RP0=0, select bank0
  5284  0037  1303               	bcf	3,6	;RP1=0, select bank0
  5285  0038  1C9F               	btfss	31,1	;volatile
  5286  0039  288F               	goto	l2333
  5287  003A  2897               	goto	l2335
  5288  003B                     l2305:	
  5289                           ;ADC.c: 54: {
  5290                           ;ADC.c: 55: case ADC_CH_BATT:
  5291                           
  5292                           ;ADC.c: 51: {
  5293                           ;ADC.c: 53: switch(adc_ch)
  5294                           
  5295                           
  5296                           ;ADC.c: 57: if(cntSum==10)
  5297  003B  0876               	movf	ADCTask@cntSum,w
  5298  003C  3A0A               	xorlw	10
  5299  003D  1D03               	skipz
  5300  003E  2855               	goto	l2311
  5301                           
  5302                           ;ADC.c: 58: {
  5303                           ;ADC.c: 60: batt=sumBatt/10;
  5304  003F  300A               	movlw	10
  5305  0040  00C6               	movwf	?___lwdiv
  5306  0041  3000               	movlw	0
  5307  0042  00C7               	movwf	?___lwdiv+1
  5308  0043  0821               	movf	ADCTask@sumBatt+1,w
  5309  0044  01C9               	clrf	?___lwdiv+3
  5310  0045  07C9               	addwf	?___lwdiv+3,f
  5311  0046  0820               	movf	ADCTask@sumBatt,w
  5312  0047  01C8               	clrf	?___lwdiv+2
  5313  0048  07C8               	addwf	?___lwdiv+2,f
  5314  0049  118A  220C  118A   	fcall	___lwdiv
  5315  004C  1283               	bcf	3,5	;RP0=0, select bank0
  5316  004D  1303               	bcf	3,6	;RP1=0, select bank0
  5317  004E  0846               	movf	?___lwdiv,w
  5318  004F  00CD               	movwf	??_ADCTask
  5319  0050  084D               	movf	??_ADCTask,w
  5320  0051  00A9               	movwf	_batt
  5321                           
  5322                           ;ADC.c: 62: sumBatt=0;
  5323  0052  01A0               	clrf	ADCTask@sumBatt
  5324  0053  01A1               	clrf	ADCTask@sumBatt+1
  5325                           
  5326                           ;ADC.c: 63: }
  5327  0054  285E               	goto	l107
  5328  0055                     l2311:	
  5329                           
  5330                           ;ADC.c: 64: else
  5331                           ;ADC.c: 65: sumBatt+=ADRESH;
  5332  0055  081E               	movf	30,w	;volatile
  5333  0056  00CD               	movwf	??_ADCTask
  5334  0057  01CE               	clrf	??_ADCTask+1
  5335  0058  084D               	movf	??_ADCTask,w
  5336  0059  07A0               	addwf	ADCTask@sumBatt,f
  5337  005A  1803               	skipnc
  5338  005B  0AA1               	incf	ADCTask@sumBatt+1,f
  5339  005C  084E               	movf	??_ADCTask+1,w
  5340  005D  07A1               	addwf	ADCTask@sumBatt+1,f
  5341  005E                     l107:	
  5342                           
  5343                           ;ADC.c: 67: ADCON0=0b10101001;
  5344  005E  30A9               	movlw	169
  5345  005F  009F               	movwf	31	;volatile
  5346                           
  5347                           ;ADC.c: 68: adc_ch=ADC_CH_TEMP;
  5348  0060  01A8               	clrf	_adc_ch
  5349  0061  0AA8               	incf	_adc_ch,f
  5350                           
  5351                           ;ADC.c: 69: break;
  5352  0062  2897               	goto	l2335
  5353  0063                     l2315:	
  5354                           ;ADC.c: 70: case ADC_CH_TEMP:
  5355                           
  5356                           
  5357                           ;ADC.c: 72: if(cntSum==10)
  5358  0063  0876               	movf	ADCTask@cntSum,w
  5359  0064  3A0A               	xorlw	10
  5360  0065  1D03               	skipz
  5361  0066  287E               	goto	l2323
  5362                           
  5363                           ;ADC.c: 73: {
  5364                           ;ADC.c: 75: temp=sumTemp/10;
  5365  0067  300A               	movlw	10
  5366  0068  00C6               	movwf	?___lwdiv
  5367  0069  3000               	movlw	0
  5368  006A  00C7               	movwf	?___lwdiv+1
  5369  006B  0823               	movf	ADCTask@sumTemp+1,w
  5370  006C  01C9               	clrf	?___lwdiv+3
  5371  006D  07C9               	addwf	?___lwdiv+3,f
  5372  006E  0822               	movf	ADCTask@sumTemp,w
  5373  006F  01C8               	clrf	?___lwdiv+2
  5374  0070  07C8               	addwf	?___lwdiv+2,f
  5375  0071  118A  220C  118A   	fcall	___lwdiv
  5376  0074  1283               	bcf	3,5	;RP0=0, select bank0
  5377  0075  1303               	bcf	3,6	;RP1=0, select bank0
  5378  0076  0846               	movf	?___lwdiv,w
  5379  0077  00CD               	movwf	??_ADCTask
  5380  0078  084D               	movf	??_ADCTask,w
  5381  0079  00AF               	movwf	_temp
  5382                           
  5383                           ;ADC.c: 77: sumTemp=0;
  5384  007A  01A2               	clrf	ADCTask@sumTemp
  5385  007B  01A3               	clrf	ADCTask@sumTemp+1
  5386                           
  5387                           ;ADC.c: 79: cntSum=0;
  5388  007C  01F6               	clrf	ADCTask@cntSum
  5389                           
  5390                           ;ADC.c: 80: }
  5391  007D  288B               	goto	l2327
  5392  007E                     l2323:	
  5393                           
  5394                           ;ADC.c: 81: else
  5395                           ;ADC.c: 82: {
  5396                           ;ADC.c: 84: sumTemp+=ADRESH;
  5397  007E  081E               	movf	30,w	;volatile
  5398  007F  00CD               	movwf	??_ADCTask
  5399  0080  01CE               	clrf	??_ADCTask+1
  5400  0081  084D               	movf	??_ADCTask,w
  5401  0082  07A2               	addwf	ADCTask@sumTemp,f
  5402  0083  1803               	skipnc
  5403  0084  0AA3               	incf	ADCTask@sumTemp+1,f
  5404  0085  084E               	movf	??_ADCTask+1,w
  5405  0086  07A3               	addwf	ADCTask@sumTemp+1,f
  5406                           
  5407                           ;ADC.c: 86: cntSum++;
  5408  0087  3001               	movlw	1
  5409  0088  00CD               	movwf	??_ADCTask
  5410  0089  084D               	movf	??_ADCTask,w
  5411  008A  07F6               	addwf	ADCTask@cntSum,f
  5412  008B                     l2327:	
  5413                           
  5414                           ;ADC.c: 87: }
  5415                           ;ADC.c: 89: ADCON0=0b10000001;
  5416  008B  3081               	movlw	129
  5417  008C  009F               	movwf	31	;volatile
  5418                           
  5419                           ;ADC.c: 90: adc_ch=ADC_CH_BATT;
  5420  008D  01A8               	clrf	_adc_ch
  5421                           
  5422                           ;ADC.c: 92: }
  5423                           
  5424                           ;ADC.c: 91: break;
  5425  008E  2897               	goto	l2335
  5426  008F                     l2333:	
  5427  008F  0828               	movf	_adc_ch,w
  5428                           
  5429                           ; Switch size 1, requested type "space"
  5430                           ; Number of cases is 2, Range of values is 0 to 1
  5431                           ; switch strategies available:
  5432                           ; Name         Instructions Cycles
  5433                           ; simple_byte            7     4 (average)
  5434                           ; direct_byte           11     7 (fixed)
  5435                           ; jumptable            260     6 (fixed)
  5436                           ;	Chosen strategy is simple_byte
  5437  0090  3A00               	xorlw	0	; case 0
  5438  0091  1903               	skipnz
  5439  0092  283B               	goto	l2305
  5440  0093  3A01               	xorlw	1	; case 1
  5441  0094  1903               	skipnz
  5442  0095  2863               	goto	l2315
  5443  0096  2897               	goto	l2335
  5444  0097                     l2335:	
  5445                           
  5446                           ;ADC.c: 93: }
  5447                           ;ADC.c: 95: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5448  0097  3006               	movlw	6
  5449  0098  00CD               	movwf	??_ADCTask
  5450  0099                     u1687:	
  5451  0099  0BCD               	decfsz	??_ADCTask,f
  5452  009A  2899               	goto	u1687
  5453  009B  0000               	nop
  5454                           
  5455                           ;ADC.c: 97: ADCON0bits.GO=1;
  5456  009C  1283               	bcf	3,5	;RP0=0, select bank0
  5457  009D  1303               	bcf	3,6	;RP1=0, select bank0
  5458  009E  149F               	bsf	31,1	;volatile
  5459  009F  0008               	return
  5460  00A0                     __end_of_ADCTask:	
  5461                           
  5462                           	psect	text37
  5463  020C                     __ptext37:	
  5464 ;; *************** function ___lwdiv *****************
  5465 ;; Defined at:
  5466 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  divisor         2    0[BANK0 ] unsigned int 
  5469 ;;  dividend        2    2[BANK0 ] unsigned int 
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;  quotient        2    5[BANK0 ] unsigned int 
  5472 ;;  counter         1    4[BANK0 ] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  2    0[BANK0 ] unsigned int 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5482 ;;      Params:         0       4       0       0
  5483 ;;      Locals:         0       3       0       0
  5484 ;;      Temps:          1       0       0       0
  5485 ;;      Totals:         1       7       0       0
  5486 ;;Total ram usage:        8 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    2
  5489 ;; This function calls:
  5490 ;;		Nothing
  5491 ;; This function is called by:
  5492 ;;		_ADCTask
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           
  5497                           ;psect for function ___lwdiv
  5498  020C                     ___lwdiv:	
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5502  020C  1283               	bcf	3,5	;RP0=0, select bank0
  5503  020D  1303               	bcf	3,6	;RP1=0, select bank0
  5504  020E  01CB               	clrf	___lwdiv@quotient
  5505  020F  01CC               	clrf	___lwdiv@quotient+1
  5506  0210  0847               	movf	___lwdiv@divisor+1,w
  5507  0211  0446               	iorwf	___lwdiv@divisor,w
  5508  0212  1903               	skipnz
  5509  0213  2A45               	goto	l2715
  5510  0214  01CA               	clrf	___lwdiv@counter
  5511  0215  0ACA               	incf	___lwdiv@counter,f
  5512  0216                     l2703:	
  5513  0216  1BC7               	btfsc	___lwdiv@divisor+1,7
  5514  0217  2A24               	goto	l2705
  5515  0218  3001               	movlw	1
  5516  0219                     u1615:	
  5517  0219  1003               	clrc
  5518  021A  0DC6               	rlf	___lwdiv@divisor,f
  5519  021B  0DC7               	rlf	___lwdiv@divisor+1,f
  5520  021C  3EFF               	addlw	-1
  5521  021D  1D03               	skipz
  5522  021E  2A19               	goto	u1615
  5523  021F  3001               	movlw	1
  5524  0220  00F4               	movwf	??___lwdiv
  5525  0221  0874               	movf	??___lwdiv,w
  5526  0222  07CA               	addwf	___lwdiv@counter,f
  5527  0223  2A16               	goto	l2703
  5528  0224                     l2705:	
  5529  0224  3001               	movlw	1
  5530  0225                     u1635:	
  5531  0225  1003               	clrc
  5532  0226  0DCB               	rlf	___lwdiv@quotient,f
  5533  0227  0DCC               	rlf	___lwdiv@quotient+1,f
  5534  0228  3EFF               	addlw	-1
  5535  0229  1D03               	skipz
  5536  022A  2A25               	goto	u1635
  5537  022B  0847               	movf	___lwdiv@divisor+1,w
  5538  022C  0249               	subwf	___lwdiv@dividend+1,w
  5539  022D  1D03               	skipz
  5540  022E  2A31               	goto	u1645
  5541  022F  0846               	movf	___lwdiv@divisor,w
  5542  0230  0248               	subwf	___lwdiv@dividend,w
  5543  0231                     u1645:	
  5544  0231  1C03               	skipc
  5545  0232  2A3A               	goto	l2711
  5546  0233  0846               	movf	___lwdiv@divisor,w
  5547  0234  02C8               	subwf	___lwdiv@dividend,f
  5548  0235  0847               	movf	___lwdiv@divisor+1,w
  5549  0236  1C03               	skipc
  5550  0237  03C9               	decf	___lwdiv@dividend+1,f
  5551  0238  02C9               	subwf	___lwdiv@dividend+1,f
  5552  0239  144B               	bsf	___lwdiv@quotient,0
  5553  023A                     l2711:	
  5554  023A  3001               	movlw	1
  5555  023B                     u1655:	
  5556  023B  1003               	clrc
  5557  023C  0CC7               	rrf	___lwdiv@divisor+1,f
  5558  023D  0CC6               	rrf	___lwdiv@divisor,f
  5559  023E  3EFF               	addlw	-1
  5560  023F  1D03               	skipz
  5561  0240  2A3B               	goto	u1655
  5562  0241  3001               	movlw	1
  5563  0242  02CA               	subwf	___lwdiv@counter,f
  5564  0243  1D03               	btfss	3,2
  5565  0244  2A24               	goto	l2705
  5566  0245                     l2715:	
  5567  0245  084C               	movf	___lwdiv@quotient+1,w
  5568  0246  01C7               	clrf	?___lwdiv+1
  5569  0247  07C7               	addwf	?___lwdiv+1,f
  5570  0248  084B               	movf	___lwdiv@quotient,w
  5571  0249  01C6               	clrf	?___lwdiv
  5572  024A  07C6               	addwf	?___lwdiv,f
  5573  024B  0008               	return
  5574  024C                     __end_of___lwdiv:	
  5575                           
  5576                           	psect	text38
  5577  03B7                     __ptext38:	
  5578 ;; *************** function _ADCInit *****************
  5579 ;; Defined at:
  5580 ;;		line 21 in file "ADC.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  state           1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  state           1    5[COMMON] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5594 ;;      Params:         0       0       0       0
  5595 ;;      Locals:         1       0       0       0
  5596 ;;      Temps:          1       0       0       0
  5597 ;;      Totals:         2       0       0       0
  5598 ;;Total ram usage:        2 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    2
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _ADCInit
  5610  03B7                     _ADCInit:	
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  5614                           ;ADCInit@state stored from wreg
  5615  03B7  00F5               	movwf	ADCInit@state
  5616                           
  5617                           ;ADC.c: 22: switch(state)
  5618  03B8  2BD0               	goto	l1755
  5619  03B9                     l1743:	
  5620                           ;ADC.c: 23: {
  5621                           ;ADC.c: 24: case 0:
  5622                           
  5623                           
  5624                           ;ADC.c: 26: ADCON0=0b10000001; ADCON1=0b00000000;
  5625  03B9  3081               	movlw	129
  5626  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  5627  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  5628  03BC  009F               	movwf	31	;volatile
  5629  03BD  1683               	bsf	3,5	;RP0=1, select bank1
  5630  03BE  1303               	bcf	3,6	;RP1=0, select bank1
  5631  03BF  019F               	clrf	31	;volatile
  5632                           
  5633                           ;ADC.c: 27: break;
  5634  03C0  0008               	return
  5635  03C1                     l1747:	
  5636                           ;ADC.c: 28: case 1:
  5637                           
  5638                           
  5639                           ;ADC.c: 30: adc_ch=ADC_CH_BATT;
  5640  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  5641  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  5642  03C3  01A8               	clrf	_adc_ch
  5643                           
  5644                           ;ADC.c: 31: batt=0;
  5645  03C4  01A9               	clrf	_batt
  5646                           
  5647                           ;ADC.c: 32: temp=0;
  5648  03C5  01AF               	clrf	_temp
  5649                           
  5650                           ;ADC.c: 33: break;
  5651  03C6  0008               	return
  5652  03C7                     l1749:	
  5653                           ;ADC.c: 34: case 2:
  5654                           
  5655                           
  5656                           ;ADC.c: 37: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5657  03C7  3006               	movlw	6
  5658  03C8  00F4               	movwf	??_ADCInit
  5659  03C9                     u1697:	
  5660  03C9  0BF4               	decfsz	??_ADCInit,f
  5661  03CA  2BC9               	goto	u1697
  5662  03CB  0000               	nop
  5663                           
  5664                           ;ADC.c: 39: ADCON0bits.GO=1;
  5665  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  5666  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  5667  03CE  149F               	bsf	31,1	;volatile
  5668                           
  5669                           ;ADC.c: 41: }
  5670                           
  5671                           ;ADC.c: 40: break;
  5672  03CF  0008               	return
  5673  03D0                     l1755:	
  5674  03D0  0875               	movf	ADCInit@state,w
  5675                           
  5676                           ; Switch size 1, requested type "space"
  5677                           ; Number of cases is 3, Range of values is 0 to 2
  5678                           ; switch strategies available:
  5679                           ; Name         Instructions Cycles
  5680                           ; simple_byte           10     6 (average)
  5681                           ; direct_byte           13     7 (fixed)
  5682                           ; jumptable            260     6 (fixed)
  5683                           ;	Chosen strategy is simple_byte
  5684  03D1  3A00               	xorlw	0	; case 0
  5685  03D2  1903               	skipnz
  5686  03D3  2BB9               	goto	l1743
  5687  03D4  3A01               	xorlw	1	; case 1
  5688  03D5  1903               	skipnz
  5689  03D6  2BC1               	goto	l1747
  5690  03D7  3A03               	xorlw	3	; case 2
  5691  03D8  1903               	skipnz
  5692  03D9  2BC7               	goto	l1749
  5693  03DA  2BDB               	goto	l94
  5694  03DB                     l94:	
  5695  03DB  0008               	return
  5696  03DC                     __end_of_ADCInit:	
  5697                           
  5698                           	psect	text39
  5699  0424                     __ptext39:	
  5700 ;; *************** function _SPIInit *****************
  5701 ;; Defined at:
  5702 ;;		line 9 in file "SPI.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  state           1    wreg     unsigned char 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  state           1    5[COMMON] unsigned char 
  5707 ;; Return value:  Size  Location     Type
  5708 ;;		None               void
  5709 ;; Registers used:
  5710 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5716 ;;      Params:         0       0       0       0
  5717 ;;      Locals:         1       0       0       0
  5718 ;;      Temps:          1       0       0       0
  5719 ;;      Totals:         2       0       0       0
  5720 ;;Total ram usage:        2 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    2
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_main
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           
  5731                           ;psect for function _SPIInit
  5732  0424                     _SPIInit:	
  5733                           
  5734                           ;incstack = 0
  5735                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  5736                           ;SPIInit@state stored from wreg
  5737  0424  00F5               	movwf	SPIInit@state
  5738                           
  5739                           ;SPI.c: 10: switch(state)
  5740  0425  2C3B               	goto	l1721
  5741  0426                     l48:	
  5742                           ;SPI.c: 11: {
  5743                           ;SPI.c: 12: case 0:
  5744                           
  5745                           
  5746                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N=0b00000000; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  5747  0426  1683               	bsf	3,5	;RP0=1, select bank1
  5748  0427  1303               	bcf	3,6	;RP1=0, select bank1
  5749  0428  1607               	bsf	7,4	;volatile
  5750  0429  30D7               	movlw	215
  5751  042A  00F4               	movwf	??_SPIInit
  5752  042B  0874               	movf	??_SPIInit,w
  5753  042C  0587               	andwf	7,f	;volatile
  5754  042D  1283               	bcf	3,5	;RP0=0, select bank0
  5755  042E  1303               	bcf	3,6	;RP1=0, select bank0
  5756  042F  1294               	bcf	20,5	;volatile
  5757  0430  0193               	clrf	19	;volatile
  5758  0431  0194               	clrf	20	;volatile
  5759  0432  1683               	bsf	3,5	;RP0=1, select bank1
  5760  0433  1303               	bcf	3,6	;RP1=0, select bank1
  5761  0434  0191               	clrf	17	;volatile
  5762  0435  3040               	movlw	64
  5763  0436  0094               	movwf	20	;volatile
  5764  0437  1283               	bcf	3,5	;RP0=0, select bank0
  5765  0438  1303               	bcf	3,6	;RP1=0, select bank0
  5766  0439  1694               	bsf	20,5	;volatile
  5767                           
  5768                           ;SPI.c: 22: }
  5769                           
  5770                           ;SPI.c: 21: break;
  5771                           
  5772                           ;SPI.c: 19: case 2:
  5773                           
  5774                           ;SPI.c: 18: break;
  5775                           
  5776                           ;SPI.c: 16: case 1:
  5777                           
  5778                           ;SPI.c: 15: break;
  5779  043A  0008               	return
  5780  043B                     l1721:	
  5781  043B  0875               	movf	SPIInit@state,w
  5782                           
  5783                           ; Switch size 1, requested type "space"
  5784                           ; Number of cases is 3, Range of values is 0 to 2
  5785                           ; switch strategies available:
  5786                           ; Name         Instructions Cycles
  5787                           ; simple_byte           10     6 (average)
  5788                           ; direct_byte           13     7 (fixed)
  5789                           ; jumptable            260     6 (fixed)
  5790                           ;	Chosen strategy is simple_byte
  5791  043C  3A00               	xorlw	0	; case 0
  5792  043D  1903               	skipnz
  5793  043E  2C26               	goto	l48
  5794  043F  3A01               	xorlw	1	; case 1
  5795  0440  1903               	skipnz
  5796  0441  2C46               	goto	l52
  5797  0442  3A03               	xorlw	3	; case 2
  5798  0443  1903               	skipnz
  5799  0444  2C46               	goto	l52
  5800  0445  2C46               	goto	l52
  5801  0446                     l52:	
  5802  0446  0008               	return
  5803  0447                     __end_of_SPIInit:	
  5804                           
  5805                           	psect	text40
  5806  055C                     __ptext40:	
  5807 ;; *************** function _OUTInit *****************
  5808 ;; Defined at:
  5809 ;;		line 7 in file "OUT.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  sta             1    wreg     unsigned char 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  sta             1    5[COMMON] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5823 ;;      Params:         0       0       0       0
  5824 ;;      Locals:         1       0       0       0
  5825 ;;      Temps:          1       0       0       0
  5826 ;;      Totals:         2       0       0       0
  5827 ;;Total ram usage:        2 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    2
  5830 ;; This function calls:
  5831 ;;		Nothing
  5832 ;; This function is called by:
  5833 ;;		_main
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           
  5838                           ;psect for function _OUTInit
  5839  055C                     _OUTInit:	
  5840                           
  5841                           ;incstack = 0
  5842                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  5843                           ;OUTInit@sta stored from wreg
  5844  055C  00F5               	movwf	OUTInit@sta
  5845                           
  5846                           ;OUT.c: 8: switch(sta)
  5847  055D  2D72               	goto	l1701
  5848  055E                     l1695:	
  5849                           ;OUT.c: 9: {
  5850                           ;OUT.c: 10: case 0:
  5851                           
  5852                           
  5853                           ;OUT.c: 12: TRISA&=0b11011111; TRISC&=0b01010111; ANSEL&=0b11011111; PORTC|=0b10000000;
  5854  055E  30DF               	movlw	223
  5855  055F  00F4               	movwf	??_OUTInit
  5856  0560  0874               	movf	??_OUTInit,w
  5857  0561  1683               	bsf	3,5	;RP0=1, select bank1
  5858  0562  1303               	bcf	3,6	;RP1=0, select bank1
  5859  0563  0585               	andwf	5,f	;volatile
  5860  0564  3057               	movlw	87
  5861  0565  00F4               	movwf	??_OUTInit
  5862  0566  0874               	movf	??_OUTInit,w
  5863  0567  0587               	andwf	7,f	;volatile
  5864  0568  30DF               	movlw	223
  5865  0569  00F4               	movwf	??_OUTInit
  5866  056A  0874               	movf	??_OUTInit,w
  5867  056B  1683               	bsf	3,5	;RP0=1, select bank3
  5868  056C  1703               	bsf	3,6	;RP1=1, select bank3
  5869  056D  0588               	andwf	8,f	;volatile
  5870  056E  1283               	bcf	3,5	;RP0=0, select bank0
  5871  056F  1303               	bcf	3,6	;RP1=0, select bank0
  5872  0570  1787               	bsf	7,7	;volatile
  5873                           
  5874                           ;OUT.c: 20: }
  5875                           
  5876                           ;OUT.c: 13: break;
  5877  0571  0008               	return
  5878  0572                     l1701:	
  5879  0572  0875               	movf	OUTInit@sta,w
  5880                           
  5881                           ; Switch size 1, requested type "space"
  5882                           ; Number of cases is 1, Range of values is 0 to 0
  5883                           ; switch strategies available:
  5884                           ; Name         Instructions Cycles
  5885                           ; simple_byte            4     3 (average)
  5886                           ; direct_byte            9     7 (fixed)
  5887                           ; jumptable            260     6 (fixed)
  5888                           ;	Chosen strategy is simple_byte
  5889  0573  3A00               	xorlw	0	; case 0
  5890  0574  1903               	skipnz
  5891  0575  2D5E               	goto	l1695
  5892  0576  2D77               	goto	l28
  5893  0577                     l28:	
  5894  0577  0008               	return
  5895  0578                     __end_of_OUTInit:	
  5896                           
  5897                           	psect	text41
  5898  0593                     __ptext41:	
  5899 ;; *************** function _INInit *****************
  5900 ;; Defined at:
  5901 ;;		line 7 in file "IN.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  sta             1    wreg     unsigned char 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  sta             1    5[COMMON] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;		None               void
  5908 ;; Registers used:
  5909 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5915 ;;      Params:         0       0       0       0
  5916 ;;      Locals:         1       0       0       0
  5917 ;;      Temps:          1       0       0       0
  5918 ;;      Totals:         2       0       0       0
  5919 ;;Total ram usage:        2 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    2
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		_main
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function _INInit
  5931  0593                     _INInit:	
  5932                           
  5933                           ;incstack = 0
  5934                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  5935                           ;INInit@sta stored from wreg
  5936  0593  00F5               	movwf	INInit@sta
  5937                           
  5938                           ;IN.c: 8: switch(sta)
  5939  0594  2DA7               	goto	l1691
  5940  0595                     l1683:	
  5941                           ;IN.c: 9: {
  5942                           ;IN.c: 10: case 0:
  5943                           
  5944                           
  5945                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELH&=0b11111000; WPUB=0b00000111;
  5946  0595  3007               	movlw	7
  5947  0596  00F4               	movwf	??_INInit
  5948  0597  0874               	movf	??_INInit,w
  5949  0598  1683               	bsf	3,5	;RP0=1, select bank1
  5950  0599  1303               	bcf	3,6	;RP1=0, select bank1
  5951  059A  0486               	iorwf	6,f	;volatile
  5952  059B  1607               	bsf	7,4	;volatile
  5953  059C  30F8               	movlw	248
  5954  059D  00F4               	movwf	??_INInit
  5955  059E  0874               	movf	??_INInit,w
  5956  059F  1683               	bsf	3,5	;RP0=1, select bank3
  5957  05A0  1703               	bsf	3,6	;RP1=1, select bank3
  5958  05A1  0589               	andwf	9,f	;volatile
  5959  05A2  3007               	movlw	7
  5960  05A3  1683               	bsf	3,5	;RP0=1, select bank1
  5961  05A4  1303               	bcf	3,6	;RP1=0, select bank1
  5962  05A5  0095               	movwf	21	;volatile
  5963                           
  5964                           ;IN.c: 20: }
  5965                           
  5966                           ;IN.c: 13: break;
  5967  05A6  0008               	return
  5968  05A7                     l1691:	
  5969  05A7  0875               	movf	INInit@sta,w
  5970                           
  5971                           ; Switch size 1, requested type "space"
  5972                           ; Number of cases is 1, Range of values is 0 to 0
  5973                           ; switch strategies available:
  5974                           ; Name         Instructions Cycles
  5975                           ; simple_byte            4     3 (average)
  5976                           ; direct_byte            9     7 (fixed)
  5977                           ; jumptable            260     6 (fixed)
  5978                           ;	Chosen strategy is simple_byte
  5979  05A8  3A00               	xorlw	0	; case 0
  5980  05A9  1903               	skipnz
  5981  05AA  2D95               	goto	l1683
  5982  05AB  2DAC               	goto	l14
  5983  05AC                     l14:	
  5984  05AC  0008               	return
  5985  05AD                     __end_of_INInit:	
  5986                           
  5987                           	psect	text42
  5988  05F0                     __ptext42:	
  5989 ;; *************** function _INTIsr *****************
  5990 ;; Defined at:
  5991 ;;		line 27 in file "Sensore.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;		None
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;		None
  5996 ;; Return value:  Size  Location     Type
  5997 ;;		None               void
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0, pclath, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6005 ;;      Params:         0       0       0       0
  6006 ;;      Locals:         0       0       0       0
  6007 ;;      Temps:          4       0       0       0
  6008 ;;      Totals:         4       0       0       0
  6009 ;;Total ram usage:        4 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:    1
  6012 ;; This function calls:
  6013 ;;		_SYSInt
  6014 ;; This function is called by:
  6015 ;;		Interrupt level 1
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           
  6020                           ;psect for function _INTIsr
  6021  05F0                     _INTIsr:	
  6022                           
  6023                           ;Sensore.c: 29: if(INTCONbits.T0IF==1)
  6024  05F0  1D0B               	btfss	11,2	;volatile
  6025  05F1  2DF6               	goto	i1l529
  6026                           
  6027                           ;Sensore.c: 30: {
  6028                           ;Sensore.c: 32: INTCONbits.T0IF=0;
  6029  05F2  110B               	bcf	11,2	;volatile
  6030                           
  6031                           ;Sensore.c: 35: SYSInt();
  6032  05F3  118A  26AB  118A   	fcall	_SYSInt
  6033  05F6                     i1l529:	
  6034  05F6  0873               	movf	??_INTIsr+3,w
  6035  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  6036  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  6037  05F9  00FF               	movwf	127
  6038  05FA  0872               	movf	??_INTIsr+2,w
  6039  05FB  008A               	movwf	10
  6040  05FC  0871               	movf	??_INTIsr+1,w
  6041  05FD  0084               	movwf	4
  6042  05FE  0E70               	swapf	??_INTIsr^(0+-128),w
  6043  05FF  0083               	movwf	3
  6044  0600  0EFE               	swapf	126,f
  6045  0601  0E7E               	swapf	126,w
  6046  0602  0009               	retfie
  6047  0603                     __end_of_INTIsr:	
  6048                           
  6049                           	psect	intentry
  6050  0004                     __pintentry:	
  6051                           ;incstack = 0
  6052                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  6053                           
  6054  0004                     interrupt_function:	
  6055  007E                     saved_w	set	btemp
  6056  0004  00FE               	movwf	btemp
  6057  0005  0E03               	swapf	3,w
  6058  0006  00F0               	movwf	??_INTIsr
  6059  0007  0804               	movf	4,w
  6060  0008  00F1               	movwf	??_INTIsr+1
  6061  0009  080A               	movf	10,w
  6062  000A  00F2               	movwf	??_INTIsr+2
  6063  000B  1283               	bcf	3,5	;RP0=0, select bank0
  6064  000C  1303               	bcf	3,6	;RP1=0, select bank0
  6065  000D  087F               	movf	btemp+1,w
  6066  000E  00F3               	movwf	??_INTIsr+3
  6067  000F  118A  2DF0         	ljmp	_INTIsr
  6068                           
  6069                           	psect	text43
  6070  06AB                     __ptext43:	
  6071 ;; *************** function _SYSInt *****************
  6072 ;; Defined at:
  6073 ;;		line 35 in file "SYS.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;		None
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;		None               void
  6080 ;; Registers used:
  6081 ;;		wreg
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6087 ;;      Params:         0       0       0       0
  6088 ;;      Locals:         0       0       0       0
  6089 ;;      Temps:          0       0       0       0
  6090 ;;      Totals:         0       0       0       0
  6091 ;;Total ram usage:        0 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; This function calls:
  6094 ;;		Nothing
  6095 ;; This function is called by:
  6096 ;;		_INTIsr
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _SYSInt
  6102  06AB                     _SYSInt:	
  6103                           
  6104                           ;SYS.c: 37: u_SYS_STA.TICK=1;
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _SYSInt: [wreg]
  6108  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  6109  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  6110  06AD  1433               	bsf	_u_SYS_STA,0
  6111                           
  6112                           ;SYS.c: 40: TMR0=255-156;
  6113  06AE  3063               	movlw	99
  6114  06AF  0081               	movwf	1	;volatile
  6115  06B0  0008               	return
  6116  06B1                     __end_of_SYSInt:	
  6117  007E                     btemp	set	126	;btemp
  6118  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     21      67
    BANK1            80      0      47
    BANK2            80      0       0

Pointer List with Targets:

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 5
		 -> pktTx(BANK0[5]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK0[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK0[5]), 

    CC1Write@src	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK0[5]), cc1PaTable(BANK0[8]), cc1InitVal(BANK1[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK0[5]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(BANK0[1]), 
		 -> cc1PaTable(BANK0[8]), cc1InitVal(BANK1[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 5
		 -> pktRx(BANK0[5]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_INInit
    _main->_OUTInit
    _main->_SPIInit
    _main->_ADCInit
    _main->_SYSInit
    _LEDNormalFlash->_DLYDelay_ms
    _CC1Read->_SPIWrite
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _NVMWrite->_eeprom_write
    _NVMRead->_eeprom_read
    _ADCTask->___lwdiv

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SYSTask
    _RTXTick->_RTXSendData
    _PGMSelLong->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _CC1Init->_CC1Write
    _RTXTask->_RTXReadPkt
    _RTXReadPkt->_RTXSendData
    _RTXReadPkt->_RTXSendRPgm
    _RTXSendRPgm->_RTXSndPkt
    _RTXRcvPkt->_CC1Read
    _LEDNormalFlash->_DLYDelay_ms
    _RTXInit->_RTXSendData
    _RTXSendData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _CC1Read->_SPIRead
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _NVMWrite->_eeprom_write
    _PGMReadNvm->_NVMRead
    _ADCTask->___lwdiv

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    9729
                                             19 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _ADCTask
                            _CC1Init
                            _LEDInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              2     2      0    2596
                                             17 BANK0      2     2      0
                            _CC1Init
                            _DINTick
                           _SLPSleep
                         _PGMSelLong
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    1250
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0     390
                                              9 BANK0      1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             6     6      0     368
                                              5 BANK0      6     6      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CC1Init                                              3     3      0     489
                                              7 BANK0      3     3      0
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    3893
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    3893
                                             17 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                        _RTXSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                             16 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              9 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              4 BANK0      3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0    1479
                                             17 BANK0      1     1      0
                          _CC1Strobe
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          1     1      0    1250
                                             16 BANK0      1     1      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            7     6      1    1114
                                              9 BANK0      7     6      1
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2     390
                                              4 BANK0      5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     130
                                              4 COMMON     1     0      1
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             5     3      2     260
                                              2 BANK0      5     3      2
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              2 BANK0      3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             4     3      1     130
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0     136
                                              4 BANK0      3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2      68
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     499
                                             10 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     254
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     254
                                              9 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     254
                                              7 BANK0      2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                             6     4      2     254
                                              1 BANK0      6     4      2
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (5) _eeprom_write                                         3     2      1      62
                                              4 COMMON     2     1      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     214
                                              6 BANK0      2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              6     4      2     214
                                              0 BANK0      6     4      2
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (4) _eeprom_read                                          2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCTask                                              2     2      0     241
                                              7 BANK0      2     2      0
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     241
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTIsr                                               4     4      0       0
                                              0 COMMON     4     4      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (8) _SYSInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _ADCTask
     ___lwdiv
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _LEDInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
         _eeprom_read
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
             _eeprom_write
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXSendData
       _LEDFastFlash
         _DLYDelay_ms
       _RTXSndPkt
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _CC1Read
           _SPIRead
           _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
           _eeprom_write
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
   _SYSInit
   _SYSTask
     _CC1Init
       _CC1Strobe
         _SPIWrite
       _CC1Write
         _SPIWrite
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
           _eeprom_write
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               50      0       0       7        0.0%
BITBANK2            50      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      2F       5       58.8%
BITBANK1            50      0       0       4        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     15      43       3       83.8%
BITBANK0            50      0       0       9        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      86      10        0.0%
ABS                  0      0      7C       8        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       A       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Oct 04 14:24:19 2014

      __size_of_CC1Strobe 0013                __CFG_CP$ON 0000           SLPSleep@WPUBTmp 004E  
                       pc 0002                        l14 05AC                        l28 0577  
                      l52 0446             ?_LEDFastFlash 0070                        l48 0426  
                      l57 04B4                        l66 0551                        l94 03DB  
                      _RD 0C60               __CFG_CPD$ON 0000                        _WR 0C61  
                      fsr 0004              ?_DLYDelay_ms 0074                       l107 005E  
                     l220 037B                       l117 044B                       l222 037A  
                     l143 0311                       l217 0625                       l163 0680  
                     l165 0689                       l360 03B6                       l532 00A7  
                     l461 033D                       l533 00EE                       l550 0579  
                     l374 01B5                       l534 00EF                       l287 05DC  
                     l572 0341                       _GIE 005F           __end_of_CC1Init 0312  
         __end_of_CC1Read 0506                       fsr0 0004           __end_of_ADCInit 03DC  
                     indf 0000           __end_of_ADCTask 00A0                _RTXReadPkt 0158  
         __end_of_DINInit 0626           __end_of_DINTask 0540           __end_of_DINTick 0390  
            __CFG_LVP$OFF 0000           __end_of_LEDInit 068A                      l2311 0055  
                    l2305 003B                      l2323 007E                      l2315 0063  
                    l2411 04CD                      l2403 0404                      l1701 0572  
                    l2333 008F                      l2157 0314                      l2327 008B  
                    l2335 0097                      l2175 0331                      l1721 043B  
                    l2521 039A                      l2345 02E7                      l2419 046C  
                    l2507 0613                      l2291 04AD                      l2611 0158  
                    l2179 0335                      l2525 03A9                      l2349 0307  
                    l1743 03B9                      l2711 023A                      l2703 0216  
                    l2287 04BA                      l2519 0394                      l2705 0224  
                    l1913 0620                      l2297 0557                      l2545 02AD  
                    l2393 03E0                      l1683 0595                      l1691 05A7  
                    l1747 03C1                      l1755 03D0                      l2715 0245  
                    l2299 0544                      l2619 01CE                      l2555 0498  
                    l1749 03C7                      l1845 0684                      l1909 0617  
                    l2493 067B                      l2477 05C9                      l2485 05D2  
                    l2653 026B                      l2645 025F                      l1695 055E  
                    l2479 05CC                      l2639 0257                      l1953 053C  
                    l1945 0534                      l1949 0538                      l2597 0197  
                    _IOCB 0096                      u1265 0451                      u1615 0219  
                    u1635 0225                      u1645 0231                      u1655 023B  
                    _PIE1 008C                      _PIE2 008D                      u1677 045A  
                    u1687 0099                      u1697 03C9                      _PIR1 000C  
                    _PIR2 000D                      _TMR0 0001                      _WREN 0C62  
                    _WPUB 0095            ??_eeprom_write 0075           __end_of_PGMInit 05DD  
        __end_of_CC1Sleep 0694                      _batt 0029                      _main 00A0  
        __end_of_CC1Write 0523           __end_of_NVMRead 04E9                      _temp 002F  
         __end_of_SPIInit 0447           __end_of_SPIRead 04C9                      btemp 007E  
         __end_of_OUTInit 0578                      start 0011           __end_of_RTXInit 03B7  
         __end_of_RTXTask 06AB           __end_of_RTXTick 04A9           __end_of_SYSInit 033E  
         __end_of_SYSTask 0280               ?_PGMReadNvm 0070            ??_LEDFastFlash 004A  
             ?_PGMSelLong 0070               _RTXSendData 0280               _RTXSendRPgm 05AD  
            SPIInit@state 0075                     ?_main 0070                     _EEADR 010D  
                   _CARRY 0018                     _ANSEL 0188                     _T1CON 0010  
         __end_of___lwdiv 024C                     i1l529 05F6                     _TMR1H 000F  
                   _TMR1L 000E                     _PORTC 0007                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087             __CFG_PWRTE$ON 0000  
             _sys_pgm_sta 002E         __end_of_CC1Strobe 05F0                     _pktRx 003C  
                   _pktTx 0041                     main@i 005A          __end_of_SLPSleep 0158  
        __end_of_NVMWrite 0489                     pclath 000A          __end_of_SPIWrite 055C  
       LEDNormalFlash@num 004B                     status 0003                     wtemp0 007E  
            ?_PGMCheckNvm 0070           __initialization 0013              DLYDelay_ms@i 0048  
            __end_of_main 00FD        __size_of_RTXRcvPkt 000F        __size_of_RTXSndPkt 005A  
               ??_CC1Init 004D                 ??_CC1Read 004C                 ??_ADCInit 0074  
          CC1Strobe@e_stb 0049                 ??_ADCTask 004D                    ??_main 0059  
              _cc1PaTable 005B              CC1Init@state 004F                 ??_DINInit 0074  
            NVMWrite@addr 004B                 ??_DINTask 0074                 ??_DINTick 0074  
              _cc1InitVal 00A0                 ??_LEDInit 0074              ?_PGMNvmReset 0070  
               ??_PGMInit 0076               ?_RTXReadPkt 0070                    _ADCON0 001F  
                  _ADCON1 009F             SPIRead@dstPtr 0048                 ??_NVMRead 0048  
                  _ADRESH 001E                    _EEDATA 010C                 ??_SPIInit 0074  
               ??_SPIRead 0046                    _EECON1 018C                    _EECON2 018D  
          _LEDNormalFlash 03DC                 ??_OUTInit 0074                    _ANSELH 0189  
     __size_of_PGMReadNvm 000E                 ??_RTXInit 0076              ?_PGMWriteNvm 0070  
               ??_RTXTask 0076                 ??_RTXTick 0076       __size_of_PGMSelLong 0010  
                  _INTCON 000B                 ??_SYSInit 0074                 ??_SYSTask 0057  
                  _INTIsr 05F0                    _OSCCON 008F                    _INInit 0593  
                  _WDTCON 0105                    _SSPCON 0014                    _SSPBUF 0013  
           LEDFastFlash@i 004C                    _SYSInt 06AB      __size_of_eeprom_read 001B  
     RTXReadPkt@numRxByte 0058                    _adc_ch 0028                 ??___lwdiv 0074  
    __end_of_eeprom_write 0368                    _tmrPgm 0031                    _rtx_ev 0024  
               ?_CC1Sleep 0070      __size_of_DLYDelay_ms 0021                 ?_CC1Write 0048  
                  saved_w 007E    __end_of_LEDNormalFlash 0400         __end_of_RTXRcvPkt 0655  
       __end_of_RTXSndPkt 020C      __end_of_LEDFastFlash 0424   __end_of__initialization 0033  
         eeprom_read@addr 0075            __pcstackCOMMON 0070              __pidataBANK0 0694  
            __pidataBANK1 02B4       __size_of_RTXReadPkt 005A                 ?_SLPSleep 0070  
               ?_NVMWrite 0047           CC1Strobe@cc1Stb 004A                 ?_SPIWrite 0074  
              CC1Read@len 004B                CC1Read@dst 004A                ??_CC1Sleep 0076  
              ??_CC1Write 004A              CC1Write@addr 004B         eeprom_write@value 0074  
         ?_LEDNormalFlash 0070                __pbssBANK0 0020                   ?_INTIsr 0070  
                 ?_INInit 0070                   ?_SYSInt 0070                 INInit@sta 0075  
    __size_of_PGMCheckNvm 000D                __pmaintext 00A0              ??_PGMReadNvm 004C  
         CC1Write@cc1Addr 004C              ??_PGMSelLong 004F                __pintentry 0004  
            ?_RTXSendData 0070              ?_RTXSendRPgm 0070                   _CC1Init 02E3  
                 _CC1Read 04E9                   _ADCInit 03B7                   _ADCTask 0036  
       _u_in_sta_currTask 0078                ??_SLPSleep 004B                ??_NVMWrite 0049  
              _cntSndData 002A                ??_SPIWrite 0075                   _DINInit 0615  
                 _DINTick 0368                   _DINTask 0523              ADCInit@state 0075  
                 _LEDInit 067E                   _PGMInit 05C5      __size_of_PGMNvmReset 0012  
                 _SSPCON2 0091                   _NVMRead 04C9                   _SPIInit 0424  
                 _SPIRead 04A9                   _SSPSTAT 0094                   _OUTInit 055C  
                 _RTXInit 0390                   _RTXTick 0489                   _RTXTask 06A4  
      __end_of_PGMReadNvm 0671                   _SYSInit 0312                   _SYSTask 024C  
      __end_of_PGMSelLong 0646                 _CC1Strobe 05DD           __size_of_INTIsr 0013  
         __size_of_INInit 001A      __size_of_PGMWriteNvm 000E           __size_of_SYSInt 0006  
               NVMWrite@i 004C                 SPIWrite@i 0047     __size_of_eeprom_write 002A  
            RTXInit@state 0057                   ___lwdiv 020C                   __ptext1 024C  
                 __ptext2 0489                   __ptext3 0636                   __ptext4 00FD  
                 __ptext5 068A                   __ptext6 0368                   __ptext7 02E3  
                 __ptext8 0312                   __ptext9 06A4                   _flg_slp 002B  
                 _pgm_cfg 0037     __size_of_LEDFastFlash 0024              ??_RTXReadPkt 0057  
                 clrloop0 069D                   _rtx_flg 002C              RTXRcvPkt@len 004F  
            RTXRcvPkt@dst 0052      end_of_initialization 0033                _u_in_ev_up 0036  
              ?_CC1Strobe 0070        RTXSndPkt@numRxByte 0053        RTXSndPkt@numTxByte 0054  
            _eeprom_write 033E              RTXSndPkt@len 004F              RTXSndPkt@src 0052  
            RTXSndPkt@sta 0055                _tmrDbncSel 0030        __end_of_RTXReadPkt 01B2  
              DINInit@sta 0074              _LEDFastFlash 0400                 _PORTAbits 0005  
               _PORTBbits 0006                 _PORTCbits 0007                _tmrLongSel 0026  
       __size_of_CC1Sleep 000A         __size_of_CC1Write 001D               NVMRead@addr 004A  
             NVMRead@dest 0046                 _RTXRcvPkt 0646                 _RTXSndPkt 01B2  
           ??_eeprom_read 0074            __end_of_INTIsr 0603            __end_of_INInit 05AD  
          __end_of_SYSInt 06B1                LEDInit@sta 0074            DLYDelay_ms@val 0074  
           ??_DLYDelay_ms 0046      __size_of_RTXSendData 0034          ??_LEDNormalFlash 004A  
    __size_of_RTXSendRPgm 0018              SYSInit@state 0075         __size_of_SLPSleep 005B  
       __size_of_NVMWrite 0021         __size_of_SPIWrite 001C       start_initialization 0013  
             CC1Read@addr 004D               NVMWrite@len 0048                  ??_INTIsr 0070  
                ??_INInit 0074               ??_CC1Strobe 0048                ?_RTXRcvPkt 004F  
              ?_RTXSndPkt 004F                  ??_SYSInt 0070  __CFG_FOSC$INTRC_NOCLKOUT 0000  
          CC1Read@cc1Addr 004E       __end_of_eeprom_read 0593                init_fetch0 0626  
                ?_CC1Init 0070               __pdataBANK0 005B               __pdataBANK1 00A0  
                ?_CC1Read 004A               SPIWrite@len 0074                  ?_ADCInit 0070  
                ?_ADCTask 0070                  ?_DINInit 0070                  ?_DINTask 0070  
                ?_DINTick 0070                  ?_LEDInit 0070               __pbssCOMMON 0076  
           __pcstackBANK0 0046            ADCTask@sumBatt 0020       __end_of_DLYDelay_ms 0468  
               _s_CC1_FLG 002D                  ?_PGMInit 0070            ADCTask@sumTemp 0022  
                ?_NVMRead 0046                  ?_SPIInit 0070                  ?_SPIRead 0074  
          NVMWrite@source 0047                  ?_OUTInit 0070              PGMInit@state 0050  
                ?_RTXInit 0070                  ?_RTXTask 0070                  ?_RTXTick 0070  
        eeprom_write@addr 0046               CC1Write@len 0049                  ?_SYSInit 0070  
             CC1Write@src 0048                  ?_SYSTask 0070             ??_PGMCheckNvm 0076  
        ___lwdiv@dividend 0048                  ?___lwdiv 0046                 _u_SYS_STA 0033  
        _u_in_sta_tmpTask 0079                  NVMRead@i 004B                  _CC1Sleep 068A  
           ??_PGMNvmReset 004F                  SPIRead@i 0049                  _CC1Write 0506  
        ___lwdiv@quotient 004B             ??_PGMWriteNvm 004D         interrupt_function 0004  
               _u_flg_din 0077               ??_RTXRcvPkt 0050               ??_RTXSndPkt 0050  
               clear_ram0 069C               _eeprom_read 0578                  SYSTask@i 0058  
                _PIR1bits 000C       __end_of_PGMCheckNvm 067E     SLPSleep@OPTION_REGTmp 0050  
               _tmrRcvPkt 0032          __size_of_CC1Init 002F          __size_of_CC1Read 001D  
                _SLPSleep 00FD               _DLYDelay_ms 0447                  _NVMWrite 0468  
        __size_of_ADCInit 0025                _ADCON0bits 001F          __size_of_ADCTask 006A  
                _SPIWrite 0540                NVMRead@len 0047           LEDFastFlash@num 004B  
        __size_of_DINInit 0011          __size_of_DINTask 001D          __size_of_DINTick 0028  
        __size_of_LEDInit 000C                SPIRead@len 0074          __size_of_PGMInit 0018  
     __end_of_PGMNvmReset 0615          __size_of_NVMRead 0020          __size_of_SPIInit 0023  
        __size_of_SPIRead 0020              _u_in_ev_down 0034           LEDNormalFlash@i 004C  
            _u_in_ev_long 0035          __size_of_OUTInit 001C          __size_of_RTXInit 0027  
        __size_of_RTXTask 0007          __size_of_RTXTick 0020          __size_of_SYSInit 002C  
        __size_of_SYSTask 0034                OUTInit@sta 0075       __end_of_PGMWriteNvm 0663  
           ADCTask@cntSum 0076          __size_of___lwdiv 0040           ___lwdiv@divisor 0046  
         ___lwdiv@counter 004A                  __ptext10 0158                  __ptext11 05AD  
                __ptext20 05DD                  __ptext12 0646                  __ptext21 0540  
                __ptext13 03DC                  __ptext30 0663                  __ptext22 0400  
                __ptext14 0390                  __ptext31 04C9                  __ptext23 0447  
                __ptext15 0280                  __ptext40 055C                  __ptext32 0578  
                __ptext24 05C5                  __ptext16 01B2                  __ptext41 0593  
                __ptext33 0523                  __ptext25 0671                  __ptext17 04E9  
                __ptext42 05F0                  __ptext34 0615                  __ptext26 0603  
                __ptext18 04A9                  __ptext43 06AB                  __ptext35 067E  
                __ptext27 0655                  __ptext19 0506                  __ptext36 0036  
                __ptext28 0468                  __ptext37 020C                  __ptext29 033E  
                __ptext38 03B7                  __ptext39 0424         __CFG_BOR4V$BOR21V 0000  
           __size_of_main 005D               _PGMCheckNvm 0671             ??_RTXSendData 0056  
           ??_RTXSendRPgm 0056               _PGMNvmReset 0603                _INTCONbits 000B  
                init_ram0 062A            SPIWrite@srcPtr 0046                  intlevel1 0000  
             _PGMWriteNvm 0655                _PGMReadNvm 0663                _PGMSelLong 0636  
       SLPSleep@INTCONTmp 004D                _OPTION_REG 0081       __end_of_RTXSendData 02B4  
     __end_of_RTXSendRPgm 05C5   __size_of_LEDNormalFlash 0024             ?_eeprom_write 0074  
         SLPSleep@IOCBTmp 004C         SLPSleep@WDTCONTmp 004F              ?_eeprom_read 0070  
              _SSPCONbits 0014  
