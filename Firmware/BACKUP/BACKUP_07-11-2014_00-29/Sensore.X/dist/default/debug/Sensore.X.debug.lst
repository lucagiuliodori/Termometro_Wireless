

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Oct 27 13:25:44 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	dabs	1,0x7E,2
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  0116                     	;# 
   119  0117                     	;# 
   120  011D                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  018E                     	;# 
   124  0191                     	;# 
   125  0191                     	;# 
   126  0192                     	;# 
   127  0193                     	;# 
   128  0193                     	;# 
   129  0194                     	;# 
   130  0195                     	;# 
   131  0196                     	;# 
   132  0197                     	;# 
   133  0199                     	;# 
   134  019A                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019C                     	;# 
   140  019C                     	;# 
   141  019D                     	;# 
   142  019E                     	;# 
   143  019F                     	;# 
   144  020D                     	;# 
   145  0210                     	;# 
   146  0211                     	;# 
   147  0211                     	;# 
   148  0212                     	;# 
   149  0212                     	;# 
   150  0213                     	;# 
   151  0213                     	;# 
   152  0214                     	;# 
   153  0214                     	;# 
   154  0215                     	;# 
   155  0215                     	;# 
   156  0215                     	;# 
   157  0216                     	;# 
   158  0216                     	;# 
   159  0217                     	;# 
   160  0217                     	;# 
   161  0291                     	;# 
   162  0291                     	;# 
   163  0292                     	;# 
   164  0293                     	;# 
   165  0298                     	;# 
   166  0298                     	;# 
   167  0299                     	;# 
   168  029A                     	;# 
   169  0394                     	;# 
   170  0395                     	;# 
   171  0396                     	;# 
   172  0FE4                     	;# 
   173  0FE5                     	;# 
   174  0FE6                     	;# 
   175  0FE7                     	;# 
   176  0FE8                     	;# 
   177  0FE9                     	;# 
   178  0FEA                     	;# 
   179  0FEB                     	;# 
   180  0FED                     	;# 
   181  0FEE                     	;# 
   182  0FEF                     	;# 
   183  0000                     	;# 
   184  0001                     	;# 
   185  0002                     	;# 
   186  0003                     	;# 
   187  0004                     	;# 
   188  0005                     	;# 
   189  0006                     	;# 
   190  0007                     	;# 
   191  0008                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0015                     	;# 
   202  0016                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001C                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0090                     	;# 
   214  0091                     	;# 
   215  0092                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  0116                     	;# 
   230  0117                     	;# 
   231  011D                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  018E                     	;# 
   235  0191                     	;# 
   236  0191                     	;# 
   237  0192                     	;# 
   238  0193                     	;# 
   239  0193                     	;# 
   240  0194                     	;# 
   241  0195                     	;# 
   242  0196                     	;# 
   243  0197                     	;# 
   244  0199                     	;# 
   245  019A                     	;# 
   246  019B                     	;# 
   247  019B                     	;# 
   248  019B                     	;# 
   249  019B                     	;# 
   250  019C                     	;# 
   251  019C                     	;# 
   252  019D                     	;# 
   253  019E                     	;# 
   254  019F                     	;# 
   255  020D                     	;# 
   256  0210                     	;# 
   257  0211                     	;# 
   258  0211                     	;# 
   259  0212                     	;# 
   260  0212                     	;# 
   261  0213                     	;# 
   262  0213                     	;# 
   263  0214                     	;# 
   264  0214                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0216                     	;# 
   269  0216                     	;# 
   270  0217                     	;# 
   271  0217                     	;# 
   272  0291                     	;# 
   273  0291                     	;# 
   274  0292                     	;# 
   275  0293                     	;# 
   276  0298                     	;# 
   277  0298                     	;# 
   278  0299                     	;# 
   279  029A                     	;# 
   280  0394                     	;# 
   281  0395                     	;# 
   282  0396                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294  0000                     	;# 
   295  0001                     	;# 
   296  0002                     	;# 
   297  0003                     	;# 
   298  0004                     	;# 
   299  0005                     	;# 
   300  0006                     	;# 
   301  0007                     	;# 
   302  0008                     	;# 
   303  0009                     	;# 
   304  000A                     	;# 
   305  000B                     	;# 
   306  000C                     	;# 
   307  000D                     	;# 
   308  000E                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0015                     	;# 
   313  0016                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001C                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0090                     	;# 
   325  0091                     	;# 
   326  0092                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0097                     	;# 
   330  0099                     	;# 
   331  009A                     	;# 
   332  009B                     	;# 
   333  009B                     	;# 
   334  009C                     	;# 
   335  009D                     	;# 
   336  009E                     	;# 
   337  010C                     	;# 
   338  010D                     	;# 
   339  010E                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  011D                     	;# 
   343  018C                     	;# 
   344  018D                     	;# 
   345  018E                     	;# 
   346  0191                     	;# 
   347  0191                     	;# 
   348  0192                     	;# 
   349  0193                     	;# 
   350  0193                     	;# 
   351  0194                     	;# 
   352  0195                     	;# 
   353  0196                     	;# 
   354  0197                     	;# 
   355  0199                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019E                     	;# 
   365  019F                     	;# 
   366  020D                     	;# 
   367  0210                     	;# 
   368  0211                     	;# 
   369  0211                     	;# 
   370  0212                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0213                     	;# 
   374  0214                     	;# 
   375  0214                     	;# 
   376  0215                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0216                     	;# 
   380  0216                     	;# 
   381  0217                     	;# 
   382  0217                     	;# 
   383  0291                     	;# 
   384  0291                     	;# 
   385  0292                     	;# 
   386  0293                     	;# 
   387  0298                     	;# 
   388  0298                     	;# 
   389  0299                     	;# 
   390  029A                     	;# 
   391  0394                     	;# 
   392  0395                     	;# 
   393  0396                     	;# 
   394  0FE4                     	;# 
   395  0FE5                     	;# 
   396  0FE6                     	;# 
   397  0FE7                     	;# 
   398  0FE8                     	;# 
   399  0FE9                     	;# 
   400  0FEA                     	;# 
   401  0FEB                     	;# 
   402  0FED                     	;# 
   403  0FEE                     	;# 
   404  0FEF                     	;# 
   405  0000                     	;# 
   406  0001                     	;# 
   407  0002                     	;# 
   408  0003                     	;# 
   409  0004                     	;# 
   410  0005                     	;# 
   411  0006                     	;# 
   412  0007                     	;# 
   413  0008                     	;# 
   414  0009                     	;# 
   415  000A                     	;# 
   416  000B                     	;# 
   417  000C                     	;# 
   418  000D                     	;# 
   419  000E                     	;# 
   420  0010                     	;# 
   421  0011                     	;# 
   422  0012                     	;# 
   423  0015                     	;# 
   424  0016                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001C                     	;# 
   432  008C                     	;# 
   433  008D                     	;# 
   434  008E                     	;# 
   435  0090                     	;# 
   436  0091                     	;# 
   437  0092                     	;# 
   438  0095                     	;# 
   439  0096                     	;# 
   440  0097                     	;# 
   441  0099                     	;# 
   442  009A                     	;# 
   443  009B                     	;# 
   444  009B                     	;# 
   445  009C                     	;# 
   446  009D                     	;# 
   447  009E                     	;# 
   448  010C                     	;# 
   449  010D                     	;# 
   450  010E                     	;# 
   451  0116                     	;# 
   452  0117                     	;# 
   453  011D                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456  018E                     	;# 
   457  0191                     	;# 
   458  0191                     	;# 
   459  0192                     	;# 
   460  0193                     	;# 
   461  0193                     	;# 
   462  0194                     	;# 
   463  0195                     	;# 
   464  0196                     	;# 
   465  0197                     	;# 
   466  0199                     	;# 
   467  019A                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019C                     	;# 
   473  019C                     	;# 
   474  019D                     	;# 
   475  019E                     	;# 
   476  019F                     	;# 
   477  020D                     	;# 
   478  0210                     	;# 
   479  0211                     	;# 
   480  0211                     	;# 
   481  0212                     	;# 
   482  0212                     	;# 
   483  0213                     	;# 
   484  0213                     	;# 
   485  0214                     	;# 
   486  0214                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0291                     	;# 
   495  0291                     	;# 
   496  0292                     	;# 
   497  0293                     	;# 
   498  0298                     	;# 
   499  0298                     	;# 
   500  0299                     	;# 
   501  029A                     	;# 
   502  0394                     	;# 
   503  0395                     	;# 
   504  0396                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  0010                     	;# 
   532  0011                     	;# 
   533  0012                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001B                     	;# 
   542  001C                     	;# 
   543  008C                     	;# 
   544  008D                     	;# 
   545  008E                     	;# 
   546  0090                     	;# 
   547  0091                     	;# 
   548  0092                     	;# 
   549  0095                     	;# 
   550  0096                     	;# 
   551  0097                     	;# 
   552  0099                     	;# 
   553  009A                     	;# 
   554  009B                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  010C                     	;# 
   560  010D                     	;# 
   561  010E                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  011D                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  0197                     	;# 
   577  0199                     	;# 
   578  019A                     	;# 
   579  019B                     	;# 
   580  019B                     	;# 
   581  019B                     	;# 
   582  019B                     	;# 
   583  019C                     	;# 
   584  019C                     	;# 
   585  019D                     	;# 
   586  019E                     	;# 
   587  019F                     	;# 
   588  020D                     	;# 
   589  0210                     	;# 
   590  0211                     	;# 
   591  0211                     	;# 
   592  0212                     	;# 
   593  0212                     	;# 
   594  0213                     	;# 
   595  0213                     	;# 
   596  0214                     	;# 
   597  0214                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0216                     	;# 
   602  0216                     	;# 
   603  0217                     	;# 
   604  0217                     	;# 
   605  0291                     	;# 
   606  0291                     	;# 
   607  0292                     	;# 
   608  0293                     	;# 
   609  0298                     	;# 
   610  0298                     	;# 
   611  0299                     	;# 
   612  029A                     	;# 
   613  0394                     	;# 
   614  0395                     	;# 
   615  0396                     	;# 
   616  0FE4                     	;# 
   617  0FE5                     	;# 
   618  0FE6                     	;# 
   619  0FE7                     	;# 
   620  0FE8                     	;# 
   621  0FE9                     	;# 
   622  0FEA                     	;# 
   623  0FEB                     	;# 
   624  0FED                     	;# 
   625  0FEE                     	;# 
   626  0FEF                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  0010                     	;# 
   643  0011                     	;# 
   644  0012                     	;# 
   645  0015                     	;# 
   646  0016                     	;# 
   647  0016                     	;# 
   648  0017                     	;# 
   649  0018                     	;# 
   650  0019                     	;# 
   651  001A                     	;# 
   652  001B                     	;# 
   653  001C                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0090                     	;# 
   658  0091                     	;# 
   659  0092                     	;# 
   660  0095                     	;# 
   661  0096                     	;# 
   662  0097                     	;# 
   663  0099                     	;# 
   664  009A                     	;# 
   665  009B                     	;# 
   666  009B                     	;# 
   667  009C                     	;# 
   668  009D                     	;# 
   669  009E                     	;# 
   670  010C                     	;# 
   671  010D                     	;# 
   672  010E                     	;# 
   673  0116                     	;# 
   674  0117                     	;# 
   675  011D                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  018E                     	;# 
   679  0191                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0194                     	;# 
   685  0195                     	;# 
   686  0196                     	;# 
   687  0197                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019C                     	;# 
   695  019C                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  020D                     	;# 
   700  0210                     	;# 
   701  0211                     	;# 
   702  0211                     	;# 
   703  0212                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0213                     	;# 
   707  0214                     	;# 
   708  0214                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0216                     	;# 
   713  0216                     	;# 
   714  0217                     	;# 
   715  0217                     	;# 
   716  0291                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0293                     	;# 
   720  0298                     	;# 
   721  0298                     	;# 
   722  0299                     	;# 
   723  029A                     	;# 
   724  0394                     	;# 
   725  0395                     	;# 
   726  0396                     	;# 
   727  0FE4                     	;# 
   728  0FE5                     	;# 
   729  0FE6                     	;# 
   730  0FE7                     	;# 
   731  0FE8                     	;# 
   732  0FE9                     	;# 
   733  0FEA                     	;# 
   734  0FEB                     	;# 
   735  0FED                     	;# 
   736  0FEE                     	;# 
   737  0FEF                     	;# 
   738  0000                     	;# 
   739  0001                     	;# 
   740  0002                     	;# 
   741  0003                     	;# 
   742  0004                     	;# 
   743  0005                     	;# 
   744  0006                     	;# 
   745  0007                     	;# 
   746  0008                     	;# 
   747  0009                     	;# 
   748  000A                     	;# 
   749  000B                     	;# 
   750  000C                     	;# 
   751  000D                     	;# 
   752  000E                     	;# 
   753  0010                     	;# 
   754  0011                     	;# 
   755  0012                     	;# 
   756  0015                     	;# 
   757  0016                     	;# 
   758  0016                     	;# 
   759  0017                     	;# 
   760  0018                     	;# 
   761  0019                     	;# 
   762  001A                     	;# 
   763  001B                     	;# 
   764  001C                     	;# 
   765  008C                     	;# 
   766  008D                     	;# 
   767  008E                     	;# 
   768  0090                     	;# 
   769  0091                     	;# 
   770  0092                     	;# 
   771  0095                     	;# 
   772  0096                     	;# 
   773  0097                     	;# 
   774  0099                     	;# 
   775  009A                     	;# 
   776  009B                     	;# 
   777  009B                     	;# 
   778  009C                     	;# 
   779  009D                     	;# 
   780  009E                     	;# 
   781  010C                     	;# 
   782  010D                     	;# 
   783  010E                     	;# 
   784  0116                     	;# 
   785  0117                     	;# 
   786  011D                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  018E                     	;# 
   790  0191                     	;# 
   791  0191                     	;# 
   792  0192                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0197                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020D                     	;# 
   811  0210                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0291                     	;# 
   828  0291                     	;# 
   829  0292                     	;# 
   830  0293                     	;# 
   831  0298                     	;# 
   832  0298                     	;# 
   833  0299                     	;# 
   834  029A                     	;# 
   835  0394                     	;# 
   836  0395                     	;# 
   837  0396                     	;# 
   838  0FE4                     	;# 
   839  0FE5                     	;# 
   840  0FE6                     	;# 
   841  0FE7                     	;# 
   842  0FE8                     	;# 
   843  0FE9                     	;# 
   844  0FEA                     	;# 
   845  0FEB                     	;# 
   846  0FED                     	;# 
   847  0FEE                     	;# 
   848  0FEF                     	;# 
   849  0000                     	;# 
   850  0001                     	;# 
   851  0002                     	;# 
   852  0003                     	;# 
   853  0004                     	;# 
   854  0005                     	;# 
   855  0006                     	;# 
   856  0007                     	;# 
   857  0008                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  0010                     	;# 
   865  0011                     	;# 
   866  0012                     	;# 
   867  0015                     	;# 
   868  0016                     	;# 
   869  0016                     	;# 
   870  0017                     	;# 
   871  0018                     	;# 
   872  0019                     	;# 
   873  001A                     	;# 
   874  001B                     	;# 
   875  001C                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  008E                     	;# 
   879  0090                     	;# 
   880  0091                     	;# 
   881  0092                     	;# 
   882  0095                     	;# 
   883  0096                     	;# 
   884  0097                     	;# 
   885  0099                     	;# 
   886  009A                     	;# 
   887  009B                     	;# 
   888  009B                     	;# 
   889  009C                     	;# 
   890  009D                     	;# 
   891  009E                     	;# 
   892  010C                     	;# 
   893  010D                     	;# 
   894  010E                     	;# 
   895  0116                     	;# 
   896  0117                     	;# 
   897  011D                     	;# 
   898  018C                     	;# 
   899  018D                     	;# 
   900  018E                     	;# 
   901  0191                     	;# 
   902  0191                     	;# 
   903  0192                     	;# 
   904  0193                     	;# 
   905  0193                     	;# 
   906  0194                     	;# 
   907  0195                     	;# 
   908  0196                     	;# 
   909  0197                     	;# 
   910  0199                     	;# 
   911  019A                     	;# 
   912  019B                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019C                     	;# 
   917  019C                     	;# 
   918  019D                     	;# 
   919  019E                     	;# 
   920  019F                     	;# 
   921  020D                     	;# 
   922  0210                     	;# 
   923  0211                     	;# 
   924  0211                     	;# 
   925  0212                     	;# 
   926  0212                     	;# 
   927  0213                     	;# 
   928  0213                     	;# 
   929  0214                     	;# 
   930  0214                     	;# 
   931  0215                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0216                     	;# 
   935  0216                     	;# 
   936  0217                     	;# 
   937  0217                     	;# 
   938  0291                     	;# 
   939  0291                     	;# 
   940  0292                     	;# 
   941  0293                     	;# 
   942  0298                     	;# 
   943  0298                     	;# 
   944  0299                     	;# 
   945  029A                     	;# 
   946  0394                     	;# 
   947  0395                     	;# 
   948  0396                     	;# 
   949  0FE4                     	;# 
   950  0FE5                     	;# 
   951  0FE6                     	;# 
   952  0FE7                     	;# 
   953  0FE8                     	;# 
   954  0FE9                     	;# 
   955  0FEA                     	;# 
   956  0FEB                     	;# 
   957  0FED                     	;# 
   958  0FEE                     	;# 
   959  0FEF                     	;# 
   960  0000                     	;# 
   961  0001                     	;# 
   962  0002                     	;# 
   963  0003                     	;# 
   964  0004                     	;# 
   965  0005                     	;# 
   966  0006                     	;# 
   967  0007                     	;# 
   968  0008                     	;# 
   969  0009                     	;# 
   970  000A                     	;# 
   971  000B                     	;# 
   972  000C                     	;# 
   973  000D                     	;# 
   974  000E                     	;# 
   975  0010                     	;# 
   976  0011                     	;# 
   977  0012                     	;# 
   978  0015                     	;# 
   979  0016                     	;# 
   980  0016                     	;# 
   981  0017                     	;# 
   982  0018                     	;# 
   983  0019                     	;# 
   984  001A                     	;# 
   985  001B                     	;# 
   986  001C                     	;# 
   987  008C                     	;# 
   988  008D                     	;# 
   989  008E                     	;# 
   990  0090                     	;# 
   991  0091                     	;# 
   992  0092                     	;# 
   993  0095                     	;# 
   994  0096                     	;# 
   995  0097                     	;# 
   996  0099                     	;# 
   997  009A                     	;# 
   998  009B                     	;# 
   999  009B                     	;# 
  1000  009C                     	;# 
  1001  009D                     	;# 
  1002  009E                     	;# 
  1003  010C                     	;# 
  1004  010D                     	;# 
  1005  010E                     	;# 
  1006  0116                     	;# 
  1007  0117                     	;# 
  1008  011D                     	;# 
  1009  018C                     	;# 
  1010  018D                     	;# 
  1011  018E                     	;# 
  1012  0191                     	;# 
  1013  0191                     	;# 
  1014  0192                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0197                     	;# 
  1021  0199                     	;# 
  1022  019A                     	;# 
  1023  019B                     	;# 
  1024  019B                     	;# 
  1025  019B                     	;# 
  1026  019B                     	;# 
  1027  019C                     	;# 
  1028  019C                     	;# 
  1029  019D                     	;# 
  1030  019E                     	;# 
  1031  019F                     	;# 
  1032  020D                     	;# 
  1033  0210                     	;# 
  1034  0211                     	;# 
  1035  0211                     	;# 
  1036  0212                     	;# 
  1037  0212                     	;# 
  1038  0213                     	;# 
  1039  0213                     	;# 
  1040  0214                     	;# 
  1041  0214                     	;# 
  1042  0215                     	;# 
  1043  0215                     	;# 
  1044  0215                     	;# 
  1045  0216                     	;# 
  1046  0216                     	;# 
  1047  0217                     	;# 
  1048  0217                     	;# 
  1049  0291                     	;# 
  1050  0291                     	;# 
  1051  0292                     	;# 
  1052  0293                     	;# 
  1053  0298                     	;# 
  1054  0298                     	;# 
  1055  0299                     	;# 
  1056  029A                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0FE4                     	;# 
  1061  0FE5                     	;# 
  1062  0FE6                     	;# 
  1063  0FE7                     	;# 
  1064  0FE8                     	;# 
  1065  0FE9                     	;# 
  1066  0FEA                     	;# 
  1067  0FEB                     	;# 
  1068  0FED                     	;# 
  1069  0FEE                     	;# 
  1070  0FEF                     	;# 
  1071  0000                     	;# 
  1072  0001                     	;# 
  1073  0002                     	;# 
  1074  0003                     	;# 
  1075  0004                     	;# 
  1076  0005                     	;# 
  1077  0006                     	;# 
  1078  0007                     	;# 
  1079  0008                     	;# 
  1080  0009                     	;# 
  1081  000A                     	;# 
  1082  000B                     	;# 
  1083  000C                     	;# 
  1084  000D                     	;# 
  1085  000E                     	;# 
  1086  0010                     	;# 
  1087  0011                     	;# 
  1088  0012                     	;# 
  1089  0015                     	;# 
  1090  0016                     	;# 
  1091  0016                     	;# 
  1092  0017                     	;# 
  1093  0018                     	;# 
  1094  0019                     	;# 
  1095  001A                     	;# 
  1096  001B                     	;# 
  1097  001C                     	;# 
  1098  008C                     	;# 
  1099  008D                     	;# 
  1100  008E                     	;# 
  1101  0090                     	;# 
  1102  0091                     	;# 
  1103  0092                     	;# 
  1104  0095                     	;# 
  1105  0096                     	;# 
  1106  0097                     	;# 
  1107  0099                     	;# 
  1108  009A                     	;# 
  1109  009B                     	;# 
  1110  009B                     	;# 
  1111  009C                     	;# 
  1112  009D                     	;# 
  1113  009E                     	;# 
  1114  010C                     	;# 
  1115  010D                     	;# 
  1116  010E                     	;# 
  1117  0116                     	;# 
  1118  0117                     	;# 
  1119  011D                     	;# 
  1120  018C                     	;# 
  1121  018D                     	;# 
  1122  018E                     	;# 
  1123  0191                     	;# 
  1124  0191                     	;# 
  1125  0192                     	;# 
  1126  0193                     	;# 
  1127  0193                     	;# 
  1128  0194                     	;# 
  1129  0195                     	;# 
  1130  0196                     	;# 
  1131  0197                     	;# 
  1132  0199                     	;# 
  1133  019A                     	;# 
  1134  019B                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019C                     	;# 
  1139  019C                     	;# 
  1140  019D                     	;# 
  1141  019E                     	;# 
  1142  019F                     	;# 
  1143  020D                     	;# 
  1144  0210                     	;# 
  1145  0211                     	;# 
  1146  0211                     	;# 
  1147  0212                     	;# 
  1148  0212                     	;# 
  1149  0213                     	;# 
  1150  0213                     	;# 
  1151  0214                     	;# 
  1152  0214                     	;# 
  1153  0215                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0216                     	;# 
  1157  0216                     	;# 
  1158  0217                     	;# 
  1159  0217                     	;# 
  1160  0291                     	;# 
  1161  0291                     	;# 
  1162  0292                     	;# 
  1163  0293                     	;# 
  1164  0298                     	;# 
  1165  0298                     	;# 
  1166  0299                     	;# 
  1167  029A                     	;# 
  1168  0394                     	;# 
  1169  0395                     	;# 
  1170  0396                     	;# 
  1171  0FE4                     	;# 
  1172  0FE5                     	;# 
  1173  0FE6                     	;# 
  1174  0FE7                     	;# 
  1175  0FE8                     	;# 
  1176  0FE9                     	;# 
  1177  0FEA                     	;# 
  1178  0FEB                     	;# 
  1179  0FED                     	;# 
  1180  0FEE                     	;# 
  1181  0FEF                     	;# 
  1182  0000                     	;# 
  1183  0001                     	;# 
  1184  0002                     	;# 
  1185  0003                     	;# 
  1186  0004                     	;# 
  1187  0005                     	;# 
  1188  0006                     	;# 
  1189  0007                     	;# 
  1190  0008                     	;# 
  1191  0009                     	;# 
  1192  000A                     	;# 
  1193  000B                     	;# 
  1194  000C                     	;# 
  1195  000D                     	;# 
  1196  000E                     	;# 
  1197  0010                     	;# 
  1198  0011                     	;# 
  1199  0012                     	;# 
  1200  0015                     	;# 
  1201  0016                     	;# 
  1202  0016                     	;# 
  1203  0017                     	;# 
  1204  0018                     	;# 
  1205  0019                     	;# 
  1206  001A                     	;# 
  1207  001B                     	;# 
  1208  001C                     	;# 
  1209  008C                     	;# 
  1210  008D                     	;# 
  1211  008E                     	;# 
  1212  0090                     	;# 
  1213  0091                     	;# 
  1214  0092                     	;# 
  1215  0095                     	;# 
  1216  0096                     	;# 
  1217  0097                     	;# 
  1218  0099                     	;# 
  1219  009A                     	;# 
  1220  009B                     	;# 
  1221  009B                     	;# 
  1222  009C                     	;# 
  1223  009D                     	;# 
  1224  009E                     	;# 
  1225  010C                     	;# 
  1226  010D                     	;# 
  1227  010E                     	;# 
  1228  0116                     	;# 
  1229  0117                     	;# 
  1230  011D                     	;# 
  1231  018C                     	;# 
  1232  018D                     	;# 
  1233  018E                     	;# 
  1234  0191                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0193                     	;# 
  1238  0193                     	;# 
  1239  0194                     	;# 
  1240  0195                     	;# 
  1241  0196                     	;# 
  1242  0197                     	;# 
  1243  0199                     	;# 
  1244  019A                     	;# 
  1245  019B                     	;# 
  1246  019B                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019C                     	;# 
  1250  019C                     	;# 
  1251  019D                     	;# 
  1252  019E                     	;# 
  1253  019F                     	;# 
  1254  020D                     	;# 
  1255  0210                     	;# 
  1256  0211                     	;# 
  1257  0211                     	;# 
  1258  0212                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0213                     	;# 
  1262  0214                     	;# 
  1263  0214                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0215                     	;# 
  1267  0216                     	;# 
  1268  0216                     	;# 
  1269  0217                     	;# 
  1270  0217                     	;# 
  1271  0291                     	;# 
  1272  0291                     	;# 
  1273  0292                     	;# 
  1274  0293                     	;# 
  1275  0298                     	;# 
  1276  0298                     	;# 
  1277  0299                     	;# 
  1278  029A                     	;# 
  1279  0394                     	;# 
  1280  0395                     	;# 
  1281  0396                     	;# 
  1282  0FE4                     	;# 
  1283  0FE5                     	;# 
  1284  0FE6                     	;# 
  1285  0FE7                     	;# 
  1286  0FE8                     	;# 
  1287  0FE9                     	;# 
  1288  0FEA                     	;# 
  1289  0FEB                     	;# 
  1290  0FED                     	;# 
  1291  0FEE                     	;# 
  1292  0FEF                     	;# 
  1293  0000                     	;# 
  1294  0001                     	;# 
  1295  0002                     	;# 
  1296  0003                     	;# 
  1297  0004                     	;# 
  1298  0005                     	;# 
  1299  0006                     	;# 
  1300  0007                     	;# 
  1301  0008                     	;# 
  1302  0009                     	;# 
  1303  000A                     	;# 
  1304  000B                     	;# 
  1305  000C                     	;# 
  1306  000D                     	;# 
  1307  000E                     	;# 
  1308  0010                     	;# 
  1309  0011                     	;# 
  1310  0012                     	;# 
  1311  0015                     	;# 
  1312  0016                     	;# 
  1313  0016                     	;# 
  1314  0017                     	;# 
  1315  0018                     	;# 
  1316  0019                     	;# 
  1317  001A                     	;# 
  1318  001B                     	;# 
  1319  001C                     	;# 
  1320  008C                     	;# 
  1321  008D                     	;# 
  1322  008E                     	;# 
  1323  0090                     	;# 
  1324  0091                     	;# 
  1325  0092                     	;# 
  1326  0095                     	;# 
  1327  0096                     	;# 
  1328  0097                     	;# 
  1329  0099                     	;# 
  1330  009A                     	;# 
  1331  009B                     	;# 
  1332  009B                     	;# 
  1333  009C                     	;# 
  1334  009D                     	;# 
  1335  009E                     	;# 
  1336  010C                     	;# 
  1337  010D                     	;# 
  1338  010E                     	;# 
  1339  0116                     	;# 
  1340  0117                     	;# 
  1341  011D                     	;# 
  1342  018C                     	;# 
  1343  018D                     	;# 
  1344  018E                     	;# 
  1345  0191                     	;# 
  1346  0191                     	;# 
  1347  0192                     	;# 
  1348  0193                     	;# 
  1349  0193                     	;# 
  1350  0194                     	;# 
  1351  0195                     	;# 
  1352  0196                     	;# 
  1353  0197                     	;# 
  1354  0199                     	;# 
  1355  019A                     	;# 
  1356  019B                     	;# 
  1357  019B                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019C                     	;# 
  1362  019D                     	;# 
  1363  019E                     	;# 
  1364  019F                     	;# 
  1365  020D                     	;# 
  1366  0210                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0291                     	;# 
  1383  0291                     	;# 
  1384  0292                     	;# 
  1385  0293                     	;# 
  1386  0298                     	;# 
  1387  0298                     	;# 
  1388  0299                     	;# 
  1389  029A                     	;# 
  1390  0394                     	;# 
  1391  0395                     	;# 
  1392  0396                     	;# 
  1393  0FE4                     	;# 
  1394  0FE5                     	;# 
  1395  0FE6                     	;# 
  1396  0FE7                     	;# 
  1397  0FE8                     	;# 
  1398  0FE9                     	;# 
  1399  0FEA                     	;# 
  1400  0FEB                     	;# 
  1401  0FED                     	;# 
  1402  0FEE                     	;# 
  1403  0FEF                     	;# 
  1404  0000                     	;# 
  1405  0001                     	;# 
  1406  0002                     	;# 
  1407  0003                     	;# 
  1408  0004                     	;# 
  1409  0005                     	;# 
  1410  0006                     	;# 
  1411  0007                     	;# 
  1412  0008                     	;# 
  1413  0009                     	;# 
  1414  000A                     	;# 
  1415  000B                     	;# 
  1416  000C                     	;# 
  1417  000D                     	;# 
  1418  000E                     	;# 
  1419  0010                     	;# 
  1420  0011                     	;# 
  1421  0012                     	;# 
  1422  0015                     	;# 
  1423  0016                     	;# 
  1424  0016                     	;# 
  1425  0017                     	;# 
  1426  0018                     	;# 
  1427  0019                     	;# 
  1428  001A                     	;# 
  1429  001B                     	;# 
  1430  001C                     	;# 
  1431  008C                     	;# 
  1432  008D                     	;# 
  1433  008E                     	;# 
  1434  0090                     	;# 
  1435  0091                     	;# 
  1436  0092                     	;# 
  1437  0095                     	;# 
  1438  0096                     	;# 
  1439  0097                     	;# 
  1440  0099                     	;# 
  1441  009A                     	;# 
  1442  009B                     	;# 
  1443  009B                     	;# 
  1444  009C                     	;# 
  1445  009D                     	;# 
  1446  009E                     	;# 
  1447  010C                     	;# 
  1448  010D                     	;# 
  1449  010E                     	;# 
  1450  0116                     	;# 
  1451  0117                     	;# 
  1452  011D                     	;# 
  1453  018C                     	;# 
  1454  018D                     	;# 
  1455  018E                     	;# 
  1456  0191                     	;# 
  1457  0191                     	;# 
  1458  0192                     	;# 
  1459  0193                     	;# 
  1460  0193                     	;# 
  1461  0194                     	;# 
  1462  0195                     	;# 
  1463  0196                     	;# 
  1464  0197                     	;# 
  1465  0199                     	;# 
  1466  019A                     	;# 
  1467  019B                     	;# 
  1468  019B                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019C                     	;# 
  1472  019C                     	;# 
  1473  019D                     	;# 
  1474  019E                     	;# 
  1475  019F                     	;# 
  1476  020D                     	;# 
  1477  0210                     	;# 
  1478  0211                     	;# 
  1479  0211                     	;# 
  1480  0212                     	;# 
  1481  0212                     	;# 
  1482  0213                     	;# 
  1483  0213                     	;# 
  1484  0214                     	;# 
  1485  0214                     	;# 
  1486  0215                     	;# 
  1487  0215                     	;# 
  1488  0215                     	;# 
  1489  0216                     	;# 
  1490  0216                     	;# 
  1491  0217                     	;# 
  1492  0217                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0298                     	;# 
  1498  0298                     	;# 
  1499  0299                     	;# 
  1500  029A                     	;# 
  1501  0394                     	;# 
  1502  0395                     	;# 
  1503  0396                     	;# 
  1504  0FE4                     	;# 
  1505  0FE5                     	;# 
  1506  0FE6                     	;# 
  1507  0FE7                     	;# 
  1508  0FE8                     	;# 
  1509  0FE9                     	;# 
  1510  0FEA                     	;# 
  1511  0FEB                     	;# 
  1512  0FED                     	;# 
  1513  0FEE                     	;# 
  1514  0FEF                     	;# 
  1515  0000                     	;# 
  1516  0001                     	;# 
  1517  0002                     	;# 
  1518  0003                     	;# 
  1519  0004                     	;# 
  1520  0005                     	;# 
  1521  0006                     	;# 
  1522  0007                     	;# 
  1523  0008                     	;# 
  1524  0009                     	;# 
  1525  000A                     	;# 
  1526  000B                     	;# 
  1527  000C                     	;# 
  1528  000D                     	;# 
  1529  000E                     	;# 
  1530  0010                     	;# 
  1531  0011                     	;# 
  1532  0012                     	;# 
  1533  0015                     	;# 
  1534  0016                     	;# 
  1535  0016                     	;# 
  1536  0017                     	;# 
  1537  0018                     	;# 
  1538  0019                     	;# 
  1539  001A                     	;# 
  1540  001B                     	;# 
  1541  001C                     	;# 
  1542  008C                     	;# 
  1543  008D                     	;# 
  1544  008E                     	;# 
  1545  0090                     	;# 
  1546  0091                     	;# 
  1547  0092                     	;# 
  1548  0095                     	;# 
  1549  0096                     	;# 
  1550  0097                     	;# 
  1551  0099                     	;# 
  1552  009A                     	;# 
  1553  009B                     	;# 
  1554  009B                     	;# 
  1555  009C                     	;# 
  1556  009D                     	;# 
  1557  009E                     	;# 
  1558  010C                     	;# 
  1559  010D                     	;# 
  1560  010E                     	;# 
  1561  0116                     	;# 
  1562  0117                     	;# 
  1563  011D                     	;# 
  1564  018C                     	;# 
  1565  018D                     	;# 
  1566  018E                     	;# 
  1567  0191                     	;# 
  1568  0191                     	;# 
  1569  0192                     	;# 
  1570  0193                     	;# 
  1571  0193                     	;# 
  1572  0194                     	;# 
  1573  0195                     	;# 
  1574  0196                     	;# 
  1575  0197                     	;# 
  1576  0199                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019D                     	;# 
  1585  019E                     	;# 
  1586  019F                     	;# 
  1587  020D                     	;# 
  1588  0210                     	;# 
  1589  0211                     	;# 
  1590  0211                     	;# 
  1591  0212                     	;# 
  1592  0212                     	;# 
  1593  0213                     	;# 
  1594  0213                     	;# 
  1595  0214                     	;# 
  1596  0214                     	;# 
  1597  0215                     	;# 
  1598  0215                     	;# 
  1599  0215                     	;# 
  1600  0216                     	;# 
  1601  0216                     	;# 
  1602  0217                     	;# 
  1603  0217                     	;# 
  1604  0291                     	;# 
  1605  0291                     	;# 
  1606  0292                     	;# 
  1607  0293                     	;# 
  1608  0298                     	;# 
  1609  0298                     	;# 
  1610  0299                     	;# 
  1611  029A                     	;# 
  1612  0394                     	;# 
  1613  0395                     	;# 
  1614  0396                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626                           
  1627                           	psect	idataBANK1
  1628  0C59                     __pidataBANK1:	
  1629                           
  1630                           ;initializer for _cc1PaTable
  1631  0C59  3403               	retlw	3
  1632  0C5A  340F               	retlw	15
  1633  0C5B  341E               	retlw	30
  1634  0C5C  3427               	retlw	39
  1635  0C5D  3450               	retlw	80
  1636  0C5E  3481               	retlw	129
  1637  0C5F  34CB               	retlw	203
  1638  0C60  34C2               	retlw	194
  1639                           
  1640                           	psect	idataBANK2
  1641  0F35                     __pidataBANK2:	
  1642                           
  1643                           ;initializer for _cc1InitVal
  1644  0F35  3447               	retlw	71
  1645  0F36  3446               	retlw	70
  1646  0F37  3480               	retlw	128
  1647  0F38  340F               	retlw	15
  1648  0F39  34D3               	retlw	211
  1649  0F3A  3491               	retlw	145
  1650  0F3B  3409               	retlw	9
  1651  0F3C  3408               	retlw	8
  1652  0F3D  3404               	retlw	4
  1653  0F3E  3400               	retlw	0
  1654  0F3F  3400               	retlw	0
  1655  0F40  3406               	retlw	6
  1656  0F41  3400               	retlw	0
  1657  0F42  3421               	retlw	33
  1658  0F43  3463               	retlw	99
  1659  0F44  3491               	retlw	145
  1660  0F45  34CA               	retlw	202
  1661  0F46  3483               	retlw	131
  1662  0F47  3402               	retlw	2
  1663  0F48  3402               	retlw	2
  1664  0F49  343B               	retlw	59
  1665  0F4A  3434               	retlw	52
  1666  0F4B  3407               	retlw	7
  1667  0F4C  343F               	retlw	63
  1668  0F4D  3408               	retlw	8
  1669  0F4E  3416               	retlw	22
  1670  0F4F  346C               	retlw	108
  1671  0F50  3403               	retlw	3
  1672  0F51  3440               	retlw	64
  1673  0F52  3491               	retlw	145
  1674  0F53  3487               	retlw	135
  1675  0F54  346B               	retlw	107
  1676  0F55  34FB               	retlw	251
  1677  0F56  3456               	retlw	86
  1678  0F57  3416               	retlw	22
  1679  0F58  34E9               	retlw	233
  1680  0F59  342A               	retlw	42
  1681  0F5A  3400               	retlw	0
  1682  0F5B  341F               	retlw	31
  1683  0F5C  3441               	retlw	65
  1684  0F5D  3400               	retlw	0
  1685  0F5E  3459               	retlw	89
  1686  0F5F  347F               	retlw	127
  1687  0F60  343F               	retlw	63
  1688  0F61  3481               	retlw	129
  1689  0F62  3435               	retlw	53
  1690  0F63  3409               	retlw	9
  1691                           
  1692                           	psect	strings
  1693  0800                     __pstrings:	
  1694  0800                     __stringtab:	
  1695  0800  3400               	retlw	0
  1696  0801                     __end_of__stringtab:	
  1697  0801                     _nvm_pgm_cfg:	
  1698  0801  345C               	retlw	92
  1699  0802  34C5               	retlw	197
  1700  0803  3400               	retlw	0
  1701  0804  3400               	retlw	0
  1702  0805  3400               	retlw	0
  1703  0806                     __end_of_nvm_pgm_cfg:	
  1704  000B                     _INTCON	set	11
  1705  000B                     _INTCONbits	set	11
  1706  0011                     _PIR1	set	17
  1707  0011                     _PIR1bits	set	17
  1708  0012                     _PIR2	set	18
  1709  000C                     _PORTAbits	set	12
  1710  000D                     _PORTB	set	13
  1711  000D                     _PORTBbits	set	13
  1712  000E                     _PORTC	set	14
  1713  000E                     _PORTCbits	set	14
  1714  0018                     _T1CON	set	24
  1715  0015                     _TMR0	set	21
  1716  0017                     _TMR1H	set	23
  1717  0016                     _TMR1L	set	22
  1718  009D                     _ADCON0	set	157
  1719  009D                     _ADCON0bits	set	157
  1720  009E                     _ADCON1	set	158
  1721  009C                     _ADRESH	set	156
  1722  0095                     _OPTION_REG	set	149
  1723  0099                     _OSCCON	set	153
  1724  0091                     _PIE1	set	145
  1725  0092                     _PIE2	set	146
  1726  008C                     _TRISA	set	140
  1727  008D                     _TRISB	set	141
  1728  008E                     _TRISC	set	142
  1729  0097                     _WDTCON	set	151
  1730  0117                     _FVRCON	set	279
  1731  0191                     _PMADR	set	401
  1732  0193                     _PMDAT	set	403
  1733  018C                     _ANSELA	set	396
  1734  018D                     _ANSELB	set	397
  1735  018E                     _ANSELC	set	398
  1736  0195                     _PMCON1	set	405
  1737  0195                     _PMCON1bits	set	405
  1738  0196                     _PMCON2	set	406
  1739  0211                     _SSPBUF	set	529
  1740  0215                     _SSPCON1	set	533
  1741  0216                     _SSPCON2	set	534
  1742  0215                     _SSPCONbits	set	533
  1743  0214                     _SSPSTAT	set	532
  1744  020D                     _WPUB	set	525
  1745  0396                     _IOCBFbits	set	918
  1746  0395                     _IOCBN	set	917
  1747  0394                     _IOCBP	set	916
  1748                           
  1749                           ; #config settings
  1750  0000                     
  1751                           	psect	cinit
  1752  0016                     start_initialization:	
  1753  0016                     __initialization:	
  1754                           
  1755                           ; Clear objects allocated to COMMON
  1756  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1757                           
  1758                           ; Clear objects allocated to BANK0
  1759  0017  3069               	movlw	low __pbssBANK0
  1760  0018  0084               	movwf	4
  1761  0019  3000               	movlw	high __pbssBANK0
  1762  001A  0085               	movwf	5
  1763  001B  3007               	movlw	7
  1764  001C  318C  2443  3180   	fcall	clear_ram0
  1765                           
  1766                           ; Clear objects allocated to BANK1
  1767  001F  30A0               	movlw	low __pbssBANK1
  1768  0020  0084               	movwf	4
  1769  0021  3000               	movlw	high __pbssBANK1
  1770  0022  0085               	movwf	5
  1771  0023  3030               	movlw	48
  1772  0024  318C  2443  3180   	fcall	clear_ram0
  1773                           
  1774                           ; Initialize objects allocated to BANK1
  1775  0027  3059               	movlw	low __pidataBANK1
  1776  0028  0084               	movwf	4
  1777  0029  308C               	movlw	(high __pidataBANK1)| (0+128)
  1778  002A  0085               	movwf	5
  1779  002B  30D0               	movlw	low __pdataBANK1
  1780  002C  0086               	movwf	6
  1781  002D  3000               	movlw	high __pdataBANK1
  1782  002E  0087               	movwf	7
  1783  002F  3008               	movlw	8
  1784  0030  318C  243D  3180   	fcall	init_ram
  1785                           
  1786                           ; Initialize objects allocated to BANK2
  1787  0033  3035               	movlw	low __pidataBANK2
  1788  0034  0084               	movwf	4
  1789  0035  308F               	movlw	(high __pidataBANK2)| (0+128)
  1790  0036  0085               	movwf	5
  1791  0037  3020               	movlw	low __pdataBANK2
  1792  0038  0086               	movwf	6
  1793  0039  3001               	movlw	high __pdataBANK2
  1794  003A  0087               	movwf	7
  1795  003B  302F               	movlw	47
  1796  003C  318C  243D         	fcall	init_ram
  1797  003E                     end_of_initialization:	
  1798                           ;End of C runtime variable initialization code
  1799                           
  1800  003E                     __end_of__initialization:	
  1801  003E  0020               	movlb	0
  1802  003F  3186  2EA1         	ljmp	_main	;jump to C main() function
  1803                           
  1804                           	psect	bssCOMMON
  1805  007C                     __pbssCOMMON:	
  1806  007C                     _u_in_sta_currTask:	
  1807  007C                     	ds	1
  1808                           
  1809                           	psect	bssBANK0
  1810  0069                     __pbssBANK0:	
  1811  0069                     ADCTask@cntSum:	
  1812  0069                     	ds	1
  1813  006A                     _pgm_flg:	
  1814  006A                     	ds	1
  1815  006B                     _rtx_flg:	
  1816  006B                     	ds	1
  1817  006C                     _tmrPgm:	
  1818  006C                     	ds	1
  1819  006D                     _tmrRcvPkt:	
  1820  006D                     	ds	1
  1821  006E                     _u_flg_din:	
  1822  006E                     	ds	1
  1823  006F                     _u_in_sta_tmpTask:	
  1824  006F                     	ds	1
  1825                           
  1826                           	psect	bssBANK1
  1827  00A0                     __pbssBANK1:	
  1828  00A0                     _battV:	
  1829  00A0                     	ds	3
  1830  00A3                     _tempC:	
  1831  00A3                     	ds	3
  1832  00A6                     ADCTask@sumBatt:	
  1833  00A6                     	ds	2
  1834  00A8                     ADCTask@sumTemp:	
  1835  00A8                     	ds	2
  1836  00AA                     _tmrLongSel:	
  1837  00AA                     	ds	2
  1838  00AC                     _adc_ch:	
  1839  00AC                     	ds	1
  1840  00AD                     _adc_ev:	
  1841  00AD                     	ds	1
  1842  00AE                     _batt:	
  1843  00AE                     	ds	1
  1844  00AF                     _cntSndData:	
  1845  00AF                     	ds	1
  1846  00B0                     _flg_slp:	
  1847  00B0                     	ds	1
  1848  00B1                     _s_CC1_FLG:	
  1849  00B1                     	ds	1
  1850  00B2                     _sys_pgm_sta:	
  1851  00B2                     	ds	1
  1852  00B3                     _temp:	
  1853  00B3                     	ds	1
  1854  00B4                     _tmrDbncSel:	
  1855  00B4                     	ds	1
  1856  00B5                     _u_SYS_STA:	
  1857  00B5                     	ds	1
  1858  00B6                     _u_in_ev_down:	
  1859  00B6                     	ds	1
  1860  00B7                     _u_in_ev_long:	
  1861  00B7                     	ds	1
  1862  00B8                     _u_in_ev_up:	
  1863  00B8                     	ds	1
  1864  00B9                     _pktRx:	
  1865  00B9                     	ds	9
  1866  00C2                     _pktTx:	
  1867  00C2                     	ds	9
  1868  00CB                     _pgm_cfg:	
  1869  00CB                     	ds	5
  1870                           
  1871                           	psect	dataBANK1
  1872  00D0                     __pdataBANK1:	
  1873  00D0                     _cc1PaTable:	
  1874  00D0                     	ds	8
  1875                           
  1876                           	psect	dataBANK2
  1877  0120                     __pdataBANK2:	
  1878  0120                     _cc1InitVal:	
  1879  0120                     	ds	47
  1880                           
  1881                           	psect	clrtext
  1882  0C43                     clear_ram0:	
  1883                           ;	Called with FSR0 containing the base address, and
  1884                           ;	WREG with the size to clear
  1885                           
  1886  0C43  0064               	clrwdt	;clear the watchdog before getting into this loop
  1887  0C44                     clrloop0:	
  1888  0C44  0180               	clrf	0	;clear RAM location pointed to by FSR
  1889  0C45  3101               	addfsr 0,1
  1890  0C46  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1891  0C47  2C44               	goto	clrloop0	;have we reached the end yet?
  1892  0C48  3400               	retlw	0	;all done for this memory range, return
  1893                           
  1894                           	psect	inittext
  1895  0C3D                     init_ram:	
  1896  0C3D  00FE               	movwf	126
  1897  0C3E                     initloop:	
  1898  0C3E  0012               	moviw fsr0++
  1899  0C3F  001E               	movwi fsr1++
  1900  0C40  0BFE               	decfsz	126,f
  1901  0C41  2C3E               	goto	initloop
  1902  0C42  3400               	retlw	0
  1903                           
  1904                           	psect	cstackBANK1
  1905  00D8                     __pcstackBANK1:	
  1906  00D8                     main@i:	
  1907                           
  1908                           ; 1 bytes @ 0x0
  1909  00D8                     	ds	1
  1910                           
  1911                           	psect	cstackCOMMON
  1912  0070                     __pcstackCOMMON:	
  1913  0070                     ?_CC1Strobe:	
  1914  0070                     ?_PGMReadNvm:	
  1915                           ; 0 bytes @ 0x0
  1916                           
  1917  0070                     ?_PGMCheckNvm:	
  1918                           ; 0 bytes @ 0x0
  1919                           
  1920  0070                     ?_PGMNvmReset:	
  1921                           ; 0 bytes @ 0x0
  1922                           
  1923  0070                     ?_RTXStartSendData:	
  1924                           ; 0 bytes @ 0x0
  1925                           
  1926  0070                     ?_RTXSendData:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0070                     ?_RTXReadPkt:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0070                     ?_RTXSendRPgm:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0070                     ?_INInit:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0070                     ?_OUTInit:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0070                     ?_SPIInit:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0070                     ?_ADCInit:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0070                     ?_ADCTask:	
  1948                           ; 0 bytes @ 0x0
  1949                           
  1950  0070                     ?_CC1Init:	
  1951                           ; 0 bytes @ 0x0
  1952                           
  1953  0070                     ?_CC1Sleep:	
  1954                           ; 0 bytes @ 0x0
  1955                           
  1956  0070                     ?_LEDInit:	
  1957                           ; 0 bytes @ 0x0
  1958                           
  1959  0070                     ?_LEDNormalFlash:	
  1960                           ; 0 bytes @ 0x0
  1961                           
  1962  0070                     ?_LEDFastFlash:	
  1963                           ; 0 bytes @ 0x0
  1964                           
  1965  0070                     ?_NVMInit:	
  1966                           ; 0 bytes @ 0x0
  1967                           
  1968  0070                     ?_DINInit:	
  1969                           ; 0 bytes @ 0x0
  1970                           
  1971  0070                     ?_DINTick:	
  1972                           ; 0 bytes @ 0x0
  1973                           
  1974  0070                     ?_DINTask:	
  1975                           ; 0 bytes @ 0x0
  1976                           
  1977  0070                     ?_SLPSleep:	
  1978                           ; 0 bytes @ 0x0
  1979                           
  1980  0070                     ?_PGMInit:	
  1981                           ; 0 bytes @ 0x0
  1982                           
  1983  0070                     ?_PGMTick:	
  1984                           ; 0 bytes @ 0x0
  1985                           
  1986  0070                     ?_PGMWriteNvm:	
  1987                           ; 0 bytes @ 0x0
  1988                           
  1989  0070                     ?_PGMPgmOff:	
  1990                           ; 0 bytes @ 0x0
  1991                           
  1992  0070                     ?_PGMSelDown:	
  1993                           ; 0 bytes @ 0x0
  1994                           
  1995  0070                     ?_PGMSelLong:	
  1996                           ; 0 bytes @ 0x0
  1997                           
  1998  0070                     ?_RTXInit:	
  1999                           ; 0 bytes @ 0x0
  2000                           
  2001  0070                     ?_RTXTick:	
  2002                           ; 0 bytes @ 0x0
  2003                           
  2004  0070                     ?_RTXTask:	
  2005                           ; 0 bytes @ 0x0
  2006                           
  2007  0070                     ?_SYSInit:	
  2008                           ; 0 bytes @ 0x0
  2009                           
  2010  0070                     ?_SYSInt:	
  2011                           ; 0 bytes @ 0x0
  2012                           
  2013  0070                     ??_SYSInt:	
  2014                           ; 0 bytes @ 0x0
  2015                           
  2016  0070                     ?_SYSTask:	
  2017                           ; 0 bytes @ 0x0
  2018                           
  2019  0070                     ?_INTIsr:	
  2020                           ; 0 bytes @ 0x0
  2021                           
  2022  0070                     ??_INTIsr:	
  2023                           ; 0 bytes @ 0x0
  2024                           
  2025  0070                     ?_main:	
  2026                           ; 0 bytes @ 0x0
  2027                           
  2028                           
  2029                           ; 0 bytes @ 0x0
  2030  0070                     	ds	1
  2031  0071                     ??_INInit:	
  2032  0071                     ??_OUTInit:	
  2033                           ; 0 bytes @ 0x1
  2034                           
  2035  0071                     ??_SPIInit:	
  2036                           ; 0 bytes @ 0x1
  2037                           
  2038  0071                     ?_SPIRead:	
  2039                           ; 0 bytes @ 0x1
  2040                           
  2041  0071                     ?_SPIWrite:	
  2042                           ; 0 bytes @ 0x1
  2043                           
  2044  0071                     ??_ADCInit:	
  2045                           ; 0 bytes @ 0x1
  2046                           
  2047  0071                     ?_DLYDelay_ms:	
  2048                           ; 0 bytes @ 0x1
  2049                           
  2050  0071                     ??_LEDInit:	
  2051                           ; 0 bytes @ 0x1
  2052                           
  2053  0071                     ??_NVMInit:	
  2054                           ; 0 bytes @ 0x1
  2055                           
  2056  0071                     ?_NVMRead:	
  2057                           ; 0 bytes @ 0x1
  2058                           
  2059  0071                     ?_NVMWrite:	
  2060                           ; 0 bytes @ 0x1
  2061                           
  2062  0071                     ??_DINInit:	
  2063                           ; 0 bytes @ 0x1
  2064                           
  2065  0071                     ??_DINTick:	
  2066                           ; 0 bytes @ 0x1
  2067                           
  2068  0071                     ??_DINTask:	
  2069                           ; 0 bytes @ 0x1
  2070                           
  2071  0071                     ??_PGMTick:	
  2072                           ; 0 bytes @ 0x1
  2073                           
  2074  0071                     ??_PGMPgmOff:	
  2075                           ; 0 bytes @ 0x1
  2076                           
  2077  0071                     ??_PGMSelDown:	
  2078                           ; 0 bytes @ 0x1
  2079                           
  2080  0071                     ??_SYSInit:	
  2081                           ; 0 bytes @ 0x1
  2082                           
  2083  0071                     ?___lwdiv:	
  2084                           ; 0 bytes @ 0x1
  2085                           
  2086  0071                     ?___ftpack:	
  2087                           ; 2 bytes @ 0x1
  2088                           
  2089  0071                     ?___fttol:	
  2090                           ; 3 bytes @ 0x1
  2091                           
  2092  0071                     SPIRead@len:	
  2093                           ; 4 bytes @ 0x1
  2094                           
  2095  0071                     LEDInit@sta:	
  2096                           ; 1 bytes @ 0x1
  2097                           
  2098  0071                     NVMInit@sta:	
  2099                           ; 1 bytes @ 0x1
  2100                           
  2101  0071                     DINInit@sta:	
  2102                           ; 1 bytes @ 0x1
  2103                           
  2104  0071                     SPIWrite@srcPtr:	
  2105                           ; 1 bytes @ 0x1
  2106                           
  2107  0071                     DLYDelay_ms@val:	
  2108                           ; 2 bytes @ 0x1
  2109                           
  2110  0071                     NVMRead@addr:	
  2111                           ; 2 bytes @ 0x1
  2112                           
  2113  0071                     NVMWrite@addr:	
  2114                           ; 2 bytes @ 0x1
  2115                           
  2116  0071                     ___lwdiv@divisor:	
  2117                           ; 2 bytes @ 0x1
  2118                           
  2119  0071                     ___ftpack@arg:	
  2120                           ; 2 bytes @ 0x1
  2121                           
  2122  0071                     ___fttol@f1:	
  2123                           ; 3 bytes @ 0x1
  2124                           
  2125                           
  2126                           ; 3 bytes @ 0x1
  2127  0071                     	ds	1
  2128  0072                     ??_SPIRead:	
  2129  0072                     INInit@sta:	
  2130                           ; 0 bytes @ 0x2
  2131                           
  2132  0072                     OUTInit@sta:	
  2133                           ; 1 bytes @ 0x2
  2134                           
  2135  0072                     SPIInit@state:	
  2136                           ; 1 bytes @ 0x2
  2137                           
  2138  0072                     ADCInit@state:	
  2139                           ; 1 bytes @ 0x2
  2140                           
  2141  0072                     SYSInit@state:	
  2142                           ; 1 bytes @ 0x2
  2143                           
  2144                           
  2145                           ; 1 bytes @ 0x2
  2146  0072                     	ds	1
  2147  0073                     ??_DLYDelay_ms:	
  2148  0073                     SPIWrite@len:	
  2149                           ; 0 bytes @ 0x3
  2150                           
  2151  0073                     NVMRead@dest:	
  2152                           ; 1 bytes @ 0x3
  2153                           
  2154  0073                     NVMWrite@source:	
  2155                           ; 1 bytes @ 0x3
  2156                           
  2157  0073                     ___lwdiv@dividend:	
  2158                           ; 1 bytes @ 0x3
  2159                           
  2160                           
  2161                           ; 2 bytes @ 0x3
  2162  0073                     	ds	1
  2163  0074                     ??_SPIWrite:	
  2164  0074                     SPIRead@dstPtr:	
  2165                           ; 0 bytes @ 0x4
  2166                           
  2167  0074                     NVMRead@len:	
  2168                           ; 1 bytes @ 0x4
  2169                           
  2170  0074                     NVMWrite@len:	
  2171                           ; 1 bytes @ 0x4
  2172                           
  2173  0074                     ___ftpack@exp:	
  2174                           ; 1 bytes @ 0x4
  2175                           
  2176                           
  2177                           ; 1 bytes @ 0x4
  2178  0074                     	ds	1
  2179  0075                     ??_NVMRead:	
  2180  0075                     ??_NVMWrite:	
  2181                           ; 0 bytes @ 0x5
  2182                           
  2183  0075                     ??___fttol:	
  2184                           ; 0 bytes @ 0x5
  2185                           
  2186  0075                     ??___lwdiv:	
  2187                           ; 0 bytes @ 0x5
  2188                           
  2189  0075                     SPIRead@i:	
  2190                           ; 0 bytes @ 0x5
  2191                           
  2192  0075                     ___ftpack@sign:	
  2193                           ; 1 bytes @ 0x5
  2194                           
  2195  0075                     DLYDelay_ms@i:	
  2196                           ; 1 bytes @ 0x5
  2197                           
  2198                           
  2199                           ; 2 bytes @ 0x5
  2200  0075                     	ds	1
  2201  0076                     ??___ftpack:	
  2202  0076                     SPIWrite@i:	
  2203                           ; 0 bytes @ 0x6
  2204                           
  2205  0076                     ___lwdiv@counter:	
  2206                           ; 1 bytes @ 0x6
  2207                           
  2208                           
  2209                           ; 1 bytes @ 0x6
  2210  0076                     	ds	1
  2211  0077                     ??_CC1Strobe:	
  2212  0077                     ?_CC1Write:	
  2213                           ; 0 bytes @ 0x7
  2214                           
  2215  0077                     ?_CC1Read:	
  2216                           ; 0 bytes @ 0x7
  2217                           
  2218  0077                     ??_LEDNormalFlash:	
  2219                           ; 0 bytes @ 0x7
  2220                           
  2221  0077                     ??_LEDFastFlash:	
  2222                           ; 0 bytes @ 0x7
  2223                           
  2224  0077                     CC1Read@dst:	
  2225                           ; 0 bytes @ 0x7
  2226                           
  2227  0077                     NVMRead@i:	
  2228                           ; 1 bytes @ 0x7
  2229                           
  2230  0077                     CC1Write@src:	
  2231                           ; 1 bytes @ 0x7
  2232                           
  2233  0077                     ___lwdiv@quotient:	
  2234                           ; 2 bytes @ 0x7
  2235                           
  2236                           
  2237                           ; 2 bytes @ 0x7
  2238  0077                     	ds	1
  2239  0078                     ??_PGMReadNvm:	
  2240  0078                     ??_PGMWriteNvm:	
  2241                           ; 0 bytes @ 0x8
  2242                           
  2243  0078                     CC1Strobe@e_stb:	
  2244                           ; 0 bytes @ 0x8
  2245                           
  2246  0078                     CC1Read@len:	
  2247                           ; 1 bytes @ 0x8
  2248                           
  2249  0078                     LEDNormalFlash@num:	
  2250                           ; 1 bytes @ 0x8
  2251                           
  2252  0078                     LEDFastFlash@num:	
  2253                           ; 1 bytes @ 0x8
  2254                           
  2255                           
  2256                           ; 1 bytes @ 0x8
  2257  0078                     	ds	1
  2258  0079                     ??_CC1Read:	
  2259  0079                     ?___awtoft:	
  2260                           ; 0 bytes @ 0x9
  2261                           
  2262  0079                     CC1Strobe@cc1Stb:	
  2263                           ; 3 bytes @ 0x9
  2264                           
  2265  0079                     CC1Write@len:	
  2266                           ; 1 bytes @ 0x9
  2267                           
  2268  0079                     LEDNormalFlash@i:	
  2269                           ; 1 bytes @ 0x9
  2270                           
  2271  0079                     LEDFastFlash@i:	
  2272                           ; 1 bytes @ 0x9
  2273                           
  2274  0079                     ___awtoft@c:	
  2275                           ; 1 bytes @ 0x9
  2276                           
  2277                           
  2278                           ; 2 bytes @ 0x9
  2279  0079                     	ds	1
  2280  007A                     ??_CC1Write:	
  2281  007A                     ??_CC1Sleep:	
  2282                           ; 0 bytes @ 0xA
  2283                           
  2284  007A                     ??_SLPSleep:	
  2285                           ; 0 bytes @ 0xA
  2286                           
  2287  007A                     CC1Read@addr:	
  2288                           ; 0 bytes @ 0xA
  2289                           
  2290                           
  2291                           ; 1 bytes @ 0xA
  2292  007A                     	ds	1
  2293  007B                     ??_CC1Init:	
  2294  007B                     CC1Read@cc1Addr:	
  2295                           ; 0 bytes @ 0xB
  2296                           
  2297                           
  2298                           ; 1 bytes @ 0xB
  2299  007B                     	ds	1
  2300  007C                     ??_PGMCheckNvm:	
  2301  007C                     ??_RTXStartSendData:	
  2302                           ; 0 bytes @ 0xC
  2303                           
  2304  007C                     ??_PGMInit:	
  2305                           ; 0 bytes @ 0xC
  2306                           
  2307  007C                     ??_RTXInit:	
  2308                           ; 0 bytes @ 0xC
  2309                           
  2310  007C                     ??_RTXTick:	
  2311                           ; 0 bytes @ 0xC
  2312                           
  2313  007C                     ??_RTXTask:	
  2314                           ; 0 bytes @ 0xC
  2315                           
  2316                           
  2317                           	psect	cstackBANK0
  2318  0020                     __pcstackBANK0:	
  2319                           ; 0 bytes @ 0xC
  2320                           
  2321  0020                     ?_RTXRcvPkt:	
  2322  0020                     ??___awtoft:	
  2323                           ; 0 bytes @ 0x0
  2324                           
  2325  0020                     CC1Write@addr:	
  2326                           ; 0 bytes @ 0x0
  2327                           
  2328  0020                     SLPSleep@IOCBNTmp:	
  2329                           ; 1 bytes @ 0x0
  2330                           
  2331  0020                     RTXRcvPkt@len:	
  2332                           ; 1 bytes @ 0x0
  2333                           
  2334  0020                     ___fttol@sign1:	
  2335                           ; 1 bytes @ 0x0
  2336                           
  2337  0020                     NVMWrite@bufTmpRow:	
  2338                           ; 1 bytes @ 0x0
  2339                           
  2340                           
  2341                           ; 64 bytes @ 0x0
  2342  0020                     	ds	1
  2343  0021                     ??_RTXRcvPkt:	
  2344  0021                     CC1Write@cc1Addr:	
  2345                           ; 0 bytes @ 0x1
  2346                           
  2347  0021                     SLPSleep@INTCONTmp:	
  2348                           ; 1 bytes @ 0x1
  2349                           
  2350  0021                     ___fttol@lval:	
  2351                           ; 1 bytes @ 0x1
  2352                           
  2353                           
  2354                           ; 4 bytes @ 0x1
  2355  0021                     	ds	1
  2356  0022                     ?_RTXSndPkt:	
  2357  0022                     CC1Init@state:	
  2358                           ; 0 bytes @ 0x2
  2359                           
  2360  0022                     SLPSleep@WPUBTmp:	
  2361                           ; 1 bytes @ 0x2
  2362                           
  2363  0022                     RTXSndPkt@len:	
  2364                           ; 1 bytes @ 0x2
  2365                           
  2366  0022                     ___awtoft@sign:	
  2367                           ; 1 bytes @ 0x2
  2368                           
  2369                           
  2370                           ; 1 bytes @ 0x2
  2371  0022                     	ds	1
  2372  0023                     ??_RTXSndPkt:	
  2373  0023                     ?___ftmul:	
  2374                           ; 0 bytes @ 0x3
  2375                           
  2376  0023                     SLPSleep@WDTCONTmp:	
  2377                           ; 3 bytes @ 0x3
  2378                           
  2379  0023                     RTXRcvPkt@dst:	
  2380                           ; 1 bytes @ 0x3
  2381                           
  2382  0023                     ___ftmul@f1:	
  2383                           ; 1 bytes @ 0x3
  2384                           
  2385                           
  2386                           ; 3 bytes @ 0x3
  2387  0023                     	ds	1
  2388  0024                     SLPSleep@OPTION_REGTmp:	
  2389  0024                     RTXSndPkt@src:	
  2390                           ; 1 bytes @ 0x4
  2391                           
  2392                           
  2393                           ; 1 bytes @ 0x4
  2394  0024                     	ds	1
  2395  0025                     SLPSleep@FVRCONTmp:	
  2396  0025                     RTXSndPkt@numRxByte:	
  2397                           ; 1 bytes @ 0x5
  2398                           
  2399  0025                     ___fttol@exp1:	
  2400                           ; 1 bytes @ 0x5
  2401                           
  2402                           
  2403                           ; 1 bytes @ 0x5
  2404  0025                     	ds	1
  2405  0026                     SLPSleep@ADCON0Tmp:	
  2406  0026                     RTXSndPkt@numTxByte:	
  2407                           ; 1 bytes @ 0x6
  2408                           
  2409  0026                     ___ftmul@f2:	
  2410                           ; 1 bytes @ 0x6
  2411                           
  2412                           
  2413                           ; 3 bytes @ 0x6
  2414  0026                     	ds	1
  2415  0027                     SLPSleep@TESTBATTtmp:	
  2416  0027                     RTXSndPkt@sta:	
  2417                           ; 1 bytes @ 0x7
  2418                           
  2419                           
  2420                           ; 1 bytes @ 0x7
  2421  0027                     	ds	1
  2422  0028                     ??_RTXSendData:	
  2423  0028                     ??_RTXSendRPgm:	
  2424                           ; 0 bytes @ 0x8
  2425                           
  2426                           
  2427                           ; 0 bytes @ 0x8
  2428  0028                     	ds	1
  2429  0029                     ??___ftmul:	
  2430  0029                     RTXSendData@tmpVal:	
  2431                           ; 0 bytes @ 0x9
  2432                           
  2433                           
  2434                           ; 3 bytes @ 0x9
  2435  0029                     	ds	3
  2436  002C                     RTXInit@state:	
  2437                           
  2438                           ; 1 bytes @ 0xC
  2439  002C                     	ds	1
  2440  002D                     ___ftmul@exp:	
  2441                           
  2442                           ; 1 bytes @ 0xD
  2443  002D                     	ds	1
  2444  002E                     ___ftmul@f3_as_product:	
  2445                           
  2446                           ; 3 bytes @ 0xE
  2447  002E                     	ds	3
  2448  0031                     ___ftmul@cntr:	
  2449                           
  2450                           ; 1 bytes @ 0x11
  2451  0031                     	ds	1
  2452  0032                     ___ftmul@sign:	
  2453                           
  2454                           ; 1 bytes @ 0x12
  2455  0032                     	ds	1
  2456  0033                     ?___ftdiv:	
  2457  0033                     ___ftdiv@f2:	
  2458                           ; 3 bytes @ 0x13
  2459                           
  2460                           
  2461                           ; 3 bytes @ 0x13
  2462  0033                     	ds	3
  2463  0036                     ___ftdiv@f1:	
  2464                           
  2465                           ; 3 bytes @ 0x16
  2466  0036                     	ds	3
  2467  0039                     ??___ftdiv:	
  2468                           
  2469                           ; 0 bytes @ 0x19
  2470  0039                     	ds	4
  2471  003D                     ___ftdiv@cntr:	
  2472                           
  2473                           ; 1 bytes @ 0x1D
  2474  003D                     	ds	1
  2475  003E                     ___ftdiv@f3:	
  2476                           
  2477                           ; 3 bytes @ 0x1E
  2478  003E                     	ds	3
  2479  0041                     ___ftdiv@exp:	
  2480                           
  2481                           ; 1 bytes @ 0x21
  2482  0041                     	ds	1
  2483  0042                     ___ftdiv@sign:	
  2484                           
  2485                           ; 1 bytes @ 0x22
  2486  0042                     	ds	1
  2487  0043                     ?___ftadd:	
  2488  0043                     ___ftadd@f1:	
  2489                           ; 3 bytes @ 0x23
  2490                           
  2491                           
  2492                           ; 3 bytes @ 0x23
  2493  0043                     	ds	3
  2494  0046                     ___ftadd@f2:	
  2495                           
  2496                           ; 3 bytes @ 0x26
  2497  0046                     	ds	3
  2498  0049                     ??___ftadd:	
  2499                           
  2500                           ; 0 bytes @ 0x29
  2501  0049                     	ds	4
  2502  004D                     ___ftadd@sign:	
  2503                           
  2504                           ; 1 bytes @ 0x2D
  2505  004D                     	ds	1
  2506  004E                     ___ftadd@exp2:	
  2507                           
  2508                           ; 1 bytes @ 0x2E
  2509  004E                     	ds	1
  2510  004F                     ___ftadd@exp1:	
  2511                           
  2512                           ; 1 bytes @ 0x2F
  2513  004F                     	ds	1
  2514  0050                     ??_ADCTask:	
  2515                           
  2516                           ; 0 bytes @ 0x30
  2517  0050                     	ds	2
  2518  0052                     _ADCTask$1362:	
  2519                           
  2520                           ; 3 bytes @ 0x32
  2521  0052                     	ds	14
  2522  0060                     NVMWrite@rowAddr:	
  2523                           
  2524                           ; 2 bytes @ 0x40
  2525  0060                     	ds	2
  2526  0062                     NVMWrite@i:	
  2527                           
  2528                           ; 1 bytes @ 0x42
  2529  0062                     	ds	1
  2530  0063                     NVMWrite@latchAddr:	
  2531                           
  2532                           ; 1 bytes @ 0x43
  2533  0063                     	ds	1
  2534  0064                     NVMWrite@j:	
  2535                           
  2536                           ; 1 bytes @ 0x44
  2537  0064                     	ds	1
  2538  0065                     ??_PGMNvmReset:	
  2539  0065                     ??_RTXReadPkt:	
  2540                           ; 0 bytes @ 0x45
  2541                           
  2542  0065                     ??_PGMSelLong:	
  2543                           ; 0 bytes @ 0x45
  2544                           
  2545                           
  2546                           ; 0 bytes @ 0x45
  2547  0065                     	ds	1
  2548  0066                     ??_SYSTask:	
  2549  0066                     PGMInit@state:	
  2550                           ; 0 bytes @ 0x46
  2551                           
  2552  0066                     RTXReadPkt@numRxByte:	
  2553                           ; 1 bytes @ 0x46
  2554                           
  2555                           
  2556                           ; 1 bytes @ 0x46
  2557  0066                     	ds	1
  2558  0067                     SYSTask@i:	
  2559                           
  2560                           ; 1 bytes @ 0x47
  2561  0067                     	ds	1
  2562  0068                     ??_main:	
  2563                           
  2564                           ; 0 bytes @ 0x48
  2565  0068                     	ds	1
  2566                           
  2567                           	psect	maintext
  2568  06A1                     __pmaintext:	
  2569 ;;
  2570 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2571 ;;
  2572 ;; *************** function _main *****************
  2573 ;; Defined at:
  2574 ;;		line 55 in file "Sensore.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;		None
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  i               1    0[BANK1 ] unsigned char 
  2579 ;; Return value:  Size  Location     Type
  2580 ;;		None               void
  2581 ;; Registers used:
  2582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 17F/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2589 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2591 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2592 ;;Total ram usage:        2 bytes
  2593 ;; Hardware stack levels required when called:    9
  2594 ;; This function calls:
  2595 ;;		_INInit
  2596 ;;		_OUTInit
  2597 ;;		_SPIInit
  2598 ;;		_ADCInit
  2599 ;;		_ADCTask
  2600 ;;		_CC1Init
  2601 ;;		_LEDInit
  2602 ;;		_NVMInit
  2603 ;;		_DINInit
  2604 ;;		_DINTask
  2605 ;;		_PGMInit
  2606 ;;		_RTXInit
  2607 ;;		_RTXTask
  2608 ;;		_SYSInit
  2609 ;;		_SYSTask
  2610 ;; This function is called by:
  2611 ;;		Startup code after reset
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _main
  2617  06A1                     _main:	
  2618                           
  2619                           ;Sensore.c: 56: unsigned char i;
  2620                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2621                           
  2622                           ;incstack = 0
  2623                           ; Regs used in _main: [allreg]
  2624  06A1  0021               	movlb	1	; select bank1
  2625  06A2  01D8               	clrf	main@i^(0+128)
  2626  06A3  3003               	movlw	3
  2627  06A4  0258               	subwf	main@i^(0+128),w
  2628  06A5  1803               	btfsc	3,0
  2629  06A6  2EE9               	goto	l676
  2630  06A7                     l675:	
  2631  06A7  0064               	clrwdt	;# 
  2632                           
  2633                           ;Sensore.c: 63: SYSInit(i);
  2634  06A8  0021               	movlb	1	; select bank1
  2635  06A9  0858               	movf	main@i^(0+128),w
  2636  06AA  318E  26E7  3186   	fcall	_SYSInit
  2637                           
  2638                           ;Sensore.c: 64: INInit(i);
  2639  06AD  0021               	movlb	1	; select bank1
  2640  06AE  0858               	movf	main@i^(0+128),w
  2641  06AF  318D  2517  3186   	fcall	_INInit
  2642                           
  2643                           ;Sensore.c: 65: OUTInit(i);
  2644  06B2  0021               	movlb	1	; select bank1
  2645  06B3  0858               	movf	main@i^(0+128),w
  2646  06B4  318D  25F8  3186   	fcall	_OUTInit
  2647                           
  2648                           ;Sensore.c: 66: DINInit(i);
  2649  06B7  0021               	movlb	1	; select bank1
  2650  06B8  0858               	movf	main@i^(0+128),w
  2651  06B9  318C  24B9  3186   	fcall	_DINInit
  2652                           
  2653                           ;Sensore.c: 67: LEDInit(i);
  2654  06BC  0021               	movlb	1	; select bank1
  2655  06BD  0858               	movf	main@i^(0+128),w
  2656  06BE  318C  2461  3186   	fcall	_LEDInit
  2657                           
  2658                           ;Sensore.c: 68: SPIInit(i);
  2659  06C1  0021               	movlb	1	; select bank1
  2660  06C2  0858               	movf	main@i^(0+128),w
  2661  06C3  318D  2580  3186   	fcall	_SPIInit
  2662                           
  2663                           ;Sensore.c: 69: CC1Init(i);
  2664  06C6  0021               	movlb	1	; select bank1
  2665  06C7  0858               	movf	main@i^(0+128),w
  2666  06C8  318F  2764  3186   	fcall	_CC1Init
  2667                           
  2668                           ;Sensore.c: 70: NVMInit(i);
  2669  06CB  0021               	movlb	1	; select bank1
  2670  06CC  0858               	movf	main@i^(0+128),w
  2671  06CD  318C  246C  3186   	fcall	_NVMInit
  2672                           
  2673                           ;Sensore.c: 71: RTXInit(i);
  2674  06D0  0021               	movlb	1	; select bank1
  2675  06D1  0858               	movf	main@i^(0+128),w
  2676  06D2  318E  269C  3186   	fcall	_RTXInit
  2677                           
  2678                           ;Sensore.c: 72: PGMInit(i);
  2679  06D5  0021               	movlb	1	; select bank1
  2680  06D6  0858               	movf	main@i^(0+128),w
  2681  06D7  3187  27E8  3186   	fcall	_PGMInit
  2682                           
  2683                           ;Sensore.c: 73: ADCInit(i);
  2684  06DA  0021               	movlb	1	; select bank1
  2685  06DB  0858               	movf	main@i^(0+128),w
  2686  06DC  318F  2794  3186   	fcall	_ADCInit
  2687  06DF  3001               	movlw	1
  2688  06E0  0020               	movlb	0	; select bank0
  2689  06E1  00E8               	movwf	??_main
  2690  06E2  0868               	movf	??_main,w
  2691  06E3  0021               	movlb	1	; select bank1
  2692  06E4  07D8               	addwf	main@i^(0+128),f
  2693  06E5  3003               	movlw	3
  2694  06E6  0258               	subwf	main@i^(0+128),w
  2695  06E7  1C03               	skipc
  2696  06E8  2EA7               	goto	l675
  2697  06E9                     l676:	
  2698                           
  2699                           ;Sensore.c: 74: }
  2700                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2701  06E9  178B               	bsf	11,7	;volatile
  2702  06EA                     l677:	
  2703                           ;Sensore.c: 80: while(1)
  2704                           
  2705  06EA  0064               	clrwdt	;# 
  2706                           
  2707                           ;Sensore.c: 84: SYSTask();
  2708  06EB  3187  27A1  3186   	fcall	_SYSTask
  2709                           
  2710                           ;Sensore.c: 85: DINTask();
  2711  06EE  318D  259E  3186   	fcall	_DINTask
  2712                           
  2713                           ;Sensore.c: 86: ADCTask();
  2714  06F1  3180  2041  3186   	fcall	_ADCTask
  2715                           
  2716                           ;Sensore.c: 87: RTXTask();
  2717  06F4  318C  2437  3186   	fcall	_RTXTask
  2718  06F7  2EEA               	goto	l677
  2719  06F8                     __end_of_main:	
  2720                           
  2721                           	psect	text1
  2722  07A1                     __ptext1:	
  2723 ;; *************** function _SYSTask *****************
  2724 ;; Defined at:
  2725 ;;		line 45 in file "SYS.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  i               1   71[BANK0 ] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;		None               void
  2732 ;; Registers used:
  2733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2743 ;;Total ram usage:        2 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    7
  2746 ;; This function calls:
  2747 ;;		_CC1Init
  2748 ;;		_DINTick
  2749 ;;		_SLPSleep
  2750 ;;		_PGMTick
  2751 ;;		_PGMPgmOff
  2752 ;;		_PGMSelDown
  2753 ;;		_PGMSelLong
  2754 ;;		_RTXStartSendData
  2755 ;;		_RTXTick
  2756 ;; This function is called by:
  2757 ;;		_main
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           
  2762                           ;psect for function _SYSTask
  2763  07A1                     _SYSTask:	
  2764                           
  2765                           ;SYS.c: 46: unsigned char i;
  2766                           ;SYS.c: 49: if(u_SYS_STA.TICK)
  2767                           
  2768                           ;incstack = 0
  2769                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2770  07A1  0021               	movlb	1	; select bank1
  2771  07A2  1C35               	btfss	_u_SYS_STA^(0+128),0
  2772  07A3  2FAE               	goto	l4089
  2773                           
  2774                           ;SYS.c: 50: {
  2775                           ;SYS.c: 52: u_SYS_STA.TICK=0;
  2776  07A4  1035               	bcf	_u_SYS_STA^(0+128),0
  2777                           
  2778                           ;SYS.c: 55: RTXTick();
  2779  07A5  318C  248E  3187   	fcall	_RTXTick
  2780                           
  2781                           ;SYS.c: 56: DINTick();
  2782  07A8  318F  270D  3187   	fcall	_DINTick
  2783                           
  2784                           ;SYS.c: 57: PGMTick();
  2785  07AB  318C  2477  3187   	fcall	_PGMTick
  2786  07AE                     l4089:	
  2787                           
  2788                           ;SYS.c: 58: }
  2789                           ;SYS.c: 60: if(u_in_ev_down.sel)
  2790  07AE  0021               	movlb	1	; select bank1
  2791  07AF  1C36               	btfss	_u_in_ev_down^(0+128),0
  2792  07B0  2FB5               	goto	l4095
  2793                           
  2794                           ;SYS.c: 61: {
  2795                           ;SYS.c: 63: u_in_ev_down.sel=0;
  2796  07B1  1036               	bcf	_u_in_ev_down^(0+128),0
  2797                           
  2798                           ;SYS.c: 64: PGMSelDown();
  2799  07B2  318C  2451  3187   	fcall	_PGMSelDown
  2800  07B5                     l4095:	
  2801                           
  2802                           ;SYS.c: 65: }
  2803                           ;SYS.c: 66: if(u_in_ev_long.sel)
  2804  07B5  0021               	movlb	1	; select bank1
  2805  07B6  1C37               	btfss	_u_in_ev_long^(0+128),0
  2806  07B7  2FBC               	goto	l4101
  2807                           
  2808                           ;SYS.c: 67: {
  2809                           ;SYS.c: 69: u_in_ev_long.sel=0;
  2810  07B8  1037               	bcf	_u_in_ev_long^(0+128),0
  2811                           
  2812                           ;SYS.c: 70: PGMSelLong();
  2813  07B9  318C  24A9  3187   	fcall	_PGMSelLong
  2814  07BC                     l4101:	
  2815                           
  2816                           ;SYS.c: 71: }
  2817                           ;SYS.c: 74: if(rtx_flg.sendDone)
  2818  07BC  0020               	movlb	0	; select bank0
  2819  07BD  1C6B               	btfss	_rtx_flg,0
  2820  07BE  2FC5               	goto	l4107
  2821                           
  2822                           ;SYS.c: 75: {
  2823                           ;SYS.c: 77: rtx_flg.sendDone=0;
  2824  07BF  106B               	bcf	_rtx_flg,0
  2825                           
  2826                           ;SYS.c: 79: if(!(!PORTBbits.RB2))
  2827  07C0  1D0D               	btfss	13,2	;volatile
  2828  07C1  2FC5               	goto	l4107
  2829                           
  2830                           ;SYS.c: 80: SLPSleep();
  2831  07C2  3185  25DD  3187   	fcall	_SLPSleep
  2832  07C5                     l4107:	
  2833                           
  2834                           ;SYS.c: 81: }
  2835                           ;SYS.c: 84: if(rtx_flg.pgmDone)
  2836  07C5  0020               	movlb	0	; select bank0
  2837  07C6  1CEB               	btfss	_rtx_flg,1
  2838  07C7  2FCC               	goto	l4113
  2839                           
  2840                           ;SYS.c: 85: {
  2841                           ;SYS.c: 87: rtx_flg.pgmDone=0;
  2842  07C8  10EB               	bcf	_rtx_flg,1
  2843                           
  2844                           ;SYS.c: 89: PGMPgmOff();
  2845  07C9  318C  2428  3187   	fcall	_PGMPgmOff
  2846  07CC                     l4113:	
  2847                           
  2848                           ;SYS.c: 90: }
  2849                           ;SYS.c: 93: if(flg_slp.exitSleep)
  2850  07CC  0021               	movlb	1	; select bank1
  2851  07CD  1C30               	btfss	_flg_slp^(0+128),0
  2852  07CE  0008               	return
  2853                           
  2854                           ;SYS.c: 94: {
  2855                           ;SYS.c: 96: flg_slp.exitSleep=0;
  2856  07CF  1030               	bcf	_flg_slp^(0+128),0
  2857                           
  2858                           ;SYS.c: 98: for(i=0;i<3;i++)
  2859  07D0  0020               	movlb	0	; select bank0
  2860  07D1  01E7               	clrf	SYSTask@i
  2861  07D2  3003               	movlw	3
  2862  07D3  0267               	subwf	SYSTask@i,w
  2863  07D4  1803               	btfsc	3,0
  2864  07D5  2FE3               	goto	l600
  2865  07D6                     l4123:	
  2866                           
  2867                           ;SYS.c: 99: CC1Init(i);
  2868  07D6  0867               	movf	SYSTask@i,w
  2869  07D7  318F  2764  3187   	fcall	_CC1Init
  2870  07DA  3001               	movlw	1
  2871  07DB  0020               	movlb	0	; select bank0
  2872  07DC  00E6               	movwf	??_SYSTask
  2873  07DD  0866               	movf	??_SYSTask,w
  2874  07DE  07E7               	addwf	SYSTask@i,f
  2875  07DF  3003               	movlw	3
  2876  07E0  0267               	subwf	SYSTask@i,w
  2877  07E1  1C03               	skipc
  2878  07E2  2FD6               	goto	l4123
  2879  07E3                     l600:	
  2880                           
  2881                           ;SYS.c: 101: adc_ev.convDone=0;
  2882  07E3  0021               	movlb	1	; select bank1
  2883  07E4  102D               	bcf	_adc_ev^(0+128),0
  2884                           
  2885                           ;SYS.c: 103: RTXStartSendData();
  2886  07E5  318C  242C         	fcall	_RTXStartSendData
  2887  07E7  0008               	return
  2888  07E8                     __end_of_SYSTask:	
  2889                           
  2890                           	psect	text2
  2891  0C8E                     __ptext2:	
  2892 ;; *************** function _RTXTick *****************
  2893 ;; Defined at:
  2894 ;;		line 63 in file "RTX.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    6
  2915 ;; This function calls:
  2916 ;;		_RTXSendData
  2917 ;; This function is called by:
  2918 ;;		_SYSTask
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _RTXTick
  2924  0C8E                     _RTXTick:	
  2925                           
  2926                           ;RTX.c: 65: if(tmrRcvPkt)
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2930  0C8E  0020               	movlb	0	; select bank0
  2931  0C8F  086D               	movf	_tmrRcvPkt,w
  2932  0C90  1903               	btfsc	3,2
  2933  0C91  0008               	return
  2934                           
  2935                           ;RTX.c: 66: {
  2936                           ;RTX.c: 67: tmrRcvPkt--;
  2937  0C92  3001               	movlw	1
  2938  0C93  02ED               	subwf	_tmrRcvPkt,f
  2939                           
  2940                           ;RTX.c: 68: if(!(tmrRcvPkt))
  2941  0C94  08ED               	movf	_tmrRcvPkt,f
  2942  0C95  1D03               	skipz
  2943  0C96  0008               	return
  2944                           
  2945                           ;RTX.c: 69: RTXSendData();
  2946  0C97  3183  233F         	fcall	_RTXSendData
  2947  0C99  0020               	movlb	0	; select bank0
  2948  0C9A  0008               	return
  2949  0C9B                     __end_of_RTXTick:	
  2950                           
  2951                           	psect	text3
  2952  0CA9                     __ptext3:	
  2953 ;; *************** function _PGMSelLong *****************
  2954 ;; Defined at:
  2955 ;;		line 104 in file "PGM.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;		None               void
  2962 ;; Registers used:
  2963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2973 ;;Total ram usage:        1 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    4
  2976 ;; This function calls:
  2977 ;;		_LEDNormalFlash
  2978 ;;		_PGMWriteNvm
  2979 ;; This function is called by:
  2980 ;;		_SYSTask
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _PGMSelLong
  2986  0CA9                     _PGMSelLong:	
  2987                           
  2988                           ;PGM.c: 106: pgm_cfg.sensId=TMR1L^TMR1H;
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2992  0CA9  0020               	movlb	0	; select bank0
  2993  0CAA  0816               	movf	22,w	;volatile
  2994  0CAB  0617               	xorwf	23,w	;volatile
  2995  0CAC  00E5               	movwf	??_PGMSelLong
  2996  0CAD  0865               	movf	??_PGMSelLong,w
  2997  0CAE  0021               	movlb	1	; select bank1
  2998  0CAF  00CE               	movwf	(_pgm_cfg^(0+128)+3)
  2999                           
  3000                           ;PGM.c: 108: pgm_cfg.menu=0x01;
  3001  0CB0  01CD               	clrf	(_pgm_cfg^(0+128)+2)
  3002  0CB1  0ACD               	incf	(_pgm_cfg^(0+128)+2),f
  3003                           
  3004                           ;PGM.c: 110: PGMWriteNvm();
  3005  0CB2  318C  24DD  318C   	fcall	_PGMWriteNvm
  3006                           
  3007                           ;PGM.c: 112: LEDNormalFlash(3);
  3008  0CB5  3003               	movlw	3
  3009  0CB6  318D  25DA         	fcall	_LEDNormalFlash
  3010  0CB8  0008               	return
  3011  0CB9                     __end_of_PGMSelLong:	
  3012                           
  3013                           	psect	text4
  3014  0C51                     __ptext4:	
  3015 ;; *************** function _PGMSelDown *****************
  3016 ;; Defined at:
  3017 ;;		line 94 in file "PGM.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;		None               void
  3024 ;; Registers used:
  3025 ;;		wreg
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3033 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    2
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_SYSTask
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _PGMSelDown
  3047  0C51                     _PGMSelDown:	
  3048                           
  3049                           ;PGM.c: 96: pgm_flg.pgmonoff=1;
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in _PGMSelDown: [wreg]
  3053  0C51  0020               	movlb	0	; select bank0
  3054  0C52  146A               	bsf	_pgm_flg,0
  3055                           
  3056                           ;PGM.c: 98: PORTCbits.RC7=0;
  3057  0C53  138E               	bcf	14,7	;volatile
  3058                           
  3059                           ;PGM.c: 100: tmrPgm=100;
  3060  0C54  3064               	movlw	100
  3061  0C55  00F1               	movwf	??_PGMSelDown
  3062  0C56  0871               	movf	??_PGMSelDown,w
  3063  0C57  00EC               	movwf	_tmrPgm
  3064  0C58  0008               	return
  3065  0C59                     __end_of_PGMSelDown:	
  3066                           
  3067                           	psect	text5
  3068  0C28                     __ptext5:	
  3069 ;; *************** function _PGMPgmOff *****************
  3070 ;; Defined at:
  3071 ;;		line 86 in file "PGM.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;		None               void
  3078 ;; Registers used:
  3079 ;;		status,2
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3089 ;;Total ram usage:        0 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    2
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_SYSTask
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           
  3100                           ;psect for function _PGMPgmOff
  3101  0C28                     _PGMPgmOff:	
  3102                           
  3103                           ;PGM.c: 88: tmrPgm=0;
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _PGMPgmOff: [status,2]
  3107  0C28  0020               	movlb	0	; select bank0
  3108  0C29  01EC               	clrf	_tmrPgm
  3109                           
  3110                           ;PGM.c: 90: pgm_flg.pgmonoff=0;
  3111  0C2A  106A               	bcf	_pgm_flg,0
  3112  0C2B  0008               	return
  3113  0C2C                     __end_of_PGMPgmOff:	
  3114                           
  3115                           	psect	text6
  3116  0C77                     __ptext6:	
  3117 ;; *************** function _PGMTick *****************
  3118 ;; Defined at:
  3119 ;;		line 45 in file "PGM.c"
  3120 ;; Parameters:    Size  Location     Type
  3121 ;;		None
  3122 ;; Auto vars:     Size  Location     Type
  3123 ;;		None
  3124 ;; Return value:  Size  Location     Type
  3125 ;;		None               void
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3137 ;;Total ram usage:        0 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    2
  3140 ;; This function calls:
  3141 ;;		Nothing
  3142 ;; This function is called by:
  3143 ;;		_SYSTask
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147                           
  3148                           ;psect for function _PGMTick
  3149  0C77                     _PGMTick:	
  3150                           
  3151                           ;PGM.c: 47: if(tmrPgm)
  3152                           
  3153                           ;incstack = 0
  3154                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3155  0C77  0020               	movlb	0	; select bank0
  3156  0C78  086C               	movf	_tmrPgm,w
  3157  0C79  1903               	btfsc	3,2
  3158  0C7A  0008               	return
  3159                           
  3160                           ;PGM.c: 48: {
  3161                           ;PGM.c: 49: tmrPgm--;
  3162  0C7B  3001               	movlw	1
  3163  0C7C  02EC               	subwf	_tmrPgm,f
  3164                           
  3165                           ;PGM.c: 50: if(!(tmrPgm))
  3166  0C7D  08EC               	movf	_tmrPgm,f
  3167  0C7E  1D03               	skipz
  3168  0C7F  0008               	return
  3169                           
  3170                           ;PGM.c: 51: pgm_flg.pgmonoff=0;
  3171  0C80  106A               	bcf	_pgm_flg,0
  3172  0C81  0008               	return
  3173  0C82                     __end_of_PGMTick:	
  3174                           
  3175                           	psect	text7
  3176  05DD                     __ptext7:	
  3177 ;; *************** function _SLPSleep *****************
  3178 ;; Defined at:
  3179 ;;		line 7 in file "SLP.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  3184 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  3185 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  3186 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  3187 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  3188 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  3189 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  3190 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;		None               void
  3193 ;; Registers used:
  3194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3201 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3202 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3203 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3204 ;;Total ram usage:        9 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    5
  3207 ;; This function calls:
  3208 ;;		_CC1Sleep
  3209 ;; This function is called by:
  3210 ;;		_SYSTask
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           
  3215                           ;psect for function _SLPSleep
  3216  05DD                     _SLPSleep:	
  3217                           
  3218                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  3219                           ;SLP.c: 10: CC1Sleep();
  3220                           
  3221                           ;incstack = 0
  3222                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3223  05DD  318C  2449  3185   	fcall	_CC1Sleep
  3224                           
  3225                           ;SLP.c: 12: WPUBTmp=WPUB;
  3226  05E0  0024               	movlb	4	; select bank4
  3227  05E1  080D               	movf	13,w	;volatile
  3228  05E2  00FA               	movwf	??_SLPSleep
  3229  05E3  087A               	movf	??_SLPSleep,w
  3230  05E4  0020               	movlb	0	; select bank0
  3231  05E5  00A2               	movwf	SLPSleep@WPUBTmp
  3232                           
  3233                           ;SLP.c: 13: WPUB=0b00000100;
  3234  05E6  3004               	movlw	4
  3235  05E7  0024               	movlb	4	; select bank4
  3236  05E8  008D               	movwf	13	;volatile
  3237                           
  3238                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3239  05E9  0021               	movlb	1	; select bank1
  3240  05EA  081D               	movf	29,w	;volatile
  3241  05EB  00FA               	movwf	??_SLPSleep
  3242  05EC  087A               	movf	??_SLPSleep,w
  3243  05ED  0020               	movlb	0	; select bank0
  3244  05EE  00A6               	movwf	SLPSleep@ADCON0Tmp
  3245                           
  3246                           ;SLP.c: 16: ADCON0=0b00000000;
  3247  05EF  0021               	movlb	1	; select bank1
  3248  05F0  019D               	clrf	29	;volatile
  3249                           
  3250                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3251  05F1  0022               	movlb	2	; select bank2
  3252  05F2  0817               	movf	23,w	;volatile
  3253  05F3  00FA               	movwf	??_SLPSleep
  3254  05F4  087A               	movf	??_SLPSleep,w
  3255  05F5  0020               	movlb	0	; select bank0
  3256  05F6  00A5               	movwf	SLPSleep@FVRCONTmp
  3257                           
  3258                           ;SLP.c: 19: FVRCON=0b00000000;
  3259  05F7  0022               	movlb	2	; select bank2
  3260  05F8  0197               	clrf	23	;volatile
  3261                           
  3262                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3263  05F9  0027               	movlb	7	; select bank7
  3264  05FA  0815               	movf	21,w	;volatile
  3265  05FB  00FA               	movwf	??_SLPSleep
  3266  05FC  087A               	movf	??_SLPSleep,w
  3267  05FD  0020               	movlb	0	; select bank0
  3268  05FE  00A0               	movwf	SLPSleep@IOCBNTmp
  3269                           
  3270                           ;SLP.c: 22: INTCONTmp=INTCON;
  3271  05FF  080B               	movf	11,w	;volatile
  3272  0600  00FA               	movwf	??_SLPSleep
  3273  0601  087A               	movf	??_SLPSleep,w
  3274  0602  00A1               	movwf	SLPSleep@INTCONTmp
  3275                           
  3276                           ;SLP.c: 23: INTCON=0b10001000;
  3277  0603  3088               	movlw	136
  3278  0604  008B               	movwf	11	;volatile
  3279                           
  3280                           ;SLP.c: 24: IOCBN=0b00000100;
  3281  0605  3004               	movlw	4
  3282  0606  0027               	movlb	7	; select bank7
  3283  0607  0095               	movwf	21	;volatile
  3284                           
  3285                           ;SLP.c: 26: TESTBATTtmp=0;
  3286  0608  0020               	movlb	0	; select bank0
  3287  0609  01A7               	clrf	SLPSleep@TESTBATTtmp
  3288                           
  3289                           ;SLP.c: 27: if(PORTBbits.RB5)
  3290  060A  1E8D               	btfss	13,5	;volatile
  3291  060B  2E0E               	goto	l3847
  3292                           
  3293                           ;SLP.c: 28: TESTBATTtmp=1;
  3294  060C  01A7               	clrf	SLPSleep@TESTBATTtmp
  3295  060D  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3296  060E                     l3847:	
  3297                           
  3298                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3299  060E  0021               	movlb	1	; select bank1
  3300  060F  0817               	movf	23,w	;volatile
  3301  0610  00FA               	movwf	??_SLPSleep
  3302  0611  087A               	movf	??_SLPSleep,w
  3303  0612  0020               	movlb	0	; select bank0
  3304  0613  00A3               	movwf	SLPSleep@WDTCONTmp
  3305                           
  3306                           ;SLP.c: 31: WDTCON=0b00011011;
  3307  0614  301B               	movlw	27
  3308  0615  0021               	movlb	1	; select bank1
  3309  0616  0097               	movwf	23	;volatile
  3310                           
  3311                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3312  0617  0815               	movf	21,w	;volatile
  3313  0618  00FA               	movwf	??_SLPSleep
  3314  0619  087A               	movf	??_SLPSleep,w
  3315  061A  0020               	movlb	0	; select bank0
  3316  061B  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3317                           
  3318                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3319  061C  300A               	movlw	10
  3320  061D  0021               	movlb	1	; select bank1
  3321  061E  0095               	movwf	21	;volatile
  3322  061F  0064               	clrwdt	;# 
  3323  0620  0063               	sleep	;# 
  3324                           
  3325                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3326  0621  0020               	movlb	0	; select bank0
  3327  0622  0820               	movf	SLPSleep@IOCBNTmp,w
  3328  0623  0027               	movlb	7	; select bank7
  3329  0624  0095               	movwf	21	;volatile
  3330                           
  3331                           ;SLP.c: 40: INTCON=INTCONTmp;
  3332  0625  0020               	movlb	0	; select bank0
  3333  0626  0821               	movf	SLPSleep@INTCONTmp,w
  3334  0627  008B               	movwf	11	;volatile
  3335                           
  3336                           ;SLP.c: 41: WPUB=WPUBTmp;
  3337  0628  0822               	movf	SLPSleep@WPUBTmp,w
  3338  0629  0024               	movlb	4	; select bank4
  3339  062A  008D               	movwf	13	;volatile
  3340                           
  3341                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3342  062B  0020               	movlb	0	; select bank0
  3343  062C  0826               	movf	SLPSleep@ADCON0Tmp,w
  3344  062D  0021               	movlb	1	; select bank1
  3345  062E  009D               	movwf	29	;volatile
  3346                           
  3347                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3348  062F  0020               	movlb	0	; select bank0
  3349  0630  0825               	movf	SLPSleep@FVRCONTmp,w
  3350  0631  0022               	movlb	2	; select bank2
  3351  0632  0097               	movwf	23	;volatile
  3352                           
  3353                           ;SLP.c: 44: PORTBbits.RB5=0;
  3354  0633  0020               	movlb	0	; select bank0
  3355  0634  128D               	bcf	13,5	;volatile
  3356                           
  3357                           ;SLP.c: 45: if(TESTBATTtmp)
  3358  0635  0827               	movf	SLPSleep@TESTBATTtmp,w
  3359  0636  1D03               	skipz
  3360                           
  3361                           ;SLP.c: 46: PORTBbits.RB5=1;
  3362  0637  168D               	bsf	13,5	;volatile
  3363                           
  3364                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3365  0638  0823               	movf	SLPSleep@WDTCONTmp,w
  3366  0639  0021               	movlb	1	; select bank1
  3367  063A  0097               	movwf	23	;volatile
  3368                           
  3369                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3370  063B  0020               	movlb	0	; select bank0
  3371  063C  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3372  063D  0021               	movlb	1	; select bank1
  3373  063E  0095               	movwf	21	;volatile
  3374                           
  3375                           ;SLP.c: 50: flg_slp.exitSleep=1;
  3376  063F  1430               	bsf	_flg_slp^(0+128),0
  3377  0640  0008               	return
  3378  0641                     __end_of_SLPSleep:	
  3379                           
  3380                           	psect	text8
  3381  0C49                     __ptext8:	
  3382 ;; *************** function _CC1Sleep *****************
  3383 ;; Defined at:
  3384 ;;		line 146 in file "CC1.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    4
  3405 ;; This function calls:
  3406 ;;		_CC1Strobe
  3407 ;; This function is called by:
  3408 ;;		_SLPSleep
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _CC1Sleep
  3414  0C49                     _CC1Sleep:	
  3415                           
  3416                           ;CC1.c: 148: PORTAbits.RA5=0;
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3420  0C49  0020               	movlb	0	; select bank0
  3421  0C4A  128C               	bcf	12,5	;volatile
  3422                           
  3423                           ;CC1.c: 150: CC1Strobe(SWOR);
  3424  0C4B  3038               	movlw	56
  3425  0C4C  318D  2503         	fcall	_CC1Strobe
  3426                           
  3427                           ;CC1.c: 152: PORTAbits.RA5=1;
  3428  0C4E  0020               	movlb	0	; select bank0
  3429  0C4F  168C               	bsf	12,5	;volatile
  3430  0C50  0008               	return
  3431  0C51                     __end_of_CC1Sleep:	
  3432                           
  3433                           	psect	text9
  3434  0F0D                     __ptext9:	
  3435 ;; *************** function _DINTick *****************
  3436 ;; Defined at:
  3437 ;;		line 47 in file "DIN.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;		None               void
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3455 ;;Total ram usage:        1 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    2
  3458 ;; This function calls:
  3459 ;;		Nothing
  3460 ;; This function is called by:
  3461 ;;		_SYSTask
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           
  3466                           ;psect for function _DINTick
  3467  0F0D                     _DINTick:	
  3468                           
  3469                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3473  0F0D  0020               	movlb	0	; select bank0
  3474  0F0E  1C6E               	btfss	_u_flg_din,0
  3475  0F0F  2F22               	goto	l291
  3476                           
  3477                           ;DIN.c: 51: {
  3478                           ;DIN.c: 52: tmrDbncSel++;
  3479  0F10  3001               	movlw	1
  3480  0F11  00F1               	movwf	??_DINTick
  3481  0F12  0871               	movf	??_DINTick,w
  3482  0F13  0021               	movlb	1	; select bank1
  3483  0F14  07B4               	addwf	_tmrDbncSel^(0+128),f
  3484                           
  3485                           ;DIN.c: 53: if(tmrDbncSel>5)
  3486  0F15  3006               	movlw	6
  3487  0F16  0234               	subwf	_tmrDbncSel^(0+128),w
  3488  0F17  1C03               	skipc
  3489  0F18  2F22               	goto	l291
  3490                           
  3491                           ;DIN.c: 54: {
  3492                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3493  0F19  0020               	movlb	0	; select bank0
  3494  0F1A  106E               	bcf	_u_flg_din,0
  3495                           
  3496                           ;DIN.c: 56: tmrDbncSel=0;
  3497  0F1B  0021               	movlb	1	; select bank1
  3498  0F1C  01B4               	clrf	_tmrDbncSel^(0+128)
  3499                           
  3500                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3501  0F1D  1C7C               	btfss	_u_in_sta_currTask,0
  3502  0F1E  2F21               	goto	l293
  3503                           
  3504                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3505  0F1F  1436               	bsf	_u_in_ev_down^(0+128),0
  3506  0F20  2F22               	goto	l291
  3507  0F21                     l293:	
  3508                           
  3509                           ;DIN.c: 60: else
  3510                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3511  0F21  1438               	bsf	_u_in_ev_up^(0+128),0
  3512  0F22                     l291:	
  3513                           
  3514                           ;DIN.c: 62: }
  3515                           ;DIN.c: 63: }
  3516                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3517  0F22  0020               	movlb	0	; select bank0
  3518  0F23  1CEE               	btfss	_u_flg_din,1
  3519  0F24  0008               	return
  3520                           
  3521                           ;DIN.c: 67: {
  3522                           ;DIN.c: 68: tmrLongSel++;
  3523  0F25  3001               	movlw	1
  3524  0F26  0021               	movlb	1	; select bank1
  3525  0F27  07AA               	addwf	_tmrLongSel^(0+128),f
  3526  0F28  3000               	movlw	0
  3527  0F29  3DAB               	addwfc	(_tmrLongSel+1)^(0+128),f
  3528                           
  3529                           ;DIN.c: 69: if(tmrLongSel>200)
  3530  0F2A  3000               	movlw	0
  3531  0F2B  022B               	subwf	(_tmrLongSel+1)^(0+128),w
  3532  0F2C  30C9               	movlw	201
  3533  0F2D  1903               	skipnz
  3534  0F2E  022A               	subwf	_tmrLongSel^(0+128),w
  3535  0F2F  1C03               	skipc
  3536  0F30  0008               	return
  3537                           
  3538                           ;DIN.c: 70: {
  3539                           ;DIN.c: 72: tmrLongSel=0;
  3540  0F31  01AA               	clrf	_tmrLongSel^(0+128)
  3541  0F32  01AB               	clrf	(_tmrLongSel+1)^(0+128)
  3542                           
  3543                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3544  0F33  1437               	bsf	_u_in_ev_long^(0+128),0
  3545  0F34  0008               	return
  3546  0F35                     __end_of_DINTick:	
  3547                           
  3548                           	psect	text10
  3549  0F64                     __ptext10:	
  3550 ;; *************** function _CC1Init *****************
  3551 ;; Defined at:
  3552 ;;		line 75 in file "CC1.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  state           1    wreg     unsigned char 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  state           1    2[BANK0 ] unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;		None               void
  3559 ;; Registers used:
  3560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3569 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3570 ;;Total ram usage:        2 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    4
  3573 ;; This function calls:
  3574 ;;		_DLYDelay_ms
  3575 ;;		_CC1Strobe
  3576 ;;		_CC1Write
  3577 ;; This function is called by:
  3578 ;;		_SYSTask
  3579 ;;		_main
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           
  3584                           ;psect for function _CC1Init
  3585  0F64                     _CC1Init:	
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3589                           ;CC1Init@state stored from wreg
  3590  0F64  0020               	movlb	0	; select bank0
  3591  0F65  00A2               	movwf	CC1Init@state
  3592                           
  3593                           ;CC1.c: 76: switch(state)
  3594  0F66  2F8A               	goto	l3605
  3595  0F67                     l3595:	
  3596                           ;CC1.c: 84: case 2:
  3597                           
  3598                           ;CC1.c: 83: break;
  3599                           
  3600                           ;CC1.c: 77: {
  3601                           ;CC1.c: 81: case 1:
  3602                           
  3603                           
  3604                           ;CC1.c: 86: CC1Strobe(SRES);
  3605  0F67  3030               	movlw	48
  3606  0F68  318D  2503  318F   	fcall	_CC1Strobe
  3607                           
  3608                           ;CC1.c: 87: DLYDelay_ms(1);
  3609  0F6B  3001               	movlw	1
  3610  0F6C  00F1               	movwf	?_DLYDelay_ms
  3611  0F6D  3000               	movlw	0
  3612  0F6E  00F2               	movwf	?_DLYDelay_ms+1
  3613  0F6F  318D  252E  318F   	fcall	_DLYDelay_ms
  3614                           
  3615                           ;CC1.c: 88: CC1Write(0x00,cc1InitVal,0x2E);
  3616  0F72  3020               	movlw	low _cc1InitVal
  3617  0F73  00F7               	movwf	?_CC1Write
  3618  0F74  3001               	movlw	high _cc1InitVal
  3619  0F75  00F8               	movwf	?_CC1Write+1
  3620  0F76  302E               	movlw	46
  3621  0F77  00FB               	movwf	??_CC1Init
  3622  0F78  087B               	movf	??_CC1Init,w
  3623  0F79  00F9               	movwf	?_CC1Write+2
  3624  0F7A  3000               	movlw	0
  3625  0F7B  318E  2659  318F   	fcall	_CC1Write
  3626                           
  3627                           ;CC1.c: 89: CC1Write(0x3E,cc1PaTable,8);
  3628  0F7E  30D0               	movlw	low _cc1PaTable
  3629  0F7F  00F7               	movwf	?_CC1Write
  3630  0F80  3000               	movlw	high _cc1PaTable
  3631  0F81  00F8               	movwf	?_CC1Write+1
  3632  0F82  3008               	movlw	8
  3633  0F83  00FB               	movwf	??_CC1Init
  3634  0F84  087B               	movf	??_CC1Init,w
  3635  0F85  00F9               	movwf	?_CC1Write+2
  3636  0F86  303E               	movlw	62
  3637  0F87  318E  2659         	fcall	_CC1Write
  3638                           
  3639                           ;CC1.c: 91: }
  3640                           
  3641                           ;CC1.c: 90: break;
  3642  0F89  0008               	return
  3643  0F8A                     l3605:	
  3644  0F8A  0020               	movlb	0	; select bank0
  3645  0F8B  0822               	movf	CC1Init@state,w
  3646                           
  3647                           ; Switch size 1, requested type "space"
  3648                           ; Number of cases is 2, Range of values is 1 to 2
  3649                           ; switch strategies available:
  3650                           ; Name         Instructions Cycles
  3651                           ; simple_byte            7     4 (average)
  3652                           ; direct_byte           13     9 (fixed)
  3653                           ; jumptable            263     9 (fixed)
  3654                           ;	Chosen strategy is simple_byte
  3655  0F8C  3A01               	xorlw	1	; case 1
  3656  0F8D  1903               	skipnz
  3657  0F8E  2F93               	goto	l171
  3658  0F8F  3A03               	xorlw	3	; case 2
  3659  0F90  1903               	skipnz
  3660  0F91  2F67               	goto	l3595
  3661  0F92  2F93               	goto	l171
  3662  0F93                     l171:	
  3663  0F93  0008               	return
  3664  0F94                     __end_of_CC1Init:	
  3665                           
  3666                           	psect	text11
  3667  0EE7                     __ptext11:	
  3668 ;; *************** function _SYSInit *****************
  3669 ;; Defined at:
  3670 ;;		line 18 in file "SYS.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  state           1    wreg     unsigned char 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  state           1    2[COMMON] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;		None               void
  3677 ;; Registers used:
  3678 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3688 ;;Total ram usage:        2 bytes
  3689 ;; Hardware stack levels used:    1
  3690 ;; Hardware stack levels required when called:    2
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_main
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           
  3699                           ;psect for function _SYSInit
  3700  0EE7                     _SYSInit:	
  3701                           
  3702                           ;incstack = 0
  3703                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3704                           ;SYSInit@state stored from wreg
  3705  0EE7  00F2               	movwf	SYSInit@state
  3706                           
  3707                           ;SYS.c: 19: switch(state)
  3708  0EE8  2F04               	goto	l4077
  3709  0EE9                     l4055:	
  3710                           ;SYS.c: 20: {
  3711                           ;SYS.c: 21: case 0:
  3712                           
  3713                           
  3714                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  3715  0EE9  3006               	movlw	6
  3716  0EEA  0021               	movlb	1	; select bank1
  3717  0EEB  0095               	movwf	21	;volatile
  3718  0EEC  3073               	movlw	115
  3719  0EED  0099               	movwf	25	;volatile
  3720  0EEE  3009               	movlw	9
  3721  0EEF  0097               	movwf	23	;volatile
  3722  0EF0  0027               	movlb	7	; select bank7
  3723  0EF1  0194               	clrf	20	;volatile
  3724  0EF2  0195               	clrf	21	;volatile
  3725  0EF3  3063               	movlw	99
  3726  0EF4  0020               	movlb	0	; select bank0
  3727  0EF5  0095               	movwf	21	;volatile
  3728  0EF6  168B               	bsf	11,5	;volatile
  3729  0EF7  30FB               	movlw	251
  3730  0EF8  00F1               	movwf	??_SYSInit
  3731  0EF9  0871               	movf	??_SYSInit,w
  3732  0EFA  058B               	andwf	11,f	;volatile
  3733  0EFB  0191               	clrf	17	;volatile
  3734  0EFC  0192               	clrf	18	;volatile
  3735  0EFD  0021               	movlb	1	; select bank1
  3736  0EFE  0191               	clrf	17	;volatile
  3737  0EFF  0192               	clrf	18	;volatile
  3738                           
  3739                           ;SYS.c: 24: break;
  3740  0F00  0008               	return
  3741  0F01                     l4073:	
  3742                           ;SYS.c: 25: case 1:
  3743                           
  3744                           
  3745                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  3746  0F01  0021               	movlb	1	; select bank1
  3747  0F02  01B5               	clrf	_u_SYS_STA^(0+128)
  3748                           
  3749                           ;SYS.c: 32: }
  3750                           
  3751                           ;SYS.c: 28: break;
  3752  0F03  0008               	return
  3753  0F04                     l4077:	
  3754  0F04  0872               	movf	SYSInit@state,w
  3755                           
  3756                           ; Switch size 1, requested type "space"
  3757                           ; Number of cases is 2, Range of values is 0 to 1
  3758                           ; switch strategies available:
  3759                           ; Name         Instructions Cycles
  3760                           ; simple_byte            7     4 (average)
  3761                           ; direct_byte           10     6 (fixed)
  3762                           ; jumptable            260     6 (fixed)
  3763                           ;	Chosen strategy is simple_byte
  3764  0F05  3A00               	xorlw	0	; case 0
  3765  0F06  1903               	skipnz
  3766  0F07  2EE9               	goto	l4055
  3767  0F08  3A01               	xorlw	1	; case 1
  3768  0F09  1903               	skipnz
  3769  0F0A  2F01               	goto	l4073
  3770  0F0B  2F0C               	goto	l586
  3771  0F0C                     l586:	
  3772  0F0C  0008               	return
  3773  0F0D                     __end_of_SYSInit:	
  3774                           
  3775                           	psect	text12
  3776  0C37                     __ptext12:	
  3777 ;; *************** function _RTXTask *****************
  3778 ;; Defined at:
  3779 ;;		line 74 in file "RTX.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;		None
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;		None
  3784 ;; Return value:  Size  Location     Type
  3785 ;;		None               void
  3786 ;; Registers used:
  3787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3797 ;;Total ram usage:        0 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    8
  3800 ;; This function calls:
  3801 ;;		_RTXReadPkt
  3802 ;; This function is called by:
  3803 ;;		_main
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _RTXTask
  3809  0C37                     _RTXTask:	
  3810                           
  3811                           ;RTX.c: 76: if(!(PORTBbits.RB0))
  3812                           
  3813                           ;incstack = 0
  3814                           ; Regs used in _RTXTask: [allreg]
  3815  0C37  0020               	movlb	0	; select bank0
  3816  0C38  180D               	btfsc	13,0	;volatile
  3817  0C39  0008               	return
  3818                           
  3819                           ;RTX.c: 77: RTXReadPkt();
  3820  0C3A  3187  274D         	fcall	_RTXReadPkt
  3821  0C3C  0008               	return
  3822  0C3D                     __end_of_RTXTask:	
  3823                           
  3824                           	psect	text13
  3825  074D                     __ptext13:	
  3826 ;; *************** function _RTXReadPkt *****************
  3827 ;; Defined at:
  3828 ;;		line 115 in file "RTX.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;Total ram usage:        2 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    7
  3849 ;; This function calls:
  3850 ;;		_CC1Strobe
  3851 ;;		_CC1Read
  3852 ;;		_LEDNormalFlash
  3853 ;;		_PGMWriteNvm
  3854 ;;		_RTXStartSendData
  3855 ;;		_RTXRcvPkt
  3856 ;;		_RTXSendRPgm
  3857 ;; This function is called by:
  3858 ;;		_RTXTask
  3859 ;; This function uses a non-reentrant model
  3860 ;;
  3861                           
  3862                           
  3863                           ;psect for function _RTXReadPkt
  3864  074D                     _RTXReadPkt:	
  3865                           
  3866                           ;RTX.c: 116: unsigned char numRxByte;
  3867                           ;RTX.c: 119: CC1Read(0x3B,(&(numRxByte)),1);
  3868                           
  3869                           ;incstack = 0
  3870                           ; Regs used in _RTXReadPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3871  074D  3066               	movlw	RTXReadPkt@numRxByte& (0+255)
  3872  074E  0020               	movlb	0	; select bank0
  3873  074F  00E5               	movwf	??_RTXReadPkt
  3874  0750  0865               	movf	??_RTXReadPkt,w
  3875  0751  00F7               	movwf	?_CC1Read
  3876  0752  01F8               	clrf	?_CC1Read+1
  3877  0753  0AF8               	incf	?_CC1Read+1,f
  3878  0754  303B               	movlw	59
  3879  0755  318D  2547  3187   	fcall	_CC1Read
  3880                           
  3881                           ;RTX.c: 120: while(numRxByte>=9)
  3882  0758  3009               	movlw	9
  3883  0759  0020               	movlb	0	; select bank0
  3884  075A  0266               	subwf	RTXReadPkt@numRxByte,w
  3885  075B  1C03               	btfss	3,0
  3886  075C  0008               	return
  3887  075D  0064               	clrwdt	;# 
  3888                           
  3889                           ;RTX.c: 124: RTXRcvPkt(pktRx,9);
  3890  075E  3009               	movlw	9
  3891  075F  0020               	movlb	0	; select bank0
  3892  0760  00E5               	movwf	??_RTXReadPkt
  3893  0761  0865               	movf	??_RTXReadPkt,w
  3894  0762  00A0               	movwf	?_RTXRcvPkt
  3895  0763  30B9               	movlw	_pktRx& (0+255)
  3896  0764  318C  249B  3187   	fcall	_RTXRcvPkt
  3897                           
  3898                           ;RTX.c: 126: if(pgm_flg.pgmonoff)
  3899  0767  0020               	movlb	0	; select bank0
  3900  0768  1C6A               	btfss	_pgm_flg,0
  3901  0769  2F89               	goto	l4005
  3902                           
  3903                           ;RTX.c: 127: {
  3904                           ;RTX.c: 128: if(pktRx[0]==0x00)
  3905  076A  0021               	movlb	1	; select bank1
  3906  076B  08B9               	movf	_pktRx^(0+128),f
  3907  076C  1D03               	skipz
  3908  076D  2F4D               	goto	_RTXReadPkt
  3909                           
  3910                           ;RTX.c: 129: {
  3911                           ;RTX.c: 131: if(pktRx[2]==PGM)
  3912  076E  083B               	movf	(_pktRx^(0+128)+2),w
  3913  076F  3A01               	xorlw	1
  3914  0770  1D03               	skipz
  3915  0771  2F4D               	goto	_RTXReadPkt
  3916                           
  3917                           ;RTX.c: 132: {
  3918                           ;RTX.c: 134: pgm_cfg.baseId=pktRx[1];
  3919  0772  083A               	movf	(_pktRx^(0+128)+1),w
  3920  0773  0020               	movlb	0	; select bank0
  3921  0774  00E5               	movwf	??_RTXReadPkt
  3922  0775  0865               	movf	??_RTXReadPkt,w
  3923  0776  0021               	movlb	1	; select bank1
  3924  0777  00CF               	movwf	(_pgm_cfg^(0+128)+4)
  3925                           
  3926                           ;RTX.c: 135: PGMWriteNvm();
  3927  0778  318C  24DD  3187   	fcall	_PGMWriteNvm
  3928                           
  3929                           ;RTX.c: 137: RTXSendRPgm();
  3930  077B  318E  267A  3187   	fcall	_RTXSendRPgm
  3931                           
  3932                           ;RTX.c: 139: rtx_flg.pgmDone=1;
  3933  077E  0020               	movlb	0	; select bank0
  3934  077F  14EB               	bsf	_rtx_flg,1
  3935                           
  3936                           ;RTX.c: 141: tmrRcvPkt=0;
  3937  0780  01ED               	clrf	_tmrRcvPkt
  3938                           
  3939                           ;RTX.c: 143: RTXStartSendData();
  3940  0781  318C  242C  3187   	fcall	_RTXStartSendData
  3941                           
  3942                           ;RTX.c: 145: LEDNormalFlash(3);
  3943  0784  3003               	movlw	3
  3944  0785  318D  25DA  3187   	fcall	_LEDNormalFlash
  3945                           
  3946                           ;RTX.c: 146: }
  3947                           ;RTX.c: 147: }
  3948                           ;RTX.c: 148: }
  3949  0788  2F4D               	goto	_RTXReadPkt
  3950  0789                     l4005:	
  3951                           
  3952                           ;RTX.c: 149: else
  3953                           ;RTX.c: 150: {
  3954                           ;RTX.c: 151: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  3955  0789  0021               	movlb	1	; select bank1
  3956  078A  084E               	movf	(_pgm_cfg^(0+128)+3),w
  3957  078B  0639               	xorwf	_pktRx^(0+128),w
  3958  078C  1D03               	skipz
  3959  078D  2F4D               	goto	_RTXReadPkt
  3960  078E  084F               	movf	(_pgm_cfg^(0+128)+4),w
  3961  078F  063A               	xorwf	(_pktRx^(0+128)+1),w
  3962  0790  1D03               	skipz
  3963  0791  2F4D               	goto	_RTXReadPkt
  3964                           
  3965                           ;RTX.c: 152: {
  3966                           ;RTX.c: 154: if(pktRx[2]==rDAT)
  3967  0792  083B               	movf	(_pktRx^(0+128)+2),w
  3968  0793  3A80               	xorlw	128
  3969  0794  1D03               	skipz
  3970  0795  2F4D               	goto	_RTXReadPkt
  3971                           
  3972                           ;RTX.c: 155: {
  3973                           ;RTX.c: 157: CC1Strobe(SIDLE);
  3974  0796  3036               	movlw	54
  3975  0797  318D  2503  3187   	fcall	_CC1Strobe
  3976                           
  3977                           ;RTX.c: 159: tmrRcvPkt=0;
  3978  079A  0020               	movlb	0	; select bank0
  3979  079B  01ED               	clrf	_tmrRcvPkt
  3980                           
  3981                           ;RTX.c: 161: cntSndData=0;
  3982  079C  0021               	movlb	1	; select bank1
  3983  079D  01AF               	clrf	_cntSndData^(0+128)
  3984                           
  3985                           ;RTX.c: 163: rtx_flg.sendDone=1;
  3986  079E  0020               	movlb	0	; select bank0
  3987  079F  146B               	bsf	_rtx_flg,0
  3988  07A0  2F4D               	goto	_RTXReadPkt
  3989  07A1                     __end_of_RTXReadPkt:	
  3990                           ;RTX.c: 164: }
  3991                           ;RTX.c: 165: }
  3992                           ;RTX.c: 166: }
  3993                           ;RTX.c: 168: CC1Read(0x3B,(&(numRxByte)),1);
  3994                           
  3995                           
  3996                           	psect	text14
  3997  0E7A                     __ptext14:	
  3998 ;; *************** function _RTXSendRPgm *****************
  3999 ;; Defined at:
  4000 ;;		line 229 in file "RTX.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;		None               void
  4007 ;; Registers used:
  4008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;Total ram usage:        1 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    5
  4021 ;; This function calls:
  4022 ;;		_RTXSndPkt
  4023 ;; This function is called by:
  4024 ;;		_RTXReadPkt
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _RTXSendRPgm
  4030  0E7A                     _RTXSendRPgm:	
  4031                           
  4032                           ;RTX.c: 231: pktTx[0]=pgm_cfg.baseId;
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4036  0E7A  0021               	movlb	1	; select bank1
  4037  0E7B  084F               	movf	(_pgm_cfg^(0+128)+4),w
  4038  0E7C  0020               	movlb	0	; select bank0
  4039  0E7D  00A8               	movwf	??_RTXSendRPgm
  4040  0E7E  0828               	movf	??_RTXSendRPgm,w
  4041  0E7F  0021               	movlb	1	; select bank1
  4042  0E80  00C2               	movwf	_pktTx^(0+128)
  4043                           
  4044                           ;RTX.c: 232: pktTx[1]=pgm_cfg.sensId;
  4045  0E81  084E               	movf	(_pgm_cfg^(0+128)+3),w
  4046  0E82  0020               	movlb	0	; select bank0
  4047  0E83  00A8               	movwf	??_RTXSendRPgm
  4048  0E84  0828               	movf	??_RTXSendRPgm,w
  4049  0E85  0021               	movlb	1	; select bank1
  4050  0E86  00C3               	movwf	(_pktTx^(0+128)+1)
  4051                           
  4052                           ;RTX.c: 233: pktTx[2]=rPGM;
  4053  0E87  3081               	movlw	129
  4054  0E88  0020               	movlb	0	; select bank0
  4055  0E89  00A8               	movwf	??_RTXSendRPgm
  4056  0E8A  0828               	movf	??_RTXSendRPgm,w
  4057  0E8B  0021               	movlb	1	; select bank1
  4058  0E8C  00C4               	movwf	(_pktTx^(0+128)+2)
  4059                           
  4060                           ;RTX.c: 234: pktTx[3]=0x00;
  4061  0E8D  01C5               	clrf	(_pktTx^(0+128)+3)
  4062                           
  4063                           ;RTX.c: 235: pktTx[4]=0x00;
  4064  0E8E  01C6               	clrf	(_pktTx^(0+128)+4)
  4065                           
  4066                           ;RTX.c: 236: pktTx[5]=0x00;
  4067  0E8F  01C7               	clrf	(_pktTx^(0+128)+5)
  4068                           
  4069                           ;RTX.c: 237: pktTx[6]=0x00;
  4070  0E90  01C8               	clrf	(_pktTx^(0+128)+6)
  4071                           
  4072                           ;RTX.c: 238: pktTx[7]=0x00;
  4073  0E91  01C9               	clrf	(_pktTx^(0+128)+7)
  4074                           
  4075                           ;RTX.c: 239: pktTx[8]=0x00;
  4076  0E92  01CA               	clrf	(_pktTx^(0+128)+8)
  4077                           
  4078                           ;RTX.c: 242: RTXSndPkt(pktTx,9);
  4079  0E93  3009               	movlw	9
  4080  0E94  0020               	movlb	0	; select bank0
  4081  0E95  00A8               	movwf	??_RTXSendRPgm
  4082  0E96  0828               	movf	??_RTXSendRPgm,w
  4083  0E97  00A2               	movwf	?_RTXSndPkt
  4084  0E98  30C2               	movlw	_pktTx& (0+255)
  4085  0E99  3186  26F8         	fcall	_RTXSndPkt
  4086  0E9B  0008               	return
  4087  0E9C                     __end_of_RTXSendRPgm:	
  4088                           
  4089                           	psect	text15
  4090  0C9B                     __ptext15:	
  4091 ;; *************** function _RTXRcvPkt *****************
  4092 ;; Defined at:
  4093 ;;		line 109 in file "RTX.c"
  4094 ;; Parameters:    Size  Location     Type
  4095 ;;  dst             1    wreg     PTR unsigned char 
  4096 ;;		 -> pktRx(9), 
  4097 ;;  len             1    0[BANK0 ] unsigned char 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  4100 ;;		 -> pktRx(9), 
  4101 ;; Return value:  Size  Location     Type
  4102 ;;		None               void
  4103 ;; Registers used:
  4104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4105 ;; Tracked objects:
  4106 ;;		On entry : 0/0
  4107 ;;		On exit  : 0/0
  4108 ;;		Unchanged: 0/0
  4109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4110 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4113 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4114 ;;Total ram usage:        4 bytes
  4115 ;; Hardware stack levels used:    1
  4116 ;; Hardware stack levels required when called:    4
  4117 ;; This function calls:
  4118 ;;		_CC1Read
  4119 ;; This function is called by:
  4120 ;;		_RTXReadPkt
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _RTXRcvPkt
  4126  0C9B                     _RTXRcvPkt:	
  4127                           
  4128                           ;incstack = 0
  4129                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4130                           ;RTXRcvPkt@dst stored from wreg
  4131  0C9B  0020               	movlb	0	; select bank0
  4132  0C9C  00A3               	movwf	RTXRcvPkt@dst
  4133                           
  4134                           ;RTX.c: 111: CC1Read(0x3F,dst,len);
  4135  0C9D  0823               	movf	RTXRcvPkt@dst,w
  4136  0C9E  00A1               	movwf	??_RTXRcvPkt
  4137  0C9F  0821               	movf	??_RTXRcvPkt,w
  4138  0CA0  00F7               	movwf	?_CC1Read
  4139  0CA1  0820               	movf	RTXRcvPkt@len,w
  4140  0CA2  00A2               	movwf	??_RTXRcvPkt+1
  4141  0CA3  0822               	movf	??_RTXRcvPkt+1,w
  4142  0CA4  00F8               	movwf	?_CC1Read+1
  4143  0CA5  303F               	movlw	63
  4144  0CA6  318D  2547         	fcall	_CC1Read
  4145  0CA8  0008               	return
  4146  0CA9                     __end_of_RTXRcvPkt:	
  4147                           
  4148                           	psect	text16
  4149  0DDA                     __ptext16:	
  4150 ;; *************** function _LEDNormalFlash *****************
  4151 ;; Defined at:
  4152 ;;		line 25 in file "LED.c"
  4153 ;; Parameters:    Size  Location     Type
  4154 ;;  num             1    wreg     unsigned char 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  num             1    8[COMMON] unsigned char 
  4157 ;;  i               1    9[COMMON] unsigned char 
  4158 ;; Return value:  Size  Location     Type
  4159 ;;		None               void
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0, pclath, cstack
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4171 ;;Total ram usage:        3 bytes
  4172 ;; Hardware stack levels used:    1
  4173 ;; Hardware stack levels required when called:    3
  4174 ;; This function calls:
  4175 ;;		_DLYDelay_ms
  4176 ;; This function is called by:
  4177 ;;		_PGMSelLong
  4178 ;;		_RTXReadPkt
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           
  4183                           ;psect for function _LEDNormalFlash
  4184  0DDA                     _LEDNormalFlash:	
  4185                           
  4186                           ;incstack = 0
  4187                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  4188                           ;LEDNormalFlash@num stored from wreg
  4189  0DDA  00F8               	movwf	LEDNormalFlash@num
  4190                           
  4191                           ;LED.c: 26: unsigned char i;
  4192                           ;LED.c: 28: for(i=0;i<num;i++)
  4193  0DDB  01F9               	clrf	LEDNormalFlash@i
  4194  0DDC                     l3655:	
  4195  0DDC  0878               	movf	LEDNormalFlash@num,w
  4196  0DDD  0279               	subwf	LEDNormalFlash@i,w
  4197  0DDE  1803               	btfsc	3,0
  4198  0DDF  0008               	return
  4199  0DE0  0064               	clrwdt	;# 
  4200                           
  4201                           ;LED.c: 31: PORTCbits.RC7=0;
  4202  0DE1  0020               	movlb	0	; select bank0
  4203  0DE2  138E               	bcf	14,7	;volatile
  4204                           
  4205                           ;LED.c: 32: DLYDelay_ms(200);
  4206  0DE3  30C8               	movlw	200
  4207  0DE4  00F1               	movwf	?_DLYDelay_ms
  4208  0DE5  3000               	movlw	0
  4209  0DE6  00F2               	movwf	?_DLYDelay_ms+1
  4210  0DE7  318D  252E  318D   	fcall	_DLYDelay_ms
  4211                           
  4212                           ;LED.c: 33: PORTCbits.RC7=1;
  4213  0DEA  0020               	movlb	0	; select bank0
  4214  0DEB  178E               	bsf	14,7	;volatile
  4215                           
  4216                           ;LED.c: 34: DLYDelay_ms(200);
  4217  0DEC  30C8               	movlw	200
  4218  0DED  00F1               	movwf	?_DLYDelay_ms
  4219  0DEE  3000               	movlw	0
  4220  0DEF  00F2               	movwf	?_DLYDelay_ms+1
  4221  0DF0  318D  252E  318D   	fcall	_DLYDelay_ms
  4222  0DF3  3001               	movlw	1
  4223  0DF4  00F7               	movwf	??_LEDNormalFlash
  4224  0DF5  0877               	movf	??_LEDNormalFlash,w
  4225  0DF6  07F9               	addwf	LEDNormalFlash@i,f
  4226  0DF7  2DDC               	goto	l3655
  4227  0DF8                     __end_of_LEDNormalFlash:	
  4228                           
  4229                           	psect	text17
  4230  0E9C                     __ptext17:	
  4231 ;; *************** function _RTXInit *****************
  4232 ;; Defined at:
  4233 ;;		line 40 in file "RTX.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  state           1    wreg     unsigned char 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;  state           1   12[BANK0 ] unsigned char 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    7
  4254 ;; This function calls:
  4255 ;;		_CC1Strobe
  4256 ;;		_RTXStartSendData
  4257 ;; This function is called by:
  4258 ;;		_main
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           
  4263                           ;psect for function _RTXInit
  4264  0E9C                     _RTXInit:	
  4265                           
  4266                           ;incstack = 0
  4267                           ; Regs used in _RTXInit: [allreg]
  4268                           ;RTXInit@state stored from wreg
  4269  0E9C  0020               	movlb	0	; select bank0
  4270  0E9D  00AC               	movwf	RTXInit@state
  4271                           
  4272                           ;RTX.c: 41: switch(state)
  4273  0E9E  2EB4               	goto	l3925
  4274  0E9F                     l3917:	
  4275                           ;RTX.c: 46: case 1:
  4276                           
  4277                           ;RTX.c: 45: break;
  4278                           
  4279                           ;RTX.c: 42: {
  4280                           ;RTX.c: 43: case 0:
  4281                           
  4282                           
  4283                           ;RTX.c: 48: tmrRcvPkt=0;
  4284  0E9F  01ED               	clrf	_tmrRcvPkt
  4285                           
  4286                           ;RTX.c: 49: cntSndData=0;
  4287  0EA0  0021               	movlb	1	; select bank1
  4288  0EA1  01AF               	clrf	_cntSndData^(0+128)
  4289                           
  4290                           ;RTX.c: 50: rtx_flg.val=0;
  4291  0EA2  0020               	movlb	0	; select bank0
  4292  0EA3  01EB               	clrf	_rtx_flg
  4293                           
  4294                           ;RTX.c: 51: break;
  4295  0EA4  0008               	return
  4296  0EA5                     l3919:	
  4297                           ;RTX.c: 52: case 2:
  4298                           
  4299                           
  4300                           ;RTX.c: 54: CC1Strobe(SIDLE);
  4301  0EA5  3036               	movlw	54
  4302  0EA6  318D  2503  318E   	fcall	_CC1Strobe
  4303                           
  4304                           ;RTX.c: 55: CC1Strobe(SCAL);
  4305  0EA9  3033               	movlw	51
  4306  0EAA  318D  2503  318E   	fcall	_CC1Strobe
  4307                           
  4308                           ;RTX.c: 56: CC1Strobe(SRX);
  4309  0EAD  3034               	movlw	52
  4310  0EAE  318D  2503  318E   	fcall	_CC1Strobe
  4311                           
  4312                           ;RTX.c: 57: RTXStartSendData();
  4313  0EB1  318C  242C         	fcall	_RTXStartSendData
  4314                           
  4315                           ;RTX.c: 59: }
  4316                           
  4317                           ;RTX.c: 58: break;
  4318  0EB3  0008               	return
  4319  0EB4                     l3925:	
  4320  0EB4  0020               	movlb	0	; select bank0
  4321  0EB5  082C               	movf	RTXInit@state,w
  4322                           
  4323                           ; Switch size 1, requested type "space"
  4324                           ; Number of cases is 3, Range of values is 0 to 2
  4325                           ; switch strategies available:
  4326                           ; Name         Instructions Cycles
  4327                           ; simple_byte           10     6 (average)
  4328                           ; direct_byte           12     6 (fixed)
  4329                           ; jumptable            260     6 (fixed)
  4330                           ;	Chosen strategy is simple_byte
  4331  0EB6  3A00               	xorlw	0	; case 0
  4332  0EB7  1903               	skipnz
  4333  0EB8  2EC0               	goto	l459
  4334  0EB9  3A01               	xorlw	1	; case 1
  4335  0EBA  1903               	skipnz
  4336  0EBB  2E9F               	goto	l3917
  4337  0EBC  3A03               	xorlw	3	; case 2
  4338  0EBD  1903               	skipnz
  4339  0EBE  2EA5               	goto	l3919
  4340  0EBF  2EC0               	goto	l459
  4341  0EC0                     l459:	
  4342  0EC0  0008               	return
  4343  0EC1                     __end_of_RTXInit:	
  4344                           
  4345                           	psect	text18
  4346  0C2C                     __ptext18:	
  4347 ;; *************** function _RTXStartSendData *****************
  4348 ;; Defined at:
  4349 ;;		line 173 in file "RTX.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;Total ram usage:        0 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    6
  4370 ;; This function calls:
  4371 ;;		_RTXSendData
  4372 ;; This function is called by:
  4373 ;;		_RTXInit
  4374 ;;		_RTXReadPkt
  4375 ;;		_SYSTask
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           
  4380                           ;psect for function _RTXStartSendData
  4381  0C2C                     _RTXStartSendData:	
  4382                           
  4383                           ;RTX.c: 174: cntSndData=0;
  4384                           
  4385                           ;incstack = 0
  4386                           ; Regs used in _RTXStartSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4387  0C2C  0021               	movlb	1	; select bank1
  4388  0C2D  01AF               	clrf	_cntSndData^(0+128)
  4389                           
  4390                           ;RTX.c: 175: RTXSendData();
  4391  0C2E  3183  233F         	fcall	_RTXSendData
  4392  0C30  0008               	return
  4393  0C31                     __end_of_RTXStartSendData:	
  4394                           
  4395                           	psect	text19
  4396  033F                     __ptext19:	
  4397 ;; *************** function _RTXSendData *****************
  4398 ;; Defined at:
  4399 ;;		line 179 in file "RTX.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;		None
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  tmpVal          3    9[BANK0 ] float 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;Total ram usage:        4 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:    5
  4420 ;; This function calls:
  4421 ;;		_LEDFastFlash
  4422 ;;		_RTXSndPkt
  4423 ;;		___fttol
  4424 ;; This function is called by:
  4425 ;;		_RTXTick
  4426 ;;		_RTXStartSendData
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           
  4431                           ;psect for function _RTXSendData
  4432  033F                     _RTXSendData:	
  4433                           
  4434                           ;RTX.c: 180: float tmpVal;
  4435                           ;RTX.c: 182: if(pgm_flg.pgmonoff)
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4439  033F  0020               	movlb	0	; select bank0
  4440  0340  1C6A               	btfss	_pgm_flg,0
  4441  0341  2B4A               	goto	l3945
  4442                           
  4443                           ;RTX.c: 183: {
  4444                           ;RTX.c: 185: cntSndData=0;
  4445  0342  0021               	movlb	1	; select bank1
  4446  0343  01AF               	clrf	_cntSndData^(0+128)
  4447                           
  4448                           ;RTX.c: 187: tmrRcvPkt=100;
  4449  0344  3064               	movlw	100
  4450  0345  0020               	movlb	0	; select bank0
  4451  0346  00A8               	movwf	??_RTXSendData
  4452  0347  0828               	movf	??_RTXSendData,w
  4453  0348  00ED               	movwf	_tmrRcvPkt
  4454                           
  4455                           ;RTX.c: 188: }
  4456  0349  0008               	return
  4457  034A                     l3945:	
  4458                           
  4459                           ;RTX.c: 189: else
  4460                           ;RTX.c: 190: {
  4461                           ;RTX.c: 192: if(cntSndData<5)
  4462  034A  3005               	movlw	5
  4463  034B  0021               	movlb	1	; select bank1
  4464  034C  022F               	subwf	_cntSndData^(0+128),w
  4465  034D  1803               	skipnc
  4466  034E  2BF6               	goto	l499
  4467                           
  4468                           ;RTX.c: 193: {
  4469                           ;RTX.c: 195: if(adc_ev.convDone)
  4470  034F  1C2D               	btfss	_adc_ev^(0+128),0
  4471  0350  2BF0               	goto	l3975
  4472                           
  4473                           ;RTX.c: 196: {
  4474                           ;RTX.c: 198: pktTx[0]=pgm_cfg.baseId;
  4475  0351  084F               	movf	(_pgm_cfg^(0+128)+4),w
  4476  0352  0020               	movlb	0	; select bank0
  4477  0353  00A8               	movwf	??_RTXSendData
  4478  0354  0828               	movf	??_RTXSendData,w
  4479  0355  0021               	movlb	1	; select bank1
  4480  0356  00C2               	movwf	_pktTx^(0+128)
  4481                           
  4482                           ;RTX.c: 199: pktTx[1]=pgm_cfg.sensId;
  4483  0357  084E               	movf	(_pgm_cfg^(0+128)+3),w
  4484  0358  0020               	movlb	0	; select bank0
  4485  0359  00A8               	movwf	??_RTXSendData
  4486  035A  0828               	movf	??_RTXSendData,w
  4487  035B  0021               	movlb	1	; select bank1
  4488  035C  00C3               	movwf	(_pktTx^(0+128)+1)
  4489                           
  4490                           ;RTX.c: 200: pktTx[2]=DAT;
  4491  035D  01C4               	clrf	(_pktTx^(0+128)+2)
  4492                           
  4493                           ;RTX.c: 201: tmpVal=tempC;
  4494  035E  0823               	movf	_tempC^(0+128),w
  4495  035F  0020               	movlb	0	; select bank0
  4496  0360  00A9               	movwf	RTXSendData@tmpVal
  4497  0361  0021               	movlb	1	; select bank1
  4498  0362  0824               	movf	(_tempC+1)^(0+128),w
  4499  0363  0020               	movlb	0	; select bank0
  4500  0364  00AA               	movwf	RTXSendData@tmpVal+1
  4501  0365  0021               	movlb	1	; select bank1
  4502  0366  0825               	movf	(_tempC+2)^(0+128),w
  4503  0367  0020               	movlb	0	; select bank0
  4504  0368  00AB               	movwf	RTXSendData@tmpVal+2
  4505                           
  4506                           ;RTX.c: 202: pktTx[3]=(unsigned char)(*(&(tmpVal)));
  4507  0369  0829               	movf	RTXSendData@tmpVal,w
  4508  036A  00F1               	movwf	?___fttol
  4509  036B  082A               	movf	RTXSendData@tmpVal+1,w
  4510  036C  00F2               	movwf	?___fttol+1
  4511  036D  082B               	movf	RTXSendData@tmpVal+2,w
  4512  036E  00F3               	movwf	?___fttol+2
  4513  036F  3185  2556  3183   	fcall	___fttol
  4514  0372  0871               	movf	?___fttol,w
  4515  0373  0020               	movlb	0	; select bank0
  4516  0374  00A8               	movwf	??_RTXSendData
  4517  0375  0828               	movf	??_RTXSendData,w
  4518  0376  0021               	movlb	1	; select bank1
  4519  0377  00C5               	movwf	(_pktTx^(0+128)+3)
  4520                           
  4521                           ;RTX.c: 203: pktTx[4]=(unsigned char)(*((&(tmpVal))+1));
  4522  0378  3003               	movlw	3
  4523  0379  3E29               	addlw	RTXSendData@tmpVal& (0+255)
  4524  037A  0086               	movwf	6
  4525  037B  0187               	clrf	7
  4526  037C  3F40               	moviw [0]fsr1
  4527  037D  00F1               	movwf	?___fttol
  4528  037E  3F41               	moviw [1]fsr1
  4529  037F  00F2               	movwf	?___fttol+1
  4530  0380  3F42               	moviw [2]fsr1
  4531  0381  00F3               	movwf	?___fttol+2
  4532  0382  3185  2556  3183   	fcall	___fttol
  4533  0385  0871               	movf	?___fttol,w
  4534  0386  0020               	movlb	0	; select bank0
  4535  0387  00A8               	movwf	??_RTXSendData
  4536  0388  0828               	movf	??_RTXSendData,w
  4537  0389  0021               	movlb	1	; select bank1
  4538  038A  00C6               	movwf	(_pktTx^(0+128)+4)
  4539                           
  4540                           ;RTX.c: 204: pktTx[5]=(unsigned char)(*((&(tmpVal))+2));
  4541  038B  3006               	movlw	6
  4542  038C  3E29               	addlw	RTXSendData@tmpVal& (0+255)
  4543  038D  0086               	movwf	6
  4544  038E  0187               	clrf	7
  4545  038F  3F40               	moviw [0]fsr1
  4546  0390  00F1               	movwf	?___fttol
  4547  0391  3F41               	moviw [1]fsr1
  4548  0392  00F2               	movwf	?___fttol+1
  4549  0393  3F42               	moviw [2]fsr1
  4550  0394  00F3               	movwf	?___fttol+2
  4551  0395  3185  2556  3183   	fcall	___fttol
  4552  0398  0871               	movf	?___fttol,w
  4553  0399  0020               	movlb	0	; select bank0
  4554  039A  00A8               	movwf	??_RTXSendData
  4555  039B  0828               	movf	??_RTXSendData,w
  4556  039C  0021               	movlb	1	; select bank1
  4557  039D  00C7               	movwf	(_pktTx^(0+128)+5)
  4558                           
  4559                           ;RTX.c: 205: tmpVal=battV;
  4560  039E  0820               	movf	_battV^(0+128),w
  4561  039F  0020               	movlb	0	; select bank0
  4562  03A0  00A9               	movwf	RTXSendData@tmpVal
  4563  03A1  0021               	movlb	1	; select bank1
  4564  03A2  0821               	movf	(_battV+1)^(0+128),w
  4565  03A3  0020               	movlb	0	; select bank0
  4566  03A4  00AA               	movwf	RTXSendData@tmpVal+1
  4567  03A5  0021               	movlb	1	; select bank1
  4568  03A6  0822               	movf	(_battV+2)^(0+128),w
  4569  03A7  0020               	movlb	0	; select bank0
  4570  03A8  00AB               	movwf	RTXSendData@tmpVal+2
  4571                           
  4572                           ;RTX.c: 206: pktTx[6]=(unsigned char)(*(&(tmpVal)));
  4573  03A9  0829               	movf	RTXSendData@tmpVal,w
  4574  03AA  00F1               	movwf	?___fttol
  4575  03AB  082A               	movf	RTXSendData@tmpVal+1,w
  4576  03AC  00F2               	movwf	?___fttol+1
  4577  03AD  082B               	movf	RTXSendData@tmpVal+2,w
  4578  03AE  00F3               	movwf	?___fttol+2
  4579  03AF  3185  2556  3183   	fcall	___fttol
  4580  03B2  0871               	movf	?___fttol,w
  4581  03B3  0020               	movlb	0	; select bank0
  4582  03B4  00A8               	movwf	??_RTXSendData
  4583  03B5  0828               	movf	??_RTXSendData,w
  4584  03B6  0021               	movlb	1	; select bank1
  4585  03B7  00C8               	movwf	(_pktTx^(0+128)+6)
  4586                           
  4587                           ;RTX.c: 207: pktTx[7]=(unsigned char)(*((&(tmpVal))+1));
  4588  03B8  3003               	movlw	3
  4589  03B9  3E29               	addlw	RTXSendData@tmpVal& (0+255)
  4590  03BA  0086               	movwf	6
  4591  03BB  0187               	clrf	7
  4592  03BC  3F40               	moviw [0]fsr1
  4593  03BD  00F1               	movwf	?___fttol
  4594  03BE  3F41               	moviw [1]fsr1
  4595  03BF  00F2               	movwf	?___fttol+1
  4596  03C0  3F42               	moviw [2]fsr1
  4597  03C1  00F3               	movwf	?___fttol+2
  4598  03C2  3185  2556  3183   	fcall	___fttol
  4599  03C5  0871               	movf	?___fttol,w
  4600  03C6  0020               	movlb	0	; select bank0
  4601  03C7  00A8               	movwf	??_RTXSendData
  4602  03C8  0828               	movf	??_RTXSendData,w
  4603  03C9  0021               	movlb	1	; select bank1
  4604  03CA  00C9               	movwf	(_pktTx^(0+128)+7)
  4605                           
  4606                           ;RTX.c: 208: pktTx[8]=(unsigned char)(*((&(tmpVal))+2));
  4607  03CB  3006               	movlw	6
  4608  03CC  3E29               	addlw	RTXSendData@tmpVal& (0+255)
  4609  03CD  0086               	movwf	6
  4610  03CE  0187               	clrf	7
  4611  03CF  3F40               	moviw [0]fsr1
  4612  03D0  00F1               	movwf	?___fttol
  4613  03D1  3F41               	moviw [1]fsr1
  4614  03D2  00F2               	movwf	?___fttol+1
  4615  03D3  3F42               	moviw [2]fsr1
  4616  03D4  00F3               	movwf	?___fttol+2
  4617  03D5  3185  2556  3183   	fcall	___fttol
  4618  03D8  0871               	movf	?___fttol,w
  4619  03D9  0020               	movlb	0	; select bank0
  4620  03DA  00A8               	movwf	??_RTXSendData
  4621  03DB  0828               	movf	??_RTXSendData,w
  4622  03DC  0021               	movlb	1	; select bank1
  4623  03DD  00CA               	movwf	(_pktTx^(0+128)+8)
  4624                           
  4625                           ;RTX.c: 211: RTXSndPkt(pktTx,9);
  4626  03DE  3009               	movlw	9
  4627  03DF  0020               	movlb	0	; select bank0
  4628  03E0  00A8               	movwf	??_RTXSendData
  4629  03E1  0828               	movf	??_RTXSendData,w
  4630  03E2  00A2               	movwf	?_RTXSndPkt
  4631  03E3  30C2               	movlw	_pktTx& (0+255)
  4632  03E4  3186  26F8  3183   	fcall	_RTXSndPkt
  4633                           
  4634                           ;RTX.c: 214: cntSndData++;
  4635  03E7  3001               	movlw	1
  4636  03E8  0020               	movlb	0	; select bank0
  4637  03E9  00A8               	movwf	??_RTXSendData
  4638  03EA  0828               	movf	??_RTXSendData,w
  4639  03EB  0021               	movlb	1	; select bank1
  4640  03EC  07AF               	addwf	_cntSndData^(0+128),f
  4641                           
  4642                           ;RTX.c: 217: LEDFastFlash(1);
  4643  03ED  3001               	movlw	1
  4644  03EE  318D  25BC         	fcall	_LEDFastFlash
  4645  03F0                     l3975:	
  4646                           
  4647                           ;RTX.c: 218: }
  4648                           ;RTX.c: 221: tmrRcvPkt=100;
  4649  03F0  3064               	movlw	100
  4650  03F1  0020               	movlb	0	; select bank0
  4651  03F2  00A8               	movwf	??_RTXSendData
  4652  03F3  0828               	movf	??_RTXSendData,w
  4653  03F4  00ED               	movwf	_tmrRcvPkt
  4654                           
  4655                           ;RTX.c: 222: }
  4656  03F5  0008               	return
  4657  03F6                     l499:	
  4658                           
  4659                           ;RTX.c: 223: else
  4660                           ;RTX.c: 224: rtx_flg.sendDone=1;
  4661  03F6  0020               	movlb	0	; select bank0
  4662  03F7  146B               	bsf	_rtx_flg,0
  4663  03F8  0008               	return
  4664  03F9                     __end_of_RTXSendData:	
  4665                           
  4666                           	psect	text20
  4667  0556                     __ptext20:	
  4668 ;; *************** function ___fttol *****************
  4669 ;; Defined at:
  4670 ;;		line 45 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\fttol.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;  f1              3    1[COMMON] float 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  lval            4    1[BANK0 ] unsigned long 
  4675 ;;  exp1            1    5[BANK0 ] unsigned char 
  4676 ;;  sign1           1    0[BANK0 ] unsigned char 
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  4    1[COMMON] long 
  4679 ;; Registers used:
  4680 ;;		wreg, status,2, status,0
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;Total ram usage:       14 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    2
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_RTXSendData
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function ___fttol
  4702  0556                     ___fttol:	
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4706  0556  0871               	movf	___fttol@f1,w
  4707  0557  00F5               	movwf	??___fttol
  4708  0558  0872               	movf	___fttol@f1+1,w
  4709  0559  00F6               	movwf	??___fttol+1
  4710  055A  0873               	movf	___fttol@f1+2,w
  4711  055B  00F7               	movwf	??___fttol+2
  4712  055C  1003               	clrc
  4713  055D  0D76               	rlf	??___fttol+1,w
  4714  055E  0D77               	rlf	??___fttol+2,w
  4715  055F  00F8               	movwf	??___fttol+3
  4716  0560  0878               	movf	??___fttol+3,w
  4717  0561  0020               	movlb	0	; select bank0
  4718  0562  00A5               	movwf	___fttol@exp1
  4719  0563  08A5               	movf	___fttol@exp1,f
  4720  0564  1D03               	skipz
  4721  0565  2D6F               	goto	l4373
  4722  0566  3000               	movlw	0
  4723  0567  00F4               	movwf	?___fttol+3
  4724  0568  3000               	movlw	0
  4725  0569  00F3               	movwf	?___fttol+2
  4726  056A  3000               	movlw	0
  4727  056B  00F2               	movwf	?___fttol+1
  4728  056C  3000               	movlw	0
  4729  056D  00F1               	movwf	?___fttol
  4730  056E  0008               	return
  4731  056F                     l4373:	
  4732  056F  0871               	movf	___fttol@f1,w
  4733  0570  00F5               	movwf	??___fttol
  4734  0571  0872               	movf	___fttol@f1+1,w
  4735  0572  00F6               	movwf	??___fttol+1
  4736  0573  0873               	movf	___fttol@f1+2,w
  4737  0574  00F7               	movwf	??___fttol+2
  4738  0575  3017               	movlw	23
  4739  0576                     u4045:	
  4740  0576  36F7               	lsrf	??___fttol+2,f
  4741  0577  0CF6               	rrf	??___fttol+1,f
  4742  0578  0CF5               	rrf	??___fttol,f
  4743  0579  0B89               	decfsz	9,f
  4744  057A  2D76               	goto	u4045
  4745  057B  0875               	movf	??___fttol,w
  4746  057C  00F8               	movwf	??___fttol+3
  4747  057D  0878               	movf	??___fttol+3,w
  4748  057E  00A0               	movwf	___fttol@sign1
  4749  057F  17F2               	bsf	___fttol@f1+1,7
  4750  0580  30FF               	movlw	255
  4751  0581  05F1               	andwf	___fttol@f1,f
  4752  0582  30FF               	movlw	255
  4753  0583  05F2               	andwf	___fttol@f1+1,f
  4754  0584  3000               	movlw	0
  4755  0585  05F3               	andwf	___fttol@f1+2,f
  4756  0586  0871               	movf	___fttol@f1,w
  4757  0587  00A1               	movwf	___fttol@lval
  4758  0588  0872               	movf	___fttol@f1+1,w
  4759  0589  00A2               	movwf	___fttol@lval+1
  4760  058A  0873               	movf	___fttol@f1+2,w
  4761  058B  00A3               	movwf	___fttol@lval+2
  4762  058C  01A4               	clrf	___fttol@lval+3
  4763  058D  308E               	movlw	142
  4764  058E  02A5               	subwf	___fttol@exp1,f
  4765  058F  1FA5               	btfss	___fttol@exp1,7
  4766  0590  2DAD               	goto	l4393
  4767  0591  0825               	movf	___fttol@exp1,w
  4768  0592  3A80               	xorlw	128
  4769  0593  3E8F               	addlw	143
  4770  0594  1803               	skipnc
  4771  0595  2D9F               	goto	l4391
  4772  0596  3000               	movlw	0
  4773  0597  00F4               	movwf	?___fttol+3
  4774  0598  3000               	movlw	0
  4775  0599  00F3               	movwf	?___fttol+2
  4776  059A  3000               	movlw	0
  4777  059B  00F2               	movwf	?___fttol+1
  4778  059C  3000               	movlw	0
  4779  059D  00F1               	movwf	?___fttol
  4780  059E  0008               	return
  4781  059F                     l4391:	
  4782  059F  3001               	movlw	1
  4783  05A0                     u4075:	
  4784  05A0  36A4               	lsrf	___fttol@lval+3,f
  4785  05A1  0CA3               	rrf	___fttol@lval+2,f
  4786  05A2  0CA2               	rrf	___fttol@lval+1,f
  4787  05A3  0CA1               	rrf	___fttol@lval,f
  4788  05A4  0B89               	decfsz	9,f
  4789  05A5  2DA0               	goto	u4075
  4790  05A6  3001               	movlw	1
  4791  05A7  00F5               	movwf	??___fttol
  4792  05A8  0875               	movf	??___fttol,w
  4793  05A9  07A5               	addwf	___fttol@exp1,f
  4794  05AA  1903               	btfsc	3,2
  4795  05AB  2DC6               	goto	l4403
  4796  05AC  2D9F               	goto	l4391
  4797  05AD                     l4393:	
  4798  05AD  3018               	movlw	24
  4799  05AE  0225               	subwf	___fttol@exp1,w
  4800  05AF  1C03               	skipc
  4801  05B0  2DC3               	goto	l4401
  4802  05B1  3000               	movlw	0
  4803  05B2  00F4               	movwf	?___fttol+3
  4804  05B3  3000               	movlw	0
  4805  05B4  00F3               	movwf	?___fttol+2
  4806  05B5  3000               	movlw	0
  4807  05B6  00F2               	movwf	?___fttol+1
  4808  05B7  3000               	movlw	0
  4809  05B8  00F1               	movwf	?___fttol
  4810  05B9  0008               	return
  4811  05BA                     l4399:	
  4812  05BA  3001               	movlw	1
  4813  05BB                     u4105:	
  4814  05BB  35A1               	lslf	___fttol@lval,f
  4815  05BC  0DA2               	rlf	___fttol@lval+1,f
  4816  05BD  0DA3               	rlf	___fttol@lval+2,f
  4817  05BE  0DA4               	rlf	___fttol@lval+3,f
  4818  05BF  0B89               	decfsz	9,f
  4819  05C0  2DBB               	goto	u4105
  4820  05C1  3001               	movlw	1
  4821  05C2  02A5               	subwf	___fttol@exp1,f
  4822  05C3                     l4401:	
  4823  05C3  08A5               	movf	___fttol@exp1,f
  4824  05C4  1D03               	skipz
  4825  05C5  2DBA               	goto	l4399
  4826  05C6                     l4403:	
  4827  05C6  0820               	movf	___fttol@sign1,w
  4828  05C7  1903               	btfsc	3,2
  4829  05C8  2DD4               	goto	l4407
  4830  05C9  09A1               	comf	___fttol@lval,f
  4831  05CA  09A2               	comf	___fttol@lval+1,f
  4832  05CB  09A3               	comf	___fttol@lval+2,f
  4833  05CC  09A4               	comf	___fttol@lval+3,f
  4834  05CD  0AA1               	incf	___fttol@lval,f
  4835  05CE  1903               	skipnz
  4836  05CF  0AA2               	incf	___fttol@lval+1,f
  4837  05D0  1903               	skipnz
  4838  05D1  0AA3               	incf	___fttol@lval+2,f
  4839  05D2  1903               	skipnz
  4840  05D3  0AA4               	incf	___fttol@lval+3,f
  4841  05D4                     l4407:	
  4842  05D4  0824               	movf	___fttol@lval+3,w
  4843  05D5  00F4               	movwf	?___fttol+3
  4844  05D6  0823               	movf	___fttol@lval+2,w
  4845  05D7  00F3               	movwf	?___fttol+2
  4846  05D8  0822               	movf	___fttol@lval+1,w
  4847  05D9  00F2               	movwf	?___fttol+1
  4848  05DA  0821               	movf	___fttol@lval,w
  4849  05DB  00F1               	movwf	?___fttol
  4850  05DC  0008               	return
  4851  05DD                     __end_of___fttol:	
  4852                           
  4853                           	psect	text21
  4854  06F8                     __ptext21:	
  4855 ;; *************** function _RTXSndPkt *****************
  4856 ;; Defined at:
  4857 ;;		line 81 in file "RTX.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;  src             1    wreg     PTR unsigned char 
  4860 ;;		 -> pktTx(9), 
  4861 ;;  len             1    2[BANK0 ] unsigned char 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  src             1    4[BANK0 ] PTR unsigned char 
  4864 ;;		 -> pktTx(9), 
  4865 ;;  sta             1    7[BANK0 ] unsigned char 
  4866 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4867 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;		None               void
  4870 ;; Registers used:
  4871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4877 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4880 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;Total ram usage:        6 bytes
  4882 ;; Hardware stack levels used:    1
  4883 ;; Hardware stack levels required when called:    4
  4884 ;; This function calls:
  4885 ;;		_CC1Strobe
  4886 ;;		_CC1Write
  4887 ;;		_CC1Read
  4888 ;; This function is called by:
  4889 ;;		_RTXSendData
  4890 ;;		_RTXSendRPgm
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _RTXSndPkt
  4896  06F8                     _RTXSndPkt:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4900                           ;RTXSndPkt@src stored from wreg
  4901  06F8  0020               	movlb	0	; select bank0
  4902  06F9  00A4               	movwf	RTXSndPkt@src
  4903  06FA                     l471:	
  4904                           ;RTX.c: 82: unsigned char sta,numRxByte,numTxByte;
  4905                           ;RTX.c: 85: while(1)
  4906                           
  4907  06FA  0064               	clrwdt	;# 
  4908                           
  4909                           ;RTX.c: 88: CC1Read(0x35,(&(sta)),1);
  4910  06FB  3027               	movlw	RTXSndPkt@sta& (0+255)
  4911  06FC  0020               	movlb	0	; select bank0
  4912  06FD  00A3               	movwf	??_RTXSndPkt
  4913  06FE  0823               	movf	??_RTXSndPkt,w
  4914  06FF  00F7               	movwf	?_CC1Read
  4915  0700  01F8               	clrf	?_CC1Read+1
  4916  0701  0AF8               	incf	?_CC1Read+1,f
  4917  0702  3035               	movlw	53
  4918  0703  318D  2547  3186   	fcall	_CC1Read
  4919                           
  4920                           ;RTX.c: 89: sta&=0b00011111;
  4921  0706  301F               	movlw	31
  4922  0707  0020               	movlb	0	; select bank0
  4923  0708  00A3               	movwf	??_RTXSndPkt
  4924  0709  0823               	movf	??_RTXSndPkt,w
  4925  070A  05A7               	andwf	RTXSndPkt@sta,f
  4926                           
  4927                           ;RTX.c: 90: if(sta==0x0D)
  4928  070B  0827               	movf	RTXSndPkt@sta,w
  4929  070C  3A0D               	xorlw	13
  4930  070D  1903               	btfsc	3,2
  4931  070E  2F13               	goto	l4033
  4932                           
  4933                           ;RTX.c: 92: if(sta==0x01)
  4934                           
  4935                           ;RTX.c: 91: break;
  4936  070F  0827               	movf	RTXSndPkt@sta,w
  4937  0710  3A01               	xorlw	1
  4938  0711  1D03               	skipz
  4939  0712  2EFA               	goto	l471
  4940  0713                     l4033:	
  4941                           ;RTX.c: 93: break;
  4942                           
  4943                           
  4944                           ;RTX.c: 94: }
  4945                           ;RTX.c: 96: CC1Strobe(SIDLE);
  4946  0713  3036               	movlw	54
  4947  0714  318D  2503  3186   	fcall	_CC1Strobe
  4948                           
  4949                           ;RTX.c: 97: CC1Read(0x3B,(&(numRxByte)),1);
  4950  0717  3025               	movlw	RTXSndPkt@numRxByte& (0+255)
  4951  0718  0020               	movlb	0	; select bank0
  4952  0719  00A3               	movwf	??_RTXSndPkt
  4953  071A  0823               	movf	??_RTXSndPkt,w
  4954  071B  00F7               	movwf	?_CC1Read
  4955  071C  01F8               	clrf	?_CC1Read+1
  4956  071D  0AF8               	incf	?_CC1Read+1,f
  4957  071E  303B               	movlw	59
  4958  071F  318D  2547  3186   	fcall	_CC1Read
  4959                           
  4960                           ;RTX.c: 98: CC1Read(0x3A,(&(numTxByte)),1);
  4961  0722  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  4962  0723  0020               	movlb	0	; select bank0
  4963  0724  00A3               	movwf	??_RTXSndPkt
  4964  0725  0823               	movf	??_RTXSndPkt,w
  4965  0726  00F7               	movwf	?_CC1Read
  4966  0727  01F8               	clrf	?_CC1Read+1
  4967  0728  0AF8               	incf	?_CC1Read+1,f
  4968  0729  303A               	movlw	58
  4969  072A  318D  2547  3186   	fcall	_CC1Read
  4970                           
  4971                           ;RTX.c: 100: CC1Strobe(SFTX);
  4972  072D  303B               	movlw	59
  4973  072E  318D  2503  3186   	fcall	_CC1Strobe
  4974                           
  4975                           ;RTX.c: 101: CC1Read(0x3A,(&(numTxByte)),1);
  4976  0731  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  4977  0732  0020               	movlb	0	; select bank0
  4978  0733  00A3               	movwf	??_RTXSndPkt
  4979  0734  0823               	movf	??_RTXSndPkt,w
  4980  0735  00F7               	movwf	?_CC1Read
  4981  0736  01F8               	clrf	?_CC1Read+1
  4982  0737  0AF8               	incf	?_CC1Read+1,f
  4983  0738  303A               	movlw	58
  4984  0739  318D  2547  3186   	fcall	_CC1Read
  4985                           
  4986                           ;RTX.c: 103: CC1Write(0x3F,src,len);
  4987  073C  0020               	movlb	0	; select bank0
  4988  073D  0824               	movf	RTXSndPkt@src,w
  4989  073E  00F7               	movwf	?_CC1Write
  4990  073F  3000               	movlw	0
  4991  0740  00F8               	movwf	?_CC1Write+1
  4992  0741  0822               	movf	RTXSndPkt@len,w
  4993  0742  00A3               	movwf	??_RTXSndPkt
  4994  0743  0823               	movf	??_RTXSndPkt,w
  4995  0744  00F9               	movwf	?_CC1Write+2
  4996  0745  303F               	movlw	63
  4997  0746  318E  2659  3186   	fcall	_CC1Write
  4998                           
  4999                           ;RTX.c: 105: CC1Strobe(STX);
  5000  0749  3035               	movlw	53
  5001  074A  318D  2503         	fcall	_CC1Strobe
  5002  074C  0008               	return
  5003  074D                     __end_of_RTXSndPkt:	
  5004                           
  5005                           	psect	text22
  5006  0D47                     __ptext22:	
  5007 ;; *************** function _CC1Read *****************
  5008 ;; Defined at:
  5009 ;;		line 110 in file "CC1.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  addr            1    wreg     unsigned char 
  5012 ;;  dst             1    7[COMMON] PTR unsigned char 
  5013 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5014 ;;		 -> RTXSndPkt@sta(1), 
  5015 ;;  len             1    8[COMMON] unsigned char 
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  addr            1   10[COMMON] unsigned char 
  5018 ;;  cc1Addr         1   11[COMMON] unsigned char 
  5019 ;; Return value:  Size  Location     Type
  5020 ;;		None               void
  5021 ;; Registers used:
  5022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5028 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;Total ram usage:        5 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    3
  5035 ;; This function calls:
  5036 ;;		_SPIRead
  5037 ;;		_SPIWrite
  5038 ;; This function is called by:
  5039 ;;		_RTXSndPkt
  5040 ;;		_RTXRcvPkt
  5041 ;;		_RTXReadPkt
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function _CC1Read
  5047  0D47                     _CC1Read:	
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5051                           ;CC1Read@addr stored from wreg
  5052  0D47  00FA               	movwf	CC1Read@addr
  5053                           
  5054                           ;CC1.c: 111: unsigned char cc1Addr;
  5055                           ;CC1.c: 114: PORTAbits.RA5=0;
  5056  0D48  0020               	movlb	0	; select bank0
  5057  0D49  128C               	bcf	12,5	;volatile
  5058                           
  5059                           ;CC1.c: 117: cc1Addr=((addr&0b00111111)|0b11000000);
  5060  0D4A  087A               	movf	CC1Read@addr,w
  5061  0D4B  393F               	andlw	63
  5062  0D4C  38C0               	iorlw	192
  5063  0D4D  00F9               	movwf	??_CC1Read
  5064  0D4E  0879               	movf	??_CC1Read,w
  5065  0D4F  00FB               	movwf	CC1Read@cc1Addr
  5066                           
  5067                           ;CC1.c: 118: SPIWrite((&(cc1Addr)),1);
  5068  0D50  307B               	movlw	low CC1Read@cc1Addr
  5069  0D51  00F1               	movwf	?_SPIWrite
  5070  0D52  3000               	movlw	high CC1Read@cc1Addr
  5071  0D53  00F2               	movwf	?_SPIWrite+1
  5072  0D54  01F3               	clrf	?_SPIWrite+2
  5073  0D55  0AF3               	incf	?_SPIWrite+2,f
  5074  0D56  318D  2563  318D   	fcall	_SPIWrite
  5075                           
  5076                           ;CC1.c: 121: SPIRead(dst,len);
  5077  0D59  0878               	movf	CC1Read@len,w
  5078  0D5A  00F9               	movwf	??_CC1Read
  5079  0D5B  0879               	movf	??_CC1Read,w
  5080  0D5C  00F1               	movwf	?_SPIRead
  5081  0D5D  0877               	movf	CC1Read@dst,w
  5082  0D5E  318E  2618         	fcall	_SPIRead
  5083                           
  5084                           ;CC1.c: 124: PORTAbits.RA5=1;
  5085  0D60  0020               	movlb	0	; select bank0
  5086  0D61  168C               	bsf	12,5	;volatile
  5087  0D62  0008               	return
  5088  0D63                     __end_of_CC1Read:	
  5089                           
  5090                           	psect	text23
  5091  0E18                     __ptext23:	
  5092 ;; *************** function _SPIRead *****************
  5093 ;; Defined at:
  5094 ;;		line 26 in file "SPI.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;  dstPtr          1    wreg     PTR unsigned char 
  5097 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5098 ;;		 -> RTXSndPkt@sta(1), 
  5099 ;;  len             1    1[COMMON] unsigned char 
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  5102 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5103 ;;		 -> RTXSndPkt@sta(1), 
  5104 ;;  i               1    5[COMMON] unsigned char 
  5105 ;; Return value:  Size  Location     Type
  5106 ;;		None               void
  5107 ;; Registers used:
  5108 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5114 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;Total ram usage:        5 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    2
  5121 ;; This function calls:
  5122 ;;		Nothing
  5123 ;; This function is called by:
  5124 ;;		_CC1Read
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           
  5129                           ;psect for function _SPIRead
  5130  0E18                     _SPIRead:	
  5131                           
  5132                           ;incstack = 0
  5133                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5134                           ;SPIRead@dstPtr stored from wreg
  5135  0E18  00F4               	movwf	SPIRead@dstPtr
  5136                           
  5137                           ;SPI.c: 27: unsigned char i;
  5138                           ;SPI.c: 29: for(i=0;i<len;i++)
  5139  0E19  01F5               	clrf	SPIRead@i
  5140  0E1A                     l3511:	
  5141  0E1A  0871               	movf	SPIRead@len,w
  5142  0E1B  0275               	subwf	SPIRead@i,w
  5143  0E1C  1803               	btfsc	3,0
  5144  0E1D  0008               	return
  5145                           
  5146                           ;SPI.c: 30: {
  5147                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5148  0E1E  0020               	movlb	0	; select bank0
  5149  0E1F  1191               	bcf	17,3	;volatile
  5150                           
  5151                           ;SPI.c: 32: SSPBUF=0xFF;
  5152  0E20  30FF               	movlw	255
  5153  0E21  0024               	movlb	4	; select bank4
  5154  0E22  0091               	movwf	17	;volatile
  5155  0E23                     l65:	
  5156                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5157                           
  5158  0E23  0020               	movlb	0	; select bank0
  5159  0E24  1991               	btfsc	17,3	;volatile
  5160  0E25  2E28               	goto	l3507
  5161                           
  5162                           ;SPI.c: 34: _nop();
  5163  0E26  0000               	nop
  5164  0E27  2E23               	goto	l65
  5165  0E28                     l3507:	
  5166                           
  5167                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5168  0E28  0024               	movlb	4	; select bank4
  5169  0E29  0811               	movf	17,w	;volatile
  5170  0E2A  00F2               	movwf	??_SPIRead
  5171  0E2B  0875               	movf	SPIRead@i,w
  5172  0E2C  0774               	addwf	SPIRead@dstPtr,w
  5173  0E2D  00F3               	movwf	??_SPIRead+1
  5174  0E2E  0873               	movf	??_SPIRead+1,w
  5175  0E2F  0086               	movwf	6
  5176  0E30  0187               	clrf	7
  5177  0E31  0872               	movf	??_SPIRead,w
  5178  0E32  0081               	movwf	1
  5179  0E33  3001               	movlw	1
  5180  0E34  00F2               	movwf	??_SPIRead
  5181  0E35  0872               	movf	??_SPIRead,w
  5182  0E36  07F5               	addwf	SPIRead@i,f
  5183  0E37  2E1A               	goto	l3511
  5184  0E38                     __end_of_SPIRead:	
  5185                           
  5186                           	psect	text24
  5187  0E59                     __ptext24:	
  5188 ;; *************** function _CC1Write *****************
  5189 ;; Defined at:
  5190 ;;		line 128 in file "CC1.c"
  5191 ;; Parameters:    Size  Location     Type
  5192 ;;  addr            1    wreg     unsigned char 
  5193 ;;  src             2    7[COMMON] PTR unsigned char 
  5194 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
  5195 ;;  len             1    9[COMMON] unsigned char 
  5196 ;; Auto vars:     Size  Location     Type
  5197 ;;  addr            1    0[BANK0 ] unsigned char 
  5198 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;		None               void
  5201 ;; Registers used:
  5202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        6 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    3
  5215 ;; This function calls:
  5216 ;;		_SPIWrite
  5217 ;; This function is called by:
  5218 ;;		_CC1Init
  5219 ;;		_RTXSndPkt
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           
  5224                           ;psect for function _CC1Write
  5225  0E59                     _CC1Write:	
  5226                           
  5227                           ;incstack = 0
  5228                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5229                           ;CC1Write@addr stored from wreg
  5230  0E59  0020               	movlb	0	; select bank0
  5231  0E5A  00A0               	movwf	CC1Write@addr
  5232                           
  5233                           ;CC1.c: 129: unsigned char cc1Addr;
  5234                           ;CC1.c: 132: PORTAbits.RA5=0;
  5235  0E5B  128C               	bcf	12,5	;volatile
  5236                           
  5237                           ;CC1.c: 135: cc1Addr=((addr&0b00111111)|0b01000000);
  5238  0E5C  0820               	movf	CC1Write@addr,w
  5239  0E5D  393F               	andlw	63
  5240  0E5E  3840               	iorlw	64
  5241  0E5F  00FA               	movwf	??_CC1Write
  5242  0E60  087A               	movf	??_CC1Write,w
  5243  0E61  00A1               	movwf	CC1Write@cc1Addr
  5244                           
  5245                           ;CC1.c: 136: SPIWrite((&(cc1Addr)),1);
  5246  0E62  3021               	movlw	low CC1Write@cc1Addr
  5247  0E63  00F1               	movwf	?_SPIWrite
  5248  0E64  3000               	movlw	high CC1Write@cc1Addr
  5249  0E65  00F2               	movwf	?_SPIWrite+1
  5250  0E66  01F3               	clrf	?_SPIWrite+2
  5251  0E67  0AF3               	incf	?_SPIWrite+2,f
  5252  0E68  318D  2563  318E   	fcall	_SPIWrite
  5253                           
  5254                           ;CC1.c: 139: SPIWrite(src,len);
  5255  0E6B  0878               	movf	CC1Write@src+1,w
  5256  0E6C  01F2               	clrf	?_SPIWrite+1
  5257  0E6D  07F2               	addwf	?_SPIWrite+1,f
  5258  0E6E  0877               	movf	CC1Write@src,w
  5259  0E6F  01F1               	clrf	?_SPIWrite
  5260  0E70  07F1               	addwf	?_SPIWrite,f
  5261  0E71  0879               	movf	CC1Write@len,w
  5262  0E72  00FA               	movwf	??_CC1Write
  5263  0E73  087A               	movf	??_CC1Write,w
  5264  0E74  00F3               	movwf	?_SPIWrite+2
  5265  0E75  318D  2563         	fcall	_SPIWrite
  5266                           
  5267                           ;CC1.c: 142: PORTAbits.RA5=1;
  5268  0E77  0020               	movlb	0	; select bank0
  5269  0E78  168C               	bsf	12,5	;volatile
  5270  0E79  0008               	return
  5271  0E7A                     __end_of_CC1Write:	
  5272                           
  5273                           	psect	text25
  5274  0D03                     __ptext25:	
  5275 ;; *************** function _CC1Strobe *****************
  5276 ;; Defined at:
  5277 ;;		line 95 in file "CC1.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  e_stb           1    wreg     enum E1825
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  e_stb           1    8[COMMON] enum E1825
  5282 ;;  cc1Stb          1    9[COMMON] unsigned char 
  5283 ;;  i               1    0        unsigned char 
  5284 ;; Return value:  Size  Location     Type
  5285 ;;		None               void
  5286 ;; Registers used:
  5287 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5288 ;; Tracked objects:
  5289 ;;		On entry : 0/0
  5290 ;;		On exit  : 0/0
  5291 ;;		Unchanged: 0/0
  5292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5296 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;Total ram usage:        3 bytes
  5298 ;; Hardware stack levels used:    1
  5299 ;; Hardware stack levels required when called:    3
  5300 ;; This function calls:
  5301 ;;		_SPIWrite
  5302 ;; This function is called by:
  5303 ;;		_CC1Init
  5304 ;;		_CC1Sleep
  5305 ;;		_RTXInit
  5306 ;;		_RTXSndPkt
  5307 ;;		_RTXReadPkt
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _CC1Strobe
  5313  0D03                     _CC1Strobe:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5317                           ;CC1Strobe@e_stb stored from wreg
  5318  0D03  00F8               	movwf	CC1Strobe@e_stb
  5319                           
  5320                           ;CC1.c: 96: unsigned char cc1Stb,i;
  5321                           ;CC1.c: 99: PORTAbits.RA5=0;
  5322  0D04  0020               	movlb	0	; select bank0
  5323  0D05  128C               	bcf	12,5	;volatile
  5324                           
  5325                           ;CC1.c: 102: cc1Stb=((e_stb&0b00111111)|0b10000000);
  5326  0D06  0878               	movf	CC1Strobe@e_stb,w
  5327  0D07  393F               	andlw	63
  5328  0D08  3880               	iorlw	128
  5329  0D09  00F7               	movwf	??_CC1Strobe
  5330  0D0A  0877               	movf	??_CC1Strobe,w
  5331  0D0B  00F9               	movwf	CC1Strobe@cc1Stb
  5332                           
  5333                           ;CC1.c: 103: SPIWrite((&(cc1Stb)),1);
  5334  0D0C  3079               	movlw	low CC1Strobe@cc1Stb
  5335  0D0D  00F1               	movwf	?_SPIWrite
  5336  0D0E  3000               	movlw	high CC1Strobe@cc1Stb
  5337  0D0F  00F2               	movwf	?_SPIWrite+1
  5338  0D10  01F3               	clrf	?_SPIWrite+2
  5339  0D11  0AF3               	incf	?_SPIWrite+2,f
  5340  0D12  318D  2563         	fcall	_SPIWrite
  5341                           
  5342                           ;CC1.c: 106: PORTAbits.RA5=1;
  5343  0D14  0020               	movlb	0	; select bank0
  5344  0D15  168C               	bsf	12,5	;volatile
  5345  0D16  0008               	return
  5346  0D17                     __end_of_CC1Strobe:	
  5347                           
  5348                           	psect	text26
  5349  0D63                     __ptext26:	
  5350 ;; *************** function _SPIWrite *****************
  5351 ;; Defined at:
  5352 ;;		line 40 in file "SPI.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  5355 ;;		 -> pktTx(9), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  5356 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  5357 ;;  len             1    3[COMMON] unsigned char 
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  i               1    6[COMMON] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        6 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    2
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_CC1Strobe
  5380 ;;		_CC1Read
  5381 ;;		_CC1Write
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           
  5386                           ;psect for function _SPIWrite
  5387  0D63                     _SPIWrite:	
  5388                           
  5389                           ;SPI.c: 41: unsigned char i;
  5390                           ;SPI.c: 43: for(i=0;i<len;i++)
  5391                           
  5392                           ;incstack = 0
  5393                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  5394  0D63  01F6               	clrf	SPIWrite@i
  5395  0D64                     l3519:	
  5396  0D64  0873               	movf	SPIWrite@len,w
  5397  0D65  0276               	subwf	SPIWrite@i,w
  5398  0D66  1803               	btfsc	3,0
  5399  0D67  0008               	return
  5400                           
  5401                           ;SPI.c: 44: {
  5402                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  5403  0D68  0020               	movlb	0	; select bank0
  5404  0D69  1191               	bcf	17,3	;volatile
  5405                           
  5406                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  5407  0D6A  0876               	movf	SPIWrite@i,w
  5408  0D6B  00F4               	movwf	??_SPIWrite
  5409  0D6C  01F5               	clrf	??_SPIWrite+1
  5410  0D6D  0874               	movf	??_SPIWrite,w
  5411  0D6E  0771               	addwf	SPIWrite@srcPtr,w
  5412  0D6F  0086               	movwf	6
  5413  0D70  0875               	movf	??_SPIWrite+1,w
  5414  0D71  3D72               	addwfc	SPIWrite@srcPtr+1,w
  5415  0D72  0087               	movwf	7
  5416  0D73  0801               	movf	1,w
  5417  0D74  0024               	movlb	4	; select bank4
  5418  0D75  0091               	movwf	17	;volatile
  5419  0D76                     l74:	
  5420                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  5421                           
  5422  0D76  0020               	movlb	0	; select bank0
  5423  0D77  1991               	btfsc	17,3	;volatile
  5424  0D78  2D7B               	goto	l3517
  5425                           
  5426                           ;SPI.c: 48: _nop();
  5427  0D79  0000               	nop
  5428  0D7A  2D76               	goto	l74
  5429  0D7B                     l3517:	
  5430  0D7B  3001               	movlw	1
  5431  0D7C  00F4               	movwf	??_SPIWrite
  5432  0D7D  0874               	movf	??_SPIWrite,w
  5433  0D7E  07F6               	addwf	SPIWrite@i,f
  5434  0D7F  2D64               	goto	l3519
  5435  0D80                     __end_of_SPIWrite:	
  5436                           
  5437                           	psect	text27
  5438  0DBC                     __ptext27:	
  5439 ;; *************** function _LEDFastFlash *****************
  5440 ;; Defined at:
  5441 ;;		line 39 in file "LED.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  num             1    wreg     unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  num             1    8[COMMON] unsigned char 
  5446 ;;  i               1    9[COMMON] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, pclath, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;Total ram usage:        3 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    3
  5463 ;; This function calls:
  5464 ;;		_DLYDelay_ms
  5465 ;; This function is called by:
  5466 ;;		_RTXSendData
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _LEDFastFlash
  5472  0DBC                     _LEDFastFlash:	
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  5476                           ;LEDFastFlash@num stored from wreg
  5477  0DBC  00F8               	movwf	LEDFastFlash@num
  5478                           
  5479                           ;LED.c: 40: unsigned char i;
  5480                           ;LED.c: 42: for(i=0;i<num;i++)
  5481  0DBD  01F9               	clrf	LEDFastFlash@i
  5482  0DBE                     l3665:	
  5483  0DBE  0878               	movf	LEDFastFlash@num,w
  5484  0DBF  0279               	subwf	LEDFastFlash@i,w
  5485  0DC0  1803               	btfsc	3,0
  5486  0DC1  0008               	return
  5487  0DC2  0064               	clrwdt	;# 
  5488                           
  5489                           ;LED.c: 45: PORTCbits.RC7=0;
  5490  0DC3  0020               	movlb	0	; select bank0
  5491  0DC4  138E               	bcf	14,7	;volatile
  5492                           
  5493                           ;LED.c: 46: DLYDelay_ms(5);
  5494  0DC5  3005               	movlw	5
  5495  0DC6  00F1               	movwf	?_DLYDelay_ms
  5496  0DC7  3000               	movlw	0
  5497  0DC8  00F2               	movwf	?_DLYDelay_ms+1
  5498  0DC9  318D  252E  318D   	fcall	_DLYDelay_ms
  5499                           
  5500                           ;LED.c: 47: PORTCbits.RC7=1;
  5501  0DCC  0020               	movlb	0	; select bank0
  5502  0DCD  178E               	bsf	14,7	;volatile
  5503                           
  5504                           ;LED.c: 48: DLYDelay_ms(5);
  5505  0DCE  3005               	movlw	5
  5506  0DCF  00F1               	movwf	?_DLYDelay_ms
  5507  0DD0  3000               	movlw	0
  5508  0DD1  00F2               	movwf	?_DLYDelay_ms+1
  5509  0DD2  318D  252E  318D   	fcall	_DLYDelay_ms
  5510  0DD5  3001               	movlw	1
  5511  0DD6  00F7               	movwf	??_LEDFastFlash
  5512  0DD7  0877               	movf	??_LEDFastFlash,w
  5513  0DD8  07F9               	addwf	LEDFastFlash@i,f
  5514  0DD9  2DBE               	goto	l3665
  5515  0DDA                     __end_of_LEDFastFlash:	
  5516                           
  5517                           	psect	text28
  5518  0D2E                     __ptext28:	
  5519 ;; *************** function _DLYDelay_ms *****************
  5520 ;; Defined at:
  5521 ;;		line 18 in file "DLY.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;  val             2    1[COMMON] unsigned short 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;  i               2    5[COMMON] unsigned short 
  5526 ;; Return value:  Size  Location     Type
  5527 ;;		None               void
  5528 ;; Registers used:
  5529 ;;		wreg, status,2
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5535 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;Total ram usage:        6 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:    2
  5542 ;; This function calls:
  5543 ;;		Nothing
  5544 ;; This function is called by:
  5545 ;;		_CC1Init
  5546 ;;		_LEDNormalFlash
  5547 ;;		_LEDFastFlash
  5548 ;;		_LEDVFastFlash
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           
  5553                           ;psect for function _DLYDelay_ms
  5554  0D2E                     _DLYDelay_ms:	
  5555                           
  5556                           ;DLY.c: 19: unsigned short i;
  5557                           ;DLY.c: 21: for(i=0;i<val;i++)
  5558                           
  5559                           ;incstack = 0
  5560                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  5561  0D2E  01F5               	clrf	DLYDelay_ms@i
  5562  0D2F  01F6               	clrf	DLYDelay_ms@i+1
  5563  0D30                     l143:	
  5564  0D30  0872               	movf	DLYDelay_ms@val+1,w
  5565  0D31  0276               	subwf	DLYDelay_ms@i+1,w
  5566  0D32  1D03               	skipz
  5567  0D33  2D36               	goto	u2895
  5568  0D34  0871               	movf	DLYDelay_ms@val,w
  5569  0D35  0275               	subwf	DLYDelay_ms@i,w
  5570  0D36                     u2895:	
  5571  0D36  1803               	btfsc	3,0
  5572  0D37  0008               	return
  5573  0D38  0064               	clrwdt	;# 
  5574                           
  5575                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  5576  0D39  3003               	movlw	3
  5577  0D3A  00F4               	movwf	??_DLYDelay_ms+1
  5578  0D3B  3097               	movlw	151
  5579  0D3C  00F3               	movwf	??_DLYDelay_ms
  5580  0D3D                     u4207:	
  5581  0D3D  0BF3               	decfsz	??_DLYDelay_ms,f
  5582  0D3E  2D3D               	goto	u4207
  5583  0D3F  0BF4               	decfsz	??_DLYDelay_ms+1,f
  5584  0D40  2D3D               	goto	u4207
  5585  0D41  2D42               	nop2
  5586  0D42  3001               	movlw	1
  5587  0D43  07F5               	addwf	DLYDelay_ms@i,f
  5588  0D44  3000               	movlw	0
  5589  0D45  3DF6               	addwfc	DLYDelay_ms@i+1,f
  5590  0D46  2D30               	goto	l143
  5591  0D47                     __end_of_DLYDelay_ms:	
  5592                           
  5593                           	psect	text29
  5594  07E8                     __ptext29:	
  5595 ;; *************** function _PGMInit *****************
  5596 ;; Defined at:
  5597 ;;		line 24 in file "PGM.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  state           1    wreg     unsigned char 
  5600 ;; Auto vars:     Size  Location     Type
  5601 ;;  state           1   70[BANK0 ] unsigned char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;		None               void
  5604 ;; Registers used:
  5605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;Total ram usage:        1 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    6
  5618 ;; This function calls:
  5619 ;;		_PGMReadNvm
  5620 ;;		_PGMCheckNvm
  5621 ;; This function is called by:
  5622 ;;		_main
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _PGMInit
  5628  07E8                     _PGMInit:	
  5629                           
  5630                           ;incstack = 0
  5631                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5632                           ;PGMInit@state stored from wreg
  5633  07E8  0020               	movlb	0	; select bank0
  5634  07E9  00E6               	movwf	PGMInit@state
  5635                           
  5636                           ;PGM.c: 25: switch(state)
  5637  07EA  2FF6               	goto	l3869
  5638  07EB                     l3859:	
  5639                           ;PGM.c: 26: {
  5640                           ;PGM.c: 27: case 0:
  5641                           
  5642                           
  5643                           ;PGM.c: 29: T1CON=0b00000001;
  5644  07EB  3001               	movlw	1
  5645  07EC  0098               	movwf	24	;volatile
  5646                           
  5647                           ;PGM.c: 30: break;
  5648  07ED  0008               	return
  5649  07EE                     l3861:	
  5650                           ;PGM.c: 31: case 1:
  5651                           
  5652                           
  5653                           ;PGM.c: 33: tmrPgm=0;
  5654  07EE  01EC               	clrf	_tmrPgm
  5655                           
  5656                           ;PGM.c: 34: pgm_flg.val=0;
  5657  07EF  01EA               	clrf	_pgm_flg
  5658                           
  5659                           ;PGM.c: 35: PGMReadNvm();
  5660  07F0  318C  24CA  3187   	fcall	_PGMReadNvm
  5661                           
  5662                           ;PGM.c: 36: PGMCheckNvm();
  5663  07F3  318C  2482         	fcall	_PGMCheckNvm
  5664                           
  5665                           ;PGM.c: 41: }
  5666                           
  5667                           ;PGM.c: 37: break;
  5668  07F5  0008               	return
  5669  07F6                     l3869:	
  5670  07F6  0020               	movlb	0	; select bank0
  5671  07F7  0866               	movf	PGMInit@state,w
  5672                           
  5673                           ; Switch size 1, requested type "space"
  5674                           ; Number of cases is 2, Range of values is 0 to 1
  5675                           ; switch strategies available:
  5676                           ; Name         Instructions Cycles
  5677                           ; simple_byte            7     4 (average)
  5678                           ; direct_byte           10     6 (fixed)
  5679                           ; jumptable            260     6 (fixed)
  5680                           ;	Chosen strategy is simple_byte
  5681  07F8  3A00               	xorlw	0	; case 0
  5682  07F9  1903               	skipnz
  5683  07FA  2FEB               	goto	l3859
  5684  07FB  3A01               	xorlw	1	; case 1
  5685  07FC  1903               	skipnz
  5686  07FD  2FEE               	goto	l3861
  5687  07FE  2FFF               	goto	l372
  5688  07FF                     l372:	
  5689  07FF  0008               	return
  5690  0800                     __end_of_PGMInit:	
  5691                           
  5692                           	psect	text30
  5693  0C82                     __ptext30:	
  5694 ;; *************** function _PGMCheckNvm *****************
  5695 ;; Defined at:
  5696 ;;		line 66 in file "PGM.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;		None
  5701 ;; Return value:  Size  Location     Type
  5702 ;;		None               void
  5703 ;; Registers used:
  5704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;Total ram usage:        0 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    5
  5717 ;; This function calls:
  5718 ;;		_PGMNvmReset
  5719 ;; This function is called by:
  5720 ;;		_PGMInit
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           
  5725                           ;psect for function _PGMCheckNvm
  5726  0C82                     _PGMCheckNvm:	
  5727                           
  5728                           ;PGM.c: 67: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  5729                           
  5730                           ;incstack = 0
  5731                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5732  0C82  0021               	movlb	1	; select bank1
  5733  0C83  084B               	movf	_pgm_cfg^(0+128),w
  5734  0C84  3AC5               	xorlw	197
  5735  0C85  1D03               	skipz
  5736  0C86  2C8B               	goto	l3877
  5737  0C87  084C               	movf	(_pgm_cfg^(0+128)+1),w
  5738  0C88  3A5C               	xorlw	92
  5739  0C89  1903               	skipnz
  5740  0C8A  0008               	return
  5741  0C8B                     l3877:	
  5742                           
  5743                           ;PGM.c: 68: PGMNvmReset();
  5744  0C8B  318C  24F0         	fcall	_PGMNvmReset
  5745  0C8D  0008               	return
  5746  0C8E                     __end_of_PGMCheckNvm:	
  5747                           
  5748                           	psect	text31
  5749  0CF0                     __ptext31:	
  5750 ;; *************** function _PGMNvmReset *****************
  5751 ;; Defined at:
  5752 ;;		line 72 in file "PGM.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;		None
  5757 ;; Return value:  Size  Location     Type
  5758 ;;		None               void
  5759 ;; Registers used:
  5760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;Total ram usage:        1 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    4
  5773 ;; This function calls:
  5774 ;;		_PGMWriteNvm
  5775 ;; This function is called by:
  5776 ;;		_PGMCheckNvm
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           
  5781                           ;psect for function _PGMNvmReset
  5782  0CF0                     _PGMNvmReset:	
  5783                           
  5784                           ;PGM.c: 74: pgm_cfg.valChk1=0xC5;
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5788  0CF0  30C5               	movlw	197
  5789  0CF1  0020               	movlb	0	; select bank0
  5790  0CF2  00E5               	movwf	??_PGMNvmReset
  5791  0CF3  0865               	movf	??_PGMNvmReset,w
  5792  0CF4  0021               	movlb	1	; select bank1
  5793  0CF5  00CB               	movwf	_pgm_cfg^(0+128)
  5794                           
  5795                           ;PGM.c: 75: pgm_cfg.valChk2=0x5C;
  5796  0CF6  305C               	movlw	92
  5797  0CF7  0020               	movlb	0	; select bank0
  5798  0CF8  00E5               	movwf	??_PGMNvmReset
  5799  0CF9  0865               	movf	??_PGMNvmReset,w
  5800  0CFA  0021               	movlb	1	; select bank1
  5801  0CFB  00CC               	movwf	(_pgm_cfg^(0+128)+1)
  5802                           
  5803                           ;PGM.c: 76: pgm_cfg.menu=0x00;
  5804  0CFC  01CD               	clrf	(_pgm_cfg^(0+128)+2)
  5805                           
  5806                           ;PGM.c: 77: pgm_cfg.sensId=0x00;
  5807  0CFD  01CE               	clrf	(_pgm_cfg^(0+128)+3)
  5808                           
  5809                           ;PGM.c: 78: pgm_cfg.baseId=0x00;
  5810  0CFE  01CF               	clrf	(_pgm_cfg^(0+128)+4)
  5811                           
  5812                           ;PGM.c: 80: PGMWriteNvm();
  5813  0CFF  318C  24DD         	fcall	_PGMWriteNvm
  5814  0D01  0001               	reset	;# 
  5815  0D02  0008               	return
  5816  0D03                     __end_of_PGMNvmReset:	
  5817                           
  5818                           	psect	text32
  5819  0CDD                     __ptext32:	
  5820 ;; *************** function _PGMWriteNvm *****************
  5821 ;; Defined at:
  5822 ;;		line 61 in file "PGM.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;		None
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;		None               void
  5829 ;; Registers used:
  5830 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;Total ram usage:        4 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    3
  5843 ;; This function calls:
  5844 ;;		_NVMWrite
  5845 ;; This function is called by:
  5846 ;;		_PGMNvmReset
  5847 ;;		_PGMSelLong
  5848 ;;		_RTXReadPkt
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           
  5853                           ;psect for function _PGMWriteNvm
  5854  0CDD                     _PGMWriteNvm:	
  5855                           
  5856                           ;PGM.c: 62: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  5857                           
  5858                           ;incstack = 0
  5859                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5860  0CDD  3001               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  5861  0CDE  00F8               	movwf	??_PGMWriteNvm
  5862  0CDF  3088               	movlw	(high __stringtab)| (0+128)
  5863  0CE0  00F9               	movwf	??_PGMWriteNvm+1
  5864  0CE1  0878               	movf	??_PGMWriteNvm,w
  5865  0CE2  00F1               	movwf	?_NVMWrite
  5866  0CE3  0879               	movf	??_PGMWriteNvm+1,w
  5867  0CE4  00F2               	movwf	?_NVMWrite+1
  5868  0CE5  30CB               	movlw	_pgm_cfg& (0+255)
  5869  0CE6  00FA               	movwf	??_PGMWriteNvm+2
  5870  0CE7  087A               	movf	??_PGMWriteNvm+2,w
  5871  0CE8  00F3               	movwf	?_NVMWrite+2
  5872  0CE9  3005               	movlw	5
  5873  0CEA  00FB               	movwf	??_PGMWriteNvm+3
  5874  0CEB  087B               	movf	??_PGMWriteNvm+3,w
  5875  0CEC  00F4               	movwf	?_NVMWrite+3
  5876  0CED  3182  2281         	fcall	_NVMWrite
  5877  0CEF  0008               	return
  5878  0CF0                     __end_of_PGMWriteNvm:	
  5879                           
  5880                           	psect	text33
  5881  0281                     __ptext33:	
  5882 ;; *************** function _NVMWrite *****************
  5883 ;; Defined at:
  5884 ;;		line 39 in file "NVM.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  addr            2    1[COMMON] unsigned short 
  5887 ;;  source          1    3[COMMON] PTR unsigned char 
  5888 ;;		 -> pgm_cfg(5), 
  5889 ;;  len             1    4[COMMON] unsigned char 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  5892 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  5893 ;;  j               1   68[BANK0 ] unsigned char 
  5894 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  5895 ;;  i               1   66[BANK0 ] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;		None               void
  5898 ;; Registers used:
  5899 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5905 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;Total ram usage:       76 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    2
  5912 ;; This function calls:
  5913 ;;		Nothing
  5914 ;; This function is called by:
  5915 ;;		_PGMWriteNvm
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           
  5920                           ;psect for function _NVMWrite
  5921  0281                     _NVMWrite:	
  5922                           
  5923                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  5924                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  5925                           ;NVM.c: 43: INTCONbits.GIE=0;
  5926                           
  5927                           ;incstack = 0
  5928                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  5929  0281  138B               	bcf	11,7	;volatile
  5930                           
  5931                           ;NVM.c: 44: PMCON1bits.WREN=1;
  5932  0282  0023               	movlb	3	; select bank3
  5933  0283  1515               	bsf	21,2	;volatile
  5934                           
  5935                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  5936  0284  1315               	bcf	21,6	;volatile
  5937                           
  5938                           ;NVM.c: 48: i=0;
  5939  0285  0020               	movlb	0	; select bank0
  5940  0286  01E2               	clrf	NVMWrite@i
  5941                           
  5942                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  5943  0287  30E0               	movlw	224
  5944  0288  0571               	andwf	NVMWrite@addr,w
  5945  0289  00E0               	movwf	NVMWrite@rowAddr
  5946  028A  30FF               	movlw	255
  5947  028B  0572               	andwf	NVMWrite@addr+1,w
  5948  028C  00E1               	movwf	NVMWrite@rowAddr+1
  5949                           
  5950                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  5951  028D  0871               	movf	NVMWrite@addr,w
  5952  028E  391F               	andlw	31
  5953  028F  00F5               	movwf	??_NVMWrite
  5954  0290  0875               	movf	??_NVMWrite,w
  5955  0291  00E3               	movwf	NVMWrite@latchAddr
  5956  0292                     l243:	
  5957                           ;NVM.c: 52: while(i<len)
  5958                           
  5959  0292  0874               	movf	NVMWrite@len,w
  5960  0293  0262               	subwf	NVMWrite@i,w
  5961  0294  1803               	btfsc	3,0
  5962  0295  2B3B               	goto	l263
  5963  0296  0064               	clrwdt	;# 
  5964                           
  5965                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  5966  0297  0020               	movlb	0	; select bank0
  5967  0298  01E4               	clrf	NVMWrite@j
  5968  0299  3020               	movlw	32
  5969  029A  0264               	subwf	NVMWrite@j,w
  5970  029B  1803               	btfsc	3,0
  5971  029C  2AC1               	goto	l246
  5972  029D                     l245:	
  5973  029D  0064               	clrwdt	;# 
  5974                           
  5975                           ;NVM.c: 60: PMADR=(rowAddr+j);
  5976  029E  0020               	movlb	0	; select bank0
  5977  029F  0864               	movf	NVMWrite@j,w
  5978  02A0  0760               	addwf	NVMWrite@rowAddr,w
  5979  02A1  00F5               	movwf	??_NVMWrite
  5980  02A2  0861               	movf	NVMWrite@rowAddr+1,w
  5981  02A3  1803               	skipnc
  5982  02A4  0A61               	incf	NVMWrite@rowAddr+1,w
  5983  02A5  00F6               	movwf	??_NVMWrite+1
  5984  02A6  0875               	movf	??_NVMWrite,w
  5985  02A7  0023               	movlb	3	; select bank3
  5986  02A8  0091               	movwf	17	;volatile
  5987  02A9  0876               	movf	??_NVMWrite+1,w
  5988  02AA  0092               	movwf	18	;volatile
  5989                           
  5990                           ;NVM.c: 61: PMCON1bits.RD=1;
  5991  02AB  1415               	bsf	21,0	;volatile
  5992  02AC                     l247:	
  5993                           ;NVM.c: 62: while(PMCON1bits.RD);
  5994                           
  5995  02AC  1815               	btfsc	21,0	;volatile
  5996  02AD  2AAC               	goto	l247
  5997                           
  5998                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  5999  02AE  0020               	movlb	0	; select bank0
  6000  02AF  3564               	lslf	NVMWrite@j,w
  6001  02B0  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  6002  02B1  0086               	movwf	6
  6003  02B2  0187               	clrf	7
  6004  02B3  0023               	movlb	3	; select bank3
  6005  02B4  0813               	movf	19,w	;volatile
  6006  02B5  3FC0               	movwi [0]fsr1
  6007  02B6  0814               	movf	20,w	;volatile
  6008  02B7  3FC1               	movwi [1]fsr1
  6009  02B8  3001               	movlw	1
  6010  02B9  00F5               	movwf	??_NVMWrite
  6011  02BA  0875               	movf	??_NVMWrite,w
  6012  02BB  0020               	movlb	0	; select bank0
  6013  02BC  07E4               	addwf	NVMWrite@j,f
  6014  02BD  3020               	movlw	32
  6015  02BE  0264               	subwf	NVMWrite@j,w
  6016  02BF  1C03               	skipc
  6017  02C0  2A9D               	goto	l245
  6018  02C1                     l246:	
  6019                           
  6020                           ;NVM.c: 64: }
  6021                           ;NVM.c: 67: PMCON1bits.FREE=1;
  6022  02C1  0023               	movlb	3	; select bank3
  6023  02C2  1615               	bsf	21,4	;volatile
  6024                           
  6025                           ;NVM.c: 68: PMADR=rowAddr;
  6026  02C3  0020               	movlb	0	; select bank0
  6027  02C4  0861               	movf	NVMWrite@rowAddr+1,w
  6028  02C5  0023               	movlb	3	; select bank3
  6029  02C6  0192               	clrf	18	;volatile
  6030  02C7  0792               	addwf	18,f	;volatile
  6031  02C8  0020               	movlb	0	; select bank0
  6032  02C9  0860               	movf	NVMWrite@rowAddr,w
  6033  02CA  0023               	movlb	3	; select bank3
  6034  02CB  0191               	clrf	17	;volatile
  6035  02CC  0791               	addwf	17,f	;volatile
  6036                           
  6037                           ;NVM.c: 69: PMCON2=0x55;
  6038  02CD  3055               	movlw	85
  6039  02CE  0096               	movwf	22	;volatile
  6040                           
  6041                           ;NVM.c: 70: PMCON2=0xAA;
  6042  02CF  30AA               	movlw	170
  6043  02D0  0096               	movwf	22	;volatile
  6044                           
  6045                           ;NVM.c: 71: PMCON1bits.WR=1;
  6046  02D1  1495               	bsf	21,1	;volatile
  6047  02D2                     l250:	
  6048                           ;NVM.c: 72: while(PMCON1bits.WR);
  6049                           
  6050  02D2  1895               	btfsc	21,1	;volatile
  6051  02D3  2AD2               	goto	l250
  6052                           
  6053                           ;NVM.c: 73: _nop();
  6054  02D4  0000               	nop
  6055                           
  6056                           ;NVM.c: 74: _nop();
  6057  02D5  0000               	nop
  6058                           
  6059                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  6060  02D6  3020               	movlw	32
  6061  02D7  0020               	movlb	0	; select bank0
  6062  02D8  0263               	subwf	NVMWrite@latchAddr,w
  6063  02D9  1803               	btfsc	3,0
  6064  02DA  2AFE               	goto	l3745
  6065  02DB                     l253:	
  6066  02DB  0064               	clrwdt	;# 
  6067                           
  6068                           ;NVM.c: 81: if(i>=len)
  6069  02DC  0874               	movf	NVMWrite@len,w
  6070  02DD  0020               	movlb	0	; select bank0
  6071  02DE  0262               	subwf	NVMWrite@i,w
  6072  02DF  1803               	btfsc	3,0
  6073  02E0  2AFE               	goto	l3745
  6074                           
  6075                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  6076                           
  6077                           ;NVM.c: 82: break;
  6078  02E1  0862               	movf	NVMWrite@i,w
  6079  02E2  0773               	addwf	NVMWrite@source,w
  6080  02E3  00F5               	movwf	??_NVMWrite
  6081  02E4  0875               	movf	??_NVMWrite,w
  6082  02E5  0086               	movwf	6
  6083  02E6  0187               	clrf	7
  6084  02E7  0801               	movf	1,w
  6085  02E8  00F6               	movwf	??_NVMWrite+1
  6086  02E9  01F7               	clrf	??_NVMWrite+2
  6087  02EA  3563               	lslf	NVMWrite@latchAddr,w
  6088  02EB  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  6089  02EC  0086               	movwf	6
  6090  02ED  0187               	clrf	7
  6091  02EE  0876               	movf	??_NVMWrite+1,w
  6092  02EF  3FC0               	movwi [0]fsr1
  6093  02F0  0877               	movf	??_NVMWrite+2,w
  6094  02F1  3FC1               	movwi [1]fsr1
  6095                           
  6096                           ;NVM.c: 85: i++;
  6097  02F2  3001               	movlw	1
  6098  02F3  00F5               	movwf	??_NVMWrite
  6099  02F4  0875               	movf	??_NVMWrite,w
  6100  02F5  07E2               	addwf	NVMWrite@i,f
  6101  02F6  3001               	movlw	1
  6102  02F7  00F5               	movwf	??_NVMWrite
  6103  02F8  0875               	movf	??_NVMWrite,w
  6104  02F9  07E3               	addwf	NVMWrite@latchAddr,f
  6105  02FA  3020               	movlw	32
  6106  02FB  0263               	subwf	NVMWrite@latchAddr,w
  6107  02FC  1C03               	skipc
  6108  02FD  2ADB               	goto	l253
  6109  02FE                     l3745:	
  6110                           
  6111                           ;NVM.c: 86: }
  6112                           ;NVM.c: 88: latchAddr=0;
  6113  02FE  01E3               	clrf	NVMWrite@latchAddr
  6114                           
  6115                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  6116  02FF  01E4               	clrf	NVMWrite@j
  6117  0300  3020               	movlw	32
  6118  0301  0264               	subwf	NVMWrite@j,w
  6119  0302  1803               	btfsc	3,0
  6120  0303  2B36               	goto	l3767
  6121  0304                     l3751:	
  6122                           
  6123                           ;NVM.c: 92: {
  6124                           ;NVM.c: 94: PMADR=(rowAddr+j);
  6125  0304  0864               	movf	NVMWrite@j,w
  6126  0305  0760               	addwf	NVMWrite@rowAddr,w
  6127  0306  00F5               	movwf	??_NVMWrite
  6128  0307  0861               	movf	NVMWrite@rowAddr+1,w
  6129  0308  1803               	skipnc
  6130  0309  0A61               	incf	NVMWrite@rowAddr+1,w
  6131  030A  00F6               	movwf	??_NVMWrite+1
  6132  030B  0875               	movf	??_NVMWrite,w
  6133  030C  0023               	movlb	3	; select bank3
  6134  030D  0091               	movwf	17	;volatile
  6135  030E  0876               	movf	??_NVMWrite+1,w
  6136  030F  0092               	movwf	18	;volatile
  6137                           
  6138                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  6139  0310  0020               	movlb	0	; select bank0
  6140  0311  3564               	lslf	NVMWrite@j,w
  6141  0312  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  6142  0313  0086               	movwf	6
  6143  0314  0187               	clrf	7
  6144  0315  3F40               	moviw [0]fsr1
  6145  0316  0023               	movlb	3	; select bank3
  6146  0317  0093               	movwf	19	;volatile
  6147  0318  3F41               	moviw [1]fsr1
  6148  0319  0094               	movwf	20	;volatile
  6149                           
  6150                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  6151  031A  0020               	movlb	0	; select bank0
  6152  031B  0864               	movf	NVMWrite@j,w
  6153  031C  3A1F               	xorlw	31
  6154  031D  1D03               	skipz
  6155  031E  2B22               	goto	l258
  6156                           
  6157                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  6158  031F  0023               	movlb	3	; select bank3
  6159  0320  1295               	bcf	21,5	;volatile
  6160  0321  2B24               	goto	l3759
  6161  0322                     l258:	
  6162                           
  6163                           ;NVM.c: 99: else
  6164                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  6165  0322  0023               	movlb	3	; select bank3
  6166  0323  1695               	bsf	21,5	;volatile
  6167  0324                     l3759:	
  6168                           
  6169                           ;NVM.c: 101: PMCON2=0x55;
  6170  0324  3055               	movlw	85
  6171  0325  0096               	movwf	22	;volatile
  6172                           
  6173                           ;NVM.c: 102: PMCON2=0xAA;
  6174  0326  30AA               	movlw	170
  6175  0327  0096               	movwf	22	;volatile
  6176                           
  6177                           ;NVM.c: 103: PMCON1bits.WR=1;
  6178  0328  1495               	bsf	21,1	;volatile
  6179  0329                     l260:	
  6180                           ;NVM.c: 104: while(PMCON1bits.WR);
  6181                           
  6182  0329  1895               	btfsc	21,1	;volatile
  6183  032A  2B29               	goto	l260
  6184                           
  6185                           ;NVM.c: 105: _nop();
  6186  032B  0000               	nop
  6187                           
  6188                           ;NVM.c: 106: _nop();
  6189  032C  0000               	nop
  6190  032D  3001               	movlw	1
  6191  032E  00F5               	movwf	??_NVMWrite
  6192  032F  0875               	movf	??_NVMWrite,w
  6193  0330  0020               	movlb	0	; select bank0
  6194  0331  07E4               	addwf	NVMWrite@j,f
  6195  0332  3020               	movlw	32
  6196  0333  0264               	subwf	NVMWrite@j,w
  6197  0334  1C03               	skipc
  6198  0335  2B04               	goto	l3751
  6199  0336                     l3767:	
  6200                           
  6201                           ;NVM.c: 107: }
  6202                           ;NVM.c: 109: rowAddr+=0x0020;
  6203  0336  3020               	movlw	32
  6204  0337  07E0               	addwf	NVMWrite@rowAddr,f
  6205  0338  3000               	movlw	0
  6206  0339  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  6207  033A  2A92               	goto	l243
  6208  033B                     l263:	
  6209                           
  6210                           ;NVM.c: 110: }
  6211                           ;NVM.c: 112: INTCONbits.GIE=1;
  6212  033B  178B               	bsf	11,7	;volatile
  6213                           
  6214                           ;NVM.c: 113: PMCON1bits.WREN=0;
  6215  033C  0023               	movlb	3	; select bank3
  6216  033D  1115               	bcf	21,2	;volatile
  6217  033E  0008               	return
  6218  033F                     __end_of_NVMWrite:	
  6219                           
  6220                           	psect	text34
  6221  0CCA                     __ptext34:	
  6222 ;; *************** function _PGMReadNvm *****************
  6223 ;; Defined at:
  6224 ;;		line 56 in file "PGM.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;		None
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;		None
  6229 ;; Return value:  Size  Location     Type
  6230 ;;		None               void
  6231 ;; Registers used:
  6232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;Total ram usage:        4 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    3
  6245 ;; This function calls:
  6246 ;;		_NVMRead
  6247 ;; This function is called by:
  6248 ;;		_PGMInit
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _PGMReadNvm
  6254  0CCA                     _PGMReadNvm:	
  6255                           
  6256                           ;PGM.c: 57: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6260  0CCA  3001               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  6261  0CCB  00F8               	movwf	??_PGMReadNvm
  6262  0CCC  3088               	movlw	(high __stringtab)| (0+128)
  6263  0CCD  00F9               	movwf	??_PGMReadNvm+1
  6264  0CCE  0878               	movf	??_PGMReadNvm,w
  6265  0CCF  00F1               	movwf	?_NVMRead
  6266  0CD0  0879               	movf	??_PGMReadNvm+1,w
  6267  0CD1  00F2               	movwf	?_NVMRead+1
  6268  0CD2  30CB               	movlw	_pgm_cfg& (0+255)
  6269  0CD3  00FA               	movwf	??_PGMReadNvm+2
  6270  0CD4  087A               	movf	??_PGMReadNvm+2,w
  6271  0CD5  00F3               	movwf	?_NVMRead+2
  6272  0CD6  3005               	movlw	5
  6273  0CD7  00FB               	movwf	??_PGMReadNvm+3
  6274  0CD8  087B               	movf	??_PGMReadNvm+3,w
  6275  0CD9  00F4               	movwf	?_NVMRead+3
  6276  0CDA  318E  26C1         	fcall	_NVMRead
  6277  0CDC  0008               	return
  6278  0CDD                     __end_of_PGMReadNvm:	
  6279                           
  6280                           	psect	text35
  6281  0EC1                     __ptext35:	
  6282 ;; *************** function _NVMRead *****************
  6283 ;; Defined at:
  6284 ;;		line 24 in file "NVM.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  addr            2    1[COMMON] unsigned short 
  6287 ;;  dest            1    3[COMMON] PTR unsigned char 
  6288 ;;		 -> pgm_cfg(5), 
  6289 ;;  len             1    4[COMMON] unsigned char 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;  i               1    7[COMMON] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;		None               void
  6294 ;; Registers used:
  6295 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;Total ram usage:        7 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    2
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_PGMReadNvm
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _NVMRead
  6317  0EC1                     _NVMRead:	
  6318                           
  6319                           ;NVM.c: 25: unsigned char i;
  6320                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  6324  0EC1  0023               	movlb	3	; select bank3
  6325  0EC2  1315               	bcf	21,6	;volatile
  6326                           
  6327                           ;NVM.c: 28: for(i=0;i<len;i++)
  6328  0EC3  01F7               	clrf	NVMRead@i
  6329  0EC4                     l3697:	
  6330  0EC4  0874               	movf	NVMRead@len,w
  6331  0EC5  0277               	subwf	NVMRead@i,w
  6332  0EC6  1803               	btfsc	3,0
  6333  0EC7  0008               	return
  6334  0EC8  0064               	clrwdt	;# 
  6335                           
  6336                           ;NVM.c: 31: PMADR=(addr+i);
  6337  0EC9  0877               	movf	NVMRead@i,w
  6338  0ECA  0771               	addwf	NVMRead@addr,w
  6339  0ECB  00F5               	movwf	??_NVMRead
  6340  0ECC  0872               	movf	NVMRead@addr+1,w
  6341  0ECD  1803               	skipnc
  6342  0ECE  0A72               	incf	NVMRead@addr+1,w
  6343  0ECF  00F6               	movwf	??_NVMRead+1
  6344  0ED0  0875               	movf	??_NVMRead,w
  6345  0ED1  0023               	movlb	3	; select bank3
  6346  0ED2  0091               	movwf	17	;volatile
  6347  0ED3  0876               	movf	??_NVMRead+1,w
  6348  0ED4  0092               	movwf	18	;volatile
  6349                           
  6350                           ;NVM.c: 32: PMCON1bits.RD=1;
  6351  0ED5  1415               	bsf	21,0	;volatile
  6352  0ED6                     l236:	
  6353                           ;NVM.c: 33: while(PMCON1bits.RD);
  6354                           
  6355  0ED6  1815               	btfsc	21,0	;volatile
  6356  0ED7  2ED6               	goto	l236
  6357                           
  6358                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  6359  0ED8  0813               	movf	19,w	;volatile
  6360  0ED9  00F5               	movwf	??_NVMRead
  6361  0EDA  0877               	movf	NVMRead@i,w
  6362  0EDB  0773               	addwf	NVMRead@dest,w
  6363  0EDC  00F6               	movwf	??_NVMRead+1
  6364  0EDD  0876               	movf	??_NVMRead+1,w
  6365  0EDE  0086               	movwf	6
  6366  0EDF  0187               	clrf	7
  6367  0EE0  0875               	movf	??_NVMRead,w
  6368  0EE1  0081               	movwf	1
  6369  0EE2  3001               	movlw	1
  6370  0EE3  00F5               	movwf	??_NVMRead
  6371  0EE4  0875               	movf	??_NVMRead,w
  6372  0EE5  07F7               	addwf	NVMRead@i,f
  6373  0EE6  2EC4               	goto	l3697
  6374  0EE7                     __end_of_NVMRead:	
  6375                           
  6376                           	psect	text36
  6377  0D9E                     __ptext36:	
  6378 ;; *************** function _DINTask *****************
  6379 ;; Defined at:
  6380 ;;		line 80 in file "DIN.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;		None
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;		None
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, status,2, status,0
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        1 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    2
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _DINTask
  6410  0D9E                     _DINTask:	
  6411                           
  6412                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  6416  0D9E  0020               	movlb	0	; select bank0
  6417  0D9F  01EF               	clrf	_u_in_sta_tmpTask
  6418                           
  6419                           ;DIN.c: 82: if(!PORTBbits.RB2)
  6420  0DA0  1D0D               	btfss	13,2	;volatile
  6421                           
  6422                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  6423  0DA1  146F               	bsf	_u_in_sta_tmpTask,0
  6424                           
  6425                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  6426  0DA2  086F               	movf	_u_in_sta_tmpTask,w
  6427  0DA3  3901               	andlw	1
  6428  0DA4  00F1               	movwf	??_DINTask
  6429  0DA5  087C               	movf	_u_in_sta_currTask,w
  6430  0DA6  3901               	andlw	1
  6431  0DA7  0671               	xorwf	??_DINTask,w
  6432  0DA8  1903               	skipnz
  6433  0DA9  2DB2               	goto	l3811
  6434                           
  6435                           ;DIN.c: 87: {
  6436                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  6437  0DAA  107C               	bcf	_u_in_sta_currTask,0
  6438  0DAB  1C6F               	btfss	_u_in_sta_tmpTask,0
  6439  0DAC  2DAE               	goto	l3807
  6440  0DAD  147C               	bsf	_u_in_sta_currTask,0
  6441  0DAE                     l3807:	
  6442                           
  6443                           ;DIN.c: 89: tmrDbncSel=0;
  6444  0DAE  0021               	movlb	1	; select bank1
  6445  0DAF  01B4               	clrf	_tmrDbncSel^(0+128)
  6446                           
  6447                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  6448  0DB0  0020               	movlb	0	; select bank0
  6449  0DB1  146E               	bsf	_u_flg_din,0
  6450  0DB2                     l3811:	
  6451                           
  6452                           ;DIN.c: 91: }
  6453                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  6454  0DB2  1C7C               	btfss	_u_in_sta_currTask,0
  6455  0DB3  2DB6               	goto	l3815
  6456                           
  6457                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  6458  0DB4  14EE               	bsf	_u_flg_din,1
  6459  0DB5  0008               	return
  6460  0DB6                     l3815:	
  6461                           
  6462                           ;DIN.c: 96: else
  6463                           ;DIN.c: 97: {
  6464                           ;DIN.c: 98: tmrLongSel=0;
  6465  0DB6  0021               	movlb	1	; select bank1
  6466  0DB7  01AA               	clrf	_tmrLongSel^(0+128)
  6467  0DB8  01AB               	clrf	(_tmrLongSel+1)^(0+128)
  6468                           
  6469                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  6470  0DB9  0020               	movlb	0	; select bank0
  6471  0DBA  10EE               	bcf	_u_flg_din,1
  6472  0DBB  0008               	return
  6473  0DBC                     __end_of_DINTask:	
  6474                           
  6475                           	psect	text37
  6476  0CB9                     __ptext37:	
  6477 ;; *************** function _DINInit *****************
  6478 ;; Defined at:
  6479 ;;		line 25 in file "DIN.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  sta             1    wreg     unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  sta             1    1[COMMON] unsigned char 
  6484 ;; Return value:  Size  Location     Type
  6485 ;;		None               void
  6486 ;; Registers used:
  6487 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6488 ;; Tracked objects:
  6489 ;;		On entry : 0/0
  6490 ;;		On exit  : 0/0
  6491 ;;		Unchanged: 0/0
  6492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;Total ram usage:        1 bytes
  6498 ;; Hardware stack levels used:    1
  6499 ;; Hardware stack levels required when called:    2
  6500 ;; This function calls:
  6501 ;;		Nothing
  6502 ;; This function is called by:
  6503 ;;		_main
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           
  6508                           ;psect for function _DINInit
  6509  0CB9                     _DINInit:	
  6510                           
  6511                           ;incstack = 0
  6512                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  6513                           ;DINInit@sta stored from wreg
  6514  0CB9  00F1               	movwf	DINInit@sta
  6515                           
  6516                           ;DIN.c: 26: switch(sta)
  6517  0CBA  2CC4               	goto	l3775
  6518  0CBB                     l3771:	
  6519                           ;DIN.c: 27: {
  6520                           ;DIN.c: 31: case 1:
  6521                           
  6522                           
  6523                           ;DIN.c: 33: u_flg_din.val=0;
  6524  0CBB  0020               	movlb	0	; select bank0
  6525  0CBC  01EE               	clrf	_u_flg_din
  6526                           
  6527                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  6528  0CBD  01FC               	clrf	_u_in_sta_currTask
  6529                           
  6530                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  6531  0CBE  01EF               	clrf	_u_in_sta_tmpTask
  6532                           
  6533                           ;DIN.c: 36: u_in_ev_up.val=0;
  6534  0CBF  0021               	movlb	1	; select bank1
  6535  0CC0  01B8               	clrf	_u_in_ev_up^(0+128)
  6536                           
  6537                           ;DIN.c: 37: u_in_ev_down.val=0;
  6538  0CC1  01B6               	clrf	_u_in_ev_down^(0+128)
  6539                           
  6540                           ;DIN.c: 38: u_in_ev_long.val=0;
  6541  0CC2  01B7               	clrf	_u_in_ev_long^(0+128)
  6542                           
  6543                           ;DIN.c: 43: }
  6544                           
  6545                           ;DIN.c: 39: break;
  6546  0CC3  0008               	return
  6547  0CC4                     l3775:	
  6548  0CC4  0871               	movf	DINInit@sta,w
  6549                           
  6550                           ; Switch size 1, requested type "space"
  6551                           ; Number of cases is 1, Range of values is 1 to 1
  6552                           ; switch strategies available:
  6553                           ; Name         Instructions Cycles
  6554                           ; simple_byte            4     3 (average)
  6555                           ; direct_byte           11     9 (fixed)
  6556                           ; jumptable            263     9 (fixed)
  6557                           ;	Chosen strategy is simple_byte
  6558  0CC5  3A01               	xorlw	1	; case 1
  6559  0CC6  1903               	skipnz
  6560  0CC7  2CBB               	goto	l3771
  6561  0CC8  2CC9               	goto	l288
  6562  0CC9                     l288:	
  6563  0CC9  0008               	return
  6564  0CCA                     __end_of_DINInit:	
  6565                           
  6566                           	psect	text38
  6567  0C6C                     __ptext38:	
  6568 ;; *************** function _NVMInit *****************
  6569 ;; Defined at:
  6570 ;;		line 7 in file "NVM.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  sta             1    wreg     unsigned char 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  sta             1    1[COMMON] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;		None               void
  6577 ;; Registers used:
  6578 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;Total ram usage:        1 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    2
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_main
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _NVMInit
  6600  0C6C                     _NVMInit:	
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  6604                           ;NVMInit@sta stored from wreg
  6605  0C6C  00F1               	movwf	NVMInit@sta
  6606                           
  6607                           ;NVM.c: 8: switch(sta)
  6608  0C6D  2C71               	goto	l3683
  6609  0C6E                     l3679:	
  6610                           ;NVM.c: 9: {
  6611                           ;NVM.c: 10: case 0:
  6612                           
  6613                           
  6614                           ;NVM.c: 12: PMCON1=0b00000000;
  6615  0C6E  0023               	movlb	3	; select bank3
  6616  0C6F  0195               	clrf	21	;volatile
  6617                           
  6618                           ;NVM.c: 20: }
  6619                           
  6620                           ;NVM.c: 13: break;
  6621  0C70  0008               	return
  6622  0C71                     l3683:	
  6623  0C71  0871               	movf	NVMInit@sta,w
  6624                           
  6625                           ; Switch size 1, requested type "space"
  6626                           ; Number of cases is 1, Range of values is 0 to 0
  6627                           ; switch strategies available:
  6628                           ; Name         Instructions Cycles
  6629                           ; simple_byte            4     3 (average)
  6630                           ; direct_byte            8     6 (fixed)
  6631                           ; jumptable            260     6 (fixed)
  6632                           ;	Chosen strategy is simple_byte
  6633  0C72  3A00               	xorlw	0	; case 0
  6634  0C73  1903               	skipnz
  6635  0C74  2C6E               	goto	l3679
  6636  0C75  2C76               	goto	l231
  6637  0C76                     l231:	
  6638  0C76  0008               	return
  6639  0C77                     __end_of_NVMInit:	
  6640                           
  6641                           	psect	text39
  6642  0C61                     __ptext39:	
  6643 ;; *************** function _LEDInit *****************
  6644 ;; Defined at:
  6645 ;;		line 8 in file "LED.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  sta             1    wreg     unsigned char 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  sta             1    1[COMMON] unsigned char 
  6650 ;; Return value:  Size  Location     Type
  6651 ;;		None               void
  6652 ;; Registers used:
  6653 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;Total ram usage:        1 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    2
  6666 ;; This function calls:
  6667 ;;		Nothing
  6668 ;; This function is called by:
  6669 ;;		_main
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           
  6674                           ;psect for function _LEDInit
  6675  0C61                     _LEDInit:	
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  6679                           ;LEDInit@sta stored from wreg
  6680  0C61  00F1               	movwf	LEDInit@sta
  6681                           
  6682                           ;LED.c: 9: switch(sta)
  6683  0C62  2C66               	goto	l3645
  6684  0C63                     l191:	
  6685                           ;LED.c: 10: {
  6686                           ;LED.c: 17: case 2:
  6687                           
  6688                           
  6689                           ;LED.c: 19: PORTCbits.RC7=1;
  6690  0C63  0020               	movlb	0	; select bank0
  6691  0C64  178E               	bsf	14,7	;volatile
  6692                           
  6693                           ;LED.c: 21: }
  6694                           
  6695                           ;LED.c: 20: break;
  6696  0C65  0008               	return
  6697  0C66                     l3645:	
  6698  0C66  0871               	movf	LEDInit@sta,w
  6699                           
  6700                           ; Switch size 1, requested type "space"
  6701                           ; Number of cases is 1, Range of values is 2 to 2
  6702                           ; switch strategies available:
  6703                           ; Name         Instructions Cycles
  6704                           ; simple_byte            4     3 (average)
  6705                           ; direct_byte           11     9 (fixed)
  6706                           ; jumptable            263     9 (fixed)
  6707                           ;	Chosen strategy is simple_byte
  6708  0C67  3A02               	xorlw	2	; case 2
  6709  0C68  1903               	skipnz
  6710  0C69  2C63               	goto	l191
  6711  0C6A  2C6B               	goto	l193
  6712  0C6B                     l193:	
  6713  0C6B  0008               	return
  6714  0C6C                     __end_of_LEDInit:	
  6715                           
  6716                           	psect	text40
  6717  0041                     __ptext40:	
  6718 ;; *************** function _ADCTask *****************
  6719 ;; Defined at:
  6720 ;;		line 53 in file "ADC.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        5 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    4
  6741 ;; This function calls:
  6742 ;;		___awtoft
  6743 ;;		___ftadd
  6744 ;;		___ftdiv
  6745 ;;		___ftmul
  6746 ;;		___lwdiv
  6747 ;; This function is called by:
  6748 ;;		_main
  6749 ;; This function uses a non-reentrant model
  6750 ;;
  6751                           
  6752                           
  6753                           ;psect for function _ADCTask
  6754  0041                     _ADCTask:	
  6755                           
  6756                           ;ADC.c: 54: static unsigned short sumBatt=0,sumTemp=0;
  6757                           ;ADC.c: 55: static unsigned char cntSum=0;
  6758                           ;ADC.c: 58: if(!(ADCON0bits.GO))
  6759                           
  6760                           ;incstack = 0
  6761                           ; Regs used in _ADCTask: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6762  0041  0021               	movlb	1	; select bank1
  6763  0042  189D               	btfsc	29,1	;volatile
  6764  0043  2982               	goto	l3585
  6765                           
  6766                           ;ADC.c: 59: {
  6767                           ;ADC.c: 61: PORTBbits.RB5=0;
  6768  0044  0020               	movlb	0	; select bank0
  6769  0045  128D               	bcf	13,5	;volatile
  6770                           
  6771                           ;ADC.c: 63: switch(adc_ch)
  6772  0046  2979               	goto	l3583
  6773  0047                     l3545:	
  6774                           ;ADC.c: 64: {
  6775                           ;ADC.c: 65: case ADC_CH_BATT:
  6776                           
  6777                           
  6778                           ;ADC.c: 67: if(cntSum==10)
  6779  0047  0020               	movlb	0	; select bank0
  6780  0048  0869               	movf	ADCTask@cntSum,w
  6781  0049  3A0A               	xorlw	10
  6782  004A  1D03               	skipz
  6783  004B  28B6               	goto	l3551
  6784                           
  6785                           ;ADC.c: 68: {
  6786                           ;ADC.c: 70: batt=sumBatt/10;
  6787  004C  300A               	movlw	10
  6788  004D  00F1               	movwf	?___lwdiv
  6789  004E  3000               	movlw	0
  6790  004F  00F2               	movwf	?___lwdiv+1
  6791  0050  0021               	movlb	1	; select bank1
  6792  0051  0827               	movf	(ADCTask@sumBatt+1)^(0+128),w
  6793  0052  01F4               	clrf	?___lwdiv+3
  6794  0053  07F4               	addwf	?___lwdiv+3,f
  6795  0054  0826               	movf	ADCTask@sumBatt^(0+128),w
  6796  0055  01F3               	clrf	?___lwdiv+2
  6797  0056  07F3               	addwf	?___lwdiv+2,f
  6798  0057  318F  27CA  3180   	fcall	___lwdiv
  6799  005A  0871               	movf	?___lwdiv,w
  6800  005B  0020               	movlb	0	; select bank0
  6801  005C  00D0               	movwf	??_ADCTask
  6802  005D  0850               	movf	??_ADCTask,w
  6803  005E  0021               	movlb	1	; select bank1
  6804  005F  00AE               	movwf	_batt^(0+128)
  6805                           
  6806                           ;ADC.c: 76: battV=batt*4*1.024/1024*11;
  6807  0060  3000               	movlw	0
  6808  0061  0020               	movlb	0	; select bank0
  6809  0062  00B3               	movwf	?___ftdiv
  6810  0063  3080               	movlw	128
  6811  0064  00B4               	movwf	?___ftdiv+1
  6812  0065  3044               	movlw	68
  6813  0066  00B5               	movwf	?___ftdiv+2
  6814  0067  3012               	movlw	18
  6815  0068  00A3               	movwf	?___ftmul
  6816  0069  3083               	movlw	131
  6817  006A  00A4               	movwf	?___ftmul+1
  6818  006B  303F               	movlw	63
  6819  006C  00A5               	movwf	?___ftmul+2
  6820  006D  0021               	movlb	1	; select bank1
  6821  006E  082E               	movf	_batt^(0+128),w
  6822  006F  0020               	movlb	0	; select bank0
  6823  0070  00D0               	movwf	??_ADCTask
  6824  0071  01D1               	clrf	??_ADCTask+1
  6825  0072  35D0               	lslf	??_ADCTask,f
  6826  0073  0DD1               	rlf	??_ADCTask+1,f
  6827  0074  35D0               	lslf	??_ADCTask,f
  6828  0075  0DD1               	rlf	??_ADCTask+1,f
  6829  0076  0850               	movf	??_ADCTask,w
  6830  0077  00F9               	movwf	?___awtoft
  6831  0078  0851               	movf	??_ADCTask+1,w
  6832  0079  00FA               	movwf	?___awtoft+1
  6833  007A  318E  2638  3180   	fcall	___awtoft
  6834  007D  0879               	movf	?___awtoft,w
  6835  007E  0020               	movlb	0	; select bank0
  6836  007F  00A6               	movwf	?___ftmul+3
  6837  0080  087A               	movf	?___awtoft+1,w
  6838  0081  00A7               	movwf	?___ftmul+4
  6839  0082  087B               	movf	?___awtoft+2,w
  6840  0083  00A8               	movwf	?___ftmul+5
  6841  0084  3183  23F9  3180   	fcall	___ftmul
  6842  0087  0020               	movlb	0	; select bank0
  6843  0088  0823               	movf	?___ftmul,w
  6844  0089  00B6               	movwf	?___ftdiv+3
  6845  008A  0824               	movf	?___ftmul+1,w
  6846  008B  00B7               	movwf	?___ftdiv+4
  6847  008C  0825               	movf	?___ftmul+2,w
  6848  008D  00B8               	movwf	?___ftdiv+5
  6849  008E  3184  24AD  3180   	fcall	___ftdiv
  6850  0091  0020               	movlb	0	; select bank0
  6851  0092  0833               	movf	?___ftdiv,w
  6852  0093  00D2               	movwf	_ADCTask$1362
  6853  0094  0834               	movf	?___ftdiv+1,w
  6854  0095  00D3               	movwf	_ADCTask$1362+1
  6855  0096  0835               	movf	?___ftdiv+2,w
  6856  0097  00D4               	movwf	_ADCTask$1362+2
  6857                           
  6858                           ;ADC.c: 76: battV=batt*4*1.024/1024*11;
  6859  0098  3000               	movlw	0
  6860  0099  00A3               	movwf	?___ftmul
  6861  009A  3030               	movlw	48
  6862  009B  00A4               	movwf	?___ftmul+1
  6863  009C  3041               	movlw	65
  6864  009D  00A5               	movwf	?___ftmul+2
  6865  009E  0852               	movf	_ADCTask$1362,w
  6866  009F  00A6               	movwf	?___ftmul+3
  6867  00A0  0853               	movf	_ADCTask$1362+1,w
  6868  00A1  00A7               	movwf	?___ftmul+4
  6869  00A2  0854               	movf	_ADCTask$1362+2,w
  6870  00A3  00A8               	movwf	?___ftmul+5
  6871  00A4  3183  23F9  3180   	fcall	___ftmul
  6872  00A7  0020               	movlb	0	; select bank0
  6873  00A8  0823               	movf	?___ftmul,w
  6874  00A9  0021               	movlb	1	; select bank1
  6875  00AA  00A0               	movwf	_battV^(0+128)
  6876  00AB  0020               	movlb	0	; select bank0
  6877  00AC  0824               	movf	?___ftmul+1,w
  6878  00AD  0021               	movlb	1	; select bank1
  6879  00AE  00A1               	movwf	(_battV+1)^(0+128)
  6880  00AF  0020               	movlb	0	; select bank0
  6881  00B0  0825               	movf	?___ftmul+2,w
  6882  00B1  0021               	movlb	1	; select bank1
  6883  00B2  00A2               	movwf	(_battV+2)^(0+128)
  6884                           
  6885                           ;ADC.c: 78: sumBatt=0;
  6886  00B3  01A6               	clrf	ADCTask@sumBatt^(0+128)
  6887  00B4  01A7               	clrf	(ADCTask@sumBatt+1)^(0+128)
  6888                           
  6889                           ;ADC.c: 79: }
  6890  00B5  28C2               	goto	l3553
  6891  00B6                     l3551:	
  6892                           
  6893                           ;ADC.c: 80: else
  6894                           ;ADC.c: 81: sumBatt+=ADRESH;
  6895  00B6  0021               	movlb	1	; select bank1
  6896  00B7  081C               	movf	28,w	;volatile
  6897  00B8  0020               	movlb	0	; select bank0
  6898  00B9  00D0               	movwf	??_ADCTask
  6899  00BA  01D1               	clrf	??_ADCTask+1
  6900  00BB  0850               	movf	??_ADCTask,w
  6901  00BC  0021               	movlb	1	; select bank1
  6902  00BD  07A6               	addwf	ADCTask@sumBatt^(0+128),f
  6903  00BE  0020               	movlb	0	; select bank0
  6904  00BF  0851               	movf	??_ADCTask+1,w
  6905  00C0  0021               	movlb	1	; select bank1
  6906  00C1  3DA7               	addwfc	(ADCTask@sumBatt+1)^(0+128),f
  6907  00C2                     l3553:	
  6908                           
  6909                           ;ADC.c: 83: ADCON1=0b00000000;
  6910  00C2  019E               	clrf	30	;volatile
  6911                           
  6912                           ;ADC.c: 84: ADCON0=0b00101001;
  6913  00C3  3029               	movlw	41
  6914  00C4  009D               	movwf	29	;volatile
  6915                           
  6916                           ;ADC.c: 85: adc_ch=ADC_CH_TEMP;
  6917  00C5  01AC               	clrf	_adc_ch^(0+128)
  6918  00C6  0AAC               	incf	_adc_ch^(0+128),f
  6919                           
  6920                           ;ADC.c: 86: break;
  6921  00C7  2982               	goto	l3585
  6922  00C8                     l3559:	
  6923                           ;ADC.c: 87: case ADC_CH_TEMP:
  6924                           
  6925                           
  6926                           ;ADC.c: 89: if(cntSum==10)
  6927  00C8  0020               	movlb	0	; select bank0
  6928  00C9  0869               	movf	ADCTask@cntSum,w
  6929  00CA  3A0A               	xorlw	10
  6930  00CB  1D03               	skipz
  6931  00CC  295F               	goto	l3569
  6932                           
  6933                           ;ADC.c: 90: {
  6934                           ;ADC.c: 92: temp=sumTemp/10;
  6935  00CD  300A               	movlw	10
  6936  00CE  00F1               	movwf	?___lwdiv
  6937  00CF  3000               	movlw	0
  6938  00D0  00F2               	movwf	?___lwdiv+1
  6939  00D1  0021               	movlb	1	; select bank1
  6940  00D2  0829               	movf	(ADCTask@sumTemp+1)^(0+128),w
  6941  00D3  01F4               	clrf	?___lwdiv+3
  6942  00D4  07F4               	addwf	?___lwdiv+3,f
  6943  00D5  0828               	movf	ADCTask@sumTemp^(0+128),w
  6944  00D6  01F3               	clrf	?___lwdiv+2
  6945  00D7  07F3               	addwf	?___lwdiv+2,f
  6946  00D8  318F  27CA  3180   	fcall	___lwdiv
  6947  00DB  0871               	movf	?___lwdiv,w
  6948  00DC  0020               	movlb	0	; select bank0
  6949  00DD  00D0               	movwf	??_ADCTask
  6950  00DE  0850               	movf	??_ADCTask,w
  6951  00DF  0021               	movlb	1	; select bank1
  6952  00E0  00B3               	movwf	_temp^(0+128)
  6953                           
  6954                           ;ADC.c: 99: tempC=((temp*4)*(battV/1024)*1000-968)/2.47;
  6955  00E1  0820               	movf	_battV^(0+128),w
  6956  00E2  0020               	movlb	0	; select bank0
  6957  00E3  00B6               	movwf	?___ftdiv+3
  6958  00E4  0021               	movlb	1	; select bank1
  6959  00E5  0821               	movf	(_battV+1)^(0+128),w
  6960  00E6  0020               	movlb	0	; select bank0
  6961  00E7  00B7               	movwf	?___ftdiv+4
  6962  00E8  0021               	movlb	1	; select bank1
  6963  00E9  0822               	movf	(_battV+2)^(0+128),w
  6964  00EA  0020               	movlb	0	; select bank0
  6965  00EB  00B8               	movwf	?___ftdiv+5
  6966  00EC  3000               	movlw	0
  6967  00ED  00B3               	movwf	?___ftdiv
  6968  00EE  3080               	movlw	128
  6969  00EF  00B4               	movwf	?___ftdiv+1
  6970  00F0  3044               	movlw	68
  6971  00F1  00B5               	movwf	?___ftdiv+2
  6972  00F2  3184  24AD  3180   	fcall	___ftdiv
  6973  00F5  0020               	movlb	0	; select bank0
  6974  00F6  0833               	movf	?___ftdiv,w
  6975  00F7  00A3               	movwf	?___ftmul
  6976  00F8  0834               	movf	?___ftdiv+1,w
  6977  00F9  00A4               	movwf	?___ftmul+1
  6978  00FA  0835               	movf	?___ftdiv+2,w
  6979  00FB  00A5               	movwf	?___ftmul+2
  6980  00FC  0021               	movlb	1	; select bank1
  6981  00FD  0833               	movf	_temp^(0+128),w
  6982  00FE  0020               	movlb	0	; select bank0
  6983  00FF  00D0               	movwf	??_ADCTask
  6984  0100  01D1               	clrf	??_ADCTask+1
  6985  0101  35D0               	lslf	??_ADCTask,f
  6986  0102  0DD1               	rlf	??_ADCTask+1,f
  6987  0103  35D0               	lslf	??_ADCTask,f
  6988  0104  0DD1               	rlf	??_ADCTask+1,f
  6989  0105  0850               	movf	??_ADCTask,w
  6990  0106  00F9               	movwf	?___awtoft
  6991  0107  0851               	movf	??_ADCTask+1,w
  6992  0108  00FA               	movwf	?___awtoft+1
  6993  0109  318E  2638  3180   	fcall	___awtoft
  6994  010C  0879               	movf	?___awtoft,w
  6995  010D  0020               	movlb	0	; select bank0
  6996  010E  00A6               	movwf	?___ftmul+3
  6997  010F  087A               	movf	?___awtoft+1,w
  6998  0110  00A7               	movwf	?___ftmul+4
  6999  0111  087B               	movf	?___awtoft+2,w
  7000  0112  00A8               	movwf	?___ftmul+5
  7001  0113  3183  23F9  3180   	fcall	___ftmul
  7002  0116  0020               	movlb	0	; select bank0
  7003  0117  0823               	movf	?___ftmul,w
  7004  0118  00D2               	movwf	_ADCTask$1362
  7005  0119  0824               	movf	?___ftmul+1,w
  7006  011A  00D3               	movwf	_ADCTask$1362+1
  7007  011B  0825               	movf	?___ftmul+2,w
  7008  011C  00D4               	movwf	_ADCTask$1362+2
  7009                           
  7010                           ;ADC.c: 99: tempC=((temp*4)*(battV/1024)*1000-968)/2.47;
  7011  011D  3014               	movlw	20
  7012  011E  00B3               	movwf	?___ftdiv
  7013  011F  301E               	movlw	30
  7014  0120  00B4               	movwf	?___ftdiv+1
  7015  0121  3040               	movlw	64
  7016  0122  00B5               	movwf	?___ftdiv+2
  7017  0123  3000               	movlw	0
  7018  0124  00C3               	movwf	?___ftadd
  7019  0125  3072               	movlw	114
  7020  0126  00C4               	movwf	?___ftadd+1
  7021  0127  30C4               	movlw	196
  7022  0128  00C5               	movwf	?___ftadd+2
  7023  0129  3000               	movlw	0
  7024  012A  00A3               	movwf	?___ftmul
  7025  012B  307A               	movlw	122
  7026  012C  00A4               	movwf	?___ftmul+1
  7027  012D  3044               	movlw	68
  7028  012E  00A5               	movwf	?___ftmul+2
  7029  012F  0852               	movf	_ADCTask$1362,w
  7030  0130  00A6               	movwf	?___ftmul+3
  7031  0131  0853               	movf	_ADCTask$1362+1,w
  7032  0132  00A7               	movwf	?___ftmul+4
  7033  0133  0854               	movf	_ADCTask$1362+2,w
  7034  0134  00A8               	movwf	?___ftmul+5
  7035  0135  3183  23F9  3180   	fcall	___ftmul
  7036  0138  0020               	movlb	0	; select bank0
  7037  0139  0823               	movf	?___ftmul,w
  7038  013A  00C6               	movwf	?___ftadd+3
  7039  013B  0824               	movf	?___ftmul+1,w
  7040  013C  00C7               	movwf	?___ftadd+4
  7041  013D  0825               	movf	?___ftmul+2,w
  7042  013E  00C8               	movwf	?___ftadd+5
  7043  013F  3181  218B  3180   	fcall	___ftadd
  7044  0142  0020               	movlb	0	; select bank0
  7045  0143  0843               	movf	?___ftadd,w
  7046  0144  00B6               	movwf	?___ftdiv+3
  7047  0145  0844               	movf	?___ftadd+1,w
  7048  0146  00B7               	movwf	?___ftdiv+4
  7049  0147  0845               	movf	?___ftadd+2,w
  7050  0148  00B8               	movwf	?___ftdiv+5
  7051  0149  3184  24AD  3180   	fcall	___ftdiv
  7052  014C  0020               	movlb	0	; select bank0
  7053  014D  0833               	movf	?___ftdiv,w
  7054  014E  0021               	movlb	1	; select bank1
  7055  014F  00A3               	movwf	_tempC^(0+128)
  7056  0150  0020               	movlb	0	; select bank0
  7057  0151  0834               	movf	?___ftdiv+1,w
  7058  0152  0021               	movlb	1	; select bank1
  7059  0153  00A4               	movwf	(_tempC+1)^(0+128)
  7060  0154  0020               	movlb	0	; select bank0
  7061  0155  0835               	movf	?___ftdiv+2,w
  7062  0156  0021               	movlb	1	; select bank1
  7063  0157  00A5               	movwf	(_tempC+2)^(0+128)
  7064                           
  7065                           ;ADC.c: 101: sumTemp=0;
  7066  0158  01A8               	clrf	ADCTask@sumTemp^(0+128)
  7067  0159  01A9               	clrf	(ADCTask@sumTemp+1)^(0+128)
  7068                           
  7069                           ;ADC.c: 103: cntSum=0;
  7070  015A  0020               	movlb	0	; select bank0
  7071  015B  01E9               	clrf	ADCTask@cntSum
  7072                           
  7073                           ;ADC.c: 105: adc_ev.convDone=1;
  7074  015C  0021               	movlb	1	; select bank1
  7075  015D  142D               	bsf	_adc_ev^(0+128),0
  7076                           
  7077                           ;ADC.c: 106: }
  7078  015E  2970               	goto	l3573
  7079  015F                     l3569:	
  7080                           
  7081                           ;ADC.c: 107: else
  7082                           ;ADC.c: 108: {
  7083                           ;ADC.c: 110: sumTemp+=ADRESH;
  7084  015F  0021               	movlb	1	; select bank1
  7085  0160  081C               	movf	28,w	;volatile
  7086  0161  0020               	movlb	0	; select bank0
  7087  0162  00D0               	movwf	??_ADCTask
  7088  0163  01D1               	clrf	??_ADCTask+1
  7089  0164  0850               	movf	??_ADCTask,w
  7090  0165  0021               	movlb	1	; select bank1
  7091  0166  07A8               	addwf	ADCTask@sumTemp^(0+128),f
  7092  0167  0020               	movlb	0	; select bank0
  7093  0168  0851               	movf	??_ADCTask+1,w
  7094  0169  0021               	movlb	1	; select bank1
  7095  016A  3DA9               	addwfc	(ADCTask@sumTemp+1)^(0+128),f
  7096                           
  7097                           ;ADC.c: 112: cntSum++;
  7098  016B  3001               	movlw	1
  7099  016C  0020               	movlb	0	; select bank0
  7100  016D  00D0               	movwf	??_ADCTask
  7101  016E  0850               	movf	??_ADCTask,w
  7102  016F  07E9               	addwf	ADCTask@cntSum,f
  7103  0170                     l3573:	
  7104                           
  7105                           ;ADC.c: 113: }
  7106                           ;ADC.c: 115: PORTBbits.RB5=1;
  7107  0170  0020               	movlb	0	; select bank0
  7108  0171  168D               	bsf	13,5	;volatile
  7109                           
  7110                           ;ADC.c: 116: ADCON1=0b00000011;
  7111  0172  3003               	movlw	3
  7112  0173  0021               	movlb	1	; select bank1
  7113  0174  009E               	movwf	30	;volatile
  7114                           
  7115                           ;ADC.c: 117: ADCON0=0b00101101;
  7116  0175  302D               	movlw	45
  7117  0176  009D               	movwf	29	;volatile
  7118                           
  7119                           ;ADC.c: 118: adc_ch=ADC_CH_BATT;
  7120  0177  01AC               	clrf	_adc_ch^(0+128)
  7121                           
  7122                           ;ADC.c: 120: }
  7123                           
  7124                           ;ADC.c: 119: break;
  7125  0178  2982               	goto	l3585
  7126  0179                     l3583:	
  7127  0179  0021               	movlb	1	; select bank1
  7128  017A  082C               	movf	_adc_ch^(0+128),w
  7129                           
  7130                           ; Switch size 1, requested type "space"
  7131                           ; Number of cases is 2, Range of values is 0 to 1
  7132                           ; switch strategies available:
  7133                           ; Name         Instructions Cycles
  7134                           ; simple_byte            7     4 (average)
  7135                           ; direct_byte           10     6 (fixed)
  7136                           ; jumptable            260     6 (fixed)
  7137                           ;	Chosen strategy is simple_byte
  7138  017B  3A00               	xorlw	0	; case 0
  7139  017C  1903               	skipnz
  7140  017D  2847               	goto	l3545
  7141  017E  3A01               	xorlw	1	; case 1
  7142  017F  1903               	skipnz
  7143  0180  28C8               	goto	l3559
  7144  0181  2982               	goto	l3585
  7145  0182                     l3585:	
  7146                           
  7147                           ;ADC.c: 121: }
  7148                           ;ADC.c: 123: _delay((unsigned long)((10)*(8000000/4000000.0)));
  7149  0182  3006               	movlw	6
  7150  0183  0020               	movlb	0	; select bank0
  7151  0184  00D0               	movwf	??_ADCTask
  7152  0185                     u4217:	
  7153  0185  0BD0               	decfsz	??_ADCTask,f
  7154  0186  2985               	goto	u4217
  7155  0187  0000               	nop
  7156                           
  7157                           ;ADC.c: 125: ADCON0bits.GO=1;
  7158  0188  0021               	movlb	1	; select bank1
  7159  0189  149D               	bsf	29,1	;volatile
  7160  018A  0008               	return
  7161  018B                     __end_of_ADCTask:	
  7162                           
  7163                           	psect	text41
  7164  0FCA                     __ptext41:	
  7165 ;; *************** function ___lwdiv *****************
  7166 ;; Defined at:
  7167 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  7168 ;; Parameters:    Size  Location     Type
  7169 ;;  divisor         2    1[COMMON] unsigned int 
  7170 ;;  dividend        2    3[COMMON] unsigned int 
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;  quotient        2    7[COMMON] unsigned int 
  7173 ;;  counter         1    6[COMMON] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  2    1[COMMON] unsigned int 
  7176 ;; Registers used:
  7177 ;;		wreg, status,2, status,0
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7183 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;Total ram usage:        8 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    2
  7190 ;; This function calls:
  7191 ;;		Nothing
  7192 ;; This function is called by:
  7193 ;;		_ADCTask
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           
  7198                           ;psect for function ___lwdiv
  7199  0FCA                     ___lwdiv:	
  7200                           
  7201                           ;incstack = 0
  7202                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7203  0FCA  01F7               	clrf	___lwdiv@quotient
  7204  0FCB  01F8               	clrf	___lwdiv@quotient+1
  7205  0FCC  0872               	movf	___lwdiv@divisor+1,w
  7206  0FCD  0471               	iorwf	___lwdiv@divisor,w
  7207  0FCE  1903               	skipnz
  7208  0FCF  2FF9               	goto	l4433
  7209  0FD0  01F6               	clrf	___lwdiv@counter
  7210  0FD1  0AF6               	incf	___lwdiv@counter,f
  7211  0FD2                     l4421:	
  7212  0FD2  1BF2               	btfsc	___lwdiv@divisor+1,7
  7213  0FD3  2FDE               	goto	l4423
  7214  0FD4  3001               	movlw	1
  7215  0FD5                     u4145:	
  7216  0FD5  35F1               	lslf	___lwdiv@divisor,f
  7217  0FD6  0DF2               	rlf	___lwdiv@divisor+1,f
  7218  0FD7  0B89               	decfsz	9,f
  7219  0FD8  2FD5               	goto	u4145
  7220  0FD9  3001               	movlw	1
  7221  0FDA  00F5               	movwf	??___lwdiv
  7222  0FDB  0875               	movf	??___lwdiv,w
  7223  0FDC  07F6               	addwf	___lwdiv@counter,f
  7224  0FDD  2FD2               	goto	l4421
  7225  0FDE                     l4423:	
  7226  0FDE  3001               	movlw	1
  7227  0FDF                     u4165:	
  7228  0FDF  35F7               	lslf	___lwdiv@quotient,f
  7229  0FE0  0DF8               	rlf	___lwdiv@quotient+1,f
  7230  0FE1  0B89               	decfsz	9,f
  7231  0FE2  2FDF               	goto	u4165
  7232  0FE3  0872               	movf	___lwdiv@divisor+1,w
  7233  0FE4  0274               	subwf	___lwdiv@dividend+1,w
  7234  0FE5  1D03               	skipz
  7235  0FE6  2FE9               	goto	u4175
  7236  0FE7  0871               	movf	___lwdiv@divisor,w
  7237  0FE8  0273               	subwf	___lwdiv@dividend,w
  7238  0FE9                     u4175:	
  7239  0FE9  1C03               	skipc
  7240  0FEA  2FF0               	goto	l4429
  7241  0FEB  0871               	movf	___lwdiv@divisor,w
  7242  0FEC  02F3               	subwf	___lwdiv@dividend,f
  7243  0FED  0872               	movf	___lwdiv@divisor+1,w
  7244  0FEE  3BF4               	subwfb	___lwdiv@dividend+1,f
  7245  0FEF  1477               	bsf	___lwdiv@quotient,0
  7246  0FF0                     l4429:	
  7247  0FF0  3001               	movlw	1
  7248  0FF1                     u4185:	
  7249  0FF1  36F2               	lsrf	___lwdiv@divisor+1,f
  7250  0FF2  0CF1               	rrf	___lwdiv@divisor,f
  7251  0FF3  0B89               	decfsz	9,f
  7252  0FF4  2FF1               	goto	u4185
  7253  0FF5  3001               	movlw	1
  7254  0FF6  02F6               	subwf	___lwdiv@counter,f
  7255  0FF7  1D03               	btfss	3,2
  7256  0FF8  2FDE               	goto	l4423
  7257  0FF9                     l4433:	
  7258  0FF9  0878               	movf	___lwdiv@quotient+1,w
  7259  0FFA  01F2               	clrf	?___lwdiv+1
  7260  0FFB  07F2               	addwf	?___lwdiv+1,f
  7261  0FFC  0877               	movf	___lwdiv@quotient,w
  7262  0FFD  01F1               	clrf	?___lwdiv
  7263  0FFE  07F1               	addwf	?___lwdiv,f
  7264  0FFF  0008               	return
  7265  1000                     __end_of___lwdiv:	
  7266                           
  7267                           	psect	text42
  7268  03F9                     __ptext42:	
  7269 ;; *************** function ___ftmul *****************
  7270 ;; Defined at:
  7271 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;  f1              3    3[BANK0 ] float 
  7274 ;;  f2              3    6[BANK0 ] float 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  f3_as_produc    3   14[BANK0 ] unsigned um
  7277 ;;  sign            1   18[BANK0 ] unsigned char 
  7278 ;;  cntr            1   17[BANK0 ] unsigned char 
  7279 ;;  exp             1   13[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;                  3    3[BANK0 ] float 
  7282 ;; Registers used:
  7283 ;;		wreg, status,2, status,0, pclath, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7289 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;Total ram usage:       16 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    3
  7296 ;; This function calls:
  7297 ;;		___ftpack
  7298 ;; This function is called by:
  7299 ;;		_ADCTask
  7300 ;; This function uses a non-reentrant model
  7301 ;;
  7302                           
  7303                           
  7304                           ;psect for function ___ftmul
  7305  03F9                     ___ftmul:	
  7306                           
  7307                           ;incstack = 0
  7308                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7309  03F9  0020               	movlb	0	; select bank0
  7310  03FA  0823               	movf	___ftmul@f1,w
  7311  03FB  00A9               	movwf	??___ftmul
  7312  03FC  0824               	movf	___ftmul@f1+1,w
  7313  03FD  00AA               	movwf	??___ftmul+1
  7314  03FE  0825               	movf	___ftmul@f1+2,w
  7315  03FF  00AB               	movwf	??___ftmul+2
  7316  0400  1003               	clrc
  7317  0401  0D2A               	rlf	??___ftmul+1,w
  7318  0402  0D2B               	rlf	??___ftmul+2,w
  7319  0403  00AC               	movwf	??___ftmul+3
  7320  0404  082C               	movf	??___ftmul+3,w
  7321  0405  00AD               	movwf	___ftmul@exp
  7322  0406  08AD               	movf	___ftmul@exp,f
  7323  0407  1D03               	skipz
  7324  0408  2C10               	goto	l4323
  7325  0409  3000               	movlw	0
  7326  040A  00A3               	movwf	?___ftmul
  7327  040B  3000               	movlw	0
  7328  040C  00A4               	movwf	?___ftmul+1
  7329  040D  3000               	movlw	0
  7330  040E  00A5               	movwf	?___ftmul+2
  7331  040F  0008               	return
  7332  0410                     l4323:	
  7333  0410  0826               	movf	___ftmul@f2,w
  7334  0411  00A9               	movwf	??___ftmul
  7335  0412  0827               	movf	___ftmul@f2+1,w
  7336  0413  00AA               	movwf	??___ftmul+1
  7337  0414  0828               	movf	___ftmul@f2+2,w
  7338  0415  00AB               	movwf	??___ftmul+2
  7339  0416  1003               	clrc
  7340  0417  0D2A               	rlf	??___ftmul+1,w
  7341  0418  0D2B               	rlf	??___ftmul+2,w
  7342  0419  00AC               	movwf	??___ftmul+3
  7343  041A  082C               	movf	??___ftmul+3,w
  7344  041B  00B2               	movwf	___ftmul@sign
  7345  041C  08B2               	movf	___ftmul@sign,f
  7346  041D  1D03               	skipz
  7347  041E  2C26               	goto	l4329
  7348  041F  3000               	movlw	0
  7349  0420  00A3               	movwf	?___ftmul
  7350  0421  3000               	movlw	0
  7351  0422  00A4               	movwf	?___ftmul+1
  7352  0423  3000               	movlw	0
  7353  0424  00A5               	movwf	?___ftmul+2
  7354  0425  0008               	return
  7355  0426                     l4329:	
  7356  0426  0832               	movf	___ftmul@sign,w
  7357  0427  3E7B               	addlw	123
  7358  0428  00A9               	movwf	??___ftmul
  7359  0429  0829               	movf	??___ftmul,w
  7360  042A  07AD               	addwf	___ftmul@exp,f
  7361  042B  0823               	movf	___ftmul@f1,w
  7362  042C  00A9               	movwf	??___ftmul
  7363  042D  0824               	movf	___ftmul@f1+1,w
  7364  042E  00AA               	movwf	??___ftmul+1
  7365  042F  0825               	movf	___ftmul@f1+2,w
  7366  0430  00AB               	movwf	??___ftmul+2
  7367  0431  3010               	movlw	16
  7368  0432                     u3935:	
  7369  0432  36AB               	lsrf	??___ftmul+2,f
  7370  0433  0CAA               	rrf	??___ftmul+1,f
  7371  0434  0CA9               	rrf	??___ftmul,f
  7372  0435  0B89               	decfsz	9,f
  7373  0436  2C32               	goto	u3935
  7374  0437  0829               	movf	??___ftmul,w
  7375  0438  00AC               	movwf	??___ftmul+3
  7376  0439  082C               	movf	??___ftmul+3,w
  7377  043A  00B2               	movwf	___ftmul@sign
  7378  043B  0826               	movf	___ftmul@f2,w
  7379  043C  00A9               	movwf	??___ftmul
  7380  043D  0827               	movf	___ftmul@f2+1,w
  7381  043E  00AA               	movwf	??___ftmul+1
  7382  043F  0828               	movf	___ftmul@f2+2,w
  7383  0440  00AB               	movwf	??___ftmul+2
  7384  0441  3010               	movlw	16
  7385  0442                     u3945:	
  7386  0442  36AB               	lsrf	??___ftmul+2,f
  7387  0443  0CAA               	rrf	??___ftmul+1,f
  7388  0444  0CA9               	rrf	??___ftmul,f
  7389  0445  0B89               	decfsz	9,f
  7390  0446  2C42               	goto	u3945
  7391  0447  0829               	movf	??___ftmul,w
  7392  0448  00AC               	movwf	??___ftmul+3
  7393  0449  082C               	movf	??___ftmul+3,w
  7394  044A  06B2               	xorwf	___ftmul@sign,f
  7395  044B  3080               	movlw	128
  7396  044C  00A9               	movwf	??___ftmul
  7397  044D  0829               	movf	??___ftmul,w
  7398  044E  05B2               	andwf	___ftmul@sign,f
  7399  044F  17A4               	bsf	___ftmul@f1+1,7
  7400  0450  17A7               	bsf	___ftmul@f2+1,7
  7401  0451  30FF               	movlw	255
  7402  0452  05A6               	andwf	___ftmul@f2,f
  7403  0453  30FF               	movlw	255
  7404  0454  05A7               	andwf	___ftmul@f2+1,f
  7405  0455  3000               	movlw	0
  7406  0456  05A8               	andwf	___ftmul@f2+2,f
  7407  0457  3000               	movlw	0
  7408  0458  00AE               	movwf	___ftmul@f3_as_product
  7409  0459  3000               	movlw	0
  7410  045A  00AF               	movwf	___ftmul@f3_as_product+1
  7411  045B  3000               	movlw	0
  7412  045C  00B0               	movwf	___ftmul@f3_as_product+2
  7413  045D  3007               	movlw	7
  7414  045E  00A9               	movwf	??___ftmul
  7415  045F  0829               	movf	??___ftmul,w
  7416  0460  00B1               	movwf	___ftmul@cntr
  7417  0461                     l4341:	
  7418  0461  1C23               	btfss	___ftmul@f1,0
  7419  0462  2C69               	goto	l4345
  7420  0463  0826               	movf	___ftmul@f2,w
  7421  0464  07AE               	addwf	___ftmul@f3_as_product,f
  7422  0465  0827               	movf	___ftmul@f2+1,w
  7423  0466  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  7424  0467  0828               	movf	___ftmul@f2+2,w
  7425  0468  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  7426  0469                     l4345:	
  7427  0469  3001               	movlw	1
  7428  046A                     u3965:	
  7429  046A  36A5               	lsrf	___ftmul@f1+2,f
  7430  046B  0CA4               	rrf	___ftmul@f1+1,f
  7431  046C  0CA3               	rrf	___ftmul@f1,f
  7432  046D  0B89               	decfsz	9,f
  7433  046E  2C6A               	goto	u3965
  7434  046F  3001               	movlw	1
  7435  0470                     u3975:	
  7436  0470  35A6               	lslf	___ftmul@f2,f
  7437  0471  0DA7               	rlf	___ftmul@f2+1,f
  7438  0472  0DA8               	rlf	___ftmul@f2+2,f
  7439  0473  0B89               	decfsz	9,f
  7440  0474  2C70               	goto	u3975
  7441  0475  3001               	movlw	1
  7442  0476  02B1               	subwf	___ftmul@cntr,f
  7443  0477  1D03               	btfss	3,2
  7444  0478  2C61               	goto	l4341
  7445  0479  3009               	movlw	9
  7446  047A  00A9               	movwf	??___ftmul
  7447  047B  0829               	movf	??___ftmul,w
  7448  047C  00B1               	movwf	___ftmul@cntr
  7449  047D                     l4353:	
  7450  047D  1C23               	btfss	___ftmul@f1,0
  7451  047E  2C85               	goto	l4357
  7452  047F  0826               	movf	___ftmul@f2,w
  7453  0480  07AE               	addwf	___ftmul@f3_as_product,f
  7454  0481  0827               	movf	___ftmul@f2+1,w
  7455  0482  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  7456  0483  0828               	movf	___ftmul@f2+2,w
  7457  0484  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  7458  0485                     l4357:	
  7459  0485  3001               	movlw	1
  7460  0486                     u4005:	
  7461  0486  36A5               	lsrf	___ftmul@f1+2,f
  7462  0487  0CA4               	rrf	___ftmul@f1+1,f
  7463  0488  0CA3               	rrf	___ftmul@f1,f
  7464  0489  0B89               	decfsz	9,f
  7465  048A  2C86               	goto	u4005
  7466  048B  3001               	movlw	1
  7467  048C                     u4015:	
  7468  048C  36B0               	lsrf	___ftmul@f3_as_product+2,f
  7469  048D  0CAF               	rrf	___ftmul@f3_as_product+1,f
  7470  048E  0CAE               	rrf	___ftmul@f3_as_product,f
  7471  048F  0B89               	decfsz	9,f
  7472  0490  2C8C               	goto	u4015
  7473  0491  3001               	movlw	1
  7474  0492  02B1               	subwf	___ftmul@cntr,f
  7475  0493  1D03               	btfss	3,2
  7476  0494  2C7D               	goto	l4353
  7477  0495  082E               	movf	___ftmul@f3_as_product,w
  7478  0496  00F1               	movwf	?___ftpack
  7479  0497  082F               	movf	___ftmul@f3_as_product+1,w
  7480  0498  00F2               	movwf	?___ftpack+1
  7481  0499  0830               	movf	___ftmul@f3_as_product+2,w
  7482  049A  00F3               	movwf	?___ftpack+2
  7483  049B  082D               	movf	___ftmul@exp,w
  7484  049C  00A9               	movwf	??___ftmul
  7485  049D  0829               	movf	??___ftmul,w
  7486  049E  00F4               	movwf	?___ftpack+3
  7487  049F  0832               	movf	___ftmul@sign,w
  7488  04A0  00AA               	movwf	??___ftmul+1
  7489  04A1  082A               	movf	??___ftmul+1,w
  7490  04A2  00F5               	movwf	?___ftpack+4
  7491  04A3  3186  2641         	fcall	___ftpack
  7492  04A5  0871               	movf	?___ftpack,w
  7493  04A6  0020               	movlb	0	; select bank0
  7494  04A7  00A3               	movwf	?___ftmul
  7495  04A8  0872               	movf	?___ftpack+1,w
  7496  04A9  00A4               	movwf	?___ftmul+1
  7497  04AA  0873               	movf	?___ftpack+2,w
  7498  04AB  00A5               	movwf	?___ftmul+2
  7499  04AC  0008               	return
  7500  04AD                     __end_of___ftmul:	
  7501                           
  7502                           	psect	text43
  7503  04AD                     __ptext43:	
  7504 ;; *************** function ___ftdiv *****************
  7505 ;; Defined at:
  7506 ;;		line 50 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftdiv.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  f2              3   19[BANK0 ] float 
  7509 ;;  f1              3   22[BANK0 ] float 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  f3              3   30[BANK0 ] float 
  7512 ;;  sign            1   34[BANK0 ] unsigned char 
  7513 ;;  exp             1   33[BANK0 ] unsigned char 
  7514 ;;  cntr            1   29[BANK0 ] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  3   19[BANK0 ] float 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, pclath, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7524 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;Total ram usage:       16 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    3
  7531 ;; This function calls:
  7532 ;;		___ftpack
  7533 ;; This function is called by:
  7534 ;;		_ADCTask
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           
  7539                           ;psect for function ___ftdiv
  7540  04AD                     ___ftdiv:	
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7544  04AD  0020               	movlb	0	; select bank0
  7545  04AE  0836               	movf	___ftdiv@f1,w
  7546  04AF  00B9               	movwf	??___ftdiv
  7547  04B0  0837               	movf	___ftdiv@f1+1,w
  7548  04B1  00BA               	movwf	??___ftdiv+1
  7549  04B2  0838               	movf	___ftdiv@f1+2,w
  7550  04B3  00BB               	movwf	??___ftdiv+2
  7551  04B4  1003               	clrc
  7552  04B5  0D3A               	rlf	??___ftdiv+1,w
  7553  04B6  0D3B               	rlf	??___ftdiv+2,w
  7554  04B7  00BC               	movwf	??___ftdiv+3
  7555  04B8  083C               	movf	??___ftdiv+3,w
  7556  04B9  00C1               	movwf	___ftdiv@exp
  7557  04BA  08C1               	movf	___ftdiv@exp,f
  7558  04BB  1D03               	skipz
  7559  04BC  2CC4               	goto	l4281
  7560  04BD  3000               	movlw	0
  7561  04BE  00B3               	movwf	?___ftdiv
  7562  04BF  3000               	movlw	0
  7563  04C0  00B4               	movwf	?___ftdiv+1
  7564  04C1  3000               	movlw	0
  7565  04C2  00B5               	movwf	?___ftdiv+2
  7566  04C3  0008               	return
  7567  04C4                     l4281:	
  7568  04C4  0833               	movf	___ftdiv@f2,w
  7569  04C5  00B9               	movwf	??___ftdiv
  7570  04C6  0834               	movf	___ftdiv@f2+1,w
  7571  04C7  00BA               	movwf	??___ftdiv+1
  7572  04C8  0835               	movf	___ftdiv@f2+2,w
  7573  04C9  00BB               	movwf	??___ftdiv+2
  7574  04CA  1003               	clrc
  7575  04CB  0D3A               	rlf	??___ftdiv+1,w
  7576  04CC  0D3B               	rlf	??___ftdiv+2,w
  7577  04CD  00BC               	movwf	??___ftdiv+3
  7578  04CE  083C               	movf	??___ftdiv+3,w
  7579  04CF  00C2               	movwf	___ftdiv@sign
  7580  04D0  08C2               	movf	___ftdiv@sign,f
  7581  04D1  1D03               	skipz
  7582  04D2  2CDA               	goto	l4287
  7583  04D3  3000               	movlw	0
  7584  04D4  00B3               	movwf	?___ftdiv
  7585  04D5  3000               	movlw	0
  7586  04D6  00B4               	movwf	?___ftdiv+1
  7587  04D7  3000               	movlw	0
  7588  04D8  00B5               	movwf	?___ftdiv+2
  7589  04D9  0008               	return
  7590  04DA                     l4287:	
  7591  04DA  3000               	movlw	0
  7592  04DB  00BE               	movwf	___ftdiv@f3
  7593  04DC  3000               	movlw	0
  7594  04DD  00BF               	movwf	___ftdiv@f3+1
  7595  04DE  3000               	movlw	0
  7596  04DF  00C0               	movwf	___ftdiv@f3+2
  7597  04E0  3089               	movlw	137
  7598  04E1  0742               	addwf	___ftdiv@sign,w
  7599  04E2  00B9               	movwf	??___ftdiv
  7600  04E3  0839               	movf	??___ftdiv,w
  7601  04E4  02C1               	subwf	___ftdiv@exp,f
  7602  04E5  0836               	movf	___ftdiv@f1,w
  7603  04E6  00B9               	movwf	??___ftdiv
  7604  04E7  0837               	movf	___ftdiv@f1+1,w
  7605  04E8  00BA               	movwf	??___ftdiv+1
  7606  04E9  0838               	movf	___ftdiv@f1+2,w
  7607  04EA  00BB               	movwf	??___ftdiv+2
  7608  04EB  3010               	movlw	16
  7609  04EC                     u3855:	
  7610  04EC  36BB               	lsrf	??___ftdiv+2,f
  7611  04ED  0CBA               	rrf	??___ftdiv+1,f
  7612  04EE  0CB9               	rrf	??___ftdiv,f
  7613  04EF  0B89               	decfsz	9,f
  7614  04F0  2CEC               	goto	u3855
  7615  04F1  0839               	movf	??___ftdiv,w
  7616  04F2  00BC               	movwf	??___ftdiv+3
  7617  04F3  083C               	movf	??___ftdiv+3,w
  7618  04F4  00C2               	movwf	___ftdiv@sign
  7619  04F5  0833               	movf	___ftdiv@f2,w
  7620  04F6  00B9               	movwf	??___ftdiv
  7621  04F7  0834               	movf	___ftdiv@f2+1,w
  7622  04F8  00BA               	movwf	??___ftdiv+1
  7623  04F9  0835               	movf	___ftdiv@f2+2,w
  7624  04FA  00BB               	movwf	??___ftdiv+2
  7625  04FB  3010               	movlw	16
  7626  04FC                     u3865:	
  7627  04FC  36BB               	lsrf	??___ftdiv+2,f
  7628  04FD  0CBA               	rrf	??___ftdiv+1,f
  7629  04FE  0CB9               	rrf	??___ftdiv,f
  7630  04FF  0B89               	decfsz	9,f
  7631  0500  2CFC               	goto	u3865
  7632  0501  0839               	movf	??___ftdiv,w
  7633  0502  00BC               	movwf	??___ftdiv+3
  7634  0503  083C               	movf	??___ftdiv+3,w
  7635  0504  06C2               	xorwf	___ftdiv@sign,f
  7636  0505  3080               	movlw	128
  7637  0506  00B9               	movwf	??___ftdiv
  7638  0507  0839               	movf	??___ftdiv,w
  7639  0508  05C2               	andwf	___ftdiv@sign,f
  7640  0509  17B7               	bsf	___ftdiv@f1+1,7
  7641  050A  30FF               	movlw	255
  7642  050B  05B6               	andwf	___ftdiv@f1,f
  7643  050C  30FF               	movlw	255
  7644  050D  05B7               	andwf	___ftdiv@f1+1,f
  7645  050E  3000               	movlw	0
  7646  050F  05B8               	andwf	___ftdiv@f1+2,f
  7647  0510  17B4               	bsf	___ftdiv@f2+1,7
  7648  0511  30FF               	movlw	255
  7649  0512  05B3               	andwf	___ftdiv@f2,f
  7650  0513  30FF               	movlw	255
  7651  0514  05B4               	andwf	___ftdiv@f2+1,f
  7652  0515  3000               	movlw	0
  7653  0516  05B5               	andwf	___ftdiv@f2+2,f
  7654  0517  3018               	movlw	24
  7655  0518  00B9               	movwf	??___ftdiv
  7656  0519  0839               	movf	??___ftdiv,w
  7657  051A  00BD               	movwf	___ftdiv@cntr
  7658  051B                     l4301:	
  7659  051B  3001               	movlw	1
  7660  051C                     u3875:	
  7661  051C  35BE               	lslf	___ftdiv@f3,f
  7662  051D  0DBF               	rlf	___ftdiv@f3+1,f
  7663  051E  0DC0               	rlf	___ftdiv@f3+2,f
  7664  051F  0B89               	decfsz	9,f
  7665  0520  2D1C               	goto	u3875
  7666  0521  0835               	movf	___ftdiv@f2+2,w
  7667  0522  0238               	subwf	___ftdiv@f1+2,w
  7668  0523  1D03               	skipz
  7669  0524  2D2B               	goto	u3885
  7670  0525  0834               	movf	___ftdiv@f2+1,w
  7671  0526  0237               	subwf	___ftdiv@f1+1,w
  7672  0527  1D03               	skipz
  7673  0528  2D2B               	goto	u3885
  7674  0529  0833               	movf	___ftdiv@f2,w
  7675  052A  0236               	subwf	___ftdiv@f1,w
  7676  052B                     u3885:	
  7677  052B  1C03               	skipc
  7678  052C  2D34               	goto	l4309
  7679  052D  0833               	movf	___ftdiv@f2,w
  7680  052E  02B6               	subwf	___ftdiv@f1,f
  7681  052F  0834               	movf	___ftdiv@f2+1,w
  7682  0530  3BB7               	subwfb	___ftdiv@f1+1,f
  7683  0531  0835               	movf	___ftdiv@f2+2,w
  7684  0532  3BB8               	subwfb	___ftdiv@f1+2,f
  7685  0533  143E               	bsf	___ftdiv@f3,0
  7686  0534                     l4309:	
  7687  0534  3001               	movlw	1
  7688  0535                     u3895:	
  7689  0535  35B6               	lslf	___ftdiv@f1,f
  7690  0536  0DB7               	rlf	___ftdiv@f1+1,f
  7691  0537  0DB8               	rlf	___ftdiv@f1+2,f
  7692  0538  0B89               	decfsz	9,f
  7693  0539  2D35               	goto	u3895
  7694  053A  3001               	movlw	1
  7695  053B  02BD               	subwf	___ftdiv@cntr,f
  7696  053C  1D03               	btfss	3,2
  7697  053D  2D1B               	goto	l4301
  7698  053E  083E               	movf	___ftdiv@f3,w
  7699  053F  00F1               	movwf	?___ftpack
  7700  0540  083F               	movf	___ftdiv@f3+1,w
  7701  0541  00F2               	movwf	?___ftpack+1
  7702  0542  0840               	movf	___ftdiv@f3+2,w
  7703  0543  00F3               	movwf	?___ftpack+2
  7704  0544  0841               	movf	___ftdiv@exp,w
  7705  0545  00B9               	movwf	??___ftdiv
  7706  0546  0839               	movf	??___ftdiv,w
  7707  0547  00F4               	movwf	?___ftpack+3
  7708  0548  0842               	movf	___ftdiv@sign,w
  7709  0549  00BA               	movwf	??___ftdiv+1
  7710  054A  083A               	movf	??___ftdiv+1,w
  7711  054B  00F5               	movwf	?___ftpack+4
  7712  054C  3186  2641         	fcall	___ftpack
  7713  054E  0871               	movf	?___ftpack,w
  7714  054F  0020               	movlb	0	; select bank0
  7715  0550  00B3               	movwf	?___ftdiv
  7716  0551  0872               	movf	?___ftpack+1,w
  7717  0552  00B4               	movwf	?___ftdiv+1
  7718  0553  0873               	movf	?___ftpack+2,w
  7719  0554  00B5               	movwf	?___ftdiv+2
  7720  0555  0008               	return
  7721  0556                     __end_of___ftdiv:	
  7722                           
  7723                           	psect	text44
  7724  018B                     __ptext44:	
  7725 ;; *************** function ___ftadd *****************
  7726 ;; Defined at:
  7727 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;  f1              3   35[BANK0 ] float 
  7730 ;;  f2              3   38[BANK0 ] float 
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  exp1            1   47[BANK0 ] unsigned char 
  7733 ;;  exp2            1   46[BANK0 ] unsigned char 
  7734 ;;  sign            1   45[BANK0 ] unsigned char 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  3   35[BANK0 ] float 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0, pclath, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7744 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;Total ram usage:       13 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    3
  7751 ;; This function calls:
  7752 ;;		___ftpack
  7753 ;; This function is called by:
  7754 ;;		_ADCTask
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function ___ftadd
  7760  018B                     ___ftadd:	
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7764  018B  0020               	movlb	0	; select bank0
  7765  018C  0843               	movf	___ftadd@f1,w
  7766  018D  00C9               	movwf	??___ftadd
  7767  018E  0844               	movf	___ftadd@f1+1,w
  7768  018F  00CA               	movwf	??___ftadd+1
  7769  0190  0845               	movf	___ftadd@f1+2,w
  7770  0191  00CB               	movwf	??___ftadd+2
  7771  0192  1003               	clrc
  7772  0193  0D4A               	rlf	??___ftadd+1,w
  7773  0194  0D4B               	rlf	??___ftadd+2,w
  7774  0195  00CC               	movwf	??___ftadd+3
  7775  0196  084C               	movf	??___ftadd+3,w
  7776  0197  00CF               	movwf	___ftadd@exp1
  7777  0198  0846               	movf	___ftadd@f2,w
  7778  0199  00C9               	movwf	??___ftadd
  7779  019A  0847               	movf	___ftadd@f2+1,w
  7780  019B  00CA               	movwf	??___ftadd+1
  7781  019C  0848               	movf	___ftadd@f2+2,w
  7782  019D  00CB               	movwf	??___ftadd+2
  7783  019E  1003               	clrc
  7784  019F  0D4A               	rlf	??___ftadd+1,w
  7785  01A0  0D4B               	rlf	??___ftadd+2,w
  7786  01A1  00CC               	movwf	??___ftadd+3
  7787  01A2  084C               	movf	??___ftadd+3,w
  7788  01A3  00CE               	movwf	___ftadd@exp2
  7789  01A4  084F               	movf	___ftadd@exp1,w
  7790  01A5  1903               	btfsc	3,2
  7791  01A6  29B3               	goto	l4211
  7792  01A7  084E               	movf	___ftadd@exp2,w
  7793  01A8  024F               	subwf	___ftadd@exp1,w
  7794  01A9  1803               	skipnc
  7795  01AA  29BA               	goto	l4215
  7796  01AB  034F               	decf	___ftadd@exp1,w
  7797  01AC  3AFF               	xorlw	255
  7798  01AD  074E               	addwf	___ftadd@exp2,w
  7799  01AE  00C9               	movwf	??___ftadd
  7800  01AF  3019               	movlw	25
  7801  01B0  0249               	subwf	??___ftadd,w
  7802  01B1  1C03               	skipc
  7803  01B2  29BA               	goto	l4215
  7804  01B3                     l4211:	
  7805  01B3  0846               	movf	___ftadd@f2,w
  7806  01B4  00C3               	movwf	?___ftadd
  7807  01B5  0847               	movf	___ftadd@f2+1,w
  7808  01B6  00C4               	movwf	?___ftadd+1
  7809  01B7  0848               	movf	___ftadd@f2+2,w
  7810  01B8  00C5               	movwf	?___ftadd+2
  7811  01B9  0008               	return
  7812  01BA                     l4215:	
  7813  01BA  084E               	movf	___ftadd@exp2,w
  7814  01BB  1903               	btfsc	3,2
  7815  01BC  0008               	return
  7816  01BD  084F               	movf	___ftadd@exp1,w
  7817  01BE  024E               	subwf	___ftadd@exp2,w
  7818  01BF  1803               	skipnc
  7819  01C0  29C9               	goto	l4221
  7820  01C1  034E               	decf	___ftadd@exp2,w
  7821  01C2  3AFF               	xorlw	255
  7822  01C3  074F               	addwf	___ftadd@exp1,w
  7823  01C4  00C9               	movwf	??___ftadd
  7824  01C5  3019               	movlw	25
  7825  01C6  0249               	subwf	??___ftadd,w
  7826  01C7  1803               	btfsc	3,0
  7827  01C8  0008               	return
  7828  01C9                     l4221:	
  7829  01C9  3006               	movlw	6
  7830  01CA  00C9               	movwf	??___ftadd
  7831  01CB  0849               	movf	??___ftadd,w
  7832  01CC  00CD               	movwf	___ftadd@sign
  7833  01CD  1BC5               	btfsc	___ftadd@f1+2,7
  7834  01CE  17CD               	bsf	___ftadd@sign,7
  7835  01CF  1BC8               	btfsc	___ftadd@f2+2,7
  7836  01D0  174D               	bsf	___ftadd@sign,6
  7837  01D1  17C4               	bsf	___ftadd@f1+1,7
  7838  01D2  30FF               	movlw	255
  7839  01D3  05C3               	andwf	___ftadd@f1,f
  7840  01D4  30FF               	movlw	255
  7841  01D5  05C4               	andwf	___ftadd@f1+1,f
  7842  01D6  3000               	movlw	0
  7843  01D7  05C5               	andwf	___ftadd@f1+2,f
  7844  01D8  17C7               	bsf	___ftadd@f2+1,7
  7845  01D9  30FF               	movlw	255
  7846  01DA  05C6               	andwf	___ftadd@f2,f
  7847  01DB  30FF               	movlw	255
  7848  01DC  05C7               	andwf	___ftadd@f2+1,f
  7849  01DD  3000               	movlw	0
  7850  01DE  05C8               	andwf	___ftadd@f2+2,f
  7851  01DF  084E               	movf	___ftadd@exp2,w
  7852  01E0  024F               	subwf	___ftadd@exp1,w
  7853  01E1  1803               	skipnc
  7854  01E2  2A05               	goto	l4243
  7855  01E3                     l4233:	
  7856  01E3  3001               	movlw	1
  7857  01E4                     u3695:	
  7858  01E4  35C6               	lslf	___ftadd@f2,f
  7859  01E5  0DC7               	rlf	___ftadd@f2+1,f
  7860  01E6  0DC8               	rlf	___ftadd@f2+2,f
  7861  01E7  0B89               	decfsz	9,f
  7862  01E8  29E4               	goto	u3695
  7863  01E9  3001               	movlw	1
  7864  01EA  02CE               	subwf	___ftadd@exp2,f
  7865  01EB  084E               	movf	___ftadd@exp2,w
  7866  01EC  064F               	xorwf	___ftadd@exp1,w
  7867  01ED  1903               	skipnz
  7868  01EE  2A00               	goto	l4241
  7869  01EF  3001               	movlw	1
  7870  01F0  02CD               	subwf	___ftadd@sign,f
  7871  01F1  084D               	movf	___ftadd@sign,w
  7872  01F2  3907               	andlw	7
  7873  01F3  1903               	btfsc	3,2
  7874  01F4  2A00               	goto	l4241
  7875  01F5  29E3               	goto	l4233
  7876  01F6                     l4239:	
  7877  01F6  3001               	movlw	1
  7878  01F7                     u3725:	
  7879  01F7  36C5               	lsrf	___ftadd@f1+2,f
  7880  01F8  0CC4               	rrf	___ftadd@f1+1,f
  7881  01F9  0CC3               	rrf	___ftadd@f1,f
  7882  01FA  0B89               	decfsz	9,f
  7883  01FB  29F7               	goto	u3725
  7884  01FC  3001               	movlw	1
  7885  01FD  00C9               	movwf	??___ftadd
  7886  01FE  0849               	movf	??___ftadd,w
  7887  01FF  07CF               	addwf	___ftadd@exp1,f
  7888  0200                     l4241:	
  7889  0200  084F               	movf	___ftadd@exp1,w
  7890  0201  064E               	xorwf	___ftadd@exp2,w
  7891  0202  1903               	btfsc	3,2
  7892  0203  2A2A               	goto	l856
  7893  0204  29F6               	goto	l4239
  7894  0205                     l4243:	
  7895  0205  084F               	movf	___ftadd@exp1,w
  7896  0206  024E               	subwf	___ftadd@exp2,w
  7897  0207  1803               	skipnc
  7898  0208  2A2A               	goto	l856
  7899  0209                     l4245:	
  7900  0209  3001               	movlw	1
  7901  020A                     u3755:	
  7902  020A  35C3               	lslf	___ftadd@f1,f
  7903  020B  0DC4               	rlf	___ftadd@f1+1,f
  7904  020C  0DC5               	rlf	___ftadd@f1+2,f
  7905  020D  0B89               	decfsz	9,f
  7906  020E  2A0A               	goto	u3755
  7907  020F  3001               	movlw	1
  7908  0210  02CF               	subwf	___ftadd@exp1,f
  7909  0211  084E               	movf	___ftadd@exp2,w
  7910  0212  064F               	xorwf	___ftadd@exp1,w
  7911  0213  1903               	skipnz
  7912  0214  2A26               	goto	l4253
  7913  0215  3001               	movlw	1
  7914  0216  02CD               	subwf	___ftadd@sign,f
  7915  0217  084D               	movf	___ftadd@sign,w
  7916  0218  3907               	andlw	7
  7917  0219  1903               	btfsc	3,2
  7918  021A  2A26               	goto	l4253
  7919  021B  2A09               	goto	l4245
  7920  021C                     l4251:	
  7921  021C  3001               	movlw	1
  7922  021D                     u3785:	
  7923  021D  36C8               	lsrf	___ftadd@f2+2,f
  7924  021E  0CC7               	rrf	___ftadd@f2+1,f
  7925  021F  0CC6               	rrf	___ftadd@f2,f
  7926  0220  0B89               	decfsz	9,f
  7927  0221  2A1D               	goto	u3785
  7928  0222  3001               	movlw	1
  7929  0223  00C9               	movwf	??___ftadd
  7930  0224  0849               	movf	??___ftadd,w
  7931  0225  07CE               	addwf	___ftadd@exp2,f
  7932  0226                     l4253:	
  7933  0226  084F               	movf	___ftadd@exp1,w
  7934  0227  064E               	xorwf	___ftadd@exp2,w
  7935  0228  1D03               	skipz
  7936  0229  2A1C               	goto	l4251
  7937  022A                     l856:	
  7938  022A  1FCD               	btfss	___ftadd@sign,7
  7939  022B  2A3C               	goto	l4257
  7940  022C  30FF               	movlw	255
  7941  022D  06C3               	xorwf	___ftadd@f1,f
  7942  022E  30FF               	movlw	255
  7943  022F  06C4               	xorwf	___ftadd@f1+1,f
  7944  0230  30FF               	movlw	255
  7945  0231  06C5               	xorwf	___ftadd@f1+2,f
  7946  0232  3001               	movlw	1
  7947  0233  07C3               	addwf	___ftadd@f1,f
  7948  0234  3000               	movlw	0
  7949  0235  1803               	skipnc
  7950  0236  3001               	movlw	1
  7951  0237  07C4               	addwf	___ftadd@f1+1,f
  7952  0238  3000               	movlw	0
  7953  0239  1803               	skipnc
  7954  023A  3001               	movlw	1
  7955  023B  07C5               	addwf	___ftadd@f1+2,f
  7956  023C                     l4257:	
  7957  023C  1F4D               	btfss	___ftadd@sign,6
  7958  023D  2A4E               	goto	l4261
  7959  023E  30FF               	movlw	255
  7960  023F  06C6               	xorwf	___ftadd@f2,f
  7961  0240  30FF               	movlw	255
  7962  0241  06C7               	xorwf	___ftadd@f2+1,f
  7963  0242  30FF               	movlw	255
  7964  0243  06C8               	xorwf	___ftadd@f2+2,f
  7965  0244  3001               	movlw	1
  7966  0245  07C6               	addwf	___ftadd@f2,f
  7967  0246  3000               	movlw	0
  7968  0247  1803               	skipnc
  7969  0248  3001               	movlw	1
  7970  0249  07C7               	addwf	___ftadd@f2+1,f
  7971  024A  3000               	movlw	0
  7972  024B  1803               	skipnc
  7973  024C  3001               	movlw	1
  7974  024D  07C8               	addwf	___ftadd@f2+2,f
  7975  024E                     l4261:	
  7976  024E  01CD               	clrf	___ftadd@sign
  7977  024F  0843               	movf	___ftadd@f1,w
  7978  0250  07C6               	addwf	___ftadd@f2,f
  7979  0251  0844               	movf	___ftadd@f1+1,w
  7980  0252  3DC7               	addwfc	___ftadd@f2+1,f
  7981  0253  0845               	movf	___ftadd@f1+2,w
  7982  0254  3DC8               	addwfc	___ftadd@f2+2,f
  7983  0255  1FC8               	btfss	___ftadd@f2+2,7
  7984  0256  2A69               	goto	l4271
  7985  0257  30FF               	movlw	255
  7986  0258  06C6               	xorwf	___ftadd@f2,f
  7987  0259  30FF               	movlw	255
  7988  025A  06C7               	xorwf	___ftadd@f2+1,f
  7989  025B  30FF               	movlw	255
  7990  025C  06C8               	xorwf	___ftadd@f2+2,f
  7991  025D  3001               	movlw	1
  7992  025E  07C6               	addwf	___ftadd@f2,f
  7993  025F  3000               	movlw	0
  7994  0260  1803               	skipnc
  7995  0261  3001               	movlw	1
  7996  0262  07C7               	addwf	___ftadd@f2+1,f
  7997  0263  3000               	movlw	0
  7998  0264  1803               	skipnc
  7999  0265  3001               	movlw	1
  8000  0266  07C8               	addwf	___ftadd@f2+2,f
  8001  0267  01CD               	clrf	___ftadd@sign
  8002  0268  0ACD               	incf	___ftadd@sign,f
  8003  0269                     l4271:	
  8004  0269  0846               	movf	___ftadd@f2,w
  8005  026A  00F1               	movwf	?___ftpack
  8006  026B  0847               	movf	___ftadd@f2+1,w
  8007  026C  00F2               	movwf	?___ftpack+1
  8008  026D  0848               	movf	___ftadd@f2+2,w
  8009  026E  00F3               	movwf	?___ftpack+2
  8010  026F  084F               	movf	___ftadd@exp1,w
  8011  0270  00C9               	movwf	??___ftadd
  8012  0271  0849               	movf	??___ftadd,w
  8013  0272  00F4               	movwf	?___ftpack+3
  8014  0273  084D               	movf	___ftadd@sign,w
  8015  0274  00CA               	movwf	??___ftadd+1
  8016  0275  084A               	movf	??___ftadd+1,w
  8017  0276  00F5               	movwf	?___ftpack+4
  8018  0277  3186  2641         	fcall	___ftpack
  8019  0279  0871               	movf	?___ftpack,w
  8020  027A  0020               	movlb	0	; select bank0
  8021  027B  00C3               	movwf	?___ftadd
  8022  027C  0872               	movf	?___ftpack+1,w
  8023  027D  00C4               	movwf	?___ftadd+1
  8024  027E  0873               	movf	?___ftpack+2,w
  8025  027F  00C5               	movwf	?___ftadd+2
  8026  0280  0008               	return
  8027  0281                     __end_of___ftadd:	
  8028                           
  8029                           	psect	text45
  8030  0E38                     __ptext45:	
  8031 ;; *************** function ___awtoft *****************
  8032 ;; Defined at:
  8033 ;;		line 33 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awtoft.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;  c               2    9[COMMON] int 
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  sign            1    2[BANK0 ] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  3    9[COMMON] float 
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0, pclath, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        6 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    3
  8054 ;; This function calls:
  8055 ;;		___ftpack
  8056 ;; This function is called by:
  8057 ;;		_ADCTask
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           
  8062                           ;psect for function ___awtoft
  8063  0E38                     ___awtoft:	
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8067  0E38  0020               	movlb	0	; select bank0
  8068  0E39  01A2               	clrf	___awtoft@sign
  8069  0E3A  1FFA               	btfss	___awtoft@c+1,7
  8070  0E3B  2E43               	goto	l4199
  8071  0E3C  09F9               	comf	___awtoft@c,f
  8072  0E3D  09FA               	comf	___awtoft@c+1,f
  8073  0E3E  0AF9               	incf	___awtoft@c,f
  8074  0E3F  1903               	skipnz
  8075  0E40  0AFA               	incf	___awtoft@c+1,f
  8076  0E41  01A2               	clrf	___awtoft@sign
  8077  0E42  0AA2               	incf	___awtoft@sign,f
  8078  0E43                     l4199:	
  8079  0E43  0879               	movf	___awtoft@c,w
  8080  0E44  00F1               	movwf	?___ftpack
  8081  0E45  087A               	movf	___awtoft@c+1,w
  8082  0E46  00F2               	movwf	?___ftpack+1
  8083  0E47  01F3               	clrf	?___ftpack+2
  8084  0E48  308E               	movlw	142
  8085  0E49  00A0               	movwf	??___awtoft
  8086  0E4A  0820               	movf	??___awtoft,w
  8087  0E4B  00F4               	movwf	?___ftpack+3
  8088  0E4C  0822               	movf	___awtoft@sign,w
  8089  0E4D  00A1               	movwf	??___awtoft+1
  8090  0E4E  0821               	movf	??___awtoft+1,w
  8091  0E4F  00F5               	movwf	?___ftpack+4
  8092  0E50  3186  2641         	fcall	___ftpack
  8093  0E52  0871               	movf	?___ftpack,w
  8094  0E53  00F9               	movwf	?___awtoft
  8095  0E54  0872               	movf	?___ftpack+1,w
  8096  0E55  00FA               	movwf	?___awtoft+1
  8097  0E56  0873               	movf	?___ftpack+2,w
  8098  0E57  00FB               	movwf	?___awtoft+2
  8099  0E58  0008               	return
  8100  0E59                     __end_of___awtoft:	
  8101                           
  8102                           	psect	text46
  8103  0641                     __ptext46:	
  8104 ;; *************** function ___ftpack *****************
  8105 ;; Defined at:
  8106 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  arg             3    1[COMMON] unsigned um
  8109 ;;  exp             1    4[COMMON] unsigned char 
  8110 ;;  sign            1    5[COMMON] unsigned char 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  3    1[COMMON] float 
  8115 ;; Registers used:
  8116 ;;		wreg, status,2, status,0
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8122 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;Total ram usage:        8 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    2
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		___awtoft
  8133 ;;		___ftadd
  8134 ;;		___ftdiv
  8135 ;;		___ftmul
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           
  8140                           ;psect for function ___ftpack
  8141  0641                     ___ftpack:	
  8142                           
  8143                           ;incstack = 0
  8144                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8145  0641  0874               	movf	___ftpack@exp,w
  8146  0642  1903               	btfsc	3,2
  8147  0643  2E49               	goto	l4165
  8148  0644  0873               	movf	___ftpack@arg+2,w
  8149  0645  0472               	iorwf	___ftpack@arg+1,w
  8150  0646  0471               	iorwf	___ftpack@arg,w
  8151  0647  1D03               	skipz
  8152  0648  2E5A               	goto	l4171
  8153  0649                     l4165:	
  8154  0649  3000               	movlw	0
  8155  064A  00F1               	movwf	?___ftpack
  8156  064B  3000               	movlw	0
  8157  064C  00F2               	movwf	?___ftpack+1
  8158  064D  3000               	movlw	0
  8159  064E  00F3               	movwf	?___ftpack+2
  8160  064F  0008               	return
  8161  0650                     l4169:	
  8162  0650  3001               	movlw	1
  8163  0651  00F6               	movwf	??___ftpack
  8164  0652  0876               	movf	??___ftpack,w
  8165  0653  07F4               	addwf	___ftpack@exp,f
  8166  0654  3001               	movlw	1
  8167  0655                     u3505:	
  8168  0655  36F3               	lsrf	___ftpack@arg+2,f
  8169  0656  0CF2               	rrf	___ftpack@arg+1,f
  8170  0657  0CF1               	rrf	___ftpack@arg,f
  8171  0658  0B89               	decfsz	9,f
  8172  0659  2E55               	goto	u3505
  8173  065A                     l4171:	
  8174  065A  30FE               	movlw	254
  8175  065B  0573               	andwf	___ftpack@arg+2,w
  8176  065C  1903               	btfsc	3,2
  8177  065D  2E73               	goto	l827
  8178  065E  2E50               	goto	l4169
  8179  065F                     l4173:	
  8180  065F  3001               	movlw	1
  8181  0660  00F6               	movwf	??___ftpack
  8182  0661  0876               	movf	??___ftpack,w
  8183  0662  07F4               	addwf	___ftpack@exp,f
  8184  0663  3001               	movlw	1
  8185  0664  07F1               	addwf	___ftpack@arg,f
  8186  0665  3000               	movlw	0
  8187  0666  1803               	skipnc
  8188  0667  3001               	movlw	1
  8189  0668  07F2               	addwf	___ftpack@arg+1,f
  8190  0669  3000               	movlw	0
  8191  066A  1803               	skipnc
  8192  066B  3001               	movlw	1
  8193  066C  07F3               	addwf	___ftpack@arg+2,f
  8194  066D  3001               	movlw	1
  8195  066E                     u3525:	
  8196  066E  36F3               	lsrf	___ftpack@arg+2,f
  8197  066F  0CF2               	rrf	___ftpack@arg+1,f
  8198  0670  0CF1               	rrf	___ftpack@arg,f
  8199  0671  0B89               	decfsz	9,f
  8200  0672  2E6E               	goto	u3525
  8201  0673                     l827:	
  8202  0673  30FF               	movlw	255
  8203  0674  0573               	andwf	___ftpack@arg+2,w
  8204  0675  1903               	btfsc	3,2
  8205  0676  2E80               	goto	l4181
  8206  0677  2E5F               	goto	l4173
  8207  0678                     l4179:	
  8208  0678  3001               	movlw	1
  8209  0679  02F4               	subwf	___ftpack@exp,f
  8210  067A  3001               	movlw	1
  8211  067B                     u3545:	
  8212  067B  35F1               	lslf	___ftpack@arg,f
  8213  067C  0DF2               	rlf	___ftpack@arg+1,f
  8214  067D  0DF3               	rlf	___ftpack@arg+2,f
  8215  067E  0B89               	decfsz	9,f
  8216  067F  2E7B               	goto	u3545
  8217  0680                     l4181:	
  8218  0680  1FF2               	btfss	___ftpack@arg+1,7
  8219  0681  2E78               	goto	l4179
  8220  0682  1874               	btfsc	___ftpack@exp,0
  8221  0683  2E8A               	goto	l833
  8222  0684  30FF               	movlw	255
  8223  0685  05F1               	andwf	___ftpack@arg,f
  8224  0686  307F               	movlw	127
  8225  0687  05F2               	andwf	___ftpack@arg+1,f
  8226  0688  30FF               	movlw	255
  8227  0689  05F3               	andwf	___ftpack@arg+2,f
  8228  068A                     l833:	
  8229  068A  1003               	clrc
  8230  068B  0CF4               	rrf	___ftpack@exp,f
  8231  068C  0874               	movf	___ftpack@exp,w
  8232  068D  00F6               	movwf	??___ftpack
  8233  068E  01F7               	clrf	??___ftpack+1
  8234  068F  01F8               	clrf	??___ftpack+2
  8235  0690  3010               	movlw	16
  8236  0691                     u3575:	
  8237  0691  35F6               	lslf	??___ftpack,f
  8238  0692  0DF7               	rlf	??___ftpack+1,f
  8239  0693  0DF8               	rlf	??___ftpack+2,f
  8240  0694  0B89               	decfsz	9,f
  8241  0695  2E91               	goto	u3575
  8242  0696  0876               	movf	??___ftpack,w
  8243  0697  04F1               	iorwf	___ftpack@arg,f
  8244  0698  0877               	movf	??___ftpack+1,w
  8245  0699  04F2               	iorwf	___ftpack@arg+1,f
  8246  069A  0878               	movf	??___ftpack+2,w
  8247  069B  04F3               	iorwf	___ftpack@arg+2,f
  8248  069C  0875               	movf	___ftpack@sign,w
  8249  069D  1903               	btfsc	3,2
  8250  069E  0008               	return
  8251  069F  17F3               	bsf	___ftpack@arg+2,7
  8252  06A0  0008               	return
  8253  06A1                     __end_of___ftpack:	
  8254                           
  8255                           	psect	text47
  8256  0F94                     __ptext47:	
  8257 ;; *************** function _ADCInit *****************
  8258 ;; Defined at:
  8259 ;;		line 26 in file "ADC.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  state           1    wreg     unsigned char 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  state           1    2[COMMON] unsigned char 
  8264 ;; Return value:  Size  Location     Type
  8265 ;;		None               void
  8266 ;; Registers used:
  8267 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;Total ram usage:        2 bytes
  8278 ;; Hardware stack levels used:    1
  8279 ;; Hardware stack levels required when called:    2
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_main
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _ADCInit
  8289  0F94                     _ADCInit:	
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  8293                           ;ADCInit@state stored from wreg
  8294  0F94  00F2               	movwf	ADCInit@state
  8295                           
  8296                           ;ADC.c: 27: switch(state)
  8297  0F95  2FBE               	goto	l3539
  8298  0F96                     l3523:	
  8299                           ;ADC.c: 28: {
  8300                           ;ADC.c: 29: case 0:
  8301                           
  8302                           
  8303                           ;ADC.c: 31: ADCON0=0b00101101; ADCON1=0b00000011; FVRCON=0b10000001; ANSELB|=0b00010010;;
  8304  0F96  302D               	movlw	45
  8305  0F97  0021               	movlb	1	; select bank1
  8306  0F98  009D               	movwf	29	;volatile
  8307  0F99  3003               	movlw	3
  8308  0F9A  009E               	movwf	30	;volatile
  8309  0F9B  3081               	movlw	129
  8310  0F9C  0022               	movlb	2	; select bank2
  8311  0F9D  0097               	movwf	23	;volatile
  8312  0F9E  3012               	movlw	18
  8313  0F9F  00F1               	movwf	??_ADCInit
  8314  0FA0  0871               	movf	??_ADCInit,w
  8315  0FA1  0023               	movlb	3	; select bank3
  8316  0FA2  048D               	iorwf	13,f	;volatile
  8317                           
  8318                           ;ADC.c: 32: break;
  8319  0FA3  0008               	return
  8320  0FA4                     l3527:	
  8321                           ;ADC.c: 33: case 1:
  8322                           
  8323                           
  8324                           ;ADC.c: 35: adc_ch=ADC_CH_BATT;
  8325  0FA4  0021               	movlb	1	; select bank1
  8326  0FA5  01AC               	clrf	_adc_ch^(0+128)
  8327                           
  8328                           ;ADC.c: 36: batt=0;
  8329  0FA6  01AE               	clrf	_batt^(0+128)
  8330                           
  8331                           ;ADC.c: 37: temp=0;
  8332  0FA7  01B3               	clrf	_temp^(0+128)
  8333                           
  8334                           ;ADC.c: 38: battV=0;
  8335  0FA8  3000               	movlw	0
  8336  0FA9  00A0               	movwf	_battV^(0+128)
  8337  0FAA  3000               	movlw	0
  8338  0FAB  00A1               	movwf	(_battV+1)^(0+128)
  8339  0FAC  3000               	movlw	0
  8340  0FAD  00A2               	movwf	(_battV+2)^(0+128)
  8341                           
  8342                           ;ADC.c: 39: tempC=0;
  8343  0FAE  3000               	movlw	0
  8344  0FAF  00A3               	movwf	_tempC^(0+128)
  8345  0FB0  3000               	movlw	0
  8346  0FB1  00A4               	movwf	(_tempC+1)^(0+128)
  8347  0FB2  3000               	movlw	0
  8348  0FB3  00A5               	movwf	(_tempC+2)^(0+128)
  8349                           
  8350                           ;ADC.c: 40: adc_ev.val=0;
  8351  0FB4  01AD               	clrf	_adc_ev^(0+128)
  8352                           
  8353                           ;ADC.c: 41: break;
  8354  0FB5  0008               	return
  8355  0FB6                     l3533:	
  8356                           ;ADC.c: 42: case 2:
  8357                           
  8358                           
  8359                           ;ADC.c: 45: _delay((unsigned long)((10)*(8000000/4000000.0)));
  8360  0FB6  3006               	movlw	6
  8361  0FB7  00F1               	movwf	??_ADCInit
  8362  0FB8                     u4227:	
  8363  0FB8  0BF1               	decfsz	??_ADCInit,f
  8364  0FB9  2FB8               	goto	u4227
  8365  0FBA  0000               	nop
  8366                           
  8367                           ;ADC.c: 47: ADCON0bits.GO=1;
  8368  0FBB  0021               	movlb	1	; select bank1
  8369  0FBC  149D               	bsf	29,1	;volatile
  8370                           
  8371                           ;ADC.c: 49: }
  8372                           
  8373                           ;ADC.c: 48: break;
  8374  0FBD  0008               	return
  8375  0FBE                     l3539:	
  8376  0FBE  0872               	movf	ADCInit@state,w
  8377                           
  8378                           ; Switch size 1, requested type "space"
  8379                           ; Number of cases is 3, Range of values is 0 to 2
  8380                           ; switch strategies available:
  8381                           ; Name         Instructions Cycles
  8382                           ; simple_byte           10     6 (average)
  8383                           ; direct_byte           12     6 (fixed)
  8384                           ; jumptable            260     6 (fixed)
  8385                           ;	Chosen strategy is simple_byte
  8386  0FBF  3A00               	xorlw	0	; case 0
  8387  0FC0  1903               	skipnz
  8388  0FC1  2F96               	goto	l3523
  8389  0FC2  3A01               	xorlw	1	; case 1
  8390  0FC3  1903               	skipnz
  8391  0FC4  2FA4               	goto	l3527
  8392  0FC5  3A03               	xorlw	3	; case 2
  8393  0FC6  1903               	skipnz
  8394  0FC7  2FB6               	goto	l3533
  8395  0FC8  2FC9               	goto	l114
  8396  0FC9                     l114:	
  8397  0FC9  0008               	return
  8398  0FCA                     __end_of_ADCInit:	
  8399                           
  8400                           	psect	text48
  8401  0D80                     __ptext48:	
  8402 ;; *************** function _SPIInit *****************
  8403 ;; Defined at:
  8404 ;;		line 9 in file "SPI.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  state           1    wreg     unsigned char 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  state           1    2[COMMON] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;		None               void
  8411 ;; Registers used:
  8412 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;Total ram usage:        2 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    2
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_main
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _SPIInit
  8434  0D80                     _SPIInit:	
  8435                           
  8436                           ;incstack = 0
  8437                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  8438                           ;SPIInit@state stored from wreg
  8439  0D80  00F2               	movwf	SPIInit@state
  8440                           
  8441                           ;SPI.c: 10: switch(state)
  8442  0D81  2D92               	goto	l3501
  8443  0D82                     l56:	
  8444                           ;SPI.c: 11: {
  8445                           ;SPI.c: 12: case 0:
  8446                           
  8447                           
  8448                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  8449  0D82  0021               	movlb	1	; select bank1
  8450  0D83  160E               	bsf	14,4	;volatile
  8451  0D84  30D7               	movlw	215
  8452  0D85  00F1               	movwf	??_SPIInit
  8453  0D86  0871               	movf	??_SPIInit,w
  8454  0D87  058E               	andwf	14,f	;volatile
  8455  0D88  0024               	movlb	4	; select bank4
  8456  0D89  1295               	bcf	21,5	;volatile
  8457  0D8A  0191               	clrf	17	;volatile
  8458  0D8B  3001               	movlw	1
  8459  0D8C  0095               	movwf	21	;volatile
  8460  0D8D  0196               	clrf	22	;volatile
  8461  0D8E  3040               	movlw	64
  8462  0D8F  0094               	movwf	20	;volatile
  8463  0D90  1695               	bsf	21,5	;volatile
  8464                           
  8465                           ;SPI.c: 22: }
  8466                           
  8467                           ;SPI.c: 21: break;
  8468                           
  8469                           ;SPI.c: 19: case 2:
  8470                           
  8471                           ;SPI.c: 18: break;
  8472                           
  8473                           ;SPI.c: 16: case 1:
  8474                           
  8475                           ;SPI.c: 15: break;
  8476  0D91  0008               	return
  8477  0D92                     l3501:	
  8478  0D92  0872               	movf	SPIInit@state,w
  8479                           
  8480                           ; Switch size 1, requested type "space"
  8481                           ; Number of cases is 3, Range of values is 0 to 2
  8482                           ; switch strategies available:
  8483                           ; Name         Instructions Cycles
  8484                           ; simple_byte           10     6 (average)
  8485                           ; direct_byte           12     6 (fixed)
  8486                           ; jumptable            260     6 (fixed)
  8487                           ;	Chosen strategy is simple_byte
  8488  0D93  3A00               	xorlw	0	; case 0
  8489  0D94  1903               	skipnz
  8490  0D95  2D82               	goto	l56
  8491  0D96  3A01               	xorlw	1	; case 1
  8492  0D97  1903               	skipnz
  8493  0D98  2D9D               	goto	l60
  8494  0D99  3A03               	xorlw	3	; case 2
  8495  0D9A  1903               	skipnz
  8496  0D9B  2D9D               	goto	l60
  8497  0D9C  2D9D               	goto	l60
  8498  0D9D                     l60:	
  8499  0D9D  0008               	return
  8500  0D9E                     __end_of_SPIInit:	
  8501                           
  8502                           	psect	text49
  8503  0DF8                     __ptext49:	
  8504 ;; *************** function _OUTInit *****************
  8505 ;; Defined at:
  8506 ;;		line 7 in file "OUT.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  sta             1    wreg     unsigned char 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  sta             1    2[COMMON] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;		None               void
  8513 ;; Registers used:
  8514 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;Total ram usage:        2 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    2
  8527 ;; This function calls:
  8528 ;;		Nothing
  8529 ;; This function is called by:
  8530 ;;		_main
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           
  8535                           ;psect for function _OUTInit
  8536  0DF8                     _OUTInit:	
  8537                           
  8538                           ;incstack = 0
  8539                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  8540                           ;OUTInit@sta stored from wreg
  8541  0DF8  00F2               	movwf	OUTInit@sta
  8542                           
  8543                           ;OUT.c: 8: switch(sta)
  8544  0DF9  2E12               	goto	l3481
  8545  0DFA                     l3467:	
  8546                           ;OUT.c: 9: {
  8547                           ;OUT.c: 10: case 0:
  8548                           
  8549                           
  8550                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00010111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00010010; ANSELC&=0b00000000; PORTB&=0b11011111; PORTC|=0b10000000;
  8551  0DFA  0021               	movlb	1	; select bank1
  8552  0DFB  018C               	clrf	12	;volatile
  8553  0DFC  3017               	movlw	23
  8554  0DFD  00F1               	movwf	??_OUTInit
  8555  0DFE  0871               	movf	??_OUTInit,w
  8556  0DFF  058D               	andwf	13,f	;volatile
  8557  0E00  3010               	movlw	16
  8558  0E01  00F1               	movwf	??_OUTInit
  8559  0E02  0871               	movf	??_OUTInit,w
  8560  0E03  058E               	andwf	14,f	;volatile
  8561  0E04  0023               	movlb	3	; select bank3
  8562  0E05  018C               	clrf	12	;volatile
  8563  0E06  3012               	movlw	18
  8564  0E07  00F1               	movwf	??_OUTInit
  8565  0E08  0871               	movf	??_OUTInit,w
  8566  0E09  058D               	andwf	13,f	;volatile
  8567  0E0A  018E               	clrf	14	;volatile
  8568  0E0B  30DF               	movlw	223
  8569  0E0C  00F1               	movwf	??_OUTInit
  8570  0E0D  0871               	movf	??_OUTInit,w
  8571  0E0E  0020               	movlb	0	; select bank0
  8572  0E0F  058D               	andwf	13,f	;volatile
  8573  0E10  178E               	bsf	14,7	;volatile
  8574                           
  8575                           ;OUT.c: 20: }
  8576                           
  8577                           ;OUT.c: 13: break;
  8578  0E11  0008               	return
  8579  0E12                     l3481:	
  8580  0E12  0872               	movf	OUTInit@sta,w
  8581                           
  8582                           ; Switch size 1, requested type "space"
  8583                           ; Number of cases is 1, Range of values is 0 to 0
  8584                           ; switch strategies available:
  8585                           ; Name         Instructions Cycles
  8586                           ; simple_byte            4     3 (average)
  8587                           ; direct_byte            8     6 (fixed)
  8588                           ; jumptable            260     6 (fixed)
  8589                           ;	Chosen strategy is simple_byte
  8590  0E13  3A00               	xorlw	0	; case 0
  8591  0E14  1903               	skipnz
  8592  0E15  2DFA               	goto	l3467
  8593  0E16  2E17               	goto	l36
  8594  0E17                     l36:	
  8595  0E17  0008               	return
  8596  0E18                     __end_of_OUTInit:	
  8597                           
  8598                           	psect	text50
  8599  0D17                     __ptext50:	
  8600 ;; *************** function _INInit *****************
  8601 ;; Defined at:
  8602 ;;		line 7 in file "IN.c"
  8603 ;; Parameters:    Size  Location     Type
  8604 ;;  sta             1    wreg     unsigned char 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  sta             1    2[COMMON] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;		None               void
  8609 ;; Registers used:
  8610 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:        2 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    2
  8623 ;; This function calls:
  8624 ;;		Nothing
  8625 ;; This function is called by:
  8626 ;;		_main
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function _INInit
  8632  0D17                     _INInit:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  8636                           ;INInit@sta stored from wreg
  8637  0D17  00F2               	movwf	INInit@sta
  8638                           
  8639                           ;IN.c: 8: switch(sta)
  8640  0D18  2D28               	goto	l3463
  8641  0D19                     l3455:	
  8642                           ;IN.c: 9: {
  8643                           ;IN.c: 10: case 0:
  8644                           
  8645                           
  8646                           ;IN.c: 12: TRISB|=0b00010111; TRISC|=0b00010000; ANSELB&=0b11111010; WPUB=0b00000111;
  8647  0D19  3017               	movlw	23
  8648  0D1A  00F1               	movwf	??_INInit
  8649  0D1B  0871               	movf	??_INInit,w
  8650  0D1C  0021               	movlb	1	; select bank1
  8651  0D1D  048D               	iorwf	13,f	;volatile
  8652  0D1E  160E               	bsf	14,4	;volatile
  8653  0D1F  30FA               	movlw	250
  8654  0D20  00F1               	movwf	??_INInit
  8655  0D21  0871               	movf	??_INInit,w
  8656  0D22  0023               	movlb	3	; select bank3
  8657  0D23  058D               	andwf	13,f	;volatile
  8658  0D24  3007               	movlw	7
  8659  0D25  0024               	movlb	4	; select bank4
  8660  0D26  008D               	movwf	13	;volatile
  8661                           
  8662                           ;IN.c: 20: }
  8663                           
  8664                           ;IN.c: 13: break;
  8665  0D27  0008               	return
  8666  0D28                     l3463:	
  8667  0D28  0872               	movf	INInit@sta,w
  8668                           
  8669                           ; Switch size 1, requested type "space"
  8670                           ; Number of cases is 1, Range of values is 0 to 0
  8671                           ; switch strategies available:
  8672                           ; Name         Instructions Cycles
  8673                           ; simple_byte            4     3 (average)
  8674                           ; direct_byte            8     6 (fixed)
  8675                           ; jumptable            260     6 (fixed)
  8676                           ;	Chosen strategy is simple_byte
  8677  0D29  3A00               	xorlw	0	; case 0
  8678  0D2A  1903               	skipnz
  8679  0D2B  2D19               	goto	l3455
  8680  0D2C  2D2D               	goto	l14
  8681  0D2D                     l14:	
  8682  0D2D  0008               	return
  8683  0D2E                     __end_of_INInit:	
  8684                           
  8685                           	psect	intentry
  8686  0004                     __pintentry:	
  8687 ;; *************** function _INTIsr *****************
  8688 ;; Defined at:
  8689 ;;		line 38 in file "Sensore.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;		None
  8694 ;; Return value:  Size  Location     Type
  8695 ;;		None               void
  8696 ;; Registers used:
  8697 ;;		wreg, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        1 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    1
  8710 ;; This function calls:
  8711 ;;		_SYSInt
  8712 ;; This function is called by:
  8713 ;;		Interrupt level 1
  8714 ;; This function uses a non-reentrant model
  8715 ;;
  8716                           
  8717  0004                     _INTIsr:	
  8718                           
  8719                           ;incstack = 0
  8720                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  8721  0004  3180               	pagesel	$
  8722  0005  0020               	movlb	0	; select bank0
  8723  0006  087F               	movf	127,w
  8724  0007  00F0               	movwf	??_INTIsr
  8725                           
  8726                           ;Sensore.c: 40: if(INTCONbits.T0IF==1)
  8727  0008  1D0B               	btfss	11,2	;volatile
  8728  0009  280D               	goto	i1l3413
  8729                           
  8730                           ;Sensore.c: 41: {
  8731                           ;Sensore.c: 43: INTCONbits.T0IF=0;
  8732  000A  110B               	bcf	11,2	;volatile
  8733                           
  8734                           ;Sensore.c: 46: SYSInt();
  8735  000B  318C  2431         	fcall	_SYSInt
  8736  000D                     i1l3413:	
  8737                           
  8738                           ;Sensore.c: 47: }
  8739                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  8740  000D  0027               	movlb	7	; select bank7
  8741  000E  1916               	btfsc	22,2	;volatile
  8742                           
  8743                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  8744  000F  1116               	bcf	22,2	;volatile
  8745  0010  0870               	movf	??_INTIsr,w
  8746  0011  0020               	movlb	0	; select bank0
  8747  0012  00FF               	movwf	127
  8748  0013  0009               	retfie
  8749  0014                     __end_of_INTIsr:	
  8750                           
  8751                           	psect	text52
  8752  0C31                     __ptext52:	
  8753 ;; *************** function _SYSInt *****************
  8754 ;; Defined at:
  8755 ;;		line 36 in file "SYS.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;		None
  8760 ;; Return value:  Size  Location     Type
  8761 ;;		None               void
  8762 ;; Registers used:
  8763 ;;		wreg
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;Total ram usage:        0 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; This function calls:
  8776 ;;		Nothing
  8777 ;; This function is called by:
  8778 ;;		_INTIsr
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           
  8783                           ;psect for function _SYSInt
  8784  0C31                     _SYSInt:	
  8785                           
  8786                           ;SYS.c: 38: u_SYS_STA.TICK=1;
  8787                           
  8788                           ;incstack = 0
  8789                           ; Regs used in _SYSInt: [wreg]
  8790  0C31  0021               	movlb	1	; select bank1
  8791  0C32  1435               	bsf	_u_SYS_STA^(0+128),0
  8792                           
  8793                           ;SYS.c: 41: TMR0=255-156;
  8794  0C33  3063               	movlw	99
  8795  0C34  0020               	movlb	0	; select bank0
  8796  0C35  0095               	movwf	21	;volatile
  8797  0C36  0008               	return
  8798  0C37                     __end_of_SYSInt:	
  8799  007E                     btemp	set	126	;btemp
  8800  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    5
    Data        55
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80      1      57
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _SYSTask->_CC1Init
    _PGMSelLong->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _CC1Init->_CC1Write
    _RTXReadPkt->_CC1Read
    _RTXReadPkt->_PGMWriteNvm
    _RTXRcvPkt->_CC1Read
    _LEDNormalFlash->_DLYDelay_ms
    _RTXSndPkt->_CC1Read
    _CC1Read->_SPIWrite
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead
    _ADCTask->___awtoft
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SYSTask
    _SYSTask->_PGMSelLong
    _RTXTick->_RTXSendData
    _CC1Init->_CC1Write
    _RTXTask->_RTXReadPkt
    _RTXSendRPgm->_RTXSndPkt
    _RTXStartSendData->_RTXSendData
    _RTXSendData->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite
    _ADCTask->___ftadd
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   19088
                                             72 BANK0      1     1      0
                                              0 BANK1      1     1      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _ADCTask
                            _CC1Init
                            _LEDInit
                            _NVMInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              2     2      0    5775
                                             70 BANK0      2     2      0
                            _CC1Init
                            _DINTick
                           _SLPSleep
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                   _RTXStartSendData
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    1828
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0     990
                                             69 BANK0      1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     473
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _CC1Init                                              2     2      0     557
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                        _DLYDelay_ms
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    5074
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    5074
                                             69 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                   _RTXStartSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1117
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0    2057
                                             12 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (2) _RTXStartSendData                                     0     0      0    1828
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          4     4      0    1828
                                              8 BANK0      4     4      0
                       _LEDFastFlash
                          _RTXSndPkt
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     371
                                              1 COMMON     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    1117
                                              2 BANK0      6     5      1
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2     390
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     130
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1077
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     854
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     854
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     854
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     854
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     192
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     192
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCTask                                              8     8      0    3891
                                             48 BANK0      5     5      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     241
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6     800
                                              3 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6     732
                                             19 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    1537
                                             35 BANK0     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3     445
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTIsr                                               1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (9) _SYSInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _ADCTask
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
     ___ftdiv
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
     ___ftmul
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
     ___lwdiv
   _CC1Init
     _DLYDelay_ms
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _LEDInit
   _NVMInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
         ___fttol
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendData
         _RTXSendData
           _LEDFastFlash
             _DLYDelay_ms
           _RTXSndPkt
             _CC1Strobe
               _SPIWrite
             _CC1Write
               _SPIWrite
             _CC1Read
               _SPIRead
               _SPIWrite
           ___fttol
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
   _SYSInit
   _SYSTask
     _CC1Init
       _DLYDelay_ms
       _CC1Strobe
         _SPIWrite
       _CC1Write
         _SPIWrite
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMTick
     _PGMPgmOff
     _PGMSelDown
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _RTXStartSendData
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
         ___fttol
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
         ___fttol

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      1      39       7       71.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Oct 27 13:25:44 2014

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000            SLPSleep@WPUBTmp 0022  
                       l14 0D2D                         l36 0E17                         l60 0D9D  
            ?_LEDFastFlash 0070                         l56 0D82                         l65 0E23  
                       l74 0D76               ?_DLYDelay_ms 0071               ___ftadd@exp1 004F  
             ___ftadd@exp2 004E               ___ftadd@sign 004D                        l114 0FC9  
                      l231 0C76                        l143 0D30                        l250 02D2  
                      l243 0292                        l171 0F93                        l236 0ED6  
                      l260 0329                        l253 02DB                        l245 029D  
                      l246 02C1                        l191 0C63                        l263 033B  
                      l247 02AC                        l600 07E3                        l193 0C6B  
                      l258 0322                        l291 0F22                        l372 07FF  
                      l293 0F21                        l471 06FA                        l288 0CC9  
                      l459 0EC0                        l833 068A                        l586 0F0C  
                      l827 0673                        l499 03F6                        l675 06A7  
                      l676 06E9                        l677 06EA                        l856 022A  
          __end_of_CC1Init 0F94            __end_of_CC1Read 0D63            __end_of_ADCInit 0FCA  
          __end_of_ADCTask 018B               __CFG_BORV$LO 0000                        wreg 0009  
               _RTXReadPkt 074D            __end_of_DINInit 0CCA            __end_of_DINTask 0DBC  
          __end_of_DINTick 0F35               __CFG_LVP$OFF 0000           _RTXStartSendData 0C2C  
          __end_of_LEDInit 0C6C               ___ftdiv@cntr 003D               ___ftdiv@sign 0042  
                     l4005 0789                       l4101 07BC                       l4033 0713  
                     l4113 07CC                       l4211 01B3                       l4123 07D6  
                     l4107 07C5                       l3501 0D92                       l4221 01C9  
                     l4301 051B                       l4215 01BA                       l3511 0E1A  
                     l4055 0EE9                       l4241 0200                       l4233 01E3  
                     l4401 05C3                       l4073 0F01                       l3523 0F96  
                     l4171 065A                       l4251 021C                       l4243 0205  
                     l4323 0410                       l3507 0E28                       l4403 05C6  
                     l3533 0FB6                       l4181 0680                       l4173 065F  
                     l4165 0649                       l4261 024E                       l4253 0226  
                     l4245 0209                       l4309 0534                       l4341 0461  
                     l4421 0FD2                       l3517 0D7B                       l4077 0F04  
                     l3605 0F8A                       l3455 0D19                       l3463 0D28  
                     l3527 0FA4                       l4271 0269                       l4239 01F6  
                     l4423 0FDE                       l3551 00B6                       l3519 0D64  
                     l4407 05D4                       l4095 07B5                       l3481 0E12  
                     l4169 0650                       l4257 023C                       l4281 04C4  
                     l4353 047D                       l4345 0469                       l4329 0426  
                     l4433 0FF9                       l3553 00C2                       l3545 0047  
                     l4089 07AE                       l3467 0DFA                       l3539 0FBE  
                     l4179 0678                       l3811 0DB2                       l4357 0485  
                     l4429 0FF0                       l3573 0170                       l3645 0C66  
                     l4373 056F                       l4199 0E43                       l4287 04DA  
                     l3559 00C8                       l3583 0179                       l3815 0DB6  
                     l3807 0DAE                       l3751 0304                       l4391 059F  
                     l3655 0DDC                       l3569 015F                       l3585 0182  
                     l3745 02FE                       l3665 0DBE                       l4393 05AD  
                     l3683 0C71                       l3771 0CBB                       l3595 0F67  
                     l3861 07EE                       l3917 0E9F                       l3925 0EB4  
                     l3679 0C6E                       l3775 0CC4                       l3759 0324  
                     l3767 0336                       l4399 05BA                       l3919 0EA5  
                     l3847 060E                       l3697 0EC4                       l3945 034A  
                     l3859 07EB                       l3877 0C8B                       l3869 07F6  
                     l3975 03F0               __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020  
                     u4005 0486                       u4015 048C                       u4105 05BB  
                     u4045 0576                       u4207 0D3D                       _PIE1 0091  
                     _PIE2 0092                       u3505 0655                       u4145 0FD5  
                     u4217 0185                       u4227 0FB8                       u4075 05A0  
                     u3525 066E                       u4165 0FDF                       u4175 0FE9  
                     u3545 067B                       u4185 0FF1                       u3725 01F7  
                     u3575 0691                       u3755 020A                       u3695 01E4  
                     u3855 04EC                       u3935 0432                       u2895 0D36  
                     u3785 021D                       u3865 04FC                       u3945 0442  
                     _PIR1 0011                       _PIR2 0012                       u3875 051C  
                     u3885 052B                       u3965 046A                       u3895 0535  
                     u3975 0470                       _TMR0 0015                       _WPUB 020D  
          __end_of_PGMInit 0800            __end_of_PGMTick 0C82               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000           __end_of_CC1Sleep 0C51                       _batt 00AE  
                     _main 06A1           __end_of_CC1Write 0E7A               ___ftpack@arg 0071  
          __end_of_NVMInit 0C77            __end_of_NVMRead 0EE7               ___ftpack@exp 0074  
                     _temp 00B3            __end_of_SPIInit 0D9E            __end_of_SPIRead 0E38  
                     fsr0h 0005                       fsr1h 0007                       fsr0l 0004  
                     indf0 0000                       indf1 0001                       fsr1l 0006  
                     btemp 007E            __end_of_OUTInit 0E18              __CFG_BOREN$ON 0000  
                     start 0014            __end_of_RTXInit 0EC1          NVMWrite@latchAddr 0063  
          __end_of_RTXTask 0C3D            __end_of_RTXTick 0C9B              __CFG_IESO$OFF 0000  
          __end_of_SYSInit 0F0D            __end_of_SYSTask 07E8               ___ftmul@cntr 0031  
             ___ftmul@sign 0032                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelDown 0070               ___fttol@exp1 0025  
              ?_PGMSelLong 0070               ___fttol@lval 0021                _RTXSendData 033F  
              _RTXSendRPgm 0E7A               SPIInit@state 0072                      ?_main 0070  
          __end_of___ftadd 0281            __end_of___ftdiv 0556            __end_of___ftmul 04AD  
                    _T1CON 0018            __end_of___fttol 05DD         __size_of_PGMPgmOff 0004  
                    _IOCBN 0395                      _IOCBP 0394            __end_of___lwdiv 1000  
                    _PMADR 0191                      _PMDAT 0193                      _TMR1H 0017  
                    _TMR1L 0016                      _PORTB 000D                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
            __CFG_PWRTE$ON 0000                      _battV 00A0                _sys_pgm_sta 00B2  
            ___awtoft@sign 0022          __end_of_CC1Strobe 0D17                      _tempC 00A3  
                    _pktRx 00B9                      _pktTx 00C2              ___ftpack@sign 0075  
                    main@i 00D8           __end_of_SLPSleep 0641           __end_of_NVMWrite 033F  
         __end_of_SPIWrite 0D80               _ADCTask$1362 0052          LEDNormalFlash@num 0078  
                    status 0003                      wtemp0 007E               ?_PGMCheckNvm 0070  
           __CFG_MCLRE$OFF 0000            __initialization 0016               DLYDelay_ms@i 0075  
             __end_of_main 06F8         __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0055  
                ??_CC1Init 007B                  ??_CC1Read 0079                  ??_ADCInit 0071  
           CC1Strobe@e_stb 0078                  ??_ADCTask 0050                     ??_main 0068  
               _cc1PaTable 00D0              ___fttol@sign1 0020               CC1Init@state 0022  
                ??_DINInit 0071               NVMWrite@addr 0071                  ??_DINTask 0071  
                ??_DINTick 0071                 _cc1InitVal 0120                  ??_LEDInit 0071  
             ?_PGMNvmReset 0070                  ??_PGMInit 007C                  ??_PGMTick 0071  
              ?_RTXReadPkt 0070                     _ADCON0 009D                     _ADCON1 009E  
            SPIRead@dstPtr 0074                  ??_NVMInit 0071                  ??_NVMRead 0075  
                   _ADRESH 009C                  ??_SPIInit 0071                  ??_SPIRead 0072  
           _LEDNormalFlash 0DDA                  ??_OUTInit 0071           __end_of___awtoft 0E59  
                   _ANSELA 018C                     _ANSELB 018D                     _ANSELC 018E  
         __end_of___ftpack 06A1        __size_of_PGMReadNvm 0013                  ??_RTXInit 007C  
             ?_PGMWriteNvm 0070        __size_of_PGMSelDown 0008                     i1l3413 000D  
                ??_RTXTask 007C                  ??_RTXTick 007C        __size_of_PGMSelLong 0010  
                   _INTCON 000B                     _FVRCON 0117                  ??_SYSInit 0071  
                   _PMCON1 0195                     _PMCON2 0196                  ??_SYSTask 0066  
                   _INTIsr 0004                     _OSCCON 0099                     _INInit 0D17  
                   _WDTCON 0097          RTXSendData@tmpVal 0029                     _SSPBUF 0211  
            LEDFastFlash@i 0079          __end_of_PGMPgmOff 0C2C                     _SYSInt 0C31  
      RTXReadPkt@numRxByte 0066                     _adc_ch 00AC                     _adc_ev 00AD  
                ??___ftadd 0049             __CFG_STVREN$ON 0000                  ??___ftdiv 0039  
                ??___ftmul 0029                  ??___fttol 0075                  ??___lwdiv 0075  
                   _tmrPgm 006C      ___ftmul@f3_as_product 002E                  ?_CC1Sleep 0070  
     __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077     __end_of_LEDNormalFlash 0DF8  
        __end_of_RTXRcvPkt 0CA9          __end_of_RTXSndPkt 074D       __end_of_LEDFastFlash 0DDA  
  __end_of__initialization 003E                 ___ftadd@f1 0043                 ___ftadd@f2 0046  
               ___ftdiv@f1 0036                 ___ftdiv@f2 0033                 ___ftdiv@f3 003E  
               ___awtoft@c 0079                 ___ftmul@f1 0023                 ___ftmul@f2 0026  
               ___fttol@f1 0071             __pcstackCOMMON 0070               __pidataBANK1 0C59  
             __pidataBANK2 0F35        __size_of_RTXReadPkt 0054   __end_of_RTXStartSendData 0C31  
          NVMWrite@rowAddr 0060                  ?_SLPSleep 0070                  ?_NVMWrite 0071  
          CC1Strobe@cc1Stb 0079                  ?_SPIWrite 0071                 CC1Read@len 0078  
               CC1Read@dst 0077                 ??_CC1Sleep 007A                 ??_CC1Write 007A  
             CC1Write@addr 0020            ?_LEDNormalFlash 0070                 __pbssBANK0 0069  
               __pbssBANK1 00A0                    ?_INTIsr 0070                    ?_INInit 0070  
          __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070                  INInit@sta 0072  
     __size_of_PGMCheckNvm 000C                 __pmaintext 06A1               ??_PGMReadNvm 0078  
          CC1Write@cc1Addr 0021               ??_PGMSelDown 0071               ??_PGMSelLong 0065  
               __pintentry 0004               ?_RTXSendData 0070               ?_RTXSendRPgm 0070  
                  _CC1Init 0F64                    _CC1Read 0D47                    _ADCInit 0F94  
                  _ADCTask 0041          _u_in_sta_currTask 007C                  ?___awtoft 0079  
                ?___ftpack 0071                 ??_SLPSleep 007A                 ??_NVMWrite 0075  
               _cntSndData 00AF                 ??_SPIWrite 0074                    _DINInit 0CB9  
                  _DINTick 0F0D                    _DINTask 0D9E               ADCInit@state 0072  
                  _LEDInit 0C61                    _PGMInit 07E8                    _PGMTick 0C77  
     __size_of_PGMNvmReset 0013                    _SSPCON1 0215                    _SSPCON2 0216  
                  _NVMInit 0C6C                    _NVMRead 0EC1                    _SPIInit 0D80  
                  _SPIRead 0E18                    _SSPSTAT 0214                    _OUTInit 0DF8  
               __stringtab 0800                    _RTXInit 0E9C                    _RTXTick 0C8E  
                  _RTXTask 0C37         __end_of_PGMReadNvm 0CDD                    _SYSInit 0EE7  
                  _SYSTask 07A1         __end_of_PGMSelDown 0C59         __end_of_PGMSelLong 0CB9  
                _CC1Strobe 0D03            __size_of_INTIsr 0010            __size_of_INInit 0017  
     __size_of_PGMWriteNvm 0013            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064                  SPIWrite@i 0076                    ___ftadd 018B  
             RTXInit@state 002C                    ___ftdiv 04AD                    ___ftmul 03F9  
                  ___fttol 0556                    ___lwdiv 0FCA                 ??___awtoft 0020  
               ??___ftpack 0076                    __ptext1 07A1                    __ptext2 0C8E  
                  __ptext3 0CA9                    __ptext4 0C51                    __ptext5 0C28  
                  __ptext6 0C77                    __ptext7 05DD                    __ptext8 0C49  
                  __ptext9 0F0D                    _flg_slp 00B0                    _pgm_cfg 00CB  
                  _pgm_flg 006A      __size_of_LEDFastFlash 001E                  _IOCBFbits 0396  
             ??_RTXReadPkt 0065                    clrloop0 0C44                    _rtx_flg 006B  
             RTXRcvPkt@len 0020               RTXRcvPkt@dst 0023       end_of_initialization 003E  
               _u_in_ev_up 00B8                 ?_CC1Strobe 0070         RTXSndPkt@numRxByte 0025  
                  init_ram 0C3D         RTXSndPkt@numTxByte 0026                    initloop 0C3E  
             RTXSndPkt@len 0022               RTXSndPkt@src 0024               RTXSndPkt@sta 0027  
                _PGMPgmOff 0C28                 _tmrDbncSel 00B4         __end_of_RTXReadPkt 07A1  
               DINInit@sta 0071               _LEDFastFlash 0DBC                  _PORTAbits 000C  
                _PORTBbits 000D                  _PORTCbits 000E                 _tmrLongSel 00AA  
         __CFG_FOSC$INTOSC 0000          __size_of_CC1Sleep 0008          __size_of_CC1Write 0021  
              NVMRead@addr 0071                NVMRead@dest 0073                  _RTXRcvPkt 0C9B  
                _RTXSndPkt 06F8                ___ftdiv@exp 0041             __end_of_INTIsr 0014  
           __end_of_INInit 0D2E             __end_of_SYSInt 0C37                ___ftmul@exp 002D  
               ?_PGMPgmOff 0070                 LEDInit@sta 0071             DLYDelay_ms@val 0071  
        ?_RTXStartSendData 0070              ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C  
     __size_of_RTXSendData 00BA           ??_LEDNormalFlash 0077       __size_of_RTXSendRPgm 0022  
             SYSInit@state 0072          __size_of_SLPSleep 0064          __size_of_NVMWrite 00BE  
        __size_of_SPIWrite 001D        start_initialization 0016                CC1Read@addr 007A  
              NVMWrite@len 0074                   ??_INTIsr 0070                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022  
                 ??_SYSInt 0070             CC1Read@cc1Addr 007B                   ?_CC1Init 0070  
              __pdataBANK1 00D0                   ?_CC1Read 0077                __pdataBANK2 0120  
              SPIWrite@len 0073                   ?_ADCInit 0070                   ?_ADCTask 0070  
                 ?_DINInit 0070                   ?_DINTask 0070                   ?_DINTick 0070  
        __size_of___awtoft 0021          __size_of___ftpack 0060                   ?_LEDInit 0070  
              __pbssCOMMON 007C              __pcstackBANK0 0020              __pcstackBANK1 00D8  
           ADCTask@sumBatt 00A6        __end_of_DLYDelay_ms 0D47                  _s_CC1_FLG 00B1  
                 ?_PGMInit 0070             ADCTask@sumTemp 00A8                   ?_PGMTick 0070  
                 ?_NVMInit 0070                   ?_NVMRead 0071                   ?_SPIInit 0070  
                 ?_SPIRead 0071             NVMWrite@source 0073                   ?_OUTInit 0070  
             PGMInit@state 0066                   ?_RTXInit 0070                   ?_RTXTask 0070  
                 ?_RTXTick 0070                CC1Write@len 0079                   ?_SYSInit 0070  
              CC1Write@src 0077                   ?_SYSTask 0070              ??_PGMCheckNvm 007C  
         ___lwdiv@dividend 0073                ??_PGMPgmOff 0071                   ?___ftadd 0043  
                 ?___ftdiv 0033                   ?___ftmul 0023                   ?___fttol 0071  
                 ?___lwdiv 0071                  _u_SYS_STA 00B5                  __pstrings 0800  
         _u_in_sta_tmpTask 006F                   NVMRead@i 0077                   _CC1Sleep 0C49  
            ??_PGMNvmReset 0065                   SPIRead@i 0075                   _CC1Write 0E59  
         ___lwdiv@quotient 0077              ??_PGMWriteNvm 0078                  _u_flg_din 006E  
              ??_RTXRcvPkt 0021                ??_RTXSndPkt 0023                  clear_ram0 0C43  
                 SYSTask@i 0067                   _PIR1bits 0011        __end_of_PGMCheckNvm 0C8E  
    SLPSleep@OPTION_REGTmp 0024                  _tmrRcvPkt 006D           __size_of_CC1Init 0030  
         __size_of_CC1Read 001C                   _SLPSleep 05DD                _DLYDelay_ms 0D2E  
                 _NVMWrite 0281           __size_of_ADCInit 0036                 _ADCON0bits 009D  
         __size_of_ADCTask 014A                   _SPIWrite 0D63                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078           __size_of_DINInit 0011  
         __size_of_DINTask 001E           __size_of_DINTick 0028           __size_of_LEDInit 000B  
               SPIRead@len 0071           __size_of_PGMInit 0018           __size_of_PGMTick 000B  
      __end_of_PGMNvmReset 0D03           __size_of_NVMInit 000B           __size_of_NVMRead 0026  
         __size_of_SPIInit 001E           __size_of_SPIRead 0020               _u_in_ev_down 00B6  
          LEDNormalFlash@i 0079               _u_in_ev_long 00B7           __size_of_OUTInit 0020  
         __size_of_RTXInit 0025           __size_of_RTXTask 0006           __size_of_RTXTick 000D  
         __size_of_SYSInit 0026           __size_of_SYSTask 0047                 OUTInit@sta 0072  
      __end_of_PGMWriteNvm 0CF0              ADCTask@cntSum 0069           __size_of___ftadd 00F6  
         __size_of___ftdiv 00A9           __size_of___ftmul 00B4           __size_of___fttol 0087  
         __size_of___lwdiv 0036                   ___awtoft 0E38                   ___ftpack 0641  
       __end_of__stringtab 0801            ___lwdiv@divisor 0071            ___lwdiv@counter 0076  
                 __ptext10 0F64                   __ptext11 0EE7                   __ptext20 0556  
                 __ptext12 0C37                   __ptext21 06F8                   __ptext13 074D  
                 __ptext30 0C82                   __ptext22 0D47                   __ptext14 0E7A  
                 __ptext31 0CF0                   __ptext23 0E18                   __ptext15 0C9B  
                 __ptext40 0041                   __ptext32 0CDD                   __ptext24 0E59  
                 __ptext16 0DDA                   __ptext41 0FCA                   __ptext33 0281  
                 __ptext25 0D03                   __ptext17 0E9C                   __ptext50 0D17  
                 __ptext42 03F9                   __ptext34 0CCA                   __ptext26 0D63  
                 __ptext18 0C2C                   __ptext43 04AD                   __ptext35 0EC1  
                 __ptext27 0DBC                   __ptext19 033F                   __ptext52 0C31  
                 __ptext44 018B                   __ptext36 0D9E                   __ptext28 0D2E  
                 __ptext45 0E38                   __ptext37 0CB9                   __ptext29 07E8  
                 __ptext46 0641                   __ptext38 0C6C                   __ptext47 0F94  
                 __ptext39 0C61                   __ptext48 0D80                   __ptext49 0DF8  
__size_of_RTXStartSendData 0005        __end_of_nvm_pgm_cfg 0806              __size_of_main 0057  
              _PGMCheckNvm 0C82              ??_RTXSendData 0028              ??_RTXSendRPgm 0028  
        SLPSleep@ADCON0Tmp 0026                _PGMNvmReset 0CF0                 _INTCONbits 000B  
           SPIWrite@srcPtr 0071                   intlevel1 0000                _PGMWriteNvm 0CDD  
               _PMCON1bits 0195          __CFG_CLKOUTEN$OFF 0000        SLPSleep@TESTBATTtmp 0027  
               _PGMReadNvm 0CCA                 _PGMSelDown 0C51                 _PGMSelLong 0CA9  
        SLPSleep@INTCONTmp 0021          SLPSleep@FVRCONTmp 0025                 _OPTION_REG 0095  
      __end_of_RTXSendData 03F9        __end_of_RTXSendRPgm 0E9C                _nvm_pgm_cfg 0801  
         SLPSleep@IOCBNTmp 0020    __size_of_LEDNormalFlash 001E          SLPSleep@WDTCONTmp 0023  
               _SSPCONbits 0215  
