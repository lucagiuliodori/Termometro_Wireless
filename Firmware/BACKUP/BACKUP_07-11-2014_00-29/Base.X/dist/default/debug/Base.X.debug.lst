

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 06 00:42:59 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0008                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  011D                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0197                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019D                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  020D                     	;# 
   164  0210                     	;# 
   165  0211                     	;# 
   166  0211                     	;# 
   167  0212                     	;# 
   168  0212                     	;# 
   169  0213                     	;# 
   170  0213                     	;# 
   171  0214                     	;# 
   172  0214                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0291                     	;# 
   181  0291                     	;# 
   182  0292                     	;# 
   183  0293                     	;# 
   184  0298                     	;# 
   185  0298                     	;# 
   186  0299                     	;# 
   187  029A                     	;# 
   188  0394                     	;# 
   189  0395                     	;# 
   190  0396                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  0090                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  010C                     	;# 
   246  010D                     	;# 
   247  010E                     	;# 
   248  0116                     	;# 
   249  0117                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0197                     	;# 
   263  0199                     	;# 
   264  019A                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019D                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  020D                     	;# 
   275  0210                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0291                     	;# 
   292  0291                     	;# 
   293  0292                     	;# 
   294  0293                     	;# 
   295  0298                     	;# 
   296  0298                     	;# 
   297  0299                     	;# 
   298  029A                     	;# 
   299  0394                     	;# 
   300  0395                     	;# 
   301  0396                     	;# 
   302  0FE4                     	;# 
   303  0FE5                     	;# 
   304  0FE6                     	;# 
   305  0FE7                     	;# 
   306  0FE8                     	;# 
   307  0FE9                     	;# 
   308  0FEA                     	;# 
   309  0FEB                     	;# 
   310  0FED                     	;# 
   311  0FEE                     	;# 
   312  0FEF                     	;# 
   313  0000                     	;# 
   314  0001                     	;# 
   315  0002                     	;# 
   316  0003                     	;# 
   317  0004                     	;# 
   318  0005                     	;# 
   319  0006                     	;# 
   320  0007                     	;# 
   321  0008                     	;# 
   322  0009                     	;# 
   323  000A                     	;# 
   324  000B                     	;# 
   325  000C                     	;# 
   326  000D                     	;# 
   327  000E                     	;# 
   328  0010                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0016                     	;# 
   334  0017                     	;# 
   335  0018                     	;# 
   336  0019                     	;# 
   337  001A                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  0090                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  010C                     	;# 
   357  010D                     	;# 
   358  010E                     	;# 
   359  0116                     	;# 
   360  0117                     	;# 
   361  011D                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  018E                     	;# 
   365  0191                     	;# 
   366  0191                     	;# 
   367  0192                     	;# 
   368  0193                     	;# 
   369  0193                     	;# 
   370  0194                     	;# 
   371  0195                     	;# 
   372  0196                     	;# 
   373  0197                     	;# 
   374  0199                     	;# 
   375  019A                     	;# 
   376  019B                     	;# 
   377  019B                     	;# 
   378  019B                     	;# 
   379  019B                     	;# 
   380  019C                     	;# 
   381  019C                     	;# 
   382  019D                     	;# 
   383  019E                     	;# 
   384  019F                     	;# 
   385  020D                     	;# 
   386  0210                     	;# 
   387  0211                     	;# 
   388  0211                     	;# 
   389  0212                     	;# 
   390  0212                     	;# 
   391  0213                     	;# 
   392  0213                     	;# 
   393  0214                     	;# 
   394  0214                     	;# 
   395  0215                     	;# 
   396  0215                     	;# 
   397  0215                     	;# 
   398  0216                     	;# 
   399  0216                     	;# 
   400  0217                     	;# 
   401  0217                     	;# 
   402  0291                     	;# 
   403  0291                     	;# 
   404  0292                     	;# 
   405  0293                     	;# 
   406  0298                     	;# 
   407  0298                     	;# 
   408  0299                     	;# 
   409  029A                     	;# 
   410  0394                     	;# 
   411  0395                     	;# 
   412  0396                     	;# 
   413  0FE4                     	;# 
   414  0FE5                     	;# 
   415  0FE6                     	;# 
   416  0FE7                     	;# 
   417  0FE8                     	;# 
   418  0FE9                     	;# 
   419  0FEA                     	;# 
   420  0FEB                     	;# 
   421  0FED                     	;# 
   422  0FEE                     	;# 
   423  0FEF                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0008                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0015                     	;# 
   443  0016                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001C                     	;# 
   451  008C                     	;# 
   452  008D                     	;# 
   453  008E                     	;# 
   454  0090                     	;# 
   455  0091                     	;# 
   456  0092                     	;# 
   457  0095                     	;# 
   458  0096                     	;# 
   459  0097                     	;# 
   460  0099                     	;# 
   461  009A                     	;# 
   462  009B                     	;# 
   463  009B                     	;# 
   464  009C                     	;# 
   465  009D                     	;# 
   466  009E                     	;# 
   467  010C                     	;# 
   468  010D                     	;# 
   469  010E                     	;# 
   470  0116                     	;# 
   471  0117                     	;# 
   472  011D                     	;# 
   473  018C                     	;# 
   474  018D                     	;# 
   475  018E                     	;# 
   476  0191                     	;# 
   477  0191                     	;# 
   478  0192                     	;# 
   479  0193                     	;# 
   480  0193                     	;# 
   481  0194                     	;# 
   482  0195                     	;# 
   483  0196                     	;# 
   484  0197                     	;# 
   485  0199                     	;# 
   486  019A                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019C                     	;# 
   492  019C                     	;# 
   493  019D                     	;# 
   494  019E                     	;# 
   495  019F                     	;# 
   496  020D                     	;# 
   497  0210                     	;# 
   498  0211                     	;# 
   499  0211                     	;# 
   500  0212                     	;# 
   501  0212                     	;# 
   502  0213                     	;# 
   503  0213                     	;# 
   504  0214                     	;# 
   505  0214                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0215                     	;# 
   509  0216                     	;# 
   510  0216                     	;# 
   511  0217                     	;# 
   512  0217                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0298                     	;# 
   518  0298                     	;# 
   519  0299                     	;# 
   520  029A                     	;# 
   521  0394                     	;# 
   522  0395                     	;# 
   523  0396                     	;# 
   524  0FE4                     	;# 
   525  0FE5                     	;# 
   526  0FE6                     	;# 
   527  0FE7                     	;# 
   528  0FE8                     	;# 
   529  0FE9                     	;# 
   530  0FEA                     	;# 
   531  0FEB                     	;# 
   532  0FED                     	;# 
   533  0FEE                     	;# 
   534  0FEF                     	;# 
   535  0000                     	;# 
   536  0001                     	;# 
   537  0002                     	;# 
   538  0003                     	;# 
   539  0004                     	;# 
   540  0005                     	;# 
   541  0006                     	;# 
   542  0007                     	;# 
   543  0008                     	;# 
   544  0009                     	;# 
   545  000A                     	;# 
   546  000B                     	;# 
   547  000C                     	;# 
   548  000D                     	;# 
   549  000E                     	;# 
   550  0010                     	;# 
   551  0011                     	;# 
   552  0012                     	;# 
   553  0015                     	;# 
   554  0016                     	;# 
   555  0016                     	;# 
   556  0017                     	;# 
   557  0018                     	;# 
   558  0019                     	;# 
   559  001A                     	;# 
   560  001B                     	;# 
   561  001C                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  0090                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0095                     	;# 
   569  0096                     	;# 
   570  0097                     	;# 
   571  0099                     	;# 
   572  009A                     	;# 
   573  009B                     	;# 
   574  009B                     	;# 
   575  009C                     	;# 
   576  009D                     	;# 
   577  009E                     	;# 
   578  010C                     	;# 
   579  010D                     	;# 
   580  010E                     	;# 
   581  0116                     	;# 
   582  0117                     	;# 
   583  011D                     	;# 
   584  018C                     	;# 
   585  018D                     	;# 
   586  018E                     	;# 
   587  0191                     	;# 
   588  0191                     	;# 
   589  0192                     	;# 
   590  0193                     	;# 
   591  0193                     	;# 
   592  0194                     	;# 
   593  0195                     	;# 
   594  0196                     	;# 
   595  0197                     	;# 
   596  0199                     	;# 
   597  019A                     	;# 
   598  019B                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019C                     	;# 
   603  019C                     	;# 
   604  019D                     	;# 
   605  019E                     	;# 
   606  019F                     	;# 
   607  020D                     	;# 
   608  0210                     	;# 
   609  0211                     	;# 
   610  0211                     	;# 
   611  0212                     	;# 
   612  0212                     	;# 
   613  0213                     	;# 
   614  0213                     	;# 
   615  0214                     	;# 
   616  0214                     	;# 
   617  0215                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0216                     	;# 
   621  0216                     	;# 
   622  0217                     	;# 
   623  0217                     	;# 
   624  0291                     	;# 
   625  0291                     	;# 
   626  0292                     	;# 
   627  0293                     	;# 
   628  0298                     	;# 
   629  0298                     	;# 
   630  0299                     	;# 
   631  029A                     	;# 
   632  0394                     	;# 
   633  0395                     	;# 
   634  0396                     	;# 
   635  0FE4                     	;# 
   636  0FE5                     	;# 
   637  0FE6                     	;# 
   638  0FE7                     	;# 
   639  0FE8                     	;# 
   640  0FE9                     	;# 
   641  0FEA                     	;# 
   642  0FEB                     	;# 
   643  0FED                     	;# 
   644  0FEE                     	;# 
   645  0FEF                     	;# 
   646  0000                     	;# 
   647  0001                     	;# 
   648  0002                     	;# 
   649  0003                     	;# 
   650  0004                     	;# 
   651  0005                     	;# 
   652  0006                     	;# 
   653  0007                     	;# 
   654  0008                     	;# 
   655  0009                     	;# 
   656  000A                     	;# 
   657  000B                     	;# 
   658  000C                     	;# 
   659  000D                     	;# 
   660  000E                     	;# 
   661  0010                     	;# 
   662  0011                     	;# 
   663  0012                     	;# 
   664  0015                     	;# 
   665  0016                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001C                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0095                     	;# 
   680  0096                     	;# 
   681  0097                     	;# 
   682  0099                     	;# 
   683  009A                     	;# 
   684  009B                     	;# 
   685  009B                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009E                     	;# 
   689  010C                     	;# 
   690  010D                     	;# 
   691  010E                     	;# 
   692  0116                     	;# 
   693  0117                     	;# 
   694  011D                     	;# 
   695  018C                     	;# 
   696  018D                     	;# 
   697  018E                     	;# 
   698  0191                     	;# 
   699  0191                     	;# 
   700  0192                     	;# 
   701  0193                     	;# 
   702  0193                     	;# 
   703  0194                     	;# 
   704  0195                     	;# 
   705  0196                     	;# 
   706  0197                     	;# 
   707  0199                     	;# 
   708  019A                     	;# 
   709  019B                     	;# 
   710  019B                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019C                     	;# 
   714  019C                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019F                     	;# 
   718  020D                     	;# 
   719  0210                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0291                     	;# 
   736  0291                     	;# 
   737  0292                     	;# 
   738  0293                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  029A                     	;# 
   743  0394                     	;# 
   744  0395                     	;# 
   745  0396                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000D                     	;# 
   771  000E                     	;# 
   772  0010                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0015                     	;# 
   776  0016                     	;# 
   777  0016                     	;# 
   778  0017                     	;# 
   779  0018                     	;# 
   780  0019                     	;# 
   781  001A                     	;# 
   782  001B                     	;# 
   783  001C                     	;# 
   784  008C                     	;# 
   785  008D                     	;# 
   786  008E                     	;# 
   787  0090                     	;# 
   788  0091                     	;# 
   789  0092                     	;# 
   790  0095                     	;# 
   791  0096                     	;# 
   792  0097                     	;# 
   793  0099                     	;# 
   794  009A                     	;# 
   795  009B                     	;# 
   796  009B                     	;# 
   797  009C                     	;# 
   798  009D                     	;# 
   799  009E                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  0116                     	;# 
   804  0117                     	;# 
   805  011D                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  018E                     	;# 
   809  0191                     	;# 
   810  0191                     	;# 
   811  0192                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0197                     	;# 
   818  0199                     	;# 
   819  019A                     	;# 
   820  019B                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019C                     	;# 
   825  019C                     	;# 
   826  019D                     	;# 
   827  019E                     	;# 
   828  019F                     	;# 
   829  020D                     	;# 
   830  0210                     	;# 
   831  0211                     	;# 
   832  0211                     	;# 
   833  0212                     	;# 
   834  0212                     	;# 
   835  0213                     	;# 
   836  0213                     	;# 
   837  0214                     	;# 
   838  0214                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0216                     	;# 
   843  0216                     	;# 
   844  0217                     	;# 
   845  0217                     	;# 
   846  0291                     	;# 
   847  0291                     	;# 
   848  0292                     	;# 
   849  0293                     	;# 
   850  0298                     	;# 
   851  0298                     	;# 
   852  0299                     	;# 
   853  029A                     	;# 
   854  0394                     	;# 
   855  0395                     	;# 
   856  0396                     	;# 
   857  0FE4                     	;# 
   858  0FE5                     	;# 
   859  0FE6                     	;# 
   860  0FE7                     	;# 
   861  0FE8                     	;# 
   862  0FE9                     	;# 
   863  0FEA                     	;# 
   864  0FEB                     	;# 
   865  0FED                     	;# 
   866  0FEE                     	;# 
   867  0FEF                     	;# 
   868  0000                     	;# 
   869  0001                     	;# 
   870  0002                     	;# 
   871  0003                     	;# 
   872  0004                     	;# 
   873  0005                     	;# 
   874  0006                     	;# 
   875  0007                     	;# 
   876  0008                     	;# 
   877  0009                     	;# 
   878  000A                     	;# 
   879  000B                     	;# 
   880  000C                     	;# 
   881  000D                     	;# 
   882  000E                     	;# 
   883  0010                     	;# 
   884  0011                     	;# 
   885  0012                     	;# 
   886  0015                     	;# 
   887  0016                     	;# 
   888  0016                     	;# 
   889  0017                     	;# 
   890  0018                     	;# 
   891  0019                     	;# 
   892  001A                     	;# 
   893  001B                     	;# 
   894  001C                     	;# 
   895  008C                     	;# 
   896  008D                     	;# 
   897  008E                     	;# 
   898  0090                     	;# 
   899  0091                     	;# 
   900  0092                     	;# 
   901  0095                     	;# 
   902  0096                     	;# 
   903  0097                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010E                     	;# 
   914  0116                     	;# 
   915  0117                     	;# 
   916  011D                     	;# 
   917  018C                     	;# 
   918  018D                     	;# 
   919  018E                     	;# 
   920  0191                     	;# 
   921  0191                     	;# 
   922  0192                     	;# 
   923  0193                     	;# 
   924  0193                     	;# 
   925  0194                     	;# 
   926  0195                     	;# 
   927  0196                     	;# 
   928  0197                     	;# 
   929  0199                     	;# 
   930  019A                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019D                     	;# 
   938  019E                     	;# 
   939  019F                     	;# 
   940  020D                     	;# 
   941  0210                     	;# 
   942  0211                     	;# 
   943  0211                     	;# 
   944  0212                     	;# 
   945  0212                     	;# 
   946  0213                     	;# 
   947  0213                     	;# 
   948  0214                     	;# 
   949  0214                     	;# 
   950  0215                     	;# 
   951  0215                     	;# 
   952  0215                     	;# 
   953  0216                     	;# 
   954  0216                     	;# 
   955  0217                     	;# 
   956  0217                     	;# 
   957  0291                     	;# 
   958  0291                     	;# 
   959  0292                     	;# 
   960  0293                     	;# 
   961  0298                     	;# 
   962  0298                     	;# 
   963  0299                     	;# 
   964  029A                     	;# 
   965  0394                     	;# 
   966  0395                     	;# 
   967  0396                     	;# 
   968  0FE4                     	;# 
   969  0FE5                     	;# 
   970  0FE6                     	;# 
   971  0FE7                     	;# 
   972  0FE8                     	;# 
   973  0FE9                     	;# 
   974  0FEA                     	;# 
   975  0FEB                     	;# 
   976  0FED                     	;# 
   977  0FEE                     	;# 
   978  0FEF                     	;# 
   979  0000                     	;# 
   980  0001                     	;# 
   981  0002                     	;# 
   982  0003                     	;# 
   983  0004                     	;# 
   984  0005                     	;# 
   985  0006                     	;# 
   986  0007                     	;# 
   987  0008                     	;# 
   988  0009                     	;# 
   989  000A                     	;# 
   990  000B                     	;# 
   991  000C                     	;# 
   992  000D                     	;# 
   993  000E                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  008C                     	;# 
  1007  008D                     	;# 
  1008  008E                     	;# 
  1009  0090                     	;# 
  1010  0091                     	;# 
  1011  0092                     	;# 
  1012  0095                     	;# 
  1013  0096                     	;# 
  1014  0097                     	;# 
  1015  0099                     	;# 
  1016  009A                     	;# 
  1017  009B                     	;# 
  1018  009B                     	;# 
  1019  009C                     	;# 
  1020  009D                     	;# 
  1021  009E                     	;# 
  1022  010C                     	;# 
  1023  010D                     	;# 
  1024  010E                     	;# 
  1025  0116                     	;# 
  1026  0117                     	;# 
  1027  011D                     	;# 
  1028  018C                     	;# 
  1029  018D                     	;# 
  1030  018E                     	;# 
  1031  0191                     	;# 
  1032  0191                     	;# 
  1033  0192                     	;# 
  1034  0193                     	;# 
  1035  0193                     	;# 
  1036  0194                     	;# 
  1037  0195                     	;# 
  1038  0196                     	;# 
  1039  0197                     	;# 
  1040  0199                     	;# 
  1041  019A                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019C                     	;# 
  1047  019C                     	;# 
  1048  019D                     	;# 
  1049  019E                     	;# 
  1050  019F                     	;# 
  1051  020D                     	;# 
  1052  0210                     	;# 
  1053  0211                     	;# 
  1054  0211                     	;# 
  1055  0212                     	;# 
  1056  0212                     	;# 
  1057  0213                     	;# 
  1058  0213                     	;# 
  1059  0214                     	;# 
  1060  0214                     	;# 
  1061  0215                     	;# 
  1062  0215                     	;# 
  1063  0215                     	;# 
  1064  0216                     	;# 
  1065  0216                     	;# 
  1066  0217                     	;# 
  1067  0217                     	;# 
  1068  0291                     	;# 
  1069  0291                     	;# 
  1070  0292                     	;# 
  1071  0293                     	;# 
  1072  0298                     	;# 
  1073  0298                     	;# 
  1074  0299                     	;# 
  1075  029A                     	;# 
  1076  0394                     	;# 
  1077  0395                     	;# 
  1078  0396                     	;# 
  1079  0FE4                     	;# 
  1080  0FE5                     	;# 
  1081  0FE6                     	;# 
  1082  0FE7                     	;# 
  1083  0FE8                     	;# 
  1084  0FE9                     	;# 
  1085  0FEA                     	;# 
  1086  0FEB                     	;# 
  1087  0FED                     	;# 
  1088  0FEE                     	;# 
  1089  0FEF                     	;# 
  1090  0000                     	;# 
  1091  0001                     	;# 
  1092  0002                     	;# 
  1093  0003                     	;# 
  1094  0004                     	;# 
  1095  0005                     	;# 
  1096  0006                     	;# 
  1097  0007                     	;# 
  1098  0008                     	;# 
  1099  0009                     	;# 
  1100  000A                     	;# 
  1101  000B                     	;# 
  1102  000C                     	;# 
  1103  000D                     	;# 
  1104  000E                     	;# 
  1105  0010                     	;# 
  1106  0011                     	;# 
  1107  0012                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  008C                     	;# 
  1118  008D                     	;# 
  1119  008E                     	;# 
  1120  0090                     	;# 
  1121  0091                     	;# 
  1122  0092                     	;# 
  1123  0095                     	;# 
  1124  0096                     	;# 
  1125  0097                     	;# 
  1126  0099                     	;# 
  1127  009A                     	;# 
  1128  009B                     	;# 
  1129  009B                     	;# 
  1130  009C                     	;# 
  1131  009D                     	;# 
  1132  009E                     	;# 
  1133  010C                     	;# 
  1134  010D                     	;# 
  1135  010E                     	;# 
  1136  0116                     	;# 
  1137  0117                     	;# 
  1138  011D                     	;# 
  1139  018C                     	;# 
  1140  018D                     	;# 
  1141  018E                     	;# 
  1142  0191                     	;# 
  1143  0191                     	;# 
  1144  0192                     	;# 
  1145  0193                     	;# 
  1146  0193                     	;# 
  1147  0194                     	;# 
  1148  0195                     	;# 
  1149  0196                     	;# 
  1150  0197                     	;# 
  1151  0199                     	;# 
  1152  019A                     	;# 
  1153  019B                     	;# 
  1154  019B                     	;# 
  1155  019B                     	;# 
  1156  019B                     	;# 
  1157  019C                     	;# 
  1158  019C                     	;# 
  1159  019D                     	;# 
  1160  019E                     	;# 
  1161  019F                     	;# 
  1162  020D                     	;# 
  1163  0210                     	;# 
  1164  0211                     	;# 
  1165  0211                     	;# 
  1166  0212                     	;# 
  1167  0212                     	;# 
  1168  0213                     	;# 
  1169  0213                     	;# 
  1170  0214                     	;# 
  1171  0214                     	;# 
  1172  0215                     	;# 
  1173  0215                     	;# 
  1174  0215                     	;# 
  1175  0216                     	;# 
  1176  0216                     	;# 
  1177  0217                     	;# 
  1178  0217                     	;# 
  1179  0291                     	;# 
  1180  0291                     	;# 
  1181  0292                     	;# 
  1182  0293                     	;# 
  1183  0298                     	;# 
  1184  0298                     	;# 
  1185  0299                     	;# 
  1186  029A                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  000E                     	;# 
  1216  0010                     	;# 
  1217  0011                     	;# 
  1218  0012                     	;# 
  1219  0015                     	;# 
  1220  0016                     	;# 
  1221  0016                     	;# 
  1222  0017                     	;# 
  1223  0018                     	;# 
  1224  0019                     	;# 
  1225  001A                     	;# 
  1226  001B                     	;# 
  1227  001C                     	;# 
  1228  008C                     	;# 
  1229  008D                     	;# 
  1230  008E                     	;# 
  1231  0090                     	;# 
  1232  0091                     	;# 
  1233  0092                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0097                     	;# 
  1237  0099                     	;# 
  1238  009A                     	;# 
  1239  009B                     	;# 
  1240  009B                     	;# 
  1241  009C                     	;# 
  1242  009D                     	;# 
  1243  009E                     	;# 
  1244  010C                     	;# 
  1245  010D                     	;# 
  1246  010E                     	;# 
  1247  0116                     	;# 
  1248  0117                     	;# 
  1249  011D                     	;# 
  1250  018C                     	;# 
  1251  018D                     	;# 
  1252  018E                     	;# 
  1253  0191                     	;# 
  1254  0191                     	;# 
  1255  0192                     	;# 
  1256  0193                     	;# 
  1257  0193                     	;# 
  1258  0194                     	;# 
  1259  0195                     	;# 
  1260  0196                     	;# 
  1261  0197                     	;# 
  1262  0199                     	;# 
  1263  019A                     	;# 
  1264  019B                     	;# 
  1265  019B                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019C                     	;# 
  1269  019C                     	;# 
  1270  019D                     	;# 
  1271  019E                     	;# 
  1272  019F                     	;# 
  1273  020D                     	;# 
  1274  0210                     	;# 
  1275  0211                     	;# 
  1276  0211                     	;# 
  1277  0212                     	;# 
  1278  0212                     	;# 
  1279  0213                     	;# 
  1280  0213                     	;# 
  1281  0214                     	;# 
  1282  0214                     	;# 
  1283  0215                     	;# 
  1284  0215                     	;# 
  1285  0215                     	;# 
  1286  0216                     	;# 
  1287  0216                     	;# 
  1288  0217                     	;# 
  1289  0217                     	;# 
  1290  0291                     	;# 
  1291  0291                     	;# 
  1292  0292                     	;# 
  1293  0293                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  029A                     	;# 
  1298  0394                     	;# 
  1299  0395                     	;# 
  1300  0396                     	;# 
  1301  0FE4                     	;# 
  1302  0FE5                     	;# 
  1303  0FE6                     	;# 
  1304  0FE7                     	;# 
  1305  0FE8                     	;# 
  1306  0FE9                     	;# 
  1307  0FEA                     	;# 
  1308  0FEB                     	;# 
  1309  0FED                     	;# 
  1310  0FEE                     	;# 
  1311  0FEF                     	;# 
  1312  0000                     	;# 
  1313  0001                     	;# 
  1314  0002                     	;# 
  1315  0003                     	;# 
  1316  0004                     	;# 
  1317  0005                     	;# 
  1318  0006                     	;# 
  1319  0007                     	;# 
  1320  0008                     	;# 
  1321  0009                     	;# 
  1322  000A                     	;# 
  1323  000B                     	;# 
  1324  000C                     	;# 
  1325  000D                     	;# 
  1326  000E                     	;# 
  1327  0010                     	;# 
  1328  0011                     	;# 
  1329  0012                     	;# 
  1330  0015                     	;# 
  1331  0016                     	;# 
  1332  0016                     	;# 
  1333  0017                     	;# 
  1334  0018                     	;# 
  1335  0019                     	;# 
  1336  001A                     	;# 
  1337  001B                     	;# 
  1338  001C                     	;# 
  1339  008C                     	;# 
  1340  008D                     	;# 
  1341  008E                     	;# 
  1342  0090                     	;# 
  1343  0091                     	;# 
  1344  0092                     	;# 
  1345  0095                     	;# 
  1346  0096                     	;# 
  1347  0097                     	;# 
  1348  0099                     	;# 
  1349  009A                     	;# 
  1350  009B                     	;# 
  1351  009B                     	;# 
  1352  009C                     	;# 
  1353  009D                     	;# 
  1354  009E                     	;# 
  1355  010C                     	;# 
  1356  010D                     	;# 
  1357  010E                     	;# 
  1358  0116                     	;# 
  1359  0117                     	;# 
  1360  011D                     	;# 
  1361  018C                     	;# 
  1362  018D                     	;# 
  1363  018E                     	;# 
  1364  0191                     	;# 
  1365  0191                     	;# 
  1366  0192                     	;# 
  1367  0193                     	;# 
  1368  0193                     	;# 
  1369  0194                     	;# 
  1370  0195                     	;# 
  1371  0196                     	;# 
  1372  0197                     	;# 
  1373  0199                     	;# 
  1374  019A                     	;# 
  1375  019B                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019C                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019E                     	;# 
  1383  019F                     	;# 
  1384  020D                     	;# 
  1385  0210                     	;# 
  1386  0211                     	;# 
  1387  0211                     	;# 
  1388  0212                     	;# 
  1389  0212                     	;# 
  1390  0213                     	;# 
  1391  0213                     	;# 
  1392  0214                     	;# 
  1393  0214                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0216                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0217                     	;# 
  1401  0291                     	;# 
  1402  0291                     	;# 
  1403  0292                     	;# 
  1404  0293                     	;# 
  1405  0298                     	;# 
  1406  0298                     	;# 
  1407  0299                     	;# 
  1408  029A                     	;# 
  1409  0394                     	;# 
  1410  0395                     	;# 
  1411  0396                     	;# 
  1412  0FE4                     	;# 
  1413  0FE5                     	;# 
  1414  0FE6                     	;# 
  1415  0FE7                     	;# 
  1416  0FE8                     	;# 
  1417  0FE9                     	;# 
  1418  0FEA                     	;# 
  1419  0FEB                     	;# 
  1420  0FED                     	;# 
  1421  0FEE                     	;# 
  1422  0FEF                     	;# 
  1423                           
  1424                           	psect	idataBANK2
  1425  083A                     __pidataBANK2:	
  1426                           
  1427                           ;initializer for _picBatt
  1428  083A  340E               	retlw	14
  1429  083B  341F               	retlw	31
  1430  083C  3411               	retlw	17
  1431  083D  3411               	retlw	17
  1432  083E  3411               	retlw	17
  1433  083F  3411               	retlw	17
  1434  0840  3411               	retlw	17
  1435  0841  341F               	retlw	31
  1436  0842  3400               	retlw	0
  1437                           
  1438                           ;initializer for _cc1PaTable
  1439  0843  3403               	retlw	3
  1440  0844  340F               	retlw	15
  1441  0845  341E               	retlw	30
  1442  0846  3427               	retlw	39
  1443  0847  3450               	retlw	80
  1444  0848  3481               	retlw	129
  1445  0849  34CB               	retlw	203
  1446  084A  34C2               	retlw	194
  1447                           
  1448                           	psect	idataBANK3
  1449  0AA4                     __pidataBANK3:	
  1450                           
  1451                           ;initializer for _cc1InitVal
  1452  0AA4  3447               	retlw	71
  1453  0AA5  3446               	retlw	70
  1454  0AA6  344E               	retlw	78
  1455  0AA7  340C               	retlw	12
  1456  0AA8  34D3               	retlw	211
  1457  0AA9  3491               	retlw	145
  1458  0AAA  3404               	retlw	4
  1459  0AAB  3408               	retlw	8
  1460  0AAC  3404               	retlw	4
  1461  0AAD  3400               	retlw	0
  1462  0AAE  3400               	retlw	0
  1463  0AAF  3406               	retlw	6
  1464  0AB0  3400               	retlw	0
  1465  0AB1  3421               	retlw	33
  1466  0AB2  3463               	retlw	99
  1467  0AB3  3491               	retlw	145
  1468  0AB4  34CA               	retlw	202
  1469  0AB5  3483               	retlw	131
  1470  0AB6  3402               	retlw	2
  1471  0AB7  3402               	retlw	2
  1472  0AB8  343B               	retlw	59
  1473  0AB9  3434               	retlw	52
  1474  0ABA  3407               	retlw	7
  1475  0ABB  343F               	retlw	63
  1476  0ABC  3408               	retlw	8
  1477  0ABD  3416               	retlw	22
  1478  0ABE  346C               	retlw	108
  1479  0ABF  3403               	retlw	3
  1480  0AC0  3440               	retlw	64
  1481  0AC1  3491               	retlw	145
  1482  0AC2  3487               	retlw	135
  1483  0AC3  346B               	retlw	107
  1484  0AC4  34FB               	retlw	251
  1485  0AC5  3456               	retlw	86
  1486  0AC6  3416               	retlw	22
  1487  0AC7  34E9               	retlw	233
  1488  0AC8  342A               	retlw	42
  1489  0AC9  3400               	retlw	0
  1490  0ACA  341F               	retlw	31
  1491  0ACB  3441               	retlw	65
  1492  0ACC  3400               	retlw	0
  1493  0ACD  3459               	retlw	89
  1494  0ACE  347F               	retlw	127
  1495  0ACF  343F               	retlw	63
  1496  0AD0  3481               	retlw	129
  1497  0AD1  3435               	retlw	53
  1498  0AD2  3409               	retlw	9
  1499                           
  1500                           	psect	strings
  1501  0800                     __pstrings:	
  1502  0800                     __stringtab:	
  1503  0800  3400               	retlw	0
  1504  0801                     __end_of__stringtab:	
  1505  0801                     _dpowers:	
  1506  0801  3401               	retlw	1
  1507  0802  3400               	retlw	0
  1508  0803  3400               	retlw	0
  1509  0804  3400               	retlw	0
  1510  0805  340A               	retlw	10
  1511  0806  3400               	retlw	0
  1512  0807  3400               	retlw	0
  1513  0808  3400               	retlw	0
  1514  0809  3464               	retlw	100
  1515  080A  3400               	retlw	0
  1516  080B  3400               	retlw	0
  1517  080C  3400               	retlw	0
  1518  080D  34E8               	retlw	232
  1519  080E  3403               	retlw	3
  1520  080F  3400               	retlw	0
  1521  0810  3400               	retlw	0
  1522  0811  3410               	retlw	16
  1523  0812  3427               	retlw	39
  1524  0813  3400               	retlw	0
  1525  0814  3400               	retlw	0
  1526  0815  34A0               	retlw	160
  1527  0816  3486               	retlw	134
  1528  0817  3401               	retlw	1
  1529  0818  3400               	retlw	0
  1530  0819  3440               	retlw	64
  1531  081A  3442               	retlw	66
  1532  081B  340F               	retlw	15
  1533  081C  3400               	retlw	0
  1534  081D  3480               	retlw	128
  1535  081E  3496               	retlw	150
  1536  081F  3498               	retlw	152
  1537  0820  3400               	retlw	0
  1538  0821  3400               	retlw	0
  1539  0822  34E1               	retlw	225
  1540  0823  34F5               	retlw	245
  1541  0824  3405               	retlw	5
  1542  0825  3400               	retlw	0
  1543  0826  34CA               	retlw	202
  1544  0827  349A               	retlw	154
  1545  0828  343B               	retlw	59
  1546  0829                     __end_of_dpowers:	
  1547  0829                     _nvm_pgm_cfg:	
  1548  0829  345C               	retlw	92
  1549  082A  34C5               	retlw	197
  1550  082B  3400               	retlw	0
  1551  082C  3400               	retlw	0
  1552  082D  3400               	retlw	0
  1553  082E                     __end_of_nvm_pgm_cfg:	
  1554  000B                     _INTCON	set	11
  1555  000B                     _INTCONbits	set	11
  1556  0011                     _PIR1	set	17
  1557  0011                     _PIR1bits	set	17
  1558  0012                     _PIR2	set	18
  1559  000C                     _PORTAbits	set	12
  1560  000D                     _PORTBbits	set	13
  1561  0018                     _T1CON	set	24
  1562  0015                     _TMR0	set	21
  1563  0017                     _TMR1H	set	23
  1564  0016                     _TMR1L	set	22
  1565  0095                     _OPTION_REG	set	149
  1566  0099                     _OSCCON	set	153
  1567  0091                     _PIE1	set	145
  1568  0092                     _PIE2	set	146
  1569  008C                     _TRISA	set	140
  1570  008D                     _TRISB	set	141
  1571  008E                     _TRISC	set	142
  1572  0097                     _WDTCON	set	151
  1573  010C                     _LATA	set	268
  1574  010C                     _LATAbits	set	268
  1575  010E                     _LATCbits	set	270
  1576  0191                     _PMADR	set	401
  1577  0193                     _PMDAT	set	403
  1578  018C                     _ANSELA	set	396
  1579  018D                     _ANSELB	set	397
  1580  018E                     _ANSELC	set	398
  1581  0195                     _PMCON1	set	405
  1582  0195                     _PMCON1bits	set	405
  1583  0196                     _PMCON2	set	406
  1584  0211                     _SSPBUF	set	529
  1585  0215                     _SSPCON1	set	533
  1586  0216                     _SSPCON2	set	534
  1587  0215                     _SSPCONbits	set	533
  1588  0214                     _SSPSTAT	set	532
  1589  020D                     _WPUB	set	525
  1590  0395                     _IOCBN	set	917
  1591  0394                     _IOCBP	set	916
  1592  082E                     __stringdata:	
  1593  082E                     STR_1:	
  1594  082E  3425               	retlw	37	;'%'
  1595  082F  346C               	retlw	108	;'l'
  1596  0830  3475               	retlw	117	;'u'
  1597  0831  342E               	retlw	46	;'.'
  1598  0832  3425               	retlw	37	;'%'
  1599  0833  3436               	retlw	54	;'6'
  1600  0834  342E               	retlw	46	;'.'
  1601  0835  3436               	retlw	54	;'6'
  1602  0836  346C               	retlw	108	;'l'
  1603  0837  3475               	retlw	117	;'u'
  1604  0838  3400               	retlw	0
  1605  0839                     __end_of__stringdata:	
  1606                           
  1607                           ; #config settings
  1608  0000                     
  1609                           	psect	cinit
  1610  0013                     start_initialization:	
  1611  0013                     __initialization:	
  1612                           
  1613                           ; Clear objects allocated to COMMON
  1614  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  1615                           
  1616                           ; Clear objects allocated to BANK0
  1617  0014  01EB               	clrf	__pbssBANK0& (0+127)
  1618  0015  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  1619  0016  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  1620  0017  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  1621  0018  01EF               	clrf	(__pbssBANK0+4)& (0+127)
  1622                           
  1623                           ; Clear objects allocated to BANK1
  1624  0019  30A0               	movlw	low __pbssBANK1
  1625  001A  0084               	movwf	4
  1626  001B  3000               	movlw	high __pbssBANK1
  1627  001C  0085               	movwf	5
  1628  001D  3031               	movlw	49
  1629  001E  3195  25FD  3180   	fcall	clear_ram0
  1630                           
  1631                           ; Clear objects allocated to BANK2
  1632  0021  3020               	movlw	low __pbssBANK2
  1633  0022  0084               	movwf	4
  1634  0023  3001               	movlw	high __pbssBANK2
  1635  0024  0085               	movwf	5
  1636  0025  302A               	movlw	42
  1637  0026  3195  25FD  3180   	fcall	clear_ram0
  1638                           
  1639                           ; Initialize objects allocated to BANK2
  1640  0029  303A               	movlw	low __pidataBANK2
  1641  002A  0084               	movwf	4
  1642  002B  3088               	movlw	(high __pidataBANK2)| (0+128)
  1643  002C  0085               	movwf	5
  1644  002D  304A               	movlw	low __pdataBANK2
  1645  002E  0086               	movwf	6
  1646  002F  3001               	movlw	high __pdataBANK2
  1647  0030  0087               	movwf	7
  1648  0031  3011               	movlw	17
  1649  0032  3195  25F7  3180   	fcall	init_ram
  1650                           
  1651                           ; Initialize objects allocated to BANK3
  1652  0035  30A4               	movlw	low __pidataBANK3
  1653  0036  0084               	movwf	4
  1654  0037  308A               	movlw	(high __pidataBANK3)| (0+128)
  1655  0038  0085               	movwf	5
  1656  0039  30A0               	movlw	low __pdataBANK3
  1657  003A  0086               	movwf	6
  1658  003B  3001               	movlw	high __pdataBANK3
  1659  003C  0087               	movwf	7
  1660  003D  302F               	movlw	47
  1661  003E  3195  25F7         	fcall	init_ram
  1662  0040                     end_of_initialization:	
  1663                           ;End of C runtime variable initialization code
  1664                           
  1665  0040                     __end_of__initialization:	
  1666  0040  0020               	movlb	0
  1667  0041  318C  2C70         	ljmp	_main	;jump to C main() function
  1668                           
  1669                           	psect	bssCOMMON
  1670  007C                     __pbssCOMMON:	
  1671  007C                     _u_in_sta_currTask:	
  1672  007C                     	ds	1
  1673                           
  1674                           	psect	bssBANK0
  1675  006B                     __pbssBANK0:	
  1676  006B                     _rtx_flg:	
  1677  006B                     	ds	1
  1678  006C                     _tmrDbncSel:	
  1679  006C                     	ds	1
  1680  006D                     _tmrRcvPkt:	
  1681  006D                     	ds	1
  1682  006E                     _u_flg_din:	
  1683  006E                     	ds	1
  1684  006F                     _u_in_sta_tmpTask:	
  1685  006F                     	ds	1
  1686                           
  1687                           	psect	bssBANK1
  1688  00A0                     __pbssBANK1:	
  1689  00A0                     _batt:	
  1690  00A0                     	ds	3
  1691  00A3                     _temp:	
  1692  00A3                     	ds	3
  1693  00A6                     _tmrCalibration:	
  1694  00A6                     	ds	2
  1695  00A8                     _tmrLongSel:	
  1696  00A8                     	ds	2
  1697  00AA                     _tmrPgm:	
  1698  00AA                     	ds	2
  1699  00AC                     _pgm_flg:	
  1700  00AC                     	ds	1
  1701  00AD                     _s_CC1_FLG:	
  1702  00AD                     	ds	1
  1703  00AE                     _sys_pgm_sta:	
  1704  00AE                     	ds	1
  1705  00AF                     _u_SYS_STA:	
  1706  00AF                     	ds	1
  1707  00B0                     _u_in_ev_down:	
  1708  00B0                     	ds	1
  1709  00B1                     _u_in_ev_long:	
  1710  00B1                     	ds	1
  1711  00B2                     _u_in_ev_up:	
  1712  00B2                     	ds	1
  1713  00B3                     _strTitle:	
  1714  00B3                     	ds	16
  1715  00C3                     _pktTx:	
  1716  00C3                     	ds	9
  1717  00CC                     _pgm_cfg:	
  1718  00CC                     	ds	5
  1719                           
  1720                           	psect	bssBANK2
  1721  0120                     __pbssBANK2:	
  1722  0120                     ftoa@buf:	
  1723  0120                     	ds	17
  1724  0131                     _strTemp:	
  1725  0131                     	ds	16
  1726  0141                     _pktRx:	
  1727  0141                     	ds	9
  1728                           
  1729                           	psect	dataBANK2
  1730  014A                     __pdataBANK2:	
  1731  014A                     _picBatt:	
  1732  014A                     	ds	9
  1733  0153                     _cc1PaTable:	
  1734  0153                     	ds	8
  1735                           
  1736                           	psect	dataBANK3
  1737  01A0                     __pdataBANK3:	
  1738  01A0                     _cc1InitVal:	
  1739  01A0                     	ds	47
  1740                           
  1741                           	psect	clrtext
  1742  15FD                     clear_ram0:	
  1743                           ;	Called with FSR0 containing the base address, and
  1744                           ;	WREG with the size to clear
  1745                           
  1746  15FD  0064               	clrwdt	;clear the watchdog before getting into this loop
  1747  15FE                     clrloop0:	
  1748  15FE  0180               	clrf	0	;clear RAM location pointed to by FSR
  1749  15FF  3101               	addfsr 0,1
  1750  1600  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1751  1601  2DFE               	goto	clrloop0	;have we reached the end yet?
  1752  1602  3400               	retlw	0	;all done for this memory range, return
  1753                           
  1754                           	psect	inittext
  1755  15F7                     init_ram:	
  1756  15F7  00FE               	movwf	126
  1757  15F8                     initloop:	
  1758  15F8  0012               	moviw fsr0++
  1759  15F9  001E               	movwi fsr1++
  1760  15FA  0BFE               	decfsz	126,f
  1761  15FB  2DF8               	goto	initloop
  1762  15FC  3400               	retlw	0
  1763                           
  1764                           	psect	cstackBANK1
  1765  00D1                     __pcstackBANK1:	
  1766  00D1                     RTXUpdateDisplay@strTmp:	
  1767                           
  1768                           ; 16 bytes @ 0x0
  1769  00D1                     	ds	16
  1770  00E1                     RTXUpdateDisplay@status:	
  1771                           
  1772                           ; 2 bytes @ 0x10
  1773  00E1                     	ds	2
  1774  00E3                     RTXUpdateDisplay@posDec:	
  1775                           
  1776                           ; 1 bytes @ 0x12
  1777  00E3                     	ds	1
  1778  00E4                     RTXUpdateDisplay@isDec:	
  1779                           
  1780                           ; 1 bytes @ 0x13
  1781  00E4                     	ds	1
  1782  00E5                     RTXUpdateDisplay@offset:	
  1783                           
  1784                           ; 1 bytes @ 0x14
  1785  00E5                     	ds	1
  1786  00E6                     RTXUpdateDisplay@maxDigit:	
  1787                           
  1788                           ; 1 bytes @ 0x15
  1789  00E6                     	ds	1
  1790  00E7                     RTXUpdateDisplay@val:	
  1791                           
  1792                           ; 1 bytes @ 0x16
  1793  00E7                     	ds	1
  1794  00E8                     RTXUpdateDisplay@j:	
  1795                           
  1796                           ; 1 bytes @ 0x17
  1797  00E8                     	ds	1
  1798  00E9                     RTXUpdateDisplay@p:	
  1799                           
  1800                           ; 1 bytes @ 0x18
  1801  00E9                     	ds	1
  1802  00EA                     RTXUpdateDisplay@i:	
  1803                           
  1804                           ; 1 bytes @ 0x19
  1805  00EA                     	ds	1
  1806                           
  1807                           	psect	cstackCOMMON
  1808  0070                     __pcstackCOMMON:	
  1809  0070                     ?_CC1Strobe:	
  1810  0070                     ?_DPYInitDisplay:	
  1811                           ; 0 bytes @ 0x0
  1812                           
  1813  0070                     ?_PGMReadNvm:	
  1814                           ; 0 bytes @ 0x0
  1815                           
  1816  0070                     ?_PGMCheckNvm:	
  1817                           ; 0 bytes @ 0x0
  1818                           
  1819  0070                     ?_PGMPgmOff:	
  1820                           ; 0 bytes @ 0x0
  1821                           
  1822  0070                     ?_PGMNvmReset:	
  1823                           ; 0 bytes @ 0x0
  1824                           
  1825  0070                     ?_RTXUpdateDisplay:	
  1826                           ; 0 bytes @ 0x0
  1827                           
  1828  0070                     ?_RTXSendPgm:	
  1829                           ; 0 bytes @ 0x0
  1830                           
  1831  0070                     ?_RTXReadPkt:	
  1832                           ; 0 bytes @ 0x0
  1833                           
  1834  0070                     ?_RTXPgmOff:	
  1835                           ; 0 bytes @ 0x0
  1836                           
  1837  0070                     ?_RTXSendRData:	
  1838                           ; 0 bytes @ 0x0
  1839                           
  1840  0070                     ?_isdigit:	
  1841                           ; 0 bytes @ 0x0
  1842                           
  1843  0070                     ?_INInit:	
  1844                           ; 1 bit 
  1845                           
  1846  0070                     ?_OUTInit:	
  1847                           ; 0 bytes @ 0x0
  1848                           
  1849  0070                     ?_OUTSetHTCDataNibble:	
  1850                           ; 0 bytes @ 0x0
  1851                           
  1852  0070                     ?_SPIInit:	
  1853                           ; 0 bytes @ 0x0
  1854                           
  1855  0070                     ?_CC1Init:	
  1856                           ; 0 bytes @ 0x0
  1857                           
  1858  0070                     ?_NVMInit:	
  1859                           ; 0 bytes @ 0x0
  1860                           
  1861  0070                     ?_DINInit:	
  1862                           ; 0 bytes @ 0x0
  1863                           
  1864  0070                     ?_DINTick:	
  1865                           ; 0 bytes @ 0x0
  1866                           
  1867  0070                     ?_DINTask:	
  1868                           ; 0 bytes @ 0x0
  1869                           
  1870  0070                     ?_DPYInit:	
  1871                           ; 0 bytes @ 0x0
  1872                           
  1873  0070                     ?_DPYSendChar:	
  1874                           ; 0 bytes @ 0x0
  1875                           
  1876  0070                     ?_PGMInit:	
  1877                           ; 0 bytes @ 0x0
  1878                           
  1879  0070                     ?_PGMTick:	
  1880                           ; 0 bytes @ 0x0
  1881                           
  1882  0070                     ?_PGMWriteNvm:	
  1883                           ; 0 bytes @ 0x0
  1884                           
  1885  0070                     ?_PGMSelDown:	
  1886                           ; 0 bytes @ 0x0
  1887                           
  1888  0070                     ?_PGMSelLong:	
  1889                           ; 0 bytes @ 0x0
  1890                           
  1891  0070                     ?_RTXInit:	
  1892                           ; 0 bytes @ 0x0
  1893                           
  1894  0070                     ?_RTXTick:	
  1895                           ; 0 bytes @ 0x0
  1896                           
  1897  0070                     ?_RTXTask:	
  1898                           ; 0 bytes @ 0x0
  1899                           
  1900  0070                     ?_RTXPgmOn:	
  1901                           ; 0 bytes @ 0x0
  1902                           
  1903  0070                     ?_SYSInit:	
  1904                           ; 0 bytes @ 0x0
  1905                           
  1906  0070                     ?_SYSInt:	
  1907                           ; 0 bytes @ 0x0
  1908                           
  1909  0070                     ??_SYSInt:	
  1910                           ; 0 bytes @ 0x0
  1911                           
  1912  0070                     ?_SYSTask:	
  1913                           ; 0 bytes @ 0x0
  1914                           
  1915  0070                     ?_INTIsr:	
  1916                           ; 0 bytes @ 0x0
  1917                           
  1918  0070                     ??_INTIsr:	
  1919                           ; 0 bytes @ 0x0
  1920                           
  1921  0070                     ?_main:	
  1922                           ; 0 bytes @ 0x0
  1923                           
  1924  0070                     ?_DPYIsBusy:	
  1925                           ; 0 bytes @ 0x0
  1926                           
  1927                           
  1928                           ; 1 bytes @ 0x0
  1929  0070                     	ds	1
  1930  0071                     ??_PGMPgmOff:	
  1931  0071                     ??_isdigit:	
  1932                           ; 0 bytes @ 0x1
  1933                           
  1934  0071                     ??_INInit:	
  1935                           ; 0 bytes @ 0x1
  1936                           
  1937  0071                     ??_OUTInit:	
  1938                           ; 0 bytes @ 0x1
  1939                           
  1940  0071                     ??_OUTSetHTCDataNibble:	
  1941                           ; 0 bytes @ 0x1
  1942                           
  1943  0071                     ??_SPIInit:	
  1944                           ; 0 bytes @ 0x1
  1945                           
  1946  0071                     ?_SPIRead:	
  1947                           ; 0 bytes @ 0x1
  1948                           
  1949  0071                     ?_SPIWrite:	
  1950                           ; 0 bytes @ 0x1
  1951                           
  1952  0071                     ?_DLYDelay_us:	
  1953                           ; 0 bytes @ 0x1
  1954                           
  1955  0071                     ?_DLYDelay_ms:	
  1956                           ; 0 bytes @ 0x1
  1957                           
  1958  0071                     ??_NVMInit:	
  1959                           ; 0 bytes @ 0x1
  1960                           
  1961  0071                     ?_NVMRead:	
  1962                           ; 0 bytes @ 0x1
  1963                           
  1964  0071                     ?_NVMWrite:	
  1965                           ; 0 bytes @ 0x1
  1966                           
  1967  0071                     ??_DINInit:	
  1968                           ; 0 bytes @ 0x1
  1969                           
  1970  0071                     ??_DINTick:	
  1971                           ; 0 bytes @ 0x1
  1972                           
  1973  0071                     ??_DINTask:	
  1974                           ; 0 bytes @ 0x1
  1975                           
  1976  0071                     ??_PGMTick:	
  1977                           ; 0 bytes @ 0x1
  1978                           
  1979  0071                     ??_PGMSelDown:	
  1980                           ; 0 bytes @ 0x1
  1981                           
  1982  0071                     ??_SYSInit:	
  1983                           ; 0 bytes @ 0x1
  1984                           
  1985  0071                     ?___ftge:	
  1986                           ; 0 bytes @ 0x1
  1987                           
  1988  0071                     ?___awdiv:	
  1989                           ; 1 bit 
  1990                           
  1991  0071                     ?___lwdiv:	
  1992                           ; 2 bytes @ 0x1
  1993                           
  1994  0071                     ?___lwmod:	
  1995                           ; 2 bytes @ 0x1
  1996                           
  1997  0071                     ?___wmul:	
  1998                           ; 2 bytes @ 0x1
  1999                           
  2000  0071                     ?___ftpack:	
  2001                           ; 2 bytes @ 0x1
  2002                           
  2003  0071                     ?___ftneg:	
  2004                           ; 3 bytes @ 0x1
  2005                           
  2006  0071                     ?___lldiv:	
  2007                           ; 3 bytes @ 0x1
  2008                           
  2009  0071                     NVMInit@sta:	
  2010                           ; 4 bytes @ 0x1
  2011                           
  2012  0071                     DINInit@sta:	
  2013                           ; 1 bytes @ 0x1
  2014                           
  2015  0071                     _isdigit$1047:	
  2016                           ; 1 bytes @ 0x1
  2017                           
  2018  0071                     SPIRead@dstPtr:	
  2019                           ; 1 bytes @ 0x1
  2020                           
  2021  0071                     SPIWrite@srcPtr:	
  2022                           ; 2 bytes @ 0x1
  2023                           
  2024  0071                     DLYDelay_us@val:	
  2025                           ; 2 bytes @ 0x1
  2026                           
  2027  0071                     DLYDelay_ms@val:	
  2028                           ; 2 bytes @ 0x1
  2029                           
  2030  0071                     NVMRead@addr:	
  2031                           ; 2 bytes @ 0x1
  2032                           
  2033  0071                     NVMWrite@addr:	
  2034                           ; 2 bytes @ 0x1
  2035                           
  2036  0071                     ___awdiv@divisor:	
  2037                           ; 2 bytes @ 0x1
  2038                           
  2039  0071                     ___lwdiv@divisor:	
  2040                           ; 2 bytes @ 0x1
  2041                           
  2042  0071                     ___lwmod@divisor:	
  2043                           ; 2 bytes @ 0x1
  2044                           
  2045  0071                     ___wmul@multiplier:	
  2046                           ; 2 bytes @ 0x1
  2047                           
  2048  0071                     ___ftpack@arg:	
  2049                           ; 2 bytes @ 0x1
  2050                           
  2051  0071                     ___ftge@ff1:	
  2052                           ; 3 bytes @ 0x1
  2053                           
  2054  0071                     ___ftneg@f1:	
  2055                           ; 3 bytes @ 0x1
  2056                           
  2057  0071                     ___lldiv@divisor:	
  2058                           ; 3 bytes @ 0x1
  2059                           
  2060                           
  2061                           ; 4 bytes @ 0x1
  2062  0071                     	ds	1
  2063  0072                     INInit@sta:	
  2064  0072                     OUTInit@sta:	
  2065                           ; 1 bytes @ 0x2
  2066                           
  2067  0072                     OUTSetHTCDataNibble@val:	
  2068                           ; 1 bytes @ 0x2
  2069                           
  2070  0072                     SPIInit@state:	
  2071                           ; 1 bytes @ 0x2
  2072                           
  2073  0072                     SYSInit@state:	
  2074                           ; 1 bytes @ 0x2
  2075                           
  2076  0072                     isdigit@c:	
  2077                           ; 1 bytes @ 0x2
  2078                           
  2079                           
  2080                           ; 1 bytes @ 0x2
  2081  0072                     	ds	1
  2082  0073                     ??_DLYDelay_us:	
  2083  0073                     ??_DLYDelay_ms:	
  2084                           ; 0 bytes @ 0x3
  2085                           
  2086  0073                     OUTSetHTCDataNibble@dataToSet:	
  2087                           ; 0 bytes @ 0x3
  2088                           
  2089  0073                     SPIRead@len:	
  2090                           ; 1 bytes @ 0x3
  2091                           
  2092  0073                     SPIWrite@len:	
  2093                           ; 1 bytes @ 0x3
  2094                           
  2095  0073                     NVMRead@dest:	
  2096                           ; 1 bytes @ 0x3
  2097                           
  2098  0073                     NVMWrite@source:	
  2099                           ; 1 bytes @ 0x3
  2100                           
  2101  0073                     DLYDelay_us@i:	
  2102                           ; 1 bytes @ 0x3
  2103                           
  2104  0073                     ___awdiv@dividend:	
  2105                           ; 2 bytes @ 0x3
  2106                           
  2107  0073                     ___lwdiv@dividend:	
  2108                           ; 2 bytes @ 0x3
  2109                           
  2110  0073                     ___lwmod@dividend:	
  2111                           ; 2 bytes @ 0x3
  2112                           
  2113  0073                     ___wmul@multiplicand:	
  2114                           ; 2 bytes @ 0x3
  2115                           
  2116                           
  2117                           ; 2 bytes @ 0x3
  2118  0073                     	ds	1
  2119  0074                     ??_SPIRead:	
  2120  0074                     ??_SPIWrite:	
  2121                           ; 0 bytes @ 0x4
  2122                           
  2123  0074                     ??___ftneg:	
  2124                           ; 0 bytes @ 0x4
  2125                           
  2126  0074                     NVMRead@len:	
  2127                           ; 0 bytes @ 0x4
  2128                           
  2129  0074                     NVMWrite@len:	
  2130                           ; 1 bytes @ 0x4
  2131                           
  2132  0074                     ___ftpack@exp:	
  2133                           ; 1 bytes @ 0x4
  2134                           
  2135  0074                     ___ftge@ff2:	
  2136                           ; 1 bytes @ 0x4
  2137                           
  2138                           
  2139                           ; 3 bytes @ 0x4
  2140  0074                     	ds	1
  2141  0075                     ?_DPYWriteByte:	
  2142  0075                     ??_DPYIsBusy:	
  2143                           ; 0 bytes @ 0x5
  2144                           
  2145  0075                     ??_NVMRead:	
  2146                           ; 0 bytes @ 0x5
  2147                           
  2148  0075                     ??_NVMWrite:	
  2149                           ; 0 bytes @ 0x5
  2150                           
  2151  0075                     ??___awdiv:	
  2152                           ; 0 bytes @ 0x5
  2153                           
  2154  0075                     ??___lwdiv:	
  2155                           ; 0 bytes @ 0x5
  2156                           
  2157  0075                     ??___lwmod:	
  2158                           ; 0 bytes @ 0x5
  2159                           
  2160  0075                     ??___wmul:	
  2161                           ; 0 bytes @ 0x5
  2162                           
  2163  0075                     DPYWriteByte@val:	
  2164                           ; 0 bytes @ 0x5
  2165                           
  2166  0075                     ___ftpack@sign:	
  2167                           ; 1 bytes @ 0x5
  2168                           
  2169  0075                     DLYDelay_ms@i:	
  2170                           ; 1 bytes @ 0x5
  2171                           
  2172  0075                     ___wmul@product:	
  2173                           ; 2 bytes @ 0x5
  2174                           
  2175  0075                     ___lldiv@dividend:	
  2176                           ; 2 bytes @ 0x5
  2177                           
  2178                           
  2179                           ; 4 bytes @ 0x5
  2180  0075                     	ds	1
  2181  0076                     ??_DPYWriteByte:	
  2182  0076                     ??___ftpack:	
  2183                           ; 0 bytes @ 0x6
  2184                           
  2185  0076                     SPIWrite@i:	
  2186                           ; 0 bytes @ 0x6
  2187                           
  2188  0076                     DPYIsBusy@bf:	
  2189                           ; 1 bytes @ 0x6
  2190                           
  2191  0076                     ___awdiv@counter:	
  2192                           ; 1 bytes @ 0x6
  2193                           
  2194  0076                     ___lwmod@counter:	
  2195                           ; 1 bytes @ 0x6
  2196                           
  2197  0076                     ___lwdiv@quotient:	
  2198                           ; 1 bytes @ 0x6
  2199                           
  2200                           
  2201                           ; 2 bytes @ 0x6
  2202  0076                     	ds	1
  2203  0077                     ??_CC1Strobe:	
  2204  0077                     ?_CC1Write:	
  2205                           ; 0 bytes @ 0x7
  2206                           
  2207  0077                     ??___ftge:	
  2208                           ; 0 bytes @ 0x7
  2209                           
  2210  0077                     NVMRead@i:	
  2211                           ; 0 bytes @ 0x7
  2212                           
  2213  0077                     DPYWriteByte@rs:	
  2214                           ; 1 bytes @ 0x7
  2215                           
  2216  0077                     ___awdiv@sign:	
  2217                           ; 1 bytes @ 0x7
  2218                           
  2219  0077                     CC1Write@src:	
  2220                           ; 1 bytes @ 0x7
  2221                           
  2222                           
  2223                           ; 2 bytes @ 0x7
  2224  0077                     	ds	1
  2225  0078                     ?_DPYDrawChar:	
  2226  0078                     ??_PGMReadNvm:	
  2227                           ; 0 bytes @ 0x8
  2228                           
  2229  0078                     ?_DPYSetCur:	
  2230                           ; 0 bytes @ 0x8
  2231                           
  2232  0078                     ??_DPYSendChar:	
  2233                           ; 0 bytes @ 0x8
  2234                           
  2235  0078                     ??_PGMWriteNvm:	
  2236                           ; 0 bytes @ 0x8
  2237                           
  2238  0078                     CC1Strobe@e_stb:	
  2239                           ; 0 bytes @ 0x8
  2240                           
  2241  0078                     DPYDrawChar@p:	
  2242                           ; 1 bytes @ 0x8
  2243                           
  2244  0078                     DPYSetCur@col:	
  2245                           ; 1 bytes @ 0x8
  2246                           
  2247  0078                     ___lwdiv@counter:	
  2248                           ; 1 bytes @ 0x8
  2249                           
  2250  0078                     ___awdiv@quotient:	
  2251                           ; 1 bytes @ 0x8
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0x8
  2255  0078                     	ds	1
  2256  0079                     ??_DPYDrawChar:	
  2257  0079                     ??_utoa:	
  2258                           ; 0 bytes @ 0x9
  2259                           
  2260  0079                     ??_DPYSetCur:	
  2261                           ; 0 bytes @ 0x9
  2262                           
  2263  0079                     ??___lldiv:	
  2264                           ; 0 bytes @ 0x9
  2265                           
  2266  0079                     ??___lltoft:	
  2267                           ; 0 bytes @ 0x9
  2268                           
  2269  0079                     ?___lbtoft:	
  2270                           ; 0 bytes @ 0x9
  2271                           
  2272  0079                     SPIRead@i:	
  2273                           ; 3 bytes @ 0x9
  2274                           
  2275  0079                     CC1Strobe@cc1Stb:	
  2276                           ; 1 bytes @ 0x9
  2277                           
  2278  0079                     CC1Write@len:	
  2279                           ; 1 bytes @ 0x9
  2280                           
  2281  0079                     DPYSendChar@c:	
  2282                           ; 1 bytes @ 0x9
  2283                           
  2284  0079                     ___ftadd@sign:	
  2285                           ; 1 bytes @ 0x9
  2286                           
  2287                           
  2288                           ; 1 bytes @ 0x9
  2289  0079                     	ds	1
  2290  007A                     ??_CC1Write:	
  2291  007A                     ??_itoa:	
  2292                           ; 0 bytes @ 0xA
  2293                           
  2294  007A                     ??_CC1Read:	
  2295                           ; 0 bytes @ 0xA
  2296                           
  2297  007A                     ??___llmod:	
  2298                           ; 0 bytes @ 0xA
  2299                           
  2300  007A                     DPYSetCur@row:	
  2301                           ; 0 bytes @ 0xA
  2302                           
  2303  007A                     ___ftadd@exp2:	
  2304                           ; 1 bytes @ 0xA
  2305                           
  2306  007A                     ___lltoft@exp:	
  2307                           ; 1 bytes @ 0xA
  2308                           
  2309                           
  2310                           ; 1 bytes @ 0xA
  2311  007A                     	ds	1
  2312  007B                     ??_DPYInitDisplay:	
  2313  007B                     ??_CC1Init:	
  2314                           ; 0 bytes @ 0xB
  2315                           
  2316  007B                     ?_RTXSndPkt:	
  2317                           ; 0 bytes @ 0xB
  2318                           
  2319  007B                     ?_RTXRcvPkt:	
  2320                           ; 0 bytes @ 0xB
  2321                           
  2322  007B                     DPYSetCur@addr:	
  2323                           ; 0 bytes @ 0xB
  2324                           
  2325  007B                     RTXSndPkt@len:	
  2326                           ; 1 bytes @ 0xB
  2327                           
  2328  007B                     RTXRcvPkt@len:	
  2329                           ; 1 bytes @ 0xB
  2330                           
  2331  007B                     ___ftadd@exp1:	
  2332                           ; 1 bytes @ 0xB
  2333                           
  2334  007B                     ___llmod@counter:	
  2335                           ; 1 bytes @ 0xB
  2336                           
  2337                           
  2338                           ; 1 bytes @ 0xB
  2339  007B                     	ds	1
  2340  007C                     ??_PGMCheckNvm:	
  2341  007C                     ??_RTXPgmOff:	
  2342                           ; 0 bytes @ 0xC
  2343                           
  2344  007C                     ??_DPYInit:	
  2345                           ; 0 bytes @ 0xC
  2346                           
  2347  007C                     ??_PGMInit:	
  2348                           ; 0 bytes @ 0xC
  2349                           
  2350  007C                     ??_RTXInit:	
  2351                           ; 0 bytes @ 0xC
  2352                           
  2353  007C                     ??_RTXTick:	
  2354                           ; 0 bytes @ 0xC
  2355                           
  2356  007C                     ??_RTXTask:	
  2357                           ; 0 bytes @ 0xC
  2358                           
  2359  007C                     ??_RTXPgmOn:	
  2360                           ; 0 bytes @ 0xC
  2361                           
  2362  007C                     ??_SYSTask:	
  2363                           ; 0 bytes @ 0xC
  2364                           
  2365  007C                     ??___ftsub:	
  2366                           ; 0 bytes @ 0xC
  2367                           
  2368                           
  2369                           	psect	cstackBANK0
  2370  0020                     __pcstackBANK0:	
  2371                           ; 0 bytes @ 0xC
  2372                           
  2373  0020                     ?_CC1Read:	
  2374  0020                     ?_DPYSendStr:	
  2375                           ; 0 bytes @ 0x0
  2376                           
  2377  0020                     ??___lbtoft:	
  2378                           ; 0 bytes @ 0x0
  2379                           
  2380  0020                     ?_utoa:	
  2381                           ; 0 bytes @ 0x0
  2382                           
  2383  0020                     ?___ftadd:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386  0020                     ?___ftmul:	
  2387                           ; 3 bytes @ 0x0
  2388                           
  2389  0020                     ?___lltoft:	
  2390                           ; 3 bytes @ 0x0
  2391                           
  2392  0020                     CC1Write@addr:	
  2393                           ; 3 bytes @ 0x0
  2394                           
  2395  0020                     DPYDrawChar@addr:	
  2396                           ; 1 bytes @ 0x0
  2397                           
  2398  0020                     DPYSendStr@col:	
  2399                           ; 1 bytes @ 0x0
  2400                           
  2401  0020                     CC1Read@dst:	
  2402                           ; 1 bytes @ 0x0
  2403                           
  2404  0020                     utoa@val:	
  2405                           ; 2 bytes @ 0x0
  2406                           
  2407  0020                     ___ftadd@f1:	
  2408                           ; 2 bytes @ 0x0
  2409                           
  2410  0020                     ___ftmul@f1:	
  2411                           ; 3 bytes @ 0x0
  2412                           
  2413  0020                     ___lldiv@quotient:	
  2414                           ; 3 bytes @ 0x0
  2415                           
  2416  0020                     ___lltoft@c:	
  2417                           ; 4 bytes @ 0x0
  2418                           
  2419  0020                     NVMWrite@bufTmpRow:	
  2420                           ; 4 bytes @ 0x0
  2421                           
  2422                           
  2423                           ; 64 bytes @ 0x0
  2424  0020                     	ds	1
  2425  0021                     CC1Write@cc1Addr:	
  2426  0021                     DPYDrawChar@tmpAddr:	
  2427                           ; 1 bytes @ 0x1
  2428                           
  2429  0021                     DPYSendStr@data:	
  2430                           ; 1 bytes @ 0x1
  2431                           
  2432                           
  2433                           ; 2 bytes @ 0x1
  2434  0021                     	ds	1
  2435  0022                     CC1Init@state:	
  2436  0022                     CC1Read@len:	
  2437                           ; 1 bytes @ 0x2
  2438                           
  2439  0022                     DPYDrawChar@i:	
  2440                           ; 1 bytes @ 0x2
  2441                           
  2442  0022                     utoa@base:	
  2443                           ; 1 bytes @ 0x2
  2444                           
  2445                           
  2446                           ; 2 bytes @ 0x2
  2447  0022                     	ds	1
  2448  0023                     CC1Read@addr:	
  2449  0023                     DPYInit@sta:	
  2450                           ; 1 bytes @ 0x3
  2451                           
  2452  0023                     DPYSendStr@len:	
  2453                           ; 1 bytes @ 0x3
  2454                           
  2455  0023                     ___ftadd@f2:	
  2456                           ; 1 bytes @ 0x3
  2457                           
  2458  0023                     ___ftmul@f2:	
  2459                           ; 3 bytes @ 0x3
  2460                           
  2461                           
  2462                           ; 3 bytes @ 0x3
  2463  0023                     	ds	1
  2464  0024                     ??_DPYSendStr:	
  2465  0024                     CC1Read@cc1Addr:	
  2466                           ; 0 bytes @ 0x4
  2467                           
  2468  0024                     ___lbtoft@c:	
  2469                           ; 1 bytes @ 0x4
  2470                           
  2471  0024                     ___lldiv@counter:	
  2472                           ; 1 bytes @ 0x4
  2473                           
  2474  0024                     utoa@v:	
  2475                           ; 1 bytes @ 0x4
  2476                           
  2477                           
  2478                           ; 2 bytes @ 0x4
  2479  0024                     	ds	1
  2480  0025                     ??_RTXSndPkt:	
  2481  0025                     ??_RTXRcvPkt:	
  2482                           ; 0 bytes @ 0x5
  2483                           
  2484  0025                     ?___llmod:	
  2485                           ; 0 bytes @ 0x5
  2486                           
  2487  0025                     ___llmod@divisor:	
  2488                           ; 4 bytes @ 0x5
  2489                           
  2490                           
  2491                           ; 4 bytes @ 0x5
  2492  0025                     	ds	1
  2493  0026                     ??___ftadd:	
  2494  0026                     ??___ftmul:	
  2495                           ; 0 bytes @ 0x6
  2496                           
  2497  0026                     DPYSendStr@i:	
  2498                           ; 0 bytes @ 0x6
  2499                           
  2500  0026                     RTXSndPkt@src:	
  2501                           ; 1 bytes @ 0x6
  2502                           
  2503  0026                     RTXRcvPkt@dst:	
  2504                           ; 1 bytes @ 0x6
  2505                           
  2506  0026                     utoa@c:	
  2507                           ; 1 bytes @ 0x6
  2508                           
  2509                           
  2510                           ; 1 bytes @ 0x6
  2511  0026                     	ds	1
  2512  0027                     DPYSendStr@row:	
  2513  0027                     RTXSndPkt@numRxByte:	
  2514                           ; 1 bytes @ 0x7
  2515                           
  2516  0027                     utoa@buf:	
  2517                           ; 1 bytes @ 0x7
  2518                           
  2519                           
  2520                           ; 1 bytes @ 0x7
  2521  0027                     	ds	1
  2522  0028                     ?_itoa:	
  2523  0028                     RTXSndPkt@numTxByte:	
  2524                           ; 1 bytes @ 0x8
  2525                           
  2526  0028                     itoa@val:	
  2527                           ; 1 bytes @ 0x8
  2528                           
  2529                           
  2530                           ; 2 bytes @ 0x8
  2531  0028                     	ds	1
  2532  0029                     RTXSndPkt@sta:	
  2533  0029                     ___llmod@dividend:	
  2534                           ; 1 bytes @ 0x9
  2535                           
  2536                           
  2537                           ; 4 bytes @ 0x9
  2538  0029                     	ds	1
  2539  002A                     ??_RTXSendPgm:	
  2540  002A                     ??_RTXSendRData:	
  2541                           ; 0 bytes @ 0xA
  2542                           
  2543  002A                     ?___ftsub:	
  2544                           ; 0 bytes @ 0xA
  2545                           
  2546  002A                     ___ftmul@exp:	
  2547                           ; 3 bytes @ 0xA
  2548                           
  2549  002A                     itoa@base:	
  2550                           ; 1 bytes @ 0xA
  2551                           
  2552  002A                     ___ftsub@f2:	
  2553                           ; 2 bytes @ 0xA
  2554                           
  2555                           
  2556                           ; 3 bytes @ 0xA
  2557  002A                     	ds	1
  2558  002B                     ___ftmul@f3_as_product:	
  2559                           
  2560                           ; 3 bytes @ 0xB
  2561  002B                     	ds	1
  2562  002C                     itoa@cp:	
  2563                           
  2564                           ; 1 bytes @ 0xC
  2565  002C                     	ds	1
  2566  002D                     ?_sprintf:	
  2567  002D                     sprintf@f:	
  2568                           ; 2 bytes @ 0xD
  2569                           
  2570  002D                     itoa@buf:	
  2571                           ; 1 bytes @ 0xD
  2572                           
  2573  002D                     ___ftsub@f1:	
  2574                           ; 1 bytes @ 0xD
  2575                           
  2576                           
  2577                           ; 3 bytes @ 0xD
  2578  002D                     	ds	1
  2579  002E                     ___ftmul@cntr:	
  2580                           
  2581                           ; 1 bytes @ 0xE
  2582  002E                     	ds	1
  2583  002F                     ___ftmul@sign:	
  2584                           
  2585                           ; 1 bytes @ 0xF
  2586  002F                     	ds	1
  2587  0030                     ?___fttol:	
  2588  0030                     ___fttol@f1:	
  2589                           ; 4 bytes @ 0x10
  2590                           
  2591                           
  2592                           ; 3 bytes @ 0x10
  2593  0030                     	ds	4
  2594  0034                     ??___fttol:	
  2595                           
  2596                           ; 0 bytes @ 0x14
  2597  0034                     	ds	2
  2598  0036                     ??_sprintf:	
  2599                           
  2600                           ; 0 bytes @ 0x16
  2601  0036                     	ds	2
  2602  0038                     ___fttol@sign1:	
  2603                           
  2604                           ; 1 bytes @ 0x18
  2605  0038                     	ds	1
  2606  0039                     ___fttol@lval:	
  2607                           
  2608                           ; 4 bytes @ 0x19
  2609  0039                     	ds	2
  2610  003B                     sprintf@flag:	
  2611                           
  2612                           ; 1 bytes @ 0x1B
  2613  003B                     	ds	1
  2614  003C                     sprintf@ap:	
  2615                           
  2616                           ; 1 bytes @ 0x1C
  2617  003C                     	ds	1
  2618  003D                     ___fttol@exp1:	
  2619  003D                     sprintf@_val:	
  2620                           ; 1 bytes @ 0x1D
  2621                           
  2622                           
  2623                           ; 4 bytes @ 0x1D
  2624  003D                     	ds	4
  2625  0041                     sprintf@sp:	
  2626                           
  2627                           ; 1 bytes @ 0x21
  2628  0041                     	ds	1
  2629  0042                     sprintf@width:	
  2630                           
  2631                           ; 2 bytes @ 0x22
  2632  0042                     	ds	2
  2633  0044                     sprintf@prec:	
  2634                           
  2635                           ; 2 bytes @ 0x24
  2636  0044                     	ds	2
  2637  0046                     sprintf@c:	
  2638                           
  2639                           ; 1 bytes @ 0x26
  2640  0046                     	ds	1
  2641  0047                     ?_ftoa:	
  2642  0047                     ftoa@f:	
  2643                           ; 1 bytes @ 0x27
  2644                           
  2645                           
  2646                           ; 3 bytes @ 0x27
  2647  0047                     	ds	3
  2648  004A                     ftoa@status:	
  2649                           
  2650                           ; 1 bytes @ 0x2A
  2651  004A                     	ds	1
  2652  004B                     ??_ftoa:	
  2653                           
  2654                           ; 0 bytes @ 0x2B
  2655  004B                     	ds	1
  2656  004C                     ftoa@rem:	
  2657                           
  2658                           ; 4 bytes @ 0x2C
  2659  004C                     	ds	4
  2660  0050                     ftoa@l:	
  2661                           
  2662                           ; 4 bytes @ 0x30
  2663  0050                     	ds	4
  2664  0054                     ftoa@cp:	
  2665                           
  2666                           ; 1 bytes @ 0x34
  2667  0054                     	ds	1
  2668  0055                     ??_RTXUpdateDisplay:	
  2669                           
  2670                           ; 0 bytes @ 0x35
  2671  0055                     	ds	4
  2672  0059                     RTXInit@state:	
  2673                           
  2674                           ; 1 bytes @ 0x39
  2675  0059                     	ds	7
  2676  0060                     NVMWrite@rowAddr:	
  2677                           
  2678                           ; 2 bytes @ 0x40
  2679  0060                     	ds	2
  2680  0062                     NVMWrite@i:	
  2681                           
  2682                           ; 1 bytes @ 0x42
  2683  0062                     	ds	1
  2684  0063                     NVMWrite@latchAddr:	
  2685                           
  2686                           ; 1 bytes @ 0x43
  2687  0063                     	ds	1
  2688  0064                     NVMWrite@j:	
  2689                           
  2690                           ; 1 bytes @ 0x44
  2691  0064                     	ds	1
  2692  0065                     ??_PGMNvmReset:	
  2693  0065                     ??_RTXReadPkt:	
  2694                           ; 0 bytes @ 0x45
  2695                           
  2696  0065                     ??_PGMSelLong:	
  2697                           ; 0 bytes @ 0x45
  2698                           
  2699                           
  2700                           ; 0 bytes @ 0x45
  2701  0065                     	ds	1
  2702  0066                     PGMInit@state:	
  2703  0066                     RTXReadPkt@sta:	
  2704                           ; 1 bytes @ 0x46
  2705                           
  2706                           
  2707                           ; 1 bytes @ 0x46
  2708  0066                     	ds	1
  2709  0067                     RTXReadPkt@tmp:	
  2710                           
  2711                           ; 1 bytes @ 0x47
  2712  0067                     	ds	1
  2713  0068                     RTXReadPkt@numRxByte:	
  2714                           
  2715                           ; 1 bytes @ 0x48
  2716  0068                     	ds	1
  2717  0069                     ??_main:	
  2718                           
  2719                           ; 0 bytes @ 0x49
  2720  0069                     	ds	1
  2721  006A                     main@i:	
  2722                           
  2723                           ; 1 bytes @ 0x4A
  2724  006A                     	ds	1
  2725                           
  2726                           	psect	maintext
  2727  0C70                     __pmaintext:	
  2728 ;;
  2729 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2730 ;;
  2731 ;; *************** function _main *****************
  2732 ;; Defined at:
  2733 ;;		line 51 in file "Base.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  i               1   74[BANK0 ] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;		None               void
  2740 ;; Registers used:
  2741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 17F/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2750 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;Total ram usage:        2 bytes
  2752 ;; Hardware stack levels required when called:   10
  2753 ;; This function calls:
  2754 ;;		_INInit
  2755 ;;		_OUTInit
  2756 ;;		_SPIInit
  2757 ;;		_CC1Init
  2758 ;;		_NVMInit
  2759 ;;		_DINInit
  2760 ;;		_DINTask
  2761 ;;		_DPYInit
  2762 ;;		_PGMInit
  2763 ;;		_RTXInit
  2764 ;;		_RTXTask
  2765 ;;		_SYSInit
  2766 ;;		_SYSTask
  2767 ;; This function is called by:
  2768 ;;		Startup code after reset
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           
  2773                           ;psect for function _main
  2774  0C70                     _main:	
  2775                           
  2776                           ;Base.c: 52: unsigned char i;
  2777                           ;Base.c: 55: for(i=0;i<3;i++)
  2778                           
  2779                           ;incstack = 0
  2780                           ; Regs used in _main: [allreg]
  2781  0C70  0020               	movlb	0	; select bank0
  2782  0C71  01EA               	clrf	main@i
  2783  0C72  3003               	movlw	3
  2784  0C73  026A               	subwf	main@i,w
  2785  0C74  1803               	btfsc	3,0
  2786  0C75  2CB2               	goto	l665
  2787  0C76                     l664:	
  2788  0C76  0064               	clrwdt	;# 
  2789                           
  2790                           ;Base.c: 59: SYSInit(i);
  2791  0C77  0020               	movlb	0	; select bank0
  2792  0C78  086A               	movf	main@i,w
  2793  0C79  3188  20CB  318C   	fcall	_SYSInit
  2794                           
  2795                           ;Base.c: 60: INInit(i);
  2796  0C7C  0020               	movlb	0	; select bank0
  2797  0C7D  086A               	movf	main@i,w
  2798  0C7E  3197  2716  318C   	fcall	_INInit
  2799                           
  2800                           ;Base.c: 61: OUTInit(i);
  2801  0C81  0020               	movlb	0	; select bank0
  2802  0C82  086A               	movf	main@i,w
  2803  0C83  3197  272D  318C   	fcall	_OUTInit
  2804                           
  2805                           ;Base.c: 62: DINInit(i);
  2806  0C86  0020               	movlb	0	; select bank0
  2807  0C87  086A               	movf	main@i,w
  2808  0C88  3196  267E  318C   	fcall	_DINInit
  2809                           
  2810                           ;Base.c: 63: SPIInit(i);
  2811  0C8B  0020               	movlb	0	; select bank0
  2812  0C8C  086A               	movf	main@i,w
  2813  0C8D  3188  2068  318C   	fcall	_SPIInit
  2814                           
  2815                           ;Base.c: 64: CC1Init(i);
  2816  0C90  0020               	movlb	0	; select bank0
  2817  0C91  086A               	movf	main@i,w
  2818  0C92  318A  22D3  318C   	fcall	_CC1Init
  2819                           
  2820                           ;Base.c: 65: NVMInit(i);
  2821  0C95  0020               	movlb	0	; select bank0
  2822  0C96  086A               	movf	main@i,w
  2823  0C97  3196  2624  318C   	fcall	_NVMInit
  2824                           
  2825                           ;Base.c: 66: DPYInit(i);
  2826  0C9A  0020               	movlb	0	; select bank0
  2827  0C9B  086A               	movf	main@i,w
  2828  0C9C  3196  26A0  318C   	fcall	_DPYInit
  2829                           
  2830                           ;Base.c: 67: RTXInit(i);
  2831  0C9F  0020               	movlb	0	; select bank0
  2832  0CA0  086A               	movf	main@i,w
  2833  0CA1  3189  215B  318C   	fcall	_RTXInit
  2834                           
  2835                           ;Base.c: 68: PGMInit(i);
  2836  0CA4  0020               	movlb	0	; select bank0
  2837  0CA5  086A               	movf	main@i,w
  2838  0CA6  3197  2776  318C   	fcall	_PGMInit
  2839  0CA9  3001               	movlw	1
  2840  0CAA  0020               	movlb	0	; select bank0
  2841  0CAB  00E9               	movwf	??_main
  2842  0CAC  0869               	movf	??_main,w
  2843  0CAD  07EA               	addwf	main@i,f
  2844  0CAE  3003               	movlw	3
  2845  0CAF  026A               	subwf	main@i,w
  2846  0CB0  1C03               	skipc
  2847  0CB1  2C76               	goto	l664
  2848  0CB2                     l665:	
  2849                           
  2850                           ;Base.c: 69: }
  2851                           ;Base.c: 72: INTCONbits.GIE=1;
  2852  0CB2  178B               	bsf	11,7	;volatile
  2853  0CB3                     l666:	
  2854                           ;Base.c: 75: while(1)
  2855                           
  2856  0CB3  0064               	clrwdt	;# 
  2857                           
  2858                           ;Base.c: 79: SYSTask();
  2859  0CB4  318B  2303  318C   	fcall	_SYSTask
  2860                           
  2861                           ;Base.c: 80: DINTask();
  2862  0CB7  3197  27E3  318C   	fcall	_DINTask
  2863                           
  2864                           ;Base.c: 81: RTXTask();
  2865  0CBA  3195  25EB  318C   	fcall	_RTXTask
  2866  0CBD  2CB3               	goto	l666
  2867  0CBE                     __end_of_main:	
  2868                           
  2869                           	psect	text1
  2870  0B03                     __ptext1:	
  2871 ;; *************** function _SYSTask *****************
  2872 ;; Defined at:
  2873 ;;		line 42 in file "SYS.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;		None               void
  2880 ;; Registers used:
  2881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2891 ;;Total ram usage:        0 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    8
  2894 ;; This function calls:
  2895 ;;		_DINTick
  2896 ;;		_PGMTick
  2897 ;;		_PGMPgmOff
  2898 ;;		_PGMSelDown
  2899 ;;		_PGMSelLong
  2900 ;;		_RTXTick
  2901 ;;		_RTXPgmOff
  2902 ;;		_RTXPgmOn
  2903 ;; This function is called by:
  2904 ;;		_main
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           
  2909                           ;psect for function _SYSTask
  2910  0B03                     _SYSTask:	
  2911                           
  2912                           ;SYS.c: 44: if(u_SYS_STA.TICK)
  2913                           
  2914                           ;incstack = 0
  2915                           ; Regs used in _SYSTask: [allreg]
  2916  0B03  0021               	movlb	1	; select bank1
  2917  0B04  1C2F               	btfss	_u_SYS_STA^(0+128),0
  2918  0B05  2B10               	goto	l5023
  2919                           
  2920                           ;SYS.c: 45: {
  2921                           ;SYS.c: 47: u_SYS_STA.TICK=0;
  2922  0B06  102F               	bcf	_u_SYS_STA^(0+128),0
  2923                           
  2924                           ;SYS.c: 50: RTXTick();
  2925  0B07  3187  27D5  318B   	fcall	_RTXTick
  2926                           
  2927                           ;SYS.c: 51: DINTick();
  2928  0B0A  3189  21A7  318B   	fcall	_DINTick
  2929                           
  2930                           ;SYS.c: 52: PGMTick();
  2931  0B0D  3196  266E  318B   	fcall	_PGMTick
  2932  0B10                     l5023:	
  2933                           
  2934                           ;SYS.c: 53: }
  2935                           ;SYS.c: 55: if(u_in_ev_down.sel)
  2936  0B10  0021               	movlb	1	; select bank1
  2937  0B11  1C30               	btfss	_u_in_ev_down^(0+128),0
  2938  0B12  2B17               	goto	l5029
  2939                           
  2940                           ;SYS.c: 56: {
  2941                           ;SYS.c: 58: u_in_ev_down.sel=0;
  2942  0B13  1030               	bcf	_u_in_ev_down^(0+128),0
  2943                           
  2944                           ;SYS.c: 59: PGMSelDown();
  2945  0B14  3196  262F  318B   	fcall	_PGMSelDown
  2946  0B17                     l5029:	
  2947                           
  2948                           ;SYS.c: 60: }
  2949                           ;SYS.c: 61: if(u_in_ev_long.sel)
  2950  0B17  0021               	movlb	1	; select bank1
  2951  0B18  1C31               	btfss	_u_in_ev_long^(0+128),0
  2952  0B19  2B1E               	goto	l5035
  2953                           
  2954                           ;SYS.c: 62: {
  2955                           ;SYS.c: 64: u_in_ev_long.sel=0;
  2956  0B1A  1031               	bcf	_u_in_ev_long^(0+128),0
  2957                           
  2958                           ;SYS.c: 65: PGMSelLong();
  2959  0B1B  3196  2646  318B   	fcall	_PGMSelLong
  2960  0B1E                     l5035:	
  2961                           
  2962                           ;SYS.c: 66: }
  2963                           ;SYS.c: 70: if(rtx_flg.pgmDone)
  2964  0B1E  0020               	movlb	0	; select bank0
  2965  0B1F  1CEB               	btfss	_rtx_flg,1
  2966  0B20  2B25               	goto	l5041
  2967                           
  2968                           ;SYS.c: 71: {
  2969                           ;SYS.c: 73: rtx_flg.pgmDone=0;
  2970  0B21  10EB               	bcf	_rtx_flg,1
  2971                           
  2972                           ;SYS.c: 75: PGMPgmOff();
  2973  0B22  3195  25F1  318B   	fcall	_PGMPgmOff
  2974  0B25                     l5041:	
  2975                           
  2976                           ;SYS.c: 76: }
  2977                           ;SYS.c: 79: if(pgm_flg.evPgmOn)
  2978  0B25  0021               	movlb	1	; select bank1
  2979  0B26  1CAC               	btfss	_pgm_flg^(0+128),1
  2980  0B27  2B2C               	goto	l5047
  2981                           
  2982                           ;SYS.c: 80: {
  2983                           ;SYS.c: 82: pgm_flg.evPgmOn=0;
  2984  0B28  10AC               	bcf	_pgm_flg^(0+128),1
  2985                           
  2986                           ;SYS.c: 84: RTXPgmOn();
  2987  0B29  3196  261B  318B   	fcall	_RTXPgmOn
  2988  0B2C                     l5047:	
  2989                           
  2990                           ;SYS.c: 85: }
  2991                           ;SYS.c: 86: if(pgm_flg.evPgmOff)
  2992  0B2C  0021               	movlb	1	; select bank1
  2993  0B2D  1D2C               	btfss	_pgm_flg^(0+128),2
  2994  0B2E  0008               	return
  2995                           
  2996                           ;SYS.c: 87: {
  2997                           ;SYS.c: 89: pgm_flg.evPgmOff=0;
  2998  0B2F  112C               	bcf	_pgm_flg^(0+128),2
  2999                           
  3000                           ;SYS.c: 91: RTXPgmOff();
  3001  0B30  3196  2603         	fcall	_RTXPgmOff
  3002  0B32  0008               	return
  3003  0B33                     __end_of_SYSTask:	
  3004                           
  3005                           	psect	text2
  3006  161B                     __ptext2:	
  3007 ;; *************** function _RTXPgmOn *****************
  3008 ;; Defined at:
  3009 ;;		line 367 in file "RTX.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    7
  3030 ;; This function calls:
  3031 ;;		_RTXUpdateDisplay
  3032 ;;		_RTXSendPgm
  3033 ;; This function is called by:
  3034 ;;		_SYSTask
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _RTXPgmOn
  3040  161B                     _RTXPgmOn:	
  3041                           
  3042                           ;RTX.c: 369: rtx_flg.pgmonoff=1;
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _RTXPgmOn: [allreg]
  3046  161B  0020               	movlb	0	; select bank0
  3047  161C  156B               	bsf	_rtx_flg,2
  3048                           
  3049                           ;RTX.c: 371: RTXSendPgm();
  3050  161D  3188  20EE  3196   	fcall	_RTXSendPgm
  3051                           
  3052                           ;RTX.c: 373: RTXUpdateDisplay(UPD_DPY_PGM);
  3053  1620  3002               	movlw	2
  3054  1621  3180  2043         	fcall	_RTXUpdateDisplay
  3055  1623  0008               	return
  3056  1624                     __end_of_RTXPgmOn:	
  3057                           
  3058                           	psect	text3
  3059  07D5                     __ptext3:	
  3060 ;; *************** function _RTXTick *****************
  3061 ;; Defined at:
  3062 ;;		line 83 in file "RTX.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;		None
  3067 ;; Return value:  Size  Location     Type
  3068 ;;		None               void
  3069 ;; Registers used:
  3070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;Total ram usage:        0 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    6
  3083 ;; This function calls:
  3084 ;;		_CC1Strobe
  3085 ;;		_RTXSendPgm
  3086 ;; This function is called by:
  3087 ;;		_SYSTask
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           
  3092                           ;psect for function _RTXTick
  3093  07D5                     _RTXTick:	
  3094                           
  3095                           ;RTX.c: 85: tmrCalibration++;
  3096                           
  3097                           ;incstack = 0
  3098                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3099  07D5  3001               	movlw	1
  3100  07D6  0021               	movlb	1	; select bank1
  3101  07D7  07A6               	addwf	_tmrCalibration^(0+128),f
  3102  07D8  3000               	movlw	0
  3103  07D9  3DA7               	addwfc	(_tmrCalibration+1)^(0+128),f
  3104                           
  3105                           ;RTX.c: 86: if(tmrCalibration>1000)
  3106  07DA  3003               	movlw	3
  3107  07DB  0227               	subwf	(_tmrCalibration+1)^(0+128),w
  3108  07DC  30E9               	movlw	233
  3109  07DD  1903               	skipnz
  3110  07DE  0226               	subwf	_tmrCalibration^(0+128),w
  3111  07DF  1C03               	skipc
  3112  07E0  2FF3               	goto	l4857
  3113                           
  3114                           ;RTX.c: 87: {
  3115                           ;RTX.c: 88: tmrCalibration=0;
  3116  07E1  01A6               	clrf	_tmrCalibration^(0+128)
  3117  07E2  01A7               	clrf	(_tmrCalibration+1)^(0+128)
  3118                           
  3119                           ;RTX.c: 89: CC1Strobe(SIDLE);
  3120  07E3  3036               	movlw	54
  3121  07E4  3196  26EC  3187   	fcall	_CC1Strobe
  3122                           
  3123                           ;RTX.c: 90: CC1Strobe(SCAL);
  3124  07E7  3033               	movlw	51
  3125  07E8  3196  26EC  3187   	fcall	_CC1Strobe
  3126                           
  3127                           ;RTX.c: 91: CC1Strobe(SFRX);
  3128  07EB  303A               	movlw	58
  3129  07EC  3196  26EC  3187   	fcall	_CC1Strobe
  3130                           
  3131                           ;RTX.c: 92: CC1Strobe(SRX);
  3132  07EF  3034               	movlw	52
  3133  07F0  3196  26EC  3187   	fcall	_CC1Strobe
  3134  07F3                     l4857:	
  3135                           
  3136                           ;RTX.c: 93: }
  3137                           ;RTX.c: 96: if(tmrRcvPkt)
  3138  07F3  0020               	movlb	0	; select bank0
  3139  07F4  086D               	movf	_tmrRcvPkt,w
  3140  07F5  1903               	btfsc	3,2
  3141  07F6  0008               	return
  3142                           
  3143                           ;RTX.c: 97: {
  3144                           ;RTX.c: 98: tmrRcvPkt--;
  3145  07F7  3001               	movlw	1
  3146  07F8  02ED               	subwf	_tmrRcvPkt,f
  3147                           
  3148                           ;RTX.c: 99: if(!(tmrRcvPkt))
  3149  07F9  08ED               	movf	_tmrRcvPkt,f
  3150  07FA  1D03               	skipz
  3151  07FB  0008               	return
  3152                           
  3153                           ;RTX.c: 100: RTXSendPgm();
  3154  07FC  3188  20EE         	fcall	_RTXSendPgm
  3155  07FE  0020               	movlb	0	; select bank0
  3156  07FF  0008               	return
  3157  0800                     __end_of_RTXTick:	
  3158                           
  3159                           	psect	text4
  3160  08EE                     __ptext4:	
  3161 ;; *************** function _RTXSendPgm *****************
  3162 ;; Defined at:
  3163 ;;		line 347 in file "RTX.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;		None
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;		None
  3168 ;; Return value:  Size  Location     Type
  3169 ;;		None               void
  3170 ;; Registers used:
  3171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;Total ram usage:        1 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    5
  3184 ;; This function calls:
  3185 ;;		_RTXSndPkt
  3186 ;; This function is called by:
  3187 ;;		_RTXTick
  3188 ;;		_RTXPgmOn
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _RTXSendPgm
  3194  08EE                     _RTXSendPgm:	
  3195                           
  3196                           ;RTX.c: 349: pktTx[0]=pgm_cfg.sensId;
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3200  08EE  0021               	movlb	1	; select bank1
  3201  08EF  084F               	movf	(_pgm_cfg^(0+128)+3),w
  3202  08F0  0020               	movlb	0	; select bank0
  3203  08F1  00AA               	movwf	??_RTXSendPgm
  3204  08F2  082A               	movf	??_RTXSendPgm,w
  3205  08F3  0021               	movlb	1	; select bank1
  3206  08F4  00C3               	movwf	_pktTx^(0+128)
  3207                           
  3208                           ;RTX.c: 350: pktTx[1]=pgm_cfg.baseId;
  3209  08F5  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3210  08F6  0020               	movlb	0	; select bank0
  3211  08F7  00AA               	movwf	??_RTXSendPgm
  3212  08F8  082A               	movf	??_RTXSendPgm,w
  3213  08F9  0021               	movlb	1	; select bank1
  3214  08FA  00C4               	movwf	(_pktTx^(0+128)+1)
  3215                           
  3216                           ;RTX.c: 351: pktTx[2]=PGM;
  3217  08FB  01C5               	clrf	(_pktTx^(0+128)+2)
  3218  08FC  0AC5               	incf	(_pktTx^(0+128)+2),f
  3219                           
  3220                           ;RTX.c: 352: pktTx[3]=0x00;
  3221  08FD  01C6               	clrf	(_pktTx^(0+128)+3)
  3222                           
  3223                           ;RTX.c: 353: pktTx[4]=0x00;
  3224  08FE  01C7               	clrf	(_pktTx^(0+128)+4)
  3225                           
  3226                           ;RTX.c: 354: pktTx[5]=0x00;
  3227  08FF  01C8               	clrf	(_pktTx^(0+128)+5)
  3228                           
  3229                           ;RTX.c: 355: pktTx[6]=0x00;
  3230  0900  01C9               	clrf	(_pktTx^(0+128)+6)
  3231                           
  3232                           ;RTX.c: 356: pktTx[7]=0x00;
  3233  0901  01CA               	clrf	(_pktTx^(0+128)+7)
  3234                           
  3235                           ;RTX.c: 357: pktTx[8]=0x00;
  3236  0902  01CB               	clrf	(_pktTx^(0+128)+8)
  3237                           
  3238                           ;RTX.c: 360: RTXSndPkt(pktTx,9);
  3239  0903  3009               	movlw	9
  3240  0904  0020               	movlb	0	; select bank0
  3241  0905  00AA               	movwf	??_RTXSendPgm
  3242  0906  082A               	movf	??_RTXSendPgm,w
  3243  0907  00FB               	movwf	?_RTXSndPkt
  3244  0908  30C3               	movlw	_pktTx& (0+255)
  3245  0909  318D  2564         	fcall	_RTXSndPkt
  3246                           
  3247                           ;RTX.c: 363: tmrRcvPkt=100;
  3248  090B  3064               	movlw	100
  3249  090C  0020               	movlb	0	; select bank0
  3250  090D  00AA               	movwf	??_RTXSendPgm
  3251  090E  082A               	movf	??_RTXSendPgm,w
  3252  090F  00ED               	movwf	_tmrRcvPkt
  3253  0910  0008               	return
  3254  0911                     __end_of_RTXSendPgm:	
  3255                           
  3256                           	psect	text5
  3257  1646                     __ptext5:	
  3258 ;; *************** function _PGMSelLong *****************
  3259 ;; Defined at:
  3260 ;;		line 105 in file "PGM.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;		None
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;		None               void
  3267 ;; Registers used:
  3268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3277 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3278 ;;Total ram usage:        1 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    4
  3281 ;; This function calls:
  3282 ;;		_PGMWriteNvm
  3283 ;; This function is called by:
  3284 ;;		_SYSTask
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           
  3289                           ;psect for function _PGMSelLong
  3290  1646                     _PGMSelLong:	
  3291                           
  3292                           ;PGM.c: 107: pgm_cfg.sensId=TMR1L^TMR1H;
  3293                           
  3294                           ;incstack = 0
  3295                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3296  1646  0020               	movlb	0	; select bank0
  3297  1647  0816               	movf	22,w	;volatile
  3298  1648  0617               	xorwf	23,w	;volatile
  3299  1649  00E5               	movwf	??_PGMSelLong
  3300  164A  0865               	movf	??_PGMSelLong,w
  3301  164B  0021               	movlb	1	; select bank1
  3302  164C  00CF               	movwf	(_pgm_cfg^(0+128)+3)
  3303                           
  3304                           ;PGM.c: 109: pgm_cfg.menu=0x01;
  3305  164D  01CE               	clrf	(_pgm_cfg^(0+128)+2)
  3306  164E  0ACE               	incf	(_pgm_cfg^(0+128)+2),f
  3307                           
  3308                           ;PGM.c: 111: PGMWriteNvm();
  3309  164F  3196  26C6         	fcall	_PGMWriteNvm
  3310  1651  0008               	return
  3311  1652                     __end_of_PGMSelLong:	
  3312                           
  3313                           	psect	text6
  3314  162F                     __ptext6:	
  3315 ;; *************** function _PGMSelDown *****************
  3316 ;; Defined at:
  3317 ;;		line 94 in file "PGM.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;		None               void
  3324 ;; Registers used:
  3325 ;;		wreg
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;Total ram usage:        0 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    2
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_SYSTask
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           
  3346                           ;psect for function _PGMSelDown
  3347  162F                     _PGMSelDown:	
  3348                           
  3349                           ;PGM.c: 96: pgm_flg.pgmonoff=1;
  3350                           
  3351                           ;incstack = 0
  3352                           ; Regs used in _PGMSelDown: [wreg]
  3353  162F  0021               	movlb	1	; select bank1
  3354  1630  142C               	bsf	_pgm_flg^(0+128),0
  3355                           
  3356                           ;PGM.c: 97: pgm_flg.evPgmOn=1;
  3357  1631  14AC               	bsf	_pgm_flg^(0+128),1
  3358                           
  3359                           ;PGM.c: 99: LATCbits.LATC7=0;
  3360  1632  0022               	movlb	2	; select bank2
  3361  1633  138E               	bcf	14,7	;volatile
  3362                           
  3363                           ;PGM.c: 101: tmrPgm=1000;
  3364  1634  30E8               	movlw	232
  3365  1635  0021               	movlb	1	; select bank1
  3366  1636  00AA               	movwf	_tmrPgm^(0+128)
  3367  1637  3003               	movlw	3
  3368  1638  00AB               	movwf	(_tmrPgm^(0+128)+1)
  3369  1639  0008               	return
  3370  163A                     __end_of_PGMSelDown:	
  3371                           
  3372                           	psect	text7
  3373  166E                     __ptext7:	
  3374 ;; *************** function _PGMTick *****************
  3375 ;; Defined at:
  3376 ;;		line 44 in file "PGM.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;		None               void
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, pclath, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3394 ;;Total ram usage:        0 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    3
  3397 ;; This function calls:
  3398 ;;		_PGMPgmOff
  3399 ;; This function is called by:
  3400 ;;		_SYSTask
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           
  3405                           ;psect for function _PGMTick
  3406  166E                     _PGMTick:	
  3407                           
  3408                           ;PGM.c: 46: if(tmrPgm)
  3409                           
  3410                           ;incstack = 0
  3411                           ; Regs used in _PGMTick: [wreg+status,2+status,0+pclath+cstack]
  3412  166E  0021               	movlb	1	; select bank1
  3413  166F  082B               	movf	(_tmrPgm+1)^(0+128),w
  3414  1670  042A               	iorwf	_tmrPgm^(0+128),w
  3415  1671  1903               	skipnz
  3416  1672  0008               	return
  3417                           
  3418                           ;PGM.c: 47: {
  3419                           ;PGM.c: 48: tmrPgm--;
  3420  1673  3001               	movlw	1
  3421  1674  02AA               	subwf	_tmrPgm^(0+128),f
  3422  1675  3000               	movlw	0
  3423  1676  3BAB               	subwfb	(_tmrPgm+1)^(0+128),f
  3424                           
  3425                           ;PGM.c: 49: if(!(tmrPgm))
  3426  1677  082B               	movf	(_tmrPgm+1)^(0+128),w
  3427  1678  042A               	iorwf	_tmrPgm^(0+128),w
  3428  1679  1D03               	skipz
  3429  167A  0008               	return
  3430                           
  3431                           ;PGM.c: 50: PGMPgmOff();
  3432  167B  3195  25F1         	fcall	_PGMPgmOff
  3433  167D  0008               	return
  3434  167E                     __end_of_PGMTick:	
  3435                           
  3436                           	psect	text8
  3437  15F1                     __ptext8:	
  3438 ;; *************** function _PGMPgmOff *****************
  3439 ;; Defined at:
  3440 ;;		line 85 in file "PGM.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;		None
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;		None
  3445 ;; Return value:  Size  Location     Type
  3446 ;;		None               void
  3447 ;; Registers used:
  3448 ;;		status,2
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3458 ;;Total ram usage:        0 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    2
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_PGMTick
  3465 ;;		_SYSTask
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           
  3470                           ;psect for function _PGMPgmOff
  3471  15F1                     _PGMPgmOff:	
  3472                           
  3473                           ;PGM.c: 87: tmrPgm=0;
  3474                           
  3475                           ;incstack = 0
  3476                           ; Regs used in _PGMPgmOff: [status,2]
  3477  15F1  0021               	movlb	1	; select bank1
  3478  15F2  01AA               	clrf	_tmrPgm^(0+128)
  3479  15F3  01AB               	clrf	(_tmrPgm+1)^(0+128)
  3480                           
  3481                           ;PGM.c: 89: pgm_flg.pgmonoff=0;
  3482  15F4  102C               	bcf	_pgm_flg^(0+128),0
  3483                           
  3484                           ;PGM.c: 90: pgm_flg.evPgmOff=1;
  3485  15F5  152C               	bsf	_pgm_flg^(0+128),2
  3486  15F6  0008               	return
  3487  15F7                     __end_of_PGMPgmOff:	
  3488                           
  3489                           	psect	text9
  3490  09A7                     __ptext9:	
  3491 ;; *************** function _DINTick *****************
  3492 ;; Defined at:
  3493 ;;		line 47 in file "DIN.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3509 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3510 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3511 ;;Total ram usage:        1 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    2
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_SYSTask
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           
  3522                           ;psect for function _DINTick
  3523  09A7                     _DINTick:	
  3524                           
  3525                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3526                           
  3527                           ;incstack = 0
  3528                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3529  09A7  0020               	movlb	0	; select bank0
  3530  09A8  1C6E               	btfss	_u_flg_din,0
  3531  09A9  29BB               	goto	l214
  3532                           
  3533                           ;DIN.c: 51: {
  3534                           ;DIN.c: 52: tmrDbncSel++;
  3535  09AA  3001               	movlw	1
  3536  09AB  00F1               	movwf	??_DINTick
  3537  09AC  0871               	movf	??_DINTick,w
  3538  09AD  07EC               	addwf	_tmrDbncSel,f
  3539                           
  3540                           ;DIN.c: 53: if(tmrDbncSel>5)
  3541  09AE  3006               	movlw	6
  3542  09AF  026C               	subwf	_tmrDbncSel,w
  3543  09B0  1C03               	skipc
  3544  09B1  29BB               	goto	l214
  3545                           
  3546                           ;DIN.c: 54: {
  3547                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3548  09B2  106E               	bcf	_u_flg_din,0
  3549                           
  3550                           ;DIN.c: 56: tmrDbncSel=0;
  3551  09B3  01EC               	clrf	_tmrDbncSel
  3552                           
  3553                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3554  09B4  1C7C               	btfss	_u_in_sta_currTask,0
  3555  09B5  29B9               	goto	l216
  3556                           
  3557                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3558  09B6  0021               	movlb	1	; select bank1
  3559  09B7  1430               	bsf	_u_in_ev_down^(0+128),0
  3560  09B8  29BB               	goto	l214
  3561  09B9                     l216:	
  3562                           
  3563                           ;DIN.c: 60: else
  3564                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3565  09B9  0021               	movlb	1	; select bank1
  3566  09BA  1432               	bsf	_u_in_ev_up^(0+128),0
  3567  09BB                     l214:	
  3568                           
  3569                           ;DIN.c: 62: }
  3570                           ;DIN.c: 63: }
  3571                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3572  09BB  0020               	movlb	0	; select bank0
  3573  09BC  1CEE               	btfss	_u_flg_din,1
  3574  09BD  0008               	return
  3575                           
  3576                           ;DIN.c: 67: {
  3577                           ;DIN.c: 68: tmrLongSel++;
  3578  09BE  3001               	movlw	1
  3579  09BF  0021               	movlb	1	; select bank1
  3580  09C0  07A8               	addwf	_tmrLongSel^(0+128),f
  3581  09C1  3000               	movlw	0
  3582  09C2  3DA9               	addwfc	(_tmrLongSel+1)^(0+128),f
  3583                           
  3584                           ;DIN.c: 69: if(tmrLongSel>200)
  3585  09C3  3000               	movlw	0
  3586  09C4  0229               	subwf	(_tmrLongSel+1)^(0+128),w
  3587  09C5  30C9               	movlw	201
  3588  09C6  1903               	skipnz
  3589  09C7  0228               	subwf	_tmrLongSel^(0+128),w
  3590  09C8  1C03               	skipc
  3591  09C9  0008               	return
  3592                           
  3593                           ;DIN.c: 70: {
  3594                           ;DIN.c: 72: tmrLongSel=0;
  3595  09CA  01A8               	clrf	_tmrLongSel^(0+128)
  3596  09CB  01A9               	clrf	(_tmrLongSel+1)^(0+128)
  3597                           
  3598                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3599  09CC  1431               	bsf	_u_in_ev_long^(0+128),0
  3600  09CD  0008               	return
  3601  09CE                     __end_of_DINTick:	
  3602                           
  3603                           	psect	text10
  3604  08CB                     __ptext10:	
  3605 ;; *************** function _SYSInit *****************
  3606 ;; Defined at:
  3607 ;;		line 15 in file "SYS.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  state           1    wreg     unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  state           1    2[COMMON] unsigned char 
  3612 ;; Return value:  Size  Location     Type
  3613 ;;		None               void
  3614 ;; Registers used:
  3615 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3625 ;;Total ram usage:        2 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    2
  3628 ;; This function calls:
  3629 ;;		Nothing
  3630 ;; This function is called by:
  3631 ;;		_main
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           
  3636                           ;psect for function _SYSInit
  3637  08CB                     _SYSInit:	
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3641                           ;SYSInit@state stored from wreg
  3642  08CB  00F2               	movwf	SYSInit@state
  3643                           
  3644                           ;SYS.c: 16: switch(state)
  3645  08CC  28E5               	goto	l3773
  3646  08CD                     l3755:	
  3647                           ;SYS.c: 17: {
  3648                           ;SYS.c: 18: case 0:
  3649                           
  3650                           
  3651                           ;SYS.c: 20: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; TMR0=255-156; I
      +                          NTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000; PIE1=0b00000000
      +                          ; PIE2=0b00000000;
  3652  08CD  3006               	movlw	6
  3653  08CE  0021               	movlb	1	; select bank1
  3654  08CF  0095               	movwf	21	;volatile
  3655  08D0  3071               	movlw	113
  3656  08D1  0099               	movwf	25	;volatile
  3657  08D2  3009               	movlw	9
  3658  08D3  0097               	movwf	23	;volatile
  3659  08D4  3063               	movlw	99
  3660  08D5  0020               	movlb	0	; select bank0
  3661  08D6  0095               	movwf	21	;volatile
  3662  08D7  168B               	bsf	11,5	;volatile
  3663  08D8  30FB               	movlw	251
  3664  08D9  00F1               	movwf	??_SYSInit
  3665  08DA  0871               	movf	??_SYSInit,w
  3666  08DB  058B               	andwf	11,f	;volatile
  3667  08DC  0191               	clrf	17	;volatile
  3668  08DD  0192               	clrf	18	;volatile
  3669  08DE  0021               	movlb	1	; select bank1
  3670  08DF  0191               	clrf	17	;volatile
  3671  08E0  0192               	clrf	18	;volatile
  3672                           
  3673                           ;SYS.c: 21: break;
  3674  08E1  0008               	return
  3675  08E2                     l3769:	
  3676                           ;SYS.c: 22: case 1:
  3677                           
  3678                           
  3679                           ;SYS.c: 24: u_SYS_STA.VAL=0;
  3680  08E2  0021               	movlb	1	; select bank1
  3681  08E3  01AF               	clrf	_u_SYS_STA^(0+128)
  3682                           
  3683                           ;SYS.c: 29: }
  3684                           
  3685                           ;SYS.c: 25: break;
  3686  08E4  0008               	return
  3687  08E5                     l3773:	
  3688  08E5  0872               	movf	SYSInit@state,w
  3689                           
  3690                           ; Switch size 1, requested type "space"
  3691                           ; Number of cases is 2, Range of values is 0 to 1
  3692                           ; switch strategies available:
  3693                           ; Name         Instructions Cycles
  3694                           ; simple_byte            7     4 (average)
  3695                           ; direct_byte           10     6 (fixed)
  3696                           ; jumptable            260     6 (fixed)
  3697                           ;	Chosen strategy is simple_byte
  3698  08E6  3A00               	xorlw	0	; case 0
  3699  08E7  1903               	skipnz
  3700  08E8  28CD               	goto	l3755
  3701  08E9  3A01               	xorlw	1	; case 1
  3702  08EA  1903               	skipnz
  3703  08EB  28E2               	goto	l3769
  3704  08EC  28ED               	goto	l591
  3705  08ED                     l591:	
  3706  08ED  0008               	return
  3707  08EE                     __end_of_SYSInit:	
  3708                           
  3709                           	psect	text11
  3710  15EB                     __ptext11:	
  3711 ;; *************** function _RTXTask *****************
  3712 ;; Defined at:
  3713 ;;		line 105 in file "RTX.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;		None
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;		None
  3718 ;; Return value:  Size  Location     Type
  3719 ;;		None               void
  3720 ;; Registers used:
  3721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3731 ;;Total ram usage:        0 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    9
  3734 ;; This function calls:
  3735 ;;		_RTXReadPkt
  3736 ;; This function is called by:
  3737 ;;		_main
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           
  3742                           ;psect for function _RTXTask
  3743  15EB                     _RTXTask:	
  3744                           
  3745                           ;RTX.c: 107: if(!(PORTBbits.RB0))
  3746                           
  3747                           ;incstack = 0
  3748                           ; Regs used in _RTXTask: [allreg]
  3749  15EB  0020               	movlb	0	; select bank0
  3750  15EC  180D               	btfsc	13,0	;volatile
  3751  15ED  0008               	return
  3752                           
  3753                           ;RTX.c: 108: RTXReadPkt();
  3754  15EE  318F  276C         	fcall	_RTXReadPkt
  3755  15F0  0008               	return
  3756  15F1                     __end_of_RTXTask:	
  3757                           
  3758                           	psect	text12
  3759  0F6C                     __ptext12:	
  3760 ;; *************** function _RTXReadPkt *****************
  3761 ;; Defined at:
  3762 ;;		line 268 in file "RTX.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  numRxByte       1   72[BANK0 ] unsigned char 
  3767 ;;  tmp             1   71[BANK0 ] unsigned char 
  3768 ;;  sta             1   70[BANK0 ] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;		None               void
  3771 ;; Registers used:
  3772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3779 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3781 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;Total ram usage:        4 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    8
  3785 ;; This function calls:
  3786 ;;		_DLYDelay_ms
  3787 ;;		_CC1Read
  3788 ;;		_PGMWriteNvm
  3789 ;;		_RTXUpdateDisplay
  3790 ;;		_RTXRcvPkt
  3791 ;;		_RTXPgmOff
  3792 ;;		_RTXSendRData
  3793 ;;		___lbtoft
  3794 ;; This function is called by:
  3795 ;;		_RTXTask
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _RTXReadPkt
  3801  0F6C                     _RTXReadPkt:	
  3802                           
  3803                           ;RTX.c: 269: unsigned char numRxByte,tmp,sta;
  3804                           ;RTX.c: 272: CC1Read(0x35,(&(sta)),1);
  3805                           
  3806                           ;incstack = 0
  3807                           ; Regs used in _RTXReadPkt: [allreg]
  3808  0F6C  3066               	movlw	low RTXReadPkt@sta
  3809  0F6D  0020               	movlb	0	; select bank0
  3810  0F6E  00A0               	movwf	?_CC1Read
  3811  0F6F  3000               	movlw	high RTXReadPkt@sta
  3812  0F70  00A1               	movwf	?_CC1Read+1
  3813  0F71  01A2               	clrf	?_CC1Read+2
  3814  0F72  0AA2               	incf	?_CC1Read+2,f
  3815  0F73  3035               	movlw	53
  3816  0F74  3189  2111  318F   	fcall	_CC1Read
  3817                           
  3818                           ;RTX.c: 273: CC1Read(0x38,(&(tmp)),1);
  3819  0F77  3067               	movlw	low RTXReadPkt@tmp
  3820  0F78  0020               	movlb	0	; select bank0
  3821  0F79  00A0               	movwf	?_CC1Read
  3822  0F7A  3000               	movlw	high RTXReadPkt@tmp
  3823  0F7B  00A1               	movwf	?_CC1Read+1
  3824  0F7C  01A2               	clrf	?_CC1Read+2
  3825  0F7D  0AA2               	incf	?_CC1Read+2,f
  3826  0F7E  3038               	movlw	56
  3827  0F7F  3189  2111  318F   	fcall	_CC1Read
  3828                           
  3829                           ;RTX.c: 274: CC1Read(0x3B,(&(numRxByte)),1);
  3830  0F82  3068               	movlw	low RTXReadPkt@numRxByte
  3831  0F83  0020               	movlb	0	; select bank0
  3832  0F84  00A0               	movwf	?_CC1Read
  3833  0F85  3000               	movlw	high RTXReadPkt@numRxByte
  3834  0F86  00A1               	movwf	?_CC1Read+1
  3835  0F87  01A2               	clrf	?_CC1Read+2
  3836  0F88  0AA2               	incf	?_CC1Read+2,f
  3837  0F89  303B               	movlw	59
  3838  0F8A  3189  2111  318F   	fcall	_CC1Read
  3839                           
  3840                           ;RTX.c: 275: if(tmp&0b10000000)
  3841  0F8D  0020               	movlb	0	; select bank0
  3842  0F8E  1BE7               	btfsc	RTXReadPkt@tmp,7
  3843                           
  3844                           ;RTX.c: 276: _nop();
  3845  0F8F  0000               	nop
  3846  0F90                     l4931:	
  3847                           ;RTX.c: 277: while(numRxByte>=9)
  3848                           
  3849  0F90  3009               	movlw	9
  3850  0F91  0020               	movlb	0	; select bank0
  3851  0F92  0268               	subwf	RTXReadPkt@numRxByte,w
  3852  0F93  1C03               	btfss	3,0
  3853  0F94  0008               	return
  3854  0F95  0064               	clrwdt	;# 
  3855                           
  3856                           ;RTX.c: 281: RTXRcvPkt(pktRx,9);
  3857  0F96  3009               	movlw	9
  3858  0F97  0020               	movlb	0	; select bank0
  3859  0F98  00E5               	movwf	??_RTXReadPkt
  3860  0F99  0865               	movf	??_RTXReadPkt,w
  3861  0F9A  00FB               	movwf	?_RTXRcvPkt
  3862  0F9B  3041               	movlw	_pktRx& (0+255)
  3863  0F9C  3196  2660  318F   	fcall	_RTXRcvPkt
  3864                           
  3865                           ;RTX.c: 283: if(rtx_flg.pgmonoff)
  3866  0F9F  0020               	movlb	0	; select bank0
  3867  0FA0  1D6B               	btfss	_rtx_flg,2
  3868  0FA1  2FC7               	goto	l4917
  3869                           
  3870                           ;RTX.c: 284: {
  3871                           ;RTX.c: 285: if((pktRx[0]==pgm_cfg.baseId))
  3872  0FA2  0021               	movlb	1	; select bank1
  3873  0FA3  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3874  0FA4  0022               	movlb	2	; select bank2
  3875  0FA5  0641               	xorwf	_pktRx^(0+256),w
  3876  0FA6  1D03               	skipz
  3877  0FA7  2FF4               	goto	l4929
  3878                           
  3879                           ;RTX.c: 286: {
  3880                           ;RTX.c: 288: if(pktRx[2]==rPGM)
  3881  0FA8  0843               	movf	(_pktRx^(0+256)+2),w
  3882  0FA9  3A81               	xorlw	129
  3883  0FAA  1D03               	skipz
  3884  0FAB  2FF4               	goto	l4929
  3885                           
  3886                           ;RTX.c: 289: {
  3887                           ;RTX.c: 291: pgm_cfg.sensId=pktRx[1];
  3888  0FAC  0842               	movf	(_pktRx^(0+256)+1),w
  3889  0FAD  0020               	movlb	0	; select bank0
  3890  0FAE  00E5               	movwf	??_RTXReadPkt
  3891  0FAF  0865               	movf	??_RTXReadPkt,w
  3892  0FB0  0021               	movlb	1	; select bank1
  3893  0FB1  00CF               	movwf	(_pgm_cfg^(0+128)+3)
  3894                           
  3895                           ;RTX.c: 292: PGMWriteNvm();
  3896  0FB2  3196  26C6  318F   	fcall	_PGMWriteNvm
  3897                           
  3898                           ;RTX.c: 294: rtx_flg.pgmDone=1;
  3899  0FB5  0020               	movlb	0	; select bank0
  3900  0FB6  14EB               	bsf	_rtx_flg,1
  3901                           
  3902                           ;RTX.c: 296: tmrRcvPkt=0;
  3903  0FB7  01ED               	clrf	_tmrRcvPkt
  3904                           
  3905                           ;RTX.c: 298: RTXUpdateDisplay(UPD_DPY_PGMDONE);
  3906  0FB8  3003               	movlw	3
  3907  0FB9  3180  2043  318F   	fcall	_RTXUpdateDisplay
  3908                           
  3909                           ;RTX.c: 300: DLYDelay_ms(2000);
  3910  0FBC  30D0               	movlw	208
  3911  0FBD  00F1               	movwf	?_DLYDelay_ms
  3912  0FBE  3007               	movlw	7
  3913  0FBF  00F2               	movwf	?_DLYDelay_ms+1
  3914  0FC0  3197  2744  318F   	fcall	_DLYDelay_ms
  3915                           
  3916                           ;RTX.c: 302: RTXPgmOff();
  3917  0FC3  3196  2603  318F   	fcall	_RTXPgmOff
  3918                           
  3919                           ;RTX.c: 303: }
  3920                           ;RTX.c: 304: }
  3921                           ;RTX.c: 305: }
  3922  0FC6  2FF4               	goto	l4929
  3923  0FC7                     l4917:	
  3924                           
  3925                           ;RTX.c: 306: else
  3926                           ;RTX.c: 307: {
  3927                           ;RTX.c: 308: if((pktRx[0]==pgm_cfg.baseId) && (pktRx[1]==pgm_cfg.sensId))
  3928  0FC7  0021               	movlb	1	; select bank1
  3929  0FC8  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3930  0FC9  0022               	movlb	2	; select bank2
  3931  0FCA  0641               	xorwf	_pktRx^(0+256),w
  3932  0FCB  1D03               	skipz
  3933  0FCC  2FF4               	goto	l4929
  3934  0FCD  0021               	movlb	1	; select bank1
  3935  0FCE  084F               	movf	(_pgm_cfg^(0+128)+3),w
  3936  0FCF  0022               	movlb	2	; select bank2
  3937  0FD0  0642               	xorwf	(_pktRx^(0+256)+1),w
  3938  0FD1  1D03               	skipz
  3939  0FD2  2FF4               	goto	l4929
  3940                           
  3941                           ;RTX.c: 309: {
  3942                           ;RTX.c: 311: if(pktRx[2]==DAT)
  3943  0FD3  08C3               	movf	(_pktRx^(0+256)+2),f
  3944  0FD4  1D03               	skipz
  3945  0FD5  2FF4               	goto	l4929
  3946                           
  3947                           ;RTX.c: 312: {
  3948                           ;RTX.c: 314: temp=pktRx[3];
  3949  0FD6  0844               	movf	(_pktRx^(0+256)+3),w
  3950  0FD7  3197  2790  318F   	fcall	___lbtoft
  3951  0FDA  0879               	movf	?___lbtoft,w
  3952  0FDB  0021               	movlb	1	; select bank1
  3953  0FDC  00A3               	movwf	_temp^(0+128)
  3954  0FDD  087A               	movf	?___lbtoft+1,w
  3955  0FDE  00A4               	movwf	(_temp+1)^(0+128)
  3956  0FDF  087B               	movf	?___lbtoft+2,w
  3957  0FE0  00A5               	movwf	(_temp+2)^(0+128)
  3958                           
  3959                           ;RTX.c: 316: batt=pktRx[4];
  3960  0FE1  0022               	movlb	2	; select bank2
  3961  0FE2  0845               	movf	(_pktRx^(0+256)+4),w
  3962  0FE3  3197  2790  318F   	fcall	___lbtoft
  3963  0FE6  0879               	movf	?___lbtoft,w
  3964  0FE7  0021               	movlb	1	; select bank1
  3965  0FE8  00A0               	movwf	_batt^(0+128)
  3966  0FE9  087A               	movf	?___lbtoft+1,w
  3967  0FEA  00A1               	movwf	(_batt+1)^(0+128)
  3968  0FEB  087B               	movf	?___lbtoft+2,w
  3969  0FEC  00A2               	movwf	(_batt+2)^(0+128)
  3970                           
  3971                           ;RTX.c: 318: RTXSendRData();
  3972  0FED  3188  2086  318F   	fcall	_RTXSendRData
  3973                           
  3974                           ;RTX.c: 320: RTXUpdateDisplay(UPD_DPY_TEMP);
  3975  0FF0  3001               	movlw	1
  3976  0FF1  3180  2043  318F   	fcall	_RTXUpdateDisplay
  3977  0FF4                     l4929:	
  3978                           
  3979                           ;RTX.c: 321: }
  3980                           ;RTX.c: 322: }
  3981                           ;RTX.c: 323: }
  3982                           ;RTX.c: 325: CC1Read(0x3B,(&(numRxByte)),1);
  3983  0FF4  3068               	movlw	low RTXReadPkt@numRxByte
  3984  0FF5  0020               	movlb	0	; select bank0
  3985  0FF6  00A0               	movwf	?_CC1Read
  3986  0FF7  3000               	movlw	high RTXReadPkt@numRxByte
  3987  0FF8  00A1               	movwf	?_CC1Read+1
  3988  0FF9  01A2               	clrf	?_CC1Read+2
  3989  0FFA  0AA2               	incf	?_CC1Read+2,f
  3990  0FFB  303B               	movlw	59
  3991  0FFC  3189  2111  318F   	fcall	_CC1Read
  3992  0FFF  2F90               	goto	l4931
  3993  1000                     __end_of_RTXReadPkt:	
  3994                           
  3995                           	psect	text13
  3996  1790                     __ptext13:	
  3997 ;; *************** function ___lbtoft *****************
  3998 ;; Defined at:
  3999 ;;		line 28 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lbtoft.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  c               1    wreg     unsigned char 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  c               1    4[BANK0 ] unsigned char 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  3    9[COMMON] float 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0, pclath, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4013 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;Total ram usage:        8 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    3
  4020 ;; This function calls:
  4021 ;;		___ftpack
  4022 ;; This function is called by:
  4023 ;;		_RTXReadPkt
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           
  4028                           ;psect for function ___lbtoft
  4029  1790                     ___lbtoft:	
  4030                           
  4031                           ;incstack = 0
  4032                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  4033                           ;___lbtoft@c stored from wreg
  4034  1790  0020               	movlb	0	; select bank0
  4035  1791  00A4               	movwf	___lbtoft@c
  4036  1792  0824               	movf	___lbtoft@c,w
  4037  1793  00A0               	movwf	??___lbtoft
  4038  1794  01A1               	clrf	??___lbtoft+1
  4039  1795  01A2               	clrf	??___lbtoft+2
  4040  1796  0820               	movf	??___lbtoft,w
  4041  1797  00F1               	movwf	?___ftpack
  4042  1798  0821               	movf	??___lbtoft+1,w
  4043  1799  00F2               	movwf	?___ftpack+1
  4044  179A  0822               	movf	??___lbtoft+2,w
  4045  179B  00F3               	movwf	?___ftpack+2
  4046  179C  308E               	movlw	142
  4047  179D  00A3               	movwf	??___lbtoft+3
  4048  179E  0823               	movf	??___lbtoft+3,w
  4049  179F  00F4               	movwf	?___ftpack+3
  4050  17A0  01F5               	clrf	?___ftpack+4
  4051  17A1  318E  260F         	fcall	___ftpack
  4052  17A3  0871               	movf	?___ftpack,w
  4053  17A4  00F9               	movwf	?___lbtoft
  4054  17A5  0872               	movf	?___ftpack+1,w
  4055  17A6  00FA               	movwf	?___lbtoft+1
  4056  17A7  0873               	movf	?___ftpack+2,w
  4057  17A8  00FB               	movwf	?___lbtoft+2
  4058  17A9  0008               	return
  4059  17AA                     __end_of___lbtoft:	
  4060                           
  4061                           	psect	text14
  4062  0886                     __ptext14:	
  4063 ;; *************** function _RTXSendRData *****************
  4064 ;; Defined at:
  4065 ;;		line 330 in file "RTX.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;		None               void
  4072 ;; Registers used:
  4073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;Total ram usage:        1 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		_RTXSndPkt
  4088 ;; This function is called by:
  4089 ;;		_RTXReadPkt
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           
  4094                           ;psect for function _RTXSendRData
  4095  0886                     _RTXSendRData:	
  4096                           
  4097                           ;RTX.c: 332: pktTx[0]=pgm_cfg.sensId;
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _RTXSendRData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4101  0886  0021               	movlb	1	; select bank1
  4102  0887  084F               	movf	(_pgm_cfg^(0+128)+3),w
  4103  0888  0020               	movlb	0	; select bank0
  4104  0889  00AA               	movwf	??_RTXSendRData
  4105  088A  082A               	movf	??_RTXSendRData,w
  4106  088B  0021               	movlb	1	; select bank1
  4107  088C  00C3               	movwf	_pktTx^(0+128)
  4108                           
  4109                           ;RTX.c: 333: pktTx[1]=pgm_cfg.baseId;
  4110  088D  0850               	movf	(_pgm_cfg^(0+128)+4),w
  4111  088E  0020               	movlb	0	; select bank0
  4112  088F  00AA               	movwf	??_RTXSendRData
  4113  0890  082A               	movf	??_RTXSendRData,w
  4114  0891  0021               	movlb	1	; select bank1
  4115  0892  00C4               	movwf	(_pktTx^(0+128)+1)
  4116                           
  4117                           ;RTX.c: 334: pktTx[2]=rDAT;
  4118  0893  3080               	movlw	128
  4119  0894  0020               	movlb	0	; select bank0
  4120  0895  00AA               	movwf	??_RTXSendRData
  4121  0896  082A               	movf	??_RTXSendRData,w
  4122  0897  0021               	movlb	1	; select bank1
  4123  0898  00C5               	movwf	(_pktTx^(0+128)+2)
  4124                           
  4125                           ;RTX.c: 335: pktTx[3]=0x00;
  4126  0899  01C6               	clrf	(_pktTx^(0+128)+3)
  4127                           
  4128                           ;RTX.c: 336: pktTx[4]=0x00;
  4129  089A  01C7               	clrf	(_pktTx^(0+128)+4)
  4130                           
  4131                           ;RTX.c: 337: pktTx[5]=0x00;
  4132  089B  01C8               	clrf	(_pktTx^(0+128)+5)
  4133                           
  4134                           ;RTX.c: 338: pktTx[6]=0x00;
  4135  089C  01C9               	clrf	(_pktTx^(0+128)+6)
  4136                           
  4137                           ;RTX.c: 339: pktTx[7]=0x00;
  4138  089D  01CA               	clrf	(_pktTx^(0+128)+7)
  4139                           
  4140                           ;RTX.c: 340: pktTx[8]=0x00;
  4141  089E  01CB               	clrf	(_pktTx^(0+128)+8)
  4142                           
  4143                           ;RTX.c: 343: RTXSndPkt(pktTx,9);
  4144  089F  3009               	movlw	9
  4145  08A0  0020               	movlb	0	; select bank0
  4146  08A1  00AA               	movwf	??_RTXSendRData
  4147  08A2  082A               	movf	??_RTXSendRData,w
  4148  08A3  00FB               	movwf	?_RTXSndPkt
  4149  08A4  30C3               	movlw	_pktTx& (0+255)
  4150  08A5  318D  2564         	fcall	_RTXSndPkt
  4151  08A7  0008               	return
  4152  08A8                     __end_of_RTXSendRData:	
  4153                           
  4154                           	psect	text15
  4155  0D64                     __ptext15:	
  4156 ;; *************** function _RTXSndPkt *****************
  4157 ;; Defined at:
  4158 ;;		line 234 in file "RTX.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  src             1    wreg     PTR unsigned char 
  4161 ;;		 -> pktTx(9), 
  4162 ;;  len             1   11[COMMON] unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  src             1    6[BANK0 ] PTR unsigned char 
  4165 ;;		 -> pktTx(9), 
  4166 ;;  sta             1    9[BANK0 ] unsigned char 
  4167 ;;  numTxByte       1    8[BANK0 ] unsigned char 
  4168 ;;  numRxByte       1    7[BANK0 ] unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4178 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;Total ram usage:        6 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		_CC1Strobe
  4187 ;;		_CC1Write
  4188 ;;		_CC1Read
  4189 ;; This function is called by:
  4190 ;;		_RTXSendRData
  4191 ;;		_RTXSendPgm
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _RTXSndPkt
  4197  0D64                     _RTXSndPkt:	
  4198                           
  4199                           ;incstack = 0
  4200                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4201                           ;RTXSndPkt@src stored from wreg
  4202  0D64  0020               	movlb	0	; select bank0
  4203  0D65  00A6               	movwf	RTXSndPkt@src
  4204  0D66                     l493:	
  4205                           ;RTX.c: 235: unsigned char sta,numRxByte,numTxByte;
  4206                           ;RTX.c: 238: while(1)
  4207                           
  4208  0D66  0064               	clrwdt	;# 
  4209                           
  4210                           ;RTX.c: 241: CC1Read(0x35,(&(sta)),1);
  4211  0D67  3029               	movlw	low RTXSndPkt@sta
  4212  0D68  0020               	movlb	0	; select bank0
  4213  0D69  00A0               	movwf	?_CC1Read
  4214  0D6A  3000               	movlw	high RTXSndPkt@sta
  4215  0D6B  00A1               	movwf	?_CC1Read+1
  4216  0D6C  01A2               	clrf	?_CC1Read+2
  4217  0D6D  0AA2               	incf	?_CC1Read+2,f
  4218  0D6E  3035               	movlw	53
  4219  0D6F  3189  2111  318D   	fcall	_CC1Read
  4220                           
  4221                           ;RTX.c: 242: sta&=0b00011111;
  4222  0D72  301F               	movlw	31
  4223  0D73  0020               	movlb	0	; select bank0
  4224  0D74  00A5               	movwf	??_RTXSndPkt
  4225  0D75  0825               	movf	??_RTXSndPkt,w
  4226  0D76  05A9               	andwf	RTXSndPkt@sta,f
  4227                           
  4228                           ;RTX.c: 243: if(sta==0x0D)
  4229  0D77  0829               	movf	RTXSndPkt@sta,w
  4230  0D78  3A0D               	xorlw	13
  4231  0D79  1903               	btfsc	3,2
  4232  0D7A  2D7F               	goto	l4981
  4233                           
  4234                           ;RTX.c: 245: if(sta==0x01)
  4235                           
  4236                           ;RTX.c: 244: break;
  4237  0D7B  0829               	movf	RTXSndPkt@sta,w
  4238  0D7C  3A01               	xorlw	1
  4239  0D7D  1D03               	skipz
  4240  0D7E  2D66               	goto	l493
  4241  0D7F                     l4981:	
  4242                           ;RTX.c: 246: break;
  4243                           
  4244                           
  4245                           ;RTX.c: 247: }
  4246                           ;RTX.c: 249: CC1Strobe(SIDLE);
  4247  0D7F  3036               	movlw	54
  4248  0D80  3196  26EC  318D   	fcall	_CC1Strobe
  4249                           
  4250                           ;RTX.c: 250: CC1Read(0x3B,(&(numRxByte)),1);
  4251  0D83  3027               	movlw	low RTXSndPkt@numRxByte
  4252  0D84  0020               	movlb	0	; select bank0
  4253  0D85  00A0               	movwf	?_CC1Read
  4254  0D86  3000               	movlw	high RTXSndPkt@numRxByte
  4255  0D87  00A1               	movwf	?_CC1Read+1
  4256  0D88  01A2               	clrf	?_CC1Read+2
  4257  0D89  0AA2               	incf	?_CC1Read+2,f
  4258  0D8A  303B               	movlw	59
  4259  0D8B  3189  2111  318D   	fcall	_CC1Read
  4260                           
  4261                           ;RTX.c: 251: CC1Read(0x3A,(&(numTxByte)),1);
  4262  0D8E  3028               	movlw	low RTXSndPkt@numTxByte
  4263  0D8F  0020               	movlb	0	; select bank0
  4264  0D90  00A0               	movwf	?_CC1Read
  4265  0D91  3000               	movlw	high RTXSndPkt@numTxByte
  4266  0D92  00A1               	movwf	?_CC1Read+1
  4267  0D93  01A2               	clrf	?_CC1Read+2
  4268  0D94  0AA2               	incf	?_CC1Read+2,f
  4269  0D95  303A               	movlw	58
  4270  0D96  3189  2111  318D   	fcall	_CC1Read
  4271                           
  4272                           ;RTX.c: 253: CC1Strobe(SFTX);
  4273  0D99  303B               	movlw	59
  4274  0D9A  3196  26EC  318D   	fcall	_CC1Strobe
  4275                           
  4276                           ;RTX.c: 254: CC1Read(0x3A,(&(numTxByte)),1);
  4277  0D9D  3028               	movlw	low RTXSndPkt@numTxByte
  4278  0D9E  0020               	movlb	0	; select bank0
  4279  0D9F  00A0               	movwf	?_CC1Read
  4280  0DA0  3000               	movlw	high RTXSndPkt@numTxByte
  4281  0DA1  00A1               	movwf	?_CC1Read+1
  4282  0DA2  01A2               	clrf	?_CC1Read+2
  4283  0DA3  0AA2               	incf	?_CC1Read+2,f
  4284  0DA4  303A               	movlw	58
  4285  0DA5  3189  2111  318D   	fcall	_CC1Read
  4286                           
  4287                           ;RTX.c: 256: CC1Write(0x3F,src,len);
  4288  0DA8  0020               	movlb	0	; select bank0
  4289  0DA9  0826               	movf	RTXSndPkt@src,w
  4290  0DAA  00F7               	movwf	?_CC1Write
  4291  0DAB  3000               	movlw	0
  4292  0DAC  00F8               	movwf	?_CC1Write+1
  4293  0DAD  087B               	movf	RTXSndPkt@len,w
  4294  0DAE  00A5               	movwf	??_RTXSndPkt
  4295  0DAF  0825               	movf	??_RTXSndPkt,w
  4296  0DB0  00F9               	movwf	?_CC1Write+2
  4297  0DB1  303F               	movlw	63
  4298  0DB2  3188  20A8  318D   	fcall	_CC1Write
  4299                           
  4300                           ;RTX.c: 258: CC1Strobe(STX);
  4301  0DB5  3035               	movlw	53
  4302  0DB6  3196  26EC         	fcall	_CC1Strobe
  4303  0DB8  0008               	return
  4304  0DB9                     __end_of_RTXSndPkt:	
  4305                           
  4306                           	psect	text16
  4307  1603                     __ptext16:	
  4308 ;; *************** function _RTXPgmOff *****************
  4309 ;; Defined at:
  4310 ;;		line 377 in file "RTX.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;		None               void
  4317 ;; Registers used:
  4318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;Total ram usage:        0 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    7
  4331 ;; This function calls:
  4332 ;;		_RTXUpdateDisplay
  4333 ;; This function is called by:
  4334 ;;		_RTXReadPkt
  4335 ;;		_SYSTask
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           
  4340                           ;psect for function _RTXPgmOff
  4341  1603                     _RTXPgmOff:	
  4342                           
  4343                           ;RTX.c: 379: rtx_flg.pgmonoff=0;
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _RTXPgmOff: [allreg]
  4347  1603  0020               	movlb	0	; select bank0
  4348  1604  116B               	bcf	_rtx_flg,2
  4349                           
  4350                           ;RTX.c: 381: tmrRcvPkt=0;
  4351  1605  01ED               	clrf	_tmrRcvPkt
  4352                           
  4353                           ;RTX.c: 383: RTXUpdateDisplay(UPD_DPY_RST);
  4354  1606  3000               	movlw	0
  4355  1607  3180  2043         	fcall	_RTXUpdateDisplay
  4356  1609  0008               	return
  4357  160A                     __end_of_RTXPgmOff:	
  4358                           
  4359                           	psect	text17
  4360  1660                     __ptext17:	
  4361 ;; *************** function _RTXRcvPkt *****************
  4362 ;; Defined at:
  4363 ;;		line 262 in file "RTX.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  dst             1    wreg     PTR unsigned char 
  4366 ;;		 -> pktRx(9), 
  4367 ;;  len             1   11[COMMON] unsigned char 
  4368 ;; Auto vars:     Size  Location     Type
  4369 ;;  dst             1    6[BANK0 ] PTR unsigned char 
  4370 ;;		 -> pktRx(9), 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;		None               void
  4373 ;; Registers used:
  4374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4380 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4383 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4384 ;;Total ram usage:        3 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    4
  4387 ;; This function calls:
  4388 ;;		_CC1Read
  4389 ;; This function is called by:
  4390 ;;		_RTXReadPkt
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _RTXRcvPkt
  4396  1660                     _RTXRcvPkt:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4400                           ;RTXRcvPkt@dst stored from wreg
  4401  1660  0020               	movlb	0	; select bank0
  4402  1661  00A6               	movwf	RTXRcvPkt@dst
  4403                           
  4404                           ;RTX.c: 264: CC1Read(0x3F,dst,len);
  4405  1662  0826               	movf	RTXRcvPkt@dst,w
  4406  1663  00A0               	movwf	?_CC1Read
  4407  1664  3001               	movlw	1
  4408  1665  00A1               	movwf	?_CC1Read+1
  4409  1666  087B               	movf	RTXRcvPkt@len,w
  4410  1667  00A5               	movwf	??_RTXRcvPkt
  4411  1668  0825               	movf	??_RTXRcvPkt,w
  4412  1669  00A2               	movwf	?_CC1Read+2
  4413  166A  303F               	movlw	63
  4414  166B  3189  2111         	fcall	_CC1Read
  4415  166D  0008               	return
  4416  166E                     __end_of_RTXRcvPkt:	
  4417                           
  4418                           	psect	text18
  4419  0911                     __ptext18:	
  4420 ;; *************** function _CC1Read *****************
  4421 ;; Defined at:
  4422 ;;		line 114 in file "CC1.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  addr            1    wreg     unsigned char 
  4425 ;;  dst             2    0[BANK0 ] PTR unsigned char 
  4426 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXReadPkt@tmp(1), RTXReadPkt@sta(1), 
  4427 ;;		 -> RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), RTXSndPkt@sta(1), 
  4428 ;;  len             1    2[BANK0 ] unsigned char 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  addr            1    3[BANK0 ] unsigned char 
  4431 ;;  cc1Addr         1    4[BANK0 ] unsigned char 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;		None               void
  4434 ;; Registers used:
  4435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4441 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4444 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4445 ;;Total ram usage:        6 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    3
  4448 ;; This function calls:
  4449 ;;		_SPIRead
  4450 ;;		_SPIWrite
  4451 ;; This function is called by:
  4452 ;;		_RTXSndPkt
  4453 ;;		_RTXRcvPkt
  4454 ;;		_RTXReadPkt
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           
  4459                           ;psect for function _CC1Read
  4460  0911                     _CC1Read:	
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4464                           ;CC1Read@addr stored from wreg
  4465  0911  0020               	movlb	0	; select bank0
  4466  0912  00A3               	movwf	CC1Read@addr
  4467                           
  4468                           ;CC1.c: 115: unsigned char cc1Addr;
  4469                           ;CC1.c: 118: LATAbits.LATA5=0;
  4470  0913  0022               	movlb	2	; select bank2
  4471  0914  128C               	bcf	12,5	;volatile
  4472                           
  4473                           ;CC1.c: 121: cc1Addr=((addr&0b00111111)|0b11000000);
  4474  0915  0020               	movlb	0	; select bank0
  4475  0916  0823               	movf	CC1Read@addr,w
  4476  0917  393F               	andlw	63
  4477  0918  38C0               	iorlw	192
  4478  0919  00FA               	movwf	??_CC1Read
  4479  091A  087A               	movf	??_CC1Read,w
  4480  091B  00A4               	movwf	CC1Read@cc1Addr
  4481                           
  4482                           ;CC1.c: 122: SPIWrite((&(cc1Addr)),1);
  4483  091C  3024               	movlw	low CC1Read@cc1Addr
  4484  091D  00F1               	movwf	?_SPIWrite
  4485  091E  3000               	movlw	high CC1Read@cc1Addr
  4486  091F  00F2               	movwf	?_SPIWrite+1
  4487  0920  01F3               	clrf	?_SPIWrite+2
  4488  0921  0AF3               	incf	?_SPIWrite+2,f
  4489  0922  3197  27C6  3189   	fcall	_SPIWrite
  4490                           
  4491                           ;CC1.c: 125: SPIRead(dst,len);
  4492  0925  0020               	movlb	0	; select bank0
  4493  0926  0821               	movf	CC1Read@dst+1,w
  4494  0927  01F2               	clrf	?_SPIRead+1
  4495  0928  07F2               	addwf	?_SPIRead+1,f
  4496  0929  0820               	movf	CC1Read@dst,w
  4497  092A  01F1               	clrf	?_SPIRead
  4498  092B  07F1               	addwf	?_SPIRead,f
  4499  092C  0822               	movf	CC1Read@len,w
  4500  092D  00FA               	movwf	??_CC1Read
  4501  092E  087A               	movf	??_CC1Read,w
  4502  092F  00F3               	movwf	?_SPIRead+2
  4503  0930  3189  2181         	fcall	_SPIRead
  4504                           
  4505                           ;CC1.c: 128: LATAbits.LATA5=1;
  4506  0932  0022               	movlb	2	; select bank2
  4507  0933  168C               	bsf	12,5	;volatile
  4508  0934  0008               	return
  4509  0935                     __end_of_CC1Read:	
  4510                           
  4511                           	psect	text19
  4512  0981                     __ptext19:	
  4513 ;; *************** function _SPIRead *****************
  4514 ;; Defined at:
  4515 ;;		line 26 in file "SPI.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  dstPtr          2    1[COMMON] PTR unsigned char 
  4518 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXReadPkt@tmp(1), RTXReadPkt@sta(1), 
  4519 ;;		 -> RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), RTXSndPkt@sta(1), 
  4520 ;;  len             1    3[COMMON] unsigned char 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  i               1    9[COMMON] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4532 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;Total ram usage:        9 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    2
  4539 ;; This function calls:
  4540 ;;		Nothing
  4541 ;; This function is called by:
  4542 ;;		_CC1Read
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _SPIRead
  4548  0981                     _SPIRead:	
  4549                           
  4550                           ;SPI.c: 27: unsigned char i;
  4551                           ;SPI.c: 29: for(i=0;i<len;i++)
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  4555  0981  01F9               	clrf	SPIRead@i
  4556  0982                     l4449:	
  4557  0982  0873               	movf	SPIRead@len,w
  4558  0983  0279               	subwf	SPIRead@i,w
  4559  0984  1803               	btfsc	3,0
  4560  0985  0008               	return
  4561                           
  4562                           ;SPI.c: 30: {
  4563                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  4564  0986  0020               	movlb	0	; select bank0
  4565  0987  1191               	bcf	17,3	;volatile
  4566                           
  4567                           ;SPI.c: 32: SSPBUF=0xFF;
  4568  0988  30FF               	movlw	255
  4569  0989  0024               	movlb	4	; select bank4
  4570  098A  0091               	movwf	17	;volatile
  4571  098B                     l70:	
  4572                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  4573                           
  4574  098B  0020               	movlb	0	; select bank0
  4575  098C  1991               	btfsc	17,3	;volatile
  4576  098D  2990               	goto	l4445
  4577                           
  4578                           ;SPI.c: 34: _nop();
  4579  098E  0000               	nop
  4580  098F  298B               	goto	l70
  4581  0990                     l4445:	
  4582                           
  4583                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  4584  0990  0024               	movlb	4	; select bank4
  4585  0991  0811               	movf	17,w	;volatile
  4586  0992  00F4               	movwf	??_SPIRead
  4587  0993  0879               	movf	SPIRead@i,w
  4588  0994  00F5               	movwf	??_SPIRead+1
  4589  0995  01F6               	clrf	??_SPIRead+2
  4590  0996  0875               	movf	??_SPIRead+1,w
  4591  0997  0771               	addwf	SPIRead@dstPtr,w
  4592  0998  00F7               	movwf	??_SPIRead+3
  4593  0999  0876               	movf	??_SPIRead+2,w
  4594  099A  3D72               	addwfc	SPIRead@dstPtr+1,w
  4595  099B  00F8               	movwf	??_SPIRead+4
  4596  099C  0877               	movf	??_SPIRead+3,w
  4597  099D  0086               	movwf	6
  4598  099E  0878               	movf	??_SPIRead+4,w
  4599  099F  0087               	movwf	7
  4600  09A0  0874               	movf	??_SPIRead,w
  4601  09A1  0081               	movwf	1
  4602  09A2  3001               	movlw	1
  4603  09A3  00F4               	movwf	??_SPIRead
  4604  09A4  0874               	movf	??_SPIRead,w
  4605  09A5  07F9               	addwf	SPIRead@i,f
  4606  09A6  2982               	goto	l4449
  4607  09A7                     __end_of_SPIRead:	
  4608                           
  4609                           	psect	text20
  4610  095B                     __ptext20:	
  4611 ;; *************** function _RTXInit *****************
  4612 ;; Defined at:
  4613 ;;		line 59 in file "RTX.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  state           1    wreg     unsigned char 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;  state           1   57[BANK0 ] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;		None               void
  4620 ;; Registers used:
  4621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;Total ram usage:        1 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    7
  4634 ;; This function calls:
  4635 ;;		_CC1Strobe
  4636 ;;		_RTXUpdateDisplay
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           
  4643                           ;psect for function _RTXInit
  4644  095B                     _RTXInit:	
  4645                           
  4646                           ;incstack = 0
  4647                           ; Regs used in _RTXInit: [allreg]
  4648                           ;RTXInit@state stored from wreg
  4649  095B  0020               	movlb	0	; select bank0
  4650  095C  00D9               	movwf	RTXInit@state
  4651                           
  4652                           ;RTX.c: 60: switch(state)
  4653  095D  2974               	goto	l4725
  4654  095E                     l4717:	
  4655                           ;RTX.c: 65: case 1:
  4656                           
  4657                           ;RTX.c: 64: break;
  4658                           
  4659                           ;RTX.c: 61: {
  4660                           ;RTX.c: 62: case 0:
  4661                           
  4662                           
  4663                           ;RTX.c: 67: tmrRcvPkt=0;
  4664  095E  01ED               	clrf	_tmrRcvPkt
  4665                           
  4666                           ;RTX.c: 68: rtx_flg.val=0;
  4667  095F  01EB               	clrf	_rtx_flg
  4668                           
  4669                           ;RTX.c: 69: tmrCalibration=0;
  4670  0960  0021               	movlb	1	; select bank1
  4671  0961  01A6               	clrf	_tmrCalibration^(0+128)
  4672  0962  01A7               	clrf	(_tmrCalibration+1)^(0+128)
  4673                           
  4674                           ;RTX.c: 70: break;
  4675  0963  0008               	return
  4676  0964                     l4719:	
  4677                           ;RTX.c: 71: case 2:
  4678                           
  4679                           
  4680                           ;RTX.c: 73: CC1Strobe(SIDLE);
  4681  0964  3036               	movlw	54
  4682  0965  3196  26EC  3189   	fcall	_CC1Strobe
  4683                           
  4684                           ;RTX.c: 74: CC1Strobe(SCAL);
  4685  0968  3033               	movlw	51
  4686  0969  3196  26EC  3189   	fcall	_CC1Strobe
  4687                           
  4688                           ;RTX.c: 75: CC1Strobe(SRX);
  4689  096C  3034               	movlw	52
  4690  096D  3196  26EC  3189   	fcall	_CC1Strobe
  4691                           
  4692                           ;RTX.c: 77: RTXUpdateDisplay(UPD_DPY_RST);
  4693  0970  3000               	movlw	0
  4694  0971  3180  2043         	fcall	_RTXUpdateDisplay
  4695                           
  4696                           ;RTX.c: 79: }
  4697                           
  4698                           ;RTX.c: 78: break;
  4699  0973  0008               	return
  4700  0974                     l4725:	
  4701  0974  0020               	movlb	0	; select bank0
  4702  0975  0859               	movf	RTXInit@state,w
  4703                           
  4704                           ; Switch size 1, requested type "space"
  4705                           ; Number of cases is 3, Range of values is 0 to 2
  4706                           ; switch strategies available:
  4707                           ; Name         Instructions Cycles
  4708                           ; simple_byte           10     6 (average)
  4709                           ; direct_byte           12     6 (fixed)
  4710                           ; jumptable            260     6 (fixed)
  4711                           ;	Chosen strategy is simple_byte
  4712  0976  3A00               	xorlw	0	; case 0
  4713  0977  1903               	skipnz
  4714  0978  2980               	goto	l452
  4715  0979  3A01               	xorlw	1	; case 1
  4716  097A  1903               	skipnz
  4717  097B  295E               	goto	l4717
  4718  097C  3A03               	xorlw	3	; case 2
  4719  097D  1903               	skipnz
  4720  097E  2964               	goto	l4719
  4721  097F  2980               	goto	l452
  4722  0980                     l452:	
  4723  0980  0008               	return
  4724  0981                     __end_of_RTXInit:	
  4725                           
  4726                           	psect	text21
  4727  0043                     __ptext21:	
  4728 ;; *************** function _RTXUpdateDisplay *****************
  4729 ;; Defined at:
  4730 ;;		line 112 in file "RTX.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  val             1    wreg     enum E2145
  4733 ;; Auto vars:     Size  Location     Type
  4734 ;;  val             1   22[BANK1 ] enum E2145
  4735 ;;  strTmp         16    0[BANK1 ] unsigned char [16]
  4736 ;;  status          2   16[BANK1 ] int 
  4737 ;;  i               1   25[BANK1 ] unsigned char 
  4738 ;;  p               1   24[BANK1 ] PTR unsigned char 
  4739 ;;		 -> ftoa@buf(17), 
  4740 ;;  j               1   23[BANK1 ] unsigned char 
  4741 ;;  maxDigit        1   21[BANK1 ] unsigned char 
  4742 ;;  offset          1   20[BANK1 ] unsigned char 
  4743 ;;  isDec           1   19[BANK1 ] unsigned char 
  4744 ;;  posDec          1   18[BANK1 ] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;		None               void
  4747 ;; Registers used:
  4748 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0
  4756 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4757 ;;      Totals:         0       4      26       0       0       0       0       0       0       0       0       0       
      +0       0
  4758 ;;Total ram usage:       30 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    6
  4761 ;; This function calls:
  4762 ;;		_DPYSendStr
  4763 ;;		_itoa
  4764 ;;		_ftoa
  4765 ;;		___awdiv
  4766 ;;		___ftge
  4767 ;; This function is called by:
  4768 ;;		_RTXInit
  4769 ;;		_RTXReadPkt
  4770 ;;		_RTXPgmOn
  4771 ;;		_RTXPgmOff
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           
  4776                           ;psect for function _RTXUpdateDisplay
  4777  0043                     _RTXUpdateDisplay:	
  4778                           
  4779                           ;incstack = 0
  4780                           ; Regs used in _RTXUpdateDisplay: [allreg]
  4781                           ;RTXUpdateDisplay@val stored from wreg
  4782  0043  0021               	movlb	1	; select bank1
  4783  0044  00E7               	movwf	RTXUpdateDisplay@val^(0+128)
  4784                           
  4785                           ;RTX.c: 113: char *p,strTmp[16];
  4786                           ;RTX.c: 114: unsigned char i,j,isDec,posDec,maxDigit,offset;
  4787                           ;RTX.c: 115: int status;
  4788                           ;RTX.c: 118: for(i=0;i<sizeof(strTitle)/sizeof(char);i++)
  4789  0045  01EA               	clrf	RTXUpdateDisplay@i^(0+128)
  4790  0046  3010               	movlw	16
  4791  0047  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4792  0048  1803               	btfsc	3,0
  4793  0049  285E               	goto	l4739
  4794  004A                     l4733:	
  4795                           
  4796                           ;RTX.c: 119: strTitle[i]=' ';
  4797  004A  3020               	movlw	32
  4798  004B  0020               	movlb	0	; select bank0
  4799  004C  00D5               	movwf	??_RTXUpdateDisplay
  4800  004D  0021               	movlb	1	; select bank1
  4801  004E  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4802  004F  3EB3               	addlw	_strTitle& (0+255)
  4803  0050  0086               	movwf	6
  4804  0051  0187               	clrf	7
  4805  0052  0020               	movlb	0	; select bank0
  4806  0053  0855               	movf	??_RTXUpdateDisplay,w
  4807  0054  0081               	movwf	1
  4808  0055  3001               	movlw	1
  4809  0056  00D5               	movwf	??_RTXUpdateDisplay
  4810  0057  0855               	movf	??_RTXUpdateDisplay,w
  4811  0058  0021               	movlb	1	; select bank1
  4812  0059  07EA               	addwf	RTXUpdateDisplay@i^(0+128),f
  4813  005A  3010               	movlw	16
  4814  005B  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4815  005C  1C03               	skipc
  4816  005D  284A               	goto	l4733
  4817  005E                     l4739:	
  4818                           
  4819                           ;RTX.c: 120: for(i=0;i<sizeof(strTemp)/sizeof(char);i++)
  4820  005E  01EA               	clrf	RTXUpdateDisplay@i^(0+128)
  4821  005F  3010               	movlw	16
  4822  0060  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4823  0061  1803               	btfsc	3,0
  4824  0062  2878               	goto	l4751
  4825  0063                     l4745:	
  4826                           
  4827                           ;RTX.c: 121: strTemp[i]=' ';
  4828  0063  3020               	movlw	32
  4829  0064  0020               	movlb	0	; select bank0
  4830  0065  00D5               	movwf	??_RTXUpdateDisplay
  4831  0066  0021               	movlb	1	; select bank1
  4832  0067  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4833  0068  3E31               	addlw	_strTemp& (0+255)
  4834  0069  0086               	movwf	6
  4835  006A  3001               	movlw	1	; select bank2/3
  4836  006B  0087               	movwf	7
  4837  006C  0020               	movlb	0	; select bank0
  4838  006D  0855               	movf	??_RTXUpdateDisplay,w
  4839  006E  0081               	movwf	1
  4840  006F  3001               	movlw	1
  4841  0070  00D5               	movwf	??_RTXUpdateDisplay
  4842  0071  0855               	movf	??_RTXUpdateDisplay,w
  4843  0072  0021               	movlb	1	; select bank1
  4844  0073  07EA               	addwf	RTXUpdateDisplay@i^(0+128),f
  4845  0074  3010               	movlw	16
  4846  0075  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4847  0076  1C03               	skipc
  4848  0077  2863               	goto	l4745
  4849  0078                     l4751:	
  4850                           
  4851                           ;RTX.c: 123: if(val==UPD_DPY_PGM || val==UPD_DPY_PGMDONE)
  4852  0078  0867               	movf	RTXUpdateDisplay@val^(0+128),w
  4853  0079  3A02               	xorlw	2
  4854  007A  1903               	skipnz
  4855  007B  2880               	goto	l4755
  4856  007C  0867               	movf	RTXUpdateDisplay@val^(0+128),w
  4857  007D  3A03               	xorlw	3
  4858  007E  1D03               	skipz
  4859  007F  2947               	goto	l4779
  4860  0080                     l4755:	
  4861                           
  4862                           ;RTX.c: 124: {
  4863                           ;RTX.c: 125: strTitle[1]='P';
  4864  0080  3050               	movlw	80
  4865  0081  0020               	movlb	0	; select bank0
  4866  0082  00D5               	movwf	??_RTXUpdateDisplay
  4867  0083  0855               	movf	??_RTXUpdateDisplay,w
  4868  0084  0021               	movlb	1	; select bank1
  4869  0085  00B4               	movwf	(_strTitle^(0+128)+1)
  4870                           
  4871                           ;RTX.c: 126: strTitle[2]='r';
  4872  0086  3072               	movlw	114
  4873  0087  0020               	movlb	0	; select bank0
  4874  0088  00D5               	movwf	??_RTXUpdateDisplay
  4875  0089  0855               	movf	??_RTXUpdateDisplay,w
  4876  008A  0021               	movlb	1	; select bank1
  4877  008B  00B5               	movwf	(_strTitle^(0+128)+2)
  4878                           
  4879                           ;RTX.c: 127: strTitle[3]='o';
  4880  008C  306F               	movlw	111
  4881  008D  0020               	movlb	0	; select bank0
  4882  008E  00D5               	movwf	??_RTXUpdateDisplay
  4883  008F  0855               	movf	??_RTXUpdateDisplay,w
  4884  0090  0021               	movlb	1	; select bank1
  4885  0091  00B6               	movwf	(_strTitle^(0+128)+3)
  4886                           
  4887                           ;RTX.c: 128: strTitle[4]='g';
  4888  0092  3067               	movlw	103
  4889  0093  0020               	movlb	0	; select bank0
  4890  0094  00D5               	movwf	??_RTXUpdateDisplay
  4891  0095  0855               	movf	??_RTXUpdateDisplay,w
  4892  0096  0021               	movlb	1	; select bank1
  4893  0097  00B7               	movwf	(_strTitle^(0+128)+4)
  4894                           
  4895                           ;RTX.c: 129: strTitle[5]='r';
  4896  0098  3072               	movlw	114
  4897  0099  0020               	movlb	0	; select bank0
  4898  009A  00D5               	movwf	??_RTXUpdateDisplay
  4899  009B  0855               	movf	??_RTXUpdateDisplay,w
  4900  009C  0021               	movlb	1	; select bank1
  4901  009D  00B8               	movwf	(_strTitle^(0+128)+5)
  4902                           
  4903                           ;RTX.c: 130: strTitle[6]='a';
  4904  009E  3061               	movlw	97
  4905  009F  0020               	movlb	0	; select bank0
  4906  00A0  00D5               	movwf	??_RTXUpdateDisplay
  4907  00A1  0855               	movf	??_RTXUpdateDisplay,w
  4908  00A2  0021               	movlb	1	; select bank1
  4909  00A3  00B9               	movwf	(_strTitle^(0+128)+6)
  4910                           
  4911                           ;RTX.c: 131: strTitle[7]='m';
  4912  00A4  306D               	movlw	109
  4913  00A5  0020               	movlb	0	; select bank0
  4914  00A6  00D5               	movwf	??_RTXUpdateDisplay
  4915  00A7  0855               	movf	??_RTXUpdateDisplay,w
  4916  00A8  0021               	movlb	1	; select bank1
  4917  00A9  00BA               	movwf	(_strTitle^(0+128)+7)
  4918                           
  4919                           ;RTX.c: 132: strTitle[8]='m';
  4920  00AA  306D               	movlw	109
  4921  00AB  0020               	movlb	0	; select bank0
  4922  00AC  00D5               	movwf	??_RTXUpdateDisplay
  4923  00AD  0855               	movf	??_RTXUpdateDisplay,w
  4924  00AE  0021               	movlb	1	; select bank1
  4925  00AF  00BB               	movwf	(_strTitle^(0+128)+8)
  4926                           
  4927                           ;RTX.c: 133: strTitle[9]='a';
  4928  00B0  3061               	movlw	97
  4929  00B1  0020               	movlb	0	; select bank0
  4930  00B2  00D5               	movwf	??_RTXUpdateDisplay
  4931  00B3  0855               	movf	??_RTXUpdateDisplay,w
  4932  00B4  0021               	movlb	1	; select bank1
  4933  00B5  00BC               	movwf	(_strTitle^(0+128)+9)
  4934                           
  4935                           ;RTX.c: 134: strTitle[10]='z';
  4936  00B6  307A               	movlw	122
  4937  00B7  0020               	movlb	0	; select bank0
  4938  00B8  00D5               	movwf	??_RTXUpdateDisplay
  4939  00B9  0855               	movf	??_RTXUpdateDisplay,w
  4940  00BA  0021               	movlb	1	; select bank1
  4941  00BB  00BD               	movwf	(_strTitle^(0+128)+10)
  4942                           
  4943                           ;RTX.c: 135: strTitle[11]='i';
  4944  00BC  3069               	movlw	105
  4945  00BD  0020               	movlb	0	; select bank0
  4946  00BE  00D5               	movwf	??_RTXUpdateDisplay
  4947  00BF  0855               	movf	??_RTXUpdateDisplay,w
  4948  00C0  0021               	movlb	1	; select bank1
  4949  00C1  00BE               	movwf	(_strTitle^(0+128)+11)
  4950                           
  4951                           ;RTX.c: 136: strTitle[12]='o';
  4952  00C2  306F               	movlw	111
  4953  00C3  0020               	movlb	0	; select bank0
  4954  00C4  00D5               	movwf	??_RTXUpdateDisplay
  4955  00C5  0855               	movf	??_RTXUpdateDisplay,w
  4956  00C6  0021               	movlb	1	; select bank1
  4957  00C7  00BF               	movwf	(_strTitle^(0+128)+12)
  4958                           
  4959                           ;RTX.c: 137: strTitle[13]='n';
  4960  00C8  306E               	movlw	110
  4961  00C9  0020               	movlb	0	; select bank0
  4962  00CA  00D5               	movwf	??_RTXUpdateDisplay
  4963  00CB  0855               	movf	??_RTXUpdateDisplay,w
  4964  00CC  0021               	movlb	1	; select bank1
  4965  00CD  00C0               	movwf	(_strTitle^(0+128)+13)
  4966                           
  4967                           ;RTX.c: 138: strTitle[14]='e';
  4968  00CE  3065               	movlw	101
  4969  00CF  0020               	movlb	0	; select bank0
  4970  00D0  00D5               	movwf	??_RTXUpdateDisplay
  4971  00D1  0855               	movf	??_RTXUpdateDisplay,w
  4972  00D2  0021               	movlb	1	; select bank1
  4973  00D3  00C1               	movwf	(_strTitle^(0+128)+14)
  4974                           
  4975                           ;RTX.c: 139: DPYSendStr(0,(16-sizeof(strTitle))/2,strTitle,sizeof(strTitle)/sizeof(char)
      +                          );
  4976  00D4  0020               	movlb	0	; select bank0
  4977  00D5  01A0               	clrf	?_DPYSendStr
  4978  00D6  30B3               	movlw	low _strTitle
  4979  00D7  00A1               	movwf	?_DPYSendStr+1
  4980  00D8  3000               	movlw	high _strTitle
  4981  00D9  00A2               	movwf	?_DPYSendStr+2
  4982  00DA  3010               	movlw	16
  4983  00DB  00D5               	movwf	??_RTXUpdateDisplay
  4984  00DC  0855               	movf	??_RTXUpdateDisplay,w
  4985  00DD  00A3               	movwf	?_DPYSendStr+3
  4986  00DE  3000               	movlw	0
  4987  00DF  318C  2427  3180   	fcall	_DPYSendStr
  4988                           
  4989                           ;RTX.c: 140: strTemp[5]='I';
  4990  00E2  3049               	movlw	73
  4991  00E3  0020               	movlb	0	; select bank0
  4992  00E4  00D5               	movwf	??_RTXUpdateDisplay
  4993  00E5  0855               	movf	??_RTXUpdateDisplay,w
  4994  00E6  0022               	movlb	2	; select bank2
  4995  00E7  00B6               	movwf	(_strTemp^(0+256)+5)
  4996                           
  4997                           ;RTX.c: 141: strTemp[6]='D';
  4998  00E8  3044               	movlw	68
  4999  00E9  0020               	movlb	0	; select bank0
  5000  00EA  00D5               	movwf	??_RTXUpdateDisplay
  5001  00EB  0855               	movf	??_RTXUpdateDisplay,w
  5002  00EC  0022               	movlb	2	; select bank2
  5003  00ED  00B7               	movwf	(_strTemp^(0+256)+6)
  5004                           
  5005                           ;RTX.c: 142: strTemp[7]=':';
  5006  00EE  303A               	movlw	58
  5007  00EF  0020               	movlb	0	; select bank0
  5008  00F0  00D5               	movwf	??_RTXUpdateDisplay
  5009  00F1  0855               	movf	??_RTXUpdateDisplay,w
  5010  00F2  0022               	movlb	2	; select bank2
  5011  00F3  00B8               	movwf	(_strTemp^(0+256)+7)
  5012                           
  5013                           ;RTX.c: 143: if(val==UPD_DPY_PGM)
  5014  00F4  0021               	movlb	1	; select bank1
  5015  00F5  0867               	movf	RTXUpdateDisplay@val^(0+128),w
  5016  00F6  3A02               	xorlw	2
  5017  00F7  1D03               	skipz
  5018  00F8  290A               	goto	l4769
  5019                           
  5020                           ;RTX.c: 144: {
  5021                           ;RTX.c: 145: strTemp[9]='?';
  5022  00F9  303F               	movlw	63
  5023  00FA  0020               	movlb	0	; select bank0
  5024  00FB  00D5               	movwf	??_RTXUpdateDisplay
  5025  00FC  0855               	movf	??_RTXUpdateDisplay,w
  5026  00FD  0022               	movlb	2	; select bank2
  5027  00FE  00BA               	movwf	(_strTemp^(0+256)+9)
  5028                           
  5029                           ;RTX.c: 146: strTemp[10]='?';
  5030  00FF  303F               	movlw	63
  5031  0100  0020               	movlb	0	; select bank0
  5032  0101  00D5               	movwf	??_RTXUpdateDisplay
  5033  0102  0855               	movf	??_RTXUpdateDisplay,w
  5034  0103  0022               	movlb	2	; select bank2
  5035  0104  00BB               	movwf	(_strTemp^(0+256)+10)
  5036                           
  5037                           ;RTX.c: 147: strTemp[11]='?';
  5038  0105  303F               	movlw	63
  5039  0106  0020               	movlb	0	; select bank0
  5040  0107  00D5               	movwf	??_RTXUpdateDisplay
  5041  0108  0855               	movf	??_RTXUpdateDisplay,w
  5042  0109  2937               	goto	L1
  5043  010A                     l4769:	
  5044                           ;RTX.c: 148: }
  5045                           
  5046                           
  5047                           ;RTX.c: 149: else
  5048                           ;RTX.c: 150: {
  5049                           ;RTX.c: 151: itoa(p,pgm_cfg.sensId,10);
  5050  010A  0021               	movlb	1	; select bank1
  5051  010B  084F               	movf	(_pgm_cfg^(0+128)+3),w
  5052  010C  0020               	movlb	0	; select bank0
  5053  010D  00D5               	movwf	??_RTXUpdateDisplay
  5054  010E  01D6               	clrf	??_RTXUpdateDisplay+1
  5055  010F  0855               	movf	??_RTXUpdateDisplay,w
  5056  0110  00A8               	movwf	?_itoa
  5057  0111  0856               	movf	??_RTXUpdateDisplay+1,w
  5058  0112  00A9               	movwf	?_itoa+1
  5059  0113  300A               	movlw	10
  5060  0114  00AA               	movwf	?_itoa+2
  5061  0115  3000               	movlw	0
  5062  0116  00AB               	movwf	?_itoa+3
  5063  0117  0021               	movlb	1	; select bank1
  5064  0118  0869               	movf	RTXUpdateDisplay@p^(0+128),w
  5065  0119  3189  21F6  3180   	fcall	_itoa
  5066                           
  5067                           ;RTX.c: 152: strTemp[9]=(*(p));
  5068  011C  0021               	movlb	1	; select bank1
  5069  011D  0869               	movf	RTXUpdateDisplay@p^(0+128),w
  5070  011E  0086               	movwf	6
  5071  011F  3001               	movlw	1	; select bank2/3
  5072  0120  0087               	movwf	7
  5073  0121  0801               	movf	1,w
  5074  0122  0020               	movlb	0	; select bank0
  5075  0123  00D5               	movwf	??_RTXUpdateDisplay
  5076  0124  0855               	movf	??_RTXUpdateDisplay,w
  5077  0125  0022               	movlb	2	; select bank2
  5078  0126  00BA               	movwf	(_strTemp^(0+256)+9)
  5079                           
  5080                           ;RTX.c: 153: strTemp[10]=(*(p+1));
  5081  0127  0021               	movlb	1	; select bank1
  5082  0128  0869               	movf	RTXUpdateDisplay@p^(0+128),w
  5083  0129  0086               	movwf	6
  5084  012A  3001               	movlw	1	; select bank2/3
  5085  012B  0087               	movwf	7
  5086  012C  3001               	movlw	1	; select bank2/3
  5087  012D  3F41               	moviw [1]fsr1
  5088  012E  0022               	movlb	2	; select bank2
  5089  012F  00BB               	movwf	(_strTemp^(0+256)+10)
  5090                           
  5091                           ;RTX.c: 154: strTemp[11]=(*(p+2));
  5092  0130  0021               	movlb	1	; select bank1
  5093  0131  0869               	movf	RTXUpdateDisplay@p^(0+128),w
  5094  0132  0086               	movwf	6
  5095  0133  3001               	movlw	1	; select bank2/3
  5096  0134  0087               	movwf	7
  5097  0135  3001               	movlw	1	; select bank2/3
  5098  0136  3F42               	moviw [2]fsr1
  5099  0137                     L1:	
  5100  0137  0022               	movlb	2	; select bank2
  5101  0138  00BC               	movwf	(_strTemp^(0+256)+11)
  5102                           
  5103                           ;RTX.c: 155: }
  5104                           ;RTX.c: 156: DPYSendStr(1,0,strTemp,sizeof(strTemp)/sizeof(char));
  5105  0139  0020               	movlb	0	; select bank0
  5106  013A  01A0               	clrf	?_DPYSendStr
  5107  013B  3031               	movlw	low _strTemp
  5108  013C  00A1               	movwf	?_DPYSendStr+1
  5109  013D  3001               	movlw	high _strTemp
  5110  013E  00A2               	movwf	?_DPYSendStr+2
  5111  013F  3010               	movlw	16
  5112  0140  00D5               	movwf	??_RTXUpdateDisplay
  5113  0141  0855               	movf	??_RTXUpdateDisplay,w
  5114  0142  00A3               	movwf	?_DPYSendStr+3
  5115  0143  3001               	movlw	1
  5116  0144  318C  2427         	fcall	_DPYSendStr
  5117                           
  5118                           ;RTX.c: 157: }
  5119  0146  0008               	return
  5120  0147                     l4779:	
  5121                           
  5122                           ;RTX.c: 158: else
  5123                           ;RTX.c: 159: {
  5124                           ;RTX.c: 160: strTitle[2]='T';
  5125  0147  3054               	movlw	84
  5126  0148  0020               	movlb	0	; select bank0
  5127  0149  00D5               	movwf	??_RTXUpdateDisplay
  5128  014A  0855               	movf	??_RTXUpdateDisplay,w
  5129  014B  0021               	movlb	1	; select bank1
  5130  014C  00B5               	movwf	(_strTitle^(0+128)+2)
  5131                           
  5132                           ;RTX.c: 161: strTitle[3]='e';
  5133  014D  3065               	movlw	101
  5134  014E  0020               	movlb	0	; select bank0
  5135  014F  00D5               	movwf	??_RTXUpdateDisplay
  5136  0150  0855               	movf	??_RTXUpdateDisplay,w
  5137  0151  0021               	movlb	1	; select bank1
  5138  0152  00B6               	movwf	(_strTitle^(0+128)+3)
  5139                           
  5140                           ;RTX.c: 162: strTitle[4]='m';
  5141  0153  306D               	movlw	109
  5142  0154  0020               	movlb	0	; select bank0
  5143  0155  00D5               	movwf	??_RTXUpdateDisplay
  5144  0156  0855               	movf	??_RTXUpdateDisplay,w
  5145  0157  0021               	movlb	1	; select bank1
  5146  0158  00B7               	movwf	(_strTitle^(0+128)+4)
  5147                           
  5148                           ;RTX.c: 163: strTitle[5]='p';
  5149  0159  3070               	movlw	112
  5150  015A  0020               	movlb	0	; select bank0
  5151  015B  00D5               	movwf	??_RTXUpdateDisplay
  5152  015C  0855               	movf	??_RTXUpdateDisplay,w
  5153  015D  0021               	movlb	1	; select bank1
  5154  015E  00B8               	movwf	(_strTitle^(0+128)+5)
  5155                           
  5156                           ;RTX.c: 164: strTitle[6]='e';
  5157  015F  3065               	movlw	101
  5158  0160  0020               	movlb	0	; select bank0
  5159  0161  00D5               	movwf	??_RTXUpdateDisplay
  5160  0162  0855               	movf	??_RTXUpdateDisplay,w
  5161  0163  0021               	movlb	1	; select bank1
  5162  0164  00B9               	movwf	(_strTitle^(0+128)+6)
  5163                           
  5164                           ;RTX.c: 165: strTitle[7]='r';
  5165  0165  3072               	movlw	114
  5166  0166  0020               	movlb	0	; select bank0
  5167  0167  00D5               	movwf	??_RTXUpdateDisplay
  5168  0168  0855               	movf	??_RTXUpdateDisplay,w
  5169  0169  0021               	movlb	1	; select bank1
  5170  016A  00BA               	movwf	(_strTitle^(0+128)+7)
  5171                           
  5172                           ;RTX.c: 166: strTitle[8]='a';
  5173  016B  3061               	movlw	97
  5174  016C  0020               	movlb	0	; select bank0
  5175  016D  00D5               	movwf	??_RTXUpdateDisplay
  5176  016E  0855               	movf	??_RTXUpdateDisplay,w
  5177  016F  0021               	movlb	1	; select bank1
  5178  0170  00BB               	movwf	(_strTitle^(0+128)+8)
  5179                           
  5180                           ;RTX.c: 167: strTitle[9]='t';
  5181  0171  3074               	movlw	116
  5182  0172  0020               	movlb	0	; select bank0
  5183  0173  00D5               	movwf	??_RTXUpdateDisplay
  5184  0174  0855               	movf	??_RTXUpdateDisplay,w
  5185  0175  0021               	movlb	1	; select bank1
  5186  0176  00BC               	movwf	(_strTitle^(0+128)+9)
  5187                           
  5188                           ;RTX.c: 168: strTitle[10]='u';
  5189  0177  3075               	movlw	117
  5190  0178  0020               	movlb	0	; select bank0
  5191  0179  00D5               	movwf	??_RTXUpdateDisplay
  5192  017A  0855               	movf	??_RTXUpdateDisplay,w
  5193  017B  0021               	movlb	1	; select bank1
  5194  017C  00BD               	movwf	(_strTitle^(0+128)+10)
  5195                           
  5196                           ;RTX.c: 169: strTitle[11]='r';
  5197  017D  3072               	movlw	114
  5198  017E  0020               	movlb	0	; select bank0
  5199  017F  00D5               	movwf	??_RTXUpdateDisplay
  5200  0180  0855               	movf	??_RTXUpdateDisplay,w
  5201  0181  0021               	movlb	1	; select bank1
  5202  0182  00BE               	movwf	(_strTitle^(0+128)+11)
  5203                           
  5204                           ;RTX.c: 170: strTitle[12]='a';
  5205  0183  3061               	movlw	97
  5206  0184  0020               	movlb	0	; select bank0
  5207  0185  00D5               	movwf	??_RTXUpdateDisplay
  5208  0186  0855               	movf	??_RTXUpdateDisplay,w
  5209  0187  0021               	movlb	1	; select bank1
  5210  0188  00BF               	movwf	(_strTitle^(0+128)+12)
  5211                           
  5212                           ;RTX.c: 171: strTitle[13]=':';
  5213  0189  303A               	movlw	58
  5214  018A  0020               	movlb	0	; select bank0
  5215  018B  00D5               	movwf	??_RTXUpdateDisplay
  5216  018C  0855               	movf	??_RTXUpdateDisplay,w
  5217  018D  0021               	movlb	1	; select bank1
  5218  018E  00C0               	movwf	(_strTitle^(0+128)+13)
  5219                           
  5220                           ;RTX.c: 172: DPYSendStr(0,(16-sizeof(strTitle))/2,strTitle,sizeof(strTitle)/sizeof(char)
      +                          );
  5221  018F  0020               	movlb	0	; select bank0
  5222  0190  01A0               	clrf	?_DPYSendStr
  5223  0191  30B3               	movlw	low _strTitle
  5224  0192  00A1               	movwf	?_DPYSendStr+1
  5225  0193  3000               	movlw	high _strTitle
  5226  0194  00A2               	movwf	?_DPYSendStr+2
  5227  0195  3010               	movlw	16
  5228  0196  00D5               	movwf	??_RTXUpdateDisplay
  5229  0197  0855               	movf	??_RTXUpdateDisplay,w
  5230  0198  00A3               	movwf	?_DPYSendStr+3
  5231  0199  3000               	movlw	0
  5232  019A  318C  2427  3180   	fcall	_DPYSendStr
  5233                           
  5234                           ;RTX.c: 173: if(val==UPD_DPY_TEMP)
  5235  019D  0021               	movlb	1	; select bank1
  5236  019E  0867               	movf	RTXUpdateDisplay@val^(0+128),w
  5237  019F  3A01               	xorlw	1
  5238  01A0  1D03               	skipz
  5239  01A1  2AB2               	goto	l4839
  5240                           
  5241                           ;RTX.c: 174: {
  5242                           ;RTX.c: 175: p=ftoa(temp,(&(status)));
  5243  01A2  0823               	movf	_temp^(0+128),w
  5244  01A3  0020               	movlb	0	; select bank0
  5245  01A4  00C7               	movwf	?_ftoa
  5246  01A5  0021               	movlb	1	; select bank1
  5247  01A6  0824               	movf	(_temp+1)^(0+128),w
  5248  01A7  0020               	movlb	0	; select bank0
  5249  01A8  00C8               	movwf	?_ftoa+1
  5250  01A9  0021               	movlb	1	; select bank1
  5251  01AA  0825               	movf	(_temp+2)^(0+128),w
  5252  01AB  0020               	movlb	0	; select bank0
  5253  01AC  00C9               	movwf	?_ftoa+2
  5254  01AD  30E1               	movlw	RTXUpdateDisplay@status& (0+255)
  5255  01AE  00D5               	movwf	??_RTXUpdateDisplay
  5256  01AF  0855               	movf	??_RTXUpdateDisplay,w
  5257  01B0  00CA               	movwf	?_ftoa+3
  5258  01B1  3187  2732  3180   	fcall	_ftoa
  5259  01B4  0020               	movlb	0	; select bank0
  5260  01B5  00D6               	movwf	??_RTXUpdateDisplay+1
  5261  01B6  0856               	movf	??_RTXUpdateDisplay+1,w
  5262  01B7  0021               	movlb	1	; select bank1
  5263  01B8  00E9               	movwf	RTXUpdateDisplay@p^(0+128)
  5264                           
  5265                           ;RTX.c: 177: isDec=0;
  5266  01B9  01E4               	clrf	RTXUpdateDisplay@isDec^(0+128)
  5267                           
  5268                           ;RTX.c: 178: for(i=0;i<sizeof(strTmp)/sizeof(char);i++)
  5269  01BA  01EA               	clrf	RTXUpdateDisplay@i^(0+128)
  5270  01BB  3010               	movlw	16
  5271  01BC  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  5272  01BD  1803               	btfsc	3,0
  5273  01BE  2A1E               	goto	l4815
  5274  01BF                     l4795:	
  5275                           
  5276                           ;RTX.c: 179: {
  5277                           ;RTX.c: 181: if((*(p+i))=='.')
  5278  01BF  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5279  01C0  0769               	addwf	RTXUpdateDisplay@p^(0+128),w
  5280  01C1  0020               	movlb	0	; select bank0
  5281  01C2  00D5               	movwf	??_RTXUpdateDisplay
  5282  01C3  0855               	movf	??_RTXUpdateDisplay,w
  5283  01C4  0086               	movwf	6
  5284  01C5  3001               	movlw	1	; select bank2/3
  5285  01C6  0087               	movwf	7
  5286  01C7  0801               	movf	1,w
  5287  01C8  3A2E               	xorlw	46
  5288  01C9  1D03               	skipz
  5289  01CA  29D4               	goto	l478
  5290                           
  5291                           ;RTX.c: 182: {
  5292                           ;RTX.c: 183: isDec=1;
  5293  01CB  0021               	movlb	1	; select bank1
  5294  01CC  01E4               	clrf	RTXUpdateDisplay@isDec^(0+128)
  5295  01CD  0AE4               	incf	RTXUpdateDisplay@isDec^(0+128),f
  5296                           
  5297                           ;RTX.c: 184: posDec=i;
  5298  01CE  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5299  01CF  0020               	movlb	0	; select bank0
  5300  01D0  00D5               	movwf	??_RTXUpdateDisplay
  5301  01D1  0855               	movf	??_RTXUpdateDisplay,w
  5302  01D2  0021               	movlb	1	; select bank1
  5303  01D3  00E3               	movwf	RTXUpdateDisplay@posDec^(0+128)
  5304  01D4                     l478:	
  5305                           
  5306                           ;RTX.c: 185: }
  5307                           ;RTX.c: 187: if(isDec)
  5308  01D4  0021               	movlb	1	; select bank1
  5309  01D5  0864               	movf	RTXUpdateDisplay@isDec^(0+128),w
  5310  01D6  1903               	btfsc	3,2
  5311  01D7  29F6               	goto	l4805
  5312                           
  5313                           ;RTX.c: 188: {
  5314                           ;RTX.c: 189: if((i-posDec)>2)
  5315  01D8  0863               	movf	RTXUpdateDisplay@posDec^(0+128),w
  5316  01D9  0020               	movlb	0	; select bank0
  5317  01DA  00D5               	movwf	??_RTXUpdateDisplay
  5318  01DB  01D6               	clrf	??_RTXUpdateDisplay+1
  5319  01DC  09D5               	comf	??_RTXUpdateDisplay,f
  5320  01DD  09D6               	comf	??_RTXUpdateDisplay+1,f
  5321  01DE  0AD5               	incf	??_RTXUpdateDisplay,f
  5322  01DF  1903               	skipnz
  5323  01E0  0AD6               	incf	??_RTXUpdateDisplay+1,f
  5324  01E1  0021               	movlb	1	; select bank1
  5325  01E2  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5326  01E3  0020               	movlb	0	; select bank0
  5327  01E4  0755               	addwf	??_RTXUpdateDisplay,w
  5328  01E5  00D7               	movwf	??_RTXUpdateDisplay+2
  5329  01E6  0856               	movf	??_RTXUpdateDisplay+1,w
  5330  01E7  1803               	skipnc
  5331  01E8  0A56               	incf	??_RTXUpdateDisplay+1,w
  5332  01E9  00D8               	movwf	??_RTXUpdateDisplay+3
  5333  01EA  0858               	movf	??_RTXUpdateDisplay+3,w
  5334  01EB  3A80               	xorlw	128
  5335  01EC  00FF               	movwf	127
  5336  01ED  3080               	movlw	128
  5337  01EE  027F               	subwf	127,w
  5338  01EF  1D03               	skipz
  5339  01F0  29F3               	goto	u4855
  5340  01F1  3003               	movlw	3
  5341  01F2  0257               	subwf	??_RTXUpdateDisplay+2,w
  5342  01F3                     u4855:	
  5343  01F3  1803               	btfsc	3,0
  5344  01F4  2A1E               	goto	l4815
  5345                           
  5346                           ;RTX.c: 190: break;
  5347  01F5  0021               	movlb	1	; select bank1
  5348  01F6                     l4805:	
  5349                           
  5350                           ;RTX.c: 191: }
  5351                           ;RTX.c: 193: if((*(p+i))==0x00)
  5352  01F6  0021               	movlb	1	; select bank1
  5353  01F7  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5354  01F8  0769               	addwf	RTXUpdateDisplay@p^(0+128),w
  5355  01F9  0020               	movlb	0	; select bank0
  5356  01FA  00D5               	movwf	??_RTXUpdateDisplay
  5357  01FB  0855               	movf	??_RTXUpdateDisplay,w
  5358  01FC  0086               	movwf	6
  5359  01FD  3001               	movlw	1	; select bank2/3
  5360  01FE  0087               	movwf	7
  5361  01FF  0881               	movf	1,f
  5362  0200  1903               	btfsc	3,2
  5363  0201  2A1E               	goto	l4815
  5364                           
  5365                           ;RTX.c: 196: strTmp[i]=(*(p+i));
  5366                           
  5367                           ;RTX.c: 194: break;
  5368  0202  0021               	movlb	1	; select bank1
  5369  0203  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5370  0204  0769               	addwf	RTXUpdateDisplay@p^(0+128),w
  5371  0205  0020               	movlb	0	; select bank0
  5372  0206  00D5               	movwf	??_RTXUpdateDisplay
  5373  0207  0855               	movf	??_RTXUpdateDisplay,w
  5374  0208  0086               	movwf	6
  5375  0209  3001               	movlw	1	; select bank2/3
  5376  020A  0087               	movwf	7
  5377  020B  0801               	movf	1,w
  5378  020C  00D6               	movwf	??_RTXUpdateDisplay+1
  5379  020D  0021               	movlb	1	; select bank1
  5380  020E  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5381  020F  3ED1               	addlw	RTXUpdateDisplay@strTmp& (0+255)
  5382  0210  0086               	movwf	6
  5383  0211  0187               	clrf	7
  5384  0212  0020               	movlb	0	; select bank0
  5385  0213  0856               	movf	??_RTXUpdateDisplay+1,w
  5386  0214  0081               	movwf	1
  5387  0215  3001               	movlw	1
  5388  0216  00D5               	movwf	??_RTXUpdateDisplay
  5389  0217  0855               	movf	??_RTXUpdateDisplay,w
  5390  0218  0021               	movlb	1	; select bank1
  5391  0219  07EA               	addwf	RTXUpdateDisplay@i^(0+128),f
  5392  021A  3010               	movlw	16
  5393  021B  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  5394  021C  1C03               	skipc
  5395  021D  29BF               	goto	l4795
  5396  021E                     l4815:	
  5397                           
  5398                           ;RTX.c: 197: }
  5399                           ;RTX.c: 200: maxDigit=(16-2);
  5400  021E  300E               	movlw	14
  5401  021F  0020               	movlb	0	; select bank0
  5402  0220  00D5               	movwf	??_RTXUpdateDisplay
  5403  0221  0855               	movf	??_RTXUpdateDisplay,w
  5404  0222  0021               	movlb	1	; select bank1
  5405  0223  00E6               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  5406                           
  5407                           ;RTX.c: 201: if(batt<2.5)
  5408  0224  0820               	movf	_batt^(0+128),w
  5409  0225  00F1               	movwf	?___ftge
  5410  0226  0821               	movf	(_batt+1)^(0+128),w
  5411  0227  00F2               	movwf	?___ftge+1
  5412  0228  0822               	movf	(_batt+2)^(0+128),w
  5413  0229  00F3               	movwf	?___ftge+2
  5414  022A  3000               	movlw	0
  5415  022B  00F4               	movwf	?___ftge+3
  5416  022C  3020               	movlw	32
  5417  022D  00F5               	movwf	?___ftge+4
  5418  022E  3040               	movlw	64
  5419  022F  00F6               	movwf	?___ftge+5
  5420  0230  318B  2369  3180   	fcall	___ftge
  5421  0233  1803               	btfsc	3,0
  5422  0234  2A3B               	goto	l482
  5423                           
  5424                           ;RTX.c: 202: maxDigit=(16-3);
  5425  0235  300D               	movlw	13
  5426  0236  0020               	movlb	0	; select bank0
  5427  0237  00D5               	movwf	??_RTXUpdateDisplay
  5428  0238  0855               	movf	??_RTXUpdateDisplay,w
  5429  0239  0021               	movlb	1	; select bank1
  5430  023A  00E6               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  5431  023B                     l482:	
  5432                           
  5433                           ;RTX.c: 205: if(i>=maxDigit)
  5434  023B  0021               	movlb	1	; select bank1
  5435  023C  0866               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  5436  023D  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  5437  023E  1C03               	skipc
  5438  023F  2A47               	goto	l4823
  5439                           
  5440                           ;RTX.c: 206: i=maxDigit-1;
  5441  0240  0866               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  5442  0241  3EFF               	addlw	255
  5443  0242  0020               	movlb	0	; select bank0
  5444  0243  00D5               	movwf	??_RTXUpdateDisplay
  5445  0244  0855               	movf	??_RTXUpdateDisplay,w
  5446  0245  0021               	movlb	1	; select bank1
  5447  0246  00EA               	movwf	RTXUpdateDisplay@i^(0+128)
  5448  0247                     l4823:	
  5449                           
  5450                           ;RTX.c: 209: offset=(maxDigit-i)/2;
  5451  0247  3002               	movlw	2
  5452  0248  00F1               	movwf	?___awdiv
  5453  0249  3000               	movlw	0
  5454  024A  00F2               	movwf	?___awdiv+1
  5455  024B  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5456  024C  0020               	movlb	0	; select bank0
  5457  024D  00D5               	movwf	??_RTXUpdateDisplay
  5458  024E  01D6               	clrf	??_RTXUpdateDisplay+1
  5459  024F  09D5               	comf	??_RTXUpdateDisplay,f
  5460  0250  09D6               	comf	??_RTXUpdateDisplay+1,f
  5461  0251  0AD5               	incf	??_RTXUpdateDisplay,f
  5462  0252  1903               	skipnz
  5463  0253  0AD6               	incf	??_RTXUpdateDisplay+1,f
  5464  0254  0021               	movlb	1	; select bank1
  5465  0255  0866               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  5466  0256  0020               	movlb	0	; select bank0
  5467  0257  0755               	addwf	??_RTXUpdateDisplay,w
  5468  0258  00F3               	movwf	?___awdiv+2
  5469  0259  0856               	movf	??_RTXUpdateDisplay+1,w
  5470  025A  1803               	skipnc
  5471  025B  0A56               	incf	??_RTXUpdateDisplay+1,w
  5472  025C  00F4               	movwf	?___awdiv+3
  5473  025D  318D  2511  3180   	fcall	___awdiv
  5474  0260  0871               	movf	?___awdiv,w
  5475  0261  0020               	movlb	0	; select bank0
  5476  0262  00D7               	movwf	??_RTXUpdateDisplay+2
  5477  0263  0857               	movf	??_RTXUpdateDisplay+2,w
  5478  0264  0021               	movlb	1	; select bank1
  5479  0265  00E5               	movwf	RTXUpdateDisplay@offset^(0+128)
  5480                           
  5481                           ;RTX.c: 210: for(j=0;j<i;j++)
  5482  0266  01E8               	clrf	RTXUpdateDisplay@j^(0+128)
  5483  0267                     l4831:	
  5484  0267  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  5485  0268  0268               	subwf	RTXUpdateDisplay@j^(0+128),w
  5486  0269  1803               	btfsc	3,0
  5487  026A  2A82               	goto	l4833
  5488                           
  5489                           ;RTX.c: 211: strTemp[j+offset]=strTmp[j];
  5490  026B  0868               	movf	RTXUpdateDisplay@j^(0+128),w
  5491  026C  3ED1               	addlw	RTXUpdateDisplay@strTmp& (0+255)
  5492  026D  0086               	movwf	6
  5493  026E  0187               	clrf	7
  5494  026F  0801               	movf	1,w
  5495  0270  0020               	movlb	0	; select bank0
  5496  0271  00D5               	movwf	??_RTXUpdateDisplay
  5497  0272  0021               	movlb	1	; select bank1
  5498  0273  0868               	movf	RTXUpdateDisplay@j^(0+128),w
  5499  0274  0765               	addwf	RTXUpdateDisplay@offset^(0+128),w
  5500  0275  3E31               	addlw	_strTemp& (0+255)
  5501  0276  0086               	movwf	6
  5502  0277  3001               	movlw	1	; select bank2/3
  5503  0278  0087               	movwf	7
  5504  0279  0020               	movlb	0	; select bank0
  5505  027A  0855               	movf	??_RTXUpdateDisplay,w
  5506  027B  0081               	movwf	1
  5507  027C  3001               	movlw	1
  5508  027D  00D5               	movwf	??_RTXUpdateDisplay
  5509  027E  0855               	movf	??_RTXUpdateDisplay,w
  5510  027F  0021               	movlb	1	; select bank1
  5511  0280  07E8               	addwf	RTXUpdateDisplay@j^(0+128),f
  5512  0281  2A67               	goto	l4831
  5513  0282                     l4833:	
  5514                           
  5515                           ;RTX.c: 214: strTemp[j+offset]=0b11011111;
  5516  0282  30DF               	movlw	223
  5517  0283  0020               	movlb	0	; select bank0
  5518  0284  00D5               	movwf	??_RTXUpdateDisplay
  5519  0285  0021               	movlb	1	; select bank1
  5520  0286  0868               	movf	RTXUpdateDisplay@j^(0+128),w
  5521  0287  0765               	addwf	RTXUpdateDisplay@offset^(0+128),w
  5522  0288  3E31               	addlw	_strTemp& (0+255)
  5523  0289  0086               	movwf	6
  5524  028A  3001               	movlw	1	; select bank2/3
  5525  028B  0087               	movwf	7
  5526  028C  0020               	movlb	0	; select bank0
  5527  028D  0855               	movf	??_RTXUpdateDisplay,w
  5528  028E  0081               	movwf	1
  5529                           
  5530                           ;RTX.c: 215: strTemp[j+offset+1]='C';
  5531  028F  3043               	movlw	67
  5532  0290  00D5               	movwf	??_RTXUpdateDisplay
  5533  0291  0021               	movlb	1	; select bank1
  5534  0292  0865               	movf	RTXUpdateDisplay@offset^(0+128),w
  5535  0293  0768               	addwf	RTXUpdateDisplay@j^(0+128),w
  5536  0294  0020               	movlb	0	; select bank0
  5537  0295  00D6               	movwf	??_RTXUpdateDisplay+1
  5538  0296  0A56               	incf	??_RTXUpdateDisplay+1,w
  5539  0297  3E31               	addlw	_strTemp& (0+255)
  5540  0298  0086               	movwf	6
  5541  0299  3001               	movlw	1	; select bank2/3
  5542  029A  0087               	movwf	7
  5543  029B  0855               	movf	??_RTXUpdateDisplay,w
  5544  029C  0081               	movwf	1
  5545                           
  5546                           ;RTX.c: 216: if(batt<2.5)
  5547  029D  0021               	movlb	1	; select bank1
  5548  029E  0820               	movf	_batt^(0+128),w
  5549  029F  00F1               	movwf	?___ftge
  5550  02A0  0821               	movf	(_batt+1)^(0+128),w
  5551  02A1  00F2               	movwf	?___ftge+1
  5552  02A2  0822               	movf	(_batt+2)^(0+128),w
  5553  02A3  00F3               	movwf	?___ftge+2
  5554  02A4  3000               	movlw	0
  5555  02A5  00F4               	movwf	?___ftge+3
  5556  02A6  3020               	movlw	32
  5557  02A7  00F5               	movwf	?___ftge+4
  5558  02A8  3040               	movlw	64
  5559  02A9  00F6               	movwf	?___ftge+5
  5560  02AA  318B  2369  3180   	fcall	___ftge
  5561  02AD  1803               	btfsc	3,0
  5562  02AE  2AE0               	goto	l4843
  5563                           
  5564                           ;RTX.c: 217: strTemp[sizeof(strTemp)/sizeof(char)-1]=0x00;
  5565  02AF  0022               	movlb	2	; select bank2
  5566  02B0  01C0               	clrf	(_strTemp^(0+256)+15)
  5567                           
  5568                           ;RTX.c: 218: }
  5569  02B1  2AE0               	goto	l4843
  5570  02B2                     l4839:	
  5571                           
  5572                           ;RTX.c: 219: else if(val==UPD_DPY_RST)
  5573  02B2  0021               	movlb	1	; select bank1
  5574  02B3  08E7               	movf	RTXUpdateDisplay@val^(0+128),f
  5575  02B4  1D03               	skipz
  5576  02B5  2AE0               	goto	l4843
  5577                           
  5578                           ;RTX.c: 220: {
  5579                           ;RTX.c: 221: strTemp[5]='?';
  5580  02B6  303F               	movlw	63
  5581  02B7  0020               	movlb	0	; select bank0
  5582  02B8  00D5               	movwf	??_RTXUpdateDisplay
  5583  02B9  0855               	movf	??_RTXUpdateDisplay,w
  5584  02BA  0022               	movlb	2	; select bank2
  5585  02BB  00B6               	movwf	(_strTemp^(0+256)+5)
  5586                           
  5587                           ;RTX.c: 222: strTemp[6]='?';
  5588  02BC  303F               	movlw	63
  5589  02BD  0020               	movlb	0	; select bank0
  5590  02BE  00D5               	movwf	??_RTXUpdateDisplay
  5591  02BF  0855               	movf	??_RTXUpdateDisplay,w
  5592  02C0  0022               	movlb	2	; select bank2
  5593  02C1  00B7               	movwf	(_strTemp^(0+256)+6)
  5594                           
  5595                           ;RTX.c: 223: strTemp[7]='.';
  5596  02C2  302E               	movlw	46
  5597  02C3  0020               	movlb	0	; select bank0
  5598  02C4  00D5               	movwf	??_RTXUpdateDisplay
  5599  02C5  0855               	movf	??_RTXUpdateDisplay,w
  5600  02C6  0022               	movlb	2	; select bank2
  5601  02C7  00B8               	movwf	(_strTemp^(0+256)+7)
  5602                           
  5603                           ;RTX.c: 224: strTemp[8]='?';
  5604  02C8  303F               	movlw	63
  5605  02C9  0020               	movlb	0	; select bank0
  5606  02CA  00D5               	movwf	??_RTXUpdateDisplay
  5607  02CB  0855               	movf	??_RTXUpdateDisplay,w
  5608  02CC  0022               	movlb	2	; select bank2
  5609  02CD  00B9               	movwf	(_strTemp^(0+256)+8)
  5610                           
  5611                           ;RTX.c: 225: strTemp[9]='?';
  5612  02CE  303F               	movlw	63
  5613  02CF  0020               	movlb	0	; select bank0
  5614  02D0  00D5               	movwf	??_RTXUpdateDisplay
  5615  02D1  0855               	movf	??_RTXUpdateDisplay,w
  5616  02D2  0022               	movlb	2	; select bank2
  5617  02D3  00BA               	movwf	(_strTemp^(0+256)+9)
  5618                           
  5619                           ;RTX.c: 226: strTemp[10]=0b11011111;
  5620  02D4  30DF               	movlw	223
  5621  02D5  0020               	movlb	0	; select bank0
  5622  02D6  00D5               	movwf	??_RTXUpdateDisplay
  5623  02D7  0855               	movf	??_RTXUpdateDisplay,w
  5624  02D8  0022               	movlb	2	; select bank2
  5625  02D9  00BB               	movwf	(_strTemp^(0+256)+10)
  5626                           
  5627                           ;RTX.c: 227: strTemp[11]='C';
  5628  02DA  3043               	movlw	67
  5629  02DB  0020               	movlb	0	; select bank0
  5630  02DC  00D5               	movwf	??_RTXUpdateDisplay
  5631  02DD  0855               	movf	??_RTXUpdateDisplay,w
  5632  02DE  0022               	movlb	2	; select bank2
  5633  02DF  00BC               	movwf	(_strTemp^(0+256)+11)
  5634  02E0                     l4843:	
  5635                           
  5636                           ;RTX.c: 228: }
  5637                           ;RTX.c: 229: DPYSendStr(1,0,strTemp,sizeof(strTemp)/sizeof(char));
  5638  02E0  0020               	movlb	0	; select bank0
  5639  02E1  01A0               	clrf	?_DPYSendStr
  5640  02E2  3031               	movlw	low _strTemp
  5641  02E3  00A1               	movwf	?_DPYSendStr+1
  5642  02E4  3001               	movlw	high _strTemp
  5643  02E5  00A2               	movwf	?_DPYSendStr+2
  5644  02E6  3010               	movlw	16
  5645  02E7  00D5               	movwf	??_RTXUpdateDisplay
  5646  02E8  0855               	movf	??_RTXUpdateDisplay,w
  5647  02E9  00A3               	movwf	?_DPYSendStr+3
  5648  02EA  3001               	movlw	1
  5649  02EB  318C  2427         	fcall	_DPYSendStr
  5650  02ED  0008               	return
  5651  02EE                     __end_of_RTXUpdateDisplay:	
  5652                           
  5653                           	psect	text22
  5654  0D11                     __ptext22:	
  5655 ;; *************** function ___awdiv *****************
  5656 ;; Defined at:
  5657 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awdiv.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  divisor         2    1[COMMON] int 
  5660 ;;  dividend        2    3[COMMON] int 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  quotient        2    8[COMMON] int 
  5663 ;;  sign            1    7[COMMON] unsigned char 
  5664 ;;  counter         1    6[COMMON] unsigned char 
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  2    1[COMMON] int 
  5667 ;; Registers used:
  5668 ;;		wreg, status,2, status,0
  5669 ;; Tracked objects:
  5670 ;;		On entry : 0/0
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5674 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5675 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;Total ram usage:        9 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:    2
  5681 ;; This function calls:
  5682 ;;		Nothing
  5683 ;; This function is called by:
  5684 ;;		_RTXUpdateDisplay
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function ___awdiv
  5690  0D11                     ___awdiv:	
  5691                           
  5692                           ;incstack = 0
  5693                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5694  0D11  01F7               	clrf	___awdiv@sign
  5695  0D12  1FF2               	btfss	___awdiv@divisor+1,7
  5696  0D13  2D1B               	goto	l4001
  5697  0D14  09F1               	comf	___awdiv@divisor,f
  5698  0D15  09F2               	comf	___awdiv@divisor+1,f
  5699  0D16  0AF1               	incf	___awdiv@divisor,f
  5700  0D17  1903               	skipnz
  5701  0D18  0AF2               	incf	___awdiv@divisor+1,f
  5702  0D19  01F7               	clrf	___awdiv@sign
  5703  0D1A  0AF7               	incf	___awdiv@sign,f
  5704  0D1B                     l4001:	
  5705  0D1B  1FF4               	btfss	___awdiv@dividend+1,7
  5706  0D1C  2D26               	goto	l4007
  5707  0D1D  09F3               	comf	___awdiv@dividend,f
  5708  0D1E  09F4               	comf	___awdiv@dividend+1,f
  5709  0D1F  0AF3               	incf	___awdiv@dividend,f
  5710  0D20  1903               	skipnz
  5711  0D21  0AF4               	incf	___awdiv@dividend+1,f
  5712  0D22  3001               	movlw	1
  5713  0D23  00F5               	movwf	??___awdiv
  5714  0D24  0875               	movf	??___awdiv,w
  5715  0D25  06F7               	xorwf	___awdiv@sign,f
  5716  0D26                     l4007:	
  5717  0D26  01F8               	clrf	___awdiv@quotient
  5718  0D27  01F9               	clrf	___awdiv@quotient+1
  5719  0D28  0872               	movf	___awdiv@divisor+1,w
  5720  0D29  0471               	iorwf	___awdiv@divisor,w
  5721  0D2A  1903               	skipnz
  5722  0D2B  2D55               	goto	l4029
  5723  0D2C  01F6               	clrf	___awdiv@counter
  5724  0D2D  0AF6               	incf	___awdiv@counter,f
  5725  0D2E                     l4017:	
  5726  0D2E  1BF2               	btfsc	___awdiv@divisor+1,7
  5727  0D2F  2D3A               	goto	l4019
  5728  0D30  3001               	movlw	1
  5729  0D31                     u3555:	
  5730  0D31  35F1               	lslf	___awdiv@divisor,f
  5731  0D32  0DF2               	rlf	___awdiv@divisor+1,f
  5732  0D33  0B89               	decfsz	9,f
  5733  0D34  2D31               	goto	u3555
  5734  0D35  3001               	movlw	1
  5735  0D36  00F5               	movwf	??___awdiv
  5736  0D37  0875               	movf	??___awdiv,w
  5737  0D38  07F6               	addwf	___awdiv@counter,f
  5738  0D39  2D2E               	goto	l4017
  5739  0D3A                     l4019:	
  5740  0D3A  3001               	movlw	1
  5741  0D3B                     u3575:	
  5742  0D3B  35F8               	lslf	___awdiv@quotient,f
  5743  0D3C  0DF9               	rlf	___awdiv@quotient+1,f
  5744  0D3D  0B89               	decfsz	9,f
  5745  0D3E  2D3B               	goto	u3575
  5746  0D3F  0872               	movf	___awdiv@divisor+1,w
  5747  0D40  0274               	subwf	___awdiv@dividend+1,w
  5748  0D41  1D03               	skipz
  5749  0D42  2D45               	goto	u3585
  5750  0D43  0871               	movf	___awdiv@divisor,w
  5751  0D44  0273               	subwf	___awdiv@dividend,w
  5752  0D45                     u3585:	
  5753  0D45  1C03               	skipc
  5754  0D46  2D4C               	goto	l4025
  5755  0D47  0871               	movf	___awdiv@divisor,w
  5756  0D48  02F3               	subwf	___awdiv@dividend,f
  5757  0D49  0872               	movf	___awdiv@divisor+1,w
  5758  0D4A  3BF4               	subwfb	___awdiv@dividend+1,f
  5759  0D4B  1478               	bsf	___awdiv@quotient,0
  5760  0D4C                     l4025:	
  5761  0D4C  3001               	movlw	1
  5762  0D4D                     u3595:	
  5763  0D4D  36F2               	lsrf	___awdiv@divisor+1,f
  5764  0D4E  0CF1               	rrf	___awdiv@divisor,f
  5765  0D4F  0B89               	decfsz	9,f
  5766  0D50  2D4D               	goto	u3595
  5767  0D51  3001               	movlw	1
  5768  0D52  02F6               	subwf	___awdiv@counter,f
  5769  0D53  1D03               	btfss	3,2
  5770  0D54  2D3A               	goto	l4019
  5771  0D55                     l4029:	
  5772  0D55  0877               	movf	___awdiv@sign,w
  5773  0D56  1903               	btfsc	3,2
  5774  0D57  2D5D               	goto	l4033
  5775  0D58  09F8               	comf	___awdiv@quotient,f
  5776  0D59  09F9               	comf	___awdiv@quotient+1,f
  5777  0D5A  0AF8               	incf	___awdiv@quotient,f
  5778  0D5B  1903               	skipnz
  5779  0D5C  0AF9               	incf	___awdiv@quotient+1,f
  5780  0D5D                     l4033:	
  5781  0D5D  0879               	movf	___awdiv@quotient+1,w
  5782  0D5E  01F2               	clrf	?___awdiv+1
  5783  0D5F  07F2               	addwf	?___awdiv+1,f
  5784  0D60  0878               	movf	___awdiv@quotient,w
  5785  0D61  01F1               	clrf	?___awdiv
  5786  0D62  07F1               	addwf	?___awdiv,f
  5787  0D63  0008               	return
  5788  0D64                     __end_of___awdiv:	
  5789                           
  5790                           	psect	text23
  5791  0732                     __ptext23:	
  5792 ;; *************** function _ftoa *****************
  5793 ;; Defined at:
  5794 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftoa.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  f               3   39[BANK0 ] float 
  5797 ;;  status          1   42[BANK0 ] PTR int 
  5798 ;;		 -> RTXUpdateDisplay@status(2), 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;  l               4   48[BANK0 ] unsigned long 
  5801 ;;  rem             4   44[BANK0 ] unsigned long 
  5802 ;;  cp              1   52[BANK0 ] PTR unsigned char 
  5803 ;;		 -> ftoa@buf(17), 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      PTR unsigned char 
  5806 ;; Registers used:
  5807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5813 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5817 ;;Total ram usage:       14 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    5
  5820 ;; This function calls:
  5821 ;;		_sprintf
  5822 ;;		___ftge
  5823 ;;		___ftmul
  5824 ;;		___ftneg
  5825 ;;		___ftsub
  5826 ;;		___fttol
  5827 ;;		___lltoft
  5828 ;; This function is called by:
  5829 ;;		_RTXUpdateDisplay
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           
  5834                           ;psect for function _ftoa
  5835  0732                     _ftoa:	
  5836                           
  5837                           ;incstack = 0
  5838                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5839  0732  3020               	movlw	ftoa@buf& (0+255)
  5840  0733  0020               	movlb	0	; select bank0
  5841  0734  00CB               	movwf	??_ftoa
  5842  0735  084B               	movf	??_ftoa,w
  5843  0736  00D4               	movwf	ftoa@cp
  5844  0737  0847               	movf	ftoa@f,w
  5845  0738  00F1               	movwf	?___ftge
  5846  0739  0848               	movf	ftoa@f+1,w
  5847  073A  00F2               	movwf	?___ftge+1
  5848  073B  0849               	movf	ftoa@f+2,w
  5849  073C  00F3               	movwf	?___ftge+2
  5850  073D  3000               	movlw	0
  5851  073E  00F4               	movwf	?___ftge+3
  5852  073F  3000               	movlw	0
  5853  0740  00F5               	movwf	?___ftge+4
  5854  0741  3000               	movlw	0
  5855  0742  00F6               	movwf	?___ftge+5
  5856  0743  318B  2369  3187   	fcall	___ftge
  5857  0746  1803               	btfsc	3,0
  5858  0747  2F65               	goto	l4957
  5859  0748  302D               	movlw	45
  5860  0749  0020               	movlb	0	; select bank0
  5861  074A  00CB               	movwf	??_ftoa
  5862  074B  0854               	movf	ftoa@cp,w
  5863  074C  0086               	movwf	6
  5864  074D  3001               	movlw	1	; select bank2/3
  5865  074E  0087               	movwf	7
  5866  074F  084B               	movf	??_ftoa,w
  5867  0750  0081               	movwf	1
  5868  0751  3001               	movlw	1
  5869  0752  00CB               	movwf	??_ftoa
  5870  0753  084B               	movf	??_ftoa,w
  5871  0754  07D4               	addwf	ftoa@cp,f
  5872  0755  0847               	movf	ftoa@f,w
  5873  0756  00F1               	movwf	?___ftneg
  5874  0757  0848               	movf	ftoa@f+1,w
  5875  0758  00F2               	movwf	?___ftneg+1
  5876  0759  0849               	movf	ftoa@f+2,w
  5877  075A  00F3               	movwf	?___ftneg+2
  5878  075B  3196  260A  3187   	fcall	___ftneg
  5879  075E  0871               	movf	?___ftneg,w
  5880  075F  0020               	movlb	0	; select bank0
  5881  0760  00C7               	movwf	ftoa@f
  5882  0761  0872               	movf	?___ftneg+1,w
  5883  0762  00C8               	movwf	ftoa@f+1
  5884  0763  0873               	movf	?___ftneg+2,w
  5885  0764  00C9               	movwf	ftoa@f+2
  5886  0765                     l4957:	
  5887  0765  0020               	movlb	0	; select bank0
  5888  0766  0847               	movf	ftoa@f,w
  5889  0767  00B0               	movwf	?___fttol
  5890  0768  0848               	movf	ftoa@f+1,w
  5891  0769  00B1               	movwf	?___fttol+1
  5892  076A  0849               	movf	ftoa@f+2,w
  5893  076B  00B2               	movwf	?___fttol+2
  5894  076C  318E  26E5  3187   	fcall	___fttol
  5895  076F  0020               	movlb	0	; select bank0
  5896  0770  0833               	movf	?___fttol+3,w
  5897  0771  00D3               	movwf	ftoa@l+3
  5898  0772  0832               	movf	?___fttol+2,w
  5899  0773  00D2               	movwf	ftoa@l+2
  5900  0774  0831               	movf	?___fttol+1,w
  5901  0775  00D1               	movwf	ftoa@l+1
  5902  0776  0830               	movf	?___fttol,w
  5903  0777  00D0               	movwf	ftoa@l
  5904  0778  0853               	movf	ftoa@l+3,w
  5905  0779  00A3               	movwf	?___lltoft+3
  5906  077A  0852               	movf	ftoa@l+2,w
  5907  077B  00A2               	movwf	?___lltoft+2
  5908  077C  0851               	movf	ftoa@l+1,w
  5909  077D  00A1               	movwf	?___lltoft+1
  5910  077E  0850               	movf	ftoa@l,w
  5911  077F  00A0               	movwf	?___lltoft
  5912  0780  318A  221F  3187   	fcall	___lltoft
  5913  0783  0020               	movlb	0	; select bank0
  5914  0784  0820               	movf	?___lltoft,w
  5915  0785  00AA               	movwf	?___ftsub
  5916  0786  0821               	movf	?___lltoft+1,w
  5917  0787  00AB               	movwf	?___ftsub+1
  5918  0788  0822               	movf	?___lltoft+2,w
  5919  0789  00AC               	movwf	?___ftsub+2
  5920  078A  0847               	movf	ftoa@f,w
  5921  078B  00AD               	movwf	?___ftsub+3
  5922  078C  0848               	movf	ftoa@f+1,w
  5923  078D  00AE               	movwf	?___ftsub+4
  5924  078E  0849               	movf	ftoa@f+2,w
  5925  078F  00AF               	movwf	?___ftsub+5
  5926  0790  3197  275D  3187   	fcall	___ftsub
  5927  0793  0020               	movlb	0	; select bank0
  5928  0794  082A               	movf	?___ftsub,w
  5929  0795  00C7               	movwf	ftoa@f
  5930  0796  082B               	movf	?___ftsub+1,w
  5931  0797  00C8               	movwf	ftoa@f+1
  5932  0798  082C               	movf	?___ftsub+2,w
  5933  0799  00C9               	movwf	ftoa@f+2
  5934  079A  0847               	movf	ftoa@f,w
  5935  079B  00A3               	movwf	?___ftmul+3
  5936  079C  0848               	movf	ftoa@f+1,w
  5937  079D  00A4               	movwf	?___ftmul+4
  5938  079E  0849               	movf	ftoa@f+2,w
  5939  079F  00A5               	movwf	?___ftmul+5
  5940  07A0  3024               	movlw	36
  5941  07A1  00A0               	movwf	?___ftmul
  5942  07A2  3074               	movlw	116
  5943  07A3  00A1               	movwf	?___ftmul+1
  5944  07A4  3049               	movlw	73
  5945  07A5  00A2               	movwf	?___ftmul+2
  5946  07A6  3186  267E  3187   	fcall	___ftmul
  5947  07A9  0020               	movlb	0	; select bank0
  5948  07AA  0820               	movf	?___ftmul,w
  5949  07AB  00B0               	movwf	?___fttol
  5950  07AC  0821               	movf	?___ftmul+1,w
  5951  07AD  00B1               	movwf	?___fttol+1
  5952  07AE  0822               	movf	?___ftmul+2,w
  5953  07AF  00B2               	movwf	?___fttol+2
  5954  07B0  318E  26E5  3187   	fcall	___fttol
  5955  07B3  0020               	movlb	0	; select bank0
  5956  07B4  0833               	movf	?___fttol+3,w
  5957  07B5  00CF               	movwf	ftoa@rem+3
  5958  07B6  0832               	movf	?___fttol+2,w
  5959  07B7  00CE               	movwf	ftoa@rem+2
  5960  07B8  0831               	movf	?___fttol+1,w
  5961  07B9  00CD               	movwf	ftoa@rem+1
  5962  07BA  0830               	movf	?___fttol,w
  5963  07BB  00CC               	movwf	ftoa@rem
  5964  07BC  302E               	movlw	(STR_1| (0+32768))& (0+255)
  5965  07BD  00CB               	movwf	??_ftoa
  5966  07BE  084B               	movf	??_ftoa,w
  5967  07BF  00AD               	movwf	?_sprintf
  5968  07C0  0853               	movf	ftoa@l+3,w
  5969  07C1  00B1               	movwf	?_sprintf+4
  5970  07C2  0852               	movf	ftoa@l+2,w
  5971  07C3  00B0               	movwf	?_sprintf+3
  5972  07C4  0851               	movf	ftoa@l+1,w
  5973  07C5  00AF               	movwf	?_sprintf+2
  5974  07C6  0850               	movf	ftoa@l,w
  5975  07C7  00AE               	movwf	?_sprintf+1
  5976  07C8  084F               	movf	ftoa@rem+3,w
  5977  07C9  00B5               	movwf	?_sprintf+8
  5978  07CA  084E               	movf	ftoa@rem+2,w
  5979  07CB  00B4               	movwf	?_sprintf+7
  5980  07CC  084D               	movf	ftoa@rem+1,w
  5981  07CD  00B3               	movwf	?_sprintf+6
  5982  07CE  084C               	movf	ftoa@rem,w
  5983  07CF  00B2               	movwf	?_sprintf+5
  5984  07D0  0854               	movf	ftoa@cp,w
  5985  07D1  3182  22EE         	fcall	_sprintf
  5986  07D3  3020               	movlw	ftoa@buf& (0+255)
  5987  07D4  0008               	return
  5988  07D5                     __end_of_ftoa:	
  5989                           
  5990                           	psect	text24
  5991  0A1F                     __ptext24:	
  5992 ;; *************** function ___lltoft *****************
  5993 ;; Defined at:
  5994 ;;		line 36 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lltoft.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  c               4    0[BANK0 ] unsigned long 
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;  exp             1   10[COMMON] unsigned char 
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  3    0[BANK0 ] float 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0, pclath, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6008 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;Total ram usage:        6 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    3
  6015 ;; This function calls:
  6016 ;;		___ftpack
  6017 ;; This function is called by:
  6018 ;;		_ftoa
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function ___lltoft
  6024  0A1F                     ___lltoft:	
  6025                           
  6026                           ;incstack = 0
  6027                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6028  0A1F  308E               	movlw	142
  6029  0A20  00F9               	movwf	??___lltoft
  6030  0A21  0879               	movf	??___lltoft,w
  6031  0A22  00FA               	movwf	___lltoft@exp
  6032  0A23                     l5275:	
  6033  0A23  30FF               	movlw	255
  6034  0A24  0020               	movlb	0	; select bank0
  6035  0A25  0523               	andwf	___lltoft@c+3,w
  6036  0A26  1903               	btfsc	3,2
  6037  0A27  2A35               	goto	l5277
  6038  0A28  3001               	movlw	1
  6039  0A29                     u5665:	
  6040  0A29  0020               	movlb	0	; select bank0
  6041  0A2A  36A3               	lsrf	___lltoft@c+3,f
  6042  0A2B  0CA2               	rrf	___lltoft@c+2,f
  6043  0A2C  0CA1               	rrf	___lltoft@c+1,f
  6044  0A2D  0CA0               	rrf	___lltoft@c,f
  6045  0A2E  0B89               	decfsz	9,f
  6046  0A2F  2A29               	goto	u5665
  6047  0A30  3001               	movlw	1
  6048  0A31  00F9               	movwf	??___lltoft
  6049  0A32  0879               	movf	??___lltoft,w
  6050  0A33  07FA               	addwf	___lltoft@exp,f
  6051  0A34  2A23               	goto	l5275
  6052  0A35                     l5277:	
  6053  0A35  0820               	movf	___lltoft@c,w
  6054  0A36  00F1               	movwf	?___ftpack
  6055  0A37  0821               	movf	___lltoft@c+1,w
  6056  0A38  00F2               	movwf	?___ftpack+1
  6057  0A39  0822               	movf	___lltoft@c+2,w
  6058  0A3A  00F3               	movwf	?___ftpack+2
  6059  0A3B  087A               	movf	___lltoft@exp,w
  6060  0A3C  00F9               	movwf	??___lltoft
  6061  0A3D  0879               	movf	??___lltoft,w
  6062  0A3E  00F4               	movwf	?___ftpack+3
  6063  0A3F  01F5               	clrf	?___ftpack+4
  6064  0A40  318E  260F         	fcall	___ftpack
  6065  0A42  0871               	movf	?___ftpack,w
  6066  0A43  0020               	movlb	0	; select bank0
  6067  0A44  00A0               	movwf	?___lltoft
  6068  0A45  0872               	movf	?___ftpack+1,w
  6069  0A46  00A1               	movwf	?___lltoft+1
  6070  0A47  0873               	movf	?___ftpack+2,w
  6071  0A48  00A2               	movwf	?___lltoft+2
  6072  0A49  0008               	return
  6073  0A4A                     __end_of___lltoft:	
  6074                           
  6075                           	psect	text25
  6076  0EE5                     __ptext25:	
  6077 ;; *************** function ___fttol *****************
  6078 ;; Defined at:
  6079 ;;		line 45 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\fttol.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  f1              3   16[BANK0 ] float 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  lval            4   25[BANK0 ] unsigned long 
  6084 ;;  exp1            1   29[BANK0 ] unsigned char 
  6085 ;;  sign1           1   24[BANK0 ] unsigned char 
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  4   16[BANK0 ] long 
  6088 ;; Registers used:
  6089 ;;		wreg, status,2, status,0
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6095 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;Total ram usage:       14 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:    2
  6102 ;; This function calls:
  6103 ;;		Nothing
  6104 ;; This function is called by:
  6105 ;;		_ftoa
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           
  6110                           ;psect for function ___fttol
  6111  0EE5                     ___fttol:	
  6112                           
  6113                           ;incstack = 0
  6114                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6115  0EE5  0020               	movlb	0	; select bank0
  6116  0EE6  0830               	movf	___fttol@f1,w
  6117  0EE7  00B4               	movwf	??___fttol
  6118  0EE8  0831               	movf	___fttol@f1+1,w
  6119  0EE9  00B5               	movwf	??___fttol+1
  6120  0EEA  0832               	movf	___fttol@f1+2,w
  6121  0EEB  00B6               	movwf	??___fttol+2
  6122  0EEC  1003               	clrc
  6123  0EED  0D35               	rlf	??___fttol+1,w
  6124  0EEE  0D36               	rlf	??___fttol+2,w
  6125  0EEF  00B7               	movwf	??___fttol+3
  6126  0EF0  0837               	movf	??___fttol+3,w
  6127  0EF1  00BD               	movwf	___fttol@exp1
  6128  0EF2  08BD               	movf	___fttol@exp1,f
  6129  0EF3  1D03               	skipz
  6130  0EF4  2EFE               	goto	l4199
  6131  0EF5  3000               	movlw	0
  6132  0EF6  00B3               	movwf	?___fttol+3
  6133  0EF7  3000               	movlw	0
  6134  0EF8  00B2               	movwf	?___fttol+2
  6135  0EF9  3000               	movlw	0
  6136  0EFA  00B1               	movwf	?___fttol+1
  6137  0EFB  3000               	movlw	0
  6138  0EFC  00B0               	movwf	?___fttol
  6139  0EFD  0008               	return
  6140  0EFE                     l4199:	
  6141  0EFE  0830               	movf	___fttol@f1,w
  6142  0EFF  00B4               	movwf	??___fttol
  6143  0F00  0831               	movf	___fttol@f1+1,w
  6144  0F01  00B5               	movwf	??___fttol+1
  6145  0F02  0832               	movf	___fttol@f1+2,w
  6146  0F03  00B6               	movwf	??___fttol+2
  6147  0F04  3017               	movlw	23
  6148  0F05                     u4025:	
  6149  0F05  36B6               	lsrf	??___fttol+2,f
  6150  0F06  0CB5               	rrf	??___fttol+1,f
  6151  0F07  0CB4               	rrf	??___fttol,f
  6152  0F08  0B89               	decfsz	9,f
  6153  0F09  2F05               	goto	u4025
  6154  0F0A  0834               	movf	??___fttol,w
  6155  0F0B  00B7               	movwf	??___fttol+3
  6156  0F0C  0837               	movf	??___fttol+3,w
  6157  0F0D  00B8               	movwf	___fttol@sign1
  6158  0F0E  17B1               	bsf	___fttol@f1+1,7
  6159  0F0F  30FF               	movlw	255
  6160  0F10  05B0               	andwf	___fttol@f1,f
  6161  0F11  30FF               	movlw	255
  6162  0F12  05B1               	andwf	___fttol@f1+1,f
  6163  0F13  3000               	movlw	0
  6164  0F14  05B2               	andwf	___fttol@f1+2,f
  6165  0F15  0830               	movf	___fttol@f1,w
  6166  0F16  00B9               	movwf	___fttol@lval
  6167  0F17  0831               	movf	___fttol@f1+1,w
  6168  0F18  00BA               	movwf	___fttol@lval+1
  6169  0F19  0832               	movf	___fttol@f1+2,w
  6170  0F1A  00BB               	movwf	___fttol@lval+2
  6171  0F1B  01BC               	clrf	___fttol@lval+3
  6172  0F1C  308E               	movlw	142
  6173  0F1D  02BD               	subwf	___fttol@exp1,f
  6174  0F1E  1FBD               	btfss	___fttol@exp1,7
  6175  0F1F  2F3C               	goto	l4219
  6176  0F20  083D               	movf	___fttol@exp1,w
  6177  0F21  3A80               	xorlw	128
  6178  0F22  3E8F               	addlw	143
  6179  0F23  1803               	skipnc
  6180  0F24  2F2E               	goto	l4217
  6181  0F25  3000               	movlw	0
  6182  0F26  00B3               	movwf	?___fttol+3
  6183  0F27  3000               	movlw	0
  6184  0F28  00B2               	movwf	?___fttol+2
  6185  0F29  3000               	movlw	0
  6186  0F2A  00B1               	movwf	?___fttol+1
  6187  0F2B  3000               	movlw	0
  6188  0F2C  00B0               	movwf	?___fttol
  6189  0F2D  0008               	return
  6190  0F2E                     l4217:	
  6191  0F2E  3001               	movlw	1
  6192  0F2F                     u4055:	
  6193  0F2F  36BC               	lsrf	___fttol@lval+3,f
  6194  0F30  0CBB               	rrf	___fttol@lval+2,f
  6195  0F31  0CBA               	rrf	___fttol@lval+1,f
  6196  0F32  0CB9               	rrf	___fttol@lval,f
  6197  0F33  0B89               	decfsz	9,f
  6198  0F34  2F2F               	goto	u4055
  6199  0F35  3001               	movlw	1
  6200  0F36  00B4               	movwf	??___fttol
  6201  0F37  0834               	movf	??___fttol,w
  6202  0F38  07BD               	addwf	___fttol@exp1,f
  6203  0F39  1903               	btfsc	3,2
  6204  0F3A  2F55               	goto	l4229
  6205  0F3B  2F2E               	goto	l4217
  6206  0F3C                     l4219:	
  6207  0F3C  3018               	movlw	24
  6208  0F3D  023D               	subwf	___fttol@exp1,w
  6209  0F3E  1C03               	skipc
  6210  0F3F  2F52               	goto	l4227
  6211  0F40  3000               	movlw	0
  6212  0F41  00B3               	movwf	?___fttol+3
  6213  0F42  3000               	movlw	0
  6214  0F43  00B2               	movwf	?___fttol+2
  6215  0F44  3000               	movlw	0
  6216  0F45  00B1               	movwf	?___fttol+1
  6217  0F46  3000               	movlw	0
  6218  0F47  00B0               	movwf	?___fttol
  6219  0F48  0008               	return
  6220  0F49                     l4225:	
  6221  0F49  3001               	movlw	1
  6222  0F4A                     u4085:	
  6223  0F4A  35B9               	lslf	___fttol@lval,f
  6224  0F4B  0DBA               	rlf	___fttol@lval+1,f
  6225  0F4C  0DBB               	rlf	___fttol@lval+2,f
  6226  0F4D  0DBC               	rlf	___fttol@lval+3,f
  6227  0F4E  0B89               	decfsz	9,f
  6228  0F4F  2F4A               	goto	u4085
  6229  0F50  3001               	movlw	1
  6230  0F51  02BD               	subwf	___fttol@exp1,f
  6231  0F52                     l4227:	
  6232  0F52  08BD               	movf	___fttol@exp1,f
  6233  0F53  1D03               	skipz
  6234  0F54  2F49               	goto	l4225
  6235  0F55                     l4229:	
  6236  0F55  0838               	movf	___fttol@sign1,w
  6237  0F56  1903               	btfsc	3,2
  6238  0F57  2F63               	goto	l4233
  6239  0F58  09B9               	comf	___fttol@lval,f
  6240  0F59  09BA               	comf	___fttol@lval+1,f
  6241  0F5A  09BB               	comf	___fttol@lval+2,f
  6242  0F5B  09BC               	comf	___fttol@lval+3,f
  6243  0F5C  0AB9               	incf	___fttol@lval,f
  6244  0F5D  1903               	skipnz
  6245  0F5E  0ABA               	incf	___fttol@lval+1,f
  6246  0F5F  1903               	skipnz
  6247  0F60  0ABB               	incf	___fttol@lval+2,f
  6248  0F61  1903               	skipnz
  6249  0F62  0ABC               	incf	___fttol@lval+3,f
  6250  0F63                     l4233:	
  6251  0F63  083C               	movf	___fttol@lval+3,w
  6252  0F64  00B3               	movwf	?___fttol+3
  6253  0F65  083B               	movf	___fttol@lval+2,w
  6254  0F66  00B2               	movwf	?___fttol+2
  6255  0F67  083A               	movf	___fttol@lval+1,w
  6256  0F68  00B1               	movwf	?___fttol+1
  6257  0F69  0839               	movf	___fttol@lval,w
  6258  0F6A  00B0               	movwf	?___fttol
  6259  0F6B  0008               	return
  6260  0F6C                     __end_of___fttol:	
  6261                           
  6262                           	psect	text26
  6263  175D                     __ptext26:	
  6264 ;; *************** function ___ftsub *****************
  6265 ;; Defined at:
  6266 ;;		line 17 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftsub.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  f2              3   10[BANK0 ] float 
  6269 ;;  f1              3   13[BANK0 ] float 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  3   10[BANK0 ] float 
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0, pclath, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6281 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;Total ram usage:        6 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    4
  6288 ;; This function calls:
  6289 ;;		___ftadd
  6290 ;; This function is called by:
  6291 ;;		_ftoa
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           
  6296                           ;psect for function ___ftsub
  6297  175D                     ___ftsub:	
  6298                           
  6299                           ;incstack = 0
  6300                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6301  175D  3080               	movlw	128
  6302  175E  0020               	movlb	0	; select bank0
  6303  175F  06AC               	xorwf	___ftsub@f2+2,f
  6304  1760  082D               	movf	___ftsub@f1,w
  6305  1761  00A0               	movwf	?___ftadd
  6306  1762  082E               	movf	___ftsub@f1+1,w
  6307  1763  00A1               	movwf	?___ftadd+1
  6308  1764  082F               	movf	___ftsub@f1+2,w
  6309  1765  00A2               	movwf	?___ftadd+2
  6310  1766  082A               	movf	___ftsub@f2,w
  6311  1767  00A3               	movwf	?___ftadd+3
  6312  1768  082B               	movf	___ftsub@f2+1,w
  6313  1769  00A4               	movwf	?___ftadd+4
  6314  176A  082C               	movf	___ftsub@f2+2,w
  6315  176B  00A5               	movwf	?___ftadd+5
  6316  176C  3184  24CA         	fcall	___ftadd
  6317  176E  0020               	movlb	0	; select bank0
  6318  176F  0820               	movf	?___ftadd,w
  6319  1770  00AA               	movwf	?___ftsub
  6320  1771  0821               	movf	?___ftadd+1,w
  6321  1772  00AB               	movwf	?___ftsub+1
  6322  1773  0822               	movf	?___ftadd+2,w
  6323  1774  00AC               	movwf	?___ftsub+2
  6324  1775  0008               	return
  6325  1776                     __end_of___ftsub:	
  6326                           
  6327                           	psect	text27
  6328  04CA                     __ptext27:	
  6329 ;; *************** function ___ftadd *****************
  6330 ;; Defined at:
  6331 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  f1              3    0[BANK0 ] float 
  6334 ;;  f2              3    3[BANK0 ] float 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;  exp1            1   11[COMMON] unsigned char 
  6337 ;;  exp2            1   10[COMMON] unsigned char 
  6338 ;;  sign            1    9[COMMON] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  3    0[BANK0 ] float 
  6341 ;; Registers used:
  6342 ;;		wreg, status,2, status,0, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6348 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;Total ram usage:       13 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    3
  6355 ;; This function calls:
  6356 ;;		___ftpack
  6357 ;; This function is called by:
  6358 ;;		___ftsub
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           
  6363                           ;psect for function ___ftadd
  6364  04CA                     ___ftadd:	
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6368  04CA  0020               	movlb	0	; select bank0
  6369  04CB  0820               	movf	___ftadd@f1,w
  6370  04CC  00A6               	movwf	??___ftadd
  6371  04CD  0821               	movf	___ftadd@f1+1,w
  6372  04CE  00A7               	movwf	??___ftadd+1
  6373  04CF  0822               	movf	___ftadd@f1+2,w
  6374  04D0  00A8               	movwf	??___ftadd+2
  6375  04D1  1003               	clrc
  6376  04D2  0D27               	rlf	??___ftadd+1,w
  6377  04D3  0D28               	rlf	??___ftadd+2,w
  6378  04D4  00A9               	movwf	??___ftadd+3
  6379  04D5  0829               	movf	??___ftadd+3,w
  6380  04D6  00FB               	movwf	___ftadd@exp1
  6381  04D7  0823               	movf	___ftadd@f2,w
  6382  04D8  00A6               	movwf	??___ftadd
  6383  04D9  0824               	movf	___ftadd@f2+1,w
  6384  04DA  00A7               	movwf	??___ftadd+1
  6385  04DB  0825               	movf	___ftadd@f2+2,w
  6386  04DC  00A8               	movwf	??___ftadd+2
  6387  04DD  1003               	clrc
  6388  04DE  0D27               	rlf	??___ftadd+1,w
  6389  04DF  0D28               	rlf	??___ftadd+2,w
  6390  04E0  00A9               	movwf	??___ftadd+3
  6391  04E1  0829               	movf	??___ftadd+3,w
  6392  04E2  00FA               	movwf	___ftadd@exp2
  6393  04E3  087B               	movf	___ftadd@exp1,w
  6394  04E4  1903               	btfsc	3,2
  6395  04E5  2CF2               	goto	l5117
  6396  04E6  087A               	movf	___ftadd@exp2,w
  6397  04E7  027B               	subwf	___ftadd@exp1,w
  6398  04E8  1803               	skipnc
  6399  04E9  2CF9               	goto	l5121
  6400  04EA  037B               	decf	___ftadd@exp1,w
  6401  04EB  3AFF               	xorlw	255
  6402  04EC  077A               	addwf	___ftadd@exp2,w
  6403  04ED  00A6               	movwf	??___ftadd
  6404  04EE  3019               	movlw	25
  6405  04EF  0226               	subwf	??___ftadd,w
  6406  04F0  1C03               	skipc
  6407  04F1  2CF9               	goto	l5121
  6408  04F2                     l5117:	
  6409  04F2  0823               	movf	___ftadd@f2,w
  6410  04F3  00A0               	movwf	?___ftadd
  6411  04F4  0824               	movf	___ftadd@f2+1,w
  6412  04F5  00A1               	movwf	?___ftadd+1
  6413  04F6  0825               	movf	___ftadd@f2+2,w
  6414  04F7  00A2               	movwf	?___ftadd+2
  6415  04F8  0008               	return
  6416  04F9                     l5121:	
  6417  04F9  087A               	movf	___ftadd@exp2,w
  6418  04FA  1903               	btfsc	3,2
  6419  04FB  0008               	return
  6420  04FC  087B               	movf	___ftadd@exp1,w
  6421  04FD  027A               	subwf	___ftadd@exp2,w
  6422  04FE  1803               	skipnc
  6423  04FF  2D08               	goto	l5127
  6424  0500  037A               	decf	___ftadd@exp2,w
  6425  0501  3AFF               	xorlw	255
  6426  0502  077B               	addwf	___ftadd@exp1,w
  6427  0503  00A6               	movwf	??___ftadd
  6428  0504  3019               	movlw	25
  6429  0505  0226               	subwf	??___ftadd,w
  6430  0506  1803               	btfsc	3,0
  6431  0507  0008               	return
  6432  0508                     l5127:	
  6433  0508  3006               	movlw	6
  6434  0509  00A6               	movwf	??___ftadd
  6435  050A  0826               	movf	??___ftadd,w
  6436  050B  00F9               	movwf	___ftadd@sign
  6437  050C  1BA2               	btfsc	___ftadd@f1+2,7
  6438  050D  17F9               	bsf	___ftadd@sign,7
  6439  050E  1BA5               	btfsc	___ftadd@f2+2,7
  6440  050F  1779               	bsf	___ftadd@sign,6
  6441  0510  17A1               	bsf	___ftadd@f1+1,7
  6442  0511  30FF               	movlw	255
  6443  0512  05A0               	andwf	___ftadd@f1,f
  6444  0513  30FF               	movlw	255
  6445  0514  05A1               	andwf	___ftadd@f1+1,f
  6446  0515  3000               	movlw	0
  6447  0516  05A2               	andwf	___ftadd@f1+2,f
  6448  0517  17A4               	bsf	___ftadd@f2+1,7
  6449  0518  30FF               	movlw	255
  6450  0519  05A3               	andwf	___ftadd@f2,f
  6451  051A  30FF               	movlw	255
  6452  051B  05A4               	andwf	___ftadd@f2+1,f
  6453  051C  3000               	movlw	0
  6454  051D  05A5               	andwf	___ftadd@f2+2,f
  6455  051E  087A               	movf	___ftadd@exp2,w
  6456  051F  027B               	subwf	___ftadd@exp1,w
  6457  0520  1803               	skipnc
  6458  0521  2D44               	goto	l5149
  6459  0522                     l5139:	
  6460  0522  3001               	movlw	1
  6461  0523                     u5375:	
  6462  0523  35A3               	lslf	___ftadd@f2,f
  6463  0524  0DA4               	rlf	___ftadd@f2+1,f
  6464  0525  0DA5               	rlf	___ftadd@f2+2,f
  6465  0526  0B89               	decfsz	9,f
  6466  0527  2D23               	goto	u5375
  6467  0528  3001               	movlw	1
  6468  0529  02FA               	subwf	___ftadd@exp2,f
  6469  052A  087A               	movf	___ftadd@exp2,w
  6470  052B  067B               	xorwf	___ftadd@exp1,w
  6471  052C  1903               	skipnz
  6472  052D  2D3F               	goto	l5147
  6473  052E  3001               	movlw	1
  6474  052F  02F9               	subwf	___ftadd@sign,f
  6475  0530  0879               	movf	___ftadd@sign,w
  6476  0531  3907               	andlw	7
  6477  0532  1903               	btfsc	3,2
  6478  0533  2D3F               	goto	l5147
  6479  0534  2D22               	goto	l5139
  6480  0535                     l5145:	
  6481  0535  3001               	movlw	1
  6482  0536                     u5405:	
  6483  0536  36A2               	lsrf	___ftadd@f1+2,f
  6484  0537  0CA1               	rrf	___ftadd@f1+1,f
  6485  0538  0CA0               	rrf	___ftadd@f1,f
  6486  0539  0B89               	decfsz	9,f
  6487  053A  2D36               	goto	u5405
  6488  053B  3001               	movlw	1
  6489  053C  00A6               	movwf	??___ftadd
  6490  053D  0826               	movf	??___ftadd,w
  6491  053E  07FB               	addwf	___ftadd@exp1,f
  6492  053F                     l5147:	
  6493  053F  087B               	movf	___ftadd@exp1,w
  6494  0540  067A               	xorwf	___ftadd@exp2,w
  6495  0541  1903               	btfsc	3,2
  6496  0542  2D69               	goto	l893
  6497  0543  2D35               	goto	l5145
  6498  0544                     l5149:	
  6499  0544  087B               	movf	___ftadd@exp1,w
  6500  0545  027A               	subwf	___ftadd@exp2,w
  6501  0546  1803               	skipnc
  6502  0547  2D69               	goto	l893
  6503  0548                     l5151:	
  6504  0548  3001               	movlw	1
  6505  0549                     u5435:	
  6506  0549  35A0               	lslf	___ftadd@f1,f
  6507  054A  0DA1               	rlf	___ftadd@f1+1,f
  6508  054B  0DA2               	rlf	___ftadd@f1+2,f
  6509  054C  0B89               	decfsz	9,f
  6510  054D  2D49               	goto	u5435
  6511  054E  3001               	movlw	1
  6512  054F  02FB               	subwf	___ftadd@exp1,f
  6513  0550  087A               	movf	___ftadd@exp2,w
  6514  0551  067B               	xorwf	___ftadd@exp1,w
  6515  0552  1903               	skipnz
  6516  0553  2D65               	goto	l5159
  6517  0554  3001               	movlw	1
  6518  0555  02F9               	subwf	___ftadd@sign,f
  6519  0556  0879               	movf	___ftadd@sign,w
  6520  0557  3907               	andlw	7
  6521  0558  1903               	btfsc	3,2
  6522  0559  2D65               	goto	l5159
  6523  055A  2D48               	goto	l5151
  6524  055B                     l5157:	
  6525  055B  3001               	movlw	1
  6526  055C                     u5465:	
  6527  055C  36A5               	lsrf	___ftadd@f2+2,f
  6528  055D  0CA4               	rrf	___ftadd@f2+1,f
  6529  055E  0CA3               	rrf	___ftadd@f2,f
  6530  055F  0B89               	decfsz	9,f
  6531  0560  2D5C               	goto	u5465
  6532  0561  3001               	movlw	1
  6533  0562  00A6               	movwf	??___ftadd
  6534  0563  0826               	movf	??___ftadd,w
  6535  0564  07FA               	addwf	___ftadd@exp2,f
  6536  0565                     l5159:	
  6537  0565  087B               	movf	___ftadd@exp1,w
  6538  0566  067A               	xorwf	___ftadd@exp2,w
  6539  0567  1D03               	skipz
  6540  0568  2D5B               	goto	l5157
  6541  0569                     l893:	
  6542  0569  1FF9               	btfss	___ftadd@sign,7
  6543  056A  2D7B               	goto	l5163
  6544  056B  30FF               	movlw	255
  6545  056C  06A0               	xorwf	___ftadd@f1,f
  6546  056D  30FF               	movlw	255
  6547  056E  06A1               	xorwf	___ftadd@f1+1,f
  6548  056F  30FF               	movlw	255
  6549  0570  06A2               	xorwf	___ftadd@f1+2,f
  6550  0571  3001               	movlw	1
  6551  0572  07A0               	addwf	___ftadd@f1,f
  6552  0573  3000               	movlw	0
  6553  0574  1803               	skipnc
  6554  0575  3001               	movlw	1
  6555  0576  07A1               	addwf	___ftadd@f1+1,f
  6556  0577  3000               	movlw	0
  6557  0578  1803               	skipnc
  6558  0579  3001               	movlw	1
  6559  057A  07A2               	addwf	___ftadd@f1+2,f
  6560  057B                     l5163:	
  6561  057B  1F79               	btfss	___ftadd@sign,6
  6562  057C  2D8D               	goto	l5167
  6563  057D  30FF               	movlw	255
  6564  057E  06A3               	xorwf	___ftadd@f2,f
  6565  057F  30FF               	movlw	255
  6566  0580  06A4               	xorwf	___ftadd@f2+1,f
  6567  0581  30FF               	movlw	255
  6568  0582  06A5               	xorwf	___ftadd@f2+2,f
  6569  0583  3001               	movlw	1
  6570  0584  07A3               	addwf	___ftadd@f2,f
  6571  0585  3000               	movlw	0
  6572  0586  1803               	skipnc
  6573  0587  3001               	movlw	1
  6574  0588  07A4               	addwf	___ftadd@f2+1,f
  6575  0589  3000               	movlw	0
  6576  058A  1803               	skipnc
  6577  058B  3001               	movlw	1
  6578  058C  07A5               	addwf	___ftadd@f2+2,f
  6579  058D                     l5167:	
  6580  058D  01F9               	clrf	___ftadd@sign
  6581  058E  0820               	movf	___ftadd@f1,w
  6582  058F  07A3               	addwf	___ftadd@f2,f
  6583  0590  0821               	movf	___ftadd@f1+1,w
  6584  0591  3DA4               	addwfc	___ftadd@f2+1,f
  6585  0592  0822               	movf	___ftadd@f1+2,w
  6586  0593  3DA5               	addwfc	___ftadd@f2+2,f
  6587  0594  1FA5               	btfss	___ftadd@f2+2,7
  6588  0595  2DA8               	goto	l5177
  6589  0596  30FF               	movlw	255
  6590  0597  06A3               	xorwf	___ftadd@f2,f
  6591  0598  30FF               	movlw	255
  6592  0599  06A4               	xorwf	___ftadd@f2+1,f
  6593  059A  30FF               	movlw	255
  6594  059B  06A5               	xorwf	___ftadd@f2+2,f
  6595  059C  3001               	movlw	1
  6596  059D  07A3               	addwf	___ftadd@f2,f
  6597  059E  3000               	movlw	0
  6598  059F  1803               	skipnc
  6599  05A0  3001               	movlw	1
  6600  05A1  07A4               	addwf	___ftadd@f2+1,f
  6601  05A2  3000               	movlw	0
  6602  05A3  1803               	skipnc
  6603  05A4  3001               	movlw	1
  6604  05A5  07A5               	addwf	___ftadd@f2+2,f
  6605  05A6  01F9               	clrf	___ftadd@sign
  6606  05A7  0AF9               	incf	___ftadd@sign,f
  6607  05A8                     l5177:	
  6608  05A8  0823               	movf	___ftadd@f2,w
  6609  05A9  00F1               	movwf	?___ftpack
  6610  05AA  0824               	movf	___ftadd@f2+1,w
  6611  05AB  00F2               	movwf	?___ftpack+1
  6612  05AC  0825               	movf	___ftadd@f2+2,w
  6613  05AD  00F3               	movwf	?___ftpack+2
  6614  05AE  087B               	movf	___ftadd@exp1,w
  6615  05AF  00A6               	movwf	??___ftadd
  6616  05B0  0826               	movf	??___ftadd,w
  6617  05B1  00F4               	movwf	?___ftpack+3
  6618  05B2  0879               	movf	___ftadd@sign,w
  6619  05B3  00A7               	movwf	??___ftadd+1
  6620  05B4  0827               	movf	??___ftadd+1,w
  6621  05B5  00F5               	movwf	?___ftpack+4
  6622  05B6  318E  260F         	fcall	___ftpack
  6623  05B8  0871               	movf	?___ftpack,w
  6624  05B9  0020               	movlb	0	; select bank0
  6625  05BA  00A0               	movwf	?___ftadd
  6626  05BB  0872               	movf	?___ftpack+1,w
  6627  05BC  00A1               	movwf	?___ftadd+1
  6628  05BD  0873               	movf	?___ftpack+2,w
  6629  05BE  00A2               	movwf	?___ftadd+2
  6630  05BF  0008               	return
  6631  05C0                     __end_of___ftadd:	
  6632                           
  6633                           	psect	text28
  6634  160A                     __ptext28:	
  6635 ;; *************** function ___ftneg *****************
  6636 ;; Defined at:
  6637 ;;		line 16 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftneg.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;  f1              3    1[COMMON] float 
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  3    1[COMMON] float 
  6644 ;; Registers used:
  6645 ;;		wreg
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6651 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;Total ram usage:        3 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:    2
  6658 ;; This function calls:
  6659 ;;		Nothing
  6660 ;; This function is called by:
  6661 ;;		_ftoa
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function ___ftneg
  6667  160A                     ___ftneg:	
  6668                           
  6669                           ;incstack = 0
  6670                           ; Regs used in ___ftneg: [wreg]
  6671  160A  0873               	movf	___ftneg@f1+2,w
  6672  160B  0472               	iorwf	___ftneg@f1+1,w
  6673  160C  0471               	iorwf	___ftneg@f1,w
  6674  160D  1903               	skipnz
  6675  160E  0008               	return
  6676  160F  3080               	movlw	128
  6677  1610  06F3               	xorwf	___ftneg@f1+2,f
  6678  1611  0008               	return
  6679  1612                     __end_of___ftneg:	
  6680                           
  6681                           	psect	text29
  6682  067E                     __ptext29:	
  6683 ;; *************** function ___ftmul *****************
  6684 ;; Defined at:
  6685 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  6686 ;; Parameters:    Size  Location     Type
  6687 ;;  f1              3    0[BANK0 ] float 
  6688 ;;  f2              3    3[BANK0 ] float 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6691 ;;  sign            1   15[BANK0 ] unsigned char 
  6692 ;;  cntr            1   14[BANK0 ] unsigned char 
  6693 ;;  exp             1   10[BANK0 ] unsigned char 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  3    0[BANK0 ] float 
  6696 ;; Registers used:
  6697 ;;		wreg, status,2, status,0, pclath, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6703 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;Total ram usage:       16 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    3
  6710 ;; This function calls:
  6711 ;;		___ftpack
  6712 ;; This function is called by:
  6713 ;;		_ftoa
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           
  6718                           ;psect for function ___ftmul
  6719  067E                     ___ftmul:	
  6720                           
  6721                           ;incstack = 0
  6722                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6723  067E  0020               	movlb	0	; select bank0
  6724  067F  0820               	movf	___ftmul@f1,w
  6725  0680  00A6               	movwf	??___ftmul
  6726  0681  0821               	movf	___ftmul@f1+1,w
  6727  0682  00A7               	movwf	??___ftmul+1
  6728  0683  0822               	movf	___ftmul@f1+2,w
  6729  0684  00A8               	movwf	??___ftmul+2
  6730  0685  1003               	clrc
  6731  0686  0D27               	rlf	??___ftmul+1,w
  6732  0687  0D28               	rlf	??___ftmul+2,w
  6733  0688  00A9               	movwf	??___ftmul+3
  6734  0689  0829               	movf	??___ftmul+3,w
  6735  068A  00AA               	movwf	___ftmul@exp
  6736  068B  08AA               	movf	___ftmul@exp,f
  6737  068C  1D03               	skipz
  6738  068D  2E95               	goto	l5187
  6739  068E  3000               	movlw	0
  6740  068F  00A0               	movwf	?___ftmul
  6741  0690  3000               	movlw	0
  6742  0691  00A1               	movwf	?___ftmul+1
  6743  0692  3000               	movlw	0
  6744  0693  00A2               	movwf	?___ftmul+2
  6745  0694  0008               	return
  6746  0695                     l5187:	
  6747  0695  0823               	movf	___ftmul@f2,w
  6748  0696  00A6               	movwf	??___ftmul
  6749  0697  0824               	movf	___ftmul@f2+1,w
  6750  0698  00A7               	movwf	??___ftmul+1
  6751  0699  0825               	movf	___ftmul@f2+2,w
  6752  069A  00A8               	movwf	??___ftmul+2
  6753  069B  1003               	clrc
  6754  069C  0D27               	rlf	??___ftmul+1,w
  6755  069D  0D28               	rlf	??___ftmul+2,w
  6756  069E  00A9               	movwf	??___ftmul+3
  6757  069F  0829               	movf	??___ftmul+3,w
  6758  06A0  00AF               	movwf	___ftmul@sign
  6759  06A1  08AF               	movf	___ftmul@sign,f
  6760  06A2  1D03               	skipz
  6761  06A3  2EAB               	goto	l5193
  6762  06A4  3000               	movlw	0
  6763  06A5  00A0               	movwf	?___ftmul
  6764  06A6  3000               	movlw	0
  6765  06A7  00A1               	movwf	?___ftmul+1
  6766  06A8  3000               	movlw	0
  6767  06A9  00A2               	movwf	?___ftmul+2
  6768  06AA  0008               	return
  6769  06AB                     l5193:	
  6770  06AB  082F               	movf	___ftmul@sign,w
  6771  06AC  3E7B               	addlw	123
  6772  06AD  00A6               	movwf	??___ftmul
  6773  06AE  0826               	movf	??___ftmul,w
  6774  06AF  07AA               	addwf	___ftmul@exp,f
  6775  06B0  0820               	movf	___ftmul@f1,w
  6776  06B1  00A6               	movwf	??___ftmul
  6777  06B2  0821               	movf	___ftmul@f1+1,w
  6778  06B3  00A7               	movwf	??___ftmul+1
  6779  06B4  0822               	movf	___ftmul@f1+2,w
  6780  06B5  00A8               	movwf	??___ftmul+2
  6781  06B6  3010               	movlw	16
  6782  06B7                     u5535:	
  6783  06B7  36A8               	lsrf	??___ftmul+2,f
  6784  06B8  0CA7               	rrf	??___ftmul+1,f
  6785  06B9  0CA6               	rrf	??___ftmul,f
  6786  06BA  0B89               	decfsz	9,f
  6787  06BB  2EB7               	goto	u5535
  6788  06BC  0826               	movf	??___ftmul,w
  6789  06BD  00A9               	movwf	??___ftmul+3
  6790  06BE  0829               	movf	??___ftmul+3,w
  6791  06BF  00AF               	movwf	___ftmul@sign
  6792  06C0  0823               	movf	___ftmul@f2,w
  6793  06C1  00A6               	movwf	??___ftmul
  6794  06C2  0824               	movf	___ftmul@f2+1,w
  6795  06C3  00A7               	movwf	??___ftmul+1
  6796  06C4  0825               	movf	___ftmul@f2+2,w
  6797  06C5  00A8               	movwf	??___ftmul+2
  6798  06C6  3010               	movlw	16
  6799  06C7                     u5545:	
  6800  06C7  36A8               	lsrf	??___ftmul+2,f
  6801  06C8  0CA7               	rrf	??___ftmul+1,f
  6802  06C9  0CA6               	rrf	??___ftmul,f
  6803  06CA  0B89               	decfsz	9,f
  6804  06CB  2EC7               	goto	u5545
  6805  06CC  0826               	movf	??___ftmul,w
  6806  06CD  00A9               	movwf	??___ftmul+3
  6807  06CE  0829               	movf	??___ftmul+3,w
  6808  06CF  06AF               	xorwf	___ftmul@sign,f
  6809  06D0  3080               	movlw	128
  6810  06D1  00A6               	movwf	??___ftmul
  6811  06D2  0826               	movf	??___ftmul,w
  6812  06D3  05AF               	andwf	___ftmul@sign,f
  6813  06D4  17A1               	bsf	___ftmul@f1+1,7
  6814  06D5  17A4               	bsf	___ftmul@f2+1,7
  6815  06D6  30FF               	movlw	255
  6816  06D7  05A3               	andwf	___ftmul@f2,f
  6817  06D8  30FF               	movlw	255
  6818  06D9  05A4               	andwf	___ftmul@f2+1,f
  6819  06DA  3000               	movlw	0
  6820  06DB  05A5               	andwf	___ftmul@f2+2,f
  6821  06DC  3000               	movlw	0
  6822  06DD  00AB               	movwf	___ftmul@f3_as_product
  6823  06DE  3000               	movlw	0
  6824  06DF  00AC               	movwf	___ftmul@f3_as_product+1
  6825  06E0  3000               	movlw	0
  6826  06E1  00AD               	movwf	___ftmul@f3_as_product+2
  6827  06E2  3007               	movlw	7
  6828  06E3  00A6               	movwf	??___ftmul
  6829  06E4  0826               	movf	??___ftmul,w
  6830  06E5  00AE               	movwf	___ftmul@cntr
  6831  06E6                     l5205:	
  6832  06E6  1C20               	btfss	___ftmul@f1,0
  6833  06E7  2EEE               	goto	l5209
  6834  06E8  0823               	movf	___ftmul@f2,w
  6835  06E9  07AB               	addwf	___ftmul@f3_as_product,f
  6836  06EA  0824               	movf	___ftmul@f2+1,w
  6837  06EB  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  6838  06EC  0825               	movf	___ftmul@f2+2,w
  6839  06ED  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  6840  06EE                     l5209:	
  6841  06EE  3001               	movlw	1
  6842  06EF                     u5565:	
  6843  06EF  36A2               	lsrf	___ftmul@f1+2,f
  6844  06F0  0CA1               	rrf	___ftmul@f1+1,f
  6845  06F1  0CA0               	rrf	___ftmul@f1,f
  6846  06F2  0B89               	decfsz	9,f
  6847  06F3  2EEF               	goto	u5565
  6848  06F4  3001               	movlw	1
  6849  06F5                     u5575:	
  6850  06F5  35A3               	lslf	___ftmul@f2,f
  6851  06F6  0DA4               	rlf	___ftmul@f2+1,f
  6852  06F7  0DA5               	rlf	___ftmul@f2+2,f
  6853  06F8  0B89               	decfsz	9,f
  6854  06F9  2EF5               	goto	u5575
  6855  06FA  3001               	movlw	1
  6856  06FB  02AE               	subwf	___ftmul@cntr,f
  6857  06FC  1D03               	btfss	3,2
  6858  06FD  2EE6               	goto	l5205
  6859  06FE  3009               	movlw	9
  6860  06FF  00A6               	movwf	??___ftmul
  6861  0700  0826               	movf	??___ftmul,w
  6862  0701  00AE               	movwf	___ftmul@cntr
  6863  0702                     l5217:	
  6864  0702  1C20               	btfss	___ftmul@f1,0
  6865  0703  2F0A               	goto	l5221
  6866  0704  0823               	movf	___ftmul@f2,w
  6867  0705  07AB               	addwf	___ftmul@f3_as_product,f
  6868  0706  0824               	movf	___ftmul@f2+1,w
  6869  0707  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  6870  0708  0825               	movf	___ftmul@f2+2,w
  6871  0709  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  6872  070A                     l5221:	
  6873  070A  3001               	movlw	1
  6874  070B                     u5605:	
  6875  070B  36A2               	lsrf	___ftmul@f1+2,f
  6876  070C  0CA1               	rrf	___ftmul@f1+1,f
  6877  070D  0CA0               	rrf	___ftmul@f1,f
  6878  070E  0B89               	decfsz	9,f
  6879  070F  2F0B               	goto	u5605
  6880  0710  3001               	movlw	1
  6881  0711                     u5615:	
  6882  0711  36AD               	lsrf	___ftmul@f3_as_product+2,f
  6883  0712  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6884  0713  0CAB               	rrf	___ftmul@f3_as_product,f
  6885  0714  0B89               	decfsz	9,f
  6886  0715  2F11               	goto	u5615
  6887  0716  3001               	movlw	1
  6888  0717  02AE               	subwf	___ftmul@cntr,f
  6889  0718  1D03               	btfss	3,2
  6890  0719  2F02               	goto	l5217
  6891  071A  082B               	movf	___ftmul@f3_as_product,w
  6892  071B  00F1               	movwf	?___ftpack
  6893  071C  082C               	movf	___ftmul@f3_as_product+1,w
  6894  071D  00F2               	movwf	?___ftpack+1
  6895  071E  082D               	movf	___ftmul@f3_as_product+2,w
  6896  071F  00F3               	movwf	?___ftpack+2
  6897  0720  082A               	movf	___ftmul@exp,w
  6898  0721  00A6               	movwf	??___ftmul
  6899  0722  0826               	movf	??___ftmul,w
  6900  0723  00F4               	movwf	?___ftpack+3
  6901  0724  082F               	movf	___ftmul@sign,w
  6902  0725  00A7               	movwf	??___ftmul+1
  6903  0726  0827               	movf	??___ftmul+1,w
  6904  0727  00F5               	movwf	?___ftpack+4
  6905  0728  318E  260F         	fcall	___ftpack
  6906  072A  0871               	movf	?___ftpack,w
  6907  072B  0020               	movlb	0	; select bank0
  6908  072C  00A0               	movwf	?___ftmul
  6909  072D  0872               	movf	?___ftpack+1,w
  6910  072E  00A1               	movwf	?___ftmul+1
  6911  072F  0873               	movf	?___ftpack+2,w
  6912  0730  00A2               	movwf	?___ftmul+2
  6913  0731  0008               	return
  6914  0732                     __end_of___ftmul:	
  6915                           
  6916                           	psect	text30
  6917  0E0F                     __ptext30:	
  6918 ;; *************** function ___ftpack *****************
  6919 ;; Defined at:
  6920 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;  arg             3    1[COMMON] unsigned um
  6923 ;;  exp             1    4[COMMON] unsigned char 
  6924 ;;  sign            1    5[COMMON] unsigned char 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  3    1[COMMON] float 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        8 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    2
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		___ftadd
  6947 ;;		___ftmul
  6948 ;;		___lbtoft
  6949 ;;		___lltoft
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           
  6954                           ;psect for function ___ftpack
  6955  0E0F                     ___ftpack:	
  6956                           
  6957                           ;incstack = 0
  6958                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6959  0E0F  0874               	movf	___ftpack@exp,w
  6960  0E10  1903               	btfsc	3,2
  6961  0E11  2E17               	goto	l5083
  6962  0E12  0873               	movf	___ftpack@arg+2,w
  6963  0E13  0472               	iorwf	___ftpack@arg+1,w
  6964  0E14  0471               	iorwf	___ftpack@arg,w
  6965  0E15  1D03               	skipz
  6966  0E16  2E28               	goto	l5089
  6967  0E17                     l5083:	
  6968  0E17  3000               	movlw	0
  6969  0E18  00F1               	movwf	?___ftpack
  6970  0E19  3000               	movlw	0
  6971  0E1A  00F2               	movwf	?___ftpack+1
  6972  0E1B  3000               	movlw	0
  6973  0E1C  00F3               	movwf	?___ftpack+2
  6974  0E1D  0008               	return
  6975  0E1E                     l5087:	
  6976  0E1E  3001               	movlw	1
  6977  0E1F  00F6               	movwf	??___ftpack
  6978  0E20  0876               	movf	??___ftpack,w
  6979  0E21  07F4               	addwf	___ftpack@exp,f
  6980  0E22  3001               	movlw	1
  6981  0E23                     u5195:	
  6982  0E23  36F3               	lsrf	___ftpack@arg+2,f
  6983  0E24  0CF2               	rrf	___ftpack@arg+1,f
  6984  0E25  0CF1               	rrf	___ftpack@arg,f
  6985  0E26  0B89               	decfsz	9,f
  6986  0E27  2E23               	goto	u5195
  6987  0E28                     l5089:	
  6988  0E28  30FE               	movlw	254
  6989  0E29  0573               	andwf	___ftpack@arg+2,w
  6990  0E2A  1903               	btfsc	3,2
  6991  0E2B  2E41               	goto	l864
  6992  0E2C  2E1E               	goto	l5087
  6993  0E2D                     l5091:	
  6994  0E2D  3001               	movlw	1
  6995  0E2E  00F6               	movwf	??___ftpack
  6996  0E2F  0876               	movf	??___ftpack,w
  6997  0E30  07F4               	addwf	___ftpack@exp,f
  6998  0E31  3001               	movlw	1
  6999  0E32  07F1               	addwf	___ftpack@arg,f
  7000  0E33  3000               	movlw	0
  7001  0E34  1803               	skipnc
  7002  0E35  3001               	movlw	1
  7003  0E36  07F2               	addwf	___ftpack@arg+1,f
  7004  0E37  3000               	movlw	0
  7005  0E38  1803               	skipnc
  7006  0E39  3001               	movlw	1
  7007  0E3A  07F3               	addwf	___ftpack@arg+2,f
  7008  0E3B  3001               	movlw	1
  7009  0E3C                     u5215:	
  7010  0E3C  36F3               	lsrf	___ftpack@arg+2,f
  7011  0E3D  0CF2               	rrf	___ftpack@arg+1,f
  7012  0E3E  0CF1               	rrf	___ftpack@arg,f
  7013  0E3F  0B89               	decfsz	9,f
  7014  0E40  2E3C               	goto	u5215
  7015  0E41                     l864:	
  7016  0E41  30FF               	movlw	255
  7017  0E42  0573               	andwf	___ftpack@arg+2,w
  7018  0E43  1903               	btfsc	3,2
  7019  0E44  2E4E               	goto	l5099
  7020  0E45  2E2D               	goto	l5091
  7021  0E46                     l5097:	
  7022  0E46  3001               	movlw	1
  7023  0E47  02F4               	subwf	___ftpack@exp,f
  7024  0E48  3001               	movlw	1
  7025  0E49                     u5235:	
  7026  0E49  35F1               	lslf	___ftpack@arg,f
  7027  0E4A  0DF2               	rlf	___ftpack@arg+1,f
  7028  0E4B  0DF3               	rlf	___ftpack@arg+2,f
  7029  0E4C  0B89               	decfsz	9,f
  7030  0E4D  2E49               	goto	u5235
  7031  0E4E                     l5099:	
  7032  0E4E  1FF2               	btfss	___ftpack@arg+1,7
  7033  0E4F  2E46               	goto	l5097
  7034  0E50  1874               	btfsc	___ftpack@exp,0
  7035  0E51  2E58               	goto	l870
  7036  0E52  30FF               	movlw	255
  7037  0E53  05F1               	andwf	___ftpack@arg,f
  7038  0E54  307F               	movlw	127
  7039  0E55  05F2               	andwf	___ftpack@arg+1,f
  7040  0E56  30FF               	movlw	255
  7041  0E57  05F3               	andwf	___ftpack@arg+2,f
  7042  0E58                     l870:	
  7043  0E58  1003               	clrc
  7044  0E59  0CF4               	rrf	___ftpack@exp,f
  7045  0E5A  0874               	movf	___ftpack@exp,w
  7046  0E5B  00F6               	movwf	??___ftpack
  7047  0E5C  01F7               	clrf	??___ftpack+1
  7048  0E5D  01F8               	clrf	??___ftpack+2
  7049  0E5E  3010               	movlw	16
  7050  0E5F                     u5265:	
  7051  0E5F  35F6               	lslf	??___ftpack,f
  7052  0E60  0DF7               	rlf	??___ftpack+1,f
  7053  0E61  0DF8               	rlf	??___ftpack+2,f
  7054  0E62  0B89               	decfsz	9,f
  7055  0E63  2E5F               	goto	u5265
  7056  0E64  0876               	movf	??___ftpack,w
  7057  0E65  04F1               	iorwf	___ftpack@arg,f
  7058  0E66  0877               	movf	??___ftpack+1,w
  7059  0E67  04F2               	iorwf	___ftpack@arg+1,f
  7060  0E68  0878               	movf	??___ftpack+2,w
  7061  0E69  04F3               	iorwf	___ftpack@arg+2,f
  7062  0E6A  0875               	movf	___ftpack@sign,w
  7063  0E6B  1903               	btfsc	3,2
  7064  0E6C  0008               	return
  7065  0E6D  17F3               	bsf	___ftpack@arg+2,7
  7066  0E6E  0008               	return
  7067  0E6F                     __end_of___ftpack:	
  7068                           
  7069                           	psect	text31
  7070  0B69                     __ptext31:	
  7071 ;; *************** function ___ftge *****************
  7072 ;; Defined at:
  7073 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftge.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  ff1             3    1[COMMON] float 
  7076 ;;  ff2             3    4[COMMON] float 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;		None               void
  7081 ;; Registers used:
  7082 ;;		wreg, status,2, status,0
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7088 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;Total ram usage:        9 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    2
  7095 ;; This function calls:
  7096 ;;		Nothing
  7097 ;; This function is called by:
  7098 ;;		_RTXUpdateDisplay
  7099 ;;		_ftoa
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function ___ftge
  7105  0B69                     ___ftge:	
  7106                           
  7107                           ;incstack = 0
  7108                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7109  0B69  1FF3               	btfss	___ftge@ff1+2,7
  7110  0B6A  2B7F               	goto	l4113
  7111  0B6B  0971               	comf	___ftge@ff1,w
  7112  0B6C  00F7               	movwf	??___ftge
  7113  0B6D  0972               	comf	___ftge@ff1+1,w
  7114  0B6E  00F8               	movwf	??___ftge+1
  7115  0B6F  0973               	comf	___ftge@ff1+2,w
  7116  0B70  00F9               	movwf	??___ftge+2
  7117  0B71  0AF7               	incf	??___ftge,f
  7118  0B72  1903               	skipnz
  7119  0B73  0AF8               	incf	??___ftge+1,f
  7120  0B74  1903               	skipnz
  7121  0B75  0AF9               	incf	??___ftge+2,f
  7122  0B76  3000               	movlw	0
  7123  0B77  0777               	addwf	??___ftge,w
  7124  0B78  00F1               	movwf	___ftge@ff1
  7125  0B79  3000               	movlw	0
  7126  0B7A  3D78               	addwfc	??___ftge+1,w
  7127  0B7B  00F2               	movwf	___ftge@ff1+1
  7128  0B7C  3080               	movlw	128
  7129  0B7D  3D79               	addwfc	??___ftge+2,w
  7130  0B7E  00F3               	movwf	___ftge@ff1+2
  7131  0B7F                     l4113:	
  7132  0B7F  1FF6               	btfss	___ftge@ff2+2,7
  7133  0B80  2B95               	goto	l4117
  7134  0B81  0974               	comf	___ftge@ff2,w
  7135  0B82  00F7               	movwf	??___ftge
  7136  0B83  0975               	comf	___ftge@ff2+1,w
  7137  0B84  00F8               	movwf	??___ftge+1
  7138  0B85  0976               	comf	___ftge@ff2+2,w
  7139  0B86  00F9               	movwf	??___ftge+2
  7140  0B87  0AF7               	incf	??___ftge,f
  7141  0B88  1903               	skipnz
  7142  0B89  0AF8               	incf	??___ftge+1,f
  7143  0B8A  1903               	skipnz
  7144  0B8B  0AF9               	incf	??___ftge+2,f
  7145  0B8C  3000               	movlw	0
  7146  0B8D  0777               	addwf	??___ftge,w
  7147  0B8E  00F4               	movwf	___ftge@ff2
  7148  0B8F  3000               	movlw	0
  7149  0B90  3D78               	addwfc	??___ftge+1,w
  7150  0B91  00F5               	movwf	___ftge@ff2+1
  7151  0B92  3080               	movlw	128
  7152  0B93  3D79               	addwfc	??___ftge+2,w
  7153  0B94  00F6               	movwf	___ftge@ff2+2
  7154  0B95                     l4117:	
  7155  0B95  3080               	movlw	128
  7156  0B96  06F3               	xorwf	___ftge@ff1+2,f
  7157  0B97  3080               	movlw	128
  7158  0B98  06F6               	xorwf	___ftge@ff2+2,f
  7159  0B99  0876               	movf	___ftge@ff2+2,w
  7160  0B9A  0273               	subwf	___ftge@ff1+2,w
  7161  0B9B  1D03               	skipz
  7162  0B9C  0008               	return
  7163  0B9D  0875               	movf	___ftge@ff2+1,w
  7164  0B9E  0272               	subwf	___ftge@ff1+1,w
  7165  0B9F  1D03               	skipz
  7166  0BA0  0008               	return
  7167  0BA1  0874               	movf	___ftge@ff2,w
  7168  0BA2  0271               	subwf	___ftge@ff1,w
  7169  0BA3  0008               	return
  7170  0BA4                     __end_of___ftge:	
  7171                           
  7172                           	psect	text32
  7173  02EE                     __ptext32:	
  7174 ;; *************** function _sprintf *****************
  7175 ;; Defined at:
  7176 ;;		line 493 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\doprnt.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;  sp              1    wreg     PTR unsigned char 
  7179 ;;		 -> ftoa@buf(17), 
  7180 ;;  f               1   13[BANK0 ] PTR const unsigned char 
  7181 ;;		 -> STR_1(11), 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  sp              1   33[BANK0 ] PTR unsigned char 
  7184 ;;		 -> ftoa@buf(17), 
  7185 ;;  _val            4   29[BANK0 ] struct .
  7186 ;;  prec            2   36[BANK0 ] int 
  7187 ;;  width           2   34[BANK0 ] int 
  7188 ;;  c               1   38[BANK0 ] char 
  7189 ;;  ap              1   28[BANK0 ] PTR void [1]
  7190 ;;		 -> ?_sprintf(2), 
  7191 ;;  flag            1   27[BANK0 ] unsigned char 
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  2   13[BANK0 ] int 
  7194 ;; Registers used:
  7195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7201 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7203 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;Total ram usage:       26 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    3
  7208 ;; This function calls:
  7209 ;;		_isdigit
  7210 ;;		___lldiv
  7211 ;;		___llmod
  7212 ;;		___wmul
  7213 ;; This function is called by:
  7214 ;;		_ftoa
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           
  7219                           ;psect for function _sprintf
  7220  02EE                     _sprintf:	
  7221                           
  7222                           ;incstack = 0
  7223                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7224                           ;sprintf@sp stored from wreg
  7225  02EE  0020               	movlb	0	; select bank0
  7226  02EF  00C1               	movwf	sprintf@sp
  7227                           
  7228                           ;doprnt.c: 494: va_list ap;
  7229                           ;doprnt.c: 499: signed char c;
  7230                           ;doprnt.c: 501: int width;
  7231                           ;doprnt.c: 504: int prec;
  7232                           ;doprnt.c: 508: unsigned char flag;
  7233                           ;doprnt.c: 527: union {
  7234                           ;doprnt.c: 528: unsigned long _val;
  7235                           ;doprnt.c: 529: struct {
  7236                           ;doprnt.c: 530: const char * _cp;
  7237                           ;doprnt.c: 531: unsigned _len;
  7238                           ;doprnt.c: 532: } _str;
  7239                           ;doprnt.c: 533: } _val;
  7240                           ;doprnt.c: 542: *ap = __va_start();
  7241  02F0  302E               	movlw	(?_sprintf+1)& (0+255)
  7242  02F1  00B6               	movwf	??_sprintf
  7243  02F2  0836               	movf	??_sprintf,w
  7244  02F3  00BC               	movwf	sprintf@ap
  7245  02F4                     l3945:	
  7246                           ;doprnt.c: 545: while(c = *f++) {
  7247                           
  7248  02F4  082D               	movf	sprintf@f,w
  7249  02F5  0AAD               	incf	sprintf@f,f
  7250  02F6  3188               	movlp	high __stringtab
  7251  02F7  000A               	callw
  7252  02F8  3182               	pagesel	$	;select current page
  7253  02F9  00B6               	movwf	??_sprintf
  7254  02FA  0836               	movf	??_sprintf,w
  7255  02FB  00C6               	movwf	sprintf@c
  7256  02FC  08C6               	movf	sprintf@c,f
  7257  02FD  1903               	btfsc	3,2
  7258  02FE  2CC4               	goto	l3947
  7259                           
  7260                           ;doprnt.c: 547: if(c != '%')
  7261  02FF  0846               	movf	sprintf@c,w
  7262  0300  3A25               	xorlw	37
  7263  0301  1903               	skipnz
  7264  0302  2B10               	goto	l3855
  7265                           
  7266                           ;doprnt.c: 549: {
  7267                           ;doprnt.c: 550: ((*sp++ = (c)));
  7268  0303  0846               	movf	sprintf@c,w
  7269  0304  00B6               	movwf	??_sprintf
  7270  0305  0841               	movf	sprintf@sp,w
  7271  0306  0086               	movwf	6
  7272  0307  3001               	movlw	1	; select bank2/3
  7273  0308  0087               	movwf	7
  7274  0309  0836               	movf	??_sprintf,w
  7275  030A  0081               	movwf	1
  7276  030B  3001               	movlw	1
  7277  030C  00B6               	movwf	??_sprintf
  7278  030D  0836               	movf	??_sprintf,w
  7279  030E  07C1               	addwf	sprintf@sp,f
  7280                           
  7281                           ;doprnt.c: 551: continue;
  7282  030F  2AF4               	goto	l3945
  7283  0310                     l3855:	
  7284                           
  7285                           ;doprnt.c: 552: }
  7286                           ;doprnt.c: 555: width = 0;
  7287  0310  01C2               	clrf	sprintf@width
  7288  0311  01C3               	clrf	sprintf@width+1
  7289                           
  7290                           ;doprnt.c: 557: flag = 0;
  7291  0312  01BB               	clrf	sprintf@flag
  7292                           
  7293                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  7294  0313  082D               	movf	sprintf@f,w
  7295  0314  3188               	movlp	high __stringtab
  7296  0315  000A               	callw
  7297  0316  3182               	pagesel	$	;select current page
  7298  0317  3196  2652  3182   	fcall	_isdigit
  7299  031A  1C03               	btfss	3,0
  7300  031B  2B4F               	goto	l3869
  7301                           
  7302                           ;doprnt.c: 607: width = 0;
  7303  031C  0020               	movlb	0	; select bank0
  7304  031D  01C2               	clrf	sprintf@width
  7305  031E  01C3               	clrf	sprintf@width+1
  7306  031F                     l3861:	
  7307                           ;doprnt.c: 608: do {
  7308                           
  7309                           
  7310                           ;doprnt.c: 609: width *= 10;
  7311  031F  300A               	movlw	10
  7312  0320  00F1               	movwf	?___wmul
  7313  0321  3000               	movlw	0
  7314  0322  00F2               	movwf	?___wmul+1
  7315  0323  0020               	movlb	0	; select bank0
  7316  0324  0843               	movf	sprintf@width+1,w
  7317  0325  01F4               	clrf	?___wmul+3
  7318  0326  07F4               	addwf	?___wmul+3,f
  7319  0327  0842               	movf	sprintf@width,w
  7320  0328  01F3               	clrf	?___wmul+2
  7321  0329  07F3               	addwf	?___wmul+2,f
  7322  032A  3188  204B  3182   	fcall	___wmul
  7323  032D  0872               	movf	?___wmul+1,w
  7324  032E  0020               	movlb	0	; select bank0
  7325  032F  01C3               	clrf	sprintf@width+1
  7326  0330  07C3               	addwf	sprintf@width+1,f
  7327  0331  0871               	movf	?___wmul,w
  7328  0332  01C2               	clrf	sprintf@width
  7329  0333  07C2               	addwf	sprintf@width,f
  7330                           
  7331                           ;doprnt.c: 610: width += *f++ - '0';
  7332  0334  082D               	movf	sprintf@f,w
  7333  0335  3188               	movlp	high __stringtab
  7334  0336  000A               	callw
  7335  0337  3182               	pagesel	$	;select current page
  7336  0338  3ED0               	addlw	208
  7337  0339  00B6               	movwf	??_sprintf
  7338  033A  30FF               	movlw	255
  7339  033B  1803               	skipnc
  7340  033C  3000               	movlw	0
  7341  033D  00B7               	movwf	??_sprintf+1
  7342  033E  0836               	movf	??_sprintf,w
  7343  033F  07C2               	addwf	sprintf@width,f
  7344  0340  0837               	movf	??_sprintf+1,w
  7345  0341  3DC3               	addwfc	sprintf@width+1,f
  7346  0342  3001               	movlw	1
  7347  0343  00B6               	movwf	??_sprintf
  7348  0344  0836               	movf	??_sprintf,w
  7349  0345  07AD               	addwf	sprintf@f,f
  7350                           
  7351                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  7352  0346  082D               	movf	sprintf@f,w
  7353  0347  3188               	movlp	high __stringtab
  7354  0348  000A               	callw
  7355  0349  3182               	pagesel	$	;select current page
  7356  034A  3196  2652  3182   	fcall	_isdigit
  7357  034D  1803               	btfsc	3,0
  7358  034E  2B1F               	goto	l3861
  7359  034F                     l3869:	
  7360                           
  7361                           ;doprnt.c: 617: }
  7362                           ;doprnt.c: 620: if(*f == '.') {
  7363  034F  0020               	movlb	0	; select bank0
  7364  0350  082D               	movf	sprintf@f,w
  7365  0351  3188               	movlp	high __stringtab
  7366  0352  000A               	callw
  7367  0353  3182               	pagesel	$	;select current page
  7368  0354  3A2E               	xorlw	46
  7369  0355  1D03               	skipz
  7370  0356  2B8C               	goto	l3881
  7371                           
  7372                           ;doprnt.c: 622: f++;
  7373  0357  3001               	movlw	1
  7374  0358  00B6               	movwf	??_sprintf
  7375  0359  0836               	movf	??_sprintf,w
  7376  035A  07AD               	addwf	sprintf@f,f
  7377                           
  7378                           ;doprnt.c: 629: {
  7379                           ;doprnt.c: 630: prec = 0;
  7380  035B  01C4               	clrf	sprintf@prec
  7381  035C  01C5               	clrf	sprintf@prec+1
  7382  035D                     l3879:	
  7383                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  7384                           
  7385  035D  082D               	movf	sprintf@f,w
  7386  035E  3188               	movlp	high __stringtab
  7387  035F  000A               	callw
  7388  0360  3182               	pagesel	$	;select current page
  7389  0361  3196  2652  3182   	fcall	_isdigit
  7390  0364  1C03               	btfss	3,0
  7391  0365  2B97               	goto	l3887
  7392                           
  7393                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  7394  0366  0020               	movlb	0	; select bank0
  7395  0367  082D               	movf	sprintf@f,w
  7396  0368  3188               	movlp	high __stringtab
  7397  0369  000A               	callw
  7398  036A  3182               	pagesel	$	;select current page
  7399  036B  00B6               	movwf	??_sprintf
  7400  036C  01B7               	clrf	??_sprintf+1
  7401  036D  0845               	movf	sprintf@prec+1,w
  7402  036E  01F2               	clrf	?___wmul+1
  7403  036F  07F2               	addwf	?___wmul+1,f
  7404  0370  0844               	movf	sprintf@prec,w
  7405  0371  01F1               	clrf	?___wmul
  7406  0372  07F1               	addwf	?___wmul,f
  7407  0373  300A               	movlw	10
  7408  0374  00F3               	movwf	?___wmul+2
  7409  0375  3000               	movlw	0
  7410  0376  00F4               	movwf	?___wmul+3
  7411  0377  3188  204B  3182   	fcall	___wmul
  7412  037A  0020               	movlb	0	; select bank0
  7413  037B  0836               	movf	??_sprintf,w
  7414  037C  0771               	addwf	?___wmul,w
  7415  037D  00B8               	movwf	??_sprintf+2
  7416  037E  0837               	movf	??_sprintf+1,w
  7417  037F  3D72               	addwfc	?___wmul+1,w
  7418  0380  00B9               	movwf	??_sprintf+3
  7419  0381  0838               	movf	??_sprintf+2,w
  7420  0382  3ED0               	addlw	208
  7421  0383  00C4               	movwf	sprintf@prec
  7422  0384  30FF               	movlw	255
  7423  0385  3D39               	addwfc	??_sprintf+3,w
  7424  0386  00C5               	movwf	sprintf@prec+1
  7425  0387  3001               	movlw	1
  7426  0388  00B6               	movwf	??_sprintf
  7427  0389  0836               	movf	??_sprintf,w
  7428  038A  07AD               	addwf	sprintf@f,f
  7429  038B  2B5D               	goto	l3879
  7430  038C                     l3881:	
  7431                           ;doprnt.c: 633: }
  7432                           ;doprnt.c: 634: } else {
  7433                           
  7434                           
  7435                           ;doprnt.c: 635: prec = 0;
  7436  038C  0020               	movlb	0	; select bank0
  7437  038D  01C4               	clrf	sprintf@prec
  7438  038E  01C5               	clrf	sprintf@prec+1
  7439                           
  7440                           ;doprnt.c: 644: switch(c = *f++) {
  7441                           
  7442                           ;doprnt.c: 639: }
  7443                           ;doprnt.c: 642: loop:
  7444  038F  2B97               	goto	l3887
  7445  0390                     l695:	
  7446                           ;doprnt.c: 650: case 'l':
  7447                           
  7448                           ;doprnt.c: 647: goto alldone;
  7449                           
  7450                           ;doprnt.c: 646: case 0:
  7451                           
  7452                           
  7453                           ;doprnt.c: 652: flag |= 0x10;
  7454  0390  163B               	bsf	sprintf@flag,4
  7455                           
  7456                           ;doprnt.c: 653: goto loop;
  7457  0391  2B97               	goto	l3887
  7458  0392                     l3883:	
  7459                           ;doprnt.c: 826: case 'u':
  7460                           
  7461                           ;doprnt.c: 822: continue;
  7462                           
  7463                           ;doprnt.c: 811: default:
  7464                           
  7465                           
  7466                           ;doprnt.c: 827: flag |= 0xC0;
  7467  0392  30C0               	movlw	192
  7468  0393  00B6               	movwf	??_sprintf
  7469  0394  0836               	movf	??_sprintf,w
  7470  0395  04BB               	iorwf	sprintf@flag,f
  7471                           
  7472                           ;doprnt.c: 831: }
  7473                           
  7474                           ;doprnt.c: 828: break;
  7475  0396  2BA8               	goto	l698
  7476  0397                     l3887:	
  7477  0397  0020               	movlb	0	; select bank0
  7478  0398  082D               	movf	sprintf@f,w
  7479  0399  0AAD               	incf	sprintf@f,f
  7480  039A  3188               	movlp	high __stringtab
  7481  039B  000A               	callw
  7482  039C  3182               	pagesel	$	;select current page
  7483  039D  00C6               	movwf	sprintf@c
  7484                           
  7485                           ; Switch size 1, requested type "space"
  7486                           ; Number of cases is 3, Range of values is 0 to 117
  7487                           ; switch strategies available:
  7488                           ; Name         Instructions Cycles
  7489                           ; simple_byte           10     6 (average)
  7490                           ; direct_byte          242     6 (fixed)
  7491                           ; jumptable            260     6 (fixed)
  7492                           ;	Chosen strategy is simple_byte
  7493  039E  3A00               	xorlw	0	; case 0
  7494  039F  1903               	skipnz
  7495  03A0  2CC4               	goto	l3947
  7496  03A1  3A6C               	xorlw	108	; case 108
  7497  03A2  1903               	skipnz
  7498  03A3  2B90               	goto	l695
  7499  03A4  3A19               	xorlw	25	; case 117
  7500  03A5  1903               	skipnz
  7501  03A6  2B92               	goto	l3883
  7502  03A7  2AF4               	goto	l3945
  7503  03A8                     l698:	
  7504                           
  7505                           ;doprnt.c: 1280: {
  7506                           ;doprnt.c: 1288: if(flag & 0x10)
  7507  03A8  1E3B               	btfss	sprintf@flag,4
  7508  03A9  2BB7               	goto	l3893
  7509                           
  7510                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  7511  03AA  083C               	movf	sprintf@ap,w
  7512  03AB  0086               	movwf	6
  7513  03AC  0187               	clrf	7
  7514  03AD  3F40               	moviw [0]fsr1
  7515  03AE  00BD               	movwf	sprintf@_val
  7516  03AF  3F41               	moviw [1]fsr1
  7517  03B0  00BE               	movwf	sprintf@_val+1
  7518  03B1  3F42               	moviw [2]fsr1
  7519  03B2  00BF               	movwf	sprintf@_val+2
  7520  03B3  3F43               	moviw [3]fsr1
  7521  03B4  00C0               	movwf	sprintf@_val+3
  7522  03B5  3004               	movlw	4
  7523  03B6  2BC5               	goto	L3
  7524  03B7                     l3893:	
  7525                           
  7526                           ;doprnt.c: 1290: else
  7527                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7528  03B7  083C               	movf	sprintf@ap,w
  7529  03B8  0086               	movwf	6
  7530  03B9  0187               	clrf	7
  7531  03BA  3F40               	moviw [0]fsr1
  7532  03BB  00B6               	movwf	??_sprintf
  7533  03BC  3F41               	moviw [1]fsr1
  7534  03BD  00B7               	movwf	??_sprintf+1
  7535  03BE  0836               	movf	??_sprintf,w
  7536  03BF  00BD               	movwf	sprintf@_val
  7537  03C0  0837               	movf	??_sprintf+1,w
  7538  03C1  00BE               	movwf	sprintf@_val+1
  7539  03C2  01BF               	clrf	sprintf@_val+2
  7540  03C3  01C0               	clrf	sprintf@_val+3
  7541  03C4  3002               	movlw	2
  7542  03C5                     L3:	
  7543  03C5  00B6               	movwf	??_sprintf
  7544  03C6  0836               	movf	??_sprintf,w
  7545  03C7  07BC               	addwf	sprintf@ap,f
  7546                           
  7547                           ;doprnt.c: 1294: }
  7548                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  7549  03C8  0845               	movf	sprintf@prec+1,w
  7550  03C9  0444               	iorwf	sprintf@prec,w
  7551  03CA  1D03               	skipz
  7552  03CB  2BD6               	goto	l3903
  7553  03CC  0840               	movf	sprintf@_val+3,w
  7554  03CD  043F               	iorwf	sprintf@_val+2,w
  7555  03CE  043E               	iorwf	sprintf@_val+1,w
  7556  03CF  043D               	iorwf	sprintf@_val,w
  7557  03D0  1D03               	skipz
  7558  03D1  2BD6               	goto	l3903
  7559                           
  7560                           ;doprnt.c: 1298: prec++;
  7561  03D2  3001               	movlw	1
  7562  03D3  07C4               	addwf	sprintf@prec,f
  7563  03D4  3000               	movlw	0
  7564  03D5  3DC5               	addwfc	sprintf@prec+1,f
  7565  03D6                     l3903:	
  7566                           
  7567                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7568  03D6  01C6               	clrf	sprintf@c
  7569  03D7  0AC6               	incf	sprintf@c,f
  7570  03D8  0846               	movf	sprintf@c,w
  7571  03D9  3A0A               	xorlw	10
  7572  03DA  1903               	btfsc	3,2
  7573  03DB  2C0B               	goto	l3915
  7574  03DC                     l3907:	
  7575                           
  7576                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  7577  03DC  3001               	movlw	low (_dpowers| (0+32768))
  7578  03DD  0084               	movwf	4
  7579  03DE  3088               	movlw	high (_dpowers| (0+32768))
  7580  03DF  0085               	movwf	5
  7581  03E0  0846               	movf	sprintf@c,w
  7582  03E1  00B6               	movwf	??_sprintf
  7583  03E2  3001               	movlw	1
  7584  03E3                     u3285:	
  7585  03E3  35B6               	lslf	??_sprintf,f
  7586  03E4  3EFF               	addlw	-1
  7587  03E5  1D03               	skipz
  7588  03E6  2BE3               	goto	u3285
  7589  03E7  3536               	lslf	??_sprintf,w
  7590  03E8  0784               	addwf	4,f
  7591  03E9  1803               	skipnc
  7592  03EA  0A85               	incf	5,f
  7593  03EB  3F00               	moviw [0]fsr0
  7594  03EC  00B7               	movwf	??_sprintf+1
  7595  03ED  3F01               	moviw [1]fsr0
  7596  03EE  00B8               	movwf	??_sprintf+2
  7597  03EF  3F02               	moviw [2]fsr0
  7598  03F0  00B9               	movwf	??_sprintf+3
  7599  03F1  3F03               	moviw [3]fsr0
  7600  03F2  00BA               	movwf	??_sprintf+4
  7601  03F3  083A               	movf	??_sprintf+4,w
  7602  03F4  0240               	subwf	sprintf@_val+3,w
  7603  03F5  1D03               	skipz
  7604  03F6  2C01               	goto	u3295
  7605  03F7  0839               	movf	??_sprintf+3,w
  7606  03F8  023F               	subwf	sprintf@_val+2,w
  7607  03F9  1D03               	skipz
  7608  03FA  2C01               	goto	u3295
  7609  03FB  0838               	movf	??_sprintf+2,w
  7610  03FC  023E               	subwf	sprintf@_val+1,w
  7611  03FD  1D03               	skipz
  7612  03FE  2C01               	goto	u3295
  7613  03FF  0837               	movf	??_sprintf+1,w
  7614  0400  023D               	subwf	sprintf@_val,w
  7615  0401                     u3295:	
  7616  0401  1C03               	btfss	3,0
  7617  0402  2C0B               	goto	l3915
  7618                           
  7619                           ;doprnt.c: 1314: break;
  7620  0403  3001               	movlw	1
  7621  0404  00B6               	movwf	??_sprintf
  7622  0405  0836               	movf	??_sprintf,w
  7623  0406  07C6               	addwf	sprintf@c,f
  7624  0407  0846               	movf	sprintf@c,w
  7625  0408  3A0A               	xorlw	10
  7626  0409  1D03               	skipz
  7627  040A  2BDC               	goto	l3907
  7628  040B                     l3915:	
  7629                           
  7630                           ;doprnt.c: 1346: if(c < prec)
  7631  040B  0846               	movf	sprintf@c,w
  7632  040C  00B6               	movwf	??_sprintf
  7633  040D  01B7               	clrf	??_sprintf+1
  7634  040E  1BB6               	btfsc	??_sprintf,7
  7635  040F  03B7               	decf	??_sprintf+1,f
  7636  0410  0837               	movf	??_sprintf+1,w
  7637  0411  3A80               	xorlw	128
  7638  0412  00B8               	movwf	??_sprintf+2
  7639  0413  0845               	movf	sprintf@prec+1,w
  7640  0414  3A80               	xorlw	128
  7641  0415  0238               	subwf	??_sprintf+2,w
  7642  0416  1D03               	skipz
  7643  0417  2C1A               	goto	u3315
  7644  0418  0844               	movf	sprintf@prec,w
  7645  0419  0236               	subwf	??_sprintf,w
  7646  041A                     u3315:	
  7647  041A  1803               	skipnc
  7648  041B  2C22               	goto	l3919
  7649                           
  7650                           ;doprnt.c: 1347: c = prec;
  7651  041C  0020               	movlb	0	; select bank0
  7652  041D  0844               	movf	sprintf@prec,w
  7653  041E  00B6               	movwf	??_sprintf
  7654  041F  0836               	movf	??_sprintf,w
  7655  0420  00C6               	movwf	sprintf@c
  7656  0421  2C3A               	goto	l3923
  7657  0422                     l3919:	
  7658                           
  7659                           ;doprnt.c: 1348: else if(prec < c)
  7660  0422  0020               	movlb	0	; select bank0
  7661  0423  0846               	movf	sprintf@c,w
  7662  0424  00B6               	movwf	??_sprintf
  7663  0425  01B7               	clrf	??_sprintf+1
  7664  0426  1BB6               	btfsc	??_sprintf,7
  7665  0427  03B7               	decf	??_sprintf+1,f
  7666  0428  0845               	movf	sprintf@prec+1,w
  7667  0429  3A80               	xorlw	128
  7668  042A  00B8               	movwf	??_sprintf+2
  7669  042B  0837               	movf	??_sprintf+1,w
  7670  042C  3A80               	xorlw	128
  7671  042D  0238               	subwf	??_sprintf+2,w
  7672  042E  1D03               	skipz
  7673  042F  2C32               	goto	u3325
  7674  0430  0836               	movf	??_sprintf,w
  7675  0431  0244               	subwf	sprintf@prec,w
  7676  0432                     u3325:	
  7677  0432  1803               	skipnc
  7678  0433  2C3A               	goto	l3923
  7679                           
  7680                           ;doprnt.c: 1349: prec = c;
  7681  0434  0020               	movlb	0	; select bank0
  7682  0435  0846               	movf	sprintf@c,w
  7683  0436  00C4               	movwf	sprintf@prec
  7684  0437  01C5               	clrf	sprintf@prec+1
  7685  0438  1BC4               	btfsc	sprintf@prec,7
  7686  0439  03C5               	decf	sprintf@prec+1,f
  7687  043A                     l3923:	
  7688                           
  7689                           ;doprnt.c: 1388: if(width > c)
  7690  043A  0020               	movlb	0	; select bank0
  7691  043B  0846               	movf	sprintf@c,w
  7692  043C  00B6               	movwf	??_sprintf
  7693  043D  01B7               	clrf	??_sprintf+1
  7694  043E  1BB6               	btfsc	??_sprintf,7
  7695  043F  03B7               	decf	??_sprintf+1,f
  7696  0440  0837               	movf	??_sprintf+1,w
  7697  0441  3A80               	xorlw	128
  7698  0442  00B8               	movwf	??_sprintf+2
  7699  0443  0843               	movf	sprintf@width+1,w
  7700  0444  3A80               	xorlw	128
  7701  0445  0238               	subwf	??_sprintf+2,w
  7702  0446  1D03               	skipz
  7703  0447  2C4A               	goto	u3335
  7704  0448  0842               	movf	sprintf@width,w
  7705  0449  0236               	subwf	??_sprintf,w
  7706  044A                     u3335:	
  7707  044A  1803               	skipnc
  7708  044B  2C57               	goto	l3927
  7709                           
  7710                           ;doprnt.c: 1389: width -= c;
  7711  044C  0020               	movlb	0	; select bank0
  7712  044D  0846               	movf	sprintf@c,w
  7713  044E  00B6               	movwf	??_sprintf
  7714  044F  01B7               	clrf	??_sprintf+1
  7715  0450  1BB6               	btfsc	??_sprintf,7
  7716  0451  03B7               	decf	??_sprintf+1,f
  7717  0452  0836               	movf	??_sprintf,w
  7718  0453  02C2               	subwf	sprintf@width,f
  7719  0454  0837               	movf	??_sprintf+1,w
  7720  0455  3BC3               	subwfb	sprintf@width+1,f
  7721  0456  2C5A               	goto	l3929
  7722  0457                     l3927:	
  7723                           
  7724                           ;doprnt.c: 1390: else
  7725                           ;doprnt.c: 1391: width = 0;
  7726  0457  0020               	movlb	0	; select bank0
  7727  0458  01C2               	clrf	sprintf@width
  7728  0459  01C3               	clrf	sprintf@width+1
  7729  045A                     l3929:	
  7730                           
  7731                           ;doprnt.c: 1429: {
  7732                           ;doprnt.c: 1431: if(width
  7733                           ;doprnt.c: 1435: )
  7734  045A  0843               	movf	sprintf@width+1,w
  7735  045B  0442               	iorwf	sprintf@width,w
  7736  045C  1903               	skipnz
  7737  045D  2CB7               	goto	l3943
  7738                           
  7739                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  7740                           
  7741                           ;doprnt.c: 1436: do
  7742  045E  3020               	movlw	32
  7743  045F  00B6               	movwf	??_sprintf
  7744  0460  0841               	movf	sprintf@sp,w
  7745  0461  0086               	movwf	6
  7746  0462  3001               	movlw	1	; select bank2/3
  7747  0463  0087               	movwf	7
  7748  0464  0836               	movf	??_sprintf,w
  7749  0465  0081               	movwf	1
  7750  0466  3001               	movlw	1
  7751  0467  00B6               	movwf	??_sprintf
  7752  0468  0836               	movf	??_sprintf,w
  7753  0469  07C1               	addwf	sprintf@sp,f
  7754                           
  7755                           ;doprnt.c: 1438: while(--width);
  7756  046A  30FF               	movlw	255
  7757  046B  07C2               	addwf	sprintf@width,f
  7758  046C  30FF               	movlw	255
  7759  046D  3DC3               	addwfc	sprintf@width+1,f
  7760  046E  2C5A               	goto	l3929
  7761  046F                     l3937:	
  7762                           ;doprnt.c: 1476: }
  7763                           ;doprnt.c: 1481: while(prec--) {
  7764                           
  7765                           
  7766                           ;doprnt.c: 1485: {
  7767                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  7768  046F  3000               	movlw	0
  7769  0470  00A8               	movwf	?___llmod+3
  7770  0471  3000               	movlw	0
  7771  0472  00A7               	movwf	?___llmod+2
  7772  0473  3000               	movlw	0
  7773  0474  00A6               	movwf	?___llmod+1
  7774  0475  300A               	movlw	10
  7775  0476  00A5               	movwf	?___llmod
  7776  0477  3001               	movlw	low (_dpowers| (0+32768))
  7777  0478  0084               	movwf	4
  7778  0479  3088               	movlw	high (_dpowers| (0+32768))
  7779  047A  0085               	movwf	5
  7780  047B  0844               	movf	sprintf@prec,w
  7781  047C  00B6               	movwf	??_sprintf
  7782  047D  3001               	movlw	1
  7783  047E                     u3365:	
  7784  047E  35B6               	lslf	??_sprintf,f
  7785  047F  3EFF               	addlw	-1
  7786  0480  1D03               	skipz
  7787  0481  2C7E               	goto	u3365
  7788  0482  3536               	lslf	??_sprintf,w
  7789  0483  0784               	addwf	4,f
  7790  0484  1803               	skipnc
  7791  0485  0A85               	incf	5,f
  7792  0486  3F00               	moviw [0]fsr0
  7793  0487  00F1               	movwf	?___lldiv
  7794  0488  3F01               	moviw [1]fsr0
  7795  0489  00F2               	movwf	?___lldiv+1
  7796  048A  3F02               	moviw [2]fsr0
  7797  048B  00F3               	movwf	?___lldiv+2
  7798  048C  3F03               	moviw [3]fsr0
  7799  048D  00F4               	movwf	?___lldiv+3
  7800  048E  0840               	movf	sprintf@_val+3,w
  7801  048F  00F8               	movwf	?___lldiv+7
  7802  0490  083F               	movf	sprintf@_val+2,w
  7803  0491  00F7               	movwf	?___lldiv+6
  7804  0492  083E               	movf	sprintf@_val+1,w
  7805  0493  00F6               	movwf	?___lldiv+5
  7806  0494  083D               	movf	sprintf@_val,w
  7807  0495  00F5               	movwf	?___lldiv+4
  7808  0496  318C  24BE  3182   	fcall	___lldiv
  7809  0499  0874               	movf	?___lldiv+3,w
  7810  049A  0020               	movlb	0	; select bank0
  7811  049B  00AC               	movwf	?___llmod+7
  7812  049C  0873               	movf	?___lldiv+2,w
  7813  049D  00AB               	movwf	?___llmod+6
  7814  049E  0872               	movf	?___lldiv+1,w
  7815  049F  00AA               	movwf	?___llmod+5
  7816  04A0  0871               	movf	?___lldiv,w
  7817  04A1  00A9               	movwf	?___llmod+4
  7818  04A2  318B  23E4  3182   	fcall	___llmod
  7819  04A5  0020               	movlb	0	; select bank0
  7820  04A6  0825               	movf	?___llmod,w
  7821  04A7  3E30               	addlw	48
  7822  04A8  00B7               	movwf	??_sprintf+1
  7823  04A9  0837               	movf	??_sprintf+1,w
  7824  04AA  00C6               	movwf	sprintf@c
  7825                           
  7826                           ;doprnt.c: 1530: }
  7827                           ;doprnt.c: 1531: ((*sp++ = (c)));
  7828  04AB  0846               	movf	sprintf@c,w
  7829  04AC  00B6               	movwf	??_sprintf
  7830  04AD  0841               	movf	sprintf@sp,w
  7831  04AE  0086               	movwf	6
  7832  04AF  3001               	movlw	1	; select bank2/3
  7833  04B0  0087               	movwf	7
  7834  04B1  0836               	movf	??_sprintf,w
  7835  04B2  0081               	movwf	1
  7836  04B3  3001               	movlw	1
  7837  04B4  00B6               	movwf	??_sprintf
  7838  04B5  0836               	movf	??_sprintf,w
  7839  04B6  07C1               	addwf	sprintf@sp,f
  7840  04B7                     l3943:	
  7841  04B7  30FF               	movlw	255
  7842  04B8  07C4               	addwf	sprintf@prec,f
  7843  04B9  30FF               	movlw	255
  7844  04BA  3DC5               	addwfc	sprintf@prec+1,f
  7845  04BB  30FF               	movlw	255
  7846  04BC  0645               	xorwf	sprintf@prec+1,w
  7847  04BD  1D03               	skipz
  7848  04BE  2CC1               	goto	u3375
  7849  04BF  30FF               	movlw	255
  7850  04C0  0644               	xorwf	sprintf@prec,w
  7851  04C1                     u3375:	
  7852  04C1  1903               	btfsc	3,2
  7853  04C2  2AF4               	goto	l3945
  7854  04C3  2C6F               	goto	l3937
  7855  04C4                     l3947:	
  7856                           ;doprnt.c: 1532: }
  7857                           ;doprnt.c: 1540: }
  7858                           ;doprnt.c: 1542: alldone:
  7859                           
  7860                           
  7861                           ;doprnt.c: 1545: *sp = 0;
  7862  04C4  0841               	movf	sprintf@sp,w
  7863  04C5  0086               	movwf	6
  7864  04C6  3001               	movlw	1	; select bank2/3
  7865  04C7  0087               	movwf	7
  7866  04C8  0181               	clrf	1
  7867  04C9  0008               	return
  7868  04CA                     __end_of_sprintf:	
  7869                           ;doprnt.c: 1547: return 0;
  7870                           ;	Return value of _sprintf is never used
  7871                           
  7872                           
  7873                           	psect	text33
  7874  084B                     __ptext33:	
  7875 ;; *************** function ___wmul *****************
  7876 ;; Defined at:
  7877 ;;		line 3 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\wmul.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  multiplier      2    1[COMMON] unsigned int 
  7880 ;;  multiplicand    2    3[COMMON] unsigned int 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  product         2    5[COMMON] unsigned int 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  2    1[COMMON] unsigned int 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2, status,0
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7892 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;Total ram usage:        6 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    2
  7899 ;; This function calls:
  7900 ;;		Nothing
  7901 ;; This function is called by:
  7902 ;;		_sprintf
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function ___wmul
  7908  084B                     ___wmul:	
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7912  084B  01F5               	clrf	___wmul@product
  7913  084C  01F6               	clrf	___wmul@product+1
  7914  084D                     l4375:	
  7915  084D  1C71               	btfss	___wmul@multiplier,0
  7916  084E  2853               	goto	l1097
  7917  084F  0873               	movf	___wmul@multiplicand,w
  7918  0850  07F5               	addwf	___wmul@product,f
  7919  0851  0874               	movf	___wmul@multiplicand+1,w
  7920  0852  3DF6               	addwfc	___wmul@product+1,f
  7921  0853                     l1097:	
  7922  0853  3001               	movlw	1
  7923  0854                     u4435:	
  7924  0854  35F3               	lslf	___wmul@multiplicand,f
  7925  0855  0DF4               	rlf	___wmul@multiplicand+1,f
  7926  0856  0B89               	decfsz	9,f
  7927  0857  2854               	goto	u4435
  7928  0858  3001               	movlw	1
  7929  0859                     u4445:	
  7930  0859  36F2               	lsrf	___wmul@multiplier+1,f
  7931  085A  0CF1               	rrf	___wmul@multiplier,f
  7932  085B  0B89               	decfsz	9,f
  7933  085C  2859               	goto	u4445
  7934  085D  0872               	movf	___wmul@multiplier+1,w
  7935  085E  0471               	iorwf	___wmul@multiplier,w
  7936  085F  1D03               	skipz
  7937  0860  284D               	goto	l4375
  7938  0861  0876               	movf	___wmul@product+1,w
  7939  0862  01F2               	clrf	?___wmul+1
  7940  0863  07F2               	addwf	?___wmul+1,f
  7941  0864  0875               	movf	___wmul@product,w
  7942  0865  01F1               	clrf	?___wmul
  7943  0866  07F1               	addwf	?___wmul,f
  7944  0867  0008               	return
  7945  0868                     __end_of___wmul:	
  7946                           
  7947                           	psect	text34
  7948  0BE4                     __ptext34:	
  7949 ;; *************** function ___llmod *****************
  7950 ;; Defined at:
  7951 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\llmod.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  divisor         4    5[BANK0 ] unsigned long 
  7954 ;;  dividend        4    9[BANK0 ] unsigned long 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  counter         1   11[COMMON] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;                  4    5[BANK0 ] unsigned long 
  7959 ;; Registers used:
  7960 ;;		wreg, status,2, status,0
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:       10 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    2
  7973 ;; This function calls:
  7974 ;;		Nothing
  7975 ;; This function is called by:
  7976 ;;		_sprintf
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function ___llmod
  7982  0BE4                     ___llmod:	
  7983                           
  7984                           ;incstack = 0
  7985                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7986  0BE4  0020               	movlb	0	; select bank0
  7987  0BE5  0828               	movf	___llmod@divisor+3,w
  7988  0BE6  0427               	iorwf	___llmod@divisor+2,w
  7989  0BE7  0426               	iorwf	___llmod@divisor+1,w
  7990  0BE8  0425               	iorwf	___llmod@divisor,w
  7991  0BE9  1903               	skipnz
  7992  0BEA  2C1E               	goto	l4311
  7993  0BEB  01FB               	clrf	___llmod@counter
  7994  0BEC  0AFB               	incf	___llmod@counter,f
  7995  0BED                     l4301:	
  7996  0BED  1BA8               	btfsc	___llmod@divisor+3,7
  7997  0BEE  2BFB               	goto	l4303
  7998  0BEF  3001               	movlw	1
  7999  0BF0                     u4225:	
  8000  0BF0  35A5               	lslf	___llmod@divisor,f
  8001  0BF1  0DA6               	rlf	___llmod@divisor+1,f
  8002  0BF2  0DA7               	rlf	___llmod@divisor+2,f
  8003  0BF3  0DA8               	rlf	___llmod@divisor+3,f
  8004  0BF4  0B89               	decfsz	9,f
  8005  0BF5  2BF0               	goto	u4225
  8006  0BF6  3001               	movlw	1
  8007  0BF7  00FA               	movwf	??___llmod
  8008  0BF8  087A               	movf	??___llmod,w
  8009  0BF9  07FB               	addwf	___llmod@counter,f
  8010  0BFA  2BED               	goto	l4301
  8011  0BFB                     l4303:	
  8012  0BFB  0828               	movf	___llmod@divisor+3,w
  8013  0BFC  022C               	subwf	___llmod@dividend+3,w
  8014  0BFD  1D03               	skipz
  8015  0BFE  2C09               	goto	u4245
  8016  0BFF  0827               	movf	___llmod@divisor+2,w
  8017  0C00  022B               	subwf	___llmod@dividend+2,w
  8018  0C01  1D03               	skipz
  8019  0C02  2C09               	goto	u4245
  8020  0C03  0826               	movf	___llmod@divisor+1,w
  8021  0C04  022A               	subwf	___llmod@dividend+1,w
  8022  0C05  1D03               	skipz
  8023  0C06  2C09               	goto	u4245
  8024  0C07  0825               	movf	___llmod@divisor,w
  8025  0C08  0229               	subwf	___llmod@dividend,w
  8026  0C09                     u4245:	
  8027  0C09  1C03               	skipc
  8028  0C0A  2C13               	goto	l4307
  8029  0C0B  0825               	movf	___llmod@divisor,w
  8030  0C0C  02A9               	subwf	___llmod@dividend,f
  8031  0C0D  0826               	movf	___llmod@divisor+1,w
  8032  0C0E  3BAA               	subwfb	___llmod@dividend+1,f
  8033  0C0F  0827               	movf	___llmod@divisor+2,w
  8034  0C10  3BAB               	subwfb	___llmod@dividend+2,f
  8035  0C11  0828               	movf	___llmod@divisor+3,w
  8036  0C12  3BAC               	subwfb	___llmod@dividend+3,f
  8037  0C13                     l4307:	
  8038  0C13  3001               	movlw	1
  8039  0C14                     u4255:	
  8040  0C14  36A8               	lsrf	___llmod@divisor+3,f
  8041  0C15  0CA7               	rrf	___llmod@divisor+2,f
  8042  0C16  0CA6               	rrf	___llmod@divisor+1,f
  8043  0C17  0CA5               	rrf	___llmod@divisor,f
  8044  0C18  0B89               	decfsz	9,f
  8045  0C19  2C14               	goto	u4255
  8046  0C1A  3001               	movlw	1
  8047  0C1B  02FB               	subwf	___llmod@counter,f
  8048  0C1C  1D03               	btfss	3,2
  8049  0C1D  2BFB               	goto	l4303
  8050  0C1E                     l4311:	
  8051  0C1E  082C               	movf	___llmod@dividend+3,w
  8052  0C1F  00A8               	movwf	?___llmod+3
  8053  0C20  082B               	movf	___llmod@dividend+2,w
  8054  0C21  00A7               	movwf	?___llmod+2
  8055  0C22  082A               	movf	___llmod@dividend+1,w
  8056  0C23  00A6               	movwf	?___llmod+1
  8057  0C24  0829               	movf	___llmod@dividend,w
  8058  0C25  00A5               	movwf	?___llmod
  8059  0C26  0008               	return
  8060  0C27                     __end_of___llmod:	
  8061                           
  8062                           	psect	text35
  8063  0CBE                     __ptext35:	
  8064 ;; *************** function ___lldiv *****************
  8065 ;; Defined at:
  8066 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lldiv.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;  divisor         4    1[COMMON] unsigned long 
  8069 ;;  dividend        4    5[COMMON] unsigned long 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  quotient        4    0[BANK0 ] unsigned long 
  8072 ;;  counter         1    4[BANK0 ] unsigned char 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  4    1[COMMON] unsigned long 
  8075 ;; Registers used:
  8076 ;;		wreg, status,2, status,0
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8082 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;Total ram usage:       14 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    2
  8089 ;; This function calls:
  8090 ;;		Nothing
  8091 ;; This function is called by:
  8092 ;;		_sprintf
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function ___lldiv
  8098  0CBE                     ___lldiv:	
  8099                           
  8100                           ;incstack = 0
  8101                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8102  0CBE  3000               	movlw	0
  8103  0CBF  0020               	movlb	0	; select bank0
  8104  0CC0  00A3               	movwf	___lldiv@quotient+3
  8105  0CC1  3000               	movlw	0
  8106  0CC2  00A2               	movwf	___lldiv@quotient+2
  8107  0CC3  3000               	movlw	0
  8108  0CC4  00A1               	movwf	___lldiv@quotient+1
  8109  0CC5  3000               	movlw	0
  8110  0CC6  00A0               	movwf	___lldiv@quotient
  8111  0CC7  0874               	movf	___lldiv@divisor+3,w
  8112  0CC8  0473               	iorwf	___lldiv@divisor+2,w
  8113  0CC9  0472               	iorwf	___lldiv@divisor+1,w
  8114  0CCA  0471               	iorwf	___lldiv@divisor,w
  8115  0CCB  1903               	skipnz
  8116  0CCC  2D08               	goto	l4291
  8117  0CCD  01A4               	clrf	___lldiv@counter
  8118  0CCE  0AA4               	incf	___lldiv@counter,f
  8119  0CCF                     l4277:	
  8120  0CCF  1BF4               	btfsc	___lldiv@divisor+3,7
  8121  0CD0  2CDD               	goto	l4279
  8122  0CD1  3001               	movlw	1
  8123  0CD2                     u4155:	
  8124  0CD2  35F1               	lslf	___lldiv@divisor,f
  8125  0CD3  0DF2               	rlf	___lldiv@divisor+1,f
  8126  0CD4  0DF3               	rlf	___lldiv@divisor+2,f
  8127  0CD5  0DF4               	rlf	___lldiv@divisor+3,f
  8128  0CD6  0B89               	decfsz	9,f
  8129  0CD7  2CD2               	goto	u4155
  8130  0CD8  3001               	movlw	1
  8131  0CD9  00F9               	movwf	??___lldiv
  8132  0CDA  0879               	movf	??___lldiv,w
  8133  0CDB  07A4               	addwf	___lldiv@counter,f
  8134  0CDC  2CCF               	goto	l4277
  8135  0CDD                     l4279:	
  8136  0CDD  3001               	movlw	1
  8137  0CDE                     u4175:	
  8138  0CDE  35A0               	lslf	___lldiv@quotient,f
  8139  0CDF  0DA1               	rlf	___lldiv@quotient+1,f
  8140  0CE0  0DA2               	rlf	___lldiv@quotient+2,f
  8141  0CE1  0DA3               	rlf	___lldiv@quotient+3,f
  8142  0CE2  0B89               	decfsz	9,f
  8143  0CE3  2CDE               	goto	u4175
  8144  0CE4  0874               	movf	___lldiv@divisor+3,w
  8145  0CE5  0278               	subwf	___lldiv@dividend+3,w
  8146  0CE6  1D03               	skipz
  8147  0CE7  2CF2               	goto	u4185
  8148  0CE8  0873               	movf	___lldiv@divisor+2,w
  8149  0CE9  0277               	subwf	___lldiv@dividend+2,w
  8150  0CEA  1D03               	skipz
  8151  0CEB  2CF2               	goto	u4185
  8152  0CEC  0872               	movf	___lldiv@divisor+1,w
  8153  0CED  0276               	subwf	___lldiv@dividend+1,w
  8154  0CEE  1D03               	skipz
  8155  0CEF  2CF2               	goto	u4185
  8156  0CF0  0871               	movf	___lldiv@divisor,w
  8157  0CF1  0275               	subwf	___lldiv@dividend,w
  8158  0CF2                     u4185:	
  8159  0CF2  1C03               	skipc
  8160  0CF3  2CFD               	goto	l4287
  8161  0CF4  0871               	movf	___lldiv@divisor,w
  8162  0CF5  02F5               	subwf	___lldiv@dividend,f
  8163  0CF6  0872               	movf	___lldiv@divisor+1,w
  8164  0CF7  3BF6               	subwfb	___lldiv@dividend+1,f
  8165  0CF8  0873               	movf	___lldiv@divisor+2,w
  8166  0CF9  3BF7               	subwfb	___lldiv@dividend+2,f
  8167  0CFA  0874               	movf	___lldiv@divisor+3,w
  8168  0CFB  3BF8               	subwfb	___lldiv@dividend+3,f
  8169  0CFC  1420               	bsf	___lldiv@quotient,0
  8170  0CFD                     l4287:	
  8171  0CFD  3001               	movlw	1
  8172  0CFE                     u4195:	
  8173  0CFE  36F4               	lsrf	___lldiv@divisor+3,f
  8174  0CFF  0CF3               	rrf	___lldiv@divisor+2,f
  8175  0D00  0CF2               	rrf	___lldiv@divisor+1,f
  8176  0D01  0CF1               	rrf	___lldiv@divisor,f
  8177  0D02  0B89               	decfsz	9,f
  8178  0D03  2CFE               	goto	u4195
  8179  0D04  3001               	movlw	1
  8180  0D05  02A4               	subwf	___lldiv@counter,f
  8181  0D06  1D03               	btfss	3,2
  8182  0D07  2CDD               	goto	l4279
  8183  0D08                     l4291:	
  8184  0D08  0823               	movf	___lldiv@quotient+3,w
  8185  0D09  00F4               	movwf	?___lldiv+3
  8186  0D0A  0822               	movf	___lldiv@quotient+2,w
  8187  0D0B  00F3               	movwf	?___lldiv+2
  8188  0D0C  0821               	movf	___lldiv@quotient+1,w
  8189  0D0D  00F2               	movwf	?___lldiv+1
  8190  0D0E  0820               	movf	___lldiv@quotient,w
  8191  0D0F  00F1               	movwf	?___lldiv
  8192  0D10  0008               	return
  8193  0D11                     __end_of___lldiv:	
  8194                           
  8195                           	psect	text36
  8196  1652                     __ptext36:	
  8197 ;; *************** function _isdigit *****************
  8198 ;; Defined at:
  8199 ;;		line 13 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\isdigit.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  c               1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  c               1    2[COMMON] unsigned char 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		wreg, status,2, status,0
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;Total ram usage:        2 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    2
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_sprintf
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           
  8228                           ;psect for function _isdigit
  8229  1652                     _isdigit:	
  8230                           
  8231                           ;incstack = 0
  8232                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8233                           ;isdigit@c stored from wreg
  8234  1652  00F2               	movwf	isdigit@c
  8235  1653  01F1               	clrf	_isdigit$1047
  8236  1654  303A               	movlw	58
  8237  1655  0272               	subwf	isdigit@c,w
  8238  1656  1803               	skipnc
  8239  1657  2E5E               	goto	l3959
  8240  1658  3030               	movlw	48
  8241  1659  0272               	subwf	isdigit@c,w
  8242  165A  1C03               	skipc
  8243  165B  2E5E               	goto	l3959
  8244  165C  01F1               	clrf	_isdigit$1047
  8245  165D  0AF1               	incf	_isdigit$1047,f
  8246  165E                     l3959:	
  8247  165E  0C71               	rrf	_isdigit$1047,w
  8248  165F  0008               	return
  8249  1660                     __end_of_isdigit:	
  8250                           
  8251                           	psect	text37
  8252  09F6                     __ptext37:	
  8253 ;; *************** function _itoa *****************
  8254 ;; Defined at:
  8255 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\itoa.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;  buf             1    wreg     PTR unsigned char 
  8258 ;;		 -> ftoa@buf(17), 
  8259 ;;  val             2    8[BANK0 ] int 
  8260 ;;  base            2   10[BANK0 ] int 
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  buf             1   13[BANK0 ] PTR unsigned char 
  8263 ;;		 -> ftoa@buf(17), 
  8264 ;;  cp              1   12[BANK0 ] PTR unsigned char 
  8265 ;;		 -> ftoa@buf(17), 
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  1    wreg      PTR unsigned char 
  8268 ;; Registers used:
  8269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8275 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;Total ram usage:        7 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    4
  8282 ;; This function calls:
  8283 ;;		_utoa
  8284 ;; This function is called by:
  8285 ;;		_RTXUpdateDisplay
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           
  8290                           ;psect for function _itoa
  8291  09F6                     _itoa:	
  8292                           
  8293                           ;incstack = 0
  8294                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8295                           ;itoa@buf stored from wreg
  8296  09F6  0020               	movlb	0	; select bank0
  8297  09F7  00AD               	movwf	itoa@buf
  8298  09F8  082D               	movf	itoa@buf,w
  8299  09F9  00FA               	movwf	??_itoa
  8300  09FA  087A               	movf	??_itoa,w
  8301  09FB  00AC               	movwf	itoa@cp
  8302  09FC  1FA9               	btfss	itoa@val+1,7
  8303  09FD  2A0F               	goto	l4943
  8304  09FE  302D               	movlw	45
  8305  09FF  00FA               	movwf	??_itoa
  8306  0A00  082D               	movf	itoa@buf,w
  8307  0A01  0086               	movwf	6
  8308  0A02  3001               	movlw	1	; select bank2/3
  8309  0A03  0087               	movwf	7
  8310  0A04  087A               	movf	??_itoa,w
  8311  0A05  0081               	movwf	1
  8312  0A06  3001               	movlw	1
  8313  0A07  00FA               	movwf	??_itoa
  8314  0A08  087A               	movf	??_itoa,w
  8315  0A09  07AD               	addwf	itoa@buf,f
  8316  0A0A  09A8               	comf	itoa@val,f
  8317  0A0B  09A9               	comf	itoa@val+1,f
  8318  0A0C  0AA8               	incf	itoa@val,f
  8319  0A0D  1903               	skipnz
  8320  0A0E  0AA9               	incf	itoa@val+1,f
  8321  0A0F                     l4943:	
  8322  0A0F  0829               	movf	itoa@val+1,w
  8323  0A10  01A1               	clrf	?_utoa+1
  8324  0A11  07A1               	addwf	?_utoa+1,f
  8325  0A12  0828               	movf	itoa@val,w
  8326  0A13  01A0               	clrf	?_utoa
  8327  0A14  07A0               	addwf	?_utoa,f
  8328  0A15  082B               	movf	itoa@base+1,w
  8329  0A16  01A3               	clrf	?_utoa+3
  8330  0A17  07A3               	addwf	?_utoa+3,f
  8331  0A18  082A               	movf	itoa@base,w
  8332  0A19  01A2               	clrf	?_utoa+2
  8333  0A1A  07A2               	addwf	?_utoa+2,f
  8334  0A1B  082D               	movf	itoa@buf,w
  8335  0A1C  318E  266F         	fcall	_utoa
  8336  0A1E  0008               	return
  8337  0A1F                     __end_of_itoa:	
  8338                           ;	Return value of _itoa is never used
  8339                           
  8340                           
  8341                           	psect	text38
  8342  0E6F                     __ptext38:	
  8343 ;; *************** function _utoa *****************
  8344 ;; Defined at:
  8345 ;;		line 18 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\itoa.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;  buf             1    wreg     PTR unsigned char 
  8348 ;;		 -> ftoa@buf(17), 
  8349 ;;  val             2    0[BANK0 ] unsigned int 
  8350 ;;  base            2    2[BANK0 ] int 
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  8353 ;;		 -> ftoa@buf(17), 
  8354 ;;  v               2    4[BANK0 ] unsigned int 
  8355 ;;  c               1    6[BANK0 ] unsigned char 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      PTR unsigned char 
  8358 ;; Registers used:
  8359 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8365 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8366 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;Total ram usage:        9 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    3
  8372 ;; This function calls:
  8373 ;;		___lwdiv
  8374 ;;		___lwmod
  8375 ;; This function is called by:
  8376 ;;		_itoa
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           
  8381                           ;psect for function _utoa
  8382  0E6F                     _utoa:	
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8386                           ;utoa@buf stored from wreg
  8387  0E6F  0020               	movlb	0	; select bank0
  8388  0E70  00A7               	movwf	utoa@buf
  8389  0E71  0821               	movf	utoa@val+1,w
  8390  0E72  01A5               	clrf	utoa@v+1
  8391  0E73  07A5               	addwf	utoa@v+1,f
  8392  0E74  0820               	movf	utoa@val,w
  8393  0E75  01A4               	clrf	utoa@v
  8394  0E76  07A4               	addwf	utoa@v,f
  8395  0E77                     l5239:	
  8396  0E77  0823               	movf	utoa@base+1,w
  8397  0E78  01F2               	clrf	?___lwdiv+1
  8398  0E79  07F2               	addwf	?___lwdiv+1,f
  8399  0E7A  0822               	movf	utoa@base,w
  8400  0E7B  01F1               	clrf	?___lwdiv
  8401  0E7C  07F1               	addwf	?___lwdiv,f
  8402  0E7D  0825               	movf	utoa@v+1,w
  8403  0E7E  01F4               	clrf	?___lwdiv+3
  8404  0E7F  07F4               	addwf	?___lwdiv+3,f
  8405  0E80  0824               	movf	utoa@v,w
  8406  0E81  01F3               	clrf	?___lwdiv+2
  8407  0E82  07F3               	addwf	?___lwdiv+2,f
  8408  0E83  318B  2333  318E   	fcall	___lwdiv
  8409  0E86  0872               	movf	?___lwdiv+1,w
  8410  0E87  0020               	movlb	0	; select bank0
  8411  0E88  01A5               	clrf	utoa@v+1
  8412  0E89  07A5               	addwf	utoa@v+1,f
  8413  0E8A  0871               	movf	?___lwdiv,w
  8414  0E8B  01A4               	clrf	utoa@v
  8415  0E8C  07A4               	addwf	utoa@v,f
  8416  0E8D  3001               	movlw	1
  8417  0E8E  00F9               	movwf	??_utoa
  8418  0E8F  0879               	movf	??_utoa,w
  8419  0E90  07A7               	addwf	utoa@buf,f
  8420  0E91  0825               	movf	utoa@v+1,w
  8421  0E92  0424               	iorwf	utoa@v,w
  8422  0E93  1D03               	skipz
  8423  0E94  2E77               	goto	l5239
  8424  0E95  0827               	movf	utoa@buf,w
  8425  0E96  0086               	movwf	6
  8426  0E97  3001               	movlw	1	; select bank2/3
  8427  0E98  0087               	movwf	7
  8428  0E99  0181               	clrf	1
  8429  0E9A  3001               	movlw	1
  8430  0E9B  02A7               	subwf	utoa@buf,f
  8431  0E9C                     l5249:	
  8432  0E9C  0823               	movf	utoa@base+1,w
  8433  0E9D  01F2               	clrf	?___lwmod+1
  8434  0E9E  07F2               	addwf	?___lwmod+1,f
  8435  0E9F  0822               	movf	utoa@base,w
  8436  0EA0  01F1               	clrf	?___lwmod
  8437  0EA1  07F1               	addwf	?___lwmod,f
  8438  0EA2  0821               	movf	utoa@val+1,w
  8439  0EA3  01F4               	clrf	?___lwmod+3
  8440  0EA4  07F4               	addwf	?___lwmod+3,f
  8441  0EA5  0820               	movf	utoa@val,w
  8442  0EA6  01F3               	clrf	?___lwmod+2
  8443  0EA7  07F3               	addwf	?___lwmod+2,f
  8444  0EA8  318A  2276  318E   	fcall	___lwmod
  8445  0EAB  0871               	movf	?___lwmod,w
  8446  0EAC  00F9               	movwf	??_utoa
  8447  0EAD  0879               	movf	??_utoa,w
  8448  0EAE  0020               	movlb	0	; select bank0
  8449  0EAF  00A6               	movwf	utoa@c
  8450  0EB0  0823               	movf	utoa@base+1,w
  8451  0EB1  01F2               	clrf	?___lwdiv+1
  8452  0EB2  07F2               	addwf	?___lwdiv+1,f
  8453  0EB3  0822               	movf	utoa@base,w
  8454  0EB4  01F1               	clrf	?___lwdiv
  8455  0EB5  07F1               	addwf	?___lwdiv,f
  8456  0EB6  0821               	movf	utoa@val+1,w
  8457  0EB7  01F4               	clrf	?___lwdiv+3
  8458  0EB8  07F4               	addwf	?___lwdiv+3,f
  8459  0EB9  0820               	movf	utoa@val,w
  8460  0EBA  01F3               	clrf	?___lwdiv+2
  8461  0EBB  07F3               	addwf	?___lwdiv+2,f
  8462  0EBC  318B  2333  318E   	fcall	___lwdiv
  8463  0EBF  0872               	movf	?___lwdiv+1,w
  8464  0EC0  0020               	movlb	0	; select bank0
  8465  0EC1  01A1               	clrf	utoa@val+1
  8466  0EC2  07A1               	addwf	utoa@val+1,f
  8467  0EC3  0871               	movf	?___lwdiv,w
  8468  0EC4  01A0               	clrf	utoa@val
  8469  0EC5  07A0               	addwf	utoa@val,f
  8470  0EC6  300A               	movlw	10
  8471  0EC7  0226               	subwf	utoa@c,w
  8472  0EC8  1C03               	skipc
  8473  0EC9  2ECE               	goto	l980
  8474  0ECA  3007               	movlw	7
  8475  0ECB  00F9               	movwf	??_utoa
  8476  0ECC  0879               	movf	??_utoa,w
  8477  0ECD  07A6               	addwf	utoa@c,f
  8478  0ECE                     l980:	
  8479  0ECE  3030               	movlw	48
  8480  0ECF  00F9               	movwf	??_utoa
  8481  0ED0  0879               	movf	??_utoa,w
  8482  0ED1  07A6               	addwf	utoa@c,f
  8483  0ED2  0826               	movf	utoa@c,w
  8484  0ED3  00F9               	movwf	??_utoa
  8485  0ED4  0827               	movf	utoa@buf,w
  8486  0ED5  0086               	movwf	6
  8487  0ED6  3001               	movlw	1	; select bank2/3
  8488  0ED7  0087               	movwf	7
  8489  0ED8  0879               	movf	??_utoa,w
  8490  0ED9  0081               	movwf	1
  8491  0EDA  3001               	movlw	1
  8492  0EDB  02A7               	subwf	utoa@buf,f
  8493  0EDC  0821               	movf	utoa@val+1,w
  8494  0EDD  0420               	iorwf	utoa@val,w
  8495  0EDE  1D03               	skipz
  8496  0EDF  2E9C               	goto	l5249
  8497                           
  8498                           ;	Return value of _utoa is never used
  8499  0EE0  3001               	movlw	1
  8500  0EE1  00F9               	movwf	??_utoa
  8501  0EE2  0879               	movf	??_utoa,w
  8502  0EE3  07A7               	addwf	utoa@buf,f
  8503  0EE4  0008               	return
  8504  0EE5                     __end_of_utoa:	
  8505                           
  8506                           	psect	text39
  8507  0A76                     __ptext39:	
  8508 ;; *************** function ___lwmod *****************
  8509 ;; Defined at:
  8510 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwmod.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;  divisor         2    1[COMMON] unsigned int 
  8513 ;;  dividend        2    3[COMMON] unsigned int 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  counter         1    6[COMMON] unsigned char 
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  2    1[COMMON] unsigned int 
  8518 ;; Registers used:
  8519 ;;		wreg, status,2, status,0
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;Total ram usage:        6 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    2
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_utoa
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function ___lwmod
  8541  0A76                     ___lwmod:	
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  8545  0A76  0872               	movf	___lwmod@divisor+1,w
  8546  0A77  0471               	iorwf	___lwmod@divisor,w
  8547  0A78  1903               	skipnz
  8548  0A79  2A9D               	goto	l4369
  8549  0A7A  01F6               	clrf	___lwmod@counter
  8550  0A7B  0AF6               	incf	___lwmod@counter,f
  8551  0A7C                     l4359:	
  8552  0A7C  1BF2               	btfsc	___lwmod@divisor+1,7
  8553  0A7D  2A88               	goto	l4361
  8554  0A7E  3001               	movlw	1
  8555  0A7F                     u4375:	
  8556  0A7F  35F1               	lslf	___lwmod@divisor,f
  8557  0A80  0DF2               	rlf	___lwmod@divisor+1,f
  8558  0A81  0B89               	decfsz	9,f
  8559  0A82  2A7F               	goto	u4375
  8560  0A83  3001               	movlw	1
  8561  0A84  00F5               	movwf	??___lwmod
  8562  0A85  0875               	movf	??___lwmod,w
  8563  0A86  07F6               	addwf	___lwmod@counter,f
  8564  0A87  2A7C               	goto	l4359
  8565  0A88                     l4361:	
  8566  0A88  0872               	movf	___lwmod@divisor+1,w
  8567  0A89  0274               	subwf	___lwmod@dividend+1,w
  8568  0A8A  1D03               	skipz
  8569  0A8B  2A8E               	goto	u4395
  8570  0A8C  0871               	movf	___lwmod@divisor,w
  8571  0A8D  0273               	subwf	___lwmod@dividend,w
  8572  0A8E                     u4395:	
  8573  0A8E  1C03               	skipc
  8574  0A8F  2A94               	goto	l4365
  8575  0A90  0871               	movf	___lwmod@divisor,w
  8576  0A91  02F3               	subwf	___lwmod@dividend,f
  8577  0A92  0872               	movf	___lwmod@divisor+1,w
  8578  0A93  3BF4               	subwfb	___lwmod@dividend+1,f
  8579  0A94                     l4365:	
  8580  0A94  3001               	movlw	1
  8581  0A95                     u4405:	
  8582  0A95  36F2               	lsrf	___lwmod@divisor+1,f
  8583  0A96  0CF1               	rrf	___lwmod@divisor,f
  8584  0A97  0B89               	decfsz	9,f
  8585  0A98  2A95               	goto	u4405
  8586  0A99  3001               	movlw	1
  8587  0A9A  02F6               	subwf	___lwmod@counter,f
  8588  0A9B  1D03               	btfss	3,2
  8589  0A9C  2A88               	goto	l4361
  8590  0A9D                     l4369:	
  8591  0A9D  0874               	movf	___lwmod@dividend+1,w
  8592  0A9E  01F2               	clrf	?___lwmod+1
  8593  0A9F  07F2               	addwf	?___lwmod+1,f
  8594  0AA0  0873               	movf	___lwmod@dividend,w
  8595  0AA1  01F1               	clrf	?___lwmod
  8596  0AA2  07F1               	addwf	?___lwmod,f
  8597  0AA3  0008               	return
  8598  0AA4                     __end_of___lwmod:	
  8599                           
  8600                           	psect	text40
  8601  0B33                     __ptext40:	
  8602 ;; *************** function ___lwdiv *****************
  8603 ;; Defined at:
  8604 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  divisor         2    1[COMMON] unsigned int 
  8607 ;;  dividend        2    3[COMMON] unsigned int 
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;  quotient        2    6[COMMON] unsigned int 
  8610 ;;  counter         1    8[COMMON] unsigned char 
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  2    1[COMMON] unsigned int 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        8 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    2
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_utoa
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function ___lwdiv
  8636  0B33                     ___lwdiv:	
  8637                           
  8638                           ;incstack = 0
  8639                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  8640  0B33  01F6               	clrf	___lwdiv@quotient
  8641  0B34  01F7               	clrf	___lwdiv@quotient+1
  8642  0B35  0872               	movf	___lwdiv@divisor+1,w
  8643  0B36  0471               	iorwf	___lwdiv@divisor,w
  8644  0B37  1903               	skipnz
  8645  0B38  2B62               	goto	l4347
  8646  0B39  01F8               	clrf	___lwdiv@counter
  8647  0B3A  0AF8               	incf	___lwdiv@counter,f
  8648  0B3B                     l4335:	
  8649  0B3B  1BF2               	btfsc	___lwdiv@divisor+1,7
  8650  0B3C  2B47               	goto	l4337
  8651  0B3D  3001               	movlw	1
  8652  0B3E                     u4305:	
  8653  0B3E  35F1               	lslf	___lwdiv@divisor,f
  8654  0B3F  0DF2               	rlf	___lwdiv@divisor+1,f
  8655  0B40  0B89               	decfsz	9,f
  8656  0B41  2B3E               	goto	u4305
  8657  0B42  3001               	movlw	1
  8658  0B43  00F5               	movwf	??___lwdiv
  8659  0B44  0875               	movf	??___lwdiv,w
  8660  0B45  07F8               	addwf	___lwdiv@counter,f
  8661  0B46  2B3B               	goto	l4335
  8662  0B47                     l4337:	
  8663  0B47  3001               	movlw	1
  8664  0B48                     u4325:	
  8665  0B48  35F6               	lslf	___lwdiv@quotient,f
  8666  0B49  0DF7               	rlf	___lwdiv@quotient+1,f
  8667  0B4A  0B89               	decfsz	9,f
  8668  0B4B  2B48               	goto	u4325
  8669  0B4C  0872               	movf	___lwdiv@divisor+1,w
  8670  0B4D  0274               	subwf	___lwdiv@dividend+1,w
  8671  0B4E  1D03               	skipz
  8672  0B4F  2B52               	goto	u4335
  8673  0B50  0871               	movf	___lwdiv@divisor,w
  8674  0B51  0273               	subwf	___lwdiv@dividend,w
  8675  0B52                     u4335:	
  8676  0B52  1C03               	skipc
  8677  0B53  2B59               	goto	l4343
  8678  0B54  0871               	movf	___lwdiv@divisor,w
  8679  0B55  02F3               	subwf	___lwdiv@dividend,f
  8680  0B56  0872               	movf	___lwdiv@divisor+1,w
  8681  0B57  3BF4               	subwfb	___lwdiv@dividend+1,f
  8682  0B58  1476               	bsf	___lwdiv@quotient,0
  8683  0B59                     l4343:	
  8684  0B59  3001               	movlw	1
  8685  0B5A                     u4345:	
  8686  0B5A  36F2               	lsrf	___lwdiv@divisor+1,f
  8687  0B5B  0CF1               	rrf	___lwdiv@divisor,f
  8688  0B5C  0B89               	decfsz	9,f
  8689  0B5D  2B5A               	goto	u4345
  8690  0B5E  3001               	movlw	1
  8691  0B5F  02F8               	subwf	___lwdiv@counter,f
  8692  0B60  1D03               	btfss	3,2
  8693  0B61  2B47               	goto	l4337
  8694  0B62                     l4347:	
  8695  0B62  0877               	movf	___lwdiv@quotient+1,w
  8696  0B63  01F2               	clrf	?___lwdiv+1
  8697  0B64  07F2               	addwf	?___lwdiv+1,f
  8698  0B65  0876               	movf	___lwdiv@quotient,w
  8699  0B66  01F1               	clrf	?___lwdiv
  8700  0B67  07F1               	addwf	?___lwdiv,f
  8701  0B68  0008               	return
  8702  0B69                     __end_of___lwdiv:	
  8703                           
  8704                           	psect	text41
  8705  0C27                     __ptext41:	
  8706 ;; *************** function _DPYSendStr *****************
  8707 ;; Defined at:
  8708 ;;		line 139 in file "DPY.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  row             1    wreg     unsigned char 
  8711 ;;  col             1    0[BANK0 ] unsigned char 
  8712 ;;  data            2    1[BANK0 ] PTR unsigned char 
  8713 ;;		 -> strTemp(16), strTitle(16), 
  8714 ;;  len             1    3[BANK0 ] unsigned char 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  row             1    7[BANK0 ] unsigned char 
  8717 ;;  i               1    6[BANK0 ] unsigned char 
  8718 ;; Return value:  Size  Location     Type
  8719 ;;		None               void
  8720 ;; Registers used:
  8721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8722 ;; Tracked objects:
  8723 ;;		On entry : 0/0
  8724 ;;		On exit  : 0/0
  8725 ;;		Unchanged: 0/0
  8726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8727 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;Total ram usage:        8 bytes
  8732 ;; Hardware stack levels used:    1
  8733 ;; Hardware stack levels required when called:    5
  8734 ;; This function calls:
  8735 ;;		_DPYSetCur
  8736 ;;		_DPYSendChar
  8737 ;;		_DPYIsBusy
  8738 ;; This function is called by:
  8739 ;;		_RTXUpdateDisplay
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function _DPYSendStr
  8745  0C27                     _DPYSendStr:	
  8746                           
  8747                           ;incstack = 0
  8748                           ; Regs used in _DPYSendStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8749                           ;DPYSendStr@row stored from wreg
  8750  0C27  0020               	movlb	0	; select bank0
  8751  0C28  00A7               	movwf	DPYSendStr@row
  8752                           
  8753                           ;DPY.c: 140: unsigned char i;
  8754                           ;DPY.c: 143: DPYSetCur(row,col);
  8755  0C29  0820               	movf	DPYSendStr@col,w
  8756  0C2A  00A4               	movwf	??_DPYSendStr
  8757  0C2B  0824               	movf	??_DPYSendStr,w
  8758  0C2C  00F8               	movwf	?_DPYSetCur
  8759  0C2D  0827               	movf	DPYSendStr@row,w
  8760  0C2E  3197  2700  318C   	fcall	_DPYSetCur
  8761                           
  8762                           ;DPY.c: 145: for(i=0;i<len;i++)
  8763  0C31  0020               	movlb	0	; select bank0
  8764  0C32  01A6               	clrf	DPYSendStr@i
  8765  0C33                     l4591:	
  8766  0C33  0823               	movf	DPYSendStr@len,w
  8767  0C34  0226               	subwf	DPYSendStr@i,w
  8768  0C35  1803               	btfsc	3,0
  8769  0C36  0008               	return
  8770                           
  8771                           ;DPY.c: 146: {
  8772                           ;DPY.c: 148: DPYSendChar((*(data+i)));
  8773  0C37  0826               	movf	DPYSendStr@i,w
  8774  0C38  00A4               	movwf	??_DPYSendStr
  8775  0C39  01A5               	clrf	??_DPYSendStr+1
  8776  0C3A  0824               	movf	??_DPYSendStr,w
  8777  0C3B  0721               	addwf	DPYSendStr@data,w
  8778  0C3C  0086               	movwf	6
  8779  0C3D  0825               	movf	??_DPYSendStr+1,w
  8780  0C3E  3D22               	addwfc	DPYSendStr@data+1,w
  8781  0C3F  0087               	movwf	7
  8782  0C40  0801               	movf	1,w
  8783  0C41  3196  2612  318C   	fcall	_DPYSendChar
  8784  0C44                     l4571:	
  8785                           ;DPY.c: 149: while(DPYIsBusy())
  8786                           
  8787  0C44  318B  23A4  318C   	fcall	_DPYIsBusy
  8788  0C47  3800               	iorlw	0
  8789  0C48  1903               	btfsc	3,2
  8790  0C49  2C4C               	goto	l4573
  8791                           
  8792                           ;DPY.c: 150: _nop();
  8793  0C4A  0000               	nop
  8794  0C4B  2C44               	goto	l4571
  8795  0C4C                     l4573:	
  8796                           
  8797                           ;DPY.c: 153: col++;
  8798  0C4C  3001               	movlw	1
  8799  0C4D  0020               	movlb	0	; select bank0
  8800  0C4E  00A4               	movwf	??_DPYSendStr
  8801  0C4F  0824               	movf	??_DPYSendStr,w
  8802  0C50  07A0               	addwf	DPYSendStr@col,f
  8803                           
  8804                           ;DPY.c: 154: if(col==16)
  8805  0C51  0820               	movf	DPYSendStr@col,w
  8806  0C52  3A10               	xorlw	16
  8807  0C53  1D03               	skipz
  8808  0C54  2C5B               	goto	l4583
  8809                           
  8810                           ;DPY.c: 155: {
  8811                           ;DPY.c: 156: col=0;
  8812  0C55  01A0               	clrf	DPYSendStr@col
  8813                           
  8814                           ;DPY.c: 157: row++;
  8815  0C56  3001               	movlw	1
  8816  0C57  00A4               	movwf	??_DPYSendStr
  8817  0C58  0824               	movf	??_DPYSendStr,w
  8818  0C59  07A7               	addwf	DPYSendStr@row,f
  8819  0C5A  2C62               	goto	L4
  8820  0C5B                     l4583:	
  8821                           ;DPY.c: 159: }
  8822                           
  8823                           ;DPY.c: 158: DPYSetCur(row,col);
  8824                           
  8825                           
  8826                           ;DPY.c: 160: else if(col==32)
  8827  0C5B  0020               	movlb	0	; select bank0
  8828  0C5C  0820               	movf	DPYSendStr@col,w
  8829  0C5D  3A20               	xorlw	32
  8830  0C5E  1D03               	skipz
  8831  0C5F  2C6A               	goto	l4589
  8832                           
  8833                           ;DPY.c: 161: {
  8834                           ;DPY.c: 162: col=0;
  8835  0C60  01A0               	clrf	DPYSendStr@col
  8836                           
  8837                           ;DPY.c: 163: row=0;
  8838  0C61  01A7               	clrf	DPYSendStr@row
  8839  0C62                     L4:	
  8840                           
  8841                           ;DPY.c: 164: DPYSetCur(row,col);
  8842  0C62  0820               	movf	DPYSendStr@col,w
  8843  0C63  00A4               	movwf	??_DPYSendStr
  8844  0C64  0824               	movf	??_DPYSendStr,w
  8845  0C65  00F8               	movwf	?_DPYSetCur
  8846  0C66  0827               	movf	DPYSendStr@row,w
  8847  0C67  3197  2700  318C   	fcall	_DPYSetCur
  8848  0C6A                     l4589:	
  8849  0C6A  3001               	movlw	1
  8850  0C6B  0020               	movlb	0	; select bank0
  8851  0C6C  00A4               	movwf	??_DPYSendStr
  8852  0C6D  0824               	movf	??_DPYSendStr,w
  8853  0C6E  07A6               	addwf	DPYSendStr@i,f
  8854  0C6F  2C33               	goto	l4591
  8855  0C70                     __end_of_DPYSendStr:	
  8856                           
  8857                           	psect	text42
  8858  0BA4                     __ptext42:	
  8859 ;; *************** function _DPYIsBusy *****************
  8860 ;; Defined at:
  8861 ;;		line 316 in file "DPY.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;		None
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;  bf              1    6[COMMON] enum E1832
  8866 ;; Return value:  Size  Location     Type
  8867 ;;                  1    wreg      enum E1832
  8868 ;; Registers used:
  8869 ;;		wreg, status,2, status,0, pclath, cstack
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;Total ram usage:        2 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; Hardware stack levels required when called:    3
  8882 ;; This function calls:
  8883 ;;		_DLYDelay_us
  8884 ;; This function is called by:
  8885 ;;		_DPYSendStr
  8886 ;; This function uses a non-reentrant model
  8887 ;;
  8888                           
  8889                           
  8890                           ;psect for function _DPYIsBusy
  8891  0BA4                     _DPYIsBusy:	
  8892                           
  8893                           ;DPY.c: 317: te_DPY_BF bf;
  8894                           ;DPY.c: 320: TRISA|=0b00001111;
  8895                           
  8896                           ;incstack = 0
  8897                           ; Regs used in _DPYIsBusy: [wreg+status,2+status,0+pclath+cstack]
  8898  0BA4  300F               	movlw	15
  8899  0BA5  00F5               	movwf	??_DPYIsBusy
  8900  0BA6  0875               	movf	??_DPYIsBusy,w
  8901  0BA7  0021               	movlb	1	; select bank1
  8902  0BA8  048C               	iorwf	12,f	;volatile
  8903                           
  8904                           ;DPY.c: 323: LATAbits.LATA4=0;
  8905  0BA9  0022               	movlb	2	; select bank2
  8906  0BAA  120C               	bcf	12,4	;volatile
  8907                           
  8908                           ;DPY.c: 326: LATAbits.LATA6=0;
  8909  0BAB  130C               	bcf	12,6	;volatile
  8910                           
  8911                           ;DPY.c: 329: LATAbits.LATA7=1;
  8912  0BAC  178C               	bsf	12,7	;volatile
  8913                           
  8914                           ;DPY.c: 332: DLYDelay_us(100);
  8915  0BAD  3064               	movlw	100
  8916  0BAE  00F1               	movwf	?_DLYDelay_us
  8917  0BAF  3000               	movlw	0
  8918  0BB0  00F2               	movwf	?_DLYDelay_us+1
  8919  0BB1  3196  268F  318B   	fcall	_DLYDelay_us
  8920                           
  8921                           ;DPY.c: 335: LATAbits.LATA4=1;
  8922  0BB4  0022               	movlb	2	; select bank2
  8923  0BB5  160C               	bsf	12,4	;volatile
  8924                           
  8925                           ;DPY.c: 337: bf=BF_NOTBUSY;
  8926  0BB6  01F6               	clrf	DPYIsBusy@bf
  8927                           
  8928                           ;DPY.c: 338: if(PORTAbits.RA0)
  8929  0BB7  0020               	movlb	0	; select bank0
  8930  0BB8  1C0C               	btfss	12,0	;volatile
  8931  0BB9  2BBC               	goto	l4611
  8932                           
  8933                           ;DPY.c: 339: bf=BF_BUSY;
  8934  0BBA  01F6               	clrf	DPYIsBusy@bf
  8935  0BBB  0AF6               	incf	DPYIsBusy@bf,f
  8936  0BBC                     l4611:	
  8937                           
  8938                           ;DPY.c: 341: DLYDelay_us(100);
  8939  0BBC  3064               	movlw	100
  8940  0BBD  00F1               	movwf	?_DLYDelay_us
  8941  0BBE  3000               	movlw	0
  8942  0BBF  00F2               	movwf	?_DLYDelay_us+1
  8943  0BC0  3196  268F  318B   	fcall	_DLYDelay_us
  8944                           
  8945                           ;DPY.c: 343: LATAbits.LATA4=0;
  8946  0BC3  0022               	movlb	2	; select bank2
  8947  0BC4  120C               	bcf	12,4	;volatile
  8948                           
  8949                           ;DPY.c: 345: DLYDelay_us(100);
  8950  0BC5  3064               	movlw	100
  8951  0BC6  00F1               	movwf	?_DLYDelay_us
  8952  0BC7  3000               	movlw	0
  8953  0BC8  00F2               	movwf	?_DLYDelay_us+1
  8954  0BC9  3196  268F  318B   	fcall	_DLYDelay_us
  8955                           
  8956                           ;DPY.c: 347: LATAbits.LATA4=1;
  8957  0BCC  0022               	movlb	2	; select bank2
  8958  0BCD  160C               	bsf	12,4	;volatile
  8959                           
  8960                           ;DPY.c: 349: DLYDelay_us(100);
  8961  0BCE  3064               	movlw	100
  8962  0BCF  00F1               	movwf	?_DLYDelay_us
  8963  0BD0  3000               	movlw	0
  8964  0BD1  00F2               	movwf	?_DLYDelay_us+1
  8965  0BD2  3196  268F  318B   	fcall	_DLYDelay_us
  8966                           
  8967                           ;DPY.c: 351: LATAbits.LATA4=0;
  8968  0BD5  0022               	movlb	2	; select bank2
  8969  0BD6  120C               	bcf	12,4	;volatile
  8970                           
  8971                           ;DPY.c: 353: DLYDelay_us(100);
  8972  0BD7  3064               	movlw	100
  8973  0BD8  00F1               	movwf	?_DLYDelay_us
  8974  0BD9  3000               	movlw	0
  8975  0BDA  00F2               	movwf	?_DLYDelay_us+1
  8976  0BDB  3196  268F         	fcall	_DLYDelay_us
  8977                           
  8978                           ;DPY.c: 356: TRISA&=0b11110000;
  8979  0BDD  30F0               	movlw	240
  8980  0BDE  00F5               	movwf	??_DPYIsBusy
  8981  0BDF  0875               	movf	??_DPYIsBusy,w
  8982  0BE0  0021               	movlb	1	; select bank1
  8983  0BE1  058C               	andwf	12,f	;volatile
  8984                           
  8985                           ;DPY.c: 358: return bf;
  8986  0BE2  0876               	movf	DPYIsBusy@bf,w
  8987  0BE3  0008               	return
  8988  0BE4                     __end_of_DPYIsBusy:	
  8989                           
  8990                           	psect	text43
  8991  1612                     __ptext43:	
  8992 ;; *************** function _DPYSendChar *****************
  8993 ;; Defined at:
  8994 ;;		line 133 in file "DPY.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  c               1    wreg     unsigned char 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  c               1    9[COMMON] unsigned char 
  8999 ;; Return value:  Size  Location     Type
  9000 ;;		None               void
  9001 ;; Registers used:
  9002 ;;		wreg, status,2, status,0, pclath, cstack
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;Total ram usage:        2 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    4
  9015 ;; This function calls:
  9016 ;;		_DPYWriteByte
  9017 ;; This function is called by:
  9018 ;;		_DPYSendStr
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           
  9023                           ;psect for function _DPYSendChar
  9024  1612                     _DPYSendChar:	
  9025                           
  9026                           ;incstack = 0
  9027                           ; Regs used in _DPYSendChar: [wreg+status,2+status,0+pclath+cstack]
  9028                           ;DPYSendChar@c stored from wreg
  9029  1612  00F9               	movwf	DPYSendChar@c
  9030                           
  9031                           ;DPY.c: 135: DPYWriteByte(RS_DATA,c);
  9032  1613  0879               	movf	DPYSendChar@c,w
  9033  1614  00F8               	movwf	??_DPYSendChar
  9034  1615  0878               	movf	??_DPYSendChar,w
  9035  1616  00F5               	movwf	?_DPYWriteByte
  9036  1617  3001               	movlw	1
  9037  1618  318D  25B9         	fcall	_DPYWriteByte
  9038  161A  0008               	return
  9039  161B                     __end_of_DPYSendChar:	
  9040                           
  9041                           	psect	text44
  9042  1700                     __ptext44:	
  9043 ;; *************** function _DPYSetCur *****************
  9044 ;; Defined at:
  9045 ;;		line 119 in file "DPY.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;  row             1    wreg     unsigned char 
  9048 ;;  col             1    8[COMMON] unsigned char 
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  row             1   10[COMMON] unsigned char 
  9051 ;;  addr            1   11[COMMON] unsigned char 
  9052 ;; Return value:  Size  Location     Type
  9053 ;;		None               void
  9054 ;; Registers used:
  9055 ;;		wreg, status,2, status,0, pclath, cstack
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9061 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;Total ram usage:        4 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    4
  9068 ;; This function calls:
  9069 ;;		_DPYWriteByte
  9070 ;; This function is called by:
  9071 ;;		_DPYSendStr
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _DPYSetCur
  9077  1700                     _DPYSetCur:	
  9078                           
  9079                           ;incstack = 0
  9080                           ; Regs used in _DPYSetCur: [wreg+status,2+status,0+pclath+cstack]
  9081                           ;DPYSetCur@row stored from wreg
  9082  1700  00FA               	movwf	DPYSetCur@row
  9083                           
  9084                           ;DPY.c: 120: unsigned char addr;
  9085                           ;DPY.c: 123: addr=col;
  9086  1701  0878               	movf	DPYSetCur@col,w
  9087  1702  00F9               	movwf	??_DPYSetCur
  9088  1703  0879               	movf	??_DPYSetCur,w
  9089  1704  00FB               	movwf	DPYSetCur@addr
  9090                           
  9091                           ;DPY.c: 125: if(row==1)
  9092  1705  087A               	movf	DPYSetCur@row,w
  9093  1706  3A01               	xorlw	1
  9094  1707  1D03               	skipz
  9095  1708  2F0D               	goto	l4561
  9096                           
  9097                           ;DPY.c: 126: addr+=0x40;
  9098  1709  3040               	movlw	64
  9099  170A  00F9               	movwf	??_DPYSetCur
  9100  170B  0879               	movf	??_DPYSetCur,w
  9101  170C  07FB               	addwf	DPYSetCur@addr,f
  9102  170D                     l4561:	
  9103                           
  9104                           ;DPY.c: 129: DPYWriteByte(RS_ISTRUCTION,(addr|0b10000000));
  9105  170D  087B               	movf	DPYSetCur@addr,w
  9106  170E  3880               	iorlw	128
  9107  170F  00F9               	movwf	??_DPYSetCur
  9108  1710  0879               	movf	??_DPYSetCur,w
  9109  1711  00F5               	movwf	?_DPYWriteByte
  9110  1712  3000               	movlw	0
  9111  1713  318D  25B9         	fcall	_DPYWriteByte
  9112  1715  0008               	return
  9113  1716                     __end_of_DPYSetCur:	
  9114                           
  9115                           	psect	text45
  9116  1776                     __ptext45:	
  9117 ;; *************** function _PGMInit *****************
  9118 ;; Defined at:
  9119 ;;		line 23 in file "PGM.c"
  9120 ;; Parameters:    Size  Location     Type
  9121 ;;  state           1    wreg     unsigned char 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  state           1   70[BANK0 ] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;		None               void
  9126 ;; Registers used:
  9127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:        1 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    6
  9140 ;; This function calls:
  9141 ;;		_PGMReadNvm
  9142 ;;		_PGMCheckNvm
  9143 ;; This function is called by:
  9144 ;;		_main
  9145 ;; This function uses a non-reentrant model
  9146 ;;
  9147                           
  9148                           
  9149                           ;psect for function _PGMInit
  9150  1776                     _PGMInit:	
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9154                           ;PGMInit@state stored from wreg
  9155  1776  0020               	movlb	0	; select bank0
  9156  1777  00E6               	movwf	PGMInit@state
  9157                           
  9158                           ;PGM.c: 24: switch(state)
  9159  1778  2F86               	goto	l4691
  9160  1779                     l4681:	
  9161                           ;PGM.c: 25: {
  9162                           ;PGM.c: 26: case 0:
  9163                           
  9164                           
  9165                           ;PGM.c: 28: T1CON=0b00000001;
  9166  1779  3001               	movlw	1
  9167  177A  0098               	movwf	24	;volatile
  9168                           
  9169                           ;PGM.c: 29: break;
  9170  177B  0008               	return
  9171  177C                     l4683:	
  9172                           ;PGM.c: 30: case 1:
  9173                           
  9174                           
  9175                           ;PGM.c: 32: tmrPgm=0;
  9176  177C  0021               	movlb	1	; select bank1
  9177  177D  01AA               	clrf	_tmrPgm^(0+128)
  9178  177E  01AB               	clrf	(_tmrPgm+1)^(0+128)
  9179                           
  9180                           ;PGM.c: 33: pgm_flg.val=0;
  9181  177F  01AC               	clrf	_pgm_flg^(0+128)
  9182                           
  9183                           ;PGM.c: 34: PGMReadNvm();
  9184  1780  3196  26B3  3197   	fcall	_PGMReadNvm
  9185                           
  9186                           ;PGM.c: 35: PGMCheckNvm();
  9187  1783  3196  263A         	fcall	_PGMCheckNvm
  9188                           
  9189                           ;PGM.c: 40: }
  9190                           
  9191                           ;PGM.c: 36: break;
  9192  1785  0008               	return
  9193  1786                     l4691:	
  9194  1786  0020               	movlb	0	; select bank0
  9195  1787  0866               	movf	PGMInit@state,w
  9196                           
  9197                           ; Switch size 1, requested type "space"
  9198                           ; Number of cases is 2, Range of values is 0 to 1
  9199                           ; switch strategies available:
  9200                           ; Name         Instructions Cycles
  9201                           ; simple_byte            7     4 (average)
  9202                           ; direct_byte           10     6 (fixed)
  9203                           ; jumptable            260     6 (fixed)
  9204                           ;	Chosen strategy is simple_byte
  9205  1788  3A00               	xorlw	0	; case 0
  9206  1789  1903               	skipnz
  9207  178A  2F79               	goto	l4681
  9208  178B  3A01               	xorlw	1	; case 1
  9209  178C  1903               	skipnz
  9210  178D  2F7C               	goto	l4683
  9211  178E  2F8F               	goto	l359
  9212  178F                     l359:	
  9213  178F  0008               	return
  9214  1790                     __end_of_PGMInit:	
  9215                           
  9216                           	psect	text46
  9217  163A                     __ptext46:	
  9218 ;; *************** function _PGMCheckNvm *****************
  9219 ;; Defined at:
  9220 ;;		line 65 in file "PGM.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;		None
  9225 ;; Return value:  Size  Location     Type
  9226 ;;		None               void
  9227 ;; Registers used:
  9228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;Total ram usage:        0 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    5
  9241 ;; This function calls:
  9242 ;;		_PGMNvmReset
  9243 ;; This function is called by:
  9244 ;;		_PGMInit
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _PGMCheckNvm
  9250  163A                     _PGMCheckNvm:	
  9251                           
  9252                           ;PGM.c: 66: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  9253                           
  9254                           ;incstack = 0
  9255                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9256  163A  0021               	movlb	1	; select bank1
  9257  163B  084C               	movf	_pgm_cfg^(0+128),w
  9258  163C  3AC5               	xorlw	197
  9259  163D  1D03               	skipz
  9260  163E  2E43               	goto	l4697
  9261  163F  084D               	movf	(_pgm_cfg^(0+128)+1),w
  9262  1640  3A5C               	xorlw	92
  9263  1641  1903               	skipnz
  9264  1642  0008               	return
  9265  1643                     l4697:	
  9266                           
  9267                           ;PGM.c: 67: PGMNvmReset();
  9268  1643  3196  26D9         	fcall	_PGMNvmReset
  9269  1645  0008               	return
  9270  1646                     __end_of_PGMCheckNvm:	
  9271                           
  9272                           	psect	text47
  9273  16D9                     __ptext47:	
  9274 ;; *************** function _PGMNvmReset *****************
  9275 ;; Defined at:
  9276 ;;		line 71 in file "PGM.c"
  9277 ;; Parameters:    Size  Location     Type
  9278 ;;		None
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;		None               void
  9283 ;; Registers used:
  9284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;Total ram usage:        1 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    4
  9297 ;; This function calls:
  9298 ;;		_PGMWriteNvm
  9299 ;; This function is called by:
  9300 ;;		_PGMCheckNvm
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           
  9305                           ;psect for function _PGMNvmReset
  9306  16D9                     _PGMNvmReset:	
  9307                           
  9308                           ;PGM.c: 73: pgm_cfg.valChk1=0xC5;
  9309                           
  9310                           ;incstack = 0
  9311                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9312  16D9  30C5               	movlw	197
  9313  16DA  0020               	movlb	0	; select bank0
  9314  16DB  00E5               	movwf	??_PGMNvmReset
  9315  16DC  0865               	movf	??_PGMNvmReset,w
  9316  16DD  0021               	movlb	1	; select bank1
  9317  16DE  00CC               	movwf	_pgm_cfg^(0+128)
  9318                           
  9319                           ;PGM.c: 74: pgm_cfg.valChk2=0x5C;
  9320  16DF  305C               	movlw	92
  9321  16E0  0020               	movlb	0	; select bank0
  9322  16E1  00E5               	movwf	??_PGMNvmReset
  9323  16E2  0865               	movf	??_PGMNvmReset,w
  9324  16E3  0021               	movlb	1	; select bank1
  9325  16E4  00CD               	movwf	(_pgm_cfg^(0+128)+1)
  9326                           
  9327                           ;PGM.c: 75: pgm_cfg.menu=0x00;
  9328  16E5  01CE               	clrf	(_pgm_cfg^(0+128)+2)
  9329                           
  9330                           ;PGM.c: 76: pgm_cfg.sensId=0x00;
  9331  16E6  01CF               	clrf	(_pgm_cfg^(0+128)+3)
  9332                           
  9333                           ;PGM.c: 77: pgm_cfg.baseId=0x00;
  9334  16E7  01D0               	clrf	(_pgm_cfg^(0+128)+4)
  9335                           
  9336                           ;PGM.c: 79: PGMWriteNvm();
  9337  16E8  3196  26C6         	fcall	_PGMWriteNvm
  9338  16EA  0001               	reset	;# 
  9339  16EB  0008               	return
  9340  16EC                     __end_of_PGMNvmReset:	
  9341                           
  9342                           	psect	text48
  9343  16C6                     __ptext48:	
  9344 ;; *************** function _PGMWriteNvm *****************
  9345 ;; Defined at:
  9346 ;;		line 60 in file "PGM.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;		None
  9349 ;; Auto vars:     Size  Location     Type
  9350 ;;		None
  9351 ;; Return value:  Size  Location     Type
  9352 ;;		None               void
  9353 ;; Registers used:
  9354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9355 ;; Tracked objects:
  9356 ;;		On entry : 0/0
  9357 ;;		On exit  : 0/0
  9358 ;;		Unchanged: 0/0
  9359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;Total ram usage:        4 bytes
  9365 ;; Hardware stack levels used:    1
  9366 ;; Hardware stack levels required when called:    3
  9367 ;; This function calls:
  9368 ;;		_NVMWrite
  9369 ;; This function is called by:
  9370 ;;		_PGMNvmReset
  9371 ;;		_PGMSelLong
  9372 ;;		_RTXReadPkt
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           
  9377                           ;psect for function _PGMWriteNvm
  9378  16C6                     _PGMWriteNvm:	
  9379                           
  9380                           ;PGM.c: 61: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  9381                           
  9382                           ;incstack = 0
  9383                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9384  16C6  3029               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9385  16C7  00F8               	movwf	??_PGMWriteNvm
  9386  16C8  3088               	movlw	(high __stringtab)| (0+128)
  9387  16C9  00F9               	movwf	??_PGMWriteNvm+1
  9388  16CA  0878               	movf	??_PGMWriteNvm,w
  9389  16CB  00F1               	movwf	?_NVMWrite
  9390  16CC  0879               	movf	??_PGMWriteNvm+1,w
  9391  16CD  00F2               	movwf	?_NVMWrite+1
  9392  16CE  30CC               	movlw	_pgm_cfg& (0+255)
  9393  16CF  00FA               	movwf	??_PGMWriteNvm+2
  9394  16D0  087A               	movf	??_PGMWriteNvm+2,w
  9395  16D1  00F3               	movwf	?_NVMWrite+2
  9396  16D2  3005               	movlw	5
  9397  16D3  00FB               	movwf	??_PGMWriteNvm+3
  9398  16D4  087B               	movf	??_PGMWriteNvm+3,w
  9399  16D5  00F4               	movwf	?_NVMWrite+3
  9400  16D6  3185  25C0         	fcall	_NVMWrite
  9401  16D8  0008               	return
  9402  16D9                     __end_of_PGMWriteNvm:	
  9403                           
  9404                           	psect	text49
  9405  05C0                     __ptext49:	
  9406 ;; *************** function _NVMWrite *****************
  9407 ;; Defined at:
  9408 ;;		line 39 in file "NVM.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  addr            2    1[COMMON] unsigned short 
  9411 ;;  source          1    3[COMMON] PTR unsigned char 
  9412 ;;		 -> pgm_cfg(5), 
  9413 ;;  len             1    4[COMMON] unsigned char 
  9414 ;; Auto vars:     Size  Location     Type
  9415 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  9416 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  9417 ;;  j               1   68[BANK0 ] unsigned char 
  9418 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  9419 ;;  i               1   66[BANK0 ] unsigned char 
  9420 ;; Return value:  Size  Location     Type
  9421 ;;		None               void
  9422 ;; Registers used:
  9423 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9424 ;; Tracked objects:
  9425 ;;		On entry : 0/0
  9426 ;;		On exit  : 0/0
  9427 ;;		Unchanged: 0/0
  9428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;Total ram usage:       76 bytes
  9434 ;; Hardware stack levels used:    1
  9435 ;; Hardware stack levels required when called:    2
  9436 ;; This function calls:
  9437 ;;		Nothing
  9438 ;; This function is called by:
  9439 ;;		_PGMWriteNvm
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           
  9444                           ;psect for function _NVMWrite
  9445  05C0                     _NVMWrite:	
  9446                           
  9447                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  9448                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  9449                           ;NVM.c: 43: INTCONbits.GIE=0;
  9450                           
  9451                           ;incstack = 0
  9452                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  9453  05C0  138B               	bcf	11,7	;volatile
  9454                           
  9455                           ;NVM.c: 44: PMCON1bits.WREN=1;
  9456  05C1  0023               	movlb	3	; select bank3
  9457  05C2  1515               	bsf	21,2	;volatile
  9458                           
  9459                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  9460  05C3  1315               	bcf	21,6	;volatile
  9461                           
  9462                           ;NVM.c: 48: i=0;
  9463  05C4  0020               	movlb	0	; select bank0
  9464  05C5  01E2               	clrf	NVMWrite@i
  9465                           
  9466                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  9467  05C6  30E0               	movlw	224
  9468  05C7  0571               	andwf	NVMWrite@addr,w
  9469  05C8  00E0               	movwf	NVMWrite@rowAddr
  9470  05C9  30FF               	movlw	255
  9471  05CA  0572               	andwf	NVMWrite@addr+1,w
  9472  05CB  00E1               	movwf	NVMWrite@rowAddr+1
  9473                           
  9474                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  9475  05CC  0871               	movf	NVMWrite@addr,w
  9476  05CD  391F               	andlw	31
  9477  05CE  00F5               	movwf	??_NVMWrite
  9478  05CF  0875               	movf	??_NVMWrite,w
  9479  05D0  00E3               	movwf	NVMWrite@latchAddr
  9480  05D1                     l166:	
  9481                           ;NVM.c: 52: while(i<len)
  9482                           
  9483  05D1  0874               	movf	NVMWrite@len,w
  9484  05D2  0262               	subwf	NVMWrite@i,w
  9485  05D3  1803               	btfsc	3,0
  9486  05D4  2E7A               	goto	l186
  9487  05D5  0064               	clrwdt	;# 
  9488                           
  9489                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9490  05D6  0020               	movlb	0	; select bank0
  9491  05D7  01E4               	clrf	NVMWrite@j
  9492  05D8  3020               	movlw	32
  9493  05D9  0264               	subwf	NVMWrite@j,w
  9494  05DA  1803               	btfsc	3,0
  9495  05DB  2E00               	goto	l169
  9496  05DC                     l168:	
  9497  05DC  0064               	clrwdt	;# 
  9498                           
  9499                           ;NVM.c: 60: PMADR=(rowAddr+j);
  9500  05DD  0020               	movlb	0	; select bank0
  9501  05DE  0864               	movf	NVMWrite@j,w
  9502  05DF  0760               	addwf	NVMWrite@rowAddr,w
  9503  05E0  00F5               	movwf	??_NVMWrite
  9504  05E1  0861               	movf	NVMWrite@rowAddr+1,w
  9505  05E2  1803               	skipnc
  9506  05E3  0A61               	incf	NVMWrite@rowAddr+1,w
  9507  05E4  00F6               	movwf	??_NVMWrite+1
  9508  05E5  0875               	movf	??_NVMWrite,w
  9509  05E6  0023               	movlb	3	; select bank3
  9510  05E7  0091               	movwf	17	;volatile
  9511  05E8  0876               	movf	??_NVMWrite+1,w
  9512  05E9  0092               	movwf	18	;volatile
  9513                           
  9514                           ;NVM.c: 61: PMCON1bits.RD=1;
  9515  05EA  1415               	bsf	21,0	;volatile
  9516  05EB                     l170:	
  9517                           ;NVM.c: 62: while(PMCON1bits.RD);
  9518                           
  9519  05EB  1815               	btfsc	21,0	;volatile
  9520  05EC  2DEB               	goto	l170
  9521                           
  9522                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  9523  05ED  0020               	movlb	0	; select bank0
  9524  05EE  3564               	lslf	NVMWrite@j,w
  9525  05EF  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9526  05F0  0086               	movwf	6
  9527  05F1  0187               	clrf	7
  9528  05F2  0023               	movlb	3	; select bank3
  9529  05F3  0813               	movf	19,w	;volatile
  9530  05F4  3FC0               	movwi [0]fsr1
  9531  05F5  0814               	movf	20,w	;volatile
  9532  05F6  3FC1               	movwi [1]fsr1
  9533  05F7  3001               	movlw	1
  9534  05F8  00F5               	movwf	??_NVMWrite
  9535  05F9  0875               	movf	??_NVMWrite,w
  9536  05FA  0020               	movlb	0	; select bank0
  9537  05FB  07E4               	addwf	NVMWrite@j,f
  9538  05FC  3020               	movlw	32
  9539  05FD  0264               	subwf	NVMWrite@j,w
  9540  05FE  1C03               	skipc
  9541  05FF  2DDC               	goto	l168
  9542  0600                     l169:	
  9543                           
  9544                           ;NVM.c: 64: }
  9545                           ;NVM.c: 67: PMCON1bits.FREE=1;
  9546  0600  0023               	movlb	3	; select bank3
  9547  0601  1615               	bsf	21,4	;volatile
  9548                           
  9549                           ;NVM.c: 68: PMADR=rowAddr;
  9550  0602  0020               	movlb	0	; select bank0
  9551  0603  0861               	movf	NVMWrite@rowAddr+1,w
  9552  0604  0023               	movlb	3	; select bank3
  9553  0605  0192               	clrf	18	;volatile
  9554  0606  0792               	addwf	18,f	;volatile
  9555  0607  0020               	movlb	0	; select bank0
  9556  0608  0860               	movf	NVMWrite@rowAddr,w
  9557  0609  0023               	movlb	3	; select bank3
  9558  060A  0191               	clrf	17	;volatile
  9559  060B  0791               	addwf	17,f	;volatile
  9560                           
  9561                           ;NVM.c: 69: PMCON2=0x55;
  9562  060C  3055               	movlw	85
  9563  060D  0096               	movwf	22	;volatile
  9564                           
  9565                           ;NVM.c: 70: PMCON2=0xAA;
  9566  060E  30AA               	movlw	170
  9567  060F  0096               	movwf	22	;volatile
  9568                           
  9569                           ;NVM.c: 71: PMCON1bits.WR=1;
  9570  0610  1495               	bsf	21,1	;volatile
  9571  0611                     l173:	
  9572                           ;NVM.c: 72: while(PMCON1bits.WR);
  9573                           
  9574  0611  1895               	btfsc	21,1	;volatile
  9575  0612  2E11               	goto	l173
  9576                           
  9577                           ;NVM.c: 73: _nop();
  9578  0613  0000               	nop
  9579                           
  9580                           ;NVM.c: 74: _nop();
  9581  0614  0000               	nop
  9582                           
  9583                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  9584  0615  3020               	movlw	32
  9585  0616  0020               	movlb	0	; select bank0
  9586  0617  0263               	subwf	NVMWrite@latchAddr,w
  9587  0618  1803               	btfsc	3,0
  9588  0619  2E3D               	goto	l3149
  9589  061A                     l176:	
  9590  061A  0064               	clrwdt	;# 
  9591                           
  9592                           ;NVM.c: 81: if(i>=len)
  9593  061B  0874               	movf	NVMWrite@len,w
  9594  061C  0020               	movlb	0	; select bank0
  9595  061D  0262               	subwf	NVMWrite@i,w
  9596  061E  1803               	btfsc	3,0
  9597  061F  2E3D               	goto	l3149
  9598                           
  9599                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  9600                           
  9601                           ;NVM.c: 82: break;
  9602  0620  0862               	movf	NVMWrite@i,w
  9603  0621  0773               	addwf	NVMWrite@source,w
  9604  0622  00F5               	movwf	??_NVMWrite
  9605  0623  0875               	movf	??_NVMWrite,w
  9606  0624  0086               	movwf	6
  9607  0625  0187               	clrf	7
  9608  0626  0801               	movf	1,w
  9609  0627  00F6               	movwf	??_NVMWrite+1
  9610  0628  01F7               	clrf	??_NVMWrite+2
  9611  0629  3563               	lslf	NVMWrite@latchAddr,w
  9612  062A  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9613  062B  0086               	movwf	6
  9614  062C  0187               	clrf	7
  9615  062D  0876               	movf	??_NVMWrite+1,w
  9616  062E  3FC0               	movwi [0]fsr1
  9617  062F  0877               	movf	??_NVMWrite+2,w
  9618  0630  3FC1               	movwi [1]fsr1
  9619                           
  9620                           ;NVM.c: 85: i++;
  9621  0631  3001               	movlw	1
  9622  0632  00F5               	movwf	??_NVMWrite
  9623  0633  0875               	movf	??_NVMWrite,w
  9624  0634  07E2               	addwf	NVMWrite@i,f
  9625  0635  3001               	movlw	1
  9626  0636  00F5               	movwf	??_NVMWrite
  9627  0637  0875               	movf	??_NVMWrite,w
  9628  0638  07E3               	addwf	NVMWrite@latchAddr,f
  9629  0639  3020               	movlw	32
  9630  063A  0263               	subwf	NVMWrite@latchAddr,w
  9631  063B  1C03               	skipc
  9632  063C  2E1A               	goto	l176
  9633  063D                     l3149:	
  9634                           
  9635                           ;NVM.c: 86: }
  9636                           ;NVM.c: 88: latchAddr=0;
  9637  063D  01E3               	clrf	NVMWrite@latchAddr
  9638                           
  9639                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9640  063E  01E4               	clrf	NVMWrite@j
  9641  063F  3020               	movlw	32
  9642  0640  0264               	subwf	NVMWrite@j,w
  9643  0641  1803               	btfsc	3,0
  9644  0642  2E75               	goto	l3171
  9645  0643                     l3155:	
  9646                           
  9647                           ;NVM.c: 92: {
  9648                           ;NVM.c: 94: PMADR=(rowAddr+j);
  9649  0643  0864               	movf	NVMWrite@j,w
  9650  0644  0760               	addwf	NVMWrite@rowAddr,w
  9651  0645  00F5               	movwf	??_NVMWrite
  9652  0646  0861               	movf	NVMWrite@rowAddr+1,w
  9653  0647  1803               	skipnc
  9654  0648  0A61               	incf	NVMWrite@rowAddr+1,w
  9655  0649  00F6               	movwf	??_NVMWrite+1
  9656  064A  0875               	movf	??_NVMWrite,w
  9657  064B  0023               	movlb	3	; select bank3
  9658  064C  0091               	movwf	17	;volatile
  9659  064D  0876               	movf	??_NVMWrite+1,w
  9660  064E  0092               	movwf	18	;volatile
  9661                           
  9662                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  9663  064F  0020               	movlb	0	; select bank0
  9664  0650  3564               	lslf	NVMWrite@j,w
  9665  0651  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9666  0652  0086               	movwf	6
  9667  0653  0187               	clrf	7
  9668  0654  3F40               	moviw [0]fsr1
  9669  0655  0023               	movlb	3	; select bank3
  9670  0656  0093               	movwf	19	;volatile
  9671  0657  3F41               	moviw [1]fsr1
  9672  0658  0094               	movwf	20	;volatile
  9673                           
  9674                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  9675  0659  0020               	movlb	0	; select bank0
  9676  065A  0864               	movf	NVMWrite@j,w
  9677  065B  3A1F               	xorlw	31
  9678  065C  1D03               	skipz
  9679  065D  2E61               	goto	l181
  9680                           
  9681                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  9682  065E  0023               	movlb	3	; select bank3
  9683  065F  1295               	bcf	21,5	;volatile
  9684  0660  2E63               	goto	l3163
  9685  0661                     l181:	
  9686                           
  9687                           ;NVM.c: 99: else
  9688                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  9689  0661  0023               	movlb	3	; select bank3
  9690  0662  1695               	bsf	21,5	;volatile
  9691  0663                     l3163:	
  9692                           
  9693                           ;NVM.c: 101: PMCON2=0x55;
  9694  0663  3055               	movlw	85
  9695  0664  0096               	movwf	22	;volatile
  9696                           
  9697                           ;NVM.c: 102: PMCON2=0xAA;
  9698  0665  30AA               	movlw	170
  9699  0666  0096               	movwf	22	;volatile
  9700                           
  9701                           ;NVM.c: 103: PMCON1bits.WR=1;
  9702  0667  1495               	bsf	21,1	;volatile
  9703  0668                     l183:	
  9704                           ;NVM.c: 104: while(PMCON1bits.WR);
  9705                           
  9706  0668  1895               	btfsc	21,1	;volatile
  9707  0669  2E68               	goto	l183
  9708                           
  9709                           ;NVM.c: 105: _nop();
  9710  066A  0000               	nop
  9711                           
  9712                           ;NVM.c: 106: _nop();
  9713  066B  0000               	nop
  9714  066C  3001               	movlw	1
  9715  066D  00F5               	movwf	??_NVMWrite
  9716  066E  0875               	movf	??_NVMWrite,w
  9717  066F  0020               	movlb	0	; select bank0
  9718  0670  07E4               	addwf	NVMWrite@j,f
  9719  0671  3020               	movlw	32
  9720  0672  0264               	subwf	NVMWrite@j,w
  9721  0673  1C03               	skipc
  9722  0674  2E43               	goto	l3155
  9723  0675                     l3171:	
  9724                           
  9725                           ;NVM.c: 107: }
  9726                           ;NVM.c: 109: rowAddr+=0x0020;
  9727  0675  3020               	movlw	32
  9728  0676  07E0               	addwf	NVMWrite@rowAddr,f
  9729  0677  3000               	movlw	0
  9730  0678  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  9731  0679  2DD1               	goto	l166
  9732  067A                     l186:	
  9733                           
  9734                           ;NVM.c: 110: }
  9735                           ;NVM.c: 112: INTCONbits.GIE=1;
  9736  067A  178B               	bsf	11,7	;volatile
  9737                           
  9738                           ;NVM.c: 113: PMCON1bits.WREN=0;
  9739  067B  0023               	movlb	3	; select bank3
  9740  067C  1115               	bcf	21,2	;volatile
  9741  067D  0008               	return
  9742  067E                     __end_of_NVMWrite:	
  9743                           
  9744                           	psect	text50
  9745  16B3                     __ptext50:	
  9746 ;; *************** function _PGMReadNvm *****************
  9747 ;; Defined at:
  9748 ;;		line 55 in file "PGM.c"
  9749 ;; Parameters:    Size  Location     Type
  9750 ;;		None
  9751 ;; Auto vars:     Size  Location     Type
  9752 ;;		None
  9753 ;; Return value:  Size  Location     Type
  9754 ;;		None               void
  9755 ;; Registers used:
  9756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9757 ;; Tracked objects:
  9758 ;;		On entry : 0/0
  9759 ;;		On exit  : 0/0
  9760 ;;		Unchanged: 0/0
  9761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;Total ram usage:        4 bytes
  9767 ;; Hardware stack levels used:    1
  9768 ;; Hardware stack levels required when called:    3
  9769 ;; This function calls:
  9770 ;;		_NVMRead
  9771 ;; This function is called by:
  9772 ;;		_PGMInit
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function _PGMReadNvm
  9778  16B3                     _PGMReadNvm:	
  9779                           
  9780                           ;PGM.c: 56: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  9781                           
  9782                           ;incstack = 0
  9783                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9784  16B3  3029               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9785  16B4  00F8               	movwf	??_PGMReadNvm
  9786  16B5  3088               	movlw	(high __stringtab)| (0+128)
  9787  16B6  00F9               	movwf	??_PGMReadNvm+1
  9788  16B7  0878               	movf	??_PGMReadNvm,w
  9789  16B8  00F1               	movwf	?_NVMRead
  9790  16B9  0879               	movf	??_PGMReadNvm+1,w
  9791  16BA  00F2               	movwf	?_NVMRead+1
  9792  16BB  30CC               	movlw	_pgm_cfg& (0+255)
  9793  16BC  00FA               	movwf	??_PGMReadNvm+2
  9794  16BD  087A               	movf	??_PGMReadNvm+2,w
  9795  16BE  00F3               	movwf	?_NVMRead+2
  9796  16BF  3005               	movlw	5
  9797  16C0  00FB               	movwf	??_PGMReadNvm+3
  9798  16C1  087B               	movf	??_PGMReadNvm+3,w
  9799  16C2  00F4               	movwf	?_NVMRead+3
  9800  16C3  3189  2135         	fcall	_NVMRead
  9801  16C5  0008               	return
  9802  16C6                     __end_of_PGMReadNvm:	
  9803                           
  9804                           	psect	text51
  9805  0935                     __ptext51:	
  9806 ;; *************** function _NVMRead *****************
  9807 ;; Defined at:
  9808 ;;		line 24 in file "NVM.c"
  9809 ;; Parameters:    Size  Location     Type
  9810 ;;  addr            2    1[COMMON] unsigned short 
  9811 ;;  dest            1    3[COMMON] PTR unsigned char 
  9812 ;;		 -> pgm_cfg(5), 
  9813 ;;  len             1    4[COMMON] unsigned char 
  9814 ;; Auto vars:     Size  Location     Type
  9815 ;;  i               1    7[COMMON] unsigned char 
  9816 ;; Return value:  Size  Location     Type
  9817 ;;		None               void
  9818 ;; Registers used:
  9819 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9820 ;; Tracked objects:
  9821 ;;		On entry : 0/0
  9822 ;;		On exit  : 0/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;Total ram usage:        7 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    2
  9832 ;; This function calls:
  9833 ;;		Nothing
  9834 ;; This function is called by:
  9835 ;;		_PGMReadNvm
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           
  9840                           ;psect for function _NVMRead
  9841  0935                     _NVMRead:	
  9842                           
  9843                           ;NVM.c: 25: unsigned char i;
  9844                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  9848  0935  0023               	movlb	3	; select bank3
  9849  0936  1315               	bcf	21,6	;volatile
  9850                           
  9851                           ;NVM.c: 28: for(i=0;i<len;i++)
  9852  0937  01F7               	clrf	NVMRead@i
  9853  0938                     l3101:	
  9854  0938  0874               	movf	NVMRead@len,w
  9855  0939  0277               	subwf	NVMRead@i,w
  9856  093A  1803               	btfsc	3,0
  9857  093B  0008               	return
  9858  093C  0064               	clrwdt	;# 
  9859                           
  9860                           ;NVM.c: 31: PMADR=(addr+i);
  9861  093D  0877               	movf	NVMRead@i,w
  9862  093E  0771               	addwf	NVMRead@addr,w
  9863  093F  00F5               	movwf	??_NVMRead
  9864  0940  0872               	movf	NVMRead@addr+1,w
  9865  0941  1803               	skipnc
  9866  0942  0A72               	incf	NVMRead@addr+1,w
  9867  0943  00F6               	movwf	??_NVMRead+1
  9868  0944  0875               	movf	??_NVMRead,w
  9869  0945  0023               	movlb	3	; select bank3
  9870  0946  0091               	movwf	17	;volatile
  9871  0947  0876               	movf	??_NVMRead+1,w
  9872  0948  0092               	movwf	18	;volatile
  9873                           
  9874                           ;NVM.c: 32: PMCON1bits.RD=1;
  9875  0949  1415               	bsf	21,0	;volatile
  9876  094A                     l159:	
  9877                           ;NVM.c: 33: while(PMCON1bits.RD);
  9878                           
  9879  094A  1815               	btfsc	21,0	;volatile
  9880  094B  294A               	goto	l159
  9881                           
  9882                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  9883  094C  0813               	movf	19,w	;volatile
  9884  094D  00F5               	movwf	??_NVMRead
  9885  094E  0877               	movf	NVMRead@i,w
  9886  094F  0773               	addwf	NVMRead@dest,w
  9887  0950  00F6               	movwf	??_NVMRead+1
  9888  0951  0876               	movf	??_NVMRead+1,w
  9889  0952  0086               	movwf	6
  9890  0953  0187               	clrf	7
  9891  0954  0875               	movf	??_NVMRead,w
  9892  0955  0081               	movwf	1
  9893  0956  3001               	movlw	1
  9894  0957  00F5               	movwf	??_NVMRead
  9895  0958  0875               	movf	??_NVMRead,w
  9896  0959  07F7               	addwf	NVMRead@i,f
  9897  095A  2938               	goto	l3101
  9898  095B                     __end_of_NVMRead:	
  9899                           
  9900                           	psect	text52
  9901  16A0                     __ptext52:	
  9902 ;; *************** function _DPYInit *****************
  9903 ;; Defined at:
  9904 ;;		line 43 in file "DPY.c"
  9905 ;; Parameters:    Size  Location     Type
  9906 ;;  sta             1    wreg     unsigned char 
  9907 ;; Auto vars:     Size  Location     Type
  9908 ;;  sta             1    3[BANK0 ] unsigned char 
  9909 ;; Return value:  Size  Location     Type
  9910 ;;		None               void
  9911 ;; Registers used:
  9912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9913 ;; Tracked objects:
  9914 ;;		On entry : 0/0
  9915 ;;		On exit  : 0/0
  9916 ;;		Unchanged: 0/0
  9917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;Total ram usage:        1 bytes
  9923 ;; Hardware stack levels used:    1
  9924 ;; Hardware stack levels required when called:    6
  9925 ;; This function calls:
  9926 ;;		_DPYInitDisplay
  9927 ;; This function is called by:
  9928 ;;		_main
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           
  9933                           ;psect for function _DPYInit
  9934  16A0                     _DPYInit:	
  9935                           
  9936                           ;incstack = 0
  9937                           ; Regs used in _DPYInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9938                           ;DPYInit@sta stored from wreg
  9939  16A0  0020               	movlb	0	; select bank0
  9940  16A1  00A3               	movwf	DPYInit@sta
  9941                           
  9942                           ;DPY.c: 44: switch(sta)
  9943  16A2  2EA6               	goto	l4511
  9944  16A3                     l4507:	
  9945                           ;DPY.c: 52: case 2:
  9946                           
  9947                           ;DPY.c: 51: break;
  9948                           
  9949                           ;DPY.c: 49: case 1:
  9950                           
  9951                           ;DPY.c: 48: break;
  9952                           
  9953                           ;DPY.c: 45: {
  9954                           ;DPY.c: 46: case 0:
  9955                           
  9956                           
  9957                           ;DPY.c: 54: DPYInitDisplay();
  9958  16A3  3189  21CE         	fcall	_DPYInitDisplay
  9959                           
  9960                           ;DPY.c: 56: }
  9961                           
  9962                           ;DPY.c: 55: break;
  9963  16A5  0008               	return
  9964  16A6                     l4511:	
  9965  16A6  0020               	movlb	0	; select bank0
  9966  16A7  0823               	movf	DPYInit@sta,w
  9967                           
  9968                           ; Switch size 1, requested type "space"
  9969                           ; Number of cases is 3, Range of values is 0 to 2
  9970                           ; switch strategies available:
  9971                           ; Name         Instructions Cycles
  9972                           ; simple_byte           10     6 (average)
  9973                           ; direct_byte           12     6 (fixed)
  9974                           ; jumptable            260     6 (fixed)
  9975                           ;	Chosen strategy is simple_byte
  9976  16A8  3A00               	xorlw	0	; case 0
  9977  16A9  1903               	skipnz
  9978  16AA  2EB2               	goto	l259
  9979  16AB  3A01               	xorlw	1	; case 1
  9980  16AC  1903               	skipnz
  9981  16AD  2EB2               	goto	l259
  9982  16AE  3A03               	xorlw	3	; case 2
  9983  16AF  1903               	skipnz
  9984  16B0  2EA3               	goto	l4507
  9985  16B1  2EB2               	goto	l259
  9986  16B2                     l259:	
  9987  16B2  0008               	return
  9988  16B3                     __end_of_DPYInit:	
  9989                           
  9990                           	psect	text53
  9991  09CE                     __ptext53:	
  9992 ;; *************** function _DPYInitDisplay *****************
  9993 ;; Defined at:
  9994 ;;		line 60 in file "DPY.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;		None
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;  tmp             1    0        unsigned char 
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;Total ram usage:        1 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    5
 10015 ;; This function calls:
 10016 ;;		_DLYDelay_ms
 10017 ;;		_DPYWriteByte
 10018 ;;		_DPYDrawChar
 10019 ;; This function is called by:
 10020 ;;		_DPYInit
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           
 10025                           ;psect for function _DPYInitDisplay
 10026  09CE                     _DPYInitDisplay:	
 10027                           
 10028                           ;DPY.c: 61: unsigned char tmp;
 10029                           ;DPY.c: 63: DLYDelay_ms(15);
 10030                           
 10031                           ;incstack = 0
 10032                           ; Regs used in _DPYInitDisplay: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10033  09CE  300F               	movlw	15
 10034  09CF  00F1               	movwf	?_DLYDelay_ms
 10035  09D0  3000               	movlw	0
 10036  09D1  00F2               	movwf	?_DLYDelay_ms+1
 10037  09D2  3197  2744  3189   	fcall	_DLYDelay_ms
 10038                           
 10039                           ;DPY.c: 64: LATAbits.LATA6=0;
 10040  09D5  0022               	movlb	2	; select bank2
 10041  09D6  130C               	bcf	12,6	;volatile
 10042                           
 10043                           ;DPY.c: 65: LATAbits.LATA7=0;
 10044  09D7  138C               	bcf	12,7	;volatile
 10045                           
 10046                           ;DPY.c: 94: DPYWriteByte(RS_ISTRUCTION,0b00001110);
 10047  09D8  300E               	movlw	14
 10048  09D9  00FB               	movwf	??_DPYInitDisplay
 10049  09DA  087B               	movf	??_DPYInitDisplay,w
 10050  09DB  00F5               	movwf	?_DPYWriteByte
 10051  09DC  3000               	movlw	0
 10052  09DD  318D  25B9  3189   	fcall	_DPYWriteByte
 10053                           
 10054                           ;DPY.c: 97: DPYWriteByte(RS_ISTRUCTION,0b00000110);
 10055  09E0  3006               	movlw	6
 10056  09E1  00FB               	movwf	??_DPYInitDisplay
 10057  09E2  087B               	movf	??_DPYInitDisplay,w
 10058  09E3  00F5               	movwf	?_DPYWriteByte
 10059  09E4  3000               	movlw	0
 10060  09E5  318D  25B9  3189   	fcall	_DPYWriteByte
 10061                           
 10062                           ;DPY.c: 100: DPYWriteByte(RS_ISTRUCTION,0b00000001);
 10063  09E8  01F5               	clrf	?_DPYWriteByte
 10064  09E9  0AF5               	incf	?_DPYWriteByte,f
 10065  09EA  3000               	movlw	0
 10066  09EB  318D  25B9  3189   	fcall	_DPYWriteByte
 10067                           
 10068                           ;DPY.c: 103: DPYDrawChar(0x00,picBatt);
 10069  09EE  304A               	movlw	_picBatt& (0+255)
 10070  09EF  00FB               	movwf	??_DPYInitDisplay
 10071  09F0  087B               	movf	??_DPYInitDisplay,w
 10072  09F1  00F8               	movwf	?_DPYDrawChar
 10073  09F2  3000               	movlw	0
 10074  09F3  318A  224A         	fcall	_DPYDrawChar
 10075  09F5  0008               	return
 10076  09F6                     __end_of_DPYInitDisplay:	
 10077                           
 10078                           	psect	text54
 10079  0A4A                     __ptext54:	
 10080 ;; *************** function _DPYDrawChar *****************
 10081 ;; Defined at:
 10082 ;;		line 107 in file "DPY.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;  addr            1    wreg     unsigned char 
 10085 ;;  p               1    8[COMMON] PTR unsigned char 
 10086 ;;		 -> picBatt(9), 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  addr            1    0[BANK0 ] unsigned char 
 10089 ;;  i               1    2[BANK0 ] unsigned char 
 10090 ;;  tmpAddr         1    1[BANK0 ] unsigned char 
 10091 ;; Return value:  Size  Location     Type
 10092 ;;		None               void
 10093 ;; Registers used:
 10094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10095 ;; Tracked objects:
 10096 ;;		On entry : 0/0
 10097 ;;		On exit  : 0/0
 10098 ;;		Unchanged: 0/0
 10099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10100 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;Total ram usage:        6 bytes
 10105 ;; Hardware stack levels used:    1
 10106 ;; Hardware stack levels required when called:    4
 10107 ;; This function calls:
 10108 ;;		_DPYWriteByte
 10109 ;; This function is called by:
 10110 ;;		_DPYInitDisplay
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           
 10115                           ;psect for function _DPYDrawChar
 10116  0A4A                     _DPYDrawChar:	
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _DPYDrawChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10120                           ;DPYDrawChar@addr stored from wreg
 10121  0A4A  0020               	movlb	0	; select bank0
 10122  0A4B  00A0               	movwf	DPYDrawChar@addr
 10123                           
 10124                           ;DPY.c: 108: unsigned char i,tmpAddr;
 10125                           ;DPY.c: 110: for(i=0;i<9;i++)
 10126  0A4C  01A2               	clrf	DPYDrawChar@i
 10127  0A4D                     L5:	
 10128  0A4D  3009               	movlw	9
 10129  0A4E  0222               	subwf	DPYDrawChar@i,w
 10130  0A4F  1803               	btfsc	3,0
 10131  0A50  0008               	return
 10132                           
 10133                           ;DPY.c: 111: {
 10134                           ;DPY.c: 112: tmpAddr=(((i+addr)&0b00111111)|0b01000000);
 10135  0A51  0822               	movf	DPYDrawChar@i,w
 10136  0A52  0720               	addwf	DPYDrawChar@addr,w
 10137  0A53  393F               	andlw	63
 10138  0A54  3840               	iorlw	64
 10139  0A55  00F9               	movwf	??_DPYDrawChar
 10140  0A56  0879               	movf	??_DPYDrawChar,w
 10141  0A57  00A1               	movwf	DPYDrawChar@tmpAddr
 10142                           
 10143                           ;DPY.c: 113: DPYWriteByte(RS_ISTRUCTION,tmpAddr);
 10144  0A58  0821               	movf	DPYDrawChar@tmpAddr,w
 10145  0A59  00F9               	movwf	??_DPYDrawChar
 10146  0A5A  0879               	movf	??_DPYDrawChar,w
 10147  0A5B  00F5               	movwf	?_DPYWriteByte
 10148  0A5C  3000               	movlw	0
 10149  0A5D  318D  25B9  318A   	fcall	_DPYWriteByte
 10150                           
 10151                           ;DPY.c: 114: DPYWriteByte(RS_DATA,(*(p+i)));
 10152  0A60  0020               	movlb	0	; select bank0
 10153  0A61  0822               	movf	DPYDrawChar@i,w
 10154  0A62  0778               	addwf	DPYDrawChar@p,w
 10155  0A63  00F9               	movwf	??_DPYDrawChar
 10156  0A64  0879               	movf	??_DPYDrawChar,w
 10157  0A65  0086               	movwf	6
 10158  0A66  3001               	movlw	1	; select bank2/3
 10159  0A67  0087               	movwf	7
 10160  0A68  0801               	movf	1,w
 10161  0A69  00FA               	movwf	??_DPYDrawChar+1
 10162  0A6A  087A               	movf	??_DPYDrawChar+1,w
 10163  0A6B  00F5               	movwf	?_DPYWriteByte
 10164  0A6C  3001               	movlw	1
 10165  0A6D  318D  25B9  318A   	fcall	_DPYWriteByte
 10166  0A70  3001               	movlw	1
 10167  0A71  00F9               	movwf	??_DPYDrawChar
 10168  0A72  0879               	movf	??_DPYDrawChar,w
 10169  0A73  0020               	movlb	0	; select bank0
 10170  0A74  07A2               	addwf	DPYDrawChar@i,f
 10171  0A75  2A4D               	goto	L5
 10172  0A76                     __end_of_DPYDrawChar:	
 10173                           
 10174                           	psect	text55
 10175  0DB9                     __ptext55:	
 10176 ;; *************** function _DPYWriteByte *****************
 10177 ;; Defined at:
 10178 ;;		line 203 in file "DPY.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  rs              1    wreg     enum E1828
 10181 ;;  val             1    5[COMMON] unsigned char 
 10182 ;; Auto vars:     Size  Location     Type
 10183 ;;  rs              1    7[COMMON] enum E1828
 10184 ;; Return value:  Size  Location     Type
 10185 ;;		None               void
 10186 ;; Registers used:
 10187 ;;		wreg, status,2, status,0, pclath, cstack
 10188 ;; Tracked objects:
 10189 ;;		On entry : 0/0
 10190 ;;		On exit  : 0/0
 10191 ;;		Unchanged: 0/0
 10192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10193 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10196 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;Total ram usage:        3 bytes
 10198 ;; Hardware stack levels used:    1
 10199 ;; Hardware stack levels required when called:    3
 10200 ;; This function calls:
 10201 ;;		_OUTSetHTCDataNibble
 10202 ;;		_DLYDelay_us
 10203 ;; This function is called by:
 10204 ;;		_DPYInitDisplay
 10205 ;;		_DPYDrawChar
 10206 ;;		_DPYSetCur
 10207 ;;		_DPYSendChar
 10208 ;; This function uses a non-reentrant model
 10209 ;;
 10210                           
 10211                           
 10212                           ;psect for function _DPYWriteByte
 10213  0DB9                     _DPYWriteByte:	
 10214                           
 10215                           ;incstack = 0
 10216                           ; Regs used in _DPYWriteByte: [wreg+status,2+status,0+pclath+cstack]
 10217                           ;DPYWriteByte@rs stored from wreg
 10218  0DB9  00F7               	movwf	DPYWriteByte@rs
 10219                           
 10220                           ;DPY.c: 205: LATAbits.LATA4=0;
 10221  0DBA  0022               	movlb	2	; select bank2
 10222  0DBB  120C               	bcf	12,4	;volatile
 10223                           
 10224                           ;DPY.c: 208: if(rs==RS_ISTRUCTION)
 10225  0DBC  08F7               	movf	DPYWriteByte@rs,f
 10226  0DBD  1D03               	skipz
 10227  0DBE  2DC1               	goto	l4527
 10228                           
 10229                           ;DPY.c: 209: LATAbits.LATA6=0;
 10230  0DBF  130C               	bcf	12,6	;volatile
 10231  0DC0  2DC5               	goto	l296
 10232  0DC1                     l4527:	
 10233                           
 10234                           ;DPY.c: 210: else if(rs==RS_DATA)
 10235  0DC1  0877               	movf	DPYWriteByte@rs,w
 10236  0DC2  3A01               	xorlw	1
 10237  0DC3  1903               	btfsc	3,2
 10238                           
 10239                           ;DPY.c: 211: LATAbits.LATA6=1;
 10240  0DC4  170C               	bsf	12,6	;volatile
 10241  0DC5                     l296:	
 10242                           
 10243                           ;DPY.c: 214: LATAbits.LATA7=0;
 10244  0DC5  138C               	bcf	12,7	;volatile
 10245                           
 10246                           ;DPY.c: 217: DLYDelay_us(100);
 10247  0DC6  3064               	movlw	100
 10248  0DC7  00F1               	movwf	?_DLYDelay_us
 10249  0DC8  3000               	movlw	0
 10250  0DC9  00F2               	movwf	?_DLYDelay_us+1
 10251  0DCA  3196  268F  318D   	fcall	_DLYDelay_us
 10252                           
 10253                           ;DPY.c: 220: LATAbits.LATA4=1;
 10254  0DCD  0022               	movlb	2	; select bank2
 10255  0DCE  160C               	bsf	12,4	;volatile
 10256                           
 10257                           ;DPY.c: 222: DLYDelay_us(100);
 10258  0DCF  3064               	movlw	100
 10259  0DD0  00F1               	movwf	?_DLYDelay_us
 10260  0DD1  3000               	movlw	0
 10261  0DD2  00F2               	movwf	?_DLYDelay_us+1
 10262  0DD3  3196  268F  318D   	fcall	_DLYDelay_us
 10263                           
 10264                           ;DPY.c: 224: OUTSetHTCDataNibble((val>>4)&0b00001111);
 10265  0DD6  0875               	movf	DPYWriteByte@val,w
 10266  0DD7  00F6               	movwf	??_DPYWriteByte
 10267  0DD8  3004               	movlw	4
 10268  0DD9                     u4595:	
 10269  0DD9  36F6               	lsrf	??_DPYWriteByte,f
 10270  0DDA  0B89               	decfsz	9,f
 10271  0DDB  2DD9               	goto	u4595
 10272  0DDC  0876               	movf	??_DPYWriteByte,w
 10273  0DDD  390F               	andlw	15
 10274  0DDE  3197  27AA  318D   	fcall	_OUTSetHTCDataNibble
 10275                           
 10276                           ;DPY.c: 226: DLYDelay_us(100);
 10277  0DE1  3064               	movlw	100
 10278  0DE2  00F1               	movwf	?_DLYDelay_us
 10279  0DE3  3000               	movlw	0
 10280  0DE4  00F2               	movwf	?_DLYDelay_us+1
 10281  0DE5  3196  268F  318D   	fcall	_DLYDelay_us
 10282                           
 10283                           ;DPY.c: 228: LATAbits.LATA4=0;
 10284  0DE8  0022               	movlb	2	; select bank2
 10285  0DE9  120C               	bcf	12,4	;volatile
 10286                           
 10287                           ;DPY.c: 230: DLYDelay_us(100);
 10288  0DEA  3064               	movlw	100
 10289  0DEB  00F1               	movwf	?_DLYDelay_us
 10290  0DEC  3000               	movlw	0
 10291  0DED  00F2               	movwf	?_DLYDelay_us+1
 10292  0DEE  3196  268F  318D   	fcall	_DLYDelay_us
 10293                           
 10294                           ;DPY.c: 232: LATAbits.LATA4=1;
 10295  0DF1  0022               	movlb	2	; select bank2
 10296  0DF2  160C               	bsf	12,4	;volatile
 10297                           
 10298                           ;DPY.c: 234: DLYDelay_us(100);
 10299  0DF3  3064               	movlw	100
 10300  0DF4  00F1               	movwf	?_DLYDelay_us
 10301  0DF5  3000               	movlw	0
 10302  0DF6  00F2               	movwf	?_DLYDelay_us+1
 10303  0DF7  3196  268F  318D   	fcall	_DLYDelay_us
 10304                           
 10305                           ;DPY.c: 236: OUTSetHTCDataNibble(val&0b00001111);
 10306  0DFA  0875               	movf	DPYWriteByte@val,w
 10307  0DFB  390F               	andlw	15
 10308  0DFC  3197  27AA  318D   	fcall	_OUTSetHTCDataNibble
 10309                           
 10310                           ;DPY.c: 238: DLYDelay_us(100);
 10311  0DFF  3064               	movlw	100
 10312  0E00  00F1               	movwf	?_DLYDelay_us
 10313  0E01  3000               	movlw	0
 10314  0E02  00F2               	movwf	?_DLYDelay_us+1
 10315  0E03  3196  268F  318D   	fcall	_DLYDelay_us
 10316                           
 10317                           ;DPY.c: 240: LATAbits.LATA4=0;
 10318  0E06  0022               	movlb	2	; select bank2
 10319  0E07  120C               	bcf	12,4	;volatile
 10320                           
 10321                           ;DPY.c: 242: DLYDelay_us(100);
 10322  0E08  3064               	movlw	100
 10323  0E09  00F1               	movwf	?_DLYDelay_us
 10324  0E0A  3000               	movlw	0
 10325  0E0B  00F2               	movwf	?_DLYDelay_us+1
 10326  0E0C  3196  268F         	fcall	_DLYDelay_us
 10327  0E0E  0008               	return
 10328  0E0F                     __end_of_DPYWriteByte:	
 10329                           
 10330                           	psect	text56
 10331  168F                     __ptext56:	
 10332 ;; *************** function _DLYDelay_us *****************
 10333 ;; Defined at:
 10334 ;;		line 7 in file "DLY.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;  val             2    1[COMMON] unsigned short 
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;  i               2    3[COMMON] unsigned short 
 10339 ;; Return value:  Size  Location     Type
 10340 ;;		None               void
 10341 ;; Registers used:
 10342 ;;		wreg, status,2
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;Total ram usage:        4 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    2
 10355 ;; This function calls:
 10356 ;;		Nothing
 10357 ;; This function is called by:
 10358 ;;		_DPYWriteByte
 10359 ;;		_DPYIsBusy
 10360 ;;		_DPYWriteNibble
 10361 ;;		_DPYReadByte
 10362 ;; This function uses a non-reentrant model
 10363 ;;
 10364                           
 10365                           
 10366                           ;psect for function _DLYDelay_us
 10367  168F                     _DLYDelay_us:	
 10368                           
 10369                           ;DLY.c: 8: unsigned short i;
 10370                           ;DLY.c: 10: for(i=0;i<val;i++)
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in _DLYDelay_us: [wreg+status,2]
 10374  168F  01F3               	clrf	DLYDelay_us@i
 10375  1690  01F4               	clrf	DLYDelay_us@i+1
 10376  1691                     l88:	
 10377  1691  0872               	movf	DLYDelay_us@val+1,w
 10378  1692  0274               	subwf	DLYDelay_us@i+1,w
 10379  1693  1D03               	skipz
 10380  1694  2E97               	goto	u4555
 10381  1695  0871               	movf	DLYDelay_us@val,w
 10382  1696  0273               	subwf	DLYDelay_us@i,w
 10383  1697                     u4555:	
 10384  1697  1803               	btfsc	3,0
 10385  1698  0008               	return
 10386  1699  0064               	clrwdt	;# 
 10387                           
 10388                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000000.0)));
 10389  169A  2E9B               	nop2	;2 cycle nop
 10390  169B  3001               	movlw	1
 10391  169C  07F3               	addwf	DLYDelay_us@i,f
 10392  169D  3000               	movlw	0
 10393  169E  3DF4               	addwfc	DLYDelay_us@i+1,f
 10394  169F  2E91               	goto	l88
 10395  16A0                     __end_of_DLYDelay_us:	
 10396                           
 10397                           	psect	text57
 10398  17AA                     __ptext57:	
 10399 ;; *************** function _OUTSetHTCDataNibble *****************
 10400 ;; Defined at:
 10401 ;;		line 24 in file "OUT.c"
 10402 ;; Parameters:    Size  Location     Type
 10403 ;;  val             1    wreg     unsigned char 
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;  val             1    2[COMMON] unsigned char 
 10406 ;;  dataToSet       1    3[COMMON] unsigned char 
 10407 ;; Return value:  Size  Location     Type
 10408 ;;		None               void
 10409 ;; Registers used:
 10410 ;;		wreg, status,2, status,0
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;Total ram usage:        3 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    2
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		_DPYWriteByte
 10427 ;;		_DPYWriteNibble
 10428 ;; This function uses a non-reentrant model
 10429 ;;
 10430                           
 10431                           
 10432                           ;psect for function _OUTSetHTCDataNibble
 10433  17AA                     _OUTSetHTCDataNibble:	
 10434                           
 10435                           ;incstack = 0
 10436                           ; Regs used in _OUTSetHTCDataNibble: [wreg+status,2+status,0]
 10437                           ;OUTSetHTCDataNibble@val stored from wreg
 10438  17AA  00F2               	movwf	OUTSetHTCDataNibble@val
 10439                           
 10440                           ;OUT.c: 25: unsigned char dataToSet=0;
 10441  17AB  01F3               	clrf	OUTSetHTCDataNibble@dataToSet
 10442                           
 10443                           ;OUT.c: 27: if(val&0b00000001)
 10444  17AC  1872               	btfsc	OUTSetHTCDataNibble@val,0
 10445                           
 10446                           ;OUT.c: 28: dataToSet|=0b00001000;
 10447  17AD  15F3               	bsf	OUTSetHTCDataNibble@dataToSet,3
 10448                           
 10449                           ;OUT.c: 29: if(val&0b00000010)
 10450  17AE  18F2               	btfsc	OUTSetHTCDataNibble@val,1
 10451                           
 10452                           ;OUT.c: 30: dataToSet|=0b00000100;
 10453  17AF  1573               	bsf	OUTSetHTCDataNibble@dataToSet,2
 10454                           
 10455                           ;OUT.c: 31: if(val&0b00000100)
 10456  17B0  1972               	btfsc	OUTSetHTCDataNibble@val,2
 10457                           
 10458                           ;OUT.c: 32: dataToSet|=0b00000010;
 10459  17B1  14F3               	bsf	OUTSetHTCDataNibble@dataToSet,1
 10460                           
 10461                           ;OUT.c: 33: if(val&0b00001000)
 10462  17B2  19F2               	btfsc	OUTSetHTCDataNibble@val,3
 10463                           
 10464                           ;OUT.c: 34: dataToSet|=0b00000001;
 10465  17B3  1473               	bsf	OUTSetHTCDataNibble@dataToSet,0
 10466                           
 10467                           ;OUT.c: 36: dataToSet&=0b00001111;
 10468  17B4  300F               	movlw	15
 10469  17B5  00F1               	movwf	??_OUTSetHTCDataNibble
 10470  17B6  0871               	movf	??_OUTSetHTCDataNibble,w
 10471  17B7  05F3               	andwf	OUTSetHTCDataNibble@dataToSet,f
 10472                           
 10473                           ;OUT.c: 37: LATA|=dataToSet;
 10474  17B8  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 10475  17B9  00F1               	movwf	??_OUTSetHTCDataNibble
 10476  17BA  0871               	movf	??_OUTSetHTCDataNibble,w
 10477  17BB  0022               	movlb	2	; select bank2
 10478  17BC  048C               	iorwf	12,f	;volatile
 10479                           
 10480                           ;OUT.c: 38: dataToSet|=0b11110000;
 10481  17BD  30F0               	movlw	240
 10482  17BE  00F1               	movwf	??_OUTSetHTCDataNibble
 10483  17BF  0871               	movf	??_OUTSetHTCDataNibble,w
 10484  17C0  04F3               	iorwf	OUTSetHTCDataNibble@dataToSet,f
 10485                           
 10486                           ;OUT.c: 39: LATA&=dataToSet;
 10487  17C1  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 10488  17C2  00F1               	movwf	??_OUTSetHTCDataNibble
 10489  17C3  0871               	movf	??_OUTSetHTCDataNibble,w
 10490  17C4  058C               	andwf	12,f	;volatile
 10491  17C5  0008               	return
 10492  17C6                     __end_of_OUTSetHTCDataNibble:	
 10493                           
 10494                           	psect	text58
 10495  1744                     __ptext58:	
 10496 ;; *************** function _DLYDelay_ms *****************
 10497 ;; Defined at:
 10498 ;;		line 18 in file "DLY.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  val             2    1[COMMON] unsigned short 
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  i               2    5[COMMON] unsigned short 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;		None               void
 10505 ;; Registers used:
 10506 ;;		wreg, status,2
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;Total ram usage:        6 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    2
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_DPYInitDisplay
 10523 ;;		_RTXReadPkt
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _DLYDelay_ms
 10529  1744                     _DLYDelay_ms:	
 10530                           
 10531                           ;DLY.c: 19: unsigned short i;
 10532                           ;DLY.c: 21: for(i=0;i<val;i++)
 10533                           
 10534                           ;incstack = 0
 10535                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
 10536  1744  01F5               	clrf	DLYDelay_ms@i
 10537  1745  01F6               	clrf	DLYDelay_ms@i+1
 10538  1746                     l94:	
 10539  1746  0872               	movf	DLYDelay_ms@val+1,w
 10540  1747  0276               	subwf	DLYDelay_ms@i+1,w
 10541  1748  1D03               	skipz
 10542  1749  2F4C               	goto	u4565
 10543  174A  0871               	movf	DLYDelay_ms@val,w
 10544  174B  0275               	subwf	DLYDelay_ms@i,w
 10545  174C                     u4565:	
 10546  174C  1803               	btfsc	3,0
 10547  174D  0008               	return
 10548  174E  0064               	clrwdt	;# 
 10549                           
 10550                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
 10551  174F  3003               	movlw	3
 10552  1750  00F4               	movwf	??_DLYDelay_ms+1
 10553  1751  3097               	movlw	151
 10554  1752  00F3               	movwf	??_DLYDelay_ms
 10555  1753                     u5687:	
 10556  1753  0BF3               	decfsz	??_DLYDelay_ms,f
 10557  1754  2F53               	goto	u5687
 10558  1755  0BF4               	decfsz	??_DLYDelay_ms+1,f
 10559  1756  2F53               	goto	u5687
 10560  1757  2F58               	nop2
 10561  1758  3001               	movlw	1
 10562  1759  07F5               	addwf	DLYDelay_ms@i,f
 10563  175A  3000               	movlw	0
 10564  175B  3DF6               	addwfc	DLYDelay_ms@i+1,f
 10565  175C  2F46               	goto	l94
 10566  175D                     __end_of_DLYDelay_ms:	
 10567                           
 10568                           	psect	text59
 10569  17E3                     __ptext59:	
 10570 ;; *************** function _DINTask *****************
 10571 ;; Defined at:
 10572 ;;		line 80 in file "DIN.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;		None
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;		None
 10577 ;; Return value:  Size  Location     Type
 10578 ;;		None               void
 10579 ;; Registers used:
 10580 ;;		wreg, status,2, status,0
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;Total ram usage:        1 bytes
 10591 ;; Hardware stack levels used:    1
 10592 ;; Hardware stack levels required when called:    2
 10593 ;; This function calls:
 10594 ;;		Nothing
 10595 ;; This function is called by:
 10596 ;;		_main
 10597 ;; This function uses a non-reentrant model
 10598 ;;
 10599                           
 10600                           
 10601                           ;psect for function _DINTask
 10602  17E3                     _DINTask:	
 10603                           
 10604                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
 10605                           
 10606                           ;incstack = 0
 10607                           ; Regs used in _DINTask: [wreg+status,2+status,0]
 10608  17E3  0020               	movlb	0	; select bank0
 10609  17E4  01EF               	clrf	_u_in_sta_tmpTask
 10610                           
 10611                           ;DIN.c: 82: if(!PORTBbits.RB2)
 10612  17E5  1D0D               	btfss	13,2	;volatile
 10613                           
 10614                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
 10615  17E6  146F               	bsf	_u_in_sta_tmpTask,0
 10616                           
 10617                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
 10618  17E7  086F               	movf	_u_in_sta_tmpTask,w
 10619  17E8  3901               	andlw	1
 10620  17E9  00F1               	movwf	??_DINTask
 10621  17EA  087C               	movf	_u_in_sta_currTask,w
 10622  17EB  3901               	andlw	1
 10623  17EC  0671               	xorwf	??_DINTask,w
 10624  17ED  1903               	skipnz
 10625  17EE  2FF6               	goto	l3215
 10626                           
 10627                           ;DIN.c: 87: {
 10628                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
 10629  17EF  107C               	bcf	_u_in_sta_currTask,0
 10630  17F0  1C6F               	btfss	_u_in_sta_tmpTask,0
 10631  17F1  2FF3               	goto	l3211
 10632  17F2  147C               	bsf	_u_in_sta_currTask,0
 10633  17F3                     l3211:	
 10634                           
 10635                           ;DIN.c: 89: tmrDbncSel=0;
 10636  17F3  0020               	movlb	0	; select bank0
 10637  17F4  01EC               	clrf	_tmrDbncSel
 10638                           
 10639                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
 10640  17F5  146E               	bsf	_u_flg_din,0
 10641  17F6                     l3215:	
 10642                           
 10643                           ;DIN.c: 91: }
 10644                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
 10645  17F6  1C7C               	btfss	_u_in_sta_currTask,0
 10646  17F7  2FFA               	goto	l3219
 10647                           
 10648                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
 10649  17F8  14EE               	bsf	_u_flg_din,1
 10650  17F9  0008               	return
 10651  17FA                     l3219:	
 10652                           
 10653                           ;DIN.c: 96: else
 10654                           ;DIN.c: 97: {
 10655                           ;DIN.c: 98: tmrLongSel=0;
 10656  17FA  0021               	movlb	1	; select bank1
 10657  17FB  01A8               	clrf	_tmrLongSel^(0+128)
 10658  17FC  01A9               	clrf	(_tmrLongSel+1)^(0+128)
 10659                           
 10660                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
 10661  17FD  0020               	movlb	0	; select bank0
 10662  17FE  10EE               	bcf	_u_flg_din,1
 10663  17FF  0008               	return
 10664  1800                     __end_of_DINTask:	
 10665                           
 10666                           	psect	text60
 10667  167E                     __ptext60:	
 10668 ;; *************** function _DINInit *****************
 10669 ;; Defined at:
 10670 ;;		line 25 in file "DIN.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;  sta             1    wreg     unsigned char 
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  sta             1    1[COMMON] unsigned char 
 10675 ;; Return value:  Size  Location     Type
 10676 ;;		None               void
 10677 ;; Registers used:
 10678 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10679 ;; Tracked objects:
 10680 ;;		On entry : 0/0
 10681 ;;		On exit  : 0/0
 10682 ;;		Unchanged: 0/0
 10683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;Total ram usage:        1 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    2
 10691 ;; This function calls:
 10692 ;;		Nothing
 10693 ;; This function is called by:
 10694 ;;		_main
 10695 ;; This function uses a non-reentrant model
 10696 ;;
 10697                           
 10698                           
 10699                           ;psect for function _DINInit
 10700  167E                     _DINInit:	
 10701                           
 10702                           ;incstack = 0
 10703                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
 10704                           ;DINInit@sta stored from wreg
 10705  167E  00F1               	movwf	DINInit@sta
 10706                           
 10707                           ;DIN.c: 26: switch(sta)
 10708  167F  2E89               	goto	l3179
 10709  1680                     l3175:	
 10710                           ;DIN.c: 27: {
 10711                           ;DIN.c: 31: case 1:
 10712                           
 10713                           
 10714                           ;DIN.c: 33: u_flg_din.val=0;
 10715  1680  0020               	movlb	0	; select bank0
 10716  1681  01EE               	clrf	_u_flg_din
 10717                           
 10718                           ;DIN.c: 34: u_in_sta_currTask.val=0;
 10719  1682  01FC               	clrf	_u_in_sta_currTask
 10720                           
 10721                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
 10722  1683  01EF               	clrf	_u_in_sta_tmpTask
 10723                           
 10724                           ;DIN.c: 36: u_in_ev_up.val=0;
 10725  1684  0021               	movlb	1	; select bank1
 10726  1685  01B2               	clrf	_u_in_ev_up^(0+128)
 10727                           
 10728                           ;DIN.c: 37: u_in_ev_down.val=0;
 10729  1686  01B0               	clrf	_u_in_ev_down^(0+128)
 10730                           
 10731                           ;DIN.c: 38: u_in_ev_long.val=0;
 10732  1687  01B1               	clrf	_u_in_ev_long^(0+128)
 10733                           
 10734                           ;DIN.c: 43: }
 10735                           
 10736                           ;DIN.c: 39: break;
 10737  1688  0008               	return
 10738  1689                     l3179:	
 10739  1689  0871               	movf	DINInit@sta,w
 10740                           
 10741                           ; Switch size 1, requested type "space"
 10742                           ; Number of cases is 1, Range of values is 1 to 1
 10743                           ; switch strategies available:
 10744                           ; Name         Instructions Cycles
 10745                           ; simple_byte            4     3 (average)
 10746                           ; direct_byte           11     9 (fixed)
 10747                           ; jumptable            263     9 (fixed)
 10748                           ;	Chosen strategy is simple_byte
 10749  168A  3A01               	xorlw	1	; case 1
 10750  168B  1903               	skipnz
 10751  168C  2E80               	goto	l3175
 10752  168D  2E8E               	goto	l211
 10753  168E                     l211:	
 10754  168E  0008               	return
 10755  168F                     __end_of_DINInit:	
 10756                           
 10757                           	psect	text61
 10758  1624                     __ptext61:	
 10759 ;; *************** function _NVMInit *****************
 10760 ;; Defined at:
 10761 ;;		line 7 in file "NVM.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;  sta             1    wreg     unsigned char 
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;  sta             1    1[COMMON] unsigned char 
 10766 ;; Return value:  Size  Location     Type
 10767 ;;		None               void
 10768 ;; Registers used:
 10769 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/0
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;Total ram usage:        1 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    2
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		_main
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _NVMInit
 10791  1624                     _NVMInit:	
 10792                           
 10793                           ;incstack = 0
 10794                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
 10795                           ;NVMInit@sta stored from wreg
 10796  1624  00F1               	movwf	NVMInit@sta
 10797                           
 10798                           ;NVM.c: 8: switch(sta)
 10799  1625  2E29               	goto	l3087
 10800  1626                     l3083:	
 10801                           ;NVM.c: 9: {
 10802                           ;NVM.c: 10: case 0:
 10803                           
 10804                           
 10805                           ;NVM.c: 12: PMCON1=0b00000000;
 10806  1626  0023               	movlb	3	; select bank3
 10807  1627  0195               	clrf	21	;volatile
 10808                           
 10809                           ;NVM.c: 20: }
 10810                           
 10811                           ;NVM.c: 13: break;
 10812  1628  0008               	return
 10813  1629                     l3087:	
 10814  1629  0871               	movf	NVMInit@sta,w
 10815                           
 10816                           ; Switch size 1, requested type "space"
 10817                           ; Number of cases is 1, Range of values is 0 to 0
 10818                           ; switch strategies available:
 10819                           ; Name         Instructions Cycles
 10820                           ; simple_byte            4     3 (average)
 10821                           ; direct_byte            8     6 (fixed)
 10822                           ; jumptable            260     6 (fixed)
 10823                           ;	Chosen strategy is simple_byte
 10824  162A  3A00               	xorlw	0	; case 0
 10825  162B  1903               	skipnz
 10826  162C  2E26               	goto	l3083
 10827  162D  2E2E               	goto	l154
 10828  162E                     l154:	
 10829  162E  0008               	return
 10830  162F                     __end_of_NVMInit:	
 10831                           
 10832                           	psect	text62
 10833  0AD3                     __ptext62:	
 10834 ;; *************** function _CC1Init *****************
 10835 ;; Defined at:
 10836 ;;		line 78 in file "CC1.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;  state           1    wreg     unsigned char 
 10839 ;; Auto vars:     Size  Location     Type
 10840 ;;  state           1    2[BANK0 ] unsigned char 
 10841 ;; Return value:  Size  Location     Type
 10842 ;;		None               void
 10843 ;; Registers used:
 10844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10845 ;; Tracked objects:
 10846 ;;		On entry : 0/0
 10847 ;;		On exit  : 0/0
 10848 ;;		Unchanged: 0/0
 10849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;Total ram usage:        2 bytes
 10855 ;; Hardware stack levels used:    1
 10856 ;; Hardware stack levels required when called:    4
 10857 ;; This function calls:
 10858 ;;		_CC1Strobe
 10859 ;;		_CC1Write
 10860 ;; This function is called by:
 10861 ;;		_main
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _CC1Init
 10867  0AD3                     _CC1Init:	
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10871                           ;CC1Init@state stored from wreg
 10872  0AD3  0020               	movlb	0	; select bank0
 10873  0AD4  00A2               	movwf	CC1Init@state
 10874                           
 10875                           ;CC1.c: 80: switch(state)
 10876  0AD5  2AF6               	goto	l4475
 10877  0AD6                     l4469:	
 10878                           ;CC1.c: 81: {
 10879                           ;CC1.c: 82: case 0:
 10880                           
 10881                           
 10882                           ;CC1.c: 84: IOCBP=0b00000000; IOCBN=0b00000000;
 10883  0AD6  0027               	movlb	7	; select bank7
 10884  0AD7  0194               	clrf	20	;volatile
 10885  0AD8  0195               	clrf	21	;volatile
 10886                           
 10887                           ;CC1.c: 88: break;
 10888                           
 10889                           ;CC1.c: 86: case 1:
 10890                           
 10891                           ;CC1.c: 85: break;
 10892  0AD9  0008               	return
 10893  0ADA                     l4471:	
 10894                           ;CC1.c: 89: case 2:
 10895                           
 10896                           
 10897                           ;CC1.c: 91: CC1Strobe(SRES);
 10898  0ADA  3030               	movlw	48
 10899  0ADB  3196  26EC  318A   	fcall	_CC1Strobe
 10900                           
 10901                           ;CC1.c: 92: CC1Write(0x00,cc1InitVal,0x2E);
 10902  0ADE  30A0               	movlw	low _cc1InitVal
 10903  0ADF  00F7               	movwf	?_CC1Write
 10904  0AE0  3001               	movlw	high _cc1InitVal
 10905  0AE1  00F8               	movwf	?_CC1Write+1
 10906  0AE2  302E               	movlw	46
 10907  0AE3  00FB               	movwf	??_CC1Init
 10908  0AE4  087B               	movf	??_CC1Init,w
 10909  0AE5  00F9               	movwf	?_CC1Write+2
 10910  0AE6  3000               	movlw	0
 10911  0AE7  3188  20A8  318A   	fcall	_CC1Write
 10912                           
 10913                           ;CC1.c: 93: CC1Write(0x3E,cc1PaTable,8);
 10914  0AEA  3053               	movlw	low _cc1PaTable
 10915  0AEB  00F7               	movwf	?_CC1Write
 10916  0AEC  3001               	movlw	high _cc1PaTable
 10917  0AED  00F8               	movwf	?_CC1Write+1
 10918  0AEE  3008               	movlw	8
 10919  0AEF  00FB               	movwf	??_CC1Init
 10920  0AF0  087B               	movf	??_CC1Init,w
 10921  0AF1  00F9               	movwf	?_CC1Write+2
 10922  0AF2  303E               	movlw	62
 10923  0AF3  3188  20A8         	fcall	_CC1Write
 10924                           
 10925                           ;CC1.c: 95: }
 10926                           
 10927                           ;CC1.c: 94: break;
 10928  0AF5  0008               	return
 10929  0AF6                     l4475:	
 10930  0AF6  0020               	movlb	0	; select bank0
 10931  0AF7  0822               	movf	CC1Init@state,w
 10932                           
 10933                           ; Switch size 1, requested type "space"
 10934                           ; Number of cases is 3, Range of values is 0 to 2
 10935                           ; switch strategies available:
 10936                           ; Name         Instructions Cycles
 10937                           ; simple_byte           10     6 (average)
 10938                           ; direct_byte           12     6 (fixed)
 10939                           ; jumptable            260     6 (fixed)
 10940                           ;	Chosen strategy is simple_byte
 10941  0AF8  3A00               	xorlw	0	; case 0
 10942  0AF9  1903               	skipnz
 10943  0AFA  2AD6               	goto	l4469
 10944  0AFB  3A01               	xorlw	1	; case 1
 10945  0AFC  1903               	skipnz
 10946  0AFD  2B02               	goto	l125
 10947  0AFE  3A03               	xorlw	3	; case 2
 10948  0AFF  1903               	skipnz
 10949  0B00  2ADA               	goto	l4471
 10950  0B01  2B02               	goto	l125
 10951  0B02                     l125:	
 10952  0B02  0008               	return
 10953  0B03                     __end_of_CC1Init:	
 10954                           
 10955                           	psect	text63
 10956  08A8                     __ptext63:	
 10957 ;; *************** function _CC1Write *****************
 10958 ;; Defined at:
 10959 ;;		line 132 in file "CC1.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;  addr            1    wreg     unsigned char 
 10962 ;;  src             2    7[COMMON] PTR unsigned char 
 10963 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
 10964 ;;  len             1    9[COMMON] unsigned char 
 10965 ;; Auto vars:     Size  Location     Type
 10966 ;;  addr            1    0[BANK0 ] unsigned char 
 10967 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
 10968 ;; Return value:  Size  Location     Type
 10969 ;;		None               void
 10970 ;; Registers used:
 10971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10972 ;; Tracked objects:
 10973 ;;		On entry : 0/0
 10974 ;;		On exit  : 0/0
 10975 ;;		Unchanged: 0/0
 10976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10977 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;Total ram usage:        6 bytes
 10982 ;; Hardware stack levels used:    1
 10983 ;; Hardware stack levels required when called:    3
 10984 ;; This function calls:
 10985 ;;		_SPIWrite
 10986 ;; This function is called by:
 10987 ;;		_CC1Init
 10988 ;;		_RTXSndPkt
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           
 10993                           ;psect for function _CC1Write
 10994  08A8                     _CC1Write:	
 10995                           
 10996                           ;incstack = 0
 10997                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10998                           ;CC1Write@addr stored from wreg
 10999  08A8  0020               	movlb	0	; select bank0
 11000  08A9  00A0               	movwf	CC1Write@addr
 11001                           
 11002                           ;CC1.c: 133: unsigned char cc1Addr;
 11003                           ;CC1.c: 136: LATAbits.LATA5=0;
 11004  08AA  0022               	movlb	2	; select bank2
 11005  08AB  128C               	bcf	12,5	;volatile
 11006                           
 11007                           ;CC1.c: 139: cc1Addr=((addr&0b00111111)|0b01000000);
 11008  08AC  0020               	movlb	0	; select bank0
 11009  08AD  0820               	movf	CC1Write@addr,w
 11010  08AE  393F               	andlw	63
 11011  08AF  3840               	iorlw	64
 11012  08B0  00FA               	movwf	??_CC1Write
 11013  08B1  087A               	movf	??_CC1Write,w
 11014  08B2  00A1               	movwf	CC1Write@cc1Addr
 11015                           
 11016                           ;CC1.c: 140: SPIWrite((&(cc1Addr)),1);
 11017  08B3  3021               	movlw	low CC1Write@cc1Addr
 11018  08B4  00F1               	movwf	?_SPIWrite
 11019  08B5  3000               	movlw	high CC1Write@cc1Addr
 11020  08B6  00F2               	movwf	?_SPIWrite+1
 11021  08B7  01F3               	clrf	?_SPIWrite+2
 11022  08B8  0AF3               	incf	?_SPIWrite+2,f
 11023  08B9  3197  27C6  3188   	fcall	_SPIWrite
 11024                           
 11025                           ;CC1.c: 143: SPIWrite(src,len);
 11026  08BC  0878               	movf	CC1Write@src+1,w
 11027  08BD  01F2               	clrf	?_SPIWrite+1
 11028  08BE  07F2               	addwf	?_SPIWrite+1,f
 11029  08BF  0877               	movf	CC1Write@src,w
 11030  08C0  01F1               	clrf	?_SPIWrite
 11031  08C1  07F1               	addwf	?_SPIWrite,f
 11032  08C2  0879               	movf	CC1Write@len,w
 11033  08C3  00FA               	movwf	??_CC1Write
 11034  08C4  087A               	movf	??_CC1Write,w
 11035  08C5  00F3               	movwf	?_SPIWrite+2
 11036  08C6  3197  27C6         	fcall	_SPIWrite
 11037                           
 11038                           ;CC1.c: 146: LATAbits.LATA5=1;
 11039  08C8  0022               	movlb	2	; select bank2
 11040  08C9  168C               	bsf	12,5	;volatile
 11041  08CA  0008               	return
 11042  08CB                     __end_of_CC1Write:	
 11043                           
 11044                           	psect	text64
 11045  16EC                     __ptext64:	
 11046 ;; *************** function _CC1Strobe *****************
 11047 ;; Defined at:
 11048 ;;		line 99 in file "CC1.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  e_stb           1    wreg     enum E1827
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;  e_stb           1    8[COMMON] enum E1827
 11053 ;;  cc1Stb          1    9[COMMON] unsigned char 
 11054 ;;  i               1    0        unsigned char 
 11055 ;; Return value:  Size  Location     Type
 11056 ;;		None               void
 11057 ;; Registers used:
 11058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11059 ;; Tracked objects:
 11060 ;;		On entry : 0/0
 11061 ;;		On exit  : 0/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;Total ram usage:        3 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    3
 11071 ;; This function calls:
 11072 ;;		_SPIWrite
 11073 ;; This function is called by:
 11074 ;;		_CC1Init
 11075 ;;		_RTXInit
 11076 ;;		_RTXTick
 11077 ;;		_RTXSndPkt
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           
 11082                           ;psect for function _CC1Strobe
 11083  16EC                     _CC1Strobe:	
 11084                           
 11085                           ;incstack = 0
 11086                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11087                           ;CC1Strobe@e_stb stored from wreg
 11088  16EC  00F8               	movwf	CC1Strobe@e_stb
 11089                           
 11090                           ;CC1.c: 100: unsigned char cc1Stb,i;
 11091                           ;CC1.c: 103: LATAbits.LATA5=0;
 11092  16ED  0022               	movlb	2	; select bank2
 11093  16EE  128C               	bcf	12,5	;volatile
 11094                           
 11095                           ;CC1.c: 106: cc1Stb=((e_stb&0b00111111)|0b10000000);
 11096  16EF  0878               	movf	CC1Strobe@e_stb,w
 11097  16F0  393F               	andlw	63
 11098  16F1  3880               	iorlw	128
 11099  16F2  00F7               	movwf	??_CC1Strobe
 11100  16F3  0877               	movf	??_CC1Strobe,w
 11101  16F4  00F9               	movwf	CC1Strobe@cc1Stb
 11102                           
 11103                           ;CC1.c: 107: SPIWrite((&(cc1Stb)),1);
 11104  16F5  3079               	movlw	low CC1Strobe@cc1Stb
 11105  16F6  00F1               	movwf	?_SPIWrite
 11106  16F7  3000               	movlw	high CC1Strobe@cc1Stb
 11107  16F8  00F2               	movwf	?_SPIWrite+1
 11108  16F9  01F3               	clrf	?_SPIWrite+2
 11109  16FA  0AF3               	incf	?_SPIWrite+2,f
 11110  16FB  3197  27C6         	fcall	_SPIWrite
 11111                           
 11112                           ;CC1.c: 110: LATAbits.LATA5=1;
 11113  16FD  0022               	movlb	2	; select bank2
 11114  16FE  168C               	bsf	12,5	;volatile
 11115  16FF  0008               	return
 11116  1700                     __end_of_CC1Strobe:	
 11117                           
 11118                           	psect	text65
 11119  17C6                     __ptext65:	
 11120 ;; *************** function _SPIWrite *****************
 11121 ;; Defined at:
 11122 ;;		line 40 in file "SPI.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
 11125 ;;		 -> pktTx(9), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
 11126 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
 11127 ;;  len             1    3[COMMON] unsigned char 
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  i               1    6[COMMON] unsigned char 
 11130 ;; Return value:  Size  Location     Type
 11131 ;;		None               void
 11132 ;; Registers used:
 11133 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11139 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;Total ram usage:        6 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:    2
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_CC1Strobe
 11150 ;;		_CC1Read
 11151 ;;		_CC1Write
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           
 11156                           ;psect for function _SPIWrite
 11157  17C6                     _SPIWrite:	
 11158                           
 11159                           ;SPI.c: 41: unsigned char i;
 11160                           ;SPI.c: 43: for(i=0;i<len;i++)
 11161                           
 11162                           ;incstack = 0
 11163                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 11164  17C6  01F6               	clrf	SPIWrite@i
 11165  17C7                     l4457:	
 11166  17C7  0873               	movf	SPIWrite@len,w
 11167  17C8  0276               	subwf	SPIWrite@i,w
 11168  17C9  1803               	btfsc	3,0
 11169  17CA  0008               	return
 11170                           
 11171                           ;SPI.c: 44: {
 11172                           ;SPI.c: 45: PIR1bits.SSPIF=0;
 11173  17CB  0020               	movlb	0	; select bank0
 11174  17CC  1191               	bcf	17,3	;volatile
 11175                           
 11176                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
 11177  17CD  0876               	movf	SPIWrite@i,w
 11178  17CE  00F4               	movwf	??_SPIWrite
 11179  17CF  01F5               	clrf	??_SPIWrite+1
 11180  17D0  0874               	movf	??_SPIWrite,w
 11181  17D1  0771               	addwf	SPIWrite@srcPtr,w
 11182  17D2  0086               	movwf	6
 11183  17D3  0875               	movf	??_SPIWrite+1,w
 11184  17D4  3D72               	addwfc	SPIWrite@srcPtr+1,w
 11185  17D5  0087               	movwf	7
 11186  17D6  0801               	movf	1,w
 11187  17D7  0024               	movlb	4	; select bank4
 11188  17D8  0091               	movwf	17	;volatile
 11189  17D9                     l79:	
 11190                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
 11191                           
 11192  17D9  0020               	movlb	0	; select bank0
 11193  17DA  1991               	btfsc	17,3	;volatile
 11194  17DB  2FDE               	goto	l4455
 11195                           
 11196                           ;SPI.c: 48: _nop();
 11197  17DC  0000               	nop
 11198  17DD  2FD9               	goto	l79
 11199  17DE                     l4455:	
 11200  17DE  3001               	movlw	1
 11201  17DF  00F4               	movwf	??_SPIWrite
 11202  17E0  0874               	movf	??_SPIWrite,w
 11203  17E1  07F6               	addwf	SPIWrite@i,f
 11204  17E2  2FC7               	goto	l4457
 11205  17E3                     __end_of_SPIWrite:	
 11206                           
 11207                           	psect	text66
 11208  0868                     __ptext66:	
 11209 ;; *************** function _SPIInit *****************
 11210 ;; Defined at:
 11211 ;;		line 9 in file "SPI.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;  state           1    wreg     unsigned char 
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;  state           1    2[COMMON] unsigned char 
 11216 ;; Return value:  Size  Location     Type
 11217 ;;		None               void
 11218 ;; Registers used:
 11219 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;Total ram usage:        2 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    2
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		_main
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           
 11240                           ;psect for function _SPIInit
 11241  0868                     _SPIInit:	
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
 11245                           ;SPIInit@state stored from wreg
 11246  0868  00F2               	movwf	SPIInit@state
 11247                           
 11248                           ;SPI.c: 10: switch(state)
 11249  0869  287A               	goto	l3015
 11250  086A                     l61:	
 11251                           ;SPI.c: 11: {
 11252                           ;SPI.c: 12: case 0:
 11253                           
 11254                           
 11255                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
 11256  086A  0021               	movlb	1	; select bank1
 11257  086B  160E               	bsf	14,4	;volatile
 11258  086C  30D7               	movlw	215
 11259  086D  00F1               	movwf	??_SPIInit
 11260  086E  0871               	movf	??_SPIInit,w
 11261  086F  058E               	andwf	14,f	;volatile
 11262  0870  0024               	movlb	4	; select bank4
 11263  0871  1295               	bcf	21,5	;volatile
 11264  0872  0191               	clrf	17	;volatile
 11265  0873  3001               	movlw	1
 11266  0874  0095               	movwf	21	;volatile
 11267  0875  0196               	clrf	22	;volatile
 11268  0876  3040               	movlw	64
 11269  0877  0094               	movwf	20	;volatile
 11270  0878  1695               	bsf	21,5	;volatile
 11271                           
 11272                           ;SPI.c: 22: }
 11273                           
 11274                           ;SPI.c: 21: break;
 11275                           
 11276                           ;SPI.c: 19: case 2:
 11277                           
 11278                           ;SPI.c: 18: break;
 11279                           
 11280                           ;SPI.c: 16: case 1:
 11281                           
 11282                           ;SPI.c: 15: break;
 11283  0879  0008               	return
 11284  087A                     l3015:	
 11285  087A  0872               	movf	SPIInit@state,w
 11286                           
 11287                           ; Switch size 1, requested type "space"
 11288                           ; Number of cases is 3, Range of values is 0 to 2
 11289                           ; switch strategies available:
 11290                           ; Name         Instructions Cycles
 11291                           ; simple_byte           10     6 (average)
 11292                           ; direct_byte           12     6 (fixed)
 11293                           ; jumptable            260     6 (fixed)
 11294                           ;	Chosen strategy is simple_byte
 11295  087B  3A00               	xorlw	0	; case 0
 11296  087C  1903               	skipnz
 11297  087D  286A               	goto	l61
 11298  087E  3A01               	xorlw	1	; case 1
 11299  087F  1903               	skipnz
 11300  0880  2885               	goto	l65
 11301  0881  3A03               	xorlw	3	; case 2
 11302  0882  1903               	skipnz
 11303  0883  2885               	goto	l65
 11304  0884  2885               	goto	l65
 11305  0885                     l65:	
 11306  0885  0008               	return
 11307  0886                     __end_of_SPIInit:	
 11308                           
 11309                           	psect	text67
 11310  172D                     __ptext67:	
 11311 ;; *************** function _OUTInit *****************
 11312 ;; Defined at:
 11313 ;;		line 7 in file "OUT.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;  sta             1    wreg     unsigned char 
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;  sta             1    2[COMMON] unsigned char 
 11318 ;; Return value:  Size  Location     Type
 11319 ;;		None               void
 11320 ;; Registers used:
 11321 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;Total ram usage:        2 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    2
 11334 ;; This function calls:
 11335 ;;		Nothing
 11336 ;; This function is called by:
 11337 ;;		_main
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           
 11342                           ;psect for function _OUTInit
 11343  172D                     _OUTInit:	
 11344                           
 11345                           ;incstack = 0
 11346                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 11347                           ;OUTInit@sta stored from wreg
 11348  172D  00F2               	movwf	OUTInit@sta
 11349                           
 11350                           ;OUT.c: 8: switch(sta)
 11351  172E  2F3E               	goto	l2975
 11352  172F                     l2967:	
 11353                           ;OUT.c: 9: {
 11354                           ;OUT.c: 10: case 0:
 11355                           
 11356                           
 11357                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00000111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00000000; ANSELC&=0b00000000;
 11358  172F  0021               	movlb	1	; select bank1
 11359  1730  018C               	clrf	12	;volatile
 11360  1731  3007               	movlw	7
 11361  1732  00F1               	movwf	??_OUTInit
 11362  1733  0871               	movf	??_OUTInit,w
 11363  1734  058D               	andwf	13,f	;volatile
 11364  1735  3010               	movlw	16
 11365  1736  00F1               	movwf	??_OUTInit
 11366  1737  0871               	movf	??_OUTInit,w
 11367  1738  058E               	andwf	14,f	;volatile
 11368  1739  0023               	movlb	3	; select bank3
 11369  173A  018C               	clrf	12	;volatile
 11370  173B  018D               	clrf	13	;volatile
 11371  173C  018E               	clrf	14	;volatile
 11372                           
 11373                           ;OUT.c: 20: }
 11374                           
 11375                           ;OUT.c: 13: break;
 11376  173D  0008               	return
 11377  173E                     l2975:	
 11378  173E  0872               	movf	OUTInit@sta,w
 11379                           
 11380                           ; Switch size 1, requested type "space"
 11381                           ; Number of cases is 1, Range of values is 0 to 0
 11382                           ; switch strategies available:
 11383                           ; Name         Instructions Cycles
 11384                           ; simple_byte            4     3 (average)
 11385                           ; direct_byte            8     6 (fixed)
 11386                           ; jumptable            260     6 (fixed)
 11387                           ;	Chosen strategy is simple_byte
 11388  173F  3A00               	xorlw	0	; case 0
 11389  1740  1903               	skipnz
 11390  1741  2F2F               	goto	l2967
 11391  1742  2F43               	goto	l34
 11392  1743                     l34:	
 11393  1743  0008               	return
 11394  1744                     __end_of_OUTInit:	
 11395                           
 11396                           	psect	text68
 11397  1716                     __ptext68:	
 11398 ;; *************** function _INInit *****************
 11399 ;; Defined at:
 11400 ;;		line 7 in file "IN.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;  sta             1    wreg     unsigned char 
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;  sta             1    2[COMMON] unsigned char 
 11405 ;; Return value:  Size  Location     Type
 11406 ;;		None               void
 11407 ;; Registers used:
 11408 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;Total ram usage:        2 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:    2
 11421 ;; This function calls:
 11422 ;;		Nothing
 11423 ;; This function is called by:
 11424 ;;		_main
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           
 11429                           ;psect for function _INInit
 11430  1716                     _INInit:	
 11431                           
 11432                           ;incstack = 0
 11433                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 11434                           ;INInit@sta stored from wreg
 11435  1716  00F2               	movwf	INInit@sta
 11436                           
 11437                           ;IN.c: 8: switch(sta)
 11438  1717  2F27               	goto	l2963
 11439  1718                     l2955:	
 11440                           ;IN.c: 9: {
 11441                           ;IN.c: 10: case 0:
 11442                           
 11443                           
 11444                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELB&=0b11111000; WPUB=0b00000111;
 11445  1718  3007               	movlw	7
 11446  1719  00F1               	movwf	??_INInit
 11447  171A  0871               	movf	??_INInit,w
 11448  171B  0021               	movlb	1	; select bank1
 11449  171C  048D               	iorwf	13,f	;volatile
 11450  171D  160E               	bsf	14,4	;volatile
 11451  171E  30F8               	movlw	248
 11452  171F  00F1               	movwf	??_INInit
 11453  1720  0871               	movf	??_INInit,w
 11454  1721  0023               	movlb	3	; select bank3
 11455  1722  058D               	andwf	13,f	;volatile
 11456  1723  3007               	movlw	7
 11457  1724  0024               	movlb	4	; select bank4
 11458  1725  008D               	movwf	13	;volatile
 11459                           
 11460                           ;IN.c: 20: }
 11461                           
 11462                           ;IN.c: 13: break;
 11463  1726  0008               	return
 11464  1727                     l2963:	
 11465  1727  0872               	movf	INInit@sta,w
 11466                           
 11467                           ; Switch size 1, requested type "space"
 11468                           ; Number of cases is 1, Range of values is 0 to 0
 11469                           ; switch strategies available:
 11470                           ; Name         Instructions Cycles
 11471                           ; simple_byte            4     3 (average)
 11472                           ; direct_byte            8     6 (fixed)
 11473                           ; jumptable            260     6 (fixed)
 11474                           ;	Chosen strategy is simple_byte
 11475  1728  3A00               	xorlw	0	; case 0
 11476  1729  1903               	skipnz
 11477  172A  2F18               	goto	l2955
 11478  172B  2F2C               	goto	l14
 11479  172C                     l14:	
 11480  172C  0008               	return
 11481  172D                     __end_of_INInit:	
 11482                           
 11483                           	psect	intentry
 11484  0004                     __pintentry:	
 11485 ;; *************** function _INTIsr *****************
 11486 ;; Defined at:
 11487 ;;		line 38 in file "Base.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;		None
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;		None
 11492 ;; Return value:  Size  Location     Type
 11493 ;;		None               void
 11494 ;; Registers used:
 11495 ;;		wreg, status,2, status,0, pclath, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11503 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;Total ram usage:        1 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    1
 11508 ;; This function calls:
 11509 ;;		_SYSInt
 11510 ;; This function is called by:
 11511 ;;		Interrupt level 1
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515  0004                     _INTIsr:	
 11516                           
 11517                           ;incstack = 0
 11518                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 11519  0004  3180               	pagesel	$
 11520  0005  0020               	movlb	0	; select bank0
 11521  0006  087F               	movf	127,w
 11522  0007  00F0               	movwf	??_INTIsr
 11523                           
 11524                           ;Base.c: 40: if(INTCONbits.T0IF==1)
 11525  0008  1D0B               	btfss	11,2	;volatile
 11526  0009  280D               	goto	i1l661
 11527                           
 11528                           ;Base.c: 41: {
 11529                           ;Base.c: 43: INTCONbits.T0IF=0;
 11530  000A  110B               	bcf	11,2	;volatile
 11531                           
 11532                           ;Base.c: 46: SYSInt();
 11533  000B  3195  25E5         	fcall	_SYSInt
 11534  000D                     i1l661:	
 11535  000D  0870               	movf	??_INTIsr,w
 11536  000E  0020               	movlb	0	; select bank0
 11537  000F  00FF               	movwf	127
 11538  0010  0009               	retfie
 11539  0011                     __end_of_INTIsr:	
 11540                           
 11541                           	psect	text70
 11542  15E5                     __ptext70:	
 11543 ;; *************** function _SYSInt *****************
 11544 ;; Defined at:
 11545 ;;		line 33 in file "SYS.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;		None
 11548 ;; Auto vars:     Size  Location     Type
 11549 ;;		None
 11550 ;; Return value:  Size  Location     Type
 11551 ;;		None               void
 11552 ;; Registers used:
 11553 ;;		wreg
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/0
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;Total ram usage:        0 bytes
 11564 ;; Hardware stack levels used:    1
 11565 ;; This function calls:
 11566 ;;		Nothing
 11567 ;; This function is called by:
 11568 ;;		_INTIsr
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           
 11573                           ;psect for function _SYSInt
 11574  15E5                     _SYSInt:	
 11575                           
 11576                           ;SYS.c: 35: u_SYS_STA.TICK=1;
 11577                           
 11578                           ;incstack = 0
 11579                           ; Regs used in _SYSInt: [wreg]
 11580  15E5  0021               	movlb	1	; select bank1
 11581  15E6  142F               	bsf	_u_SYS_STA^(0+128),0
 11582                           
 11583                           ;SYS.c: 38: TMR0=255-156;
 11584  15E7  3063               	movlw	99
 11585  15E8  0020               	movlb	0	; select bank0
 11586  15E9  0095               	movwf	21	;volatile
 11587  15EA  0008               	return
 11588  15EB                     __end_of_SYSInt:	
 11589  007E                     btemp	set	126	;btemp
 11590  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    45
    Data        64
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     75      80
    BANK1            80     26      75
    BANK2            80      0      59
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___lbtoft	float  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?_utoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ?___ftsub	float  size(1) Largest target is 0

    ?___lltoft	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftneg	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftpack	float  size(1) Largest target is 0

    ?___lldiv	unsigned long  size(1) Largest target is 0

    ?___llmod	unsigned long  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> RTXUpdateDisplay@status(BANK1[2]), 

    ?_ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ?_itoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ?_sprintf	int  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S909$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK2[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    RTXUpdateDisplay@p	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    DPYSendStr@data	PTR unsigned char  size(2) Largest target is 16
		 -> strTemp(BANK2[16]), strTitle(BANK1[16]), 

    DPYDrawChar@p	PTR unsigned char  size(1) Largest target is 9
		 -> picBatt(BANK2[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    CC1Read@dst	PTR unsigned char  size(2) Largest target is 9
		 -> pktRx(BANK2[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXReadPkt@tmp(BANK0[1]), RTXReadPkt@sta(BANK0[1]), 
		 -> RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(2) Largest target is 9
		 -> pktRx(BANK2[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXReadPkt@tmp(BANK0[1]), RTXReadPkt@sta(BANK0[1]), 
		 -> RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _RTXSendPgm->_RTXSndPkt
    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_PGMWriteNvm
    _RTXReadPkt->_RTXRcvPkt
    _RTXReadPkt->___lbtoft
    ___lbtoft->___ftpack
    _RTXSendRData->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _RTXSndPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIRead
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _sprintf->___llmod
    ___llmod->___lldiv
    _itoa->_utoa
    _utoa->___lwdiv
    _DPYSendStr->_DPYSetCur
    _DPYIsBusy->_DLYDelay_us
    _DPYSendChar->_DPYWriteByte
    _DPYSetCur->_DPYWriteByte
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar
    _DPYDrawChar->_DPYWriteByte
    _DPYWriteByte->_DLYDelay_us
    _CC1Init->_CC1Write
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelLong
    _RTXPgmOn->_RTXUpdateDisplay
    _RTXTick->_RTXSendPgm
    _RTXSendPgm->_RTXSndPkt
    _RTXTask->_RTXReadPkt
    _RTXSendRData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _RTXPgmOff->_RTXUpdateDisplay
    _RTXRcvPkt->_CC1Read
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_ftoa
    _ftoa->_sprintf
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _sprintf->___llmod
    ___llmod->___lldiv
    _itoa->_utoa
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite
    _DPYInitDisplay->_DPYDrawChar
    _CC1Init->_CC1Write

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXPgmOn->_RTXUpdateDisplay
    _RTXReadPkt->_RTXUpdateDisplay
    _RTXPgmOff->_RTXUpdateDisplay
    _RTXInit->_RTXUpdateDisplay

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   55671
                                             73 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _CC1Init
                            _NVMInit
                            _DINInit
                            _DINTask
                            _DPYInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   21574
                            _DINTick
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _RTXTick
                          _RTXPgmOff
                           _RTXPgmOn
 ---------------------------------------------------------------------------------
 (2) _RTXPgmOn                                             0     0      0   10394
                   _RTXUpdateDisplay
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    1315
                          _CC1Strobe
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    1117
                                             10 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
                          _PGMPgmOff
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   21716
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           4     4      0   21716
                                             69 BANK0      4     4      0
                        _DLYDelay_ms
                            _CC1Read
                        _PGMWriteNvm
                   _RTXUpdateDisplay
                          _RTXRcvPkt
                          _RTXPgmOff
                       _RTXSendRData
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3     343
                                              9 COMMON     3     0      3
                                              0 BANK0      5     5      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RTXSendRData                                         1     1      0    1117
                                             10 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    1117
                                             11 COMMON     1     0      1
                                              5 BANK0      5     5      0
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (2) _RTXPgmOff                                            0     0      0    9277
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            3     2      1     452
                                             11 COMMON     1     0      1
                                              5 BANK0      2     2      0
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              6     3      3     390
                                             10 COMMON     1     1      0
                                              0 BANK0      5     2      3
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              9     6      3     130
                                              1 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0    9506
                                             57 BANK0      1     1      0
                          _CC1Strobe
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _RTXUpdateDisplay                                    30    30      0    9277
                                             53 BANK0      4     4      0
                                              0 BANK1     26    26      0
                         _DPYSendStr
                               _itoa
                               _ftoa
                            ___awdiv
                             ___ftge
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     300
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (4) _ftoa                                                14    10      4    4969
                                             39 BANK0     14    10      4
                            _sprintf
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4     414
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     252
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    1602
                                             10 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    1537
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3      45
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6     800
                                              0 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     136
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             26    17      9    1392
                                             13 BANK0     26    17      9
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4      92
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___llmod                                             10     2      8     159
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     162
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 7     3      4     994
                                             10 COMMON     1     1      0
                                              8 BANK0      6     2      4
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     5      4     761
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              6     2      4     159
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     162
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _DPYSendStr                                           8     4      4    1426
                                              0 BANK0      8     4      4
                          _DPYSetCur
                        _DPYSendChar
                          _DPYIsBusy
 ---------------------------------------------------------------------------------
 (5) _DPYIsBusy                                            2     2      0     105
                                              5 COMMON     2     2      0
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (5) _DPYSendChar                                          2     2      0     430
                                              8 COMMON     2     2      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYSetCur                                            4     3      1     498
                                              8 COMMON     4     3      1
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DPYInit                                              1     1      0    1123
                                              3 BANK0      1     1      0
                     _DPYInitDisplay
 ---------------------------------------------------------------------------------
 (2) _DPYInitDisplay                                       2     2      0    1092
                                             11 COMMON     1     1      0
                        _DLYDelay_ms
                       _DPYWriteByte
                        _DPYDrawChar
 ---------------------------------------------------------------------------------
 (3) _DPYDrawChar                                          6     5      1     625
                                              8 COMMON     3     2      1
                                              0 BANK0      3     3      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (6) _DPYWriteByte                                         3     2      1     399
                                              5 COMMON     3     2      1
                _OUTSetHTCDataNibble
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (6) _DLYDelay_us                                          4     2      2      68
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _OUTSetHTCDataNibble                                  3     3      0     207
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC1Init                                              2     2      0     489
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTIsr                                               1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (10) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _NVMInit
   _DINInit
   _DINTask
   _DPYInit
     _DPYInitDisplay
       _DLYDelay_ms
       _DPYWriteByte
         _OUTSetHTCDataNibble
         _DLYDelay_us
       _DPYDrawChar
         _DPYWriteByte
           _OUTSetHTCDataNibble
           _DLYDelay_us
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXUpdateDisplay
       _DPYSendStr
         _DPYSetCur
           _DPYWriteByte
             _OUTSetHTCDataNibble
             _DLYDelay_us
         _DPYSendChar
           _DPYWriteByte
             _OUTSetHTCDataNibble
             _DLYDelay_us
         _DPYIsBusy
           _DLYDelay_us
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _ftoa
         _sprintf
           _isdigit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
       ___awdiv
       ___ftge
   _RTXTask
     _RTXReadPkt
       _DLYDelay_ms
       _CC1Read
         _SPIRead
         _SPIWrite
       _PGMWriteNvm
         _NVMWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _ftoa
           _sprintf
             _isdigit
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
         ___awdiv
         ___ftge
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYSetCur
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYIsBusy
               _DLYDelay_us
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
           ___ftge
       _RTXSendRData
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
       ___lbtoft
         ___ftpack
   _SYSInit
   _SYSTask
     _DINTick
     _PGMTick
       _PGMPgmOff
     _PGMPgmOff
     _PGMSelDown
     _PGMSelLong
       _PGMWriteNvm
         _NVMWrite
     _RTXTick
       _CC1Strobe
         _SPIWrite
       _RTXSendPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
     _RTXPgmOff
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _ftoa
           _sprintf
             _isdigit
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
         ___awdiv
         ___ftge
     _RTXPgmOn
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _ftoa
           _sprintf
             _isdigit
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
         ___awdiv
         ___ftge
       _RTXSendPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1A      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3B       9       73.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     112      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 06 00:42:59 2014

          __size_of_CC1Strobe 0014                    __CFG_CP$ON 0000                            l14 172C  
                          l34 1743                            l61 086A                            l70 098B  
                          l65 0885                            l94 1746                            l79 17D9  
                          l88 1691                  ___awdiv@sign 0077           ___wmul@multiplicand 0073  
                ?_DLYDelay_ms 0071                  ?_DLYDelay_us 0071                  ___ftadd@exp1 007B  
                ___ftadd@exp2 007A                  ___ftadd@sign 0079                           l211 168E  
                         l125 0B02                           l214 09BB                           l216 09B9  
                         l154 162E                           l170 05EB                           l181 0661  
                         l173 0611                           l166 05D1                           l159 094A  
                         l183 0668                           l176 061A                           l168 05DC  
                         l169 0600                           l186 067A                           l259 16B2  
                         l452 0980                           l359 178F                           l296 0DC5  
                         l482 023B                           l493 0D66                           l478 01D4  
                         l591 08ED                           l664 0C76                           l665 0CB2  
                         l666 0CB3                           l870 0E58                           l695 0390  
                         l864 0E41                           l698 03A8                           l980 0ECE  
                         l893 0569               __end_of_CC1Init 0B03               __end_of_CC1Read 0935  
                __CFG_BORV$LO 0000                           wreg 0009                    _RTXReadPkt 0F6C  
             __end_of_DINInit 168F            DPYDrawChar@tmpAddr 0021               __end_of_DINTask 1800  
             __end_of_DINTick 09CE                  __CFG_LVP$OFF 0000                    _RTXSendPgm 08EE  
                 ?_DPYSendStr 0020                          l3101 0938                          l3015 087A  
                        l1097 0853                          l4001 0D1B                          l3211 17F3  
                        l3215 17F6                          l4007 0D26                          l4113 0B7F  
                        l4033 0D5D                          l4025 0D4C                          l4017 0D2E  
                        l3083 1626                          l3219 17FA                          l3163 0663  
                        l3171 0675                          l3155 0643                          l4019 0D3A  
                        l3149 063D                          l4301 0BED                          l4117 0B95  
                        l4029 0D55                          l3087 1629                          l3175 1680  
                        l4303 0BFB                          l4311 0C1E                          l5023 0B10  
             __end_of_DPYInit 16B3                          l5121 04F9                          l4233 0F63  
                        l4225 0F49                          l4217 0F2E                          l5041 0B25  
                        l3179 1689                          l4307 0C13                          l4227 0F52  
                        l4219 0F3C                          l5035 0B1E                          l5221 070A  
                        l5205 06E6                          l5117 04F2                          l4229 0F55  
                        l5029 0B17                          l4511 16A6                          l4343 0B59  
                        l4335 0B3B                          l5151 0548                          l5127 0508  
                        l5047 0B2C                          l4337 0B47                          l4361 0A88  
                        l5217 0702                          l5209 06EE                          l5145 0535  
                        l4507 16A3                          l4611 0BBC                          l4347 0B62  
                        l4291 0D08                          l5091 0E2D                          l5083 0E17  
                        l5163 057B                          l5147 053F                          l5139 0522  
                        l4365 0A94                          l4277 0CCF                          l5157 055B  
                        l5149 0544                          l4445 0990                          l4455 17DE  
                        l4471 0ADA                          l4527 0DC1                          l4359 0A7C  
                        l5239 0E77                          l4287 0CFD                          l4279 0CDD  
                        l4375 084D                          l3903 03D6                          l5087 0E1E  
                        l5167 058D                          l5159 0565                          l4199 0EFE  
                        l4457 17C7                          l4561 170D                          l4369 0A9D  
                        l5249 0E9C                          l5097 0E46                          l5089 0E28  
                        l5193 06AB                          l5177 05A8                          l4449 0982  
                        l2955 1718                          l2963 1727                          l4475 0AF6  
                        l4571 0C44                          l3923 043A                          l3915 040B  
                        l3907 03DC                          l5099 0E4E                          l5187 0695  
                        l5275 0A23                          l3755 08CD                          l4469 0AD6  
                        l4573 0C4C                          l3861 031F                          l5277 0A35  
                        l4805 01F6                          l4733 004A                          l4717 095E  
                        l4725 0974                          l3773 08E5                          l2967 172F  
                        l2975 173E                          l4583 0C5B                          l4591 0C33  
                        l3943 04B7                          l3927 0457                          l3919 0422  
                        l3855 0310                          l4831 0267                          l4823 0247  
                        l4815 021E                          l4751 0078                          l4719 0964  
                        l4681 1779                          l3937 046F                          l3929 045A  
                        l3881 038C                          l3945 02F4                          l4833 0282  
                        l4745 0063                          l3769 08E2                          l4683 177C  
                        l4691 1786                          l3883 0392                          l3947 04C4  
                        l4843 02E0                          l4755 0080                          l4739 005E  
                        l4931 0F90                          l4589 0C6A                          l3893 03B7  
                        l3869 034F                          l4917 0FC7                          l4943 0A0F  
                        l3959 165E                          l3887 0397                          l3879 035D  
                        l4839 02B2                          l4697 1643                          l4769 010A  
                        l4929 0FF4                          l4857 07F3                          l4795 01BF  
                        l4779 0147                          l4957 0765                          l4981 0D7F  
                        STR_1 082E                  __CFG_WDTE$ON 0000             NVMWrite@bufTmpRow 0020  
                        _LATA 010C                          u4025 0F05                          u3315 041A  
                        u3325 0432                          u3335 044A                          u4055 0F2F  
                        _PIE1 0091                          _PIE2 0092                          u4305 0B3E  
                        u4225 0BF0                          u4155 0CD2                          u4325 0B48  
                        u4405 0A95                          u4245 0C09                          u3365 047E  
                        u3285 03E3                          u4085 0F4A                          u4335 0B52  
                        u4175 0CDE                          u4255 0C14                          u3375 04C1  
                        u3295 0401                          u5215 0E3C                          u4345 0B5A  
                        u4185 0CF2                          u4195 0CFE                          u4435 0854  
                        u5235 0E49                          u3555 0D31                          u4445 0859  
                        u5405 0536                          u4375 0A7F                          u3575 0D3B  
                        u5265 0E5F                          u3585 0D45                          u4555 1697  
                        u4395 0A8E                          u5195 0E23                          u5435 0549  
                        u3595 0D4D                          u4565 174C                          u5605 070B  
                        u5615 0711                          u5535 06B7                          u5375 0523  
                        u5545 06C7                          u5465 055C                          _PIR1 0011  
                        _PIR2 0012                          u4595 0DD9                          u5565 06EF  
                        u5575 06F5                          u4855 01F3                          u5665 0A29  
                        u5687 1753                          _TMR0 0015                          _WPUB 020D  
             __end_of_PGMInit 1790               __end_of_PGMTick 167E                  __CFG_WRT$OFF 0000  
               __CFG_FCMEN$ON 0000                          _batt 00A0                          _main 0C70  
            __end_of_CC1Write 08CB                          _ftoa 0732                  ___ftpack@arg 0071  
             __end_of_NVMInit 162F               __end_of_NVMRead 095B                          _itoa 09F6  
                ___ftpack@exp 0074                          _temp 00A3               __end_of_SPIInit 0886  
             __end_of_SPIRead 09A7                          fsr0h 0005                          fsr1h 0007  
                        fsr0l 0004                          indf0 0000                          indf1 0001  
                        fsr1l 0006                          btemp 007E                          _utoa 0E6F  
             __end_of_OUTInit 1744                  ?_DPYDrawChar 0078                 __CFG_BOREN$ON 0000  
                        start 0011               __end_of_RTXInit 0981             NVMWrite@latchAddr 0063  
             __end_of_RTXTask 15F1               __end_of_RTXTick 0800                 __CFG_IESO$OFF 0000  
             __end_of_SYSInit 08EE               __end_of_SYSTask 0B33            __size_of_DPYIsBusy 0040  
                ___ftmul@cntr 002E                  ___ftmul@sign 002F            __size_of_DPYSetCur 0016  
                 ?_PGMReadNvm 0070                 __CFG_LPBOR$ON 0000                   ?_PGMSelDown 0070  
                ___fttol@exp1 003D                   ?_PGMSelLong 0070                  ?_DPYSendChar 0070  
                ___fttol@lval 0039                  SPIInit@state 0072                         ?_main 0070  
                       ?_ftoa 0047                         ?_itoa 0028               __end_of___awdiv 0D64  
             __end_of___ftadd 05C0               __end_of___ftneg 1612               __end_of___lldiv 0D11  
                       ?_utoa 0020               __end_of___ftmul 0732               ___awdiv@divisor 0071  
                       _T1CON 0018               __end_of___llmod 0C27               __end_of___ftsub 1776  
             __end_of___fttol 0F6C            __size_of_PGMPgmOff 0006                         _IOCBN 0395  
                       _IOCBP 0394               __end_of___lwdiv 0B69               __end_of___lwmod 0AA4  
                       i1l661 000D               ___awdiv@counter 0076                         _PMADR 0191  
                       _PMDAT 0193                         _TMR1H 0017                         _TMR1L 0016  
                       _TRISA 008C                         _TRISB 008D                         _TRISC 008E  
               __CFG_PWRTE$ON 0000                  ___lltoft@exp 007A                   _sys_pgm_sta 00AE  
       __size_of_RTXSendRData 0022               __end_of_dpowers 0829             __end_of_CC1Strobe 1700  
             __end_of_isdigit 1660                         _pktRx 0141                         _pktTx 00C3  
               ___ftpack@sign 0075                         main@i 006A                         ftoa@f 0047  
            __end_of_NVMWrite 067E                         ftoa@l 0050              __end_of_SPIWrite 17E3  
                       utoa@c 0026              __end_of_RTXPgmOn 1624                         utoa@v 0024  
                       status 0003                         wtemp0 007E               __end_of_sprintf 04CA  
                ?_PGMCheckNvm 0070                __CFG_MCLRE$OFF 0000               __initialization 0013  
                DLYDelay_ms@i 0075                  DLYDelay_us@i 0073            __size_of_RTXPgmOff 0007  
                __end_of_main 0CBE                  __end_of_ftoa 07D5            __size_of_RTXRcvPkt 000E  
                __end_of_itoa 0A1F            __size_of_RTXSndPkt 0055                  __end_of_utoa 0EE5  
                   ??_CC1Init 007B                     ??_CC1Read 007A           __size_of_DPYSendStr 0049  
              CC1Strobe@e_stb 0078             RTXUpdateDisplay@i 00EA             RTXUpdateDisplay@j 00E8  
           RTXUpdateDisplay@p 00E9                   DPYIsBusy@bf 0076                        ??_main 0069  
                  _cc1PaTable 0153                        ??_ftoa 004B                 ___fttol@sign1 0038  
                      ??_itoa 007A                  _RTXSendRData 0886                        ??_utoa 0079  
                CC1Init@state 0022                     ??_DINInit 0071                  NVMWrite@addr 0071  
                   ??_DINTask 0071                     ??_DINTick 0071                    _cc1InitVal 01A0  
                ?_PGMNvmReset 0070                     ??_DPYInit 007C                     ??_PGMInit 007C  
                   ??_PGMTick 0071                   ?_RTXReadPkt 0070             __end_of_DPYIsBusy 0BE4  
               SPIRead@dstPtr 0071                   ?_RTXSendPgm 0070                     ??_NVMInit 0071  
                   ??_NVMRead 0075             __end_of_DPYSetCur 1716              ___llmod@dividend 0029  
                   ??_SPIInit 0071                     ??_SPIRead 0074              ___awdiv@dividend 0073  
                   ??_OUTInit 0071                        _ANSELA 018C                        _ANSELB 018D  
                      _ANSELC 018E              __end_of___ftpack 0E6F              __end_of___lbtoft 17AA  
         __size_of_PGMReadNvm 0013              __end_of___lltoft 0A4A                     ??_RTXInit 007C  
                ?_PGMWriteNvm 0070           __size_of_PGMSelDown 000B                     ??_RTXTask 007C  
                   ??_RTXTick 007C           __size_of_PGMSelLong 000C                        _INTCON 000B  
      OUTSetHTCDataNibble@val 0072           _OUTSetHTCDataNibble 17AA                     ??_SYSInit 0071  
                      _PMCON1 0195                        _PMCON2 0196                     ??_SYSTask 007C  
                      _INTIsr 0004                        _OSCCON 0099                        _INInit 1716  
                      _WDTCON 0097                        _SSPBUF 0211             __end_of_PGMPgmOff 15F7  
                      _SYSInt 15E5      __end_of_RTXUpdateDisplay 02EE                   DPYSendStr@i 0026  
         RTXReadPkt@numRxByte 0068                        ___ftge 0B69                 ?_DPYWriteByte 0075  
                      ___wmul 084B                     ??___awdiv 0075                     ??___ftadd 0026  
              __CFG_STVREN$ON 0000                     ??___ftneg 0074                     ??___lldiv 0079  
                   ??___ftmul 0026                     ??___llmod 007A                     ??___ftsub 007C  
                   ??___fttol 0034                     ??___lwdiv 0075                     ??___lwmod 0075  
        ?_OUTSetHTCDataNibble 0070       __size_of_DPYInitDisplay 0028              ___awdiv@quotient 0078  
                      _tmrPgm 00AA                        ftoa@cp 0054         ___ftmul@f3_as_product 002B  
        __size_of_DLYDelay_ms 0019                        itoa@cp 002C          __size_of_DLYDelay_us 0011  
                   ?_CC1Write 0077                     ??_isdigit 0071             __end_of_RTXPgmOff 160A  
           __end_of_RTXRcvPkt 166E                     ??_sprintf 0036             __end_of_RTXSndPkt 0DB9  
     __end_of__initialization 0040                    ___ftadd@f1 0020                    ___ftadd@f2 0023  
                  ___ftge@ff1 0071                    ___ftge@ff2 0074      RTXUpdateDisplay@maxDigit 00E6  
                  ___ftneg@f1 0071                    ___lbtoft@c 0024                    ___ftmul@f1 0020  
                  ___ftmul@f2 0023          __size_of_DPYDrawChar 002C                    ___ftsub@f1 002D  
                  ___ftsub@f2 002A                    ___fttol@f1 0030                __pcstackCOMMON 0070  
              ??_DPYWriteByte 0076                  __pidataBANK2 083A                  __pidataBANK3 0AA4  
         __size_of_RTXReadPkt 0094                    ___lltoft@c 0020               NVMWrite@rowAddr 0060  
         __size_of_RTXSendPgm 0023         ??_OUTSetHTCDataNibble 0071                     ?_NVMWrite 0071  
             CC1Strobe@cc1Stb 0079          __size_of_DPYSendChar 0009                     ?_SPIWrite 0071  
                  CC1Read@len 0022                    CC1Read@dst 0020                     ?_RTXPgmOn 0070  
                  ??_CC1Write 007A                  CC1Write@addr 0020                  DPYDrawChar@i 0022  
                DPYDrawChar@p 0078                  ??_DPYSendStr 0024                  sprintf@width 0042  
                  __pbssBANK0 006B                    __pbssBANK1 00A0                    __pbssBANK2 0120  
                     ?_INTIsr 0070                       ?_INInit 0070               __CFG_VCAPEN$OFF 0000  
                     ?_SYSInt 0070                     INInit@sta 0072          __size_of_PGMCheckNvm 000C  
                  __pmaintext 0C70                       ?___ftge 0071                  ??_PGMReadNvm 0078  
             CC1Write@cc1Addr 0021                       ?___wmul 0071                  ??_PGMSelDown 0071  
                ??_PGMSelLong 0065                    __pintentry 0004                       _CC1Init 0AD3  
                     _CC1Read 0911            __end_of_DPYSendStr 0C70             _u_in_sta_currTask 007C  
                   ?___ftpack 0071                     ?___lbtoft 0079                    ??_NVMWrite 0075  
                   ?___lltoft 0020                    ??_SPIWrite 0074                       _DINInit 167E  
                     _DINTick 09A7                       _DINTask 17E3                    ??_RTXPgmOn 007C  
                     _DPYInit 16A0                       _PGMInit 1776                       _PGMTick 166E  
        __size_of_PGMNvmReset 0013                       _SSPCON1 0215                       _SSPCON2 0216  
                     _NVMInit 1624                       _NVMRead 0935                       _SPIInit 0868  
                     _SPIRead 0981                       _SSPSTAT 0214                       _OUTInit 172D  
                DPYSendChar@c 0079               DPYDrawChar@addr 0020                    __stringtab 0800  
                     _RTXInit 095B                  DPYSetCur@col 0078                       _RTXTick 07D5  
                     _RTXTask 15EB                  DPYSetCur@row 007A            __end_of_PGMReadNvm 16C6  
                     _SYSInit 08CB                       _SYSTask 0B03            __end_of_PGMSelDown 163A  
          __end_of_PGMSelLong 1652                     _CC1Strobe 16EC               __size_of_INTIsr 000D  
             __size_of_INInit 0017          __size_of_PGMWriteNvm 0013               __size_of_SYSInt 0006  
                   NVMWrite@i 0062                     NVMWrite@j 0064                     SPIWrite@i 0076  
       RTXUpdateDisplay@isDec 00E4               __size_of___ftge 003B                       ___awdiv 0D11  
                     ___ftadd 04CA                  RTXInit@state 0059                       ___ftneg 160A  
                     ___lldiv 0CBE               __size_of___wmul 001D                       ___ftmul 067E  
                     ___llmod 0BE4                       ___ftsub 175D                       ___fttol 0EE5  
                     ___lwdiv 0B33                       ___lwmod 0A76                _DPYInitDisplay 09CE  
                  ??___ftpack 0076                    ??___lbtoft 0020                    ??___lltoft 0079  
                     __ptext1 0B03                       __ptext2 161B                       __ptext3 07D5  
                     __ptext4 08EE                       __ptext5 1646                       __ptext6 162F  
                     __ptext7 166E                       __ptext8 15F1                       __ptext9 09A7  
                     _picBatt 014A                       _dpowers 0801                       _isdigit 1652  
                     _pgm_cfg 00CC                       _pgm_flg 00AC                  ??_RTXReadPkt 0065  
                ??_RTXSendPgm 002A                       _strTemp 0131          __end_of_DPYWriteByte 0E0F  
                     _sprintf 02EE                       clrloop0 15FE                       _rtx_flg 006B  
OUTSetHTCDataNibble@dataToSet 0073                  RTXRcvPkt@len 007B                  RTXRcvPkt@dst 0026  
        end_of_initialization 0040                       ftoa@buf 0120                    _u_in_ev_up 00B2  
                     ftoa@rem 004C                     _DPYIsBusy 0BA4                    ?_CC1Strobe 0070  
                     itoa@buf 002D            RTXSndPkt@numRxByte 0027                       init_ram 15F7  
                     itoa@val 0028            RTXSndPkt@numTxByte 0028                     _DPYSetCur 1700  
                     initloop 15F8                  RTXSndPkt@len 007B                  RTXSndPkt@src 0026  
                RTXSndPkt@sta 0029               ___lldiv@divisor 0071             ?_RTXUpdateDisplay 0070  
             ___lldiv@counter 0024            ??_RTXUpdateDisplay 0055                     _PGMPgmOff 15F1  
      __end_of_DPYInitDisplay 09F6                    _tmrDbncSel 006C            __end_of_RTXReadPkt 1000  
                     utoa@buf 0027                       utoa@val 0020                    DINInit@sta 0071  
          __end_of_RTXSendPgm 0911                     _PORTAbits 000C                     _PORTBbits 000D  
                  _tmrLongSel 00A8              __CFG_FOSC$INTOSC 0000             __size_of_CC1Write 0023  
                 NVMRead@addr 0071                   NVMRead@dest 0073                    ?_DPYIsBusy 0070  
                   _RTXPgmOff 1603                     _RTXRcvPkt 1660                    ?_DPYSetCur 0078  
                   _RTXSndPkt 0D64                __end_of_INTIsr 0011                __end_of_INInit 172D  
              __end_of_SYSInt 15EB                _tmrCalibration 00A6                   ___ftmul@exp 002A  
                  ?_PGMPgmOff 0070               ?_DPYInitDisplay 0070                DLYDelay_ms@val 0071  
              DLYDelay_us@val 0071                __end_of___ftge 0BA4                __end_of___wmul 0868  
               ??_DLYDelay_ms 0073                 ??_DLYDelay_us 0073                DPYSendStr@data 0021  
                SYSInit@state 0072             __size_of_NVMWrite 00BE             __size_of_SPIWrite 001D  
         start_initialization 0013             __size_of_RTXPgmOn 0009                    ftoa@status 004A  
                 CC1Read@addr 0023                   NVMWrite@len 0074                      ??_INTIsr 0070  
                    ??_INInit 0071                   ??_CC1Strobe 0077                    ?_RTXPgmOff 0070  
                  DPYInit@sta 0023                    ?_RTXRcvPkt 007B                    ?_RTXSndPkt 007B  
               ??_DPYDrawChar 0079               ___llmod@divisor 0025               ___llmod@counter 007B  
                    ??_SYSInt 0070                CC1Read@cc1Addr 0024   __end_of_OUTSetHTCDataNibble 17C6  
         RTXUpdateDisplay@val 00E7                      ??___ftge 0077                      ??___wmul 0075  
               ??_DPYSendChar 0078                      ?_CC1Init 0070                      ?_CC1Read 0020  
                 __pdataBANK2 014A                   __pdataBANK3 01A0                   SPIWrite@len 0073  
                    ?_DINInit 0070                      ?_DINTask 0070                      ?_DINTick 0070  
       __size_of_DPYWriteByte 0056             __size_of___ftpack 0060             __size_of___lbtoft 001A  
           __size_of___lltoft 002B                   __pbssCOMMON 007C                      ?_DPYInit 0070  
               __pcstackBANK0 0020                 __pcstackBANK1 00D1           __end_of_DLYDelay_ms 175D  
         __end_of_DLYDelay_us 16A0                     _s_CC1_FLG 00AD                      ?_PGMInit 0070  
                    ?_PGMTick 0070           __end_of__stringdata 0839                  _isdigit$1047 0071  
                    ?_NVMInit 0070                      ?_NVMRead 0071                      ?_SPIInit 0070  
                    ?_SPIRead 0071                NVMWrite@source 0073                      ?_OUTInit 0070  
                PGMInit@state 0066                      ?_RTXInit 0070                      ?_RTXTask 0070  
                    ?_RTXTick 0070                   ??_DPYIsBusy 0075                   CC1Write@len 0079  
                    ?_SYSInit 0070                   CC1Write@src 0077                      ?_SYSTask 0070  
                 sprintf@_val 003D                   sprintf@flag 003B                   ??_DPYSetCur 0079  
               ??_PGMCheckNvm 007C                   sprintf@prec 0044              ___lwdiv@dividend 0073  
                 ??_PGMPgmOff 0071           __end_of_DPYDrawChar 0A76                      ?___awdiv 0071  
                    ?___ftadd 0020                  _DPYWriteByte 0DB9                      ?___ftneg 0071  
                    ?___lldiv 0071                      ?___ftmul 0020                      ?___llmod 0025  
                    ?___ftsub 002A                      ?___fttol 0030                      ?___lwdiv 0071  
                    ?___lwmod 0071                     _u_SYS_STA 00AF                     __pstrings 0800  
            _u_in_sta_tmpTask 006F                 ?_RTXSendRData 0070                      NVMRead@i 0077  
               ??_PGMNvmReset 0065                      SPIRead@i 0079                      _CC1Write 08A8  
         __end_of_DPYSendChar 161B                      ?_isdigit 0070              ___lwdiv@quotient 0076  
                    ?_sprintf 002D                 ??_PGMWriteNvm 0078                   ??_RTXPgmOff 007C  
                   _u_flg_din 006E                   ??_RTXRcvPkt 0025                   ??_RTXSndPkt 0025  
              ___wmul@product 0075                      _LATAbits 010C                      _LATCbits 010E  
                   clear_ram0 15FD                      _PIR1bits 0011           __end_of_PGMCheckNvm 1646  
                   _tmrRcvPkt 006D                ??_RTXSendRData 002A              __size_of_CC1Init 0030  
            __size_of_CC1Read 0024                   _DLYDelay_ms 1744                   _DLYDelay_us 168F  
                    _NVMWrite 05C0                   __stringdata 082E                      _SPIWrite 17C6  
           ___wmul@multiplier 0071                    NVMInit@sta 0071                    NVMRead@len 0074  
   __size_of_RTXUpdateDisplay 02AB                 DPYSetCur@addr 007B                      _RTXPgmOn 161B  
            __size_of_DINInit 0011              __size_of_DINTask 001D              __size_of_DINTick 0027  
            __size_of_DPYInit 0013                    SPIRead@len 0073              __size_of_PGMInit 001A  
            __size_of_PGMTick 0010           __end_of_PGMNvmReset 16EC                 DPYSendStr@col 0020  
               DPYSendStr@len 0023              __size_of_NVMInit 000B                 DPYSendStr@row 0027  
            __size_of_NVMRead 0026              __size_of_SPIInit 001E              __size_of_SPIRead 0026  
                _u_in_ev_down 00B0                  _u_in_ev_long 00B1              __size_of_OUTInit 0017  
            __size_of_RTXInit 0026              __size_of_RTXTask 0006              __size_of_RTXTick 002B  
            __size_of_SYSInit 0023              __size_of_SYSTask 0030              ??_DPYInitDisplay 007B  
                 _DPYDrawChar 0A4A                    OUTInit@sta 0072           __end_of_PGMWriteNvm 16D9  
                 _DPYSendChar 1612              __size_of___awdiv 0053              __size_of___ftadd 00F6  
            __size_of___ftneg 0008              __size_of___lldiv 0053              __size_of___ftmul 00B4  
            __size_of___llmod 0043              __size_of___ftsub 0019              __size_of___fttol 0087  
            __size_of___lwdiv 0036              __size_of___lwmod 002E                      ___ftpack 0E0F  
                    ___lbtoft 1790        RTXUpdateDisplay@offset 00E5            __end_of__stringtab 0801  
      RTXUpdateDisplay@posDec 00E3                      ___lltoft 0A1F        RTXUpdateDisplay@strTmp 00D1  
      RTXUpdateDisplay@status 00E1                 RTXReadPkt@sta 0066                 RTXReadPkt@tmp 0067  
            __size_of_isdigit 000E               ___lwdiv@divisor 0071               ___lwdiv@counter 0078  
                    __ptext10 08CB                      __ptext11 15EB                      __ptext20 095B  
                    __ptext12 0F6C                      __ptext21 0043                      __ptext13 1790  
                    __ptext30 0E0F                      __ptext22 0D11                      __ptext14 0886  
                    __ptext31 0B69                      __ptext23 0732                      __ptext15 0D64  
                    __ptext40 0B33                      __ptext32 02EE                      __ptext24 0A1F  
                    __ptext16 1603                      __ptext41 0C27                      __ptext33 084B  
                    __ptext25 0EE5                      __ptext17 1660                      __ptext50 16B3  
                    __ptext42 0BA4                      __ptext34 0BE4                      __ptext26 175D  
                    __ptext18 0911                      __ptext51 0935                      __ptext43 1612  
                    __ptext35 0CBE                      __ptext27 04CA                      __ptext19 0981  
                    __ptext60 167E                      __ptext52 16A0                      __ptext44 1700  
                    __ptext36 1652                      __ptext28 160A                      __ptext61 1624  
                    __ptext53 09CE                      __ptext45 1776                      __ptext37 09F6  
                    __ptext29 067E                      __ptext70 15E5                      __ptext62 0AD3  
                    __ptext54 0A4A                      __ptext46 163A                      __ptext38 0E6F  
                    __ptext63 08A8                      __ptext55 0DB9                      __ptext47 16D9  
                    __ptext39 0A76                      __ptext64 16EC                      __ptext56 168F  
                    __ptext48 16C6                      __ptext65 17C6                      __ptext57 17AA  
                    __ptext49 05C0                      __ptext66 0868                      __ptext58 1744  
                    __ptext67 172D                      __ptext59 17E3                      __ptext68 1716  
            __size_of_sprintf 01DC           __end_of_nvm_pgm_cfg 082E                 __size_of_main 004E  
               __size_of_ftoa 00A3                 __size_of_itoa 0029                   _PGMCheckNvm 163A  
               __size_of_utoa 0076               DPYWriteByte@val 0075                      _strTitle 00B3  
                 _PGMNvmReset 16D9                    _INTCONbits 000B                      itoa@base 002A  
                    isdigit@c 0072                    _DPYSendStr 0C27                SPIWrite@srcPtr 0071  
                    intlevel1 0000                     sprintf@ap 003C                     sprintf@sp 0041  
                 _PGMWriteNvm 16C6                    _PMCON1bits 0195          __end_of_RTXSendRData 08A8  
            ___lwmod@dividend 0073              ___lldiv@dividend 0075             __CFG_CLKOUTEN$OFF 0000  
              DPYWriteByte@rs 0077                    _PGMReadNvm 16B3                    _PGMSelDown 162F  
                  _PGMSelLong 1646  __size_of_OUTSetHTCDataNibble 001C                      utoa@base 0022  
                  _OPTION_REG 0095                      sprintf@c 0046                      sprintf@f 002D  
            _RTXUpdateDisplay 0043              ___lldiv@quotient 0020               ___lwmod@divisor 0071  
             ___lwmod@counter 0076                   _nvm_pgm_cfg 0829                    _SSPCONbits 0215  
