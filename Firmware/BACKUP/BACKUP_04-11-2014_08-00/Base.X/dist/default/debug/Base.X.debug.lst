

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Nov 03 19:27:01 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000D                     	;# 
   100  000E                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  011D                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019F                     	;# 
   158  020D                     	;# 
   159  0210                     	;# 
   160  0211                     	;# 
   161  0211                     	;# 
   162  0212                     	;# 
   163  0212                     	;# 
   164  0213                     	;# 
   165  0213                     	;# 
   166  0214                     	;# 
   167  0214                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0216                     	;# 
   172  0216                     	;# 
   173  0217                     	;# 
   174  0217                     	;# 
   175  0291                     	;# 
   176  0291                     	;# 
   177  0292                     	;# 
   178  0293                     	;# 
   179  0298                     	;# 
   180  0298                     	;# 
   181  0299                     	;# 
   182  029A                     	;# 
   183  0394                     	;# 
   184  0395                     	;# 
   185  0396                     	;# 
   186  0FE4                     	;# 
   187  0FE5                     	;# 
   188  0FE6                     	;# 
   189  0FE7                     	;# 
   190  0FE8                     	;# 
   191  0FE9                     	;# 
   192  0FEA                     	;# 
   193  0FEB                     	;# 
   194  0FED                     	;# 
   195  0FEE                     	;# 
   196  0FEF                     	;# 
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0008                     	;# 
   206  0009                     	;# 
   207  000A                     	;# 
   208  000B                     	;# 
   209  000C                     	;# 
   210  000D                     	;# 
   211  000E                     	;# 
   212  0010                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0015                     	;# 
   216  0016                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001B                     	;# 
   223  001C                     	;# 
   224  008C                     	;# 
   225  008D                     	;# 
   226  008E                     	;# 
   227  0090                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0095                     	;# 
   231  0096                     	;# 
   232  0097                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  011D                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  018E                     	;# 
   249  0191                     	;# 
   250  0191                     	;# 
   251  0192                     	;# 
   252  0193                     	;# 
   253  0193                     	;# 
   254  0194                     	;# 
   255  0195                     	;# 
   256  0196                     	;# 
   257  0197                     	;# 
   258  0199                     	;# 
   259  019A                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019C                     	;# 
   265  019C                     	;# 
   266  019D                     	;# 
   267  019E                     	;# 
   268  019F                     	;# 
   269  020D                     	;# 
   270  0210                     	;# 
   271  0211                     	;# 
   272  0211                     	;# 
   273  0212                     	;# 
   274  0212                     	;# 
   275  0213                     	;# 
   276  0213                     	;# 
   277  0214                     	;# 
   278  0214                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0215                     	;# 
   282  0216                     	;# 
   283  0216                     	;# 
   284  0217                     	;# 
   285  0217                     	;# 
   286  0291                     	;# 
   287  0291                     	;# 
   288  0292                     	;# 
   289  0293                     	;# 
   290  0298                     	;# 
   291  0298                     	;# 
   292  0299                     	;# 
   293  029A                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  0FE4                     	;# 
   298  0FE5                     	;# 
   299  0FE6                     	;# 
   300  0FE7                     	;# 
   301  0FE8                     	;# 
   302  0FE9                     	;# 
   303  0FEA                     	;# 
   304  0FEB                     	;# 
   305  0FED                     	;# 
   306  0FEE                     	;# 
   307  0FEF                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  0008                     	;# 
   317  0009                     	;# 
   318  000A                     	;# 
   319  000B                     	;# 
   320  000C                     	;# 
   321  000D                     	;# 
   322  000E                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  008C                     	;# 
   336  008D                     	;# 
   337  008E                     	;# 
   338  0090                     	;# 
   339  0091                     	;# 
   340  0092                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  010C                     	;# 
   352  010D                     	;# 
   353  010E                     	;# 
   354  0116                     	;# 
   355  0117                     	;# 
   356  011D                     	;# 
   357  018C                     	;# 
   358  018D                     	;# 
   359  018E                     	;# 
   360  0191                     	;# 
   361  0191                     	;# 
   362  0192                     	;# 
   363  0193                     	;# 
   364  0193                     	;# 
   365  0194                     	;# 
   366  0195                     	;# 
   367  0196                     	;# 
   368  0197                     	;# 
   369  0199                     	;# 
   370  019A                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019B                     	;# 
   375  019C                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020D                     	;# 
   381  0210                     	;# 
   382  0211                     	;# 
   383  0211                     	;# 
   384  0212                     	;# 
   385  0212                     	;# 
   386  0213                     	;# 
   387  0213                     	;# 
   388  0214                     	;# 
   389  0214                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0216                     	;# 
   394  0216                     	;# 
   395  0217                     	;# 
   396  0217                     	;# 
   397  0291                     	;# 
   398  0291                     	;# 
   399  0292                     	;# 
   400  0293                     	;# 
   401  0298                     	;# 
   402  0298                     	;# 
   403  0299                     	;# 
   404  029A                     	;# 
   405  0394                     	;# 
   406  0395                     	;# 
   407  0396                     	;# 
   408  0FE4                     	;# 
   409  0FE5                     	;# 
   410  0FE6                     	;# 
   411  0FE7                     	;# 
   412  0FE8                     	;# 
   413  0FE9                     	;# 
   414  0FEA                     	;# 
   415  0FEB                     	;# 
   416  0FED                     	;# 
   417  0FEE                     	;# 
   418  0FEF                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0008                     	;# 
   428  0009                     	;# 
   429  000A                     	;# 
   430  000B                     	;# 
   431  000C                     	;# 
   432  000D                     	;# 
   433  000E                     	;# 
   434  0010                     	;# 
   435  0011                     	;# 
   436  0012                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0016                     	;# 
   440  0017                     	;# 
   441  0018                     	;# 
   442  0019                     	;# 
   443  001A                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  008C                     	;# 
   447  008D                     	;# 
   448  008E                     	;# 
   449  0090                     	;# 
   450  0091                     	;# 
   451  0092                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  010E                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  011D                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  018E                     	;# 
   471  0191                     	;# 
   472  0191                     	;# 
   473  0192                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0194                     	;# 
   477  0195                     	;# 
   478  0196                     	;# 
   479  0197                     	;# 
   480  0199                     	;# 
   481  019A                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019C                     	;# 
   487  019C                     	;# 
   488  019D                     	;# 
   489  019E                     	;# 
   490  019F                     	;# 
   491  020D                     	;# 
   492  0210                     	;# 
   493  0211                     	;# 
   494  0211                     	;# 
   495  0212                     	;# 
   496  0212                     	;# 
   497  0213                     	;# 
   498  0213                     	;# 
   499  0214                     	;# 
   500  0214                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0216                     	;# 
   505  0216                     	;# 
   506  0217                     	;# 
   507  0217                     	;# 
   508  0291                     	;# 
   509  0291                     	;# 
   510  0292                     	;# 
   511  0293                     	;# 
   512  0298                     	;# 
   513  0298                     	;# 
   514  0299                     	;# 
   515  029A                     	;# 
   516  0394                     	;# 
   517  0395                     	;# 
   518  0396                     	;# 
   519  0FE4                     	;# 
   520  0FE5                     	;# 
   521  0FE6                     	;# 
   522  0FE7                     	;# 
   523  0FE8                     	;# 
   524  0FE9                     	;# 
   525  0FEA                     	;# 
   526  0FEB                     	;# 
   527  0FED                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000D                     	;# 
   544  000E                     	;# 
   545  0010                     	;# 
   546  0011                     	;# 
   547  0012                     	;# 
   548  0015                     	;# 
   549  0016                     	;# 
   550  0016                     	;# 
   551  0017                     	;# 
   552  0018                     	;# 
   553  0019                     	;# 
   554  001A                     	;# 
   555  001B                     	;# 
   556  001C                     	;# 
   557  008C                     	;# 
   558  008D                     	;# 
   559  008E                     	;# 
   560  0090                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0095                     	;# 
   564  0096                     	;# 
   565  0097                     	;# 
   566  0099                     	;# 
   567  009A                     	;# 
   568  009B                     	;# 
   569  009B                     	;# 
   570  009C                     	;# 
   571  009D                     	;# 
   572  009E                     	;# 
   573  010C                     	;# 
   574  010D                     	;# 
   575  010E                     	;# 
   576  0116                     	;# 
   577  0117                     	;# 
   578  011D                     	;# 
   579  018C                     	;# 
   580  018D                     	;# 
   581  018E                     	;# 
   582  0191                     	;# 
   583  0191                     	;# 
   584  0192                     	;# 
   585  0193                     	;# 
   586  0193                     	;# 
   587  0194                     	;# 
   588  0195                     	;# 
   589  0196                     	;# 
   590  0197                     	;# 
   591  0199                     	;# 
   592  019A                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019C                     	;# 
   598  019C                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019F                     	;# 
   602  020D                     	;# 
   603  0210                     	;# 
   604  0211                     	;# 
   605  0211                     	;# 
   606  0212                     	;# 
   607  0212                     	;# 
   608  0213                     	;# 
   609  0213                     	;# 
   610  0214                     	;# 
   611  0214                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0216                     	;# 
   616  0216                     	;# 
   617  0217                     	;# 
   618  0217                     	;# 
   619  0291                     	;# 
   620  0291                     	;# 
   621  0292                     	;# 
   622  0293                     	;# 
   623  0298                     	;# 
   624  0298                     	;# 
   625  0299                     	;# 
   626  029A                     	;# 
   627  0394                     	;# 
   628  0395                     	;# 
   629  0396                     	;# 
   630  0FE4                     	;# 
   631  0FE5                     	;# 
   632  0FE6                     	;# 
   633  0FE7                     	;# 
   634  0FE8                     	;# 
   635  0FE9                     	;# 
   636  0FEA                     	;# 
   637  0FEB                     	;# 
   638  0FED                     	;# 
   639  0FEE                     	;# 
   640  0FEF                     	;# 
   641  0000                     	;# 
   642  0001                     	;# 
   643  0002                     	;# 
   644  0003                     	;# 
   645  0004                     	;# 
   646  0005                     	;# 
   647  0006                     	;# 
   648  0007                     	;# 
   649  0008                     	;# 
   650  0009                     	;# 
   651  000A                     	;# 
   652  000B                     	;# 
   653  000C                     	;# 
   654  000D                     	;# 
   655  000E                     	;# 
   656  0010                     	;# 
   657  0011                     	;# 
   658  0012                     	;# 
   659  0015                     	;# 
   660  0016                     	;# 
   661  0016                     	;# 
   662  0017                     	;# 
   663  0018                     	;# 
   664  0019                     	;# 
   665  001A                     	;# 
   666  001B                     	;# 
   667  001C                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0090                     	;# 
   672  0091                     	;# 
   673  0092                     	;# 
   674  0095                     	;# 
   675  0096                     	;# 
   676  0097                     	;# 
   677  0099                     	;# 
   678  009A                     	;# 
   679  009B                     	;# 
   680  009B                     	;# 
   681  009C                     	;# 
   682  009D                     	;# 
   683  009E                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  011D                     	;# 
   690  018C                     	;# 
   691  018D                     	;# 
   692  018E                     	;# 
   693  0191                     	;# 
   694  0191                     	;# 
   695  0192                     	;# 
   696  0193                     	;# 
   697  0193                     	;# 
   698  0194                     	;# 
   699  0195                     	;# 
   700  0196                     	;# 
   701  0197                     	;# 
   702  0199                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019C                     	;# 
   709  019C                     	;# 
   710  019D                     	;# 
   711  019E                     	;# 
   712  019F                     	;# 
   713  020D                     	;# 
   714  0210                     	;# 
   715  0211                     	;# 
   716  0211                     	;# 
   717  0212                     	;# 
   718  0212                     	;# 
   719  0213                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0214                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0216                     	;# 
   727  0216                     	;# 
   728  0217                     	;# 
   729  0217                     	;# 
   730  0291                     	;# 
   731  0291                     	;# 
   732  0292                     	;# 
   733  0293                     	;# 
   734  0298                     	;# 
   735  0298                     	;# 
   736  0299                     	;# 
   737  029A                     	;# 
   738  0394                     	;# 
   739  0395                     	;# 
   740  0396                     	;# 
   741  0FE4                     	;# 
   742  0FE5                     	;# 
   743  0FE6                     	;# 
   744  0FE7                     	;# 
   745  0FE8                     	;# 
   746  0FE9                     	;# 
   747  0FEA                     	;# 
   748  0FEB                     	;# 
   749  0FED                     	;# 
   750  0FEE                     	;# 
   751  0FEF                     	;# 
   752  0000                     	;# 
   753  0001                     	;# 
   754  0002                     	;# 
   755  0003                     	;# 
   756  0004                     	;# 
   757  0005                     	;# 
   758  0006                     	;# 
   759  0007                     	;# 
   760  0008                     	;# 
   761  0009                     	;# 
   762  000A                     	;# 
   763  000B                     	;# 
   764  000C                     	;# 
   765  000D                     	;# 
   766  000E                     	;# 
   767  0010                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  0090                     	;# 
   783  0091                     	;# 
   784  0092                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0116                     	;# 
   799  0117                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018D                     	;# 
   803  018E                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0194                     	;# 
   810  0195                     	;# 
   811  0196                     	;# 
   812  0197                     	;# 
   813  0199                     	;# 
   814  019A                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019C                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020D                     	;# 
   825  0210                     	;# 
   826  0211                     	;# 
   827  0211                     	;# 
   828  0212                     	;# 
   829  0212                     	;# 
   830  0213                     	;# 
   831  0213                     	;# 
   832  0214                     	;# 
   833  0214                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0216                     	;# 
   838  0216                     	;# 
   839  0217                     	;# 
   840  0217                     	;# 
   841  0291                     	;# 
   842  0291                     	;# 
   843  0292                     	;# 
   844  0293                     	;# 
   845  0298                     	;# 
   846  0298                     	;# 
   847  0299                     	;# 
   848  029A                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  0FE4                     	;# 
   853  0FE5                     	;# 
   854  0FE6                     	;# 
   855  0FE7                     	;# 
   856  0FE8                     	;# 
   857  0FE9                     	;# 
   858  0FEA                     	;# 
   859  0FEB                     	;# 
   860  0FED                     	;# 
   861  0FEE                     	;# 
   862  0FEF                     	;# 
   863  0000                     	;# 
   864  0001                     	;# 
   865  0002                     	;# 
   866  0003                     	;# 
   867  0004                     	;# 
   868  0005                     	;# 
   869  0006                     	;# 
   870  0007                     	;# 
   871  0008                     	;# 
   872  0009                     	;# 
   873  000A                     	;# 
   874  000B                     	;# 
   875  000C                     	;# 
   876  000D                     	;# 
   877  000E                     	;# 
   878  0010                     	;# 
   879  0011                     	;# 
   880  0012                     	;# 
   881  0015                     	;# 
   882  0016                     	;# 
   883  0016                     	;# 
   884  0017                     	;# 
   885  0018                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  008C                     	;# 
   891  008D                     	;# 
   892  008E                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0095                     	;# 
   897  0096                     	;# 
   898  0097                     	;# 
   899  0099                     	;# 
   900  009A                     	;# 
   901  009B                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  010C                     	;# 
   907  010D                     	;# 
   908  010E                     	;# 
   909  0116                     	;# 
   910  0117                     	;# 
   911  011D                     	;# 
   912  018C                     	;# 
   913  018D                     	;# 
   914  018E                     	;# 
   915  0191                     	;# 
   916  0191                     	;# 
   917  0192                     	;# 
   918  0193                     	;# 
   919  0193                     	;# 
   920  0194                     	;# 
   921  0195                     	;# 
   922  0196                     	;# 
   923  0197                     	;# 
   924  0199                     	;# 
   925  019A                     	;# 
   926  019B                     	;# 
   927  019B                     	;# 
   928  019B                     	;# 
   929  019B                     	;# 
   930  019C                     	;# 
   931  019C                     	;# 
   932  019D                     	;# 
   933  019E                     	;# 
   934  019F                     	;# 
   935  020D                     	;# 
   936  0210                     	;# 
   937  0211                     	;# 
   938  0211                     	;# 
   939  0212                     	;# 
   940  0212                     	;# 
   941  0213                     	;# 
   942  0213                     	;# 
   943  0214                     	;# 
   944  0214                     	;# 
   945  0215                     	;# 
   946  0215                     	;# 
   947  0215                     	;# 
   948  0216                     	;# 
   949  0216                     	;# 
   950  0217                     	;# 
   951  0217                     	;# 
   952  0291                     	;# 
   953  0291                     	;# 
   954  0292                     	;# 
   955  0293                     	;# 
   956  0298                     	;# 
   957  0298                     	;# 
   958  0299                     	;# 
   959  029A                     	;# 
   960  0394                     	;# 
   961  0395                     	;# 
   962  0396                     	;# 
   963  0FE4                     	;# 
   964  0FE5                     	;# 
   965  0FE6                     	;# 
   966  0FE7                     	;# 
   967  0FE8                     	;# 
   968  0FE9                     	;# 
   969  0FEA                     	;# 
   970  0FEB                     	;# 
   971  0FED                     	;# 
   972  0FEE                     	;# 
   973  0FEF                     	;# 
   974  0000                     	;# 
   975  0001                     	;# 
   976  0002                     	;# 
   977  0003                     	;# 
   978  0004                     	;# 
   979  0005                     	;# 
   980  0006                     	;# 
   981  0007                     	;# 
   982  0008                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0015                     	;# 
   993  0016                     	;# 
   994  0016                     	;# 
   995  0017                     	;# 
   996  0018                     	;# 
   997  0019                     	;# 
   998  001A                     	;# 
   999  001B                     	;# 
  1000  001C                     	;# 
  1001  008C                     	;# 
  1002  008D                     	;# 
  1003  008E                     	;# 
  1004  0090                     	;# 
  1005  0091                     	;# 
  1006  0092                     	;# 
  1007  0095                     	;# 
  1008  0096                     	;# 
  1009  0097                     	;# 
  1010  0099                     	;# 
  1011  009A                     	;# 
  1012  009B                     	;# 
  1013  009B                     	;# 
  1014  009C                     	;# 
  1015  009D                     	;# 
  1016  009E                     	;# 
  1017  010C                     	;# 
  1018  010D                     	;# 
  1019  010E                     	;# 
  1020  0116                     	;# 
  1021  0117                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018D                     	;# 
  1025  018E                     	;# 
  1026  0191                     	;# 
  1027  0191                     	;# 
  1028  0192                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0197                     	;# 
  1035  0199                     	;# 
  1036  019A                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019C                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019E                     	;# 
  1045  019F                     	;# 
  1046  020D                     	;# 
  1047  0210                     	;# 
  1048  0211                     	;# 
  1049  0211                     	;# 
  1050  0212                     	;# 
  1051  0212                     	;# 
  1052  0213                     	;# 
  1053  0213                     	;# 
  1054  0214                     	;# 
  1055  0214                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0215                     	;# 
  1059  0216                     	;# 
  1060  0216                     	;# 
  1061  0217                     	;# 
  1062  0217                     	;# 
  1063  0291                     	;# 
  1064  0291                     	;# 
  1065  0292                     	;# 
  1066  0293                     	;# 
  1067  0298                     	;# 
  1068  0298                     	;# 
  1069  0299                     	;# 
  1070  029A                     	;# 
  1071  0394                     	;# 
  1072  0395                     	;# 
  1073  0396                     	;# 
  1074  0FE4                     	;# 
  1075  0FE5                     	;# 
  1076  0FE6                     	;# 
  1077  0FE7                     	;# 
  1078  0FE8                     	;# 
  1079  0FE9                     	;# 
  1080  0FEA                     	;# 
  1081  0FEB                     	;# 
  1082  0FED                     	;# 
  1083  0FEE                     	;# 
  1084  0FEF                     	;# 
  1085  0000                     	;# 
  1086  0001                     	;# 
  1087  0002                     	;# 
  1088  0003                     	;# 
  1089  0004                     	;# 
  1090  0005                     	;# 
  1091  0006                     	;# 
  1092  0007                     	;# 
  1093  0008                     	;# 
  1094  0009                     	;# 
  1095  000A                     	;# 
  1096  000B                     	;# 
  1097  000C                     	;# 
  1098  000D                     	;# 
  1099  000E                     	;# 
  1100  0010                     	;# 
  1101  0011                     	;# 
  1102  0012                     	;# 
  1103  0015                     	;# 
  1104  0016                     	;# 
  1105  0016                     	;# 
  1106  0017                     	;# 
  1107  0018                     	;# 
  1108  0019                     	;# 
  1109  001A                     	;# 
  1110  001B                     	;# 
  1111  001C                     	;# 
  1112  008C                     	;# 
  1113  008D                     	;# 
  1114  008E                     	;# 
  1115  0090                     	;# 
  1116  0091                     	;# 
  1117  0092                     	;# 
  1118  0095                     	;# 
  1119  0096                     	;# 
  1120  0097                     	;# 
  1121  0099                     	;# 
  1122  009A                     	;# 
  1123  009B                     	;# 
  1124  009B                     	;# 
  1125  009C                     	;# 
  1126  009D                     	;# 
  1127  009E                     	;# 
  1128  010C                     	;# 
  1129  010D                     	;# 
  1130  010E                     	;# 
  1131  0116                     	;# 
  1132  0117                     	;# 
  1133  011D                     	;# 
  1134  018C                     	;# 
  1135  018D                     	;# 
  1136  018E                     	;# 
  1137  0191                     	;# 
  1138  0191                     	;# 
  1139  0192                     	;# 
  1140  0193                     	;# 
  1141  0193                     	;# 
  1142  0194                     	;# 
  1143  0195                     	;# 
  1144  0196                     	;# 
  1145  0197                     	;# 
  1146  0199                     	;# 
  1147  019A                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019C                     	;# 
  1153  019C                     	;# 
  1154  019D                     	;# 
  1155  019E                     	;# 
  1156  019F                     	;# 
  1157  020D                     	;# 
  1158  0210                     	;# 
  1159  0211                     	;# 
  1160  0211                     	;# 
  1161  0212                     	;# 
  1162  0212                     	;# 
  1163  0213                     	;# 
  1164  0213                     	;# 
  1165  0214                     	;# 
  1166  0214                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0215                     	;# 
  1170  0216                     	;# 
  1171  0216                     	;# 
  1172  0217                     	;# 
  1173  0217                     	;# 
  1174  0291                     	;# 
  1175  0291                     	;# 
  1176  0292                     	;# 
  1177  0293                     	;# 
  1178  0298                     	;# 
  1179  0298                     	;# 
  1180  0299                     	;# 
  1181  029A                     	;# 
  1182  0394                     	;# 
  1183  0395                     	;# 
  1184  0396                     	;# 
  1185  0FE4                     	;# 
  1186  0FE5                     	;# 
  1187  0FE6                     	;# 
  1188  0FE7                     	;# 
  1189  0FE8                     	;# 
  1190  0FE9                     	;# 
  1191  0FEA                     	;# 
  1192  0FEB                     	;# 
  1193  0FED                     	;# 
  1194  0FEE                     	;# 
  1195  0FEF                     	;# 
  1196  0000                     	;# 
  1197  0001                     	;# 
  1198  0002                     	;# 
  1199  0003                     	;# 
  1200  0004                     	;# 
  1201  0005                     	;# 
  1202  0006                     	;# 
  1203  0007                     	;# 
  1204  0008                     	;# 
  1205  0009                     	;# 
  1206  000A                     	;# 
  1207  000B                     	;# 
  1208  000C                     	;# 
  1209  000D                     	;# 
  1210  000E                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0015                     	;# 
  1215  0016                     	;# 
  1216  0016                     	;# 
  1217  0017                     	;# 
  1218  0018                     	;# 
  1219  0019                     	;# 
  1220  001A                     	;# 
  1221  001B                     	;# 
  1222  001C                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  0090                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0095                     	;# 
  1230  0096                     	;# 
  1231  0097                     	;# 
  1232  0099                     	;# 
  1233  009A                     	;# 
  1234  009B                     	;# 
  1235  009B                     	;# 
  1236  009C                     	;# 
  1237  009D                     	;# 
  1238  009E                     	;# 
  1239  010C                     	;# 
  1240  010D                     	;# 
  1241  010E                     	;# 
  1242  0116                     	;# 
  1243  0117                     	;# 
  1244  011D                     	;# 
  1245  018C                     	;# 
  1246  018D                     	;# 
  1247  018E                     	;# 
  1248  0191                     	;# 
  1249  0191                     	;# 
  1250  0192                     	;# 
  1251  0193                     	;# 
  1252  0193                     	;# 
  1253  0194                     	;# 
  1254  0195                     	;# 
  1255  0196                     	;# 
  1256  0197                     	;# 
  1257  0199                     	;# 
  1258  019A                     	;# 
  1259  019B                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019C                     	;# 
  1264  019C                     	;# 
  1265  019D                     	;# 
  1266  019E                     	;# 
  1267  019F                     	;# 
  1268  020D                     	;# 
  1269  0210                     	;# 
  1270  0211                     	;# 
  1271  0211                     	;# 
  1272  0212                     	;# 
  1273  0212                     	;# 
  1274  0213                     	;# 
  1275  0213                     	;# 
  1276  0214                     	;# 
  1277  0214                     	;# 
  1278  0215                     	;# 
  1279  0215                     	;# 
  1280  0215                     	;# 
  1281  0216                     	;# 
  1282  0216                     	;# 
  1283  0217                     	;# 
  1284  0217                     	;# 
  1285  0291                     	;# 
  1286  0291                     	;# 
  1287  0292                     	;# 
  1288  0293                     	;# 
  1289  0298                     	;# 
  1290  0298                     	;# 
  1291  0299                     	;# 
  1292  029A                     	;# 
  1293  0394                     	;# 
  1294  0395                     	;# 
  1295  0396                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000D                     	;# 
  1321  000E                     	;# 
  1322  0010                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0015                     	;# 
  1326  0016                     	;# 
  1327  0016                     	;# 
  1328  0017                     	;# 
  1329  0018                     	;# 
  1330  0019                     	;# 
  1331  001A                     	;# 
  1332  001B                     	;# 
  1333  001C                     	;# 
  1334  008C                     	;# 
  1335  008D                     	;# 
  1336  008E                     	;# 
  1337  0090                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0099                     	;# 
  1344  009A                     	;# 
  1345  009B                     	;# 
  1346  009B                     	;# 
  1347  009C                     	;# 
  1348  009D                     	;# 
  1349  009E                     	;# 
  1350  010C                     	;# 
  1351  010D                     	;# 
  1352  010E                     	;# 
  1353  0116                     	;# 
  1354  0117                     	;# 
  1355  011D                     	;# 
  1356  018C                     	;# 
  1357  018D                     	;# 
  1358  018E                     	;# 
  1359  0191                     	;# 
  1360  0191                     	;# 
  1361  0192                     	;# 
  1362  0193                     	;# 
  1363  0193                     	;# 
  1364  0194                     	;# 
  1365  0195                     	;# 
  1366  0196                     	;# 
  1367  0197                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019B                     	;# 
  1374  019C                     	;# 
  1375  019C                     	;# 
  1376  019D                     	;# 
  1377  019E                     	;# 
  1378  019F                     	;# 
  1379  020D                     	;# 
  1380  0210                     	;# 
  1381  0211                     	;# 
  1382  0211                     	;# 
  1383  0212                     	;# 
  1384  0212                     	;# 
  1385  0213                     	;# 
  1386  0213                     	;# 
  1387  0214                     	;# 
  1388  0214                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0215                     	;# 
  1392  0216                     	;# 
  1393  0216                     	;# 
  1394  0217                     	;# 
  1395  0217                     	;# 
  1396  0291                     	;# 
  1397  0291                     	;# 
  1398  0292                     	;# 
  1399  0293                     	;# 
  1400  0298                     	;# 
  1401  0298                     	;# 
  1402  0299                     	;# 
  1403  029A                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  0FE4                     	;# 
  1408  0FE5                     	;# 
  1409  0FE6                     	;# 
  1410  0FE7                     	;# 
  1411  0FE8                     	;# 
  1412  0FE9                     	;# 
  1413  0FEA                     	;# 
  1414  0FEB                     	;# 
  1415  0FED                     	;# 
  1416  0FEE                     	;# 
  1417  0FEF                     	;# 
  1418                           
  1419                           	psect	idataBANK2
  1420  08E6                     __pidataBANK2:	
  1421                           
  1422                           ;initializer for _picBatt
  1423  08E6  340E               	retlw	14
  1424  08E7  341F               	retlw	31
  1425  08E8  3411               	retlw	17
  1426  08E9  3411               	retlw	17
  1427  08EA  3411               	retlw	17
  1428  08EB  3411               	retlw	17
  1429  08EC  3411               	retlw	17
  1430  08ED  341F               	retlw	31
  1431  08EE  3400               	retlw	0
  1432                           
  1433                           ;initializer for _cc1PaTable
  1434  08EF  3403               	retlw	3
  1435  08F0  340F               	retlw	15
  1436  08F1  341E               	retlw	30
  1437  08F2  3427               	retlw	39
  1438  08F3  3450               	retlw	80
  1439  08F4  3481               	retlw	129
  1440  08F5  34CB               	retlw	203
  1441  08F6  34C2               	retlw	194
  1442                           
  1443                           	psect	idataBANK3
  1444  0C2E                     __pidataBANK3:	
  1445                           
  1446                           ;initializer for _cc1InitVal
  1447  0C2E  3447               	retlw	71
  1448  0C2F  3446               	retlw	70
  1449  0C30  344E               	retlw	78
  1450  0C31  341B               	retlw	27
  1451  0C32  34D3               	retlw	211
  1452  0C33  3491               	retlw	145
  1453  0C34  3409               	retlw	9
  1454  0C35  3408               	retlw	8
  1455  0C36  3404               	retlw	4
  1456  0C37  3400               	retlw	0
  1457  0C38  3400               	retlw	0
  1458  0C39  3406               	retlw	6
  1459  0C3A  3400               	retlw	0
  1460  0C3B  3421               	retlw	33
  1461  0C3C  3463               	retlw	99
  1462  0C3D  3491               	retlw	145
  1463  0C3E  34CA               	retlw	202
  1464  0C3F  3483               	retlw	131
  1465  0C40  3402               	retlw	2
  1466  0C41  3402               	retlw	2
  1467  0C42  343B               	retlw	59
  1468  0C43  3434               	retlw	52
  1469  0C44  3407               	retlw	7
  1470  0C45  343F               	retlw	63
  1471  0C46  3408               	retlw	8
  1472  0C47  3416               	retlw	22
  1473  0C48  346C               	retlw	108
  1474  0C49  3403               	retlw	3
  1475  0C4A  3440               	retlw	64
  1476  0C4B  3491               	retlw	145
  1477  0C4C  3487               	retlw	135
  1478  0C4D  346B               	retlw	107
  1479  0C4E  34FB               	retlw	251
  1480  0C4F  3456               	retlw	86
  1481  0C50  3416               	retlw	22
  1482  0C51  34E9               	retlw	233
  1483  0C52  342A               	retlw	42
  1484  0C53  3400               	retlw	0
  1485  0C54  341F               	retlw	31
  1486  0C55  3441               	retlw	65
  1487  0C56  3400               	retlw	0
  1488  0C57  3459               	retlw	89
  1489  0C58  347F               	retlw	127
  1490  0C59  343F               	retlw	63
  1491  0C5A  3481               	retlw	129
  1492  0C5B  3435               	retlw	53
  1493  0C5C  3409               	retlw	9
  1494                           
  1495                           	psect	strings
  1496  0800                     __pstrings:	
  1497  0800                     __stringtab:	
  1498  0800  3400               	retlw	0
  1499  0801                     __end_of__stringtab:	
  1500  0801                     _dpowers:	
  1501  0801  3401               	retlw	1
  1502  0802  3400               	retlw	0
  1503  0803  3400               	retlw	0
  1504  0804  3400               	retlw	0
  1505  0805  340A               	retlw	10
  1506  0806  3400               	retlw	0
  1507  0807  3400               	retlw	0
  1508  0808  3400               	retlw	0
  1509  0809  3464               	retlw	100
  1510  080A  3400               	retlw	0
  1511  080B  3400               	retlw	0
  1512  080C  3400               	retlw	0
  1513  080D  34E8               	retlw	232
  1514  080E  3403               	retlw	3
  1515  080F  3400               	retlw	0
  1516  0810  3400               	retlw	0
  1517  0811  3410               	retlw	16
  1518  0812  3427               	retlw	39
  1519  0813  3400               	retlw	0
  1520  0814  3400               	retlw	0
  1521  0815  34A0               	retlw	160
  1522  0816  3486               	retlw	134
  1523  0817  3401               	retlw	1
  1524  0818  3400               	retlw	0
  1525  0819  3440               	retlw	64
  1526  081A  3442               	retlw	66
  1527  081B  340F               	retlw	15
  1528  081C  3400               	retlw	0
  1529  081D  3480               	retlw	128
  1530  081E  3496               	retlw	150
  1531  081F  3498               	retlw	152
  1532  0820  3400               	retlw	0
  1533  0821  3400               	retlw	0
  1534  0822  34E1               	retlw	225
  1535  0823  34F5               	retlw	245
  1536  0824  3405               	retlw	5
  1537  0825  3400               	retlw	0
  1538  0826  34CA               	retlw	202
  1539  0827  349A               	retlw	154
  1540  0828  343B               	retlw	59
  1541  0829                     __end_of_dpowers:	
  1542  0829                     _nvm_pgm_cfg:	
  1543  0829  345C               	retlw	92
  1544  082A  34C5               	retlw	197
  1545  082B  3400               	retlw	0
  1546  082C  3400               	retlw	0
  1547  082D  3400               	retlw	0
  1548  082E                     __end_of_nvm_pgm_cfg:	
  1549  000B                     _INTCON	set	11
  1550  000B                     _INTCONbits	set	11
  1551  0011                     _PIR1	set	17
  1552  0011                     _PIR1bits	set	17
  1553  0012                     _PIR2	set	18
  1554  000C                     _PORTAbits	set	12
  1555  000D                     _PORTBbits	set	13
  1556  0018                     _T1CON	set	24
  1557  0015                     _TMR0	set	21
  1558  0017                     _TMR1H	set	23
  1559  0016                     _TMR1L	set	22
  1560  0095                     _OPTION_REG	set	149
  1561  0099                     _OSCCON	set	153
  1562  0091                     _PIE1	set	145
  1563  0092                     _PIE2	set	146
  1564  008C                     _TRISA	set	140
  1565  008D                     _TRISB	set	141
  1566  008E                     _TRISC	set	142
  1567  0097                     _WDTCON	set	151
  1568  010C                     _LATA	set	268
  1569  010C                     _LATAbits	set	268
  1570  010E                     _LATCbits	set	270
  1571  0191                     _PMADR	set	401
  1572  0193                     _PMDAT	set	403
  1573  018C                     _ANSELA	set	396
  1574  018D                     _ANSELB	set	397
  1575  018E                     _ANSELC	set	398
  1576  0195                     _PMCON1	set	405
  1577  0195                     _PMCON1bits	set	405
  1578  0196                     _PMCON2	set	406
  1579  0211                     _SSPBUF	set	529
  1580  0215                     _SSPCON1	set	533
  1581  0216                     _SSPCON2	set	534
  1582  0215                     _SSPCONbits	set	533
  1583  0214                     _SSPSTAT	set	532
  1584  020D                     _WPUB	set	525
  1585  082E                     __stringdata:	
  1586  082E                     STR_1:	
  1587  082E  3425               	retlw	37	;'%'
  1588  082F  346C               	retlw	108	;'l'
  1589  0830  3475               	retlw	117	;'u'
  1590  0831  342E               	retlw	46	;'.'
  1591  0832  3425               	retlw	37	;'%'
  1592  0833  3436               	retlw	54	;'6'
  1593  0834  342E               	retlw	46	;'.'
  1594  0835  3436               	retlw	54	;'6'
  1595  0836  346C               	retlw	108	;'l'
  1596  0837  3475               	retlw	117	;'u'
  1597  0838  3400               	retlw	0
  1598  0839                     __end_of__stringdata:	
  1599                           
  1600                           ; #config settings
  1601  0000                     
  1602                           	psect	cinit
  1603  0013                     start_initialization:	
  1604  0013                     __initialization:	
  1605                           
  1606                           ; Clear objects allocated to COMMON
  1607  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  1608                           
  1609                           ; Clear objects allocated to BANK0
  1610  0014  3069               	movlw	low __pbssBANK0
  1611  0015  0084               	movwf	4
  1612  0016  3000               	movlw	high __pbssBANK0
  1613  0017  0085               	movwf	5
  1614  0018  3007               	movlw	7
  1615  0019  3188  205B  3180   	fcall	clear_ram0
  1616                           
  1617                           ; Clear objects allocated to BANK1
  1618  001C  30A0               	movlw	low __pbssBANK1
  1619  001D  0084               	movwf	4
  1620  001E  3000               	movlw	high __pbssBANK1
  1621  001F  0085               	movwf	5
  1622  0020  3031               	movlw	49
  1623  0021  3188  205B  3180   	fcall	clear_ram0
  1624                           
  1625                           ; Clear objects allocated to BANK2
  1626  0024  3020               	movlw	low __pbssBANK2
  1627  0025  0084               	movwf	4
  1628  0026  3001               	movlw	high __pbssBANK2
  1629  0027  0085               	movwf	5
  1630  0028  3021               	movlw	33
  1631  0029  3188  205B  3180   	fcall	clear_ram0
  1632                           
  1633                           ; Initialize objects allocated to BANK2
  1634  002C  30E6               	movlw	low __pidataBANK2
  1635  002D  0084               	movwf	4
  1636  002E  3088               	movlw	(high __pidataBANK2)| (0+128)
  1637  002F  0085               	movwf	5
  1638  0030  3041               	movlw	low __pdataBANK2
  1639  0031  0086               	movwf	6
  1640  0032  3001               	movlw	high __pdataBANK2
  1641  0033  0087               	movwf	7
  1642  0034  3011               	movlw	17
  1643  0035  3188  2055  3180   	fcall	init_ram
  1644                           
  1645                           ; Initialize objects allocated to BANK3
  1646  0038  302E               	movlw	low __pidataBANK3
  1647  0039  0084               	movwf	4
  1648  003A  308C               	movlw	(high __pidataBANK3)| (0+128)
  1649  003B  0085               	movwf	5
  1650  003C  30A0               	movlw	low __pdataBANK3
  1651  003D  0086               	movwf	6
  1652  003E  3001               	movlw	high __pdataBANK3
  1653  003F  0087               	movwf	7
  1654  0040  302F               	movlw	47
  1655  0041  3188  2055         	fcall	init_ram
  1656  0043                     end_of_initialization:	
  1657                           ;End of C runtime variable initialization code
  1658                           
  1659  0043                     __end_of__initialization:	
  1660  0043  0020               	movlb	0
  1661  0044  318E  2E04         	ljmp	_main	;jump to C main() function
  1662                           
  1663                           	psect	bssCOMMON
  1664  007C                     __pbssCOMMON:	
  1665  007C                     _u_in_sta_currTask:	
  1666  007C                     	ds	1
  1667                           
  1668                           	psect	bssBANK0
  1669  0069                     __pbssBANK0:	
  1670  0069                     _tmrDbncSel:	
  1671  0069                     	ds	1
  1672  006A                     _tmrPgm:	
  1673  006A                     	ds	1
  1674  006B                     _tmrRcvPkt:	
  1675  006B                     	ds	1
  1676  006C                     _u_flg_din:	
  1677  006C                     	ds	1
  1678  006D                     _u_in_ev_down:	
  1679  006D                     	ds	1
  1680  006E                     _u_in_ev_long:	
  1681  006E                     	ds	1
  1682  006F                     _u_in_sta_tmpTask:	
  1683  006F                     	ds	1
  1684                           
  1685                           	psect	bssBANK1
  1686  00A0                     __pbssBANK1:	
  1687  00A0                     _batt:	
  1688  00A0                     	ds	3
  1689  00A3                     _temp:	
  1690  00A3                     	ds	3
  1691  00A6                     _tmrLongSel:	
  1692  00A6                     	ds	2
  1693  00A8                     _pgm_flg:	
  1694  00A8                     	ds	1
  1695  00A9                     _rtx_flg:	
  1696  00A9                     	ds	1
  1697  00AA                     _s_CC1_FLG:	
  1698  00AA                     	ds	1
  1699  00AB                     _sys_pgm_sta:	
  1700  00AB                     	ds	1
  1701  00AC                     _u_SYS_STA:	
  1702  00AC                     	ds	1
  1703  00AD                     _u_in_ev_up:	
  1704  00AD                     	ds	1
  1705  00AE                     _strTitle:	
  1706  00AE                     	ds	12
  1707  00BA                     _pktRx:	
  1708  00BA                     	ds	9
  1709  00C3                     _pktTx:	
  1710  00C3                     	ds	9
  1711  00CC                     _pgm_cfg:	
  1712  00CC                     	ds	5
  1713                           
  1714                           	psect	bssBANK2
  1715  0120                     __pbssBANK2:	
  1716  0120                     ftoa@buf:	
  1717  0120                     	ds	17
  1718  0131                     _strTemp:	
  1719  0131                     	ds	16
  1720                           
  1721                           	psect	dataBANK2
  1722  0141                     __pdataBANK2:	
  1723  0141                     _picBatt:	
  1724  0141                     	ds	9
  1725  014A                     _cc1PaTable:	
  1726  014A                     	ds	8
  1727                           
  1728                           	psect	dataBANK3
  1729  01A0                     __pdataBANK3:	
  1730  01A0                     _cc1InitVal:	
  1731  01A0                     	ds	47
  1732                           
  1733                           	psect	clrtext
  1734  085B                     clear_ram0:	
  1735                           ;	Called with FSR0 containing the base address, and
  1736                           ;	WREG with the size to clear
  1737                           
  1738  085B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1739  085C                     clrloop0:	
  1740  085C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1741  085D  3101               	addfsr 0,1
  1742  085E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1743  085F  285C               	goto	clrloop0	;have we reached the end yet?
  1744  0860  3400               	retlw	0	;all done for this memory range, return
  1745                           
  1746                           	psect	inittext
  1747  0855                     init_ram:	
  1748  0855  00FE               	movwf	126
  1749  0856                     initloop:	
  1750  0856  0012               	moviw fsr0++
  1751  0857  001E               	movwi fsr1++
  1752  0858  0BFE               	decfsz	126,f
  1753  0859  2856               	goto	initloop
  1754  085A  3400               	retlw	0
  1755                           
  1756                           	psect	cstackBANK1
  1757  00D1                     __pcstackBANK1:	
  1758  00D1                     RTXUpdateDisplay@strTmp:	
  1759                           
  1760                           ; 16 bytes @ 0x0
  1761  00D1                     	ds	16
  1762  00E1                     RTXUpdateDisplay@status:	
  1763                           
  1764                           ; 2 bytes @ 0x10
  1765  00E1                     	ds	2
  1766  00E3                     RTXUpdateDisplay@posDec:	
  1767                           
  1768                           ; 1 bytes @ 0x12
  1769  00E3                     	ds	1
  1770  00E4                     RTXUpdateDisplay@isDec:	
  1771                           
  1772                           ; 1 bytes @ 0x13
  1773  00E4                     	ds	1
  1774  00E5                     RTXUpdateDisplay@val:	
  1775                           
  1776                           ; 1 bytes @ 0x14
  1777  00E5                     	ds	1
  1778  00E6                     RTXUpdateDisplay@p:	
  1779                           
  1780                           ; 1 bytes @ 0x15
  1781  00E6                     	ds	1
  1782  00E7                     RTXUpdateDisplay@offset:	
  1783                           
  1784                           ; 1 bytes @ 0x16
  1785  00E7                     	ds	1
  1786  00E8                     RTXUpdateDisplay@maxDigit:	
  1787                           
  1788                           ; 1 bytes @ 0x17
  1789  00E8                     	ds	1
  1790  00E9                     RTXUpdateDisplay@j:	
  1791                           
  1792                           ; 1 bytes @ 0x18
  1793  00E9                     	ds	1
  1794  00EA                     RTXUpdateDisplay@i:	
  1795                           
  1796                           ; 1 bytes @ 0x19
  1797  00EA                     	ds	1
  1798                           
  1799                           	psect	cstackCOMMON
  1800  0070                     __pcstackCOMMON:	
  1801  0070                     ?_CC1Strobe:	
  1802  0070                     ?_DPYInitDisplay:	
  1803                           ; 0 bytes @ 0x0
  1804                           
  1805  0070                     ?_PGMReadNvm:	
  1806                           ; 0 bytes @ 0x0
  1807                           
  1808  0070                     ?_PGMCheckNvm:	
  1809                           ; 0 bytes @ 0x0
  1810                           
  1811  0070                     ?_PGMNvmReset:	
  1812                           ; 0 bytes @ 0x0
  1813                           
  1814  0070                     ?_RTXUpdateDisplay:	
  1815                           ; 0 bytes @ 0x0
  1816                           
  1817  0070                     ?_RTXSendPgm:	
  1818                           ; 0 bytes @ 0x0
  1819                           
  1820  0070                     ?_RTXReadPkt:	
  1821                           ; 0 bytes @ 0x0
  1822                           
  1823  0070                     ?_RTXSendRData:	
  1824                           ; 0 bytes @ 0x0
  1825                           
  1826  0070                     ?_isdigit:	
  1827                           ; 0 bytes @ 0x0
  1828                           
  1829  0070                     ?_INInit:	
  1830                           ; 1 bit 
  1831                           
  1832  0070                     ?_OUTInit:	
  1833                           ; 0 bytes @ 0x0
  1834                           
  1835  0070                     ?_OUTSetHTCDataNibble:	
  1836                           ; 0 bytes @ 0x0
  1837                           
  1838  0070                     ?_SPIInit:	
  1839                           ; 0 bytes @ 0x0
  1840                           
  1841  0070                     ?_CC1Init:	
  1842                           ; 0 bytes @ 0x0
  1843                           
  1844  0070                     ?_NVMInit:	
  1845                           ; 0 bytes @ 0x0
  1846                           
  1847  0070                     ?_DINInit:	
  1848                           ; 0 bytes @ 0x0
  1849                           
  1850  0070                     ?_DINTick:	
  1851                           ; 0 bytes @ 0x0
  1852                           
  1853  0070                     ?_DINTask:	
  1854                           ; 0 bytes @ 0x0
  1855                           
  1856  0070                     ?_DPYInit:	
  1857                           ; 0 bytes @ 0x0
  1858                           
  1859  0070                     ?_DPYSendChar:	
  1860                           ; 0 bytes @ 0x0
  1861                           
  1862  0070                     ?_PGMInit:	
  1863                           ; 0 bytes @ 0x0
  1864                           
  1865  0070                     ?_PGMTick:	
  1866                           ; 0 bytes @ 0x0
  1867                           
  1868  0070                     ?_PGMWriteNvm:	
  1869                           ; 0 bytes @ 0x0
  1870                           
  1871  0070                     ?_PGMPgmOff:	
  1872                           ; 0 bytes @ 0x0
  1873                           
  1874  0070                     ?_PGMSelDown:	
  1875                           ; 0 bytes @ 0x0
  1876                           
  1877  0070                     ?_PGMSelLong:	
  1878                           ; 0 bytes @ 0x0
  1879                           
  1880  0070                     ?_RTXInit:	
  1881                           ; 0 bytes @ 0x0
  1882                           
  1883  0070                     ?_RTXTick:	
  1884                           ; 0 bytes @ 0x0
  1885                           
  1886  0070                     ?_RTXTask:	
  1887                           ; 0 bytes @ 0x0
  1888                           
  1889  0070                     ?_SYSInit:	
  1890                           ; 0 bytes @ 0x0
  1891                           
  1892  0070                     ?_SYSInt:	
  1893                           ; 0 bytes @ 0x0
  1894                           
  1895  0070                     ??_SYSInt:	
  1896                           ; 0 bytes @ 0x0
  1897                           
  1898  0070                     ?_SYSTask:	
  1899                           ; 0 bytes @ 0x0
  1900                           
  1901  0070                     ?_INTIsr:	
  1902                           ; 0 bytes @ 0x0
  1903                           
  1904  0070                     ??_INTIsr:	
  1905                           ; 0 bytes @ 0x0
  1906                           
  1907  0070                     ?_main:	
  1908                           ; 0 bytes @ 0x0
  1909                           
  1910  0070                     ?_DPYIsBusy:	
  1911                           ; 0 bytes @ 0x0
  1912                           
  1913                           
  1914                           ; 1 bytes @ 0x0
  1915  0070                     	ds	1
  1916  0071                     ??_isdigit:	
  1917  0071                     ??_INInit:	
  1918                           ; 0 bytes @ 0x1
  1919                           
  1920  0071                     ??_OUTInit:	
  1921                           ; 0 bytes @ 0x1
  1922                           
  1923  0071                     ??_OUTSetHTCDataNibble:	
  1924                           ; 0 bytes @ 0x1
  1925                           
  1926  0071                     ??_SPIInit:	
  1927                           ; 0 bytes @ 0x1
  1928                           
  1929  0071                     ?_SPIRead:	
  1930                           ; 0 bytes @ 0x1
  1931                           
  1932  0071                     ?_SPIWrite:	
  1933                           ; 0 bytes @ 0x1
  1934                           
  1935  0071                     ?_DLYDelay_us:	
  1936                           ; 0 bytes @ 0x1
  1937                           
  1938  0071                     ?_DLYDelay_ms:	
  1939                           ; 0 bytes @ 0x1
  1940                           
  1941  0071                     ??_NVMInit:	
  1942                           ; 0 bytes @ 0x1
  1943                           
  1944  0071                     ?_NVMRead:	
  1945                           ; 0 bytes @ 0x1
  1946                           
  1947  0071                     ?_NVMWrite:	
  1948                           ; 0 bytes @ 0x1
  1949                           
  1950  0071                     ??_DINInit:	
  1951                           ; 0 bytes @ 0x1
  1952                           
  1953  0071                     ??_DINTick:	
  1954                           ; 0 bytes @ 0x1
  1955                           
  1956  0071                     ??_DINTask:	
  1957                           ; 0 bytes @ 0x1
  1958                           
  1959  0071                     ??_PGMTick:	
  1960                           ; 0 bytes @ 0x1
  1961                           
  1962  0071                     ??_PGMPgmOff:	
  1963                           ; 0 bytes @ 0x1
  1964                           
  1965  0071                     ??_PGMSelDown:	
  1966                           ; 0 bytes @ 0x1
  1967                           
  1968  0071                     ??_SYSInit:	
  1969                           ; 0 bytes @ 0x1
  1970                           
  1971  0071                     ?___ftge:	
  1972                           ; 0 bytes @ 0x1
  1973                           
  1974  0071                     ?___awdiv:	
  1975                           ; 1 bit 
  1976                           
  1977  0071                     ?___wmul:	
  1978                           ; 2 bytes @ 0x1
  1979                           
  1980  0071                     ?___ftpack:	
  1981                           ; 2 bytes @ 0x1
  1982                           
  1983  0071                     ?___ftneg:	
  1984                           ; 3 bytes @ 0x1
  1985                           
  1986  0071                     ?___lldiv:	
  1987                           ; 3 bytes @ 0x1
  1988                           
  1989  0071                     SPIRead@len:	
  1990                           ; 4 bytes @ 0x1
  1991                           
  1992  0071                     NVMInit@sta:	
  1993                           ; 1 bytes @ 0x1
  1994                           
  1995  0071                     DINInit@sta:	
  1996                           ; 1 bytes @ 0x1
  1997                           
  1998  0071                     _isdigit$1010:	
  1999                           ; 1 bytes @ 0x1
  2000                           
  2001  0071                     SPIWrite@srcPtr:	
  2002                           ; 1 bytes @ 0x1
  2003                           
  2004  0071                     DLYDelay_us@val:	
  2005                           ; 2 bytes @ 0x1
  2006                           
  2007  0071                     DLYDelay_ms@val:	
  2008                           ; 2 bytes @ 0x1
  2009                           
  2010  0071                     NVMRead@addr:	
  2011                           ; 2 bytes @ 0x1
  2012                           
  2013  0071                     NVMWrite@addr:	
  2014                           ; 2 bytes @ 0x1
  2015                           
  2016  0071                     ___awdiv@divisor:	
  2017                           ; 2 bytes @ 0x1
  2018                           
  2019  0071                     ___wmul@multiplier:	
  2020                           ; 2 bytes @ 0x1
  2021                           
  2022  0071                     ___ftpack@arg:	
  2023                           ; 2 bytes @ 0x1
  2024                           
  2025  0071                     ___ftge@ff1:	
  2026                           ; 3 bytes @ 0x1
  2027                           
  2028  0071                     ___ftneg@f1:	
  2029                           ; 3 bytes @ 0x1
  2030                           
  2031  0071                     ___lldiv@divisor:	
  2032                           ; 3 bytes @ 0x1
  2033                           
  2034                           
  2035                           ; 4 bytes @ 0x1
  2036  0071                     	ds	1
  2037  0072                     ??_SPIRead:	
  2038  0072                     INInit@sta:	
  2039                           ; 0 bytes @ 0x2
  2040                           
  2041  0072                     OUTInit@sta:	
  2042                           ; 1 bytes @ 0x2
  2043                           
  2044  0072                     OUTSetHTCDataNibble@val:	
  2045                           ; 1 bytes @ 0x2
  2046                           
  2047  0072                     SPIInit@state:	
  2048                           ; 1 bytes @ 0x2
  2049                           
  2050  0072                     SYSInit@state:	
  2051                           ; 1 bytes @ 0x2
  2052                           
  2053  0072                     isdigit@c:	
  2054                           ; 1 bytes @ 0x2
  2055                           
  2056                           
  2057                           ; 1 bytes @ 0x2
  2058  0072                     	ds	1
  2059  0073                     ??_DLYDelay_us:	
  2060  0073                     ??_DLYDelay_ms:	
  2061                           ; 0 bytes @ 0x3
  2062                           
  2063  0073                     OUTSetHTCDataNibble@dataToSet:	
  2064                           ; 0 bytes @ 0x3
  2065                           
  2066  0073                     SPIWrite@len:	
  2067                           ; 1 bytes @ 0x3
  2068                           
  2069  0073                     NVMRead@dest:	
  2070                           ; 1 bytes @ 0x3
  2071                           
  2072  0073                     NVMWrite@source:	
  2073                           ; 1 bytes @ 0x3
  2074                           
  2075  0073                     DLYDelay_us@i:	
  2076                           ; 1 bytes @ 0x3
  2077                           
  2078  0073                     ___awdiv@dividend:	
  2079                           ; 2 bytes @ 0x3
  2080                           
  2081  0073                     ___wmul@multiplicand:	
  2082                           ; 2 bytes @ 0x3
  2083                           
  2084                           
  2085                           ; 2 bytes @ 0x3
  2086  0073                     	ds	1
  2087  0074                     ??_SPIWrite:	
  2088  0074                     ??___ftneg:	
  2089                           ; 0 bytes @ 0x4
  2090                           
  2091  0074                     SPIRead@dstPtr:	
  2092                           ; 0 bytes @ 0x4
  2093                           
  2094  0074                     NVMRead@len:	
  2095                           ; 1 bytes @ 0x4
  2096                           
  2097  0074                     NVMWrite@len:	
  2098                           ; 1 bytes @ 0x4
  2099                           
  2100  0074                     ___ftpack@exp:	
  2101                           ; 1 bytes @ 0x4
  2102                           
  2103  0074                     ___ftge@ff2:	
  2104                           ; 1 bytes @ 0x4
  2105                           
  2106                           
  2107                           ; 3 bytes @ 0x4
  2108  0074                     	ds	1
  2109  0075                     ?_DPYWriteNibble:	
  2110  0075                     ?_DPYWriteByte:	
  2111                           ; 0 bytes @ 0x5
  2112                           
  2113  0075                     ??_DPYIsBusy:	
  2114                           ; 0 bytes @ 0x5
  2115                           
  2116  0075                     ??_NVMRead:	
  2117                           ; 0 bytes @ 0x5
  2118                           
  2119  0075                     ??_NVMWrite:	
  2120                           ; 0 bytes @ 0x5
  2121                           
  2122  0075                     ??___awdiv:	
  2123                           ; 0 bytes @ 0x5
  2124                           
  2125  0075                     ??___wmul:	
  2126                           ; 0 bytes @ 0x5
  2127                           
  2128  0075                     SPIRead@i:	
  2129                           ; 0 bytes @ 0x5
  2130                           
  2131  0075                     DPYWriteNibble@val:	
  2132                           ; 1 bytes @ 0x5
  2133                           
  2134  0075                     DPYWriteByte@val:	
  2135                           ; 1 bytes @ 0x5
  2136                           
  2137  0075                     ___ftpack@sign:	
  2138                           ; 1 bytes @ 0x5
  2139                           
  2140  0075                     DLYDelay_ms@i:	
  2141                           ; 1 bytes @ 0x5
  2142                           
  2143  0075                     ___wmul@product:	
  2144                           ; 2 bytes @ 0x5
  2145                           
  2146  0075                     ___lldiv@dividend:	
  2147                           ; 2 bytes @ 0x5
  2148                           
  2149                           
  2150                           ; 4 bytes @ 0x5
  2151  0075                     	ds	1
  2152  0076                     ??_DPYWriteNibble:	
  2153  0076                     ??_DPYWriteByte:	
  2154                           ; 0 bytes @ 0x6
  2155                           
  2156  0076                     ??___ftpack:	
  2157                           ; 0 bytes @ 0x6
  2158                           
  2159  0076                     SPIWrite@i:	
  2160                           ; 0 bytes @ 0x6
  2161                           
  2162  0076                     DPYWriteNibble@rs:	
  2163                           ; 1 bytes @ 0x6
  2164                           
  2165  0076                     DPYIsBusy@bf:	
  2166                           ; 1 bytes @ 0x6
  2167                           
  2168  0076                     ___awdiv@counter:	
  2169                           ; 1 bytes @ 0x6
  2170                           
  2171                           
  2172                           ; 1 bytes @ 0x6
  2173  0076                     	ds	1
  2174  0077                     ??_CC1Strobe:	
  2175  0077                     ?_CC1Write:	
  2176                           ; 0 bytes @ 0x7
  2177                           
  2178  0077                     ?_CC1Read:	
  2179                           ; 0 bytes @ 0x7
  2180                           
  2181  0077                     ??___ftge:	
  2182                           ; 0 bytes @ 0x7
  2183                           
  2184  0077                     CC1Read@dst:	
  2185                           ; 0 bytes @ 0x7
  2186                           
  2187  0077                     NVMRead@i:	
  2188                           ; 1 bytes @ 0x7
  2189                           
  2190  0077                     DPYWriteByte@rs:	
  2191                           ; 1 bytes @ 0x7
  2192                           
  2193  0077                     ___awdiv@sign:	
  2194                           ; 1 bytes @ 0x7
  2195                           
  2196  0077                     CC1Write@src:	
  2197                           ; 1 bytes @ 0x7
  2198                           
  2199                           
  2200                           ; 2 bytes @ 0x7
  2201  0077                     	ds	1
  2202  0078                     ?_DPYDrawChar:	
  2203  0078                     ??_PGMReadNvm:	
  2204                           ; 0 bytes @ 0x8
  2205                           
  2206  0078                     ?_DPYSetCur:	
  2207                           ; 0 bytes @ 0x8
  2208                           
  2209  0078                     ??_DPYSendChar:	
  2210                           ; 0 bytes @ 0x8
  2211                           
  2212  0078                     ??_PGMWriteNvm:	
  2213                           ; 0 bytes @ 0x8
  2214                           
  2215  0078                     CC1Strobe@e_stb:	
  2216                           ; 0 bytes @ 0x8
  2217                           
  2218  0078                     CC1Read@len:	
  2219                           ; 1 bytes @ 0x8
  2220                           
  2221  0078                     DPYDrawChar@p:	
  2222                           ; 1 bytes @ 0x8
  2223                           
  2224  0078                     DPYSetCur@col:	
  2225                           ; 1 bytes @ 0x8
  2226                           
  2227  0078                     ___awdiv@quotient:	
  2228                           ; 1 bytes @ 0x8
  2229                           
  2230                           
  2231                           ; 2 bytes @ 0x8
  2232  0078                     	ds	1
  2233  0079                     ??_DPYDrawChar:	
  2234  0079                     ??_CC1Read:	
  2235                           ; 0 bytes @ 0x9
  2236                           
  2237  0079                     ??_DPYSetCur:	
  2238                           ; 0 bytes @ 0x9
  2239                           
  2240  0079                     ??___lldiv:	
  2241                           ; 0 bytes @ 0x9
  2242                           
  2243  0079                     ??___lltoft:	
  2244                           ; 0 bytes @ 0x9
  2245                           
  2246  0079                     ?___lbtoft:	
  2247                           ; 0 bytes @ 0x9
  2248                           
  2249  0079                     CC1Strobe@cc1Stb:	
  2250                           ; 3 bytes @ 0x9
  2251                           
  2252  0079                     CC1Write@len:	
  2253                           ; 1 bytes @ 0x9
  2254                           
  2255  0079                     DPYSendChar@c:	
  2256                           ; 1 bytes @ 0x9
  2257                           
  2258  0079                     ___ftadd@sign:	
  2259                           ; 1 bytes @ 0x9
  2260                           
  2261                           
  2262                           ; 1 bytes @ 0x9
  2263  0079                     	ds	1
  2264  007A                     ??_CC1Write:	
  2265  007A                     ??___llmod:	
  2266                           ; 0 bytes @ 0xA
  2267                           
  2268  007A                     CC1Read@addr:	
  2269                           ; 0 bytes @ 0xA
  2270                           
  2271  007A                     DPYSetCur@row:	
  2272                           ; 1 bytes @ 0xA
  2273                           
  2274  007A                     ___ftadd@exp2:	
  2275                           ; 1 bytes @ 0xA
  2276                           
  2277  007A                     ___lltoft@exp:	
  2278                           ; 1 bytes @ 0xA
  2279                           
  2280                           
  2281                           ; 1 bytes @ 0xA
  2282  007A                     	ds	1
  2283  007B                     ??_DPYInitDisplay:	
  2284  007B                     ??_CC1Init:	
  2285                           ; 0 bytes @ 0xB
  2286                           
  2287  007B                     CC1Read@cc1Addr:	
  2288                           ; 0 bytes @ 0xB
  2289                           
  2290  007B                     DPYSetCur@addr:	
  2291                           ; 1 bytes @ 0xB
  2292                           
  2293  007B                     ___ftadd@exp1:	
  2294                           ; 1 bytes @ 0xB
  2295                           
  2296  007B                     ___llmod@counter:	
  2297                           ; 1 bytes @ 0xB
  2298                           
  2299                           
  2300                           ; 1 bytes @ 0xB
  2301  007B                     	ds	1
  2302  007C                     ??_PGMCheckNvm:	
  2303  007C                     ??_DPYInit:	
  2304                           ; 0 bytes @ 0xC
  2305                           
  2306  007C                     ??_PGMInit:	
  2307                           ; 0 bytes @ 0xC
  2308                           
  2309  007C                     ??_RTXInit:	
  2310                           ; 0 bytes @ 0xC
  2311                           
  2312  007C                     ??_RTXTick:	
  2313                           ; 0 bytes @ 0xC
  2314                           
  2315  007C                     ??_RTXTask:	
  2316                           ; 0 bytes @ 0xC
  2317                           
  2318  007C                     ??_SYSTask:	
  2319                           ; 0 bytes @ 0xC
  2320                           
  2321  007C                     ??___ftsub:	
  2322                           ; 0 bytes @ 0xC
  2323                           
  2324                           
  2325                           	psect	cstackBANK0
  2326  0020                     __pcstackBANK0:	
  2327                           ; 0 bytes @ 0xC
  2328                           
  2329  0020                     ?_DPYSendStr:	
  2330  0020                     ?_RTXRcvPkt:	
  2331                           ; 0 bytes @ 0x0
  2332                           
  2333  0020                     ??___lbtoft:	
  2334                           ; 0 bytes @ 0x0
  2335                           
  2336  0020                     ?___ftadd:	
  2337                           ; 0 bytes @ 0x0
  2338                           
  2339  0020                     ?___ftmul:	
  2340                           ; 3 bytes @ 0x0
  2341                           
  2342  0020                     ?___lltoft:	
  2343                           ; 3 bytes @ 0x0
  2344                           
  2345  0020                     CC1Write@addr:	
  2346                           ; 3 bytes @ 0x0
  2347                           
  2348  0020                     DPYDrawChar@addr:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0020                     DPYSendStr@col:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0020                     RTXRcvPkt@len:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0020                     ___ftadd@f1:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0020                     ___ftmul@f1:	
  2361                           ; 3 bytes @ 0x0
  2362                           
  2363  0020                     ___lldiv@quotient:	
  2364                           ; 3 bytes @ 0x0
  2365                           
  2366  0020                     ___lltoft@c:	
  2367                           ; 4 bytes @ 0x0
  2368                           
  2369  0020                     NVMWrite@bufTmpRow:	
  2370                           ; 4 bytes @ 0x0
  2371                           
  2372                           
  2373                           ; 64 bytes @ 0x0
  2374  0020                     	ds	1
  2375  0021                     ??_RTXRcvPkt:	
  2376  0021                     CC1Write@cc1Addr:	
  2377                           ; 0 bytes @ 0x1
  2378                           
  2379  0021                     DPYDrawChar@tmpAddr:	
  2380                           ; 1 bytes @ 0x1
  2381                           
  2382  0021                     DPYSendStr@data:	
  2383                           ; 1 bytes @ 0x1
  2384                           
  2385                           
  2386                           ; 2 bytes @ 0x1
  2387  0021                     	ds	1
  2388  0022                     ?_RTXSndPkt:	
  2389  0022                     CC1Init@state:	
  2390                           ; 0 bytes @ 0x2
  2391                           
  2392  0022                     DPYDrawChar@i:	
  2393                           ; 1 bytes @ 0x2
  2394                           
  2395  0022                     RTXSndPkt@len:	
  2396                           ; 1 bytes @ 0x2
  2397                           
  2398                           
  2399                           ; 1 bytes @ 0x2
  2400  0022                     	ds	1
  2401  0023                     ??_RTXSndPkt:	
  2402  0023                     DPYInitDisplay@tmp:	
  2403                           ; 0 bytes @ 0x3
  2404                           
  2405  0023                     DPYSendStr@len:	
  2406                           ; 1 bytes @ 0x3
  2407                           
  2408  0023                     RTXRcvPkt@dst:	
  2409                           ; 1 bytes @ 0x3
  2410                           
  2411  0023                     ___ftadd@f2:	
  2412                           ; 1 bytes @ 0x3
  2413                           
  2414  0023                     ___ftmul@f2:	
  2415                           ; 3 bytes @ 0x3
  2416                           
  2417                           
  2418                           ; 3 bytes @ 0x3
  2419  0023                     	ds	1
  2420  0024                     ??_DPYSendStr:	
  2421  0024                     DPYInit@sta:	
  2422                           ; 0 bytes @ 0x4
  2423                           
  2424  0024                     RTXSndPkt@src:	
  2425                           ; 1 bytes @ 0x4
  2426                           
  2427  0024                     ___lbtoft@c:	
  2428                           ; 1 bytes @ 0x4
  2429                           
  2430  0024                     ___lldiv@counter:	
  2431                           ; 1 bytes @ 0x4
  2432                           
  2433                           
  2434                           ; 1 bytes @ 0x4
  2435  0024                     	ds	1
  2436  0025                     ?___llmod:	
  2437  0025                     RTXSndPkt@numRxByte:	
  2438                           ; 4 bytes @ 0x5
  2439                           
  2440  0025                     ___llmod@divisor:	
  2441                           ; 1 bytes @ 0x5
  2442                           
  2443                           
  2444                           ; 4 bytes @ 0x5
  2445  0025                     	ds	1
  2446  0026                     ??___ftadd:	
  2447  0026                     ??___ftmul:	
  2448                           ; 0 bytes @ 0x6
  2449                           
  2450  0026                     DPYSendStr@i:	
  2451                           ; 0 bytes @ 0x6
  2452                           
  2453  0026                     RTXSndPkt@numTxByte:	
  2454                           ; 1 bytes @ 0x6
  2455                           
  2456                           
  2457                           ; 1 bytes @ 0x6
  2458  0026                     	ds	1
  2459  0027                     DPYSendStr@row:	
  2460  0027                     RTXSndPkt@sta:	
  2461                           ; 1 bytes @ 0x7
  2462                           
  2463                           
  2464                           ; 1 bytes @ 0x7
  2465  0027                     	ds	1
  2466  0028                     ??_RTXSendPgm:	
  2467  0028                     ??_RTXSendRData:	
  2468                           ; 0 bytes @ 0x8
  2469                           
  2470                           
  2471                           ; 0 bytes @ 0x8
  2472  0028                     	ds	1
  2473  0029                     ___llmod@dividend:	
  2474                           
  2475                           ; 4 bytes @ 0x9
  2476  0029                     	ds	1
  2477  002A                     ?___ftsub:	
  2478  002A                     ___ftmul@exp:	
  2479                           ; 3 bytes @ 0xA
  2480                           
  2481  002A                     ___ftsub@f2:	
  2482                           ; 1 bytes @ 0xA
  2483                           
  2484                           
  2485                           ; 3 bytes @ 0xA
  2486  002A                     	ds	1
  2487  002B                     ___ftmul@f3_as_product:	
  2488                           
  2489                           ; 3 bytes @ 0xB
  2490  002B                     	ds	2
  2491  002D                     ?_sprintf:	
  2492  002D                     sprintf@f:	
  2493                           ; 2 bytes @ 0xD
  2494                           
  2495  002D                     ___ftsub@f1:	
  2496                           ; 1 bytes @ 0xD
  2497                           
  2498                           
  2499                           ; 3 bytes @ 0xD
  2500  002D                     	ds	1
  2501  002E                     ___ftmul@cntr:	
  2502                           
  2503                           ; 1 bytes @ 0xE
  2504  002E                     	ds	1
  2505  002F                     ___ftmul@sign:	
  2506                           
  2507                           ; 1 bytes @ 0xF
  2508  002F                     	ds	1
  2509  0030                     ?___fttol:	
  2510  0030                     ___fttol@f1:	
  2511                           ; 4 bytes @ 0x10
  2512                           
  2513                           
  2514                           ; 3 bytes @ 0x10
  2515  0030                     	ds	4
  2516  0034                     ??___fttol:	
  2517                           
  2518                           ; 0 bytes @ 0x14
  2519  0034                     	ds	2
  2520  0036                     ??_sprintf:	
  2521                           
  2522                           ; 0 bytes @ 0x16
  2523  0036                     	ds	2
  2524  0038                     ___fttol@sign1:	
  2525                           
  2526                           ; 1 bytes @ 0x18
  2527  0038                     	ds	1
  2528  0039                     ___fttol@lval:	
  2529                           
  2530                           ; 4 bytes @ 0x19
  2531  0039                     	ds	2
  2532  003B                     sprintf@flag:	
  2533                           
  2534                           ; 1 bytes @ 0x1B
  2535  003B                     	ds	1
  2536  003C                     sprintf@ap:	
  2537                           
  2538                           ; 1 bytes @ 0x1C
  2539  003C                     	ds	1
  2540  003D                     ___fttol@exp1:	
  2541  003D                     sprintf@_val:	
  2542                           ; 1 bytes @ 0x1D
  2543                           
  2544                           
  2545                           ; 4 bytes @ 0x1D
  2546  003D                     	ds	4
  2547  0041                     sprintf@sp:	
  2548                           
  2549                           ; 1 bytes @ 0x21
  2550  0041                     	ds	1
  2551  0042                     sprintf@width:	
  2552                           
  2553                           ; 2 bytes @ 0x22
  2554  0042                     	ds	2
  2555  0044                     sprintf@prec:	
  2556                           
  2557                           ; 2 bytes @ 0x24
  2558  0044                     	ds	2
  2559  0046                     sprintf@c:	
  2560                           
  2561                           ; 1 bytes @ 0x26
  2562  0046                     	ds	1
  2563  0047                     ?_ftoa:	
  2564  0047                     ftoa@f:	
  2565                           ; 1 bytes @ 0x27
  2566                           
  2567                           
  2568                           ; 3 bytes @ 0x27
  2569  0047                     	ds	3
  2570  004A                     ftoa@status:	
  2571                           
  2572                           ; 1 bytes @ 0x2A
  2573  004A                     	ds	1
  2574  004B                     ??_ftoa:	
  2575                           
  2576                           ; 0 bytes @ 0x2B
  2577  004B                     	ds	1
  2578  004C                     ftoa@rem:	
  2579                           
  2580                           ; 4 bytes @ 0x2C
  2581  004C                     	ds	4
  2582  0050                     ftoa@l:	
  2583                           
  2584                           ; 4 bytes @ 0x30
  2585  0050                     	ds	4
  2586  0054                     ftoa@cp:	
  2587                           
  2588                           ; 1 bytes @ 0x34
  2589  0054                     	ds	1
  2590  0055                     ??_RTXUpdateDisplay:	
  2591                           
  2592                           ; 0 bytes @ 0x35
  2593  0055                     	ds	4
  2594  0059                     RTXInit@state:	
  2595                           
  2596                           ; 1 bytes @ 0x39
  2597  0059                     	ds	7
  2598  0060                     NVMWrite@rowAddr:	
  2599                           
  2600                           ; 2 bytes @ 0x40
  2601  0060                     	ds	2
  2602  0062                     NVMWrite@i:	
  2603                           
  2604                           ; 1 bytes @ 0x42
  2605  0062                     	ds	1
  2606  0063                     NVMWrite@latchAddr:	
  2607                           
  2608                           ; 1 bytes @ 0x43
  2609  0063                     	ds	1
  2610  0064                     NVMWrite@j:	
  2611                           
  2612                           ; 1 bytes @ 0x44
  2613  0064                     	ds	1
  2614  0065                     ??_PGMNvmReset:	
  2615  0065                     ??_RTXReadPkt:	
  2616                           ; 0 bytes @ 0x45
  2617                           
  2618  0065                     ??_PGMSelLong:	
  2619                           ; 0 bytes @ 0x45
  2620                           
  2621                           
  2622                           ; 0 bytes @ 0x45
  2623  0065                     	ds	1
  2624  0066                     PGMInit@state:	
  2625  0066                     RTXReadPkt@numRxByte:	
  2626                           ; 1 bytes @ 0x46
  2627                           
  2628                           
  2629                           ; 1 bytes @ 0x46
  2630  0066                     	ds	1
  2631  0067                     ??_main:	
  2632                           
  2633                           ; 0 bytes @ 0x47
  2634  0067                     	ds	1
  2635  0068                     main@i:	
  2636                           
  2637                           ; 1 bytes @ 0x48
  2638  0068                     	ds	1
  2639                           
  2640                           	psect	maintext
  2641  0E04                     __pmaintext:	
  2642 ;;
  2643 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2644 ;;
  2645 ;; *************** function _main *****************
  2646 ;; Defined at:
  2647 ;;		line 51 in file "Base.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;  i               1   72[BANK0 ] unsigned char 
  2652 ;; Return value:  Size  Location     Type
  2653 ;;		None               void
  2654 ;; Registers used:
  2655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2656 ;; Tracked objects:
  2657 ;;		On entry : 17F/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2665 ;;Total ram usage:        2 bytes
  2666 ;; Hardware stack levels required when called:    9
  2667 ;; This function calls:
  2668 ;;		_INInit
  2669 ;;		_OUTInit
  2670 ;;		_SPIInit
  2671 ;;		_CC1Init
  2672 ;;		_NVMInit
  2673 ;;		_DINInit
  2674 ;;		_DINTask
  2675 ;;		_DPYInit
  2676 ;;		_PGMInit
  2677 ;;		_RTXInit
  2678 ;;		_RTXTask
  2679 ;;		_SYSInit
  2680 ;;		_SYSTask
  2681 ;; This function is called by:
  2682 ;;		Startup code after reset
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           
  2687                           ;psect for function _main
  2688  0E04                     _main:	
  2689                           
  2690                           ;Base.c: 52: unsigned char i;
  2691                           ;Base.c: 55: for(i=0;i<3;i++)
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in _main: [allreg]
  2695  0E04  0020               	movlb	0	; select bank0
  2696  0E05  01E8               	clrf	main@i
  2697  0E06  3003               	movlw	3
  2698  0E07  0268               	subwf	main@i,w
  2699  0E08  1803               	btfsc	3,0
  2700  0E09  2E46               	goto	l630
  2701  0E0A                     l629:	
  2702  0E0A  0064               	clrwdt	;# 
  2703                           
  2704                           ;Base.c: 59: SYSInit(i);
  2705  0E0B  0020               	movlb	0	; select bank0
  2706  0E0C  0868               	movf	main@i,w
  2707  0E0D  318B  2346  318E   	fcall	_SYSInit
  2708                           
  2709                           ;Base.c: 60: INInit(i);
  2710  0E10  0020               	movlb	0	; select bank0
  2711  0E11  0868               	movf	main@i,w
  2712  0E12  3189  217F  318E   	fcall	_INInit
  2713                           
  2714                           ;Base.c: 61: OUTInit(i);
  2715  0E15  0020               	movlb	0	; select bank0
  2716  0E16  0868               	movf	main@i,w
  2717  0E17  3189  2196  318E   	fcall	_OUTInit
  2718                           
  2719                           ;Base.c: 62: DINInit(i);
  2720  0E1A  0020               	movlb	0	; select bank0
  2721  0E1B  0868               	movf	main@i,w
  2722  0E1C  3188  20F7  318E   	fcall	_DINInit
  2723                           
  2724                           ;Base.c: 63: SPIInit(i);
  2725  0E1F  0020               	movlb	0	; select bank0
  2726  0E20  0868               	movf	main@i,w
  2727  0E21  318A  22A1  318E   	fcall	_SPIInit
  2728                           
  2729                           ;Base.c: 64: CC1Init(i);
  2730  0E24  0020               	movlb	0	; select bank0
  2731  0E25  0868               	movf	main@i,w
  2732  0E26  318C  245D  318E   	fcall	_CC1Init
  2733                           
  2734                           ;Base.c: 65: NVMInit(i);
  2735  0E29  0020               	movlb	0	; select bank0
  2736  0E2A  0868               	movf	main@i,w
  2737  0E2B  3188  207C  318E   	fcall	_NVMInit
  2738                           
  2739                           ;Base.c: 66: DPYInit(i);
  2740  0E2E  0020               	movlb	0	; select bank0
  2741  0E2F  0868               	movf	main@i,w
  2742  0E30  3189  2109  318E   	fcall	_DPYInit
  2743                           
  2744                           ;Base.c: 67: RTXInit(i);
  2745  0E33  0020               	movlb	0	; select bank0
  2746  0E34  0868               	movf	main@i,w
  2747  0E35  318B  238C  318E   	fcall	_RTXInit
  2748                           
  2749                           ;Base.c: 68: PGMInit(i);
  2750  0E38  0020               	movlb	0	; select bank0
  2751  0E39  0868               	movf	main@i,w
  2752  0E3A  3189  21C6  318E   	fcall	_PGMInit
  2753  0E3D  3001               	movlw	1
  2754  0E3E  0020               	movlb	0	; select bank0
  2755  0E3F  00E7               	movwf	??_main
  2756  0E40  0867               	movf	??_main,w
  2757  0E41  07E8               	addwf	main@i,f
  2758  0E42  3003               	movlw	3
  2759  0E43  0268               	subwf	main@i,w
  2760  0E44  1C03               	skipc
  2761  0E45  2E0A               	goto	l629
  2762  0E46                     l630:	
  2763                           
  2764                           ;Base.c: 69: }
  2765                           ;Base.c: 72: INTCONbits.GIE=1;
  2766  0E46  178B               	bsf	11,7	;volatile
  2767  0E47                     l631:	
  2768                           ;Base.c: 75: while(1)
  2769                           
  2770  0E47  0064               	clrwdt	;# 
  2771                           
  2772                           ;Base.c: 79: SYSTask();
  2773  0E48  318B  2301  318E   	fcall	_SYSTask
  2774                           
  2775                           ;Base.c: 80: DINTask();
  2776  0E4B  318A  2267  318E   	fcall	_DINTask
  2777                           
  2778                           ;Base.c: 81: RTXTask();
  2779  0E4E  3188  204F  318E   	fcall	_RTXTask
  2780  0E51  2E47               	goto	l631
  2781  0E52                     __end_of_main:	
  2782                           
  2783                           	psect	text1
  2784  0B01                     __ptext1:	
  2785 ;; *************** function _SYSTask *****************
  2786 ;; Defined at:
  2787 ;;		line 42 in file "SYS.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  i               1    0        unsigned char 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;		None               void
  2794 ;; Registers used:
  2795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2805 ;;Total ram usage:        0 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    7
  2808 ;; This function calls:
  2809 ;;		_DINTick
  2810 ;;		_PGMTick
  2811 ;;		_PGMPgmOff
  2812 ;;		_PGMSelDown
  2813 ;;		_PGMSelLong
  2814 ;;		_RTXTick
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           
  2821                           ;psect for function _SYSTask
  2822  0B01                     _SYSTask:	
  2823                           
  2824                           ;SYS.c: 43: unsigned char i;
  2825                           ;SYS.c: 46: if(u_SYS_STA.TICK)
  2826                           
  2827                           ;incstack = 0
  2828                           ; Regs used in _SYSTask: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2829  0B01  0021               	movlb	1	; select bank1
  2830  0B02  1C2C               	btfss	_u_SYS_STA^(0+128),0
  2831  0B03  2B0E               	goto	l4506
  2832                           
  2833                           ;SYS.c: 47: {
  2834                           ;SYS.c: 49: u_SYS_STA.TICK=0;
  2835  0B04  102C               	bcf	_u_SYS_STA^(0+128),0
  2836                           
  2837                           ;SYS.c: 52: RTXTick();
  2838  0B05  3188  20AC  318B   	fcall	_RTXTick
  2839                           
  2840                           ;SYS.c: 53: DINTick();
  2841  0B08  318B  23B0  318B   	fcall	_DINTick
  2842                           
  2843                           ;SYS.c: 54: PGMTick();
  2844  0B0B  3188  209F  318B   	fcall	_PGMTick
  2845  0B0E                     l4506:	
  2846                           
  2847                           ;SYS.c: 55: }
  2848                           ;SYS.c: 57: if(u_in_ev_down.sel)
  2849  0B0E  0020               	movlb	0	; select bank0
  2850  0B0F  1C6D               	btfss	_u_in_ev_down,0
  2851  0B10  2B15               	goto	l4512
  2852                           
  2853                           ;SYS.c: 58: {
  2854                           ;SYS.c: 60: u_in_ev_down.sel=0;
  2855  0B11  106D               	bcf	_u_in_ev_down,0
  2856                           
  2857                           ;SYS.c: 61: PGMSelDown();
  2858  0B12  3188  2072  318B   	fcall	_PGMSelDown
  2859  0B15                     l4512:	
  2860                           
  2861                           ;SYS.c: 62: }
  2862                           ;SYS.c: 63: if(u_in_ev_long.sel)
  2863  0B15  0020               	movlb	0	; select bank0
  2864  0B16  1C6E               	btfss	_u_in_ev_long,0
  2865  0B17  2B1C               	goto	l4518
  2866                           
  2867                           ;SYS.c: 64: {
  2868                           ;SYS.c: 66: u_in_ev_long.sel=0;
  2869  0B18  106E               	bcf	_u_in_ev_long,0
  2870                           
  2871                           ;SYS.c: 67: PGMSelLong();
  2872  0B19  3188  2093  318B   	fcall	_PGMSelLong
  2873  0B1C                     l4518:	
  2874                           
  2875                           ;SYS.c: 68: }
  2876                           ;SYS.c: 72: if(rtx_flg.pgmDone)
  2877  0B1C  0021               	movlb	1	; select bank1
  2878  0B1D  1CA9               	btfss	_rtx_flg^(0+128),1
  2879  0B1E  0008               	return
  2880                           
  2881                           ;SYS.c: 73: {
  2882                           ;SYS.c: 75: rtx_flg.pgmDone=0;
  2883  0B1F  10A9               	bcf	_rtx_flg^(0+128),1
  2884                           
  2885                           ;SYS.c: 77: PGMPgmOff();
  2886  0B20  3188  2044         	fcall	_PGMPgmOff
  2887  0B22  0008               	return
  2888  0B23                     __end_of_SYSTask:	
  2889                           
  2890                           	psect	text2
  2891  08AC                     __ptext2:	
  2892 ;; *************** function _RTXTick *****************
  2893 ;; Defined at:
  2894 ;;		line 77 in file "RTX.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;		None
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;		None
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2912 ;;Total ram usage:        0 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    6
  2915 ;; This function calls:
  2916 ;;		_RTXSendPgm
  2917 ;; This function is called by:
  2918 ;;		_SYSTask
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _RTXTick
  2924  08AC                     _RTXTick:	
  2925                           
  2926                           ;RTX.c: 79: if(tmrRcvPkt)
  2927                           
  2928                           ;incstack = 0
  2929                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2930  08AC  0020               	movlb	0	; select bank0
  2931  08AD  086B               	movf	_tmrRcvPkt,w
  2932  08AE  1903               	btfsc	3,2
  2933  08AF  0008               	return
  2934                           
  2935                           ;RTX.c: 80: {
  2936                           ;RTX.c: 81: tmrRcvPkt--;
  2937  08B0  3001               	movlw	1
  2938  08B1  02EB               	subwf	_tmrRcvPkt,f
  2939                           
  2940                           ;RTX.c: 82: if(!(tmrRcvPkt))
  2941  08B2  08EB               	movf	_tmrRcvPkt,f
  2942  08B3  1D03               	skipz
  2943  08B4  0008               	return
  2944                           
  2945                           ;RTX.c: 83: RTXSendPgm();
  2946  08B5  318B  2369         	fcall	_RTXSendPgm
  2947  08B7  0020               	movlb	0	; select bank0
  2948  08B8  0008               	return
  2949  08B9                     __end_of_RTXTick:	
  2950                           
  2951                           	psect	text3
  2952  0B69                     __ptext3:	
  2953 ;; *************** function _RTXSendPgm *****************
  2954 ;; Defined at:
  2955 ;;		line 280 in file "RTX.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;		None               void
  2962 ;; Registers used:
  2963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2973 ;;Total ram usage:        1 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:    5
  2976 ;; This function calls:
  2977 ;;		_RTXSndPkt
  2978 ;; This function is called by:
  2979 ;;		_RTXTick
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           
  2984                           ;psect for function _RTXSendPgm
  2985  0B69                     _RTXSendPgm:	
  2986                           
  2987                           ;RTX.c: 282: pktTx[0]=pgm_cfg.sensId;
  2988                           
  2989                           ;incstack = 0
  2990                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2991  0B69  0021               	movlb	1	; select bank1
  2992  0B6A  084F               	movf	(_pgm_cfg^(0+128)+3),w
  2993  0B6B  0020               	movlb	0	; select bank0
  2994  0B6C  00A8               	movwf	??_RTXSendPgm
  2995  0B6D  0828               	movf	??_RTXSendPgm,w
  2996  0B6E  0021               	movlb	1	; select bank1
  2997  0B6F  00C3               	movwf	_pktTx^(0+128)
  2998                           
  2999                           ;RTX.c: 283: pktTx[1]=pgm_cfg.baseId;
  3000  0B70  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3001  0B71  0020               	movlb	0	; select bank0
  3002  0B72  00A8               	movwf	??_RTXSendPgm
  3003  0B73  0828               	movf	??_RTXSendPgm,w
  3004  0B74  0021               	movlb	1	; select bank1
  3005  0B75  00C4               	movwf	(_pktTx^(0+128)+1)
  3006                           
  3007                           ;RTX.c: 284: pktTx[2]=PGM;
  3008  0B76  01C5               	clrf	(_pktTx^(0+128)+2)
  3009  0B77  0AC5               	incf	(_pktTx^(0+128)+2),f
  3010                           
  3011                           ;RTX.c: 285: pktTx[3]=0x00;
  3012  0B78  01C6               	clrf	(_pktTx^(0+128)+3)
  3013                           
  3014                           ;RTX.c: 286: pktTx[4]=0x00;
  3015  0B79  01C7               	clrf	(_pktTx^(0+128)+4)
  3016                           
  3017                           ;RTX.c: 287: pktTx[5]=0x00;
  3018  0B7A  01C8               	clrf	(_pktTx^(0+128)+5)
  3019                           
  3020                           ;RTX.c: 288: pktTx[6]=0x00;
  3021  0B7B  01C9               	clrf	(_pktTx^(0+128)+6)
  3022                           
  3023                           ;RTX.c: 289: pktTx[7]=0x00;
  3024  0B7C  01CA               	clrf	(_pktTx^(0+128)+7)
  3025                           
  3026                           ;RTX.c: 290: pktTx[8]=0x00;
  3027  0B7D  01CB               	clrf	(_pktTx^(0+128)+8)
  3028                           
  3029                           ;RTX.c: 293: RTXSndPkt(pktTx,0x09);
  3030  0B7E  3009               	movlw	9
  3031  0B7F  0020               	movlb	0	; select bank0
  3032  0B80  00A8               	movwf	??_RTXSendPgm
  3033  0B81  0828               	movf	??_RTXSendPgm,w
  3034  0B82  00A2               	movwf	?_RTXSndPkt
  3035  0B83  30C3               	movlw	_pktTx& (0+255)
  3036  0B84  318E  26F8         	fcall	_RTXSndPkt
  3037                           
  3038                           ;RTX.c: 296: tmrRcvPkt=100;
  3039  0B86  3064               	movlw	100
  3040  0B87  0020               	movlb	0	; select bank0
  3041  0B88  00A8               	movwf	??_RTXSendPgm
  3042  0B89  0828               	movf	??_RTXSendPgm,w
  3043  0B8A  00EB               	movwf	_tmrRcvPkt
  3044  0B8B  0008               	return
  3045  0B8C                     __end_of_RTXSendPgm:	
  3046                           
  3047                           	psect	text4
  3048  0893                     __ptext4:	
  3049 ;; *************** function _PGMSelLong *****************
  3050 ;; Defined at:
  3051 ;;		line 103 in file "PGM.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;		None               void
  3058 ;; Registers used:
  3059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3069 ;;Total ram usage:        1 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    4
  3072 ;; This function calls:
  3073 ;;		_PGMWriteNvm
  3074 ;; This function is called by:
  3075 ;;		_SYSTask
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           
  3080                           ;psect for function _PGMSelLong
  3081  0893                     _PGMSelLong:	
  3082                           
  3083                           ;PGM.c: 105: pgm_cfg.sensId=TMR1L^TMR1H;
  3084                           
  3085                           ;incstack = 0
  3086                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3087  0893  0020               	movlb	0	; select bank0
  3088  0894  0816               	movf	22,w	;volatile
  3089  0895  0617               	xorwf	23,w	;volatile
  3090  0896  00E5               	movwf	??_PGMSelLong
  3091  0897  0865               	movf	??_PGMSelLong,w
  3092  0898  0021               	movlb	1	; select bank1
  3093  0899  00CF               	movwf	(_pgm_cfg^(0+128)+3)
  3094                           
  3095                           ;PGM.c: 107: pgm_cfg.menu=0x01;
  3096  089A  01CE               	clrf	(_pgm_cfg^(0+128)+2)
  3097  089B  0ACE               	incf	(_pgm_cfg^(0+128)+2),f
  3098                           
  3099                           ;PGM.c: 109: PGMWriteNvm();
  3100  089C  3189  212F         	fcall	_PGMWriteNvm
  3101  089E  0008               	return
  3102  089F                     __end_of_PGMSelLong:	
  3103                           
  3104                           	psect	text5
  3105  0872                     __ptext5:	
  3106 ;; *************** function _PGMSelDown *****************
  3107 ;; Defined at:
  3108 ;;		line 93 in file "PGM.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3126 ;;Total ram usage:        1 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    2
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_SYSTask
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _PGMSelDown
  3138  0872                     _PGMSelDown:	
  3139                           
  3140                           ;PGM.c: 95: pgm_flg.pgmonoff=1;
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in _PGMSelDown: [wreg]
  3144  0872  0021               	movlb	1	; select bank1
  3145  0873  1428               	bsf	_pgm_flg^(0+128),0
  3146                           
  3147                           ;PGM.c: 97: LATCbits.LATC7=0;
  3148  0874  0022               	movlb	2	; select bank2
  3149  0875  138E               	bcf	14,7	;volatile
  3150                           
  3151                           ;PGM.c: 99: tmrPgm=100;
  3152  0876  3064               	movlw	100
  3153  0877  00F1               	movwf	??_PGMSelDown
  3154  0878  0871               	movf	??_PGMSelDown,w
  3155  0879  0020               	movlb	0	; select bank0
  3156  087A  00EA               	movwf	_tmrPgm
  3157  087B  0008               	return
  3158  087C                     __end_of_PGMSelDown:	
  3159                           
  3160                           	psect	text6
  3161  0844                     __ptext6:	
  3162 ;; *************** function _PGMPgmOff *****************
  3163 ;; Defined at:
  3164 ;;		line 85 in file "PGM.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;		None               void
  3171 ;; Registers used:
  3172 ;;		status,2
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;Total ram usage:        0 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    2
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_SYSTask
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _PGMPgmOff
  3194  0844                     _PGMPgmOff:	
  3195                           
  3196                           ;PGM.c: 87: tmrPgm=0;
  3197                           
  3198                           ;incstack = 0
  3199                           ; Regs used in _PGMPgmOff: [status,2]
  3200  0844  0020               	movlb	0	; select bank0
  3201  0845  01EA               	clrf	_tmrPgm
  3202                           
  3203                           ;PGM.c: 89: pgm_flg.pgmonoff=0;
  3204  0846  0021               	movlb	1	; select bank1
  3205  0847  1028               	bcf	_pgm_flg^(0+128),0
  3206  0848  0008               	return
  3207  0849                     __end_of_PGMPgmOff:	
  3208                           
  3209                           	psect	text7
  3210  089F                     __ptext7:	
  3211 ;; *************** function _PGMTick *****************
  3212 ;; Defined at:
  3213 ;;		line 44 in file "PGM.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;		None
  3216 ;; Auto vars:     Size  Location     Type
  3217 ;;		None
  3218 ;; Return value:  Size  Location     Type
  3219 ;;		None               void
  3220 ;; Registers used:
  3221 ;;		wreg, status,2, status,0
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3231 ;;Total ram usage:        0 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    2
  3234 ;; This function calls:
  3235 ;;		Nothing
  3236 ;; This function is called by:
  3237 ;;		_SYSTask
  3238 ;; This function uses a non-reentrant model
  3239 ;;
  3240                           
  3241                           
  3242                           ;psect for function _PGMTick
  3243  089F                     _PGMTick:	
  3244                           
  3245                           ;PGM.c: 46: if(tmrPgm)
  3246                           
  3247                           ;incstack = 0
  3248                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3249  089F  0020               	movlb	0	; select bank0
  3250  08A0  086A               	movf	_tmrPgm,w
  3251  08A1  1903               	btfsc	3,2
  3252  08A2  0008               	return
  3253                           
  3254                           ;PGM.c: 47: {
  3255                           ;PGM.c: 48: tmrPgm--;
  3256  08A3  3001               	movlw	1
  3257  08A4  02EA               	subwf	_tmrPgm,f
  3258                           
  3259                           ;PGM.c: 49: if(!(tmrPgm))
  3260  08A5  08EA               	movf	_tmrPgm,f
  3261  08A6  1D03               	skipz
  3262  08A7  0008               	return
  3263                           
  3264                           ;PGM.c: 50: pgm_flg.pgmonoff=0;
  3265  08A8  0021               	movlb	1	; select bank1
  3266  08A9  1028               	bcf	_pgm_flg^(0+128),0
  3267  08AA  0020               	movlb	0	; select bank0
  3268  08AB  0008               	return
  3269  08AC                     __end_of_PGMTick:	
  3270                           
  3271                           	psect	text8
  3272  0BB0                     __ptext8:	
  3273 ;; *************** function _DINTick *****************
  3274 ;; Defined at:
  3275 ;;		line 47 in file "DIN.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;		None
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;		None               void
  3282 ;; Registers used:
  3283 ;;		wreg, status,2, status,0
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3291 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3292 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3293 ;;Total ram usage:        1 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    2
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_SYSTask
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           
  3304                           ;psect for function _DINTick
  3305  0BB0                     _DINTick:	
  3306                           
  3307                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3308                           
  3309                           ;incstack = 0
  3310                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3311  0BB0  0020               	movlb	0	; select bank0
  3312  0BB1  1C6C               	btfss	_u_flg_din,0
  3313  0BB2  2BC3               	goto	l211
  3314                           
  3315                           ;DIN.c: 51: {
  3316                           ;DIN.c: 52: tmrDbncSel++;
  3317  0BB3  3001               	movlw	1
  3318  0BB4  00F1               	movwf	??_DINTick
  3319  0BB5  0871               	movf	??_DINTick,w
  3320  0BB6  07E9               	addwf	_tmrDbncSel,f
  3321                           
  3322                           ;DIN.c: 53: if(tmrDbncSel>5)
  3323  0BB7  3006               	movlw	6
  3324  0BB8  0269               	subwf	_tmrDbncSel,w
  3325  0BB9  1C03               	skipc
  3326  0BBA  2BC3               	goto	l211
  3327                           
  3328                           ;DIN.c: 54: {
  3329                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3330  0BBB  106C               	bcf	_u_flg_din,0
  3331                           
  3332                           ;DIN.c: 56: tmrDbncSel=0;
  3333  0BBC  01E9               	clrf	_tmrDbncSel
  3334                           
  3335                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3336  0BBD  1C7C               	btfss	_u_in_sta_currTask,0
  3337  0BBE  2BC1               	goto	l213
  3338                           
  3339                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3340  0BBF  146D               	bsf	_u_in_ev_down,0
  3341  0BC0  2BC3               	goto	l211
  3342  0BC1                     l213:	
  3343                           
  3344                           ;DIN.c: 60: else
  3345                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3346  0BC1  0021               	movlb	1	; select bank1
  3347  0BC2  142D               	bsf	_u_in_ev_up^(0+128),0
  3348  0BC3                     l211:	
  3349                           
  3350                           ;DIN.c: 62: }
  3351                           ;DIN.c: 63: }
  3352                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3353  0BC3  0020               	movlb	0	; select bank0
  3354  0BC4  1CEC               	btfss	_u_flg_din,1
  3355  0BC5  0008               	return
  3356                           
  3357                           ;DIN.c: 67: {
  3358                           ;DIN.c: 68: tmrLongSel++;
  3359  0BC6  3001               	movlw	1
  3360  0BC7  0021               	movlb	1	; select bank1
  3361  0BC8  07A6               	addwf	_tmrLongSel^(0+128),f
  3362  0BC9  3000               	movlw	0
  3363  0BCA  3DA7               	addwfc	(_tmrLongSel+1)^(0+128),f
  3364                           
  3365                           ;DIN.c: 69: if(tmrLongSel>200)
  3366  0BCB  3000               	movlw	0
  3367  0BCC  0227               	subwf	(_tmrLongSel+1)^(0+128),w
  3368  0BCD  30C9               	movlw	201
  3369  0BCE  1903               	skipnz
  3370  0BCF  0226               	subwf	_tmrLongSel^(0+128),w
  3371  0BD0  1C03               	skipc
  3372  0BD1  0008               	return
  3373                           
  3374                           ;DIN.c: 70: {
  3375                           ;DIN.c: 72: tmrLongSel=0;
  3376  0BD2  01A6               	clrf	_tmrLongSel^(0+128)
  3377  0BD3  01A7               	clrf	(_tmrLongSel+1)^(0+128)
  3378                           
  3379                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3380  0BD4  0020               	movlb	0	; select bank0
  3381  0BD5  146E               	bsf	_u_in_ev_long,0
  3382  0BD6  0008               	return
  3383  0BD7                     __end_of_DINTick:	
  3384                           
  3385                           	psect	text9
  3386  0B46                     __ptext9:	
  3387 ;; *************** function _SYSInit *****************
  3388 ;; Defined at:
  3389 ;;		line 15 in file "SYS.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;  state           1    wreg     unsigned char 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  state           1    2[COMMON] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;		None               void
  3396 ;; Registers used:
  3397 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3407 ;;Total ram usage:        2 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    2
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           
  3418                           ;psect for function _SYSInit
  3419  0B46                     _SYSInit:	
  3420                           
  3421                           ;incstack = 0
  3422                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3423                           ;SYSInit@state stored from wreg
  3424  0B46  00F2               	movwf	SYSInit@state
  3425                           
  3426                           ;SYS.c: 16: switch(state)
  3427  0B47  2B60               	goto	l3424
  3428  0B48                     l3406:	
  3429                           ;SYS.c: 17: {
  3430                           ;SYS.c: 18: case 0:
  3431                           
  3432                           
  3433                           ;SYS.c: 20: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; TMR0=255-156; I
      +                          NTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000; PIE1=0b00000000
      +                          ; PIE2=0b00000000;
  3434  0B48  3006               	movlw	6
  3435  0B49  0021               	movlb	1	; select bank1
  3436  0B4A  0095               	movwf	21	;volatile
  3437  0B4B  3071               	movlw	113
  3438  0B4C  0099               	movwf	25	;volatile
  3439  0B4D  3009               	movlw	9
  3440  0B4E  0097               	movwf	23	;volatile
  3441  0B4F  3063               	movlw	99
  3442  0B50  0020               	movlb	0	; select bank0
  3443  0B51  0095               	movwf	21	;volatile
  3444  0B52  168B               	bsf	11,5	;volatile
  3445  0B53  30FB               	movlw	251
  3446  0B54  00F1               	movwf	??_SYSInit
  3447  0B55  0871               	movf	??_SYSInit,w
  3448  0B56  058B               	andwf	11,f	;volatile
  3449  0B57  0191               	clrf	17	;volatile
  3450  0B58  0192               	clrf	18	;volatile
  3451  0B59  0021               	movlb	1	; select bank1
  3452  0B5A  0191               	clrf	17	;volatile
  3453  0B5B  0192               	clrf	18	;volatile
  3454                           
  3455                           ;SYS.c: 21: break;
  3456  0B5C  0008               	return
  3457  0B5D                     l3420:	
  3458                           ;SYS.c: 22: case 1:
  3459                           
  3460                           
  3461                           ;SYS.c: 24: u_SYS_STA.VAL=0;
  3462  0B5D  0021               	movlb	1	; select bank1
  3463  0B5E  01AC               	clrf	_u_SYS_STA^(0+128)
  3464                           
  3465                           ;SYS.c: 29: }
  3466                           
  3467                           ;SYS.c: 25: break;
  3468  0B5F  0008               	return
  3469  0B60                     l3424:	
  3470  0B60  0872               	movf	SYSInit@state,w
  3471                           
  3472                           ; Switch size 1, requested type "space"
  3473                           ; Number of cases is 2, Range of values is 0 to 1
  3474                           ; switch strategies available:
  3475                           ; Name         Instructions Cycles
  3476                           ; simple_byte            7     4 (average)
  3477                           ; direct_byte           10     6 (fixed)
  3478                           ; jumptable            260     6 (fixed)
  3479                           ;	Chosen strategy is simple_byte
  3480  0B61  3A00               	xorlw	0	; case 0
  3481  0B62  1903               	skipnz
  3482  0B63  2B48               	goto	l3406
  3483  0B64  3A01               	xorlw	1	; case 1
  3484  0B65  1903               	skipnz
  3485  0B66  2B5D               	goto	l3420
  3486  0B67  2B68               	goto	l558
  3487  0B68                     l558:	
  3488  0B68  0008               	return
  3489  0B69                     __end_of_SYSInit:	
  3490                           
  3491                           	psect	text10
  3492  084F                     __ptext10:	
  3493 ;; *************** function _RTXTask *****************
  3494 ;; Defined at:
  3495 ;;		line 88 in file "RTX.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;		None               void
  3502 ;; Registers used:
  3503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    8
  3516 ;; This function calls:
  3517 ;;		_RTXReadPkt
  3518 ;; This function is called by:
  3519 ;;		_main
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           
  3524                           ;psect for function _RTXTask
  3525  084F                     _RTXTask:	
  3526                           
  3527                           ;RTX.c: 90: if(!(PORTBbits.RB0))
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _RTXTask: [allreg]
  3531  084F  0020               	movlb	0	; select bank0
  3532  0850  180D               	btfsc	13,0	;volatile
  3533  0851  0008               	return
  3534                           
  3535                           ;RTX.c: 91: RTXReadPkt();
  3536  0852  318F  27A3         	fcall	_RTXReadPkt
  3537  0854  0008               	return
  3538  0855                     __end_of_RTXTask:	
  3539                           
  3540                           	psect	text11
  3541  0FA3                     __ptext11:	
  3542 ;; *************** function _RTXReadPkt *****************
  3543 ;; Defined at:
  3544 ;;		line 211 in file "RTX.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;		None               void
  3551 ;; Registers used:
  3552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3562 ;;Total ram usage:        2 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    7
  3565 ;; This function calls:
  3566 ;;		_CC1Read
  3567 ;;		_PGMWriteNvm
  3568 ;;		_RTXUpdateDisplay
  3569 ;;		_RTXRcvPkt
  3570 ;;		_RTXSendRData
  3571 ;;		___lbtoft
  3572 ;; This function is called by:
  3573 ;;		_RTXTask
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           
  3578                           ;psect for function _RTXReadPkt
  3579  0FA3                     _RTXReadPkt:	
  3580                           
  3581                           ;RTX.c: 212: unsigned char numRxByte;
  3582                           ;RTX.c: 215: CC1Read(0x3B,(&(numRxByte)),1);
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _RTXReadPkt: [allreg]
  3586  0FA3  3066               	movlw	RTXReadPkt@numRxByte& (0+255)
  3587  0FA4  0020               	movlb	0	; select bank0
  3588  0FA5  00E5               	movwf	??_RTXReadPkt
  3589  0FA6  0865               	movf	??_RTXReadPkt,w
  3590  0FA7  00F7               	movwf	?_CC1Read
  3591  0FA8  01F8               	clrf	?_CC1Read+1
  3592  0FA9  0AF8               	incf	?_CC1Read+1,f
  3593  0FAA  303B               	movlw	59
  3594  0FAB  318A  222E  318F   	fcall	_CC1Read
  3595                           
  3596                           ;RTX.c: 216: while(numRxByte>=0x09)
  3597  0FAE  3009               	movlw	9
  3598  0FAF  0020               	movlb	0	; select bank0
  3599  0FB0  0266               	subwf	RTXReadPkt@numRxByte,w
  3600  0FB1  1C03               	btfss	3,0
  3601  0FB2  0008               	return
  3602  0FB3  0064               	clrwdt	;# 
  3603                           
  3604                           ;RTX.c: 220: RTXRcvPkt(pktRx,0x09);
  3605  0FB4  3009               	movlw	9
  3606  0FB5  0020               	movlb	0	; select bank0
  3607  0FB6  00E5               	movwf	??_RTXReadPkt
  3608  0FB7  0865               	movf	??_RTXReadPkt,w
  3609  0FB8  00A0               	movwf	?_RTXRcvPkt
  3610  0FB9  30BA               	movlw	_pktRx& (0+255)
  3611  0FBA  3188  20C7  318F   	fcall	_RTXRcvPkt
  3612                           
  3613                           ;RTX.c: 222: if(pgm_flg.pgmonoff)
  3614  0FBD  0021               	movlb	1	; select bank1
  3615  0FBE  1C28               	btfss	_pgm_flg^(0+128),0
  3616  0FBF  2FD6               	goto	l4426
  3617                           
  3618                           ;RTX.c: 223: {
  3619                           ;RTX.c: 224: if((pktRx[0]==pgm_cfg.baseId))
  3620  0FC0  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3621  0FC1  063A               	xorwf	_pktRx^(0+128),w
  3622  0FC2  1D03               	skipz
  3623  0FC3  2FA3               	goto	_RTXReadPkt
  3624                           
  3625                           ;RTX.c: 225: {
  3626                           ;RTX.c: 227: if(pktRx[2]==rPGM)
  3627  0FC4  083C               	movf	(_pktRx^(0+128)+2),w
  3628  0FC5  3A81               	xorlw	129
  3629  0FC6  1D03               	skipz
  3630  0FC7  2FA3               	goto	_RTXReadPkt
  3631                           
  3632                           ;RTX.c: 228: {
  3633                           ;RTX.c: 230: pgm_cfg.sensId=pktRx[1];
  3634  0FC8  083B               	movf	(_pktRx^(0+128)+1),w
  3635  0FC9  0020               	movlb	0	; select bank0
  3636  0FCA  00E5               	movwf	??_RTXReadPkt
  3637  0FCB  0865               	movf	??_RTXReadPkt,w
  3638  0FCC  0021               	movlb	1	; select bank1
  3639  0FCD  00CF               	movwf	(_pgm_cfg^(0+128)+3)
  3640                           
  3641                           ;RTX.c: 231: PGMWriteNvm();
  3642  0FCE  3189  212F  318F   	fcall	_PGMWriteNvm
  3643                           
  3644                           ;RTX.c: 233: rtx_flg.pgmDone=1;
  3645  0FD1  0021               	movlb	1	; select bank1
  3646  0FD2  14A9               	bsf	_rtx_flg^(0+128),1
  3647                           
  3648                           ;RTX.c: 235: tmrRcvPkt=0;
  3649  0FD3  0020               	movlb	0	; select bank0
  3650  0FD4  01EB               	clrf	_tmrRcvPkt
  3651                           
  3652                           ;RTX.c: 236: }
  3653                           ;RTX.c: 237: }
  3654                           ;RTX.c: 238: }
  3655  0FD5  2FA3               	goto	_RTXReadPkt
  3656  0FD6                     l4426:	
  3657                           
  3658                           ;RTX.c: 239: else
  3659                           ;RTX.c: 240: {
  3660                           ;RTX.c: 241: if((pktRx[0]==pgm_cfg.baseId) && (pktRx[1]==pgm_cfg.sensId))
  3661  0FD6  0021               	movlb	1	; select bank1
  3662  0FD7  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3663  0FD8  063A               	xorwf	_pktRx^(0+128),w
  3664  0FD9  1D03               	skipz
  3665  0FDA  2FA3               	goto	_RTXReadPkt
  3666  0FDB  084F               	movf	(_pgm_cfg^(0+128)+3),w
  3667  0FDC  063B               	xorwf	(_pktRx^(0+128)+1),w
  3668  0FDD  1D03               	skipz
  3669  0FDE  2FA3               	goto	_RTXReadPkt
  3670                           
  3671                           ;RTX.c: 242: {
  3672                           ;RTX.c: 244: if(pktRx[2]==DAT)
  3673  0FDF  08BC               	movf	(_pktRx^(0+128)+2),f
  3674  0FE0  1D03               	skipz
  3675  0FE1  2FA3               	goto	_RTXReadPkt
  3676                           
  3677                           ;RTX.c: 245: {
  3678                           ;RTX.c: 247: temp=pktRx[3];
  3679  0FE2  083D               	movf	(_pktRx^(0+128)+3),w
  3680  0FE3  3189  21F8  318F   	fcall	___lbtoft
  3681  0FE6  0879               	movf	?___lbtoft,w
  3682  0FE7  0021               	movlb	1	; select bank1
  3683  0FE8  00A3               	movwf	_temp^(0+128)
  3684  0FE9  087A               	movf	?___lbtoft+1,w
  3685  0FEA  00A4               	movwf	(_temp+1)^(0+128)
  3686  0FEB  087B               	movf	?___lbtoft+2,w
  3687  0FEC  00A5               	movwf	(_temp+2)^(0+128)
  3688                           
  3689                           ;RTX.c: 249: batt=pktRx[4];
  3690  0FED  083E               	movf	(_pktRx^(0+128)+4),w
  3691  0FEE  3189  21F8  318F   	fcall	___lbtoft
  3692  0FF1  0879               	movf	?___lbtoft,w
  3693  0FF2  0021               	movlb	1	; select bank1
  3694  0FF3  00A0               	movwf	_batt^(0+128)
  3695  0FF4  087A               	movf	?___lbtoft+1,w
  3696  0FF5  00A1               	movwf	(_batt+1)^(0+128)
  3697  0FF6  087B               	movf	?___lbtoft+2,w
  3698  0FF7  00A2               	movwf	(_batt+2)^(0+128)
  3699                           
  3700                           ;RTX.c: 251: RTXSendRData();
  3701  0FF8  318A  22DF  318F   	fcall	_RTXSendRData
  3702                           
  3703                           ;RTX.c: 253: RTXUpdateDisplay(UPD_DPY_TEMP);
  3704  0FFB  3001               	movlw	1
  3705  0FFC  3182  2222  318F   	fcall	_RTXUpdateDisplay
  3706  0FFF  2FA3               	goto	_RTXReadPkt
  3707  1000                     __end_of_RTXReadPkt:	
  3708                           ;RTX.c: 254: }
  3709                           ;RTX.c: 255: }
  3710                           ;RTX.c: 256: }
  3711                           ;RTX.c: 258: CC1Read(0x3B,(&(numRxByte)),1);
  3712                           
  3713                           
  3714                           	psect	text12
  3715  09F8                     __ptext12:	
  3716 ;; *************** function ___lbtoft *****************
  3717 ;; Defined at:
  3718 ;;		line 28 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lbtoft.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  c               1    wreg     unsigned char 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  c               1    4[BANK0 ] unsigned char 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  3    9[COMMON] float 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, pclath, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3732 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3734 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Totals:         3       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;Total ram usage:        8 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    3
  3739 ;; This function calls:
  3740 ;;		___ftpack
  3741 ;; This function is called by:
  3742 ;;		_RTXReadPkt
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           
  3747                           ;psect for function ___lbtoft
  3748  09F8                     ___lbtoft:	
  3749                           
  3750                           ;incstack = 0
  3751                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3752                           ;___lbtoft@c stored from wreg
  3753  09F8  0020               	movlb	0	; select bank0
  3754  09F9  00A4               	movwf	___lbtoft@c
  3755  09FA  0824               	movf	___lbtoft@c,w
  3756  09FB  00A0               	movwf	??___lbtoft
  3757  09FC  01A1               	clrf	??___lbtoft+1
  3758  09FD  01A2               	clrf	??___lbtoft+2
  3759  09FE  0820               	movf	??___lbtoft,w
  3760  09FF  00F1               	movwf	?___ftpack
  3761  0A00  0821               	movf	??___lbtoft+1,w
  3762  0A01  00F2               	movwf	?___ftpack+1
  3763  0A02  0822               	movf	??___lbtoft+2,w
  3764  0A03  00F3               	movwf	?___ftpack+2
  3765  0A04  308E               	movlw	142
  3766  0A05  00A3               	movwf	??___lbtoft+3
  3767  0A06  0823               	movf	??___lbtoft+3,w
  3768  0A07  00F4               	movwf	?___ftpack+3
  3769  0A08  01F5               	clrf	?___ftpack+4
  3770  0A09  3187  277A         	fcall	___ftpack
  3771  0A0B  0871               	movf	?___ftpack,w
  3772  0A0C  00F9               	movwf	?___lbtoft
  3773  0A0D  0872               	movf	?___ftpack+1,w
  3774  0A0E  00FA               	movwf	?___lbtoft+1
  3775  0A0F  0873               	movf	?___ftpack+2,w
  3776  0A10  00FB               	movwf	?___lbtoft+2
  3777  0A11  0008               	return
  3778  0A12                     __end_of___lbtoft:	
  3779                           
  3780                           	psect	text13
  3781  0ADF                     __ptext13:	
  3782 ;; *************** function _RTXSendRData *****************
  3783 ;; Defined at:
  3784 ;;		line 263 in file "RTX.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;		None
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;		None
  3789 ;; Return value:  Size  Location     Type
  3790 ;;		None               void
  3791 ;; Registers used:
  3792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3802 ;;Total ram usage:        1 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    5
  3805 ;; This function calls:
  3806 ;;		_RTXSndPkt
  3807 ;; This function is called by:
  3808 ;;		_RTXReadPkt
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _RTXSendRData
  3814  0ADF                     _RTXSendRData:	
  3815                           
  3816                           ;RTX.c: 265: pktTx[0]=pgm_cfg.sensId;
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in _RTXSendRData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3820  0ADF  0021               	movlb	1	; select bank1
  3821  0AE0  084F               	movf	(_pgm_cfg^(0+128)+3),w
  3822  0AE1  0020               	movlb	0	; select bank0
  3823  0AE2  00A8               	movwf	??_RTXSendRData
  3824  0AE3  0828               	movf	??_RTXSendRData,w
  3825  0AE4  0021               	movlb	1	; select bank1
  3826  0AE5  00C3               	movwf	_pktTx^(0+128)
  3827                           
  3828                           ;RTX.c: 266: pktTx[1]=pgm_cfg.baseId;
  3829  0AE6  0850               	movf	(_pgm_cfg^(0+128)+4),w
  3830  0AE7  0020               	movlb	0	; select bank0
  3831  0AE8  00A8               	movwf	??_RTXSendRData
  3832  0AE9  0828               	movf	??_RTXSendRData,w
  3833  0AEA  0021               	movlb	1	; select bank1
  3834  0AEB  00C4               	movwf	(_pktTx^(0+128)+1)
  3835                           
  3836                           ;RTX.c: 267: pktTx[2]=rDAT;
  3837  0AEC  3080               	movlw	128
  3838  0AED  0020               	movlb	0	; select bank0
  3839  0AEE  00A8               	movwf	??_RTXSendRData
  3840  0AEF  0828               	movf	??_RTXSendRData,w
  3841  0AF0  0021               	movlb	1	; select bank1
  3842  0AF1  00C5               	movwf	(_pktTx^(0+128)+2)
  3843                           
  3844                           ;RTX.c: 268: pktTx[3]=0x00;
  3845  0AF2  01C6               	clrf	(_pktTx^(0+128)+3)
  3846                           
  3847                           ;RTX.c: 269: pktTx[4]=0x00;
  3848  0AF3  01C7               	clrf	(_pktTx^(0+128)+4)
  3849                           
  3850                           ;RTX.c: 270: pktTx[5]=0x00;
  3851  0AF4  01C8               	clrf	(_pktTx^(0+128)+5)
  3852                           
  3853                           ;RTX.c: 271: pktTx[6]=0x00;
  3854  0AF5  01C9               	clrf	(_pktTx^(0+128)+6)
  3855                           
  3856                           ;RTX.c: 272: pktTx[7]=0x00;
  3857  0AF6  01CA               	clrf	(_pktTx^(0+128)+7)
  3858                           
  3859                           ;RTX.c: 273: pktTx[8]=0x00;
  3860  0AF7  01CB               	clrf	(_pktTx^(0+128)+8)
  3861                           
  3862                           ;RTX.c: 276: RTXSndPkt(pktTx,0x09);
  3863  0AF8  3009               	movlw	9
  3864  0AF9  0020               	movlb	0	; select bank0
  3865  0AFA  00A8               	movwf	??_RTXSendRData
  3866  0AFB  0828               	movf	??_RTXSendRData,w
  3867  0AFC  00A2               	movwf	?_RTXSndPkt
  3868  0AFD  30C3               	movlw	_pktTx& (0+255)
  3869  0AFE  318E  26F8         	fcall	_RTXSndPkt
  3870  0B00  0008               	return
  3871  0B01                     __end_of_RTXSendRData:	
  3872                           
  3873                           	psect	text14
  3874  0EF8                     __ptext14:	
  3875 ;; *************** function _RTXSndPkt *****************
  3876 ;; Defined at:
  3877 ;;		line 177 in file "RTX.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  src             1    wreg     PTR unsigned char 
  3880 ;;		 -> pktTx(9), 
  3881 ;;  len             1    2[BANK0 ] unsigned char 
  3882 ;; Auto vars:     Size  Location     Type
  3883 ;;  src             1    4[BANK0 ] PTR unsigned char 
  3884 ;;		 -> pktTx(9), 
  3885 ;;  sta             1    7[BANK0 ] unsigned char 
  3886 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  3887 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;		None               void
  3890 ;; Registers used:
  3891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3897 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3898 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;Total ram usage:        6 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    4
  3904 ;; This function calls:
  3905 ;;		_CC1Strobe
  3906 ;;		_CC1Write
  3907 ;;		_CC1Read
  3908 ;; This function is called by:
  3909 ;;		_RTXSendRData
  3910 ;;		_RTXSendPgm
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _RTXSndPkt
  3916  0EF8                     _RTXSndPkt:	
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3920                           ;RTXSndPkt@src stored from wreg
  3921  0EF8  0020               	movlb	0	; select bank0
  3922  0EF9  00A4               	movwf	RTXSndPkt@src
  3923  0EFA                     l471:	
  3924                           ;RTX.c: 178: unsigned char sta,numRxByte,numTxByte;
  3925                           ;RTX.c: 181: while(1)
  3926                           
  3927  0EFA  0064               	clrwdt	;# 
  3928                           
  3929                           ;RTX.c: 184: CC1Read(0x35,(&(sta)),1);
  3930  0EFB  3027               	movlw	RTXSndPkt@sta& (0+255)
  3931  0EFC  0020               	movlb	0	; select bank0
  3932  0EFD  00A3               	movwf	??_RTXSndPkt
  3933  0EFE  0823               	movf	??_RTXSndPkt,w
  3934  0EFF  00F7               	movwf	?_CC1Read
  3935  0F00  01F8               	clrf	?_CC1Read+1
  3936  0F01  0AF8               	incf	?_CC1Read+1,f
  3937  0F02  3035               	movlw	53
  3938  0F03  318A  222E  318E   	fcall	_CC1Read
  3939                           
  3940                           ;RTX.c: 185: sta&=0b00011111;
  3941  0F06  301F               	movlw	31
  3942  0F07  0020               	movlb	0	; select bank0
  3943  0F08  00A3               	movwf	??_RTXSndPkt
  3944  0F09  0823               	movf	??_RTXSndPkt,w
  3945  0F0A  05A7               	andwf	RTXSndPkt@sta,f
  3946                           
  3947                           ;RTX.c: 186: if(sta==0x0D)
  3948  0F0B  0827               	movf	RTXSndPkt@sta,w
  3949  0F0C  3A0D               	xorlw	13
  3950  0F0D  1903               	btfsc	3,2
  3951  0F0E  2F13               	goto	l4476
  3952                           
  3953                           ;RTX.c: 188: if(sta==0x01)
  3954                           
  3955                           ;RTX.c: 187: break;
  3956  0F0F  0827               	movf	RTXSndPkt@sta,w
  3957  0F10  3A01               	xorlw	1
  3958  0F11  1D03               	skipz
  3959  0F12  2EFA               	goto	l471
  3960  0F13                     l4476:	
  3961                           ;RTX.c: 189: break;
  3962                           
  3963                           
  3964                           ;RTX.c: 190: }
  3965                           ;RTX.c: 192: CC1Strobe(SIDLE);
  3966  0F13  3036               	movlw	54
  3967  0F14  3189  2155  318E   	fcall	_CC1Strobe
  3968                           
  3969                           ;RTX.c: 193: CC1Read(0x3B,(&(numRxByte)),1);
  3970  0F17  3025               	movlw	RTXSndPkt@numRxByte& (0+255)
  3971  0F18  0020               	movlb	0	; select bank0
  3972  0F19  00A3               	movwf	??_RTXSndPkt
  3973  0F1A  0823               	movf	??_RTXSndPkt,w
  3974  0F1B  00F7               	movwf	?_CC1Read
  3975  0F1C  01F8               	clrf	?_CC1Read+1
  3976  0F1D  0AF8               	incf	?_CC1Read+1,f
  3977  0F1E  303B               	movlw	59
  3978  0F1F  318A  222E  318E   	fcall	_CC1Read
  3979                           
  3980                           ;RTX.c: 194: CC1Read(0x3A,(&(numTxByte)),1);
  3981  0F22  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  3982  0F23  0020               	movlb	0	; select bank0
  3983  0F24  00A3               	movwf	??_RTXSndPkt
  3984  0F25  0823               	movf	??_RTXSndPkt,w
  3985  0F26  00F7               	movwf	?_CC1Read
  3986  0F27  01F8               	clrf	?_CC1Read+1
  3987  0F28  0AF8               	incf	?_CC1Read+1,f
  3988  0F29  303A               	movlw	58
  3989  0F2A  318A  222E  318E   	fcall	_CC1Read
  3990                           
  3991                           ;RTX.c: 196: CC1Strobe(SFTX);
  3992  0F2D  303B               	movlw	59
  3993  0F2E  3189  2155  318E   	fcall	_CC1Strobe
  3994                           
  3995                           ;RTX.c: 197: CC1Read(0x3A,(&(numTxByte)),1);
  3996  0F31  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  3997  0F32  0020               	movlb	0	; select bank0
  3998  0F33  00A3               	movwf	??_RTXSndPkt
  3999  0F34  0823               	movf	??_RTXSndPkt,w
  4000  0F35  00F7               	movwf	?_CC1Read
  4001  0F36  01F8               	clrf	?_CC1Read+1
  4002  0F37  0AF8               	incf	?_CC1Read+1,f
  4003  0F38  303A               	movlw	58
  4004  0F39  318A  222E  318E   	fcall	_CC1Read
  4005                           
  4006                           ;RTX.c: 199: CC1Write(0x3F,src,len);
  4007  0F3C  0020               	movlb	0	; select bank0
  4008  0F3D  0824               	movf	RTXSndPkt@src,w
  4009  0F3E  00F7               	movwf	?_CC1Write
  4010  0F3F  3000               	movlw	0
  4011  0F40  00F8               	movwf	?_CC1Write+1
  4012  0F41  0822               	movf	RTXSndPkt@len,w
  4013  0F42  00A3               	movwf	??_RTXSndPkt
  4014  0F43  0823               	movf	??_RTXSndPkt,w
  4015  0F44  00F9               	movwf	?_CC1Write+2
  4016  0F45  303F               	movlw	63
  4017  0F46  318B  2323  318E   	fcall	_CC1Write
  4018                           
  4019                           ;RTX.c: 201: CC1Strobe(STX);
  4020  0F49  3035               	movlw	53
  4021  0F4A  3189  2155         	fcall	_CC1Strobe
  4022  0F4C  0008               	return
  4023  0F4D                     __end_of_RTXSndPkt:	
  4024                           
  4025                           	psect	text15
  4026  08C7                     __ptext15:	
  4027 ;; *************** function _RTXRcvPkt *****************
  4028 ;; Defined at:
  4029 ;;		line 205 in file "RTX.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  dst             1    wreg     PTR unsigned char 
  4032 ;;		 -> pktRx(9), 
  4033 ;;  len             1    0[BANK0 ] unsigned char 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  4036 ;;		 -> pktRx(9), 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;		None               void
  4039 ;; Registers used:
  4040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4046 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;Total ram usage:        4 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:    4
  4053 ;; This function calls:
  4054 ;;		_CC1Read
  4055 ;; This function is called by:
  4056 ;;		_RTXReadPkt
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           
  4061                           ;psect for function _RTXRcvPkt
  4062  08C7                     _RTXRcvPkt:	
  4063                           
  4064                           ;incstack = 0
  4065                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4066                           ;RTXRcvPkt@dst stored from wreg
  4067  08C7  0020               	movlb	0	; select bank0
  4068  08C8  00A3               	movwf	RTXRcvPkt@dst
  4069                           
  4070                           ;RTX.c: 207: CC1Read(0x3F,dst,len);
  4071  08C9  0823               	movf	RTXRcvPkt@dst,w
  4072  08CA  00A1               	movwf	??_RTXRcvPkt
  4073  08CB  0821               	movf	??_RTXRcvPkt,w
  4074  08CC  00F7               	movwf	?_CC1Read
  4075  08CD  0820               	movf	RTXRcvPkt@len,w
  4076  08CE  00A2               	movwf	??_RTXRcvPkt+1
  4077  08CF  0822               	movf	??_RTXRcvPkt+1,w
  4078  08D0  00F8               	movwf	?_CC1Read+1
  4079  08D1  303F               	movlw	63
  4080  08D2  318A  222E         	fcall	_CC1Read
  4081  08D4  0008               	return
  4082  08D5                     __end_of_RTXRcvPkt:	
  4083                           
  4084                           	psect	text16
  4085  0A2E                     __ptext16:	
  4086 ;; *************** function _CC1Read *****************
  4087 ;; Defined at:
  4088 ;;		line 110 in file "CC1.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  addr            1    wreg     unsigned char 
  4091 ;;  dst             1    7[COMMON] PTR unsigned char 
  4092 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4093 ;;		 -> RTXSndPkt@sta(1), 
  4094 ;;  len             1    8[COMMON] unsigned char 
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;  addr            1   10[COMMON] unsigned char 
  4097 ;;  cc1Addr         1   11[COMMON] unsigned char 
  4098 ;; Return value:  Size  Location     Type
  4099 ;;		None               void
  4100 ;; Registers used:
  4101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4102 ;; Tracked objects:
  4103 ;;		On entry : 0/0
  4104 ;;		On exit  : 0/0
  4105 ;;		Unchanged: 0/0
  4106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4107 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4110 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4111 ;;Total ram usage:        5 bytes
  4112 ;; Hardware stack levels used:    1
  4113 ;; Hardware stack levels required when called:    3
  4114 ;; This function calls:
  4115 ;;		_SPIRead
  4116 ;;		_SPIWrite
  4117 ;; This function is called by:
  4118 ;;		_RTXSndPkt
  4119 ;;		_RTXRcvPkt
  4120 ;;		_RTXReadPkt
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           
  4125                           ;psect for function _CC1Read
  4126  0A2E                     _CC1Read:	
  4127                           
  4128                           ;incstack = 0
  4129                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4130                           ;CC1Read@addr stored from wreg
  4131  0A2E  00FA               	movwf	CC1Read@addr
  4132                           
  4133                           ;CC1.c: 111: unsigned char cc1Addr;
  4134                           ;CC1.c: 114: LATAbits.LATA5=0;
  4135  0A2F  0022               	movlb	2	; select bank2
  4136  0A30  128C               	bcf	12,5	;volatile
  4137                           
  4138                           ;CC1.c: 117: cc1Addr=((addr&0b00111111)|0b11000000);
  4139  0A31  087A               	movf	CC1Read@addr,w
  4140  0A32  393F               	andlw	63
  4141  0A33  38C0               	iorlw	192
  4142  0A34  00F9               	movwf	??_CC1Read
  4143  0A35  0879               	movf	??_CC1Read,w
  4144  0A36  00FB               	movwf	CC1Read@cc1Addr
  4145                           
  4146                           ;CC1.c: 118: SPIWrite((&(cc1Addr)),1);
  4147  0A37  307B               	movlw	low CC1Read@cc1Addr
  4148  0A38  00F1               	movwf	?_SPIWrite
  4149  0A39  3000               	movlw	high CC1Read@cc1Addr
  4150  0A3A  00F2               	movwf	?_SPIWrite+1
  4151  0A3B  01F3               	clrf	?_SPIWrite+2
  4152  0A3C  0AF3               	incf	?_SPIWrite+2,f
  4153  0A3D  318A  224A  318A   	fcall	_SPIWrite
  4154                           
  4155                           ;CC1.c: 121: SPIRead(dst,len);
  4156  0A40  0878               	movf	CC1Read@len,w
  4157  0A41  00F9               	movwf	??_CC1Read
  4158  0A42  0879               	movf	??_CC1Read,w
  4159  0A43  00F1               	movwf	?_SPIRead
  4160  0A44  0877               	movf	CC1Read@dst,w
  4161  0A45  318A  22BF         	fcall	_SPIRead
  4162                           
  4163                           ;CC1.c: 124: LATAbits.LATA5=1;
  4164  0A47  0022               	movlb	2	; select bank2
  4165  0A48  168C               	bsf	12,5	;volatile
  4166  0A49  0008               	return
  4167  0A4A                     __end_of_CC1Read:	
  4168                           
  4169                           	psect	text17
  4170  0ABF                     __ptext17:	
  4171 ;; *************** function _SPIRead *****************
  4172 ;; Defined at:
  4173 ;;		line 26 in file "SPI.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  dstPtr          1    wreg     PTR unsigned char 
  4176 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4177 ;;		 -> RTXSndPkt@sta(1), 
  4178 ;;  len             1    1[COMMON] unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  4181 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4182 ;;		 -> RTXSndPkt@sta(1), 
  4183 ;;  i               1    5[COMMON] unsigned char 
  4184 ;; Return value:  Size  Location     Type
  4185 ;;		None               void
  4186 ;; Registers used:
  4187 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4193 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4196 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;Total ram usage:        5 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    2
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_CC1Read
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           
  4208                           ;psect for function _SPIRead
  4209  0ABF                     _SPIRead:	
  4210                           
  4211                           ;incstack = 0
  4212                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  4213                           ;SPIRead@dstPtr stored from wreg
  4214  0ABF  00F4               	movwf	SPIRead@dstPtr
  4215                           
  4216                           ;SPI.c: 27: unsigned char i;
  4217                           ;SPI.c: 29: for(i=0;i<len;i++)
  4218  0AC0  01F5               	clrf	SPIRead@i
  4219  0AC1                     l4004:	
  4220  0AC1  0871               	movf	SPIRead@len,w
  4221  0AC2  0275               	subwf	SPIRead@i,w
  4222  0AC3  1803               	btfsc	3,0
  4223  0AC4  0008               	return
  4224                           
  4225                           ;SPI.c: 30: {
  4226                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  4227  0AC5  0020               	movlb	0	; select bank0
  4228  0AC6  1191               	bcf	17,3	;volatile
  4229                           
  4230                           ;SPI.c: 32: SSPBUF=0xFF;
  4231  0AC7  30FF               	movlw	255
  4232  0AC8  0024               	movlb	4	; select bank4
  4233  0AC9  0091               	movwf	17	;volatile
  4234  0ACA                     l70:	
  4235                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  4236                           
  4237  0ACA  0020               	movlb	0	; select bank0
  4238  0ACB  1991               	btfsc	17,3	;volatile
  4239  0ACC  2ACF               	goto	l4000
  4240                           
  4241                           ;SPI.c: 34: _nop();
  4242  0ACD  0000               	nop
  4243  0ACE  2ACA               	goto	l70
  4244  0ACF                     l4000:	
  4245                           
  4246                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  4247  0ACF  0024               	movlb	4	; select bank4
  4248  0AD0  0811               	movf	17,w	;volatile
  4249  0AD1  00F2               	movwf	??_SPIRead
  4250  0AD2  0875               	movf	SPIRead@i,w
  4251  0AD3  0774               	addwf	SPIRead@dstPtr,w
  4252  0AD4  00F3               	movwf	??_SPIRead+1
  4253  0AD5  0873               	movf	??_SPIRead+1,w
  4254  0AD6  0086               	movwf	6
  4255  0AD7  0187               	clrf	7
  4256  0AD8  0872               	movf	??_SPIRead,w
  4257  0AD9  0081               	movwf	1
  4258  0ADA  3001               	movlw	1
  4259  0ADB  00F2               	movwf	??_SPIRead
  4260  0ADC  0872               	movf	??_SPIRead,w
  4261  0ADD  07F5               	addwf	SPIRead@i,f
  4262  0ADE  2AC1               	goto	l4004
  4263  0ADF                     __end_of_SPIRead:	
  4264                           
  4265                           	psect	text18
  4266  0B8C                     __ptext18:	
  4267 ;; *************** function _RTXInit *****************
  4268 ;; Defined at:
  4269 ;;		line 53 in file "RTX.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  state           1    wreg     unsigned char 
  4272 ;; Auto vars:     Size  Location     Type
  4273 ;;  state           1   57[BANK0 ] unsigned char 
  4274 ;; Return value:  Size  Location     Type
  4275 ;;		None               void
  4276 ;; Registers used:
  4277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4278 ;; Tracked objects:
  4279 ;;		On entry : 0/0
  4280 ;;		On exit  : 0/0
  4281 ;;		Unchanged: 0/0
  4282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;Total ram usage:        1 bytes
  4288 ;; Hardware stack levels used:    1
  4289 ;; Hardware stack levels required when called:    7
  4290 ;; This function calls:
  4291 ;;		_CC1Strobe
  4292 ;;		_RTXUpdateDisplay
  4293 ;; This function is called by:
  4294 ;;		_main
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           
  4299                           ;psect for function _RTXInit
  4300  0B8C                     _RTXInit:	
  4301                           
  4302                           ;incstack = 0
  4303                           ; Regs used in _RTXInit: [allreg]
  4304                           ;RTXInit@state stored from wreg
  4305  0B8C  0020               	movlb	0	; select bank0
  4306  0B8D  00D9               	movwf	RTXInit@state
  4307                           
  4308                           ;RTX.c: 55: switch(state)
  4309  0B8E  2BA3               	goto	l4296
  4310  0B8F                     l4288:	
  4311                           ;RTX.c: 60: case 1:
  4312                           
  4313                           ;RTX.c: 59: break;
  4314                           
  4315                           ;RTX.c: 56: {
  4316                           ;RTX.c: 57: case 0:
  4317                           
  4318                           
  4319                           ;RTX.c: 62: tmrRcvPkt=0;
  4320  0B8F  01EB               	clrf	_tmrRcvPkt
  4321                           
  4322                           ;RTX.c: 63: rtx_flg.val=0;
  4323  0B90  0021               	movlb	1	; select bank1
  4324  0B91  01A9               	clrf	_rtx_flg^(0+128)
  4325                           
  4326                           ;RTX.c: 64: break;
  4327  0B92  0008               	return
  4328  0B93                     l4290:	
  4329                           ;RTX.c: 65: case 2:
  4330                           
  4331                           
  4332                           ;RTX.c: 67: CC1Strobe(SIDLE);
  4333  0B93  3036               	movlw	54
  4334  0B94  3189  2155  318B   	fcall	_CC1Strobe
  4335                           
  4336                           ;RTX.c: 68: CC1Strobe(SCAL);
  4337  0B97  3033               	movlw	51
  4338  0B98  3189  2155  318B   	fcall	_CC1Strobe
  4339                           
  4340                           ;RTX.c: 69: CC1Strobe(SRX);
  4341  0B9B  3034               	movlw	52
  4342  0B9C  3189  2155  318B   	fcall	_CC1Strobe
  4343                           
  4344                           ;RTX.c: 71: RTXUpdateDisplay(UPD_DPY_RST);
  4345  0B9F  3000               	movlw	0
  4346  0BA0  3182  2222         	fcall	_RTXUpdateDisplay
  4347                           
  4348                           ;RTX.c: 73: }
  4349                           
  4350                           ;RTX.c: 72: break;
  4351  0BA2  0008               	return
  4352  0BA3                     l4296:	
  4353  0BA3  0020               	movlb	0	; select bank0
  4354  0BA4  0859               	movf	RTXInit@state,w
  4355                           
  4356                           ; Switch size 1, requested type "space"
  4357                           ; Number of cases is 3, Range of values is 0 to 2
  4358                           ; switch strategies available:
  4359                           ; Name         Instructions Cycles
  4360                           ; simple_byte           10     6 (average)
  4361                           ; direct_byte           12     6 (fixed)
  4362                           ; jumptable            260     6 (fixed)
  4363                           ;	Chosen strategy is simple_byte
  4364  0BA5  3A00               	xorlw	0	; case 0
  4365  0BA6  1903               	skipnz
  4366  0BA7  2BAF               	goto	l439
  4367  0BA8  3A01               	xorlw	1	; case 1
  4368  0BA9  1903               	skipnz
  4369  0BAA  2B8F               	goto	l4288
  4370  0BAB  3A03               	xorlw	3	; case 2
  4371  0BAC  1903               	skipnz
  4372  0BAD  2B93               	goto	l4290
  4373  0BAE  2BAF               	goto	l439
  4374  0BAF                     l439:	
  4375  0BAF  0008               	return
  4376  0BB0                     __end_of_RTXInit:	
  4377                           
  4378                           	psect	text19
  4379  0222                     __ptext19:	
  4380 ;; *************** function _RTXUpdateDisplay *****************
  4381 ;; Defined at:
  4382 ;;		line 95 in file "RTX.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  val             1    wreg     enum E2134
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;  val             1   20[BANK1 ] enum E2134
  4387 ;;  strTmp         16    0[BANK1 ] unsigned char [16]
  4388 ;;  status          2   16[BANK1 ] int 
  4389 ;;  i               1   25[BANK1 ] unsigned char 
  4390 ;;  j               1   24[BANK1 ] unsigned char 
  4391 ;;  maxDigit        1   23[BANK1 ] unsigned char 
  4392 ;;  offset          1   22[BANK1 ] unsigned char 
  4393 ;;  p               1   21[BANK1 ] PTR unsigned char 
  4394 ;;		 -> ftoa@buf(17), 
  4395 ;;  isDec           1   19[BANK1 ] unsigned char 
  4396 ;;  posDec          1   18[BANK1 ] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;		None               void
  4399 ;; Registers used:
  4400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Totals:         0       4      26       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;Total ram usage:       30 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    6
  4413 ;; This function calls:
  4414 ;;		_DPYSendStr
  4415 ;;		_ftoa
  4416 ;;		___awdiv
  4417 ;;		___ftge
  4418 ;; This function is called by:
  4419 ;;		_RTXInit
  4420 ;;		_RTXReadPkt
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           
  4425                           ;psect for function _RTXUpdateDisplay
  4426  0222                     _RTXUpdateDisplay:	
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _RTXUpdateDisplay: [allreg]
  4430                           ;RTXUpdateDisplay@val stored from wreg
  4431  0222  0021               	movlb	1	; select bank1
  4432  0223  00E5               	movwf	RTXUpdateDisplay@val^(0+128)
  4433                           
  4434                           ;RTX.c: 96: char *p,strTmp[16];
  4435                           ;RTX.c: 97: unsigned char i,j,isDec,posDec,maxDigit,offset;
  4436                           ;RTX.c: 98: int status;
  4437                           ;RTX.c: 100: strTitle[0]='T';
  4438  0224  3054               	movlw	84
  4439  0225  0020               	movlb	0	; select bank0
  4440  0226  00D5               	movwf	??_RTXUpdateDisplay
  4441  0227  0855               	movf	??_RTXUpdateDisplay,w
  4442  0228  0021               	movlb	1	; select bank1
  4443  0229  00AE               	movwf	_strTitle^(0+128)
  4444                           
  4445                           ;RTX.c: 101: strTitle[1]='e';
  4446  022A  3065               	movlw	101
  4447  022B  0020               	movlb	0	; select bank0
  4448  022C  00D5               	movwf	??_RTXUpdateDisplay
  4449  022D  0855               	movf	??_RTXUpdateDisplay,w
  4450  022E  0021               	movlb	1	; select bank1
  4451  022F  00AF               	movwf	(_strTitle^(0+128)+1)
  4452                           
  4453                           ;RTX.c: 102: strTitle[2]='m';
  4454  0230  306D               	movlw	109
  4455  0231  0020               	movlb	0	; select bank0
  4456  0232  00D5               	movwf	??_RTXUpdateDisplay
  4457  0233  0855               	movf	??_RTXUpdateDisplay,w
  4458  0234  0021               	movlb	1	; select bank1
  4459  0235  00B0               	movwf	(_strTitle^(0+128)+2)
  4460                           
  4461                           ;RTX.c: 103: strTitle[3]='p';
  4462  0236  3070               	movlw	112
  4463  0237  0020               	movlb	0	; select bank0
  4464  0238  00D5               	movwf	??_RTXUpdateDisplay
  4465  0239  0855               	movf	??_RTXUpdateDisplay,w
  4466  023A  0021               	movlb	1	; select bank1
  4467  023B  00B1               	movwf	(_strTitle^(0+128)+3)
  4468                           
  4469                           ;RTX.c: 104: strTitle[4]='e';
  4470  023C  3065               	movlw	101
  4471  023D  0020               	movlb	0	; select bank0
  4472  023E  00D5               	movwf	??_RTXUpdateDisplay
  4473  023F  0855               	movf	??_RTXUpdateDisplay,w
  4474  0240  0021               	movlb	1	; select bank1
  4475  0241  00B2               	movwf	(_strTitle^(0+128)+4)
  4476                           
  4477                           ;RTX.c: 105: strTitle[5]='r';
  4478  0242  3072               	movlw	114
  4479  0243  0020               	movlb	0	; select bank0
  4480  0244  00D5               	movwf	??_RTXUpdateDisplay
  4481  0245  0855               	movf	??_RTXUpdateDisplay,w
  4482  0246  0021               	movlb	1	; select bank1
  4483  0247  00B3               	movwf	(_strTitle^(0+128)+5)
  4484                           
  4485                           ;RTX.c: 106: strTitle[6]='a';
  4486  0248  3061               	movlw	97
  4487  0249  0020               	movlb	0	; select bank0
  4488  024A  00D5               	movwf	??_RTXUpdateDisplay
  4489  024B  0855               	movf	??_RTXUpdateDisplay,w
  4490  024C  0021               	movlb	1	; select bank1
  4491  024D  00B4               	movwf	(_strTitle^(0+128)+6)
  4492                           
  4493                           ;RTX.c: 107: strTitle[7]='t';
  4494  024E  3074               	movlw	116
  4495  024F  0020               	movlb	0	; select bank0
  4496  0250  00D5               	movwf	??_RTXUpdateDisplay
  4497  0251  0855               	movf	??_RTXUpdateDisplay,w
  4498  0252  0021               	movlb	1	; select bank1
  4499  0253  00B5               	movwf	(_strTitle^(0+128)+7)
  4500                           
  4501                           ;RTX.c: 108: strTitle[8]='u';
  4502  0254  3075               	movlw	117
  4503  0255  0020               	movlb	0	; select bank0
  4504  0256  00D5               	movwf	??_RTXUpdateDisplay
  4505  0257  0855               	movf	??_RTXUpdateDisplay,w
  4506  0258  0021               	movlb	1	; select bank1
  4507  0259  00B6               	movwf	(_strTitle^(0+128)+8)
  4508                           
  4509                           ;RTX.c: 109: strTitle[9]='r';
  4510  025A  3072               	movlw	114
  4511  025B  0020               	movlb	0	; select bank0
  4512  025C  00D5               	movwf	??_RTXUpdateDisplay
  4513  025D  0855               	movf	??_RTXUpdateDisplay,w
  4514  025E  0021               	movlb	1	; select bank1
  4515  025F  00B7               	movwf	(_strTitle^(0+128)+9)
  4516                           
  4517                           ;RTX.c: 110: strTitle[10]='a';
  4518  0260  3061               	movlw	97
  4519  0261  0020               	movlb	0	; select bank0
  4520  0262  00D5               	movwf	??_RTXUpdateDisplay
  4521  0263  0855               	movf	??_RTXUpdateDisplay,w
  4522  0264  0021               	movlb	1	; select bank1
  4523  0265  00B8               	movwf	(_strTitle^(0+128)+10)
  4524                           
  4525                           ;RTX.c: 111: strTitle[11]=':';
  4526  0266  303A               	movlw	58
  4527  0267  0020               	movlb	0	; select bank0
  4528  0268  00D5               	movwf	??_RTXUpdateDisplay
  4529  0269  0855               	movf	??_RTXUpdateDisplay,w
  4530  026A  0021               	movlb	1	; select bank1
  4531  026B  00B9               	movwf	(_strTitle^(0+128)+11)
  4532                           
  4533                           ;RTX.c: 112: DPYSendStr(0,(16-sizeof(strTitle))/2,strTitle,sizeof(strTitle)/sizeof(char)
      +                          );
  4534  026C  3002               	movlw	2
  4535  026D  0020               	movlb	0	; select bank0
  4536  026E  00D5               	movwf	??_RTXUpdateDisplay
  4537  026F  0855               	movf	??_RTXUpdateDisplay,w
  4538  0270  00A0               	movwf	?_DPYSendStr
  4539  0271  30AE               	movlw	low _strTitle
  4540  0272  00A1               	movwf	?_DPYSendStr+1
  4541  0273  3000               	movlw	high _strTitle
  4542  0274  00A2               	movwf	?_DPYSendStr+2
  4543  0275  300C               	movlw	12
  4544  0276  00D6               	movwf	??_RTXUpdateDisplay+1
  4545  0277  0856               	movf	??_RTXUpdateDisplay+1,w
  4546  0278  00A3               	movwf	?_DPYSendStr+3
  4547  0279  3000               	movlw	0
  4548  027A  318D  25BB  3182   	fcall	_DPYSendStr
  4549                           
  4550                           ;RTX.c: 114: for(i=0;i<sizeof(strTemp)/sizeof(char);i++)
  4551  027D  0021               	movlb	1	; select bank1
  4552  027E  01EA               	clrf	RTXUpdateDisplay@i^(0+128)
  4553  027F  3010               	movlw	16
  4554  0280  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4555  0281  1803               	btfsc	3,0
  4556  0282  2A98               	goto	l4314
  4557  0283                     l4308:	
  4558                           
  4559                           ;RTX.c: 115: strTemp[i]=' ';
  4560  0283  3020               	movlw	32
  4561  0284  0020               	movlb	0	; select bank0
  4562  0285  00D5               	movwf	??_RTXUpdateDisplay
  4563  0286  0021               	movlb	1	; select bank1
  4564  0287  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4565  0288  3E31               	addlw	_strTemp& (0+255)
  4566  0289  0086               	movwf	6
  4567  028A  3001               	movlw	1	; select bank2/3
  4568  028B  0087               	movwf	7
  4569  028C  0020               	movlb	0	; select bank0
  4570  028D  0855               	movf	??_RTXUpdateDisplay,w
  4571  028E  0081               	movwf	1
  4572  028F  3001               	movlw	1
  4573  0290  00D5               	movwf	??_RTXUpdateDisplay
  4574  0291  0855               	movf	??_RTXUpdateDisplay,w
  4575  0292  0021               	movlb	1	; select bank1
  4576  0293  07EA               	addwf	RTXUpdateDisplay@i^(0+128),f
  4577  0294  3010               	movlw	16
  4578  0295  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4579  0296  1C03               	skipc
  4580  0297  2A83               	goto	l4308
  4581  0298                     l4314:	
  4582                           
  4583                           ;RTX.c: 116: if(val==UPD_DPY_TEMP)
  4584  0298  0865               	movf	RTXUpdateDisplay@val^(0+128),w
  4585  0299  3A01               	xorlw	1
  4586  029A  1D03               	skipz
  4587  029B  2BAC               	goto	l4370
  4588                           
  4589                           ;RTX.c: 117: {
  4590                           ;RTX.c: 118: p=ftoa(temp,(&(status)));
  4591  029C  0823               	movf	_temp^(0+128),w
  4592  029D  0020               	movlb	0	; select bank0
  4593  029E  00C7               	movwf	?_ftoa
  4594  029F  0021               	movlb	1	; select bank1
  4595  02A0  0824               	movf	(_temp+1)^(0+128),w
  4596  02A1  0020               	movlb	0	; select bank0
  4597  02A2  00C8               	movwf	?_ftoa+1
  4598  02A3  0021               	movlb	1	; select bank1
  4599  02A4  0825               	movf	(_temp+2)^(0+128),w
  4600  02A5  0020               	movlb	0	; select bank0
  4601  02A6  00C9               	movwf	?_ftoa+2
  4602  02A7  30E1               	movlw	RTXUpdateDisplay@status& (0+255)
  4603  02A8  00D5               	movwf	??_RTXUpdateDisplay
  4604  02A9  0855               	movf	??_RTXUpdateDisplay,w
  4605  02AA  00CA               	movwf	?_ftoa+3
  4606  02AB  3186  2650  3182   	fcall	_ftoa
  4607  02AE  0020               	movlb	0	; select bank0
  4608  02AF  00D6               	movwf	??_RTXUpdateDisplay+1
  4609  02B0  0856               	movf	??_RTXUpdateDisplay+1,w
  4610  02B1  0021               	movlb	1	; select bank1
  4611  02B2  00E6               	movwf	RTXUpdateDisplay@p^(0+128)
  4612                           
  4613                           ;RTX.c: 120: isDec=0;
  4614  02B3  01E4               	clrf	RTXUpdateDisplay@isDec^(0+128)
  4615                           
  4616                           ;RTX.c: 121: for(i=0;i<sizeof(strTmp)/sizeof(char);i++)
  4617  02B4  01EA               	clrf	RTXUpdateDisplay@i^(0+128)
  4618  02B5  3010               	movlw	16
  4619  02B6  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4620  02B7  1803               	btfsc	3,0
  4621  02B8  2B18               	goto	l4346
  4622  02B9                     l4326:	
  4623                           
  4624                           ;RTX.c: 122: {
  4625                           ;RTX.c: 124: if((*(p+i))=='.')
  4626  02B9  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4627  02BA  0766               	addwf	RTXUpdateDisplay@p^(0+128),w
  4628  02BB  0020               	movlb	0	; select bank0
  4629  02BC  00D5               	movwf	??_RTXUpdateDisplay
  4630  02BD  0855               	movf	??_RTXUpdateDisplay,w
  4631  02BE  0086               	movwf	6
  4632  02BF  3001               	movlw	1	; select bank2/3
  4633  02C0  0087               	movwf	7
  4634  02C1  0801               	movf	1,w
  4635  02C2  3A2E               	xorlw	46
  4636  02C3  1D03               	skipz
  4637  02C4  2ACE               	goto	l456
  4638                           
  4639                           ;RTX.c: 125: {
  4640                           ;RTX.c: 126: isDec=1;
  4641  02C5  0021               	movlb	1	; select bank1
  4642  02C6  01E4               	clrf	RTXUpdateDisplay@isDec^(0+128)
  4643  02C7  0AE4               	incf	RTXUpdateDisplay@isDec^(0+128),f
  4644                           
  4645                           ;RTX.c: 127: posDec=i;
  4646  02C8  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4647  02C9  0020               	movlb	0	; select bank0
  4648  02CA  00D5               	movwf	??_RTXUpdateDisplay
  4649  02CB  0855               	movf	??_RTXUpdateDisplay,w
  4650  02CC  0021               	movlb	1	; select bank1
  4651  02CD  00E3               	movwf	RTXUpdateDisplay@posDec^(0+128)
  4652  02CE                     l456:	
  4653                           
  4654                           ;RTX.c: 128: }
  4655                           ;RTX.c: 130: if(isDec)
  4656  02CE  0021               	movlb	1	; select bank1
  4657  02CF  0864               	movf	RTXUpdateDisplay@isDec^(0+128),w
  4658  02D0  1903               	btfsc	3,2
  4659  02D1  2AF0               	goto	l4336
  4660                           
  4661                           ;RTX.c: 131: {
  4662                           ;RTX.c: 132: if((i-posDec)>2)
  4663  02D2  0863               	movf	RTXUpdateDisplay@posDec^(0+128),w
  4664  02D3  0020               	movlb	0	; select bank0
  4665  02D4  00D5               	movwf	??_RTXUpdateDisplay
  4666  02D5  01D6               	clrf	??_RTXUpdateDisplay+1
  4667  02D6  09D5               	comf	??_RTXUpdateDisplay,f
  4668  02D7  09D6               	comf	??_RTXUpdateDisplay+1,f
  4669  02D8  0AD5               	incf	??_RTXUpdateDisplay,f
  4670  02D9  1903               	skipnz
  4671  02DA  0AD6               	incf	??_RTXUpdateDisplay+1,f
  4672  02DB  0021               	movlb	1	; select bank1
  4673  02DC  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4674  02DD  0020               	movlb	0	; select bank0
  4675  02DE  0755               	addwf	??_RTXUpdateDisplay,w
  4676  02DF  00D7               	movwf	??_RTXUpdateDisplay+2
  4677  02E0  0856               	movf	??_RTXUpdateDisplay+1,w
  4678  02E1  1803               	skipnc
  4679  02E2  0A56               	incf	??_RTXUpdateDisplay+1,w
  4680  02E3  00D8               	movwf	??_RTXUpdateDisplay+3
  4681  02E4  0858               	movf	??_RTXUpdateDisplay+3,w
  4682  02E5  3A80               	xorlw	128
  4683  02E6  00FF               	movwf	127
  4684  02E7  3080               	movlw	128
  4685  02E8  027F               	subwf	127,w
  4686  02E9  1D03               	skipz
  4687  02EA  2AED               	goto	u4285
  4688  02EB  3003               	movlw	3
  4689  02EC  0257               	subwf	??_RTXUpdateDisplay+2,w
  4690  02ED                     u4285:	
  4691  02ED  1803               	btfsc	3,0
  4692  02EE  2B18               	goto	l4346
  4693                           
  4694                           ;RTX.c: 133: break;
  4695  02EF  0021               	movlb	1	; select bank1
  4696  02F0                     l4336:	
  4697                           
  4698                           ;RTX.c: 134: }
  4699                           ;RTX.c: 136: if((*(p+i))==0x00)
  4700  02F0  0021               	movlb	1	; select bank1
  4701  02F1  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4702  02F2  0766               	addwf	RTXUpdateDisplay@p^(0+128),w
  4703  02F3  0020               	movlb	0	; select bank0
  4704  02F4  00D5               	movwf	??_RTXUpdateDisplay
  4705  02F5  0855               	movf	??_RTXUpdateDisplay,w
  4706  02F6  0086               	movwf	6
  4707  02F7  3001               	movlw	1	; select bank2/3
  4708  02F8  0087               	movwf	7
  4709  02F9  0881               	movf	1,f
  4710  02FA  1903               	btfsc	3,2
  4711  02FB  2B18               	goto	l4346
  4712                           
  4713                           ;RTX.c: 139: strTmp[i]=(*(p+i));
  4714                           
  4715                           ;RTX.c: 137: break;
  4716  02FC  0021               	movlb	1	; select bank1
  4717  02FD  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4718  02FE  0766               	addwf	RTXUpdateDisplay@p^(0+128),w
  4719  02FF  0020               	movlb	0	; select bank0
  4720  0300  00D5               	movwf	??_RTXUpdateDisplay
  4721  0301  0855               	movf	??_RTXUpdateDisplay,w
  4722  0302  0086               	movwf	6
  4723  0303  3001               	movlw	1	; select bank2/3
  4724  0304  0087               	movwf	7
  4725  0305  0801               	movf	1,w
  4726  0306  00D6               	movwf	??_RTXUpdateDisplay+1
  4727  0307  0021               	movlb	1	; select bank1
  4728  0308  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4729  0309  3ED1               	addlw	RTXUpdateDisplay@strTmp& (0+255)
  4730  030A  0086               	movwf	6
  4731  030B  0187               	clrf	7
  4732  030C  0020               	movlb	0	; select bank0
  4733  030D  0856               	movf	??_RTXUpdateDisplay+1,w
  4734  030E  0081               	movwf	1
  4735  030F  3001               	movlw	1
  4736  0310  00D5               	movwf	??_RTXUpdateDisplay
  4737  0311  0855               	movf	??_RTXUpdateDisplay,w
  4738  0312  0021               	movlb	1	; select bank1
  4739  0313  07EA               	addwf	RTXUpdateDisplay@i^(0+128),f
  4740  0314  3010               	movlw	16
  4741  0315  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4742  0316  1C03               	skipc
  4743  0317  2AB9               	goto	l4326
  4744  0318                     l4346:	
  4745                           
  4746                           ;RTX.c: 140: }
  4747                           ;RTX.c: 143: maxDigit=(16-2);
  4748  0318  300E               	movlw	14
  4749  0319  0020               	movlb	0	; select bank0
  4750  031A  00D5               	movwf	??_RTXUpdateDisplay
  4751  031B  0855               	movf	??_RTXUpdateDisplay,w
  4752  031C  0021               	movlb	1	; select bank1
  4753  031D  00E8               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  4754                           
  4755                           ;RTX.c: 144: if(batt<2.5)
  4756  031E  0820               	movf	_batt^(0+128),w
  4757  031F  00F1               	movwf	?___ftge
  4758  0320  0821               	movf	(_batt+1)^(0+128),w
  4759  0321  00F2               	movwf	?___ftge+1
  4760  0322  0822               	movf	(_batt+2)^(0+128),w
  4761  0323  00F3               	movwf	?___ftge+2
  4762  0324  3000               	movlw	0
  4763  0325  00F4               	movwf	?___ftge+3
  4764  0326  3020               	movlw	32
  4765  0327  00F5               	movwf	?___ftge+4
  4766  0328  3040               	movlw	64
  4767  0329  00F6               	movwf	?___ftge+5
  4768  032A  318C  24BF  3182   	fcall	___ftge
  4769  032D  1803               	btfsc	3,0
  4770  032E  2B35               	goto	l460
  4771                           
  4772                           ;RTX.c: 145: maxDigit=(16-3);
  4773  032F  300D               	movlw	13
  4774  0330  0020               	movlb	0	; select bank0
  4775  0331  00D5               	movwf	??_RTXUpdateDisplay
  4776  0332  0855               	movf	??_RTXUpdateDisplay,w
  4777  0333  0021               	movlb	1	; select bank1
  4778  0334  00E8               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  4779  0335                     l460:	
  4780                           
  4781                           ;RTX.c: 148: if(i>=maxDigit)
  4782  0335  0021               	movlb	1	; select bank1
  4783  0336  0868               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  4784  0337  026A               	subwf	RTXUpdateDisplay@i^(0+128),w
  4785  0338  1C03               	skipc
  4786  0339  2B41               	goto	l4354
  4787                           
  4788                           ;RTX.c: 149: i=maxDigit-1;
  4789  033A  0868               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  4790  033B  3EFF               	addlw	255
  4791  033C  0020               	movlb	0	; select bank0
  4792  033D  00D5               	movwf	??_RTXUpdateDisplay
  4793  033E  0855               	movf	??_RTXUpdateDisplay,w
  4794  033F  0021               	movlb	1	; select bank1
  4795  0340  00EA               	movwf	RTXUpdateDisplay@i^(0+128)
  4796  0341                     l4354:	
  4797                           
  4798                           ;RTX.c: 152: offset=(maxDigit-i)/2;
  4799  0341  3002               	movlw	2
  4800  0342  00F1               	movwf	?___awdiv
  4801  0343  3000               	movlw	0
  4802  0344  00F2               	movwf	?___awdiv+1
  4803  0345  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4804  0346  0020               	movlb	0	; select bank0
  4805  0347  00D5               	movwf	??_RTXUpdateDisplay
  4806  0348  01D6               	clrf	??_RTXUpdateDisplay+1
  4807  0349  09D5               	comf	??_RTXUpdateDisplay,f
  4808  034A  09D6               	comf	??_RTXUpdateDisplay+1,f
  4809  034B  0AD5               	incf	??_RTXUpdateDisplay,f
  4810  034C  1903               	skipnz
  4811  034D  0AD6               	incf	??_RTXUpdateDisplay+1,f
  4812  034E  0021               	movlb	1	; select bank1
  4813  034F  0868               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  4814  0350  0020               	movlb	0	; select bank0
  4815  0351  0755               	addwf	??_RTXUpdateDisplay,w
  4816  0352  00F3               	movwf	?___awdiv+2
  4817  0353  0856               	movf	??_RTXUpdateDisplay+1,w
  4818  0354  1803               	skipnc
  4819  0355  0A56               	incf	??_RTXUpdateDisplay+1,w
  4820  0356  00F4               	movwf	?___awdiv+3
  4821  0357  318E  26A5  3182   	fcall	___awdiv
  4822  035A  0871               	movf	?___awdiv,w
  4823  035B  0020               	movlb	0	; select bank0
  4824  035C  00D7               	movwf	??_RTXUpdateDisplay+2
  4825  035D  0857               	movf	??_RTXUpdateDisplay+2,w
  4826  035E  0021               	movlb	1	; select bank1
  4827  035F  00E7               	movwf	RTXUpdateDisplay@offset^(0+128)
  4828                           
  4829                           ;RTX.c: 153: for(j=0;j<i;j++)
  4830  0360  01E9               	clrf	RTXUpdateDisplay@j^(0+128)
  4831  0361                     l4362:	
  4832  0361  086A               	movf	RTXUpdateDisplay@i^(0+128),w
  4833  0362  0269               	subwf	RTXUpdateDisplay@j^(0+128),w
  4834  0363  1803               	btfsc	3,0
  4835  0364  2B7C               	goto	l4364
  4836                           
  4837                           ;RTX.c: 154: strTemp[j+offset]=strTmp[j];
  4838  0365  0869               	movf	RTXUpdateDisplay@j^(0+128),w
  4839  0366  3ED1               	addlw	RTXUpdateDisplay@strTmp& (0+255)
  4840  0367  0086               	movwf	6
  4841  0368  0187               	clrf	7
  4842  0369  0801               	movf	1,w
  4843  036A  0020               	movlb	0	; select bank0
  4844  036B  00D5               	movwf	??_RTXUpdateDisplay
  4845  036C  0021               	movlb	1	; select bank1
  4846  036D  0869               	movf	RTXUpdateDisplay@j^(0+128),w
  4847  036E  0767               	addwf	RTXUpdateDisplay@offset^(0+128),w
  4848  036F  3E31               	addlw	_strTemp& (0+255)
  4849  0370  0086               	movwf	6
  4850  0371  3001               	movlw	1	; select bank2/3
  4851  0372  0087               	movwf	7
  4852  0373  0020               	movlb	0	; select bank0
  4853  0374  0855               	movf	??_RTXUpdateDisplay,w
  4854  0375  0081               	movwf	1
  4855  0376  3001               	movlw	1
  4856  0377  00D5               	movwf	??_RTXUpdateDisplay
  4857  0378  0855               	movf	??_RTXUpdateDisplay,w
  4858  0379  0021               	movlb	1	; select bank1
  4859  037A  07E9               	addwf	RTXUpdateDisplay@j^(0+128),f
  4860  037B  2B61               	goto	l4362
  4861  037C                     l4364:	
  4862                           
  4863                           ;RTX.c: 157: strTemp[j+offset]=0b11011111;
  4864  037C  30DF               	movlw	223
  4865  037D  0020               	movlb	0	; select bank0
  4866  037E  00D5               	movwf	??_RTXUpdateDisplay
  4867  037F  0021               	movlb	1	; select bank1
  4868  0380  0869               	movf	RTXUpdateDisplay@j^(0+128),w
  4869  0381  0767               	addwf	RTXUpdateDisplay@offset^(0+128),w
  4870  0382  3E31               	addlw	_strTemp& (0+255)
  4871  0383  0086               	movwf	6
  4872  0384  3001               	movlw	1	; select bank2/3
  4873  0385  0087               	movwf	7
  4874  0386  0020               	movlb	0	; select bank0
  4875  0387  0855               	movf	??_RTXUpdateDisplay,w
  4876  0388  0081               	movwf	1
  4877                           
  4878                           ;RTX.c: 158: strTemp[j+offset+1]='C';
  4879  0389  3043               	movlw	67
  4880  038A  00D5               	movwf	??_RTXUpdateDisplay
  4881  038B  0021               	movlb	1	; select bank1
  4882  038C  0867               	movf	RTXUpdateDisplay@offset^(0+128),w
  4883  038D  0769               	addwf	RTXUpdateDisplay@j^(0+128),w
  4884  038E  0020               	movlb	0	; select bank0
  4885  038F  00D6               	movwf	??_RTXUpdateDisplay+1
  4886  0390  0A56               	incf	??_RTXUpdateDisplay+1,w
  4887  0391  3E31               	addlw	_strTemp& (0+255)
  4888  0392  0086               	movwf	6
  4889  0393  3001               	movlw	1	; select bank2/3
  4890  0394  0087               	movwf	7
  4891  0395  0855               	movf	??_RTXUpdateDisplay,w
  4892  0396  0081               	movwf	1
  4893                           
  4894                           ;RTX.c: 159: if(batt<2.5)
  4895  0397  0021               	movlb	1	; select bank1
  4896  0398  0820               	movf	_batt^(0+128),w
  4897  0399  00F1               	movwf	?___ftge
  4898  039A  0821               	movf	(_batt+1)^(0+128),w
  4899  039B  00F2               	movwf	?___ftge+1
  4900  039C  0822               	movf	(_batt+2)^(0+128),w
  4901  039D  00F3               	movwf	?___ftge+2
  4902  039E  3000               	movlw	0
  4903  039F  00F4               	movwf	?___ftge+3
  4904  03A0  3020               	movlw	32
  4905  03A1  00F5               	movwf	?___ftge+4
  4906  03A2  3040               	movlw	64
  4907  03A3  00F6               	movwf	?___ftge+5
  4908  03A4  318C  24BF  3182   	fcall	___ftge
  4909  03A7  1803               	btfsc	3,0
  4910  03A8  2BDA               	goto	l4374
  4911                           
  4912                           ;RTX.c: 160: strTemp[sizeof(strTemp)/sizeof(char)-1]=0x00;
  4913  03A9  0022               	movlb	2	; select bank2
  4914  03AA  01C0               	clrf	(_strTemp^(0+256)+15)
  4915                           
  4916                           ;RTX.c: 161: }
  4917  03AB  2BDA               	goto	l4374
  4918  03AC                     l4370:	
  4919                           
  4920                           ;RTX.c: 162: else if(val==UPD_DPY_RST)
  4921  03AC  0021               	movlb	1	; select bank1
  4922  03AD  08E5               	movf	RTXUpdateDisplay@val^(0+128),f
  4923  03AE  1D03               	skipz
  4924  03AF  2BDA               	goto	l4374
  4925                           
  4926                           ;RTX.c: 163: {
  4927                           ;RTX.c: 164: strTemp[5]='?';
  4928  03B0  303F               	movlw	63
  4929  03B1  0020               	movlb	0	; select bank0
  4930  03B2  00D5               	movwf	??_RTXUpdateDisplay
  4931  03B3  0855               	movf	??_RTXUpdateDisplay,w
  4932  03B4  0022               	movlb	2	; select bank2
  4933  03B5  00B6               	movwf	(_strTemp^(0+256)+5)
  4934                           
  4935                           ;RTX.c: 165: strTemp[6]='?';
  4936  03B6  303F               	movlw	63
  4937  03B7  0020               	movlb	0	; select bank0
  4938  03B8  00D5               	movwf	??_RTXUpdateDisplay
  4939  03B9  0855               	movf	??_RTXUpdateDisplay,w
  4940  03BA  0022               	movlb	2	; select bank2
  4941  03BB  00B7               	movwf	(_strTemp^(0+256)+6)
  4942                           
  4943                           ;RTX.c: 166: strTemp[7]='.';
  4944  03BC  302E               	movlw	46
  4945  03BD  0020               	movlb	0	; select bank0
  4946  03BE  00D5               	movwf	??_RTXUpdateDisplay
  4947  03BF  0855               	movf	??_RTXUpdateDisplay,w
  4948  03C0  0022               	movlb	2	; select bank2
  4949  03C1  00B8               	movwf	(_strTemp^(0+256)+7)
  4950                           
  4951                           ;RTX.c: 167: strTemp[8]='?';
  4952  03C2  303F               	movlw	63
  4953  03C3  0020               	movlb	0	; select bank0
  4954  03C4  00D5               	movwf	??_RTXUpdateDisplay
  4955  03C5  0855               	movf	??_RTXUpdateDisplay,w
  4956  03C6  0022               	movlb	2	; select bank2
  4957  03C7  00B9               	movwf	(_strTemp^(0+256)+8)
  4958                           
  4959                           ;RTX.c: 168: strTemp[9]='?';
  4960  03C8  303F               	movlw	63
  4961  03C9  0020               	movlb	0	; select bank0
  4962  03CA  00D5               	movwf	??_RTXUpdateDisplay
  4963  03CB  0855               	movf	??_RTXUpdateDisplay,w
  4964  03CC  0022               	movlb	2	; select bank2
  4965  03CD  00BA               	movwf	(_strTemp^(0+256)+9)
  4966                           
  4967                           ;RTX.c: 169: strTemp[10]=0b11011111;
  4968  03CE  30DF               	movlw	223
  4969  03CF  0020               	movlb	0	; select bank0
  4970  03D0  00D5               	movwf	??_RTXUpdateDisplay
  4971  03D1  0855               	movf	??_RTXUpdateDisplay,w
  4972  03D2  0022               	movlb	2	; select bank2
  4973  03D3  00BB               	movwf	(_strTemp^(0+256)+10)
  4974                           
  4975                           ;RTX.c: 170: strTemp[11]='C';
  4976  03D4  3043               	movlw	67
  4977  03D5  0020               	movlb	0	; select bank0
  4978  03D6  00D5               	movwf	??_RTXUpdateDisplay
  4979  03D7  0855               	movf	??_RTXUpdateDisplay,w
  4980  03D8  0022               	movlb	2	; select bank2
  4981  03D9  00BC               	movwf	(_strTemp^(0+256)+11)
  4982  03DA                     l4374:	
  4983                           
  4984                           ;RTX.c: 171: }
  4985                           ;RTX.c: 172: DPYSendStr(1,0,strTemp,sizeof(strTemp)/sizeof(char));
  4986  03DA  0020               	movlb	0	; select bank0
  4987  03DB  01A0               	clrf	?_DPYSendStr
  4988  03DC  3031               	movlw	low _strTemp
  4989  03DD  00A1               	movwf	?_DPYSendStr+1
  4990  03DE  3001               	movlw	high _strTemp
  4991  03DF  00A2               	movwf	?_DPYSendStr+2
  4992  03E0  3010               	movlw	16
  4993  03E1  00D5               	movwf	??_RTXUpdateDisplay
  4994  03E2  0855               	movf	??_RTXUpdateDisplay,w
  4995  03E3  00A3               	movwf	?_DPYSendStr+3
  4996  03E4  3001               	movlw	1
  4997  03E5  318D  25BB         	fcall	_DPYSendStr
  4998  03E7  0008               	return
  4999  03E8                     __end_of_RTXUpdateDisplay:	
  5000                           
  5001                           	psect	text20
  5002  0EA5                     __ptext20:	
  5003 ;; *************** function ___awdiv *****************
  5004 ;; Defined at:
  5005 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awdiv.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;  divisor         2    1[COMMON] int 
  5008 ;;  dividend        2    3[COMMON] int 
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;  quotient        2    8[COMMON] int 
  5011 ;;  sign            1    7[COMMON] unsigned char 
  5012 ;;  counter         1    6[COMMON] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  2    1[COMMON] int 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5022 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;Total ram usage:        9 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    2
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_RTXUpdateDisplay
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function ___awdiv
  5038  0EA5                     ___awdiv:	
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5042  0EA5  01F7               	clrf	___awdiv@sign
  5043  0EA6  1FF2               	btfss	___awdiv@divisor+1,7
  5044  0EA7  2EAF               	goto	l3640
  5045  0EA8  09F1               	comf	___awdiv@divisor,f
  5046  0EA9  09F2               	comf	___awdiv@divisor+1,f
  5047  0EAA  0AF1               	incf	___awdiv@divisor,f
  5048  0EAB  1903               	skipnz
  5049  0EAC  0AF2               	incf	___awdiv@divisor+1,f
  5050  0EAD  01F7               	clrf	___awdiv@sign
  5051  0EAE  0AF7               	incf	___awdiv@sign,f
  5052  0EAF                     l3640:	
  5053  0EAF  1FF4               	btfss	___awdiv@dividend+1,7
  5054  0EB0  2EBA               	goto	l3646
  5055  0EB1  09F3               	comf	___awdiv@dividend,f
  5056  0EB2  09F4               	comf	___awdiv@dividend+1,f
  5057  0EB3  0AF3               	incf	___awdiv@dividend,f
  5058  0EB4  1903               	skipnz
  5059  0EB5  0AF4               	incf	___awdiv@dividend+1,f
  5060  0EB6  3001               	movlw	1
  5061  0EB7  00F5               	movwf	??___awdiv
  5062  0EB8  0875               	movf	??___awdiv,w
  5063  0EB9  06F7               	xorwf	___awdiv@sign,f
  5064  0EBA                     l3646:	
  5065  0EBA  01F8               	clrf	___awdiv@quotient
  5066  0EBB  01F9               	clrf	___awdiv@quotient+1
  5067  0EBC  0872               	movf	___awdiv@divisor+1,w
  5068  0EBD  0471               	iorwf	___awdiv@divisor,w
  5069  0EBE  1903               	skipnz
  5070  0EBF  2EE9               	goto	l3668
  5071  0EC0  01F6               	clrf	___awdiv@counter
  5072  0EC1  0AF6               	incf	___awdiv@counter,f
  5073  0EC2                     l3656:	
  5074  0EC2  1BF2               	btfsc	___awdiv@divisor+1,7
  5075  0EC3  2ECE               	goto	l3658
  5076  0EC4  3001               	movlw	1
  5077  0EC5                     u3195:	
  5078  0EC5  35F1               	lslf	___awdiv@divisor,f
  5079  0EC6  0DF2               	rlf	___awdiv@divisor+1,f
  5080  0EC7  0B89               	decfsz	9,f
  5081  0EC8  2EC5               	goto	u3195
  5082  0EC9  3001               	movlw	1
  5083  0ECA  00F5               	movwf	??___awdiv
  5084  0ECB  0875               	movf	??___awdiv,w
  5085  0ECC  07F6               	addwf	___awdiv@counter,f
  5086  0ECD  2EC2               	goto	l3656
  5087  0ECE                     l3658:	
  5088  0ECE  3001               	movlw	1
  5089  0ECF                     u3215:	
  5090  0ECF  35F8               	lslf	___awdiv@quotient,f
  5091  0ED0  0DF9               	rlf	___awdiv@quotient+1,f
  5092  0ED1  0B89               	decfsz	9,f
  5093  0ED2  2ECF               	goto	u3215
  5094  0ED3  0872               	movf	___awdiv@divisor+1,w
  5095  0ED4  0274               	subwf	___awdiv@dividend+1,w
  5096  0ED5  1D03               	skipz
  5097  0ED6  2ED9               	goto	u3225
  5098  0ED7  0871               	movf	___awdiv@divisor,w
  5099  0ED8  0273               	subwf	___awdiv@dividend,w
  5100  0ED9                     u3225:	
  5101  0ED9  1C03               	skipc
  5102  0EDA  2EE0               	goto	l3664
  5103  0EDB  0871               	movf	___awdiv@divisor,w
  5104  0EDC  02F3               	subwf	___awdiv@dividend,f
  5105  0EDD  0872               	movf	___awdiv@divisor+1,w
  5106  0EDE  3BF4               	subwfb	___awdiv@dividend+1,f
  5107  0EDF  1478               	bsf	___awdiv@quotient,0
  5108  0EE0                     l3664:	
  5109  0EE0  3001               	movlw	1
  5110  0EE1                     u3235:	
  5111  0EE1  36F2               	lsrf	___awdiv@divisor+1,f
  5112  0EE2  0CF1               	rrf	___awdiv@divisor,f
  5113  0EE3  0B89               	decfsz	9,f
  5114  0EE4  2EE1               	goto	u3235
  5115  0EE5  3001               	movlw	1
  5116  0EE6  02F6               	subwf	___awdiv@counter,f
  5117  0EE7  1D03               	btfss	3,2
  5118  0EE8  2ECE               	goto	l3658
  5119  0EE9                     l3668:	
  5120  0EE9  0877               	movf	___awdiv@sign,w
  5121  0EEA  1903               	btfsc	3,2
  5122  0EEB  2EF1               	goto	l3672
  5123  0EEC  09F8               	comf	___awdiv@quotient,f
  5124  0EED  09F9               	comf	___awdiv@quotient+1,f
  5125  0EEE  0AF8               	incf	___awdiv@quotient,f
  5126  0EEF  1903               	skipnz
  5127  0EF0  0AF9               	incf	___awdiv@quotient+1,f
  5128  0EF1                     l3672:	
  5129  0EF1  0879               	movf	___awdiv@quotient+1,w
  5130  0EF2  01F2               	clrf	?___awdiv+1
  5131  0EF3  07F2               	addwf	?___awdiv+1,f
  5132  0EF4  0878               	movf	___awdiv@quotient,w
  5133  0EF5  01F1               	clrf	?___awdiv
  5134  0EF6  07F1               	addwf	?___awdiv,f
  5135  0EF7  0008               	return
  5136  0EF8                     __end_of___awdiv:	
  5137                           
  5138                           	psect	text21
  5139  0650                     __ptext21:	
  5140 ;; *************** function _ftoa *****************
  5141 ;; Defined at:
  5142 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftoa.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  f               3   39[BANK0 ] float 
  5145 ;;  status          1   42[BANK0 ] PTR int 
  5146 ;;		 -> RTXUpdateDisplay@status(2), 
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;  l               4   48[BANK0 ] unsigned long 
  5149 ;;  rem             4   44[BANK0 ] unsigned long 
  5150 ;;  cp              1   52[BANK0 ] PTR unsigned char 
  5151 ;;		 -> ftoa@buf(17), 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      PTR unsigned char 
  5154 ;; Registers used:
  5155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5161 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;Total ram usage:       14 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    5
  5168 ;; This function calls:
  5169 ;;		_sprintf
  5170 ;;		___ftge
  5171 ;;		___ftmul
  5172 ;;		___ftneg
  5173 ;;		___ftsub
  5174 ;;		___fttol
  5175 ;;		___lltoft
  5176 ;; This function is called by:
  5177 ;;		_RTXUpdateDisplay
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           
  5182                           ;psect for function _ftoa
  5183  0650                     _ftoa:	
  5184                           
  5185                           ;incstack = 0
  5186                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5187  0650  3020               	movlw	ftoa@buf& (0+255)
  5188  0651  0020               	movlb	0	; select bank0
  5189  0652  00CB               	movwf	??_ftoa
  5190  0653  084B               	movf	??_ftoa,w
  5191  0654  00D4               	movwf	ftoa@cp
  5192  0655  0847               	movf	ftoa@f,w
  5193  0656  00F1               	movwf	?___ftge
  5194  0657  0848               	movf	ftoa@f+1,w
  5195  0658  00F2               	movwf	?___ftge+1
  5196  0659  0849               	movf	ftoa@f+2,w
  5197  065A  00F3               	movwf	?___ftge+2
  5198  065B  3000               	movlw	0
  5199  065C  00F4               	movwf	?___ftge+3
  5200  065D  3000               	movlw	0
  5201  065E  00F5               	movwf	?___ftge+4
  5202  065F  3000               	movlw	0
  5203  0660  00F6               	movwf	?___ftge+5
  5204  0661  318C  24BF  3186   	fcall	___ftge
  5205  0664  1803               	btfsc	3,0
  5206  0665  2E83               	goto	l4452
  5207  0666  302D               	movlw	45
  5208  0667  0020               	movlb	0	; select bank0
  5209  0668  00CB               	movwf	??_ftoa
  5210  0669  0854               	movf	ftoa@cp,w
  5211  066A  0086               	movwf	6
  5212  066B  3001               	movlw	1	; select bank2/3
  5213  066C  0087               	movwf	7
  5214  066D  084B               	movf	??_ftoa,w
  5215  066E  0081               	movwf	1
  5216  066F  3001               	movlw	1
  5217  0670  00CB               	movwf	??_ftoa
  5218  0671  084B               	movf	??_ftoa,w
  5219  0672  07D4               	addwf	ftoa@cp,f
  5220  0673  0847               	movf	ftoa@f,w
  5221  0674  00F1               	movwf	?___ftneg
  5222  0675  0848               	movf	ftoa@f+1,w
  5223  0676  00F2               	movwf	?___ftneg+1
  5224  0677  0849               	movf	ftoa@f+2,w
  5225  0678  00F3               	movwf	?___ftneg+2
  5226  0679  3188  2061  3186   	fcall	___ftneg
  5227  067C  0871               	movf	?___ftneg,w
  5228  067D  0020               	movlb	0	; select bank0
  5229  067E  00C7               	movwf	ftoa@f
  5230  067F  0872               	movf	?___ftneg+1,w
  5231  0680  00C8               	movwf	ftoa@f+1
  5232  0681  0873               	movf	?___ftneg+2,w
  5233  0682  00C9               	movwf	ftoa@f+2
  5234  0683                     l4452:	
  5235  0683  0020               	movlb	0	; select bank0
  5236  0684  0847               	movf	ftoa@f,w
  5237  0685  00B0               	movwf	?___fttol
  5238  0686  0848               	movf	ftoa@f+1,w
  5239  0687  00B1               	movwf	?___fttol+1
  5240  0688  0849               	movf	ftoa@f+2,w
  5241  0689  00B2               	movwf	?___fttol+2
  5242  068A  3186  26F3  3186   	fcall	___fttol
  5243  068D  0020               	movlb	0	; select bank0
  5244  068E  0833               	movf	?___fttol+3,w
  5245  068F  00D3               	movwf	ftoa@l+3
  5246  0690  0832               	movf	?___fttol+2,w
  5247  0691  00D2               	movwf	ftoa@l+2
  5248  0692  0831               	movf	?___fttol+1,w
  5249  0693  00D1               	movwf	ftoa@l+1
  5250  0694  0830               	movf	?___fttol,w
  5251  0695  00D0               	movwf	ftoa@l
  5252  0696  0853               	movf	ftoa@l+3,w
  5253  0697  00A3               	movwf	?___lltoft+3
  5254  0698  0852               	movf	ftoa@l+2,w
  5255  0699  00A2               	movwf	?___lltoft+2
  5256  069A  0851               	movf	ftoa@l+1,w
  5257  069B  00A1               	movwf	?___lltoft+1
  5258  069C  0850               	movf	ftoa@l,w
  5259  069D  00A0               	movwf	?___lltoft
  5260  069E  318B  23D7  3186   	fcall	___lltoft
  5261  06A1  0020               	movlb	0	; select bank0
  5262  06A2  0820               	movf	?___lltoft,w
  5263  06A3  00AA               	movwf	?___ftsub
  5264  06A4  0821               	movf	?___lltoft+1,w
  5265  06A5  00AB               	movwf	?___ftsub+1
  5266  06A6  0822               	movf	?___lltoft+2,w
  5267  06A7  00AC               	movwf	?___ftsub+2
  5268  06A8  0847               	movf	ftoa@f,w
  5269  06A9  00AD               	movwf	?___ftsub+3
  5270  06AA  0848               	movf	ftoa@f+1,w
  5271  06AB  00AE               	movwf	?___ftsub+4
  5272  06AC  0849               	movf	ftoa@f+2,w
  5273  06AD  00AF               	movwf	?___ftsub+5
  5274  06AE  3189  21DF  3186   	fcall	___ftsub
  5275  06B1  0020               	movlb	0	; select bank0
  5276  06B2  082A               	movf	?___ftsub,w
  5277  06B3  00C7               	movwf	ftoa@f
  5278  06B4  082B               	movf	?___ftsub+1,w
  5279  06B5  00C8               	movwf	ftoa@f+1
  5280  06B6  082C               	movf	?___ftsub+2,w
  5281  06B7  00C9               	movwf	ftoa@f+2
  5282  06B8  0847               	movf	ftoa@f,w
  5283  06B9  00A3               	movwf	?___ftmul+3
  5284  06BA  0848               	movf	ftoa@f+1,w
  5285  06BB  00A4               	movwf	?___ftmul+4
  5286  06BC  0849               	movf	ftoa@f+2,w
  5287  06BD  00A5               	movwf	?___ftmul+5
  5288  06BE  3024               	movlw	36
  5289  06BF  00A0               	movwf	?___ftmul
  5290  06C0  3074               	movlw	116
  5291  06C1  00A1               	movwf	?___ftmul+1
  5292  06C2  3049               	movlw	73
  5293  06C3  00A2               	movwf	?___ftmul+2
  5294  06C4  3185  259C  3186   	fcall	___ftmul
  5295  06C7  0020               	movlb	0	; select bank0
  5296  06C8  0820               	movf	?___ftmul,w
  5297  06C9  00B0               	movwf	?___fttol
  5298  06CA  0821               	movf	?___ftmul+1,w
  5299  06CB  00B1               	movwf	?___fttol+1
  5300  06CC  0822               	movf	?___ftmul+2,w
  5301  06CD  00B2               	movwf	?___fttol+2
  5302  06CE  3186  26F3  3186   	fcall	___fttol
  5303  06D1  0020               	movlb	0	; select bank0
  5304  06D2  0833               	movf	?___fttol+3,w
  5305  06D3  00CF               	movwf	ftoa@rem+3
  5306  06D4  0832               	movf	?___fttol+2,w
  5307  06D5  00CE               	movwf	ftoa@rem+2
  5308  06D6  0831               	movf	?___fttol+1,w
  5309  06D7  00CD               	movwf	ftoa@rem+1
  5310  06D8  0830               	movf	?___fttol,w
  5311  06D9  00CC               	movwf	ftoa@rem
  5312  06DA  302E               	movlw	(STR_1| (0+32768))& (0+255)
  5313  06DB  00CB               	movwf	??_ftoa
  5314  06DC  084B               	movf	??_ftoa,w
  5315  06DD  00AD               	movwf	?_sprintf
  5316  06DE  0853               	movf	ftoa@l+3,w
  5317  06DF  00B1               	movwf	?_sprintf+4
  5318  06E0  0852               	movf	ftoa@l+2,w
  5319  06E1  00B0               	movwf	?_sprintf+3
  5320  06E2  0851               	movf	ftoa@l+1,w
  5321  06E3  00AF               	movwf	?_sprintf+2
  5322  06E4  0850               	movf	ftoa@l,w
  5323  06E5  00AE               	movwf	?_sprintf+1
  5324  06E6  084F               	movf	ftoa@rem+3,w
  5325  06E7  00B5               	movwf	?_sprintf+8
  5326  06E8  084E               	movf	ftoa@rem+2,w
  5327  06E9  00B4               	movwf	?_sprintf+7
  5328  06EA  084D               	movf	ftoa@rem+1,w
  5329  06EB  00B3               	movwf	?_sprintf+6
  5330  06EC  084C               	movf	ftoa@rem,w
  5331  06ED  00B2               	movwf	?_sprintf+5
  5332  06EE  0854               	movf	ftoa@cp,w
  5333  06EF  3180  2046         	fcall	_sprintf
  5334  06F1  3020               	movlw	ftoa@buf& (0+255)
  5335  06F2  0008               	return
  5336  06F3                     __end_of_ftoa:	
  5337                           
  5338                           	psect	text22
  5339  0BD7                     __ptext22:	
  5340 ;; *************** function ___lltoft *****************
  5341 ;; Defined at:
  5342 ;;		line 36 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lltoft.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  c               4    0[BANK0 ] unsigned long 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  exp             1   10[COMMON] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  3    0[BANK0 ] float 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0, pclath, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5356 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;Total ram usage:        6 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    3
  5363 ;; This function calls:
  5364 ;;		___ftpack
  5365 ;; This function is called by:
  5366 ;;		_ftoa
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function ___lltoft
  5372  0BD7                     ___lltoft:	
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  5376  0BD7  308E               	movlw	142
  5377  0BD8  00F9               	movwf	??___lltoft
  5378  0BD9  0879               	movf	??___lltoft,w
  5379  0BDA  00FA               	movwf	___lltoft@exp
  5380  0BDB                     l4716:	
  5381  0BDB  30FF               	movlw	255
  5382  0BDC  0020               	movlb	0	; select bank0
  5383  0BDD  0523               	andwf	___lltoft@c+3,w
  5384  0BDE  1903               	btfsc	3,2
  5385  0BDF  2BED               	goto	l4718
  5386  0BE0  3001               	movlw	1
  5387  0BE1                     u5015:	
  5388  0BE1  0020               	movlb	0	; select bank0
  5389  0BE2  36A3               	lsrf	___lltoft@c+3,f
  5390  0BE3  0CA2               	rrf	___lltoft@c+2,f
  5391  0BE4  0CA1               	rrf	___lltoft@c+1,f
  5392  0BE5  0CA0               	rrf	___lltoft@c,f
  5393  0BE6  0B89               	decfsz	9,f
  5394  0BE7  2BE1               	goto	u5015
  5395  0BE8  3001               	movlw	1
  5396  0BE9  00F9               	movwf	??___lltoft
  5397  0BEA  0879               	movf	??___lltoft,w
  5398  0BEB  07FA               	addwf	___lltoft@exp,f
  5399  0BEC  2BDB               	goto	l4716
  5400  0BED                     l4718:	
  5401  0BED  0820               	movf	___lltoft@c,w
  5402  0BEE  00F1               	movwf	?___ftpack
  5403  0BEF  0821               	movf	___lltoft@c+1,w
  5404  0BF0  00F2               	movwf	?___ftpack+1
  5405  0BF1  0822               	movf	___lltoft@c+2,w
  5406  0BF2  00F3               	movwf	?___ftpack+2
  5407  0BF3  087A               	movf	___lltoft@exp,w
  5408  0BF4  00F9               	movwf	??___lltoft
  5409  0BF5  0879               	movf	??___lltoft,w
  5410  0BF6  00F4               	movwf	?___ftpack+3
  5411  0BF7  01F5               	clrf	?___ftpack+4
  5412  0BF8  3187  277A         	fcall	___ftpack
  5413  0BFA  0871               	movf	?___ftpack,w
  5414  0BFB  0020               	movlb	0	; select bank0
  5415  0BFC  00A0               	movwf	?___lltoft
  5416  0BFD  0872               	movf	?___ftpack+1,w
  5417  0BFE  00A1               	movwf	?___lltoft+1
  5418  0BFF  0873               	movf	?___ftpack+2,w
  5419  0C00  00A2               	movwf	?___lltoft+2
  5420  0C01  0008               	return
  5421  0C02                     __end_of___lltoft:	
  5422                           
  5423                           	psect	text23
  5424  06F3                     __ptext23:	
  5425 ;; *************** function ___fttol *****************
  5426 ;; Defined at:
  5427 ;;		line 45 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\fttol.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;  f1              3   16[BANK0 ] float 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  lval            4   25[BANK0 ] unsigned long 
  5432 ;;  exp1            1   29[BANK0 ] unsigned char 
  5433 ;;  sign1           1   24[BANK0 ] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  4   16[BANK0 ] long 
  5436 ;; Registers used:
  5437 ;;		wreg, status,2, status,0
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5446 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5447 ;;Total ram usage:       14 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    2
  5450 ;; This function calls:
  5451 ;;		Nothing
  5452 ;; This function is called by:
  5453 ;;		_ftoa
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           
  5458                           ;psect for function ___fttol
  5459  06F3                     ___fttol:	
  5460                           
  5461                           ;incstack = 0
  5462                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5463  06F3  0020               	movlb	0	; select bank0
  5464  06F4  0830               	movf	___fttol@f1,w
  5465  06F5  00B4               	movwf	??___fttol
  5466  06F6  0831               	movf	___fttol@f1+1,w
  5467  06F7  00B5               	movwf	??___fttol+1
  5468  06F8  0832               	movf	___fttol@f1+2,w
  5469  06F9  00B6               	movwf	??___fttol+2
  5470  06FA  1003               	clrc
  5471  06FB  0D35               	rlf	??___fttol+1,w
  5472  06FC  0D36               	rlf	??___fttol+2,w
  5473  06FD  00B7               	movwf	??___fttol+3
  5474  06FE  0837               	movf	??___fttol+3,w
  5475  06FF  00BD               	movwf	___fttol@exp1
  5476  0700  08BD               	movf	___fttol@exp1,f
  5477  0701  1D03               	skipz
  5478  0702  2F0C               	goto	l3838
  5479  0703  3000               	movlw	0
  5480  0704  00B3               	movwf	?___fttol+3
  5481  0705  3000               	movlw	0
  5482  0706  00B2               	movwf	?___fttol+2
  5483  0707  3000               	movlw	0
  5484  0708  00B1               	movwf	?___fttol+1
  5485  0709  3000               	movlw	0
  5486  070A  00B0               	movwf	?___fttol
  5487  070B  0008               	return
  5488  070C                     l3838:	
  5489  070C  0830               	movf	___fttol@f1,w
  5490  070D  00B4               	movwf	??___fttol
  5491  070E  0831               	movf	___fttol@f1+1,w
  5492  070F  00B5               	movwf	??___fttol+1
  5493  0710  0832               	movf	___fttol@f1+2,w
  5494  0711  00B6               	movwf	??___fttol+2
  5495  0712  3017               	movlw	23
  5496  0713                     u3665:	
  5497  0713  36B6               	lsrf	??___fttol+2,f
  5498  0714  0CB5               	rrf	??___fttol+1,f
  5499  0715  0CB4               	rrf	??___fttol,f
  5500  0716  0B89               	decfsz	9,f
  5501  0717  2F13               	goto	u3665
  5502  0718  0834               	movf	??___fttol,w
  5503  0719  00B7               	movwf	??___fttol+3
  5504  071A  0837               	movf	??___fttol+3,w
  5505  071B  00B8               	movwf	___fttol@sign1
  5506  071C  17B1               	bsf	___fttol@f1+1,7
  5507  071D  30FF               	movlw	255
  5508  071E  05B0               	andwf	___fttol@f1,f
  5509  071F  30FF               	movlw	255
  5510  0720  05B1               	andwf	___fttol@f1+1,f
  5511  0721  3000               	movlw	0
  5512  0722  05B2               	andwf	___fttol@f1+2,f
  5513  0723  0830               	movf	___fttol@f1,w
  5514  0724  00B9               	movwf	___fttol@lval
  5515  0725  0831               	movf	___fttol@f1+1,w
  5516  0726  00BA               	movwf	___fttol@lval+1
  5517  0727  0832               	movf	___fttol@f1+2,w
  5518  0728  00BB               	movwf	___fttol@lval+2
  5519  0729  01BC               	clrf	___fttol@lval+3
  5520  072A  308E               	movlw	142
  5521  072B  02BD               	subwf	___fttol@exp1,f
  5522  072C  1FBD               	btfss	___fttol@exp1,7
  5523  072D  2F4A               	goto	l3858
  5524  072E  083D               	movf	___fttol@exp1,w
  5525  072F  3A80               	xorlw	128
  5526  0730  3E8F               	addlw	143
  5527  0731  1803               	skipnc
  5528  0732  2F3C               	goto	l3856
  5529  0733  3000               	movlw	0
  5530  0734  00B3               	movwf	?___fttol+3
  5531  0735  3000               	movlw	0
  5532  0736  00B2               	movwf	?___fttol+2
  5533  0737  3000               	movlw	0
  5534  0738  00B1               	movwf	?___fttol+1
  5535  0739  3000               	movlw	0
  5536  073A  00B0               	movwf	?___fttol
  5537  073B  0008               	return
  5538  073C                     l3856:	
  5539  073C  3001               	movlw	1
  5540  073D                     u3695:	
  5541  073D  36BC               	lsrf	___fttol@lval+3,f
  5542  073E  0CBB               	rrf	___fttol@lval+2,f
  5543  073F  0CBA               	rrf	___fttol@lval+1,f
  5544  0740  0CB9               	rrf	___fttol@lval,f
  5545  0741  0B89               	decfsz	9,f
  5546  0742  2F3D               	goto	u3695
  5547  0743  3001               	movlw	1
  5548  0744  00B4               	movwf	??___fttol
  5549  0745  0834               	movf	??___fttol,w
  5550  0746  07BD               	addwf	___fttol@exp1,f
  5551  0747  1903               	btfsc	3,2
  5552  0748  2F63               	goto	l3868
  5553  0749  2F3C               	goto	l3856
  5554  074A                     l3858:	
  5555  074A  3018               	movlw	24
  5556  074B  023D               	subwf	___fttol@exp1,w
  5557  074C  1C03               	skipc
  5558  074D  2F60               	goto	l3866
  5559  074E  3000               	movlw	0
  5560  074F  00B3               	movwf	?___fttol+3
  5561  0750  3000               	movlw	0
  5562  0751  00B2               	movwf	?___fttol+2
  5563  0752  3000               	movlw	0
  5564  0753  00B1               	movwf	?___fttol+1
  5565  0754  3000               	movlw	0
  5566  0755  00B0               	movwf	?___fttol
  5567  0756  0008               	return
  5568  0757                     l3864:	
  5569  0757  3001               	movlw	1
  5570  0758                     u3725:	
  5571  0758  35B9               	lslf	___fttol@lval,f
  5572  0759  0DBA               	rlf	___fttol@lval+1,f
  5573  075A  0DBB               	rlf	___fttol@lval+2,f
  5574  075B  0DBC               	rlf	___fttol@lval+3,f
  5575  075C  0B89               	decfsz	9,f
  5576  075D  2F58               	goto	u3725
  5577  075E  3001               	movlw	1
  5578  075F  02BD               	subwf	___fttol@exp1,f
  5579  0760                     l3866:	
  5580  0760  08BD               	movf	___fttol@exp1,f
  5581  0761  1D03               	skipz
  5582  0762  2F57               	goto	l3864
  5583  0763                     l3868:	
  5584  0763  0838               	movf	___fttol@sign1,w
  5585  0764  1903               	btfsc	3,2
  5586  0765  2F71               	goto	l3872
  5587  0766  09B9               	comf	___fttol@lval,f
  5588  0767  09BA               	comf	___fttol@lval+1,f
  5589  0768  09BB               	comf	___fttol@lval+2,f
  5590  0769  09BC               	comf	___fttol@lval+3,f
  5591  076A  0AB9               	incf	___fttol@lval,f
  5592  076B  1903               	skipnz
  5593  076C  0ABA               	incf	___fttol@lval+1,f
  5594  076D  1903               	skipnz
  5595  076E  0ABB               	incf	___fttol@lval+2,f
  5596  076F  1903               	skipnz
  5597  0770  0ABC               	incf	___fttol@lval+3,f
  5598  0771                     l3872:	
  5599  0771  083C               	movf	___fttol@lval+3,w
  5600  0772  00B3               	movwf	?___fttol+3
  5601  0773  083B               	movf	___fttol@lval+2,w
  5602  0774  00B2               	movwf	?___fttol+2
  5603  0775  083A               	movf	___fttol@lval+1,w
  5604  0776  00B1               	movwf	?___fttol+1
  5605  0777  0839               	movf	___fttol@lval,w
  5606  0778  00B0               	movwf	?___fttol
  5607  0779  0008               	return
  5608  077A                     __end_of___fttol:	
  5609                           
  5610                           	psect	text24
  5611  09DF                     __ptext24:	
  5612 ;; *************** function ___ftsub *****************
  5613 ;; Defined at:
  5614 ;;		line 17 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftsub.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;  f2              3   10[BANK0 ] float 
  5617 ;;  f1              3   13[BANK0 ] float 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  3   10[BANK0 ] float 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2, status,0, pclath, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5629 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;Total ram usage:        6 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    4
  5636 ;; This function calls:
  5637 ;;		___ftadd
  5638 ;; This function is called by:
  5639 ;;		_ftoa
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           
  5644                           ;psect for function ___ftsub
  5645  09DF                     ___ftsub:	
  5646                           
  5647                           ;incstack = 0
  5648                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5649  09DF  3080               	movlw	128
  5650  09E0  0020               	movlb	0	; select bank0
  5651  09E1  06AC               	xorwf	___ftsub@f2+2,f
  5652  09E2  082D               	movf	___ftsub@f1,w
  5653  09E3  00A0               	movwf	?___ftadd
  5654  09E4  082E               	movf	___ftsub@f1+1,w
  5655  09E5  00A1               	movwf	?___ftadd+1
  5656  09E6  082F               	movf	___ftsub@f1+2,w
  5657  09E7  00A2               	movwf	?___ftadd+2
  5658  09E8  082A               	movf	___ftsub@f2,w
  5659  09E9  00A3               	movwf	?___ftadd+3
  5660  09EA  082B               	movf	___ftsub@f2+1,w
  5661  09EB  00A4               	movwf	?___ftadd+4
  5662  09EC  082C               	movf	___ftsub@f2+2,w
  5663  09ED  00A5               	movwf	?___ftadd+5
  5664  09EE  3183  23E8         	fcall	___ftadd
  5665  09F0  0020               	movlb	0	; select bank0
  5666  09F1  0820               	movf	?___ftadd,w
  5667  09F2  00AA               	movwf	?___ftsub
  5668  09F3  0821               	movf	?___ftadd+1,w
  5669  09F4  00AB               	movwf	?___ftsub+1
  5670  09F5  0822               	movf	?___ftadd+2,w
  5671  09F6  00AC               	movwf	?___ftsub+2
  5672  09F7  0008               	return
  5673  09F8                     __end_of___ftsub:	
  5674                           
  5675                           	psect	text25
  5676  03E8                     __ptext25:	
  5677 ;; *************** function ___ftadd *****************
  5678 ;; Defined at:
  5679 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  f1              3    0[BANK0 ] float 
  5682 ;;  f2              3    3[BANK0 ] float 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  exp1            1   11[COMMON] unsigned char 
  5685 ;;  exp2            1   10[COMMON] unsigned char 
  5686 ;;  sign            1    9[COMMON] unsigned char 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  3    0[BANK0 ] float 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, pclath, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5696 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5697 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;Total ram usage:       13 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    3
  5703 ;; This function calls:
  5704 ;;		___ftpack
  5705 ;; This function is called by:
  5706 ;;		___ftsub
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function ___ftadd
  5712  03E8                     ___ftadd:	
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5716  03E8  0020               	movlb	0	; select bank0
  5717  03E9  0820               	movf	___ftadd@f1,w
  5718  03EA  00A6               	movwf	??___ftadd
  5719  03EB  0821               	movf	___ftadd@f1+1,w
  5720  03EC  00A7               	movwf	??___ftadd+1
  5721  03ED  0822               	movf	___ftadd@f1+2,w
  5722  03EE  00A8               	movwf	??___ftadd+2
  5723  03EF  1003               	clrc
  5724  03F0  0D27               	rlf	??___ftadd+1,w
  5725  03F1  0D28               	rlf	??___ftadd+2,w
  5726  03F2  00A9               	movwf	??___ftadd+3
  5727  03F3  0829               	movf	??___ftadd+3,w
  5728  03F4  00FB               	movwf	___ftadd@exp1
  5729  03F5  0823               	movf	___ftadd@f2,w
  5730  03F6  00A6               	movwf	??___ftadd
  5731  03F7  0824               	movf	___ftadd@f2+1,w
  5732  03F8  00A7               	movwf	??___ftadd+1
  5733  03F9  0825               	movf	___ftadd@f2+2,w
  5734  03FA  00A8               	movwf	??___ftadd+2
  5735  03FB  1003               	clrc
  5736  03FC  0D27               	rlf	??___ftadd+1,w
  5737  03FD  0D28               	rlf	??___ftadd+2,w
  5738  03FE  00A9               	movwf	??___ftadd+3
  5739  03FF  0829               	movf	??___ftadd+3,w
  5740  0400  00FA               	movwf	___ftadd@exp2
  5741  0401  087B               	movf	___ftadd@exp1,w
  5742  0402  1903               	btfsc	3,2
  5743  0403  2C10               	goto	l4588
  5744  0404  087A               	movf	___ftadd@exp2,w
  5745  0405  027B               	subwf	___ftadd@exp1,w
  5746  0406  1803               	skipnc
  5747  0407  2C17               	goto	l4592
  5748  0408  037B               	decf	___ftadd@exp1,w
  5749  0409  3AFF               	xorlw	255
  5750  040A  077A               	addwf	___ftadd@exp2,w
  5751  040B  00A6               	movwf	??___ftadd
  5752  040C  3019               	movlw	25
  5753  040D  0226               	subwf	??___ftadd,w
  5754  040E  1C03               	skipc
  5755  040F  2C17               	goto	l4592
  5756  0410                     l4588:	
  5757  0410  0823               	movf	___ftadd@f2,w
  5758  0411  00A0               	movwf	?___ftadd
  5759  0412  0824               	movf	___ftadd@f2+1,w
  5760  0413  00A1               	movwf	?___ftadd+1
  5761  0414  0825               	movf	___ftadd@f2+2,w
  5762  0415  00A2               	movwf	?___ftadd+2
  5763  0416  0008               	return
  5764  0417                     l4592:	
  5765  0417  087A               	movf	___ftadd@exp2,w
  5766  0418  1903               	btfsc	3,2
  5767  0419  0008               	return
  5768  041A  087B               	movf	___ftadd@exp1,w
  5769  041B  027A               	subwf	___ftadd@exp2,w
  5770  041C  1803               	skipnc
  5771  041D  2C26               	goto	l4598
  5772  041E  037A               	decf	___ftadd@exp2,w
  5773  041F  3AFF               	xorlw	255
  5774  0420  077B               	addwf	___ftadd@exp1,w
  5775  0421  00A6               	movwf	??___ftadd
  5776  0422  3019               	movlw	25
  5777  0423  0226               	subwf	??___ftadd,w
  5778  0424  1803               	btfsc	3,0
  5779  0425  0008               	return
  5780  0426                     l4598:	
  5781  0426  3006               	movlw	6
  5782  0427  00A6               	movwf	??___ftadd
  5783  0428  0826               	movf	??___ftadd,w
  5784  0429  00F9               	movwf	___ftadd@sign
  5785  042A  1BA2               	btfsc	___ftadd@f1+2,7
  5786  042B  17F9               	bsf	___ftadd@sign,7
  5787  042C  1BA5               	btfsc	___ftadd@f2+2,7
  5788  042D  1779               	bsf	___ftadd@sign,6
  5789  042E  17A1               	bsf	___ftadd@f1+1,7
  5790  042F  30FF               	movlw	255
  5791  0430  05A0               	andwf	___ftadd@f1,f
  5792  0431  30FF               	movlw	255
  5793  0432  05A1               	andwf	___ftadd@f1+1,f
  5794  0433  3000               	movlw	0
  5795  0434  05A2               	andwf	___ftadd@f1+2,f
  5796  0435  17A4               	bsf	___ftadd@f2+1,7
  5797  0436  30FF               	movlw	255
  5798  0437  05A3               	andwf	___ftadd@f2,f
  5799  0438  30FF               	movlw	255
  5800  0439  05A4               	andwf	___ftadd@f2+1,f
  5801  043A  3000               	movlw	0
  5802  043B  05A5               	andwf	___ftadd@f2+2,f
  5803  043C  087A               	movf	___ftadd@exp2,w
  5804  043D  027B               	subwf	___ftadd@exp1,w
  5805  043E  1803               	skipnc
  5806  043F  2C62               	goto	l4620
  5807  0440                     l4610:	
  5808  0440  3001               	movlw	1
  5809  0441                     u4755:	
  5810  0441  35A3               	lslf	___ftadd@f2,f
  5811  0442  0DA4               	rlf	___ftadd@f2+1,f
  5812  0443  0DA5               	rlf	___ftadd@f2+2,f
  5813  0444  0B89               	decfsz	9,f
  5814  0445  2C41               	goto	u4755
  5815  0446  3001               	movlw	1
  5816  0447  02FA               	subwf	___ftadd@exp2,f
  5817  0448  087A               	movf	___ftadd@exp2,w
  5818  0449  067B               	xorwf	___ftadd@exp1,w
  5819  044A  1903               	skipnz
  5820  044B  2C5D               	goto	l4618
  5821  044C  3001               	movlw	1
  5822  044D  02F9               	subwf	___ftadd@sign,f
  5823  044E  0879               	movf	___ftadd@sign,w
  5824  044F  3907               	andlw	7
  5825  0450  1903               	btfsc	3,2
  5826  0451  2C5D               	goto	l4618
  5827  0452  2C40               	goto	l4610
  5828  0453                     l4616:	
  5829  0453  3001               	movlw	1
  5830  0454                     u4785:	
  5831  0454  36A2               	lsrf	___ftadd@f1+2,f
  5832  0455  0CA1               	rrf	___ftadd@f1+1,f
  5833  0456  0CA0               	rrf	___ftadd@f1,f
  5834  0457  0B89               	decfsz	9,f
  5835  0458  2C54               	goto	u4785
  5836  0459  3001               	movlw	1
  5837  045A  00A6               	movwf	??___ftadd
  5838  045B  0826               	movf	??___ftadd,w
  5839  045C  07FB               	addwf	___ftadd@exp1,f
  5840  045D                     l4618:	
  5841  045D  087B               	movf	___ftadd@exp1,w
  5842  045E  067A               	xorwf	___ftadd@exp2,w
  5843  045F  1903               	btfsc	3,2
  5844  0460  2C87               	goto	l858
  5845  0461  2C53               	goto	l4616
  5846  0462                     l4620:	
  5847  0462  087B               	movf	___ftadd@exp1,w
  5848  0463  027A               	subwf	___ftadd@exp2,w
  5849  0464  1803               	skipnc
  5850  0465  2C87               	goto	l858
  5851  0466                     l4622:	
  5852  0466  3001               	movlw	1
  5853  0467                     u4815:	
  5854  0467  35A0               	lslf	___ftadd@f1,f
  5855  0468  0DA1               	rlf	___ftadd@f1+1,f
  5856  0469  0DA2               	rlf	___ftadd@f1+2,f
  5857  046A  0B89               	decfsz	9,f
  5858  046B  2C67               	goto	u4815
  5859  046C  3001               	movlw	1
  5860  046D  02FB               	subwf	___ftadd@exp1,f
  5861  046E  087A               	movf	___ftadd@exp2,w
  5862  046F  067B               	xorwf	___ftadd@exp1,w
  5863  0470  1903               	skipnz
  5864  0471  2C83               	goto	l4630
  5865  0472  3001               	movlw	1
  5866  0473  02F9               	subwf	___ftadd@sign,f
  5867  0474  0879               	movf	___ftadd@sign,w
  5868  0475  3907               	andlw	7
  5869  0476  1903               	btfsc	3,2
  5870  0477  2C83               	goto	l4630
  5871  0478  2C66               	goto	l4622
  5872  0479                     l4628:	
  5873  0479  3001               	movlw	1
  5874  047A                     u4845:	
  5875  047A  36A5               	lsrf	___ftadd@f2+2,f
  5876  047B  0CA4               	rrf	___ftadd@f2+1,f
  5877  047C  0CA3               	rrf	___ftadd@f2,f
  5878  047D  0B89               	decfsz	9,f
  5879  047E  2C7A               	goto	u4845
  5880  047F  3001               	movlw	1
  5881  0480  00A6               	movwf	??___ftadd
  5882  0481  0826               	movf	??___ftadd,w
  5883  0482  07FA               	addwf	___ftadd@exp2,f
  5884  0483                     l4630:	
  5885  0483  087B               	movf	___ftadd@exp1,w
  5886  0484  067A               	xorwf	___ftadd@exp2,w
  5887  0485  1D03               	skipz
  5888  0486  2C79               	goto	l4628
  5889  0487                     l858:	
  5890  0487  1FF9               	btfss	___ftadd@sign,7
  5891  0488  2C99               	goto	l4634
  5892  0489  30FF               	movlw	255
  5893  048A  06A0               	xorwf	___ftadd@f1,f
  5894  048B  30FF               	movlw	255
  5895  048C  06A1               	xorwf	___ftadd@f1+1,f
  5896  048D  30FF               	movlw	255
  5897  048E  06A2               	xorwf	___ftadd@f1+2,f
  5898  048F  3001               	movlw	1
  5899  0490  07A0               	addwf	___ftadd@f1,f
  5900  0491  3000               	movlw	0
  5901  0492  1803               	skipnc
  5902  0493  3001               	movlw	1
  5903  0494  07A1               	addwf	___ftadd@f1+1,f
  5904  0495  3000               	movlw	0
  5905  0496  1803               	skipnc
  5906  0497  3001               	movlw	1
  5907  0498  07A2               	addwf	___ftadd@f1+2,f
  5908  0499                     l4634:	
  5909  0499  1F79               	btfss	___ftadd@sign,6
  5910  049A  2CAB               	goto	l4638
  5911  049B  30FF               	movlw	255
  5912  049C  06A3               	xorwf	___ftadd@f2,f
  5913  049D  30FF               	movlw	255
  5914  049E  06A4               	xorwf	___ftadd@f2+1,f
  5915  049F  30FF               	movlw	255
  5916  04A0  06A5               	xorwf	___ftadd@f2+2,f
  5917  04A1  3001               	movlw	1
  5918  04A2  07A3               	addwf	___ftadd@f2,f
  5919  04A3  3000               	movlw	0
  5920  04A4  1803               	skipnc
  5921  04A5  3001               	movlw	1
  5922  04A6  07A4               	addwf	___ftadd@f2+1,f
  5923  04A7  3000               	movlw	0
  5924  04A8  1803               	skipnc
  5925  04A9  3001               	movlw	1
  5926  04AA  07A5               	addwf	___ftadd@f2+2,f
  5927  04AB                     l4638:	
  5928  04AB  01F9               	clrf	___ftadd@sign
  5929  04AC  0820               	movf	___ftadd@f1,w
  5930  04AD  07A3               	addwf	___ftadd@f2,f
  5931  04AE  0821               	movf	___ftadd@f1+1,w
  5932  04AF  3DA4               	addwfc	___ftadd@f2+1,f
  5933  04B0  0822               	movf	___ftadd@f1+2,w
  5934  04B1  3DA5               	addwfc	___ftadd@f2+2,f
  5935  04B2  1FA5               	btfss	___ftadd@f2+2,7
  5936  04B3  2CC6               	goto	l4648
  5937  04B4  30FF               	movlw	255
  5938  04B5  06A3               	xorwf	___ftadd@f2,f
  5939  04B6  30FF               	movlw	255
  5940  04B7  06A4               	xorwf	___ftadd@f2+1,f
  5941  04B8  30FF               	movlw	255
  5942  04B9  06A5               	xorwf	___ftadd@f2+2,f
  5943  04BA  3001               	movlw	1
  5944  04BB  07A3               	addwf	___ftadd@f2,f
  5945  04BC  3000               	movlw	0
  5946  04BD  1803               	skipnc
  5947  04BE  3001               	movlw	1
  5948  04BF  07A4               	addwf	___ftadd@f2+1,f
  5949  04C0  3000               	movlw	0
  5950  04C1  1803               	skipnc
  5951  04C2  3001               	movlw	1
  5952  04C3  07A5               	addwf	___ftadd@f2+2,f
  5953  04C4  01F9               	clrf	___ftadd@sign
  5954  04C5  0AF9               	incf	___ftadd@sign,f
  5955  04C6                     l4648:	
  5956  04C6  0823               	movf	___ftadd@f2,w
  5957  04C7  00F1               	movwf	?___ftpack
  5958  04C8  0824               	movf	___ftadd@f2+1,w
  5959  04C9  00F2               	movwf	?___ftpack+1
  5960  04CA  0825               	movf	___ftadd@f2+2,w
  5961  04CB  00F3               	movwf	?___ftpack+2
  5962  04CC  087B               	movf	___ftadd@exp1,w
  5963  04CD  00A6               	movwf	??___ftadd
  5964  04CE  0826               	movf	??___ftadd,w
  5965  04CF  00F4               	movwf	?___ftpack+3
  5966  04D0  0879               	movf	___ftadd@sign,w
  5967  04D1  00A7               	movwf	??___ftadd+1
  5968  04D2  0827               	movf	??___ftadd+1,w
  5969  04D3  00F5               	movwf	?___ftpack+4
  5970  04D4  3187  277A         	fcall	___ftpack
  5971  04D6  0871               	movf	?___ftpack,w
  5972  04D7  0020               	movlb	0	; select bank0
  5973  04D8  00A0               	movwf	?___ftadd
  5974  04D9  0872               	movf	?___ftpack+1,w
  5975  04DA  00A1               	movwf	?___ftadd+1
  5976  04DB  0873               	movf	?___ftpack+2,w
  5977  04DC  00A2               	movwf	?___ftadd+2
  5978  04DD  0008               	return
  5979  04DE                     __end_of___ftadd:	
  5980                           
  5981                           	psect	text26
  5982  0861                     __ptext26:	
  5983 ;; *************** function ___ftneg *****************
  5984 ;; Defined at:
  5985 ;;		line 16 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftneg.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  f1              3    1[COMMON] float 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;		None
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  3    1[COMMON] float 
  5992 ;; Registers used:
  5993 ;;		wreg
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5999 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;Total ram usage:        3 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    2
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_ftoa
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           
  6014                           ;psect for function ___ftneg
  6015  0861                     ___ftneg:	
  6016                           
  6017                           ;incstack = 0
  6018                           ; Regs used in ___ftneg: [wreg]
  6019  0861  0873               	movf	___ftneg@f1+2,w
  6020  0862  0472               	iorwf	___ftneg@f1+1,w
  6021  0863  0471               	iorwf	___ftneg@f1,w
  6022  0864  1903               	skipnz
  6023  0865  0008               	return
  6024  0866  3080               	movlw	128
  6025  0867  06F3               	xorwf	___ftneg@f1+2,f
  6026  0868  0008               	return
  6027  0869                     __end_of___ftneg:	
  6028                           
  6029                           	psect	text27
  6030  059C                     __ptext27:	
  6031 ;; *************** function ___ftmul *****************
  6032 ;; Defined at:
  6033 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  f1              3    0[BANK0 ] float 
  6036 ;;  f2              3    3[BANK0 ] float 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6039 ;;  sign            1   15[BANK0 ] unsigned char 
  6040 ;;  cntr            1   14[BANK0 ] unsigned char 
  6041 ;;  exp             1   10[BANK0 ] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  3    0[BANK0 ] float 
  6044 ;; Registers used:
  6045 ;;		wreg, status,2, status,0, pclath, cstack
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6051 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6053 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6054 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6055 ;;Total ram usage:       16 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    3
  6058 ;; This function calls:
  6059 ;;		___ftpack
  6060 ;; This function is called by:
  6061 ;;		_ftoa
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           
  6066                           ;psect for function ___ftmul
  6067  059C                     ___ftmul:	
  6068                           
  6069                           ;incstack = 0
  6070                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6071  059C  0020               	movlb	0	; select bank0
  6072  059D  0820               	movf	___ftmul@f1,w
  6073  059E  00A6               	movwf	??___ftmul
  6074  059F  0821               	movf	___ftmul@f1+1,w
  6075  05A0  00A7               	movwf	??___ftmul+1
  6076  05A1  0822               	movf	___ftmul@f1+2,w
  6077  05A2  00A8               	movwf	??___ftmul+2
  6078  05A3  1003               	clrc
  6079  05A4  0D27               	rlf	??___ftmul+1,w
  6080  05A5  0D28               	rlf	??___ftmul+2,w
  6081  05A6  00A9               	movwf	??___ftmul+3
  6082  05A7  0829               	movf	??___ftmul+3,w
  6083  05A8  00AA               	movwf	___ftmul@exp
  6084  05A9  08AA               	movf	___ftmul@exp,f
  6085  05AA  1D03               	skipz
  6086  05AB  2DB3               	goto	l4658
  6087  05AC  3000               	movlw	0
  6088  05AD  00A0               	movwf	?___ftmul
  6089  05AE  3000               	movlw	0
  6090  05AF  00A1               	movwf	?___ftmul+1
  6091  05B0  3000               	movlw	0
  6092  05B1  00A2               	movwf	?___ftmul+2
  6093  05B2  0008               	return
  6094  05B3                     l4658:	
  6095  05B3  0823               	movf	___ftmul@f2,w
  6096  05B4  00A6               	movwf	??___ftmul
  6097  05B5  0824               	movf	___ftmul@f2+1,w
  6098  05B6  00A7               	movwf	??___ftmul+1
  6099  05B7  0825               	movf	___ftmul@f2+2,w
  6100  05B8  00A8               	movwf	??___ftmul+2
  6101  05B9  1003               	clrc
  6102  05BA  0D27               	rlf	??___ftmul+1,w
  6103  05BB  0D28               	rlf	??___ftmul+2,w
  6104  05BC  00A9               	movwf	??___ftmul+3
  6105  05BD  0829               	movf	??___ftmul+3,w
  6106  05BE  00AF               	movwf	___ftmul@sign
  6107  05BF  08AF               	movf	___ftmul@sign,f
  6108  05C0  1D03               	skipz
  6109  05C1  2DC9               	goto	l4664
  6110  05C2  3000               	movlw	0
  6111  05C3  00A0               	movwf	?___ftmul
  6112  05C4  3000               	movlw	0
  6113  05C5  00A1               	movwf	?___ftmul+1
  6114  05C6  3000               	movlw	0
  6115  05C7  00A2               	movwf	?___ftmul+2
  6116  05C8  0008               	return
  6117  05C9                     l4664:	
  6118  05C9  082F               	movf	___ftmul@sign,w
  6119  05CA  3E7B               	addlw	123
  6120  05CB  00A6               	movwf	??___ftmul
  6121  05CC  0826               	movf	??___ftmul,w
  6122  05CD  07AA               	addwf	___ftmul@exp,f
  6123  05CE  0820               	movf	___ftmul@f1,w
  6124  05CF  00A6               	movwf	??___ftmul
  6125  05D0  0821               	movf	___ftmul@f1+1,w
  6126  05D1  00A7               	movwf	??___ftmul+1
  6127  05D2  0822               	movf	___ftmul@f1+2,w
  6128  05D3  00A8               	movwf	??___ftmul+2
  6129  05D4  3010               	movlw	16
  6130  05D5                     u4915:	
  6131  05D5  36A8               	lsrf	??___ftmul+2,f
  6132  05D6  0CA7               	rrf	??___ftmul+1,f
  6133  05D7  0CA6               	rrf	??___ftmul,f
  6134  05D8  0B89               	decfsz	9,f
  6135  05D9  2DD5               	goto	u4915
  6136  05DA  0826               	movf	??___ftmul,w
  6137  05DB  00A9               	movwf	??___ftmul+3
  6138  05DC  0829               	movf	??___ftmul+3,w
  6139  05DD  00AF               	movwf	___ftmul@sign
  6140  05DE  0823               	movf	___ftmul@f2,w
  6141  05DF  00A6               	movwf	??___ftmul
  6142  05E0  0824               	movf	___ftmul@f2+1,w
  6143  05E1  00A7               	movwf	??___ftmul+1
  6144  05E2  0825               	movf	___ftmul@f2+2,w
  6145  05E3  00A8               	movwf	??___ftmul+2
  6146  05E4  3010               	movlw	16
  6147  05E5                     u4925:	
  6148  05E5  36A8               	lsrf	??___ftmul+2,f
  6149  05E6  0CA7               	rrf	??___ftmul+1,f
  6150  05E7  0CA6               	rrf	??___ftmul,f
  6151  05E8  0B89               	decfsz	9,f
  6152  05E9  2DE5               	goto	u4925
  6153  05EA  0826               	movf	??___ftmul,w
  6154  05EB  00A9               	movwf	??___ftmul+3
  6155  05EC  0829               	movf	??___ftmul+3,w
  6156  05ED  06AF               	xorwf	___ftmul@sign,f
  6157  05EE  3080               	movlw	128
  6158  05EF  00A6               	movwf	??___ftmul
  6159  05F0  0826               	movf	??___ftmul,w
  6160  05F1  05AF               	andwf	___ftmul@sign,f
  6161  05F2  17A1               	bsf	___ftmul@f1+1,7
  6162  05F3  17A4               	bsf	___ftmul@f2+1,7
  6163  05F4  30FF               	movlw	255
  6164  05F5  05A3               	andwf	___ftmul@f2,f
  6165  05F6  30FF               	movlw	255
  6166  05F7  05A4               	andwf	___ftmul@f2+1,f
  6167  05F8  3000               	movlw	0
  6168  05F9  05A5               	andwf	___ftmul@f2+2,f
  6169  05FA  3000               	movlw	0
  6170  05FB  00AB               	movwf	___ftmul@f3_as_product
  6171  05FC  3000               	movlw	0
  6172  05FD  00AC               	movwf	___ftmul@f3_as_product+1
  6173  05FE  3000               	movlw	0
  6174  05FF  00AD               	movwf	___ftmul@f3_as_product+2
  6175  0600  3007               	movlw	7
  6176  0601  00A6               	movwf	??___ftmul
  6177  0602  0826               	movf	??___ftmul,w
  6178  0603  00AE               	movwf	___ftmul@cntr
  6179  0604                     l4676:	
  6180  0604  1C20               	btfss	___ftmul@f1,0
  6181  0605  2E0C               	goto	l4680
  6182  0606  0823               	movf	___ftmul@f2,w
  6183  0607  07AB               	addwf	___ftmul@f3_as_product,f
  6184  0608  0824               	movf	___ftmul@f2+1,w
  6185  0609  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  6186  060A  0825               	movf	___ftmul@f2+2,w
  6187  060B  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  6188  060C                     l4680:	
  6189  060C  3001               	movlw	1
  6190  060D                     u4945:	
  6191  060D  36A2               	lsrf	___ftmul@f1+2,f
  6192  060E  0CA1               	rrf	___ftmul@f1+1,f
  6193  060F  0CA0               	rrf	___ftmul@f1,f
  6194  0610  0B89               	decfsz	9,f
  6195  0611  2E0D               	goto	u4945
  6196  0612  3001               	movlw	1
  6197  0613                     u4955:	
  6198  0613  35A3               	lslf	___ftmul@f2,f
  6199  0614  0DA4               	rlf	___ftmul@f2+1,f
  6200  0615  0DA5               	rlf	___ftmul@f2+2,f
  6201  0616  0B89               	decfsz	9,f
  6202  0617  2E13               	goto	u4955
  6203  0618  3001               	movlw	1
  6204  0619  02AE               	subwf	___ftmul@cntr,f
  6205  061A  1D03               	btfss	3,2
  6206  061B  2E04               	goto	l4676
  6207  061C  3009               	movlw	9
  6208  061D  00A6               	movwf	??___ftmul
  6209  061E  0826               	movf	??___ftmul,w
  6210  061F  00AE               	movwf	___ftmul@cntr
  6211  0620                     l4688:	
  6212  0620  1C20               	btfss	___ftmul@f1,0
  6213  0621  2E28               	goto	l4692
  6214  0622  0823               	movf	___ftmul@f2,w
  6215  0623  07AB               	addwf	___ftmul@f3_as_product,f
  6216  0624  0824               	movf	___ftmul@f2+1,w
  6217  0625  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  6218  0626  0825               	movf	___ftmul@f2+2,w
  6219  0627  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  6220  0628                     l4692:	
  6221  0628  3001               	movlw	1
  6222  0629                     u4985:	
  6223  0629  36A2               	lsrf	___ftmul@f1+2,f
  6224  062A  0CA1               	rrf	___ftmul@f1+1,f
  6225  062B  0CA0               	rrf	___ftmul@f1,f
  6226  062C  0B89               	decfsz	9,f
  6227  062D  2E29               	goto	u4985
  6228  062E  3001               	movlw	1
  6229  062F                     u4995:	
  6230  062F  36AD               	lsrf	___ftmul@f3_as_product+2,f
  6231  0630  0CAC               	rrf	___ftmul@f3_as_product+1,f
  6232  0631  0CAB               	rrf	___ftmul@f3_as_product,f
  6233  0632  0B89               	decfsz	9,f
  6234  0633  2E2F               	goto	u4995
  6235  0634  3001               	movlw	1
  6236  0635  02AE               	subwf	___ftmul@cntr,f
  6237  0636  1D03               	btfss	3,2
  6238  0637  2E20               	goto	l4688
  6239  0638  082B               	movf	___ftmul@f3_as_product,w
  6240  0639  00F1               	movwf	?___ftpack
  6241  063A  082C               	movf	___ftmul@f3_as_product+1,w
  6242  063B  00F2               	movwf	?___ftpack+1
  6243  063C  082D               	movf	___ftmul@f3_as_product+2,w
  6244  063D  00F3               	movwf	?___ftpack+2
  6245  063E  082A               	movf	___ftmul@exp,w
  6246  063F  00A6               	movwf	??___ftmul
  6247  0640  0826               	movf	??___ftmul,w
  6248  0641  00F4               	movwf	?___ftpack+3
  6249  0642  082F               	movf	___ftmul@sign,w
  6250  0643  00A7               	movwf	??___ftmul+1
  6251  0644  0827               	movf	??___ftmul+1,w
  6252  0645  00F5               	movwf	?___ftpack+4
  6253  0646  3187  277A         	fcall	___ftpack
  6254  0648  0871               	movf	?___ftpack,w
  6255  0649  0020               	movlb	0	; select bank0
  6256  064A  00A0               	movwf	?___ftmul
  6257  064B  0872               	movf	?___ftpack+1,w
  6258  064C  00A1               	movwf	?___ftmul+1
  6259  064D  0873               	movf	?___ftpack+2,w
  6260  064E  00A2               	movwf	?___ftmul+2
  6261  064F  0008               	return
  6262  0650                     __end_of___ftmul:	
  6263                           
  6264                           	psect	text28
  6265  077A                     __ptext28:	
  6266 ;; *************** function ___ftpack *****************
  6267 ;; Defined at:
  6268 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  arg             3    1[COMMON] unsigned um
  6271 ;;  exp             1    4[COMMON] unsigned char 
  6272 ;;  sign            1    5[COMMON] unsigned char 
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;		None
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  3    1[COMMON] float 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6284 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6287 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;Total ram usage:        8 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    2
  6291 ;; This function calls:
  6292 ;;		Nothing
  6293 ;; This function is called by:
  6294 ;;		___ftadd
  6295 ;;		___ftmul
  6296 ;;		___lbtoft
  6297 ;;		___lltoft
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function ___ftpack
  6303  077A                     ___ftpack:	
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6307  077A  0874               	movf	___ftpack@exp,w
  6308  077B  1903               	btfsc	3,2
  6309  077C  2F82               	goto	l4554
  6310  077D  0873               	movf	___ftpack@arg+2,w
  6311  077E  0472               	iorwf	___ftpack@arg+1,w
  6312  077F  0471               	iorwf	___ftpack@arg,w
  6313  0780  1D03               	skipz
  6314  0781  2F93               	goto	l4560
  6315  0782                     l4554:	
  6316  0782  3000               	movlw	0
  6317  0783  00F1               	movwf	?___ftpack
  6318  0784  3000               	movlw	0
  6319  0785  00F2               	movwf	?___ftpack+1
  6320  0786  3000               	movlw	0
  6321  0787  00F3               	movwf	?___ftpack+2
  6322  0788  0008               	return
  6323  0789                     l4558:	
  6324  0789  3001               	movlw	1
  6325  078A  00F6               	movwf	??___ftpack
  6326  078B  0876               	movf	??___ftpack,w
  6327  078C  07F4               	addwf	___ftpack@exp,f
  6328  078D  3001               	movlw	1
  6329  078E                     u4575:	
  6330  078E  36F3               	lsrf	___ftpack@arg+2,f
  6331  078F  0CF2               	rrf	___ftpack@arg+1,f
  6332  0790  0CF1               	rrf	___ftpack@arg,f
  6333  0791  0B89               	decfsz	9,f
  6334  0792  2F8E               	goto	u4575
  6335  0793                     l4560:	
  6336  0793  30FE               	movlw	254
  6337  0794  0573               	andwf	___ftpack@arg+2,w
  6338  0795  1903               	btfsc	3,2
  6339  0796  2FAC               	goto	l829
  6340  0797  2F89               	goto	l4558
  6341  0798                     l4562:	
  6342  0798  3001               	movlw	1
  6343  0799  00F6               	movwf	??___ftpack
  6344  079A  0876               	movf	??___ftpack,w
  6345  079B  07F4               	addwf	___ftpack@exp,f
  6346  079C  3001               	movlw	1
  6347  079D  07F1               	addwf	___ftpack@arg,f
  6348  079E  3000               	movlw	0
  6349  079F  1803               	skipnc
  6350  07A0  3001               	movlw	1
  6351  07A1  07F2               	addwf	___ftpack@arg+1,f
  6352  07A2  3000               	movlw	0
  6353  07A3  1803               	skipnc
  6354  07A4  3001               	movlw	1
  6355  07A5  07F3               	addwf	___ftpack@arg+2,f
  6356  07A6  3001               	movlw	1
  6357  07A7                     u4595:	
  6358  07A7  36F3               	lsrf	___ftpack@arg+2,f
  6359  07A8  0CF2               	rrf	___ftpack@arg+1,f
  6360  07A9  0CF1               	rrf	___ftpack@arg,f
  6361  07AA  0B89               	decfsz	9,f
  6362  07AB  2FA7               	goto	u4595
  6363  07AC                     l829:	
  6364  07AC  30FF               	movlw	255
  6365  07AD  0573               	andwf	___ftpack@arg+2,w
  6366  07AE  1903               	btfsc	3,2
  6367  07AF  2FB9               	goto	l4570
  6368  07B0  2F98               	goto	l4562
  6369  07B1                     l4568:	
  6370  07B1  3001               	movlw	1
  6371  07B2  02F4               	subwf	___ftpack@exp,f
  6372  07B3  3001               	movlw	1
  6373  07B4                     u4615:	
  6374  07B4  35F1               	lslf	___ftpack@arg,f
  6375  07B5  0DF2               	rlf	___ftpack@arg+1,f
  6376  07B6  0DF3               	rlf	___ftpack@arg+2,f
  6377  07B7  0B89               	decfsz	9,f
  6378  07B8  2FB4               	goto	u4615
  6379  07B9                     l4570:	
  6380  07B9  1FF2               	btfss	___ftpack@arg+1,7
  6381  07BA  2FB1               	goto	l4568
  6382  07BB  1874               	btfsc	___ftpack@exp,0
  6383  07BC  2FC3               	goto	l835
  6384  07BD  30FF               	movlw	255
  6385  07BE  05F1               	andwf	___ftpack@arg,f
  6386  07BF  307F               	movlw	127
  6387  07C0  05F2               	andwf	___ftpack@arg+1,f
  6388  07C1  30FF               	movlw	255
  6389  07C2  05F3               	andwf	___ftpack@arg+2,f
  6390  07C3                     l835:	
  6391  07C3  1003               	clrc
  6392  07C4  0CF4               	rrf	___ftpack@exp,f
  6393  07C5  0874               	movf	___ftpack@exp,w
  6394  07C6  00F6               	movwf	??___ftpack
  6395  07C7  01F7               	clrf	??___ftpack+1
  6396  07C8  01F8               	clrf	??___ftpack+2
  6397  07C9  3010               	movlw	16
  6398  07CA                     u4645:	
  6399  07CA  35F6               	lslf	??___ftpack,f
  6400  07CB  0DF7               	rlf	??___ftpack+1,f
  6401  07CC  0DF8               	rlf	??___ftpack+2,f
  6402  07CD  0B89               	decfsz	9,f
  6403  07CE  2FCA               	goto	u4645
  6404  07CF  0876               	movf	??___ftpack,w
  6405  07D0  04F1               	iorwf	___ftpack@arg,f
  6406  07D1  0877               	movf	??___ftpack+1,w
  6407  07D2  04F2               	iorwf	___ftpack@arg+1,f
  6408  07D3  0878               	movf	??___ftpack+2,w
  6409  07D4  04F3               	iorwf	___ftpack@arg+2,f
  6410  07D5  0875               	movf	___ftpack@sign,w
  6411  07D6  1903               	btfsc	3,2
  6412  07D7  0008               	return
  6413  07D8  17F3               	bsf	___ftpack@arg+2,7
  6414  07D9  0008               	return
  6415  07DA                     __end_of___ftpack:	
  6416                           
  6417                           	psect	text29
  6418  0CBF                     __ptext29:	
  6419 ;; *************** function ___ftge *****************
  6420 ;; Defined at:
  6421 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftge.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  ff1             3    1[COMMON] float 
  6424 ;;  ff2             3    4[COMMON] float 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;		None
  6427 ;; Return value:  Size  Location     Type
  6428 ;;		None               void
  6429 ;; Registers used:
  6430 ;;		wreg, status,2, status,0
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6436 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;Total ram usage:        9 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    2
  6443 ;; This function calls:
  6444 ;;		Nothing
  6445 ;; This function is called by:
  6446 ;;		_RTXUpdateDisplay
  6447 ;;		_ftoa
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           
  6452                           ;psect for function ___ftge
  6453  0CBF                     ___ftge:	
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6457  0CBF  1FF3               	btfss	___ftge@ff1+2,7
  6458  0CC0  2CD5               	goto	l3752
  6459  0CC1  0971               	comf	___ftge@ff1,w
  6460  0CC2  00F7               	movwf	??___ftge
  6461  0CC3  0972               	comf	___ftge@ff1+1,w
  6462  0CC4  00F8               	movwf	??___ftge+1
  6463  0CC5  0973               	comf	___ftge@ff1+2,w
  6464  0CC6  00F9               	movwf	??___ftge+2
  6465  0CC7  0AF7               	incf	??___ftge,f
  6466  0CC8  1903               	skipnz
  6467  0CC9  0AF8               	incf	??___ftge+1,f
  6468  0CCA  1903               	skipnz
  6469  0CCB  0AF9               	incf	??___ftge+2,f
  6470  0CCC  3000               	movlw	0
  6471  0CCD  0777               	addwf	??___ftge,w
  6472  0CCE  00F1               	movwf	___ftge@ff1
  6473  0CCF  3000               	movlw	0
  6474  0CD0  3D78               	addwfc	??___ftge+1,w
  6475  0CD1  00F2               	movwf	___ftge@ff1+1
  6476  0CD2  3080               	movlw	128
  6477  0CD3  3D79               	addwfc	??___ftge+2,w
  6478  0CD4  00F3               	movwf	___ftge@ff1+2
  6479  0CD5                     l3752:	
  6480  0CD5  1FF6               	btfss	___ftge@ff2+2,7
  6481  0CD6  2CEB               	goto	l3756
  6482  0CD7  0974               	comf	___ftge@ff2,w
  6483  0CD8  00F7               	movwf	??___ftge
  6484  0CD9  0975               	comf	___ftge@ff2+1,w
  6485  0CDA  00F8               	movwf	??___ftge+1
  6486  0CDB  0976               	comf	___ftge@ff2+2,w
  6487  0CDC  00F9               	movwf	??___ftge+2
  6488  0CDD  0AF7               	incf	??___ftge,f
  6489  0CDE  1903               	skipnz
  6490  0CDF  0AF8               	incf	??___ftge+1,f
  6491  0CE0  1903               	skipnz
  6492  0CE1  0AF9               	incf	??___ftge+2,f
  6493  0CE2  3000               	movlw	0
  6494  0CE3  0777               	addwf	??___ftge,w
  6495  0CE4  00F4               	movwf	___ftge@ff2
  6496  0CE5  3000               	movlw	0
  6497  0CE6  3D78               	addwfc	??___ftge+1,w
  6498  0CE7  00F5               	movwf	___ftge@ff2+1
  6499  0CE8  3080               	movlw	128
  6500  0CE9  3D79               	addwfc	??___ftge+2,w
  6501  0CEA  00F6               	movwf	___ftge@ff2+2
  6502  0CEB                     l3756:	
  6503  0CEB  3080               	movlw	128
  6504  0CEC  06F3               	xorwf	___ftge@ff1+2,f
  6505  0CED  3080               	movlw	128
  6506  0CEE  06F6               	xorwf	___ftge@ff2+2,f
  6507  0CEF  0876               	movf	___ftge@ff2+2,w
  6508  0CF0  0273               	subwf	___ftge@ff1+2,w
  6509  0CF1  1D03               	skipz
  6510  0CF2  0008               	return
  6511  0CF3  0875               	movf	___ftge@ff2+1,w
  6512  0CF4  0272               	subwf	___ftge@ff1+1,w
  6513  0CF5  1D03               	skipz
  6514  0CF6  0008               	return
  6515  0CF7  0874               	movf	___ftge@ff2,w
  6516  0CF8  0271               	subwf	___ftge@ff1,w
  6517  0CF9  0008               	return
  6518  0CFA                     __end_of___ftge:	
  6519                           
  6520                           	psect	text30
  6521  0046                     __ptext30:	
  6522 ;; *************** function _sprintf *****************
  6523 ;; Defined at:
  6524 ;;		line 493 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\doprnt.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  sp              1    wreg     PTR unsigned char 
  6527 ;;		 -> ftoa@buf(17), 
  6528 ;;  f               1   13[BANK0 ] PTR const unsigned char 
  6529 ;;		 -> STR_1(11), 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  sp              1   33[BANK0 ] PTR unsigned char 
  6532 ;;		 -> ftoa@buf(17), 
  6533 ;;  _val            4   29[BANK0 ] struct .
  6534 ;;  prec            2   36[BANK0 ] int 
  6535 ;;  width           2   34[BANK0 ] int 
  6536 ;;  c               1   38[BANK0 ] char 
  6537 ;;  ap              1   28[BANK0 ] PTR void [1]
  6538 ;;		 -> ?_sprintf(2), 
  6539 ;;  flag            1   27[BANK0 ] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  2   13[BANK0 ] int 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6549 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6553 ;;Total ram usage:       26 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    3
  6556 ;; This function calls:
  6557 ;;		_isdigit
  6558 ;;		___lldiv
  6559 ;;		___llmod
  6560 ;;		___wmul
  6561 ;; This function is called by:
  6562 ;;		_ftoa
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           
  6567                           ;psect for function _sprintf
  6568  0046                     _sprintf:	
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6572                           ;sprintf@sp stored from wreg
  6573  0046  0020               	movlb	0	; select bank0
  6574  0047  00C1               	movwf	sprintf@sp
  6575                           
  6576                           ;doprnt.c: 494: va_list ap;
  6577                           ;doprnt.c: 499: signed char c;
  6578                           ;doprnt.c: 501: int width;
  6579                           ;doprnt.c: 504: int prec;
  6580                           ;doprnt.c: 508: unsigned char flag;
  6581                           ;doprnt.c: 527: union {
  6582                           ;doprnt.c: 528: unsigned long _val;
  6583                           ;doprnt.c: 529: struct {
  6584                           ;doprnt.c: 530: const char * _cp;
  6585                           ;doprnt.c: 531: unsigned _len;
  6586                           ;doprnt.c: 532: } _str;
  6587                           ;doprnt.c: 533: } _val;
  6588                           ;doprnt.c: 542: *ap = __va_start();
  6589  0048  302E               	movlw	(?_sprintf+1)& (0+255)
  6590  0049  00B6               	movwf	??_sprintf
  6591  004A  0836               	movf	??_sprintf,w
  6592  004B  00BC               	movwf	sprintf@ap
  6593  004C                     l3584:	
  6594                           ;doprnt.c: 545: while(c = *f++) {
  6595                           
  6596  004C  082D               	movf	sprintf@f,w
  6597  004D  0AAD               	incf	sprintf@f,f
  6598  004E  3188               	movlp	high __stringtab
  6599  004F  000A               	callw
  6600  0050  3180               	pagesel	$	;select current page
  6601  0051  00B6               	movwf	??_sprintf
  6602  0052  0836               	movf	??_sprintf,w
  6603  0053  00C6               	movwf	sprintf@c
  6604  0054  08C6               	movf	sprintf@c,f
  6605  0055  1903               	btfsc	3,2
  6606  0056  2A1C               	goto	l3586
  6607                           
  6608                           ;doprnt.c: 547: if(c != '%')
  6609  0057  0846               	movf	sprintf@c,w
  6610  0058  3A25               	xorlw	37
  6611  0059  1903               	skipnz
  6612  005A  2868               	goto	l3494
  6613                           
  6614                           ;doprnt.c: 549: {
  6615                           ;doprnt.c: 550: ((*sp++ = (c)));
  6616  005B  0846               	movf	sprintf@c,w
  6617  005C  00B6               	movwf	??_sprintf
  6618  005D  0841               	movf	sprintf@sp,w
  6619  005E  0086               	movwf	6
  6620  005F  3001               	movlw	1	; select bank2/3
  6621  0060  0087               	movwf	7
  6622  0061  0836               	movf	??_sprintf,w
  6623  0062  0081               	movwf	1
  6624  0063  3001               	movlw	1
  6625  0064  00B6               	movwf	??_sprintf
  6626  0065  0836               	movf	??_sprintf,w
  6627  0066  07C1               	addwf	sprintf@sp,f
  6628                           
  6629                           ;doprnt.c: 551: continue;
  6630  0067  284C               	goto	l3584
  6631  0068                     l3494:	
  6632                           
  6633                           ;doprnt.c: 552: }
  6634                           ;doprnt.c: 555: width = 0;
  6635  0068  01C2               	clrf	sprintf@width
  6636  0069  01C3               	clrf	sprintf@width+1
  6637                           
  6638                           ;doprnt.c: 557: flag = 0;
  6639  006A  01BB               	clrf	sprintf@flag
  6640                           
  6641                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  6642  006B  082D               	movf	sprintf@f,w
  6643  006C  3188               	movlp	high __stringtab
  6644  006D  000A               	callw
  6645  006E  3180               	pagesel	$	;select current page
  6646  006F  3188  20B9  3180   	fcall	_isdigit
  6647  0072  1C03               	btfss	3,0
  6648  0073  28A7               	goto	l3508
  6649                           
  6650                           ;doprnt.c: 607: width = 0;
  6651  0074  0020               	movlb	0	; select bank0
  6652  0075  01C2               	clrf	sprintf@width
  6653  0076  01C3               	clrf	sprintf@width+1
  6654  0077                     l3500:	
  6655                           ;doprnt.c: 608: do {
  6656                           
  6657                           
  6658                           ;doprnt.c: 609: width *= 10;
  6659  0077  300A               	movlw	10
  6660  0078  00F1               	movwf	?___wmul
  6661  0079  3000               	movlw	0
  6662  007A  00F2               	movwf	?___wmul+1
  6663  007B  0020               	movlb	0	; select bank0
  6664  007C  0843               	movf	sprintf@width+1,w
  6665  007D  01F4               	clrf	?___wmul+3
  6666  007E  07F4               	addwf	?___wmul+3,f
  6667  007F  0842               	movf	sprintf@width,w
  6668  0080  01F3               	clrf	?___wmul+2
  6669  0081  07F3               	addwf	?___wmul+2,f
  6670  0082  318A  2284  3180   	fcall	___wmul
  6671  0085  0872               	movf	?___wmul+1,w
  6672  0086  0020               	movlb	0	; select bank0
  6673  0087  01C3               	clrf	sprintf@width+1
  6674  0088  07C3               	addwf	sprintf@width+1,f
  6675  0089  0871               	movf	?___wmul,w
  6676  008A  01C2               	clrf	sprintf@width
  6677  008B  07C2               	addwf	sprintf@width,f
  6678                           
  6679                           ;doprnt.c: 610: width += *f++ - '0';
  6680  008C  082D               	movf	sprintf@f,w
  6681  008D  3188               	movlp	high __stringtab
  6682  008E  000A               	callw
  6683  008F  3180               	pagesel	$	;select current page
  6684  0090  3ED0               	addlw	208
  6685  0091  00B6               	movwf	??_sprintf
  6686  0092  30FF               	movlw	255
  6687  0093  1803               	skipnc
  6688  0094  3000               	movlw	0
  6689  0095  00B7               	movwf	??_sprintf+1
  6690  0096  0836               	movf	??_sprintf,w
  6691  0097  07C2               	addwf	sprintf@width,f
  6692  0098  0837               	movf	??_sprintf+1,w
  6693  0099  3DC3               	addwfc	sprintf@width+1,f
  6694  009A  3001               	movlw	1
  6695  009B  00B6               	movwf	??_sprintf
  6696  009C  0836               	movf	??_sprintf,w
  6697  009D  07AD               	addwf	sprintf@f,f
  6698                           
  6699                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  6700  009E  082D               	movf	sprintf@f,w
  6701  009F  3188               	movlp	high __stringtab
  6702  00A0  000A               	callw
  6703  00A1  3180               	pagesel	$	;select current page
  6704  00A2  3188  20B9  3180   	fcall	_isdigit
  6705  00A5  1803               	btfsc	3,0
  6706  00A6  2877               	goto	l3500
  6707  00A7                     l3508:	
  6708                           
  6709                           ;doprnt.c: 617: }
  6710                           ;doprnt.c: 620: if(*f == '.') {
  6711  00A7  0020               	movlb	0	; select bank0
  6712  00A8  082D               	movf	sprintf@f,w
  6713  00A9  3188               	movlp	high __stringtab
  6714  00AA  000A               	callw
  6715  00AB  3180               	pagesel	$	;select current page
  6716  00AC  3A2E               	xorlw	46
  6717  00AD  1D03               	skipz
  6718  00AE  28E4               	goto	l3520
  6719                           
  6720                           ;doprnt.c: 622: f++;
  6721  00AF  3001               	movlw	1
  6722  00B0  00B6               	movwf	??_sprintf
  6723  00B1  0836               	movf	??_sprintf,w
  6724  00B2  07AD               	addwf	sprintf@f,f
  6725                           
  6726                           ;doprnt.c: 629: {
  6727                           ;doprnt.c: 630: prec = 0;
  6728  00B3  01C4               	clrf	sprintf@prec
  6729  00B4  01C5               	clrf	sprintf@prec+1
  6730  00B5                     l3518:	
  6731                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  6732                           
  6733  00B5  082D               	movf	sprintf@f,w
  6734  00B6  3188               	movlp	high __stringtab
  6735  00B7  000A               	callw
  6736  00B8  3180               	pagesel	$	;select current page
  6737  00B9  3188  20B9  3180   	fcall	_isdigit
  6738  00BC  1C03               	btfss	3,0
  6739  00BD  28EF               	goto	l3526
  6740                           
  6741                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  6742  00BE  0020               	movlb	0	; select bank0
  6743  00BF  082D               	movf	sprintf@f,w
  6744  00C0  3188               	movlp	high __stringtab
  6745  00C1  000A               	callw
  6746  00C2  3180               	pagesel	$	;select current page
  6747  00C3  00B6               	movwf	??_sprintf
  6748  00C4  01B7               	clrf	??_sprintf+1
  6749  00C5  0845               	movf	sprintf@prec+1,w
  6750  00C6  01F2               	clrf	?___wmul+1
  6751  00C7  07F2               	addwf	?___wmul+1,f
  6752  00C8  0844               	movf	sprintf@prec,w
  6753  00C9  01F1               	clrf	?___wmul
  6754  00CA  07F1               	addwf	?___wmul,f
  6755  00CB  300A               	movlw	10
  6756  00CC  00F3               	movwf	?___wmul+2
  6757  00CD  3000               	movlw	0
  6758  00CE  00F4               	movwf	?___wmul+3
  6759  00CF  318A  2284  3180   	fcall	___wmul
  6760  00D2  0020               	movlb	0	; select bank0
  6761  00D3  0836               	movf	??_sprintf,w
  6762  00D4  0771               	addwf	?___wmul,w
  6763  00D5  00B8               	movwf	??_sprintf+2
  6764  00D6  0837               	movf	??_sprintf+1,w
  6765  00D7  3D72               	addwfc	?___wmul+1,w
  6766  00D8  00B9               	movwf	??_sprintf+3
  6767  00D9  0838               	movf	??_sprintf+2,w
  6768  00DA  3ED0               	addlw	208
  6769  00DB  00C4               	movwf	sprintf@prec
  6770  00DC  30FF               	movlw	255
  6771  00DD  3D39               	addwfc	??_sprintf+3,w
  6772  00DE  00C5               	movwf	sprintf@prec+1
  6773  00DF  3001               	movlw	1
  6774  00E0  00B6               	movwf	??_sprintf
  6775  00E1  0836               	movf	??_sprintf,w
  6776  00E2  07AD               	addwf	sprintf@f,f
  6777  00E3  28B5               	goto	l3518
  6778  00E4                     l3520:	
  6779                           ;doprnt.c: 633: }
  6780                           ;doprnt.c: 634: } else {
  6781                           
  6782                           
  6783                           ;doprnt.c: 635: prec = 0;
  6784  00E4  0020               	movlb	0	; select bank0
  6785  00E5  01C4               	clrf	sprintf@prec
  6786  00E6  01C5               	clrf	sprintf@prec+1
  6787                           
  6788                           ;doprnt.c: 644: switch(c = *f++) {
  6789                           
  6790                           ;doprnt.c: 639: }
  6791                           ;doprnt.c: 642: loop:
  6792  00E7  28EF               	goto	l3526
  6793  00E8                     l660:	
  6794                           ;doprnt.c: 650: case 'l':
  6795                           
  6796                           ;doprnt.c: 647: goto alldone;
  6797                           
  6798                           ;doprnt.c: 646: case 0:
  6799                           
  6800                           
  6801                           ;doprnt.c: 652: flag |= 0x10;
  6802  00E8  163B               	bsf	sprintf@flag,4
  6803                           
  6804                           ;doprnt.c: 653: goto loop;
  6805  00E9  28EF               	goto	l3526
  6806  00EA                     l3522:	
  6807                           ;doprnt.c: 826: case 'u':
  6808                           
  6809                           ;doprnt.c: 822: continue;
  6810                           
  6811                           ;doprnt.c: 811: default:
  6812                           
  6813                           
  6814                           ;doprnt.c: 827: flag |= 0xC0;
  6815  00EA  30C0               	movlw	192
  6816  00EB  00B6               	movwf	??_sprintf
  6817  00EC  0836               	movf	??_sprintf,w
  6818  00ED  04BB               	iorwf	sprintf@flag,f
  6819                           
  6820                           ;doprnt.c: 831: }
  6821                           
  6822                           ;doprnt.c: 828: break;
  6823  00EE  2900               	goto	l663
  6824  00EF                     l3526:	
  6825  00EF  0020               	movlb	0	; select bank0
  6826  00F0  082D               	movf	sprintf@f,w
  6827  00F1  0AAD               	incf	sprintf@f,f
  6828  00F2  3188               	movlp	high __stringtab
  6829  00F3  000A               	callw
  6830  00F4  3180               	pagesel	$	;select current page
  6831  00F5  00C6               	movwf	sprintf@c
  6832                           
  6833                           ; Switch size 1, requested type "space"
  6834                           ; Number of cases is 3, Range of values is 0 to 117
  6835                           ; switch strategies available:
  6836                           ; Name         Instructions Cycles
  6837                           ; simple_byte           10     6 (average)
  6838                           ; direct_byte          242     6 (fixed)
  6839                           ; jumptable            260     6 (fixed)
  6840                           ;	Chosen strategy is simple_byte
  6841  00F6  3A00               	xorlw	0	; case 0
  6842  00F7  1903               	skipnz
  6843  00F8  2A1C               	goto	l3586
  6844  00F9  3A6C               	xorlw	108	; case 108
  6845  00FA  1903               	skipnz
  6846  00FB  28E8               	goto	l660
  6847  00FC  3A19               	xorlw	25	; case 117
  6848  00FD  1903               	skipnz
  6849  00FE  28EA               	goto	l3522
  6850  00FF  284C               	goto	l3584
  6851  0100                     l663:	
  6852                           
  6853                           ;doprnt.c: 1280: {
  6854                           ;doprnt.c: 1288: if(flag & 0x10)
  6855  0100  1E3B               	btfss	sprintf@flag,4
  6856  0101  290F               	goto	l3532
  6857                           
  6858                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  6859  0102  083C               	movf	sprintf@ap,w
  6860  0103  0086               	movwf	6
  6861  0104  0187               	clrf	7
  6862  0105  3F40               	moviw [0]fsr1
  6863  0106  00BD               	movwf	sprintf@_val
  6864  0107  3F41               	moviw [1]fsr1
  6865  0108  00BE               	movwf	sprintf@_val+1
  6866  0109  3F42               	moviw [2]fsr1
  6867  010A  00BF               	movwf	sprintf@_val+2
  6868  010B  3F43               	moviw [3]fsr1
  6869  010C  00C0               	movwf	sprintf@_val+3
  6870  010D  3004               	movlw	4
  6871  010E  291D               	goto	L2
  6872  010F                     l3532:	
  6873                           
  6874                           ;doprnt.c: 1290: else
  6875                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6876  010F  083C               	movf	sprintf@ap,w
  6877  0110  0086               	movwf	6
  6878  0111  0187               	clrf	7
  6879  0112  3F40               	moviw [0]fsr1
  6880  0113  00B6               	movwf	??_sprintf
  6881  0114  3F41               	moviw [1]fsr1
  6882  0115  00B7               	movwf	??_sprintf+1
  6883  0116  0836               	movf	??_sprintf,w
  6884  0117  00BD               	movwf	sprintf@_val
  6885  0118  0837               	movf	??_sprintf+1,w
  6886  0119  00BE               	movwf	sprintf@_val+1
  6887  011A  01BF               	clrf	sprintf@_val+2
  6888  011B  01C0               	clrf	sprintf@_val+3
  6889  011C  3002               	movlw	2
  6890  011D                     L2:	
  6891  011D  00B6               	movwf	??_sprintf
  6892  011E  0836               	movf	??_sprintf,w
  6893  011F  07BC               	addwf	sprintf@ap,f
  6894                           
  6895                           ;doprnt.c: 1294: }
  6896                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  6897  0120  0845               	movf	sprintf@prec+1,w
  6898  0121  0444               	iorwf	sprintf@prec,w
  6899  0122  1D03               	skipz
  6900  0123  292E               	goto	l3542
  6901  0124  0840               	movf	sprintf@_val+3,w
  6902  0125  043F               	iorwf	sprintf@_val+2,w
  6903  0126  043E               	iorwf	sprintf@_val+1,w
  6904  0127  043D               	iorwf	sprintf@_val,w
  6905  0128  1D03               	skipz
  6906  0129  292E               	goto	l3542
  6907                           
  6908                           ;doprnt.c: 1298: prec++;
  6909  012A  3001               	movlw	1
  6910  012B  07C4               	addwf	sprintf@prec,f
  6911  012C  3000               	movlw	0
  6912  012D  3DC5               	addwfc	sprintf@prec+1,f
  6913  012E                     l3542:	
  6914                           
  6915                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6916  012E  01C6               	clrf	sprintf@c
  6917  012F  0AC6               	incf	sprintf@c,f
  6918  0130  0846               	movf	sprintf@c,w
  6919  0131  3A0A               	xorlw	10
  6920  0132  1903               	btfsc	3,2
  6921  0133  2963               	goto	l3554
  6922  0134                     l3546:	
  6923                           
  6924                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  6925  0134  3001               	movlw	low (_dpowers| (0+32768))
  6926  0135  0084               	movwf	4
  6927  0136  3088               	movlw	high (_dpowers| (0+32768))
  6928  0137  0085               	movwf	5
  6929  0138  0846               	movf	sprintf@c,w
  6930  0139  00B6               	movwf	??_sprintf
  6931  013A  3001               	movlw	1
  6932  013B                     u2925:	
  6933  013B  35B6               	lslf	??_sprintf,f
  6934  013C  3EFF               	addlw	-1
  6935  013D  1D03               	skipz
  6936  013E  293B               	goto	u2925
  6937  013F  3536               	lslf	??_sprintf,w
  6938  0140  0784               	addwf	4,f
  6939  0141  1803               	skipnc
  6940  0142  0A85               	incf	5,f
  6941  0143  3F00               	moviw [0]fsr0
  6942  0144  00B7               	movwf	??_sprintf+1
  6943  0145  3F01               	moviw [1]fsr0
  6944  0146  00B8               	movwf	??_sprintf+2
  6945  0147  3F02               	moviw [2]fsr0
  6946  0148  00B9               	movwf	??_sprintf+3
  6947  0149  3F03               	moviw [3]fsr0
  6948  014A  00BA               	movwf	??_sprintf+4
  6949  014B  083A               	movf	??_sprintf+4,w
  6950  014C  0240               	subwf	sprintf@_val+3,w
  6951  014D  1D03               	skipz
  6952  014E  2959               	goto	u2935
  6953  014F  0839               	movf	??_sprintf+3,w
  6954  0150  023F               	subwf	sprintf@_val+2,w
  6955  0151  1D03               	skipz
  6956  0152  2959               	goto	u2935
  6957  0153  0838               	movf	??_sprintf+2,w
  6958  0154  023E               	subwf	sprintf@_val+1,w
  6959  0155  1D03               	skipz
  6960  0156  2959               	goto	u2935
  6961  0157  0837               	movf	??_sprintf+1,w
  6962  0158  023D               	subwf	sprintf@_val,w
  6963  0159                     u2935:	
  6964  0159  1C03               	btfss	3,0
  6965  015A  2963               	goto	l3554
  6966                           
  6967                           ;doprnt.c: 1314: break;
  6968  015B  3001               	movlw	1
  6969  015C  00B6               	movwf	??_sprintf
  6970  015D  0836               	movf	??_sprintf,w
  6971  015E  07C6               	addwf	sprintf@c,f
  6972  015F  0846               	movf	sprintf@c,w
  6973  0160  3A0A               	xorlw	10
  6974  0161  1D03               	skipz
  6975  0162  2934               	goto	l3546
  6976  0163                     l3554:	
  6977                           
  6978                           ;doprnt.c: 1346: if(c < prec)
  6979  0163  0846               	movf	sprintf@c,w
  6980  0164  00B6               	movwf	??_sprintf
  6981  0165  01B7               	clrf	??_sprintf+1
  6982  0166  1BB6               	btfsc	??_sprintf,7
  6983  0167  03B7               	decf	??_sprintf+1,f
  6984  0168  0837               	movf	??_sprintf+1,w
  6985  0169  3A80               	xorlw	128
  6986  016A  00B8               	movwf	??_sprintf+2
  6987  016B  0845               	movf	sprintf@prec+1,w
  6988  016C  3A80               	xorlw	128
  6989  016D  0238               	subwf	??_sprintf+2,w
  6990  016E  1D03               	skipz
  6991  016F  2972               	goto	u2955
  6992  0170  0844               	movf	sprintf@prec,w
  6993  0171  0236               	subwf	??_sprintf,w
  6994  0172                     u2955:	
  6995  0172  1803               	skipnc
  6996  0173  297A               	goto	l3558
  6997                           
  6998                           ;doprnt.c: 1347: c = prec;
  6999  0174  0020               	movlb	0	; select bank0
  7000  0175  0844               	movf	sprintf@prec,w
  7001  0176  00B6               	movwf	??_sprintf
  7002  0177  0836               	movf	??_sprintf,w
  7003  0178  00C6               	movwf	sprintf@c
  7004  0179  2992               	goto	l3562
  7005  017A                     l3558:	
  7006                           
  7007                           ;doprnt.c: 1348: else if(prec < c)
  7008  017A  0020               	movlb	0	; select bank0
  7009  017B  0846               	movf	sprintf@c,w
  7010  017C  00B6               	movwf	??_sprintf
  7011  017D  01B7               	clrf	??_sprintf+1
  7012  017E  1BB6               	btfsc	??_sprintf,7
  7013  017F  03B7               	decf	??_sprintf+1,f
  7014  0180  0845               	movf	sprintf@prec+1,w
  7015  0181  3A80               	xorlw	128
  7016  0182  00B8               	movwf	??_sprintf+2
  7017  0183  0837               	movf	??_sprintf+1,w
  7018  0184  3A80               	xorlw	128
  7019  0185  0238               	subwf	??_sprintf+2,w
  7020  0186  1D03               	skipz
  7021  0187  298A               	goto	u2965
  7022  0188  0836               	movf	??_sprintf,w
  7023  0189  0244               	subwf	sprintf@prec,w
  7024  018A                     u2965:	
  7025  018A  1803               	skipnc
  7026  018B  2992               	goto	l3562
  7027                           
  7028                           ;doprnt.c: 1349: prec = c;
  7029  018C  0020               	movlb	0	; select bank0
  7030  018D  0846               	movf	sprintf@c,w
  7031  018E  00C4               	movwf	sprintf@prec
  7032  018F  01C5               	clrf	sprintf@prec+1
  7033  0190  1BC4               	btfsc	sprintf@prec,7
  7034  0191  03C5               	decf	sprintf@prec+1,f
  7035  0192                     l3562:	
  7036                           
  7037                           ;doprnt.c: 1388: if(width > c)
  7038  0192  0020               	movlb	0	; select bank0
  7039  0193  0846               	movf	sprintf@c,w
  7040  0194  00B6               	movwf	??_sprintf
  7041  0195  01B7               	clrf	??_sprintf+1
  7042  0196  1BB6               	btfsc	??_sprintf,7
  7043  0197  03B7               	decf	??_sprintf+1,f
  7044  0198  0837               	movf	??_sprintf+1,w
  7045  0199  3A80               	xorlw	128
  7046  019A  00B8               	movwf	??_sprintf+2
  7047  019B  0843               	movf	sprintf@width+1,w
  7048  019C  3A80               	xorlw	128
  7049  019D  0238               	subwf	??_sprintf+2,w
  7050  019E  1D03               	skipz
  7051  019F  29A2               	goto	u2975
  7052  01A0  0842               	movf	sprintf@width,w
  7053  01A1  0236               	subwf	??_sprintf,w
  7054  01A2                     u2975:	
  7055  01A2  1803               	skipnc
  7056  01A3  29AF               	goto	l3566
  7057                           
  7058                           ;doprnt.c: 1389: width -= c;
  7059  01A4  0020               	movlb	0	; select bank0
  7060  01A5  0846               	movf	sprintf@c,w
  7061  01A6  00B6               	movwf	??_sprintf
  7062  01A7  01B7               	clrf	??_sprintf+1
  7063  01A8  1BB6               	btfsc	??_sprintf,7
  7064  01A9  03B7               	decf	??_sprintf+1,f
  7065  01AA  0836               	movf	??_sprintf,w
  7066  01AB  02C2               	subwf	sprintf@width,f
  7067  01AC  0837               	movf	??_sprintf+1,w
  7068  01AD  3BC3               	subwfb	sprintf@width+1,f
  7069  01AE  29B2               	goto	l3568
  7070  01AF                     l3566:	
  7071                           
  7072                           ;doprnt.c: 1390: else
  7073                           ;doprnt.c: 1391: width = 0;
  7074  01AF  0020               	movlb	0	; select bank0
  7075  01B0  01C2               	clrf	sprintf@width
  7076  01B1  01C3               	clrf	sprintf@width+1
  7077  01B2                     l3568:	
  7078                           
  7079                           ;doprnt.c: 1429: {
  7080                           ;doprnt.c: 1431: if(width
  7081                           ;doprnt.c: 1435: )
  7082  01B2  0843               	movf	sprintf@width+1,w
  7083  01B3  0442               	iorwf	sprintf@width,w
  7084  01B4  1903               	skipnz
  7085  01B5  2A0F               	goto	l3582
  7086                           
  7087                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  7088                           
  7089                           ;doprnt.c: 1436: do
  7090  01B6  3020               	movlw	32
  7091  01B7  00B6               	movwf	??_sprintf
  7092  01B8  0841               	movf	sprintf@sp,w
  7093  01B9  0086               	movwf	6
  7094  01BA  3001               	movlw	1	; select bank2/3
  7095  01BB  0087               	movwf	7
  7096  01BC  0836               	movf	??_sprintf,w
  7097  01BD  0081               	movwf	1
  7098  01BE  3001               	movlw	1
  7099  01BF  00B6               	movwf	??_sprintf
  7100  01C0  0836               	movf	??_sprintf,w
  7101  01C1  07C1               	addwf	sprintf@sp,f
  7102                           
  7103                           ;doprnt.c: 1438: while(--width);
  7104  01C2  30FF               	movlw	255
  7105  01C3  07C2               	addwf	sprintf@width,f
  7106  01C4  30FF               	movlw	255
  7107  01C5  3DC3               	addwfc	sprintf@width+1,f
  7108  01C6  29B2               	goto	l3568
  7109  01C7                     l3576:	
  7110                           ;doprnt.c: 1476: }
  7111                           ;doprnt.c: 1481: while(prec--) {
  7112                           
  7113                           
  7114                           ;doprnt.c: 1485: {
  7115                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  7116  01C7  3000               	movlw	0
  7117  01C8  00A8               	movwf	?___llmod+3
  7118  01C9  3000               	movlw	0
  7119  01CA  00A7               	movwf	?___llmod+2
  7120  01CB  3000               	movlw	0
  7121  01CC  00A6               	movwf	?___llmod+1
  7122  01CD  300A               	movlw	10
  7123  01CE  00A5               	movwf	?___llmod
  7124  01CF  3001               	movlw	low (_dpowers| (0+32768))
  7125  01D0  0084               	movwf	4
  7126  01D1  3088               	movlw	high (_dpowers| (0+32768))
  7127  01D2  0085               	movwf	5
  7128  01D3  0844               	movf	sprintf@prec,w
  7129  01D4  00B6               	movwf	??_sprintf
  7130  01D5  3001               	movlw	1
  7131  01D6                     u3005:	
  7132  01D6  35B6               	lslf	??_sprintf,f
  7133  01D7  3EFF               	addlw	-1
  7134  01D8  1D03               	skipz
  7135  01D9  29D6               	goto	u3005
  7136  01DA  3536               	lslf	??_sprintf,w
  7137  01DB  0784               	addwf	4,f
  7138  01DC  1803               	skipnc
  7139  01DD  0A85               	incf	5,f
  7140  01DE  3F00               	moviw [0]fsr0
  7141  01DF  00F1               	movwf	?___lldiv
  7142  01E0  3F01               	moviw [1]fsr0
  7143  01E1  00F2               	movwf	?___lldiv+1
  7144  01E2  3F02               	moviw [2]fsr0
  7145  01E3  00F3               	movwf	?___lldiv+2
  7146  01E4  3F03               	moviw [3]fsr0
  7147  01E5  00F4               	movwf	?___lldiv+3
  7148  01E6  0840               	movf	sprintf@_val+3,w
  7149  01E7  00F8               	movwf	?___lldiv+7
  7150  01E8  083F               	movf	sprintf@_val+2,w
  7151  01E9  00F7               	movwf	?___lldiv+6
  7152  01EA  083E               	movf	sprintf@_val+1,w
  7153  01EB  00F6               	movwf	?___lldiv+5
  7154  01EC  083D               	movf	sprintf@_val,w
  7155  01ED  00F5               	movwf	?___lldiv+4
  7156  01EE  318E  2652  3180   	fcall	___lldiv
  7157  01F1  0874               	movf	?___lldiv+3,w
  7158  01F2  0020               	movlb	0	; select bank0
  7159  01F3  00AC               	movwf	?___llmod+7
  7160  01F4  0873               	movf	?___lldiv+2,w
  7161  01F5  00AB               	movwf	?___llmod+6
  7162  01F6  0872               	movf	?___lldiv+1,w
  7163  01F7  00AA               	movwf	?___llmod+5
  7164  01F8  0871               	movf	?___lldiv,w
  7165  01F9  00A9               	movwf	?___llmod+4
  7166  01FA  318D  2578  3180   	fcall	___llmod
  7167  01FD  0020               	movlb	0	; select bank0
  7168  01FE  0825               	movf	?___llmod,w
  7169  01FF  3E30               	addlw	48
  7170  0200  00B7               	movwf	??_sprintf+1
  7171  0201  0837               	movf	??_sprintf+1,w
  7172  0202  00C6               	movwf	sprintf@c
  7173                           
  7174                           ;doprnt.c: 1530: }
  7175                           ;doprnt.c: 1531: ((*sp++ = (c)));
  7176  0203  0846               	movf	sprintf@c,w
  7177  0204  00B6               	movwf	??_sprintf
  7178  0205  0841               	movf	sprintf@sp,w
  7179  0206  0086               	movwf	6
  7180  0207  3001               	movlw	1	; select bank2/3
  7181  0208  0087               	movwf	7
  7182  0209  0836               	movf	??_sprintf,w
  7183  020A  0081               	movwf	1
  7184  020B  3001               	movlw	1
  7185  020C  00B6               	movwf	??_sprintf
  7186  020D  0836               	movf	??_sprintf,w
  7187  020E  07C1               	addwf	sprintf@sp,f
  7188  020F                     l3582:	
  7189  020F  30FF               	movlw	255
  7190  0210  07C4               	addwf	sprintf@prec,f
  7191  0211  30FF               	movlw	255
  7192  0212  3DC5               	addwfc	sprintf@prec+1,f
  7193  0213  30FF               	movlw	255
  7194  0214  0645               	xorwf	sprintf@prec+1,w
  7195  0215  1D03               	skipz
  7196  0216  2A19               	goto	u3015
  7197  0217  30FF               	movlw	255
  7198  0218  0644               	xorwf	sprintf@prec,w
  7199  0219                     u3015:	
  7200  0219  1903               	btfsc	3,2
  7201  021A  284C               	goto	l3584
  7202  021B  29C7               	goto	l3576
  7203  021C                     l3586:	
  7204                           ;doprnt.c: 1532: }
  7205                           ;doprnt.c: 1540: }
  7206                           ;doprnt.c: 1542: alldone:
  7207                           
  7208                           
  7209                           ;doprnt.c: 1545: *sp = 0;
  7210  021C  0841               	movf	sprintf@sp,w
  7211  021D  0086               	movwf	6
  7212  021E  3001               	movlw	1	; select bank2/3
  7213  021F  0087               	movwf	7
  7214  0220  0181               	clrf	1
  7215  0221  0008               	return
  7216  0222                     __end_of_sprintf:	
  7217                           ;doprnt.c: 1547: return 0;
  7218                           ;	Return value of _sprintf is never used
  7219                           
  7220                           
  7221                           	psect	text31
  7222  0A84                     __ptext31:	
  7223 ;; *************** function ___wmul *****************
  7224 ;; Defined at:
  7225 ;;		line 3 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\wmul.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;  multiplier      2    1[COMMON] unsigned int 
  7228 ;;  multiplicand    2    3[COMMON] unsigned int 
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;  product         2    5[COMMON] unsigned int 
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  2    1[COMMON] unsigned int 
  7233 ;; Registers used:
  7234 ;;		wreg, status,2, status,0
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        6 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    2
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		_sprintf
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function ___wmul
  7256  0A84                     ___wmul:	
  7257                           
  7258                           ;incstack = 0
  7259                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7260  0A84  01F5               	clrf	___wmul@product
  7261  0A85  01F6               	clrf	___wmul@product+1
  7262  0A86                     l3936:	
  7263  0A86  1C71               	btfss	___wmul@multiplier,0
  7264  0A87  2A8C               	goto	l1048
  7265  0A88  0873               	movf	___wmul@multiplicand,w
  7266  0A89  07F5               	addwf	___wmul@product,f
  7267  0A8A  0874               	movf	___wmul@multiplicand+1,w
  7268  0A8B  3DF6               	addwfc	___wmul@product+1,f
  7269  0A8C                     l1048:	
  7270  0A8C  3001               	movlw	1
  7271  0A8D                     u3915:	
  7272  0A8D  35F3               	lslf	___wmul@multiplicand,f
  7273  0A8E  0DF4               	rlf	___wmul@multiplicand+1,f
  7274  0A8F  0B89               	decfsz	9,f
  7275  0A90  2A8D               	goto	u3915
  7276  0A91  3001               	movlw	1
  7277  0A92                     u3925:	
  7278  0A92  36F2               	lsrf	___wmul@multiplier+1,f
  7279  0A93  0CF1               	rrf	___wmul@multiplier,f
  7280  0A94  0B89               	decfsz	9,f
  7281  0A95  2A92               	goto	u3925
  7282  0A96  0872               	movf	___wmul@multiplier+1,w
  7283  0A97  0471               	iorwf	___wmul@multiplier,w
  7284  0A98  1D03               	skipz
  7285  0A99  2A86               	goto	l3936
  7286  0A9A  0876               	movf	___wmul@product+1,w
  7287  0A9B  01F2               	clrf	?___wmul+1
  7288  0A9C  07F2               	addwf	?___wmul+1,f
  7289  0A9D  0875               	movf	___wmul@product,w
  7290  0A9E  01F1               	clrf	?___wmul
  7291  0A9F  07F1               	addwf	?___wmul,f
  7292  0AA0  0008               	return
  7293  0AA1                     __end_of___wmul:	
  7294                           
  7295                           	psect	text32
  7296  0D78                     __ptext32:	
  7297 ;; *************** function ___llmod *****************
  7298 ;; Defined at:
  7299 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\llmod.c"
  7300 ;; Parameters:    Size  Location     Type
  7301 ;;  divisor         4    5[BANK0 ] unsigned long 
  7302 ;;  dividend        4    9[BANK0 ] unsigned long 
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  counter         1   11[COMMON] unsigned char 
  7305 ;; Return value:  Size  Location     Type
  7306 ;;                  4    5[BANK0 ] unsigned long 
  7307 ;; Registers used:
  7308 ;;		wreg, status,2, status,0
  7309 ;; Tracked objects:
  7310 ;;		On entry : 0/0
  7311 ;;		On exit  : 0/0
  7312 ;;		Unchanged: 0/0
  7313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7314 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7317 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7318 ;;Total ram usage:       10 bytes
  7319 ;; Hardware stack levels used:    1
  7320 ;; Hardware stack levels required when called:    2
  7321 ;; This function calls:
  7322 ;;		Nothing
  7323 ;; This function is called by:
  7324 ;;		_sprintf
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           
  7329                           ;psect for function ___llmod
  7330  0D78                     ___llmod:	
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  7334  0D78  0020               	movlb	0	; select bank0
  7335  0D79  0828               	movf	___llmod@divisor+3,w
  7336  0D7A  0427               	iorwf	___llmod@divisor+2,w
  7337  0D7B  0426               	iorwf	___llmod@divisor+1,w
  7338  0D7C  0425               	iorwf	___llmod@divisor,w
  7339  0D7D  1903               	skipnz
  7340  0D7E  2DB2               	goto	l3920
  7341  0D7F  01FB               	clrf	___llmod@counter
  7342  0D80  0AFB               	incf	___llmod@counter,f
  7343  0D81                     l3910:	
  7344  0D81  1BA8               	btfsc	___llmod@divisor+3,7
  7345  0D82  2D8F               	goto	l3912
  7346  0D83  3001               	movlw	1
  7347  0D84                     u3835:	
  7348  0D84  35A5               	lslf	___llmod@divisor,f
  7349  0D85  0DA6               	rlf	___llmod@divisor+1,f
  7350  0D86  0DA7               	rlf	___llmod@divisor+2,f
  7351  0D87  0DA8               	rlf	___llmod@divisor+3,f
  7352  0D88  0B89               	decfsz	9,f
  7353  0D89  2D84               	goto	u3835
  7354  0D8A  3001               	movlw	1
  7355  0D8B  00FA               	movwf	??___llmod
  7356  0D8C  087A               	movf	??___llmod,w
  7357  0D8D  07FB               	addwf	___llmod@counter,f
  7358  0D8E  2D81               	goto	l3910
  7359  0D8F                     l3912:	
  7360  0D8F  0828               	movf	___llmod@divisor+3,w
  7361  0D90  022C               	subwf	___llmod@dividend+3,w
  7362  0D91  1D03               	skipz
  7363  0D92  2D9D               	goto	u3855
  7364  0D93  0827               	movf	___llmod@divisor+2,w
  7365  0D94  022B               	subwf	___llmod@dividend+2,w
  7366  0D95  1D03               	skipz
  7367  0D96  2D9D               	goto	u3855
  7368  0D97  0826               	movf	___llmod@divisor+1,w
  7369  0D98  022A               	subwf	___llmod@dividend+1,w
  7370  0D99  1D03               	skipz
  7371  0D9A  2D9D               	goto	u3855
  7372  0D9B  0825               	movf	___llmod@divisor,w
  7373  0D9C  0229               	subwf	___llmod@dividend,w
  7374  0D9D                     u3855:	
  7375  0D9D  1C03               	skipc
  7376  0D9E  2DA7               	goto	l3916
  7377  0D9F  0825               	movf	___llmod@divisor,w
  7378  0DA0  02A9               	subwf	___llmod@dividend,f
  7379  0DA1  0826               	movf	___llmod@divisor+1,w
  7380  0DA2  3BAA               	subwfb	___llmod@dividend+1,f
  7381  0DA3  0827               	movf	___llmod@divisor+2,w
  7382  0DA4  3BAB               	subwfb	___llmod@dividend+2,f
  7383  0DA5  0828               	movf	___llmod@divisor+3,w
  7384  0DA6  3BAC               	subwfb	___llmod@dividend+3,f
  7385  0DA7                     l3916:	
  7386  0DA7  3001               	movlw	1
  7387  0DA8                     u3865:	
  7388  0DA8  36A8               	lsrf	___llmod@divisor+3,f
  7389  0DA9  0CA7               	rrf	___llmod@divisor+2,f
  7390  0DAA  0CA6               	rrf	___llmod@divisor+1,f
  7391  0DAB  0CA5               	rrf	___llmod@divisor,f
  7392  0DAC  0B89               	decfsz	9,f
  7393  0DAD  2DA8               	goto	u3865
  7394  0DAE  3001               	movlw	1
  7395  0DAF  02FB               	subwf	___llmod@counter,f
  7396  0DB0  1D03               	btfss	3,2
  7397  0DB1  2D8F               	goto	l3912
  7398  0DB2                     l3920:	
  7399  0DB2  082C               	movf	___llmod@dividend+3,w
  7400  0DB3  00A8               	movwf	?___llmod+3
  7401  0DB4  082B               	movf	___llmod@dividend+2,w
  7402  0DB5  00A7               	movwf	?___llmod+2
  7403  0DB6  082A               	movf	___llmod@dividend+1,w
  7404  0DB7  00A6               	movwf	?___llmod+1
  7405  0DB8  0829               	movf	___llmod@dividend,w
  7406  0DB9  00A5               	movwf	?___llmod
  7407  0DBA  0008               	return
  7408  0DBB                     __end_of___llmod:	
  7409                           
  7410                           	psect	text33
  7411  0E52                     __ptext33:	
  7412 ;; *************** function ___lldiv *****************
  7413 ;; Defined at:
  7414 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lldiv.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  divisor         4    1[COMMON] unsigned long 
  7417 ;;  dividend        4    5[COMMON] unsigned long 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  quotient        4    0[BANK0 ] unsigned long 
  7420 ;;  counter         1    4[BANK0 ] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  4    1[COMMON] unsigned long 
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, status,0
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7430 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7433 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7434 ;;Total ram usage:       14 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    2
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_sprintf
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function ___lldiv
  7446  0E52                     ___lldiv:	
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7450  0E52  3000               	movlw	0
  7451  0E53  0020               	movlb	0	; select bank0
  7452  0E54  00A3               	movwf	___lldiv@quotient+3
  7453  0E55  3000               	movlw	0
  7454  0E56  00A2               	movwf	___lldiv@quotient+2
  7455  0E57  3000               	movlw	0
  7456  0E58  00A1               	movwf	___lldiv@quotient+1
  7457  0E59  3000               	movlw	0
  7458  0E5A  00A0               	movwf	___lldiv@quotient
  7459  0E5B  0874               	movf	___lldiv@divisor+3,w
  7460  0E5C  0473               	iorwf	___lldiv@divisor+2,w
  7461  0E5D  0472               	iorwf	___lldiv@divisor+1,w
  7462  0E5E  0471               	iorwf	___lldiv@divisor,w
  7463  0E5F  1903               	skipnz
  7464  0E60  2E9C               	goto	l3900
  7465  0E61  01A4               	clrf	___lldiv@counter
  7466  0E62  0AA4               	incf	___lldiv@counter,f
  7467  0E63                     l3886:	
  7468  0E63  1BF4               	btfsc	___lldiv@divisor+3,7
  7469  0E64  2E71               	goto	l3888
  7470  0E65  3001               	movlw	1
  7471  0E66                     u3765:	
  7472  0E66  35F1               	lslf	___lldiv@divisor,f
  7473  0E67  0DF2               	rlf	___lldiv@divisor+1,f
  7474  0E68  0DF3               	rlf	___lldiv@divisor+2,f
  7475  0E69  0DF4               	rlf	___lldiv@divisor+3,f
  7476  0E6A  0B89               	decfsz	9,f
  7477  0E6B  2E66               	goto	u3765
  7478  0E6C  3001               	movlw	1
  7479  0E6D  00F9               	movwf	??___lldiv
  7480  0E6E  0879               	movf	??___lldiv,w
  7481  0E6F  07A4               	addwf	___lldiv@counter,f
  7482  0E70  2E63               	goto	l3886
  7483  0E71                     l3888:	
  7484  0E71  3001               	movlw	1
  7485  0E72                     u3785:	
  7486  0E72  35A0               	lslf	___lldiv@quotient,f
  7487  0E73  0DA1               	rlf	___lldiv@quotient+1,f
  7488  0E74  0DA2               	rlf	___lldiv@quotient+2,f
  7489  0E75  0DA3               	rlf	___lldiv@quotient+3,f
  7490  0E76  0B89               	decfsz	9,f
  7491  0E77  2E72               	goto	u3785
  7492  0E78  0874               	movf	___lldiv@divisor+3,w
  7493  0E79  0278               	subwf	___lldiv@dividend+3,w
  7494  0E7A  1D03               	skipz
  7495  0E7B  2E86               	goto	u3795
  7496  0E7C  0873               	movf	___lldiv@divisor+2,w
  7497  0E7D  0277               	subwf	___lldiv@dividend+2,w
  7498  0E7E  1D03               	skipz
  7499  0E7F  2E86               	goto	u3795
  7500  0E80  0872               	movf	___lldiv@divisor+1,w
  7501  0E81  0276               	subwf	___lldiv@dividend+1,w
  7502  0E82  1D03               	skipz
  7503  0E83  2E86               	goto	u3795
  7504  0E84  0871               	movf	___lldiv@divisor,w
  7505  0E85  0275               	subwf	___lldiv@dividend,w
  7506  0E86                     u3795:	
  7507  0E86  1C03               	skipc
  7508  0E87  2E91               	goto	l3896
  7509  0E88  0871               	movf	___lldiv@divisor,w
  7510  0E89  02F5               	subwf	___lldiv@dividend,f
  7511  0E8A  0872               	movf	___lldiv@divisor+1,w
  7512  0E8B  3BF6               	subwfb	___lldiv@dividend+1,f
  7513  0E8C  0873               	movf	___lldiv@divisor+2,w
  7514  0E8D  3BF7               	subwfb	___lldiv@dividend+2,f
  7515  0E8E  0874               	movf	___lldiv@divisor+3,w
  7516  0E8F  3BF8               	subwfb	___lldiv@dividend+3,f
  7517  0E90  1420               	bsf	___lldiv@quotient,0
  7518  0E91                     l3896:	
  7519  0E91  3001               	movlw	1
  7520  0E92                     u3805:	
  7521  0E92  36F4               	lsrf	___lldiv@divisor+3,f
  7522  0E93  0CF3               	rrf	___lldiv@divisor+2,f
  7523  0E94  0CF2               	rrf	___lldiv@divisor+1,f
  7524  0E95  0CF1               	rrf	___lldiv@divisor,f
  7525  0E96  0B89               	decfsz	9,f
  7526  0E97  2E92               	goto	u3805
  7527  0E98  3001               	movlw	1
  7528  0E99  02A4               	subwf	___lldiv@counter,f
  7529  0E9A  1D03               	btfss	3,2
  7530  0E9B  2E71               	goto	l3888
  7531  0E9C                     l3900:	
  7532  0E9C  0823               	movf	___lldiv@quotient+3,w
  7533  0E9D  00F4               	movwf	?___lldiv+3
  7534  0E9E  0822               	movf	___lldiv@quotient+2,w
  7535  0E9F  00F3               	movwf	?___lldiv+2
  7536  0EA0  0821               	movf	___lldiv@quotient+1,w
  7537  0EA1  00F2               	movwf	?___lldiv+1
  7538  0EA2  0820               	movf	___lldiv@quotient,w
  7539  0EA3  00F1               	movwf	?___lldiv
  7540  0EA4  0008               	return
  7541  0EA5                     __end_of___lldiv:	
  7542                           
  7543                           	psect	text34
  7544  08B9                     __ptext34:	
  7545 ;; *************** function _isdigit *****************
  7546 ;; Defined at:
  7547 ;;		line 13 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\isdigit.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  c               1    wreg     unsigned char 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  c               1    2[COMMON] unsigned char 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;		None               void
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;Total ram usage:        2 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    2
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_sprintf
  7572 ;; This function uses a non-reentrant model
  7573 ;;
  7574                           
  7575                           
  7576                           ;psect for function _isdigit
  7577  08B9                     _isdigit:	
  7578                           
  7579                           ;incstack = 0
  7580                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7581                           ;isdigit@c stored from wreg
  7582  08B9  00F2               	movwf	isdigit@c
  7583  08BA  01F1               	clrf	_isdigit$1010
  7584  08BB  303A               	movlw	58
  7585  08BC  0272               	subwf	isdigit@c,w
  7586  08BD  1803               	skipnc
  7587  08BE  28C5               	goto	l3598
  7588  08BF  3030               	movlw	48
  7589  08C0  0272               	subwf	isdigit@c,w
  7590  08C1  1C03               	skipc
  7591  08C2  28C5               	goto	l3598
  7592  08C3  01F1               	clrf	_isdigit$1010
  7593  08C4  0AF1               	incf	_isdigit$1010,f
  7594  08C5                     l3598:	
  7595  08C5  0C71               	rrf	_isdigit$1010,w
  7596  08C6  0008               	return
  7597  08C7                     __end_of_isdigit:	
  7598                           
  7599                           	psect	text35
  7600  0DBB                     __ptext35:	
  7601 ;; *************** function _DPYSendStr *****************
  7602 ;; Defined at:
  7603 ;;		line 139 in file "DPY.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;  row             1    wreg     unsigned char 
  7606 ;;  col             1    0[BANK0 ] unsigned char 
  7607 ;;  data            2    1[BANK0 ] PTR unsigned char 
  7608 ;;		 -> strTemp(16), strTitle(12), 
  7609 ;;  len             1    3[BANK0 ] unsigned char 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  row             1    7[BANK0 ] unsigned char 
  7612 ;;  i               1    6[BANK0 ] unsigned char 
  7613 ;; Return value:  Size  Location     Type
  7614 ;;		None               void
  7615 ;; Registers used:
  7616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7617 ;; Tracked objects:
  7618 ;;		On entry : 0/0
  7619 ;;		On exit  : 0/0
  7620 ;;		Unchanged: 0/0
  7621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;Total ram usage:        8 bytes
  7627 ;; Hardware stack levels used:    1
  7628 ;; Hardware stack levels required when called:    5
  7629 ;; This function calls:
  7630 ;;		_DPYSetCur
  7631 ;;		_DPYSendChar
  7632 ;;		_DPYIsBusy
  7633 ;; This function is called by:
  7634 ;;		_RTXUpdateDisplay
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function _DPYSendStr
  7640  0DBB                     _DPYSendStr:	
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _DPYSendStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7644                           ;DPYSendStr@row stored from wreg
  7645  0DBB  0020               	movlb	0	; select bank0
  7646  0DBC  00A7               	movwf	DPYSendStr@row
  7647                           
  7648                           ;DPY.c: 140: unsigned char i;
  7649                           ;DPY.c: 143: DPYSetCur(row,col);
  7650  0DBD  0820               	movf	DPYSendStr@col,w
  7651  0DBE  00A4               	movwf	??_DPYSendStr
  7652  0DBF  0824               	movf	??_DPYSendStr,w
  7653  0DC0  00F8               	movwf	?_DPYSetCur
  7654  0DC1  0827               	movf	DPYSendStr@row,w
  7655  0DC2  3189  2169  318D   	fcall	_DPYSetCur
  7656                           
  7657                           ;DPY.c: 145: for(i=0;i<len;i++)
  7658  0DC5  0020               	movlb	0	; select bank0
  7659  0DC6  01A6               	clrf	DPYSendStr@i
  7660  0DC7                     l4178:	
  7661  0DC7  0823               	movf	DPYSendStr@len,w
  7662  0DC8  0226               	subwf	DPYSendStr@i,w
  7663  0DC9  1803               	btfsc	3,0
  7664  0DCA  0008               	return
  7665                           
  7666                           ;DPY.c: 146: {
  7667                           ;DPY.c: 148: DPYSendChar((*(data+i)));
  7668  0DCB  0826               	movf	DPYSendStr@i,w
  7669  0DCC  00A4               	movwf	??_DPYSendStr
  7670  0DCD  01A5               	clrf	??_DPYSendStr+1
  7671  0DCE  0824               	movf	??_DPYSendStr,w
  7672  0DCF  0721               	addwf	DPYSendStr@data,w
  7673  0DD0  0086               	movwf	6
  7674  0DD1  0825               	movf	??_DPYSendStr+1,w
  7675  0DD2  3D22               	addwfc	DPYSendStr@data+1,w
  7676  0DD3  0087               	movwf	7
  7677  0DD4  0801               	movf	1,w
  7678  0DD5  3188  2069  318D   	fcall	_DPYSendChar
  7679  0DD8                     l4158:	
  7680                           ;DPY.c: 149: while(DPYIsBusy())
  7681                           
  7682  0DD8  318D  2538  318D   	fcall	_DPYIsBusy
  7683  0DDB  3800               	iorlw	0
  7684  0DDC  1903               	btfsc	3,2
  7685  0DDD  2DE0               	goto	l4160
  7686                           
  7687                           ;DPY.c: 150: _nop();
  7688  0DDE  0000               	nop
  7689  0DDF  2DD8               	goto	l4158
  7690  0DE0                     l4160:	
  7691                           
  7692                           ;DPY.c: 153: col++;
  7693  0DE0  3001               	movlw	1
  7694  0DE1  0020               	movlb	0	; select bank0
  7695  0DE2  00A4               	movwf	??_DPYSendStr
  7696  0DE3  0824               	movf	??_DPYSendStr,w
  7697  0DE4  07A0               	addwf	DPYSendStr@col,f
  7698                           
  7699                           ;DPY.c: 154: if(col==16)
  7700  0DE5  0820               	movf	DPYSendStr@col,w
  7701  0DE6  3A10               	xorlw	16
  7702  0DE7  1D03               	skipz
  7703  0DE8  2DEF               	goto	l4170
  7704                           
  7705                           ;DPY.c: 155: {
  7706                           ;DPY.c: 156: col=0;
  7707  0DE9  01A0               	clrf	DPYSendStr@col
  7708                           
  7709                           ;DPY.c: 157: row++;
  7710  0DEA  3001               	movlw	1
  7711  0DEB  00A4               	movwf	??_DPYSendStr
  7712  0DEC  0824               	movf	??_DPYSendStr,w
  7713  0DED  07A7               	addwf	DPYSendStr@row,f
  7714  0DEE  2DF6               	goto	L3
  7715  0DEF                     l4170:	
  7716                           ;DPY.c: 159: }
  7717                           
  7718                           ;DPY.c: 158: DPYSetCur(row,col);
  7719                           
  7720                           
  7721                           ;DPY.c: 160: else if(col==32)
  7722  0DEF  0020               	movlb	0	; select bank0
  7723  0DF0  0820               	movf	DPYSendStr@col,w
  7724  0DF1  3A20               	xorlw	32
  7725  0DF2  1D03               	skipz
  7726  0DF3  2DFE               	goto	l4176
  7727                           
  7728                           ;DPY.c: 161: {
  7729                           ;DPY.c: 162: col=0;
  7730  0DF4  01A0               	clrf	DPYSendStr@col
  7731                           
  7732                           ;DPY.c: 163: row=0;
  7733  0DF5  01A7               	clrf	DPYSendStr@row
  7734  0DF6                     L3:	
  7735                           
  7736                           ;DPY.c: 164: DPYSetCur(row,col);
  7737  0DF6  0820               	movf	DPYSendStr@col,w
  7738  0DF7  00A4               	movwf	??_DPYSendStr
  7739  0DF8  0824               	movf	??_DPYSendStr,w
  7740  0DF9  00F8               	movwf	?_DPYSetCur
  7741  0DFA  0827               	movf	DPYSendStr@row,w
  7742  0DFB  3189  2169  318D   	fcall	_DPYSetCur
  7743  0DFE                     l4176:	
  7744  0DFE  3001               	movlw	1
  7745  0DFF  0020               	movlb	0	; select bank0
  7746  0E00  00A4               	movwf	??_DPYSendStr
  7747  0E01  0824               	movf	??_DPYSendStr,w
  7748  0E02  07A6               	addwf	DPYSendStr@i,f
  7749  0E03  2DC7               	goto	l4178
  7750  0E04                     __end_of_DPYSendStr:	
  7751                           
  7752                           	psect	text36
  7753  0D38                     __ptext36:	
  7754 ;; *************** function _DPYIsBusy *****************
  7755 ;; Defined at:
  7756 ;;		line 316 in file "DPY.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;		None
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  bf              1    6[COMMON] enum E1832
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      enum E1832
  7763 ;; Registers used:
  7764 ;;		wreg, status,2, status,0, pclath, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;Total ram usage:        2 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    3
  7777 ;; This function calls:
  7778 ;;		_DLYDelay_us
  7779 ;; This function is called by:
  7780 ;;		_DPYSendStr
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function _DPYIsBusy
  7786  0D38                     _DPYIsBusy:	
  7787                           
  7788                           ;DPY.c: 317: te_DPY_BF bf;
  7789                           ;DPY.c: 320: TRISA|=0b00001111;
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in _DPYIsBusy: [wreg+status,2+status,0+pclath+cstack]
  7793  0D38  300F               	movlw	15
  7794  0D39  00F5               	movwf	??_DPYIsBusy
  7795  0D3A  0875               	movf	??_DPYIsBusy,w
  7796  0D3B  0021               	movlb	1	; select bank1
  7797  0D3C  048C               	iorwf	12,f	;volatile
  7798                           
  7799                           ;DPY.c: 323: LATAbits.LATA4=0;
  7800  0D3D  0022               	movlb	2	; select bank2
  7801  0D3E  120C               	bcf	12,4	;volatile
  7802                           
  7803                           ;DPY.c: 326: LATAbits.LATA6=0;
  7804  0D3F  130C               	bcf	12,6	;volatile
  7805                           
  7806                           ;DPY.c: 329: LATAbits.LATA7=1;
  7807  0D40  178C               	bsf	12,7	;volatile
  7808                           
  7809                           ;DPY.c: 332: DLYDelay_us(100);
  7810  0D41  3064               	movlw	100
  7811  0D42  00F1               	movwf	?_DLYDelay_us
  7812  0D43  3000               	movlw	0
  7813  0D44  00F2               	movwf	?_DLYDelay_us+1
  7814  0D45  3188  20D5  318D   	fcall	_DLYDelay_us
  7815                           
  7816                           ;DPY.c: 335: LATAbits.LATA4=1;
  7817  0D48  0022               	movlb	2	; select bank2
  7818  0D49  160C               	bsf	12,4	;volatile
  7819                           
  7820                           ;DPY.c: 337: bf=BF_NOTBUSY;
  7821  0D4A  01F6               	clrf	DPYIsBusy@bf
  7822                           
  7823                           ;DPY.c: 338: if(PORTAbits.RA0)
  7824  0D4B  0020               	movlb	0	; select bank0
  7825  0D4C  1C0C               	btfss	12,0	;volatile
  7826  0D4D  2D50               	goto	l4198
  7827                           
  7828                           ;DPY.c: 339: bf=BF_BUSY;
  7829  0D4E  01F6               	clrf	DPYIsBusy@bf
  7830  0D4F  0AF6               	incf	DPYIsBusy@bf,f
  7831  0D50                     l4198:	
  7832                           
  7833                           ;DPY.c: 341: DLYDelay_us(100);
  7834  0D50  3064               	movlw	100
  7835  0D51  00F1               	movwf	?_DLYDelay_us
  7836  0D52  3000               	movlw	0
  7837  0D53  00F2               	movwf	?_DLYDelay_us+1
  7838  0D54  3188  20D5  318D   	fcall	_DLYDelay_us
  7839                           
  7840                           ;DPY.c: 343: LATAbits.LATA4=0;
  7841  0D57  0022               	movlb	2	; select bank2
  7842  0D58  120C               	bcf	12,4	;volatile
  7843                           
  7844                           ;DPY.c: 345: DLYDelay_us(100);
  7845  0D59  3064               	movlw	100
  7846  0D5A  00F1               	movwf	?_DLYDelay_us
  7847  0D5B  3000               	movlw	0
  7848  0D5C  00F2               	movwf	?_DLYDelay_us+1
  7849  0D5D  3188  20D5  318D   	fcall	_DLYDelay_us
  7850                           
  7851                           ;DPY.c: 347: LATAbits.LATA4=1;
  7852  0D60  0022               	movlb	2	; select bank2
  7853  0D61  160C               	bsf	12,4	;volatile
  7854                           
  7855                           ;DPY.c: 349: DLYDelay_us(100);
  7856  0D62  3064               	movlw	100
  7857  0D63  00F1               	movwf	?_DLYDelay_us
  7858  0D64  3000               	movlw	0
  7859  0D65  00F2               	movwf	?_DLYDelay_us+1
  7860  0D66  3188  20D5  318D   	fcall	_DLYDelay_us
  7861                           
  7862                           ;DPY.c: 351: LATAbits.LATA4=0;
  7863  0D69  0022               	movlb	2	; select bank2
  7864  0D6A  120C               	bcf	12,4	;volatile
  7865                           
  7866                           ;DPY.c: 353: DLYDelay_us(100);
  7867  0D6B  3064               	movlw	100
  7868  0D6C  00F1               	movwf	?_DLYDelay_us
  7869  0D6D  3000               	movlw	0
  7870  0D6E  00F2               	movwf	?_DLYDelay_us+1
  7871  0D6F  3188  20D5         	fcall	_DLYDelay_us
  7872                           
  7873                           ;DPY.c: 356: TRISA&=0b11110000;
  7874  0D71  30F0               	movlw	240
  7875  0D72  00F5               	movwf	??_DPYIsBusy
  7876  0D73  0875               	movf	??_DPYIsBusy,w
  7877  0D74  0021               	movlb	1	; select bank1
  7878  0D75  058C               	andwf	12,f	;volatile
  7879                           
  7880                           ;DPY.c: 358: return bf;
  7881  0D76  0876               	movf	DPYIsBusy@bf,w
  7882  0D77  0008               	return
  7883  0D78                     __end_of_DPYIsBusy:	
  7884                           
  7885                           	psect	text37
  7886  0869                     __ptext37:	
  7887 ;; *************** function _DPYSendChar *****************
  7888 ;; Defined at:
  7889 ;;		line 133 in file "DPY.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  c               1    wreg     unsigned char 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  c               1    9[COMMON] unsigned char 
  7894 ;; Return value:  Size  Location     Type
  7895 ;;		None               void
  7896 ;; Registers used:
  7897 ;;		wreg, status,2, status,0, pclath, cstack
  7898 ;; Tracked objects:
  7899 ;;		On entry : 0/0
  7900 ;;		On exit  : 0/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7905 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;Total ram usage:        2 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    4
  7910 ;; This function calls:
  7911 ;;		_DPYWriteByte
  7912 ;; This function is called by:
  7913 ;;		_DPYSendStr
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           
  7918                           ;psect for function _DPYSendChar
  7919  0869                     _DPYSendChar:	
  7920                           
  7921                           ;incstack = 0
  7922                           ; Regs used in _DPYSendChar: [wreg+status,2+status,0+pclath+cstack]
  7923                           ;DPYSendChar@c stored from wreg
  7924  0869  00F9               	movwf	DPYSendChar@c
  7925                           
  7926                           ;DPY.c: 135: DPYWriteByte(RS_DATA,c);
  7927  086A  0879               	movf	DPYSendChar@c,w
  7928  086B  00F8               	movwf	??_DPYSendChar
  7929  086C  0878               	movf	??_DPYSendChar,w
  7930  086D  00F5               	movwf	?_DPYWriteByte
  7931  086E  3001               	movlw	1
  7932  086F  318F  274D         	fcall	_DPYWriteByte
  7933  0871  0008               	return
  7934  0872                     __end_of_DPYSendChar:	
  7935                           
  7936                           	psect	text38
  7937  0969                     __ptext38:	
  7938 ;; *************** function _DPYSetCur *****************
  7939 ;; Defined at:
  7940 ;;		line 119 in file "DPY.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;  row             1    wreg     unsigned char 
  7943 ;;  col             1    8[COMMON] unsigned char 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;  row             1   10[COMMON] unsigned char 
  7946 ;;  addr            1   11[COMMON] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;		None               void
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0, pclath, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7956 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;Total ram usage:        4 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    4
  7963 ;; This function calls:
  7964 ;;		_DPYWriteByte
  7965 ;; This function is called by:
  7966 ;;		_DPYSendStr
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _DPYSetCur
  7972  0969                     _DPYSetCur:	
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in _DPYSetCur: [wreg+status,2+status,0+pclath+cstack]
  7976                           ;DPYSetCur@row stored from wreg
  7977  0969  00FA               	movwf	DPYSetCur@row
  7978                           
  7979                           ;DPY.c: 120: unsigned char addr;
  7980                           ;DPY.c: 123: addr=col;
  7981  096A  0878               	movf	DPYSetCur@col,w
  7982  096B  00F9               	movwf	??_DPYSetCur
  7983  096C  0879               	movf	??_DPYSetCur,w
  7984  096D  00FB               	movwf	DPYSetCur@addr
  7985                           
  7986                           ;DPY.c: 125: if(row==1)
  7987  096E  087A               	movf	DPYSetCur@row,w
  7988  096F  3A01               	xorlw	1
  7989  0970  1D03               	skipz
  7990  0971  2976               	goto	l4148
  7991                           
  7992                           ;DPY.c: 126: addr+=0x40;
  7993  0972  3040               	movlw	64
  7994  0973  00F9               	movwf	??_DPYSetCur
  7995  0974  0879               	movf	??_DPYSetCur,w
  7996  0975  07FB               	addwf	DPYSetCur@addr,f
  7997  0976                     l4148:	
  7998                           
  7999                           ;DPY.c: 129: DPYWriteByte(RS_ISTRUCTION,(addr|0b10000000));
  8000  0976  087B               	movf	DPYSetCur@addr,w
  8001  0977  3880               	iorlw	128
  8002  0978  00F9               	movwf	??_DPYSetCur
  8003  0979  0879               	movf	??_DPYSetCur,w
  8004  097A  00F5               	movwf	?_DPYWriteByte
  8005  097B  3000               	movlw	0
  8006  097C  318F  274D         	fcall	_DPYWriteByte
  8007  097E  0008               	return
  8008  097F                     __end_of_DPYSetCur:	
  8009                           
  8010                           	psect	text39
  8011  09C6                     __ptext39:	
  8012 ;; *************** function _PGMInit *****************
  8013 ;; Defined at:
  8014 ;;		line 23 in file "PGM.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;  state           1    wreg     unsigned char 
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;  state           1   70[BANK0 ] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;		None               void
  8021 ;; Registers used:
  8022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : 0/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;Total ram usage:        1 bytes
  8033 ;; Hardware stack levels used:    1
  8034 ;; Hardware stack levels required when called:    6
  8035 ;; This function calls:
  8036 ;;		_PGMReadNvm
  8037 ;;		_PGMCheckNvm
  8038 ;; This function is called by:
  8039 ;;		_main
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           
  8044                           ;psect for function _PGMInit
  8045  09C6                     _PGMInit:	
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8049                           ;PGMInit@state stored from wreg
  8050  09C6  0020               	movlb	0	; select bank0
  8051  09C7  00E6               	movwf	PGMInit@state
  8052                           
  8053                           ;PGM.c: 24: switch(state)
  8054  09C8  29D5               	goto	l4262
  8055  09C9                     l4252:	
  8056                           ;PGM.c: 25: {
  8057                           ;PGM.c: 26: case 0:
  8058                           
  8059                           
  8060                           ;PGM.c: 28: T1CON=0b00000001;
  8061  09C9  3001               	movlw	1
  8062  09CA  0098               	movwf	24	;volatile
  8063                           
  8064                           ;PGM.c: 29: break;
  8065  09CB  0008               	return
  8066  09CC                     l4254:	
  8067                           ;PGM.c: 30: case 1:
  8068                           
  8069                           
  8070                           ;PGM.c: 32: tmrPgm=0;
  8071  09CC  01EA               	clrf	_tmrPgm
  8072                           
  8073                           ;PGM.c: 33: pgm_flg.val=0;
  8074  09CD  0021               	movlb	1	; select bank1
  8075  09CE  01A8               	clrf	_pgm_flg^(0+128)
  8076                           
  8077                           ;PGM.c: 34: PGMReadNvm();
  8078  09CF  3189  211C  3189   	fcall	_PGMReadNvm
  8079                           
  8080                           ;PGM.c: 35: PGMCheckNvm();
  8081  09D2  3188  2087         	fcall	_PGMCheckNvm
  8082                           
  8083                           ;PGM.c: 40: }
  8084                           
  8085                           ;PGM.c: 36: break;
  8086  09D4  0008               	return
  8087  09D5                     l4262:	
  8088  09D5  0020               	movlb	0	; select bank0
  8089  09D6  0866               	movf	PGMInit@state,w
  8090                           
  8091                           ; Switch size 1, requested type "space"
  8092                           ; Number of cases is 2, Range of values is 0 to 1
  8093                           ; switch strategies available:
  8094                           ; Name         Instructions Cycles
  8095                           ; simple_byte            7     4 (average)
  8096                           ; direct_byte           10     6 (fixed)
  8097                           ; jumptable            260     6 (fixed)
  8098                           ;	Chosen strategy is simple_byte
  8099  09D7  3A00               	xorlw	0	; case 0
  8100  09D8  1903               	skipnz
  8101  09D9  29C9               	goto	l4252
  8102  09DA  3A01               	xorlw	1	; case 1
  8103  09DB  1903               	skipnz
  8104  09DC  29CC               	goto	l4254
  8105  09DD  29DE               	goto	l356
  8106  09DE                     l356:	
  8107  09DE  0008               	return
  8108  09DF                     __end_of_PGMInit:	
  8109                           
  8110                           	psect	text40
  8111  0887                     __ptext40:	
  8112 ;; *************** function _PGMCheckNvm *****************
  8113 ;; Defined at:
  8114 ;;		line 65 in file "PGM.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:        0 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    5
  8135 ;; This function calls:
  8136 ;;		_PGMNvmReset
  8137 ;; This function is called by:
  8138 ;;		_PGMInit
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function _PGMCheckNvm
  8144  0887                     _PGMCheckNvm:	
  8145                           
  8146                           ;PGM.c: 66: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8150  0887  0021               	movlb	1	; select bank1
  8151  0888  084C               	movf	_pgm_cfg^(0+128),w
  8152  0889  3AC5               	xorlw	197
  8153  088A  1D03               	skipz
  8154  088B  2890               	goto	l4268
  8155  088C  084D               	movf	(_pgm_cfg^(0+128)+1),w
  8156  088D  3A5C               	xorlw	92
  8157  088E  1903               	skipnz
  8158  088F  0008               	return
  8159  0890                     l4268:	
  8160                           
  8161                           ;PGM.c: 67: PGMNvmReset();
  8162  0890  3189  2142         	fcall	_PGMNvmReset
  8163  0892  0008               	return
  8164  0893                     __end_of_PGMCheckNvm:	
  8165                           
  8166                           	psect	text41
  8167  0942                     __ptext41:	
  8168 ;; *************** function _PGMNvmReset *****************
  8169 ;; Defined at:
  8170 ;;		line 71 in file "PGM.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;		None
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;		None
  8175 ;; Return value:  Size  Location     Type
  8176 ;;		None               void
  8177 ;; Registers used:
  8178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;Total ram usage:        1 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    4
  8191 ;; This function calls:
  8192 ;;		_PGMWriteNvm
  8193 ;; This function is called by:
  8194 ;;		_PGMCheckNvm
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           
  8199                           ;psect for function _PGMNvmReset
  8200  0942                     _PGMNvmReset:	
  8201                           
  8202                           ;PGM.c: 73: pgm_cfg.valChk1=0xC5;
  8203                           
  8204                           ;incstack = 0
  8205                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8206  0942  30C5               	movlw	197
  8207  0943  0020               	movlb	0	; select bank0
  8208  0944  00E5               	movwf	??_PGMNvmReset
  8209  0945  0865               	movf	??_PGMNvmReset,w
  8210  0946  0021               	movlb	1	; select bank1
  8211  0947  00CC               	movwf	_pgm_cfg^(0+128)
  8212                           
  8213                           ;PGM.c: 74: pgm_cfg.valChk2=0x5C;
  8214  0948  305C               	movlw	92
  8215  0949  0020               	movlb	0	; select bank0
  8216  094A  00E5               	movwf	??_PGMNvmReset
  8217  094B  0865               	movf	??_PGMNvmReset,w
  8218  094C  0021               	movlb	1	; select bank1
  8219  094D  00CD               	movwf	(_pgm_cfg^(0+128)+1)
  8220                           
  8221                           ;PGM.c: 75: pgm_cfg.menu=0x00;
  8222  094E  01CE               	clrf	(_pgm_cfg^(0+128)+2)
  8223                           
  8224                           ;PGM.c: 76: pgm_cfg.sensId=0x00;
  8225  094F  01CF               	clrf	(_pgm_cfg^(0+128)+3)
  8226                           
  8227                           ;PGM.c: 77: pgm_cfg.baseId=0x00;
  8228  0950  01D0               	clrf	(_pgm_cfg^(0+128)+4)
  8229                           
  8230                           ;PGM.c: 79: PGMWriteNvm();
  8231  0951  3189  212F         	fcall	_PGMWriteNvm
  8232  0953  0001               	reset	;# 
  8233  0954  0008               	return
  8234  0955                     __end_of_PGMNvmReset:	
  8235                           
  8236                           	psect	text42
  8237  092F                     __ptext42:	
  8238 ;; *************** function _PGMWriteNvm *****************
  8239 ;; Defined at:
  8240 ;;		line 60 in file "PGM.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;		None
  8245 ;; Return value:  Size  Location     Type
  8246 ;;		None               void
  8247 ;; Registers used:
  8248 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;Total ram usage:        4 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    3
  8261 ;; This function calls:
  8262 ;;		_NVMWrite
  8263 ;; This function is called by:
  8264 ;;		_PGMNvmReset
  8265 ;;		_PGMSelLong
  8266 ;;		_RTXReadPkt
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           
  8271                           ;psect for function _PGMWriteNvm
  8272  092F                     _PGMWriteNvm:	
  8273                           
  8274                           ;PGM.c: 61: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  8275                           
  8276                           ;incstack = 0
  8277                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8278  092F  3029               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  8279  0930  00F8               	movwf	??_PGMWriteNvm
  8280  0931  3088               	movlw	(high __stringtab)| (0+128)
  8281  0932  00F9               	movwf	??_PGMWriteNvm+1
  8282  0933  0878               	movf	??_PGMWriteNvm,w
  8283  0934  00F1               	movwf	?_NVMWrite
  8284  0935  0879               	movf	??_PGMWriteNvm+1,w
  8285  0936  00F2               	movwf	?_NVMWrite+1
  8286  0937  30CC               	movlw	_pgm_cfg& (0+255)
  8287  0938  00FA               	movwf	??_PGMWriteNvm+2
  8288  0939  087A               	movf	??_PGMWriteNvm+2,w
  8289  093A  00F3               	movwf	?_NVMWrite+2
  8290  093B  3005               	movlw	5
  8291  093C  00FB               	movwf	??_PGMWriteNvm+3
  8292  093D  087B               	movf	??_PGMWriteNvm+3,w
  8293  093E  00F4               	movwf	?_NVMWrite+3
  8294  093F  3184  24DE         	fcall	_NVMWrite
  8295  0941  0008               	return
  8296  0942                     __end_of_PGMWriteNvm:	
  8297                           
  8298                           	psect	text43
  8299  04DE                     __ptext43:	
  8300 ;; *************** function _NVMWrite *****************
  8301 ;; Defined at:
  8302 ;;		line 39 in file "NVM.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;  addr            2    1[COMMON] unsigned short 
  8305 ;;  source          1    3[COMMON] PTR unsigned char 
  8306 ;;		 -> pgm_cfg(5), 
  8307 ;;  len             1    4[COMMON] unsigned char 
  8308 ;; Auto vars:     Size  Location     Type
  8309 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  8310 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  8311 ;;  j               1   68[BANK0 ] unsigned char 
  8312 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  8313 ;;  i               1   66[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;		None               void
  8316 ;; Registers used:
  8317 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8323 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;Total ram usage:       76 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    2
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_PGMWriteNvm
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           
  8338                           ;psect for function _NVMWrite
  8339  04DE                     _NVMWrite:	
  8340                           
  8341                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  8342                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  8343                           ;NVM.c: 43: INTCONbits.GIE=0;
  8344                           
  8345                           ;incstack = 0
  8346                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8347  04DE  138B               	bcf	11,7	;volatile
  8348                           
  8349                           ;NVM.c: 44: PMCON1bits.WREN=1;
  8350  04DF  0023               	movlb	3	; select bank3
  8351  04E0  1515               	bsf	21,2	;volatile
  8352                           
  8353                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  8354  04E1  1315               	bcf	21,6	;volatile
  8355                           
  8356                           ;NVM.c: 48: i=0;
  8357  04E2  0020               	movlb	0	; select bank0
  8358  04E3  01E2               	clrf	NVMWrite@i
  8359                           
  8360                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  8361  04E4  30E0               	movlw	224
  8362  04E5  0571               	andwf	NVMWrite@addr,w
  8363  04E6  00E0               	movwf	NVMWrite@rowAddr
  8364  04E7  30FF               	movlw	255
  8365  04E8  0572               	andwf	NVMWrite@addr+1,w
  8366  04E9  00E1               	movwf	NVMWrite@rowAddr+1
  8367                           
  8368                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  8369  04EA  0871               	movf	NVMWrite@addr,w
  8370  04EB  391F               	andlw	31
  8371  04EC  00F5               	movwf	??_NVMWrite
  8372  04ED  0875               	movf	??_NVMWrite,w
  8373  04EE  00E3               	movwf	NVMWrite@latchAddr
  8374  04EF                     l163:	
  8375                           ;NVM.c: 52: while(i<len)
  8376                           
  8377  04EF  0874               	movf	NVMWrite@len,w
  8378  04F0  0262               	subwf	NVMWrite@i,w
  8379  04F1  1803               	btfsc	3,0
  8380  04F2  2D98               	goto	l183
  8381  04F3  0064               	clrwdt	;# 
  8382                           
  8383                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8384  04F4  0020               	movlb	0	; select bank0
  8385  04F5  01E4               	clrf	NVMWrite@j
  8386  04F6  3020               	movlw	32
  8387  04F7  0264               	subwf	NVMWrite@j,w
  8388  04F8  1803               	btfsc	3,0
  8389  04F9  2D1E               	goto	l166
  8390  04FA                     l165:	
  8391  04FA  0064               	clrwdt	;# 
  8392                           
  8393                           ;NVM.c: 60: PMADR=(rowAddr+j);
  8394  04FB  0020               	movlb	0	; select bank0
  8395  04FC  0864               	movf	NVMWrite@j,w
  8396  04FD  0760               	addwf	NVMWrite@rowAddr,w
  8397  04FE  00F5               	movwf	??_NVMWrite
  8398  04FF  0861               	movf	NVMWrite@rowAddr+1,w
  8399  0500  1803               	skipnc
  8400  0501  0A61               	incf	NVMWrite@rowAddr+1,w
  8401  0502  00F6               	movwf	??_NVMWrite+1
  8402  0503  0875               	movf	??_NVMWrite,w
  8403  0504  0023               	movlb	3	; select bank3
  8404  0505  0091               	movwf	17	;volatile
  8405  0506  0876               	movf	??_NVMWrite+1,w
  8406  0507  0092               	movwf	18	;volatile
  8407                           
  8408                           ;NVM.c: 61: PMCON1bits.RD=1;
  8409  0508  1415               	bsf	21,0	;volatile
  8410  0509                     l167:	
  8411                           ;NVM.c: 62: while(PMCON1bits.RD);
  8412                           
  8413  0509  1815               	btfsc	21,0	;volatile
  8414  050A  2D09               	goto	l167
  8415                           
  8416                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  8417  050B  0020               	movlb	0	; select bank0
  8418  050C  3564               	lslf	NVMWrite@j,w
  8419  050D  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  8420  050E  0086               	movwf	6
  8421  050F  0187               	clrf	7
  8422  0510  0023               	movlb	3	; select bank3
  8423  0511  0813               	movf	19,w	;volatile
  8424  0512  3FC0               	movwi [0]fsr1
  8425  0513  0814               	movf	20,w	;volatile
  8426  0514  3FC1               	movwi [1]fsr1
  8427  0515  3001               	movlw	1
  8428  0516  00F5               	movwf	??_NVMWrite
  8429  0517  0875               	movf	??_NVMWrite,w
  8430  0518  0020               	movlb	0	; select bank0
  8431  0519  07E4               	addwf	NVMWrite@j,f
  8432  051A  3020               	movlw	32
  8433  051B  0264               	subwf	NVMWrite@j,w
  8434  051C  1C03               	skipc
  8435  051D  2CFA               	goto	l165
  8436  051E                     l166:	
  8437                           
  8438                           ;NVM.c: 64: }
  8439                           ;NVM.c: 67: PMCON1bits.FREE=1;
  8440  051E  0023               	movlb	3	; select bank3
  8441  051F  1615               	bsf	21,4	;volatile
  8442                           
  8443                           ;NVM.c: 68: PMADR=rowAddr;
  8444  0520  0020               	movlb	0	; select bank0
  8445  0521  0861               	movf	NVMWrite@rowAddr+1,w
  8446  0522  0023               	movlb	3	; select bank3
  8447  0523  0192               	clrf	18	;volatile
  8448  0524  0792               	addwf	18,f	;volatile
  8449  0525  0020               	movlb	0	; select bank0
  8450  0526  0860               	movf	NVMWrite@rowAddr,w
  8451  0527  0023               	movlb	3	; select bank3
  8452  0528  0191               	clrf	17	;volatile
  8453  0529  0791               	addwf	17,f	;volatile
  8454                           
  8455                           ;NVM.c: 69: PMCON2=0x55;
  8456  052A  3055               	movlw	85
  8457  052B  0096               	movwf	22	;volatile
  8458                           
  8459                           ;NVM.c: 70: PMCON2=0xAA;
  8460  052C  30AA               	movlw	170
  8461  052D  0096               	movwf	22	;volatile
  8462                           
  8463                           ;NVM.c: 71: PMCON1bits.WR=1;
  8464  052E  1495               	bsf	21,1	;volatile
  8465  052F                     l170:	
  8466                           ;NVM.c: 72: while(PMCON1bits.WR);
  8467                           
  8468  052F  1895               	btfsc	21,1	;volatile
  8469  0530  2D2F               	goto	l170
  8470                           
  8471                           ;NVM.c: 73: _nop();
  8472  0531  0000               	nop
  8473                           
  8474                           ;NVM.c: 74: _nop();
  8475  0532  0000               	nop
  8476                           
  8477                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  8478  0533  3020               	movlw	32
  8479  0534  0020               	movlb	0	; select bank0
  8480  0535  0263               	subwf	NVMWrite@latchAddr,w
  8481  0536  1803               	btfsc	3,0
  8482  0537  2D5B               	goto	l2878
  8483  0538                     l173:	
  8484  0538  0064               	clrwdt	;# 
  8485                           
  8486                           ;NVM.c: 81: if(i>=len)
  8487  0539  0874               	movf	NVMWrite@len,w
  8488  053A  0020               	movlb	0	; select bank0
  8489  053B  0262               	subwf	NVMWrite@i,w
  8490  053C  1803               	btfsc	3,0
  8491  053D  2D5B               	goto	l2878
  8492                           
  8493                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  8494                           
  8495                           ;NVM.c: 82: break;
  8496  053E  0862               	movf	NVMWrite@i,w
  8497  053F  0773               	addwf	NVMWrite@source,w
  8498  0540  00F5               	movwf	??_NVMWrite
  8499  0541  0875               	movf	??_NVMWrite,w
  8500  0542  0086               	movwf	6
  8501  0543  0187               	clrf	7
  8502  0544  0801               	movf	1,w
  8503  0545  00F6               	movwf	??_NVMWrite+1
  8504  0546  01F7               	clrf	??_NVMWrite+2
  8505  0547  3563               	lslf	NVMWrite@latchAddr,w
  8506  0548  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  8507  0549  0086               	movwf	6
  8508  054A  0187               	clrf	7
  8509  054B  0876               	movf	??_NVMWrite+1,w
  8510  054C  3FC0               	movwi [0]fsr1
  8511  054D  0877               	movf	??_NVMWrite+2,w
  8512  054E  3FC1               	movwi [1]fsr1
  8513                           
  8514                           ;NVM.c: 85: i++;
  8515  054F  3001               	movlw	1
  8516  0550  00F5               	movwf	??_NVMWrite
  8517  0551  0875               	movf	??_NVMWrite,w
  8518  0552  07E2               	addwf	NVMWrite@i,f
  8519  0553  3001               	movlw	1
  8520  0554  00F5               	movwf	??_NVMWrite
  8521  0555  0875               	movf	??_NVMWrite,w
  8522  0556  07E3               	addwf	NVMWrite@latchAddr,f
  8523  0557  3020               	movlw	32
  8524  0558  0263               	subwf	NVMWrite@latchAddr,w
  8525  0559  1C03               	skipc
  8526  055A  2D38               	goto	l173
  8527  055B                     l2878:	
  8528                           
  8529                           ;NVM.c: 86: }
  8530                           ;NVM.c: 88: latchAddr=0;
  8531  055B  01E3               	clrf	NVMWrite@latchAddr
  8532                           
  8533                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8534  055C  01E4               	clrf	NVMWrite@j
  8535  055D  3020               	movlw	32
  8536  055E  0264               	subwf	NVMWrite@j,w
  8537  055F  1803               	btfsc	3,0
  8538  0560  2D93               	goto	l2900
  8539  0561                     l2884:	
  8540                           
  8541                           ;NVM.c: 92: {
  8542                           ;NVM.c: 94: PMADR=(rowAddr+j);
  8543  0561  0864               	movf	NVMWrite@j,w
  8544  0562  0760               	addwf	NVMWrite@rowAddr,w
  8545  0563  00F5               	movwf	??_NVMWrite
  8546  0564  0861               	movf	NVMWrite@rowAddr+1,w
  8547  0565  1803               	skipnc
  8548  0566  0A61               	incf	NVMWrite@rowAddr+1,w
  8549  0567  00F6               	movwf	??_NVMWrite+1
  8550  0568  0875               	movf	??_NVMWrite,w
  8551  0569  0023               	movlb	3	; select bank3
  8552  056A  0091               	movwf	17	;volatile
  8553  056B  0876               	movf	??_NVMWrite+1,w
  8554  056C  0092               	movwf	18	;volatile
  8555                           
  8556                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  8557  056D  0020               	movlb	0	; select bank0
  8558  056E  3564               	lslf	NVMWrite@j,w
  8559  056F  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  8560  0570  0086               	movwf	6
  8561  0571  0187               	clrf	7
  8562  0572  3F40               	moviw [0]fsr1
  8563  0573  0023               	movlb	3	; select bank3
  8564  0574  0093               	movwf	19	;volatile
  8565  0575  3F41               	moviw [1]fsr1
  8566  0576  0094               	movwf	20	;volatile
  8567                           
  8568                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  8569  0577  0020               	movlb	0	; select bank0
  8570  0578  0864               	movf	NVMWrite@j,w
  8571  0579  3A1F               	xorlw	31
  8572  057A  1D03               	skipz
  8573  057B  2D7F               	goto	l178
  8574                           
  8575                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  8576  057C  0023               	movlb	3	; select bank3
  8577  057D  1295               	bcf	21,5	;volatile
  8578  057E  2D81               	goto	l2892
  8579  057F                     l178:	
  8580                           
  8581                           ;NVM.c: 99: else
  8582                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  8583  057F  0023               	movlb	3	; select bank3
  8584  0580  1695               	bsf	21,5	;volatile
  8585  0581                     l2892:	
  8586                           
  8587                           ;NVM.c: 101: PMCON2=0x55;
  8588  0581  3055               	movlw	85
  8589  0582  0096               	movwf	22	;volatile
  8590                           
  8591                           ;NVM.c: 102: PMCON2=0xAA;
  8592  0583  30AA               	movlw	170
  8593  0584  0096               	movwf	22	;volatile
  8594                           
  8595                           ;NVM.c: 103: PMCON1bits.WR=1;
  8596  0585  1495               	bsf	21,1	;volatile
  8597  0586                     l180:	
  8598                           ;NVM.c: 104: while(PMCON1bits.WR);
  8599                           
  8600  0586  1895               	btfsc	21,1	;volatile
  8601  0587  2D86               	goto	l180
  8602                           
  8603                           ;NVM.c: 105: _nop();
  8604  0588  0000               	nop
  8605                           
  8606                           ;NVM.c: 106: _nop();
  8607  0589  0000               	nop
  8608  058A  3001               	movlw	1
  8609  058B  00F5               	movwf	??_NVMWrite
  8610  058C  0875               	movf	??_NVMWrite,w
  8611  058D  0020               	movlb	0	; select bank0
  8612  058E  07E4               	addwf	NVMWrite@j,f
  8613  058F  3020               	movlw	32
  8614  0590  0264               	subwf	NVMWrite@j,w
  8615  0591  1C03               	skipc
  8616  0592  2D61               	goto	l2884
  8617  0593                     l2900:	
  8618                           
  8619                           ;NVM.c: 107: }
  8620                           ;NVM.c: 109: rowAddr+=0x0020;
  8621  0593  3020               	movlw	32
  8622  0594  07E0               	addwf	NVMWrite@rowAddr,f
  8623  0595  3000               	movlw	0
  8624  0596  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  8625  0597  2CEF               	goto	l163
  8626  0598                     l183:	
  8627                           
  8628                           ;NVM.c: 110: }
  8629                           ;NVM.c: 112: INTCONbits.GIE=1;
  8630  0598  178B               	bsf	11,7	;volatile
  8631                           
  8632                           ;NVM.c: 113: PMCON1bits.WREN=0;
  8633  0599  0023               	movlb	3	; select bank3
  8634  059A  1115               	bcf	21,2	;volatile
  8635  059B  0008               	return
  8636  059C                     __end_of_NVMWrite:	
  8637                           
  8638                           	psect	text44
  8639  091C                     __ptext44:	
  8640 ;; *************** function _PGMReadNvm *****************
  8641 ;; Defined at:
  8642 ;;		line 55 in file "PGM.c"
  8643 ;; Parameters:    Size  Location     Type
  8644 ;;		None
  8645 ;; Auto vars:     Size  Location     Type
  8646 ;;		None
  8647 ;; Return value:  Size  Location     Type
  8648 ;;		None               void
  8649 ;; Registers used:
  8650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8651 ;; Tracked objects:
  8652 ;;		On entry : 0/0
  8653 ;;		On exit  : 0/0
  8654 ;;		Unchanged: 0/0
  8655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8659 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8660 ;;Total ram usage:        4 bytes
  8661 ;; Hardware stack levels used:    1
  8662 ;; Hardware stack levels required when called:    3
  8663 ;; This function calls:
  8664 ;;		_NVMRead
  8665 ;; This function is called by:
  8666 ;;		_PGMInit
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           
  8671                           ;psect for function _PGMReadNvm
  8672  091C                     _PGMReadNvm:	
  8673                           
  8674                           ;PGM.c: 56: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  8675                           
  8676                           ;incstack = 0
  8677                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8678  091C  3029               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  8679  091D  00F8               	movwf	??_PGMReadNvm
  8680  091E  3088               	movlw	(high __stringtab)| (0+128)
  8681  091F  00F9               	movwf	??_PGMReadNvm+1
  8682  0920  0878               	movf	??_PGMReadNvm,w
  8683  0921  00F1               	movwf	?_NVMRead
  8684  0922  0879               	movf	??_PGMReadNvm+1,w
  8685  0923  00F2               	movwf	?_NVMRead+1
  8686  0924  30CC               	movlw	_pgm_cfg& (0+255)
  8687  0925  00FA               	movwf	??_PGMReadNvm+2
  8688  0926  087A               	movf	??_PGMReadNvm+2,w
  8689  0927  00F3               	movwf	?_NVMRead+2
  8690  0928  3005               	movlw	5
  8691  0929  00FB               	movwf	??_PGMReadNvm+3
  8692  092A  087B               	movf	??_PGMReadNvm+3,w
  8693  092B  00F4               	movwf	?_NVMRead+3
  8694  092C  3187  27DA         	fcall	_NVMRead
  8695  092E  0008               	return
  8696  092F                     __end_of_PGMReadNvm:	
  8697                           
  8698                           	psect	text45
  8699  07DA                     __ptext45:	
  8700 ;; *************** function _NVMRead *****************
  8701 ;; Defined at:
  8702 ;;		line 24 in file "NVM.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  addr            2    1[COMMON] unsigned short 
  8705 ;;  dest            1    3[COMMON] PTR unsigned char 
  8706 ;;		 -> pgm_cfg(5), 
  8707 ;;  len             1    4[COMMON] unsigned char 
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;  i               1    7[COMMON] unsigned char 
  8710 ;; Return value:  Size  Location     Type
  8711 ;;		None               void
  8712 ;; Registers used:
  8713 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : 0/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;Total ram usage:        7 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; Hardware stack levels required when called:    2
  8726 ;; This function calls:
  8727 ;;		Nothing
  8728 ;; This function is called by:
  8729 ;;		_PGMReadNvm
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _NVMRead
  8735  07DA                     _NVMRead:	
  8736                           
  8737                           ;NVM.c: 25: unsigned char i;
  8738                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  8739                           
  8740                           ;incstack = 0
  8741                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8742  07DA  0023               	movlb	3	; select bank3
  8743  07DB  1315               	bcf	21,6	;volatile
  8744                           
  8745                           ;NVM.c: 28: for(i=0;i<len;i++)
  8746  07DC  01F7               	clrf	NVMRead@i
  8747  07DD                     l2830:	
  8748  07DD  0874               	movf	NVMRead@len,w
  8749  07DE  0277               	subwf	NVMRead@i,w
  8750  07DF  1803               	btfsc	3,0
  8751  07E0  0008               	return
  8752  07E1  0064               	clrwdt	;# 
  8753                           
  8754                           ;NVM.c: 31: PMADR=(addr+i);
  8755  07E2  0877               	movf	NVMRead@i,w
  8756  07E3  0771               	addwf	NVMRead@addr,w
  8757  07E4  00F5               	movwf	??_NVMRead
  8758  07E5  0872               	movf	NVMRead@addr+1,w
  8759  07E6  1803               	skipnc
  8760  07E7  0A72               	incf	NVMRead@addr+1,w
  8761  07E8  00F6               	movwf	??_NVMRead+1
  8762  07E9  0875               	movf	??_NVMRead,w
  8763  07EA  0023               	movlb	3	; select bank3
  8764  07EB  0091               	movwf	17	;volatile
  8765  07EC  0876               	movf	??_NVMRead+1,w
  8766  07ED  0092               	movwf	18	;volatile
  8767                           
  8768                           ;NVM.c: 32: PMCON1bits.RD=1;
  8769  07EE  1415               	bsf	21,0	;volatile
  8770  07EF                     l156:	
  8771                           ;NVM.c: 33: while(PMCON1bits.RD);
  8772                           
  8773  07EF  1815               	btfsc	21,0	;volatile
  8774  07F0  2FEF               	goto	l156
  8775                           
  8776                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  8777  07F1  0813               	movf	19,w	;volatile
  8778  07F2  00F5               	movwf	??_NVMRead
  8779  07F3  0877               	movf	NVMRead@i,w
  8780  07F4  0773               	addwf	NVMRead@dest,w
  8781  07F5  00F6               	movwf	??_NVMRead+1
  8782  07F6  0876               	movf	??_NVMRead+1,w
  8783  07F7  0086               	movwf	6
  8784  07F8  0187               	clrf	7
  8785  07F9  0875               	movf	??_NVMRead,w
  8786  07FA  0081               	movwf	1
  8787  07FB  3001               	movlw	1
  8788  07FC  00F5               	movwf	??_NVMRead
  8789  07FD  0875               	movf	??_NVMRead,w
  8790  07FE  07F7               	addwf	NVMRead@i,f
  8791  07FF  2FDD               	goto	l2830
  8792  0800                     __end_of_NVMRead:	
  8793                           
  8794                           	psect	text46
  8795  0909                     __ptext46:	
  8796 ;; *************** function _DPYInit *****************
  8797 ;; Defined at:
  8798 ;;		line 43 in file "DPY.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;  sta             1    wreg     unsigned char 
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;  sta             1    4[BANK0 ] unsigned char 
  8803 ;; Return value:  Size  Location     Type
  8804 ;;		None               void
  8805 ;; Registers used:
  8806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;Total ram usage:        1 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    6
  8819 ;; This function calls:
  8820 ;;		_DPYInitDisplay
  8821 ;; This function is called by:
  8822 ;;		_main
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           
  8827                           ;psect for function _DPYInit
  8828  0909                     _DPYInit:	
  8829                           
  8830                           ;incstack = 0
  8831                           ; Regs used in _DPYInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8832                           ;DPYInit@sta stored from wreg
  8833  0909  0020               	movlb	0	; select bank0
  8834  090A  00A4               	movwf	DPYInit@sta
  8835                           
  8836                           ;DPY.c: 44: switch(sta)
  8837  090B  290F               	goto	l4070
  8838  090C                     l4066:	
  8839                           ;DPY.c: 52: case 2:
  8840                           
  8841                           ;DPY.c: 51: break;
  8842                           
  8843                           ;DPY.c: 49: case 1:
  8844                           
  8845                           ;DPY.c: 48: break;
  8846                           
  8847                           ;DPY.c: 45: {
  8848                           ;DPY.c: 46: case 0:
  8849                           
  8850                           
  8851                           ;DPY.c: 54: DPYInitDisplay();
  8852  090C  318C  24FA         	fcall	_DPYInitDisplay
  8853                           
  8854                           ;DPY.c: 56: }
  8855                           
  8856                           ;DPY.c: 55: break;
  8857  090E  0008               	return
  8858  090F                     l4070:	
  8859  090F  0020               	movlb	0	; select bank0
  8860  0910  0824               	movf	DPYInit@sta,w
  8861                           
  8862                           ; Switch size 1, requested type "space"
  8863                           ; Number of cases is 3, Range of values is 0 to 2
  8864                           ; switch strategies available:
  8865                           ; Name         Instructions Cycles
  8866                           ; simple_byte           10     6 (average)
  8867                           ; direct_byte           12     6 (fixed)
  8868                           ; jumptable            260     6 (fixed)
  8869                           ;	Chosen strategy is simple_byte
  8870  0911  3A00               	xorlw	0	; case 0
  8871  0912  1903               	skipnz
  8872  0913  291B               	goto	l258
  8873  0914  3A01               	xorlw	1	; case 1
  8874  0915  1903               	skipnz
  8875  0916  291B               	goto	l258
  8876  0917  3A03               	xorlw	3	; case 2
  8877  0918  1903               	skipnz
  8878  0919  290C               	goto	l4066
  8879  091A  291B               	goto	l258
  8880  091B                     l258:	
  8881  091B  0008               	return
  8882  091C                     __end_of_DPYInit:	
  8883                           
  8884                           	psect	text47
  8885  0CFA                     __ptext47:	
  8886 ;; *************** function _DPYInitDisplay *****************
  8887 ;; Defined at:
  8888 ;;		line 60 in file "DPY.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;		None
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  tmp             1    3[BANK0 ] unsigned char 
  8893 ;; Return value:  Size  Location     Type
  8894 ;;		None               void
  8895 ;; Registers used:
  8896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8905 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;Total ram usage:        2 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    5
  8909 ;; This function calls:
  8910 ;;		_DLYDelay_ms
  8911 ;;		_DPYWriteNibble
  8912 ;;		_DPYWriteByte
  8913 ;;		_DPYDrawChar
  8914 ;; This function is called by:
  8915 ;;		_DPYInit
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           
  8920                           ;psect for function _DPYInitDisplay
  8921  0CFA                     _DPYInitDisplay:	
  8922                           
  8923                           ;DPY.c: 61: unsigned char tmp;
  8924                           ;DPY.c: 63: DLYDelay_ms(15);
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _DPYInitDisplay: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8928  0CFA  300F               	movlw	15
  8929  0CFB  00F1               	movwf	?_DLYDelay_ms
  8930  0CFC  3000               	movlw	0
  8931  0CFD  00F2               	movwf	?_DLYDelay_ms+1
  8932  0CFE  3189  21AD  318C   	fcall	_DLYDelay_ms
  8933                           
  8934                           ;DPY.c: 64: LATAbits.LATA6=0;
  8935  0D01  0022               	movlb	2	; select bank2
  8936  0D02  130C               	bcf	12,6	;volatile
  8937                           
  8938                           ;DPY.c: 65: LATAbits.LATA7=0;
  8939  0D03  138C               	bcf	12,7	;volatile
  8940                           
  8941                           ;DPY.c: 75: DPYWriteNibble(RS_ISTRUCTION,0b00000010);
  8942  0D04  3002               	movlw	2
  8943  0D05  00FB               	movwf	??_DPYInitDisplay
  8944  0D06  087B               	movf	??_DPYInitDisplay,w
  8945  0D07  00F5               	movwf	?_DPYWriteNibble
  8946  0D08  3000               	movlw	0
  8947  0D09  318C  248D  318C   	fcall	_DPYWriteNibble
  8948                           
  8949                           ;DPY.c: 78: tmp=0b00100000;
  8950  0D0C  3020               	movlw	32
  8951  0D0D  00FB               	movwf	??_DPYInitDisplay
  8952  0D0E  087B               	movf	??_DPYInitDisplay,w
  8953  0D0F  0020               	movlb	0	; select bank0
  8954  0D10  00A3               	movwf	DPYInitDisplay@tmp
  8955                           
  8956                           ;DPY.c: 83: tmp|=0b00001000;
  8957  0D11  15A3               	bsf	DPYInitDisplay@tmp,3
  8958                           
  8959                           ;DPY.c: 91: DPYWriteByte(RS_ISTRUCTION,tmp);
  8960  0D12  0823               	movf	DPYInitDisplay@tmp,w
  8961  0D13  00FB               	movwf	??_DPYInitDisplay
  8962  0D14  087B               	movf	??_DPYInitDisplay,w
  8963  0D15  00F5               	movwf	?_DPYWriteByte
  8964  0D16  3000               	movlw	0
  8965  0D17  318F  274D  318C   	fcall	_DPYWriteByte
  8966                           
  8967                           ;DPY.c: 94: DPYWriteByte(RS_ISTRUCTION,0b00001110);
  8968  0D1A  300E               	movlw	14
  8969  0D1B  00FB               	movwf	??_DPYInitDisplay
  8970  0D1C  087B               	movf	??_DPYInitDisplay,w
  8971  0D1D  00F5               	movwf	?_DPYWriteByte
  8972  0D1E  3000               	movlw	0
  8973  0D1F  318F  274D  318C   	fcall	_DPYWriteByte
  8974                           
  8975                           ;DPY.c: 97: DPYWriteByte(RS_ISTRUCTION,0b00000110);
  8976  0D22  3006               	movlw	6
  8977  0D23  00FB               	movwf	??_DPYInitDisplay
  8978  0D24  087B               	movf	??_DPYInitDisplay,w
  8979  0D25  00F5               	movwf	?_DPYWriteByte
  8980  0D26  3000               	movlw	0
  8981  0D27  318F  274D  318C   	fcall	_DPYWriteByte
  8982                           
  8983                           ;DPY.c: 100: DPYWriteByte(RS_ISTRUCTION,0b00000001);
  8984  0D2A  01F5               	clrf	?_DPYWriteByte
  8985  0D2B  0AF5               	incf	?_DPYWriteByte,f
  8986  0D2C  3000               	movlw	0
  8987  0D2D  318F  274D  318C   	fcall	_DPYWriteByte
  8988                           
  8989                           ;DPY.c: 103: DPYDrawChar(0x00,picBatt);
  8990  0D30  3041               	movlw	_picBatt& (0+255)
  8991  0D31  00FB               	movwf	??_DPYInitDisplay
  8992  0D32  087B               	movf	??_DPYInitDisplay,w
  8993  0D33  00F8               	movwf	?_DPYDrawChar
  8994  0D34  3000               	movlw	0
  8995  0D35  318C  2402         	fcall	_DPYDrawChar
  8996  0D37  0008               	return
  8997  0D38                     __end_of_DPYInitDisplay:	
  8998                           
  8999                           	psect	text48
  9000  0C02                     __ptext48:	
  9001 ;; *************** function _DPYDrawChar *****************
  9002 ;; Defined at:
  9003 ;;		line 107 in file "DPY.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  addr            1    wreg     unsigned char 
  9006 ;;  p               1    8[COMMON] PTR unsigned char 
  9007 ;;		 -> picBatt(9), 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  addr            1    0[BANK0 ] unsigned char 
  9010 ;;  i               1    2[BANK0 ] unsigned char 
  9011 ;;  tmpAddr         1    1[BANK0 ] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;		None               void
  9014 ;; Registers used:
  9015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9021 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;Total ram usage:        6 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    4
  9028 ;; This function calls:
  9029 ;;		_DPYWriteByte
  9030 ;; This function is called by:
  9031 ;;		_DPYInitDisplay
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           
  9036                           ;psect for function _DPYDrawChar
  9037  0C02                     _DPYDrawChar:	
  9038                           
  9039                           ;incstack = 0
  9040                           ; Regs used in _DPYDrawChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9041                           ;DPYDrawChar@addr stored from wreg
  9042  0C02  0020               	movlb	0	; select bank0
  9043  0C03  00A0               	movwf	DPYDrawChar@addr
  9044                           
  9045                           ;DPY.c: 108: unsigned char i,tmpAddr;
  9046                           ;DPY.c: 110: for(i=0;i<9;i++)
  9047  0C04  01A2               	clrf	DPYDrawChar@i
  9048  0C05                     L4:	
  9049  0C05  3009               	movlw	9
  9050  0C06  0222               	subwf	DPYDrawChar@i,w
  9051  0C07  1803               	btfsc	3,0
  9052  0C08  0008               	return
  9053                           
  9054                           ;DPY.c: 111: {
  9055                           ;DPY.c: 112: tmpAddr=(((i+addr)&0b00111111)|0b01000000);
  9056  0C09  0822               	movf	DPYDrawChar@i,w
  9057  0C0A  0720               	addwf	DPYDrawChar@addr,w
  9058  0C0B  393F               	andlw	63
  9059  0C0C  3840               	iorlw	64
  9060  0C0D  00F9               	movwf	??_DPYDrawChar
  9061  0C0E  0879               	movf	??_DPYDrawChar,w
  9062  0C0F  00A1               	movwf	DPYDrawChar@tmpAddr
  9063                           
  9064                           ;DPY.c: 113: DPYWriteByte(RS_ISTRUCTION,tmpAddr);
  9065  0C10  0821               	movf	DPYDrawChar@tmpAddr,w
  9066  0C11  00F9               	movwf	??_DPYDrawChar
  9067  0C12  0879               	movf	??_DPYDrawChar,w
  9068  0C13  00F5               	movwf	?_DPYWriteByte
  9069  0C14  3000               	movlw	0
  9070  0C15  318F  274D  318C   	fcall	_DPYWriteByte
  9071                           
  9072                           ;DPY.c: 114: DPYWriteByte(RS_DATA,(*(p+i)));
  9073  0C18  0020               	movlb	0	; select bank0
  9074  0C19  0822               	movf	DPYDrawChar@i,w
  9075  0C1A  0778               	addwf	DPYDrawChar@p,w
  9076  0C1B  00F9               	movwf	??_DPYDrawChar
  9077  0C1C  0879               	movf	??_DPYDrawChar,w
  9078  0C1D  0086               	movwf	6
  9079  0C1E  3001               	movlw	1	; select bank2/3
  9080  0C1F  0087               	movwf	7
  9081  0C20  0801               	movf	1,w
  9082  0C21  00FA               	movwf	??_DPYDrawChar+1
  9083  0C22  087A               	movf	??_DPYDrawChar+1,w
  9084  0C23  00F5               	movwf	?_DPYWriteByte
  9085  0C24  3001               	movlw	1
  9086  0C25  318F  274D  318C   	fcall	_DPYWriteByte
  9087  0C28  3001               	movlw	1
  9088  0C29  00F9               	movwf	??_DPYDrawChar
  9089  0C2A  0879               	movf	??_DPYDrawChar,w
  9090  0C2B  0020               	movlb	0	; select bank0
  9091  0C2C  07A2               	addwf	DPYDrawChar@i,f
  9092  0C2D  2C05               	goto	L4
  9093  0C2E                     __end_of_DPYDrawChar:	
  9094                           
  9095                           	psect	text49
  9096  0F4D                     __ptext49:	
  9097 ;; *************** function _DPYWriteByte *****************
  9098 ;; Defined at:
  9099 ;;		line 203 in file "DPY.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  rs              1    wreg     enum E1828
  9102 ;;  val             1    5[COMMON] unsigned char 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;  rs              1    7[COMMON] enum E1828
  9105 ;; Return value:  Size  Location     Type
  9106 ;;		None               void
  9107 ;; Registers used:
  9108 ;;		wreg, status,2, status,0, pclath, cstack
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        3 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    3
  9121 ;; This function calls:
  9122 ;;		_OUTSetHTCDataNibble
  9123 ;;		_DLYDelay_us
  9124 ;; This function is called by:
  9125 ;;		_DPYInitDisplay
  9126 ;;		_DPYDrawChar
  9127 ;;		_DPYSetCur
  9128 ;;		_DPYSendChar
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           
  9133                           ;psect for function _DPYWriteByte
  9134  0F4D                     _DPYWriteByte:	
  9135                           
  9136                           ;incstack = 0
  9137                           ; Regs used in _DPYWriteByte: [wreg+status,2+status,0+pclath+cstack]
  9138                           ;DPYWriteByte@rs stored from wreg
  9139  0F4D  00F7               	movwf	DPYWriteByte@rs
  9140                           
  9141                           ;DPY.c: 205: LATAbits.LATA4=0;
  9142  0F4E  0022               	movlb	2	; select bank2
  9143  0F4F  120C               	bcf	12,4	;volatile
  9144                           
  9145                           ;DPY.c: 208: if(rs==RS_ISTRUCTION)
  9146  0F50  08F7               	movf	DPYWriteByte@rs,f
  9147  0F51  1D03               	skipz
  9148  0F52  2F55               	goto	l4114
  9149                           
  9150                           ;DPY.c: 209: LATAbits.LATA6=0;
  9151  0F53  130C               	bcf	12,6	;volatile
  9152  0F54  2F59               	goto	l295
  9153  0F55                     l4114:	
  9154                           
  9155                           ;DPY.c: 210: else if(rs==RS_DATA)
  9156  0F55  0877               	movf	DPYWriteByte@rs,w
  9157  0F56  3A01               	xorlw	1
  9158  0F57  1903               	btfsc	3,2
  9159                           
  9160                           ;DPY.c: 211: LATAbits.LATA6=1;
  9161  0F58  170C               	bsf	12,6	;volatile
  9162  0F59                     l295:	
  9163                           
  9164                           ;DPY.c: 214: LATAbits.LATA7=0;
  9165  0F59  138C               	bcf	12,7	;volatile
  9166                           
  9167                           ;DPY.c: 217: DLYDelay_us(100);
  9168  0F5A  3064               	movlw	100
  9169  0F5B  00F1               	movwf	?_DLYDelay_us
  9170  0F5C  3000               	movlw	0
  9171  0F5D  00F2               	movwf	?_DLYDelay_us+1
  9172  0F5E  3188  20D5  318F   	fcall	_DLYDelay_us
  9173                           
  9174                           ;DPY.c: 220: LATAbits.LATA4=1;
  9175  0F61  0022               	movlb	2	; select bank2
  9176  0F62  160C               	bsf	12,4	;volatile
  9177                           
  9178                           ;DPY.c: 222: DLYDelay_us(100);
  9179  0F63  3064               	movlw	100
  9180  0F64  00F1               	movwf	?_DLYDelay_us
  9181  0F65  3000               	movlw	0
  9182  0F66  00F2               	movwf	?_DLYDelay_us+1
  9183  0F67  3188  20D5  318F   	fcall	_DLYDelay_us
  9184                           
  9185                           ;DPY.c: 224: OUTSetHTCDataNibble((val>>4)&0b00001111);
  9186  0F6A  0875               	movf	DPYWriteByte@val,w
  9187  0F6B  00F6               	movwf	??_DPYWriteByte
  9188  0F6C  3004               	movlw	4
  9189  0F6D                     u4095:	
  9190  0F6D  36F6               	lsrf	??_DPYWriteByte,f
  9191  0F6E  0B89               	decfsz	9,f
  9192  0F6F  2F6D               	goto	u4095
  9193  0F70  0876               	movf	??_DPYWriteByte,w
  9194  0F71  390F               	andlw	15
  9195  0F72  318A  2212  318F   	fcall	_OUTSetHTCDataNibble
  9196                           
  9197                           ;DPY.c: 226: DLYDelay_us(100);
  9198  0F75  3064               	movlw	100
  9199  0F76  00F1               	movwf	?_DLYDelay_us
  9200  0F77  3000               	movlw	0
  9201  0F78  00F2               	movwf	?_DLYDelay_us+1
  9202  0F79  3188  20D5  318F   	fcall	_DLYDelay_us
  9203                           
  9204                           ;DPY.c: 228: LATAbits.LATA4=0;
  9205  0F7C  0022               	movlb	2	; select bank2
  9206  0F7D  120C               	bcf	12,4	;volatile
  9207                           
  9208                           ;DPY.c: 230: DLYDelay_us(100);
  9209  0F7E  3064               	movlw	100
  9210  0F7F  00F1               	movwf	?_DLYDelay_us
  9211  0F80  3000               	movlw	0
  9212  0F81  00F2               	movwf	?_DLYDelay_us+1
  9213  0F82  3188  20D5  318F   	fcall	_DLYDelay_us
  9214                           
  9215                           ;DPY.c: 232: LATAbits.LATA4=1;
  9216  0F85  0022               	movlb	2	; select bank2
  9217  0F86  160C               	bsf	12,4	;volatile
  9218                           
  9219                           ;DPY.c: 234: DLYDelay_us(100);
  9220  0F87  3064               	movlw	100
  9221  0F88  00F1               	movwf	?_DLYDelay_us
  9222  0F89  3000               	movlw	0
  9223  0F8A  00F2               	movwf	?_DLYDelay_us+1
  9224  0F8B  3188  20D5  318F   	fcall	_DLYDelay_us
  9225                           
  9226                           ;DPY.c: 236: OUTSetHTCDataNibble(val&0b00001111);
  9227  0F8E  0875               	movf	DPYWriteByte@val,w
  9228  0F8F  390F               	andlw	15
  9229  0F90  318A  2212  318F   	fcall	_OUTSetHTCDataNibble
  9230                           
  9231                           ;DPY.c: 238: DLYDelay_us(100);
  9232  0F93  3064               	movlw	100
  9233  0F94  00F1               	movwf	?_DLYDelay_us
  9234  0F95  3000               	movlw	0
  9235  0F96  00F2               	movwf	?_DLYDelay_us+1
  9236  0F97  3188  20D5  318F   	fcall	_DLYDelay_us
  9237                           
  9238                           ;DPY.c: 240: LATAbits.LATA4=0;
  9239  0F9A  0022               	movlb	2	; select bank2
  9240  0F9B  120C               	bcf	12,4	;volatile
  9241                           
  9242                           ;DPY.c: 242: DLYDelay_us(100);
  9243  0F9C  3064               	movlw	100
  9244  0F9D  00F1               	movwf	?_DLYDelay_us
  9245  0F9E  3000               	movlw	0
  9246  0F9F  00F2               	movwf	?_DLYDelay_us+1
  9247  0FA0  3188  20D5         	fcall	_DLYDelay_us
  9248  0FA2  0008               	return
  9249  0FA3                     __end_of_DPYWriteByte:	
  9250                           
  9251                           	psect	text50
  9252  0C8D                     __ptext50:	
  9253 ;; *************** function _DPYWriteNibble *****************
  9254 ;; Defined at:
  9255 ;;		line 170 in file "DPY.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  rs              1    wreg     enum E1828
  9258 ;;  val             1    5[COMMON] unsigned char 
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;  rs              1    6[COMMON] enum E1828
  9261 ;; Return value:  Size  Location     Type
  9262 ;;		None               void
  9263 ;; Registers used:
  9264 ;;		wreg, status,2, status,0, pclath, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        2 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    3
  9277 ;; This function calls:
  9278 ;;		_OUTSetHTCDataNibble
  9279 ;;		_DLYDelay_us
  9280 ;; This function is called by:
  9281 ;;		_DPYInitDisplay
  9282 ;; This function uses a non-reentrant model
  9283 ;;
  9284                           
  9285                           
  9286                           ;psect for function _DPYWriteNibble
  9287  0C8D                     _DPYWriteNibble:	
  9288                           
  9289                           ;incstack = 0
  9290                           ; Regs used in _DPYWriteNibble: [wreg+status,2+status,0+pclath+cstack]
  9291                           ;DPYWriteNibble@rs stored from wreg
  9292  0C8D  00F6               	movwf	DPYWriteNibble@rs
  9293                           
  9294                           ;DPY.c: 174: LATAbits.LATA4=0;
  9295  0C8E  0022               	movlb	2	; select bank2
  9296  0C8F  120C               	bcf	12,4	;volatile
  9297                           
  9298                           ;DPY.c: 177: if(rs==RS_ISTRUCTION)
  9299  0C90  08F6               	movf	DPYWriteNibble@rs,f
  9300  0C91  1D03               	skipz
  9301  0C92  2C95               	goto	l4098
  9302                           
  9303                           ;DPY.c: 178: LATAbits.LATA6=0;
  9304  0C93  130C               	bcf	12,6	;volatile
  9305  0C94  2C99               	goto	l289
  9306  0C95                     l4098:	
  9307                           
  9308                           ;DPY.c: 179: else if(rs==RS_DATA)
  9309  0C95  0876               	movf	DPYWriteNibble@rs,w
  9310  0C96  3A01               	xorlw	1
  9311  0C97  1903               	btfsc	3,2
  9312                           
  9313                           ;DPY.c: 180: LATAbits.LATA6=1;
  9314  0C98  170C               	bsf	12,6	;volatile
  9315  0C99                     l289:	
  9316                           
  9317                           ;DPY.c: 183: LATAbits.LATA7=0;
  9318  0C99  138C               	bcf	12,7	;volatile
  9319                           
  9320                           ;DPY.c: 186: DLYDelay_us(100);
  9321  0C9A  3064               	movlw	100
  9322  0C9B  00F1               	movwf	?_DLYDelay_us
  9323  0C9C  3000               	movlw	0
  9324  0C9D  00F2               	movwf	?_DLYDelay_us+1
  9325  0C9E  3188  20D5  318C   	fcall	_DLYDelay_us
  9326                           
  9327                           ;DPY.c: 189: LATAbits.LATA4=1;
  9328  0CA1  0022               	movlb	2	; select bank2
  9329  0CA2  160C               	bsf	12,4	;volatile
  9330                           
  9331                           ;DPY.c: 191: DLYDelay_us(100);
  9332  0CA3  3064               	movlw	100
  9333  0CA4  00F1               	movwf	?_DLYDelay_us
  9334  0CA5  3000               	movlw	0
  9335  0CA6  00F2               	movwf	?_DLYDelay_us+1
  9336  0CA7  3188  20D5  318C   	fcall	_DLYDelay_us
  9337                           
  9338                           ;DPY.c: 193: OUTSetHTCDataNibble(val&0x0F);
  9339  0CAA  0875               	movf	DPYWriteNibble@val,w
  9340  0CAB  390F               	andlw	15
  9341  0CAC  318A  2212  318C   	fcall	_OUTSetHTCDataNibble
  9342                           
  9343                           ;DPY.c: 195: DLYDelay_us(100);
  9344  0CAF  3064               	movlw	100
  9345  0CB0  00F1               	movwf	?_DLYDelay_us
  9346  0CB1  3000               	movlw	0
  9347  0CB2  00F2               	movwf	?_DLYDelay_us+1
  9348  0CB3  3188  20D5  318C   	fcall	_DLYDelay_us
  9349                           
  9350                           ;DPY.c: 197: LATAbits.LATA4=0;
  9351  0CB6  0022               	movlb	2	; select bank2
  9352  0CB7  120C               	bcf	12,4	;volatile
  9353                           
  9354                           ;DPY.c: 199: DLYDelay_us(100);
  9355  0CB8  3064               	movlw	100
  9356  0CB9  00F1               	movwf	?_DLYDelay_us
  9357  0CBA  3000               	movlw	0
  9358  0CBB  00F2               	movwf	?_DLYDelay_us+1
  9359  0CBC  3188  20D5         	fcall	_DLYDelay_us
  9360  0CBE  0008               	return
  9361  0CBF                     __end_of_DPYWriteNibble:	
  9362                           
  9363                           	psect	text51
  9364  08D5                     __ptext51:	
  9365 ;; *************** function _DLYDelay_us *****************
  9366 ;; Defined at:
  9367 ;;		line 7 in file "DLY.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;  val             2    1[COMMON] unsigned short 
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;  i               2    3[COMMON] unsigned short 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;		None               void
  9374 ;; Registers used:
  9375 ;;		wreg, status,2
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9381 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;Total ram usage:        4 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    2
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_DPYWriteNibble
  9392 ;;		_DPYWriteByte
  9393 ;;		_DPYIsBusy
  9394 ;;		_DPYReadByte
  9395 ;; This function uses a non-reentrant model
  9396 ;;
  9397                           
  9398                           
  9399                           ;psect for function _DLYDelay_us
  9400  08D5                     _DLYDelay_us:	
  9401                           
  9402                           ;DLY.c: 8: unsigned short i;
  9403                           ;DLY.c: 10: for(i=0;i<val;i++)
  9404                           
  9405                           ;incstack = 0
  9406                           ; Regs used in _DLYDelay_us: [wreg+status,2]
  9407  08D5  01F3               	clrf	DLYDelay_us@i
  9408  08D6  01F4               	clrf	DLYDelay_us@i+1
  9409  08D7                     l88:	
  9410  08D7  0872               	movf	DLYDelay_us@val+1,w
  9411  08D8  0274               	subwf	DLYDelay_us@i+1,w
  9412  08D9  1D03               	skipz
  9413  08DA  28DD               	goto	u4035
  9414  08DB  0871               	movf	DLYDelay_us@val,w
  9415  08DC  0273               	subwf	DLYDelay_us@i,w
  9416  08DD                     u4035:	
  9417  08DD  1803               	btfsc	3,0
  9418  08DE  0008               	return
  9419  08DF  0064               	clrwdt	;# 
  9420                           
  9421                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000000.0)));
  9422  08E0  28E1               	nop2	;2 cycle nop
  9423  08E1  3001               	movlw	1
  9424  08E2  07F3               	addwf	DLYDelay_us@i,f
  9425  08E3  3000               	movlw	0
  9426  08E4  3DF4               	addwfc	DLYDelay_us@i+1,f
  9427  08E5  28D7               	goto	l88
  9428  08E6                     __end_of_DLYDelay_us:	
  9429                           
  9430                           	psect	text52
  9431  0A12                     __ptext52:	
  9432 ;; *************** function _OUTSetHTCDataNibble *****************
  9433 ;; Defined at:
  9434 ;;		line 24 in file "OUT.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  val             1    wreg     unsigned char 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  val             1    2[COMMON] unsigned char 
  9439 ;;  dataToSet       1    3[COMMON] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;		None               void
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        3 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    2
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_DPYWriteNibble
  9460 ;;		_DPYWriteByte
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function _OUTSetHTCDataNibble
  9466  0A12                     _OUTSetHTCDataNibble:	
  9467                           
  9468                           ;incstack = 0
  9469                           ; Regs used in _OUTSetHTCDataNibble: [wreg+status,2+status,0]
  9470                           ;OUTSetHTCDataNibble@val stored from wreg
  9471  0A12  00F2               	movwf	OUTSetHTCDataNibble@val
  9472                           
  9473                           ;OUT.c: 25: unsigned char dataToSet=0;
  9474  0A13  01F3               	clrf	OUTSetHTCDataNibble@dataToSet
  9475                           
  9476                           ;OUT.c: 27: if(val&0b00000001)
  9477  0A14  1872               	btfsc	OUTSetHTCDataNibble@val,0
  9478                           
  9479                           ;OUT.c: 28: dataToSet|=0b00001000;
  9480  0A15  15F3               	bsf	OUTSetHTCDataNibble@dataToSet,3
  9481                           
  9482                           ;OUT.c: 29: if(val&0b00000010)
  9483  0A16  18F2               	btfsc	OUTSetHTCDataNibble@val,1
  9484                           
  9485                           ;OUT.c: 30: dataToSet|=0b00000100;
  9486  0A17  1573               	bsf	OUTSetHTCDataNibble@dataToSet,2
  9487                           
  9488                           ;OUT.c: 31: if(val&0b00000100)
  9489  0A18  1972               	btfsc	OUTSetHTCDataNibble@val,2
  9490                           
  9491                           ;OUT.c: 32: dataToSet|=0b00000010;
  9492  0A19  14F3               	bsf	OUTSetHTCDataNibble@dataToSet,1
  9493                           
  9494                           ;OUT.c: 33: if(val&0b00001000)
  9495  0A1A  19F2               	btfsc	OUTSetHTCDataNibble@val,3
  9496                           
  9497                           ;OUT.c: 34: dataToSet|=0b00000001;
  9498  0A1B  1473               	bsf	OUTSetHTCDataNibble@dataToSet,0
  9499                           
  9500                           ;OUT.c: 36: dataToSet&=0b00001111;
  9501  0A1C  300F               	movlw	15
  9502  0A1D  00F1               	movwf	??_OUTSetHTCDataNibble
  9503  0A1E  0871               	movf	??_OUTSetHTCDataNibble,w
  9504  0A1F  05F3               	andwf	OUTSetHTCDataNibble@dataToSet,f
  9505                           
  9506                           ;OUT.c: 37: LATA|=dataToSet;
  9507  0A20  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
  9508  0A21  00F1               	movwf	??_OUTSetHTCDataNibble
  9509  0A22  0871               	movf	??_OUTSetHTCDataNibble,w
  9510  0A23  0022               	movlb	2	; select bank2
  9511  0A24  048C               	iorwf	12,f	;volatile
  9512                           
  9513                           ;OUT.c: 38: dataToSet|=0b11110000;
  9514  0A25  30F0               	movlw	240
  9515  0A26  00F1               	movwf	??_OUTSetHTCDataNibble
  9516  0A27  0871               	movf	??_OUTSetHTCDataNibble,w
  9517  0A28  04F3               	iorwf	OUTSetHTCDataNibble@dataToSet,f
  9518                           
  9519                           ;OUT.c: 39: LATA&=dataToSet;
  9520  0A29  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
  9521  0A2A  00F1               	movwf	??_OUTSetHTCDataNibble
  9522  0A2B  0871               	movf	??_OUTSetHTCDataNibble,w
  9523  0A2C  058C               	andwf	12,f	;volatile
  9524  0A2D  0008               	return
  9525  0A2E                     __end_of_OUTSetHTCDataNibble:	
  9526                           
  9527                           	psect	text53
  9528  0A67                     __ptext53:	
  9529 ;; *************** function _DINTask *****************
  9530 ;; Defined at:
  9531 ;;		line 80 in file "DIN.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;		None
  9536 ;; Return value:  Size  Location     Type
  9537 ;;		None               void
  9538 ;; Registers used:
  9539 ;;		wreg, status,2, status,0
  9540 ;; Tracked objects:
  9541 ;;		On entry : 0/0
  9542 ;;		On exit  : 0/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;Total ram usage:        1 bytes
  9550 ;; Hardware stack levels used:    1
  9551 ;; Hardware stack levels required when called:    2
  9552 ;; This function calls:
  9553 ;;		Nothing
  9554 ;; This function is called by:
  9555 ;;		_main
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559                           
  9560                           ;psect for function _DINTask
  9561  0A67                     _DINTask:	
  9562                           
  9563                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9567  0A67  0020               	movlb	0	; select bank0
  9568  0A68  01EF               	clrf	_u_in_sta_tmpTask
  9569                           
  9570                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9571  0A69  1D0D               	btfss	13,2	;volatile
  9572                           
  9573                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9574  0A6A  146F               	bsf	_u_in_sta_tmpTask,0
  9575                           
  9576                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9577  0A6B  086F               	movf	_u_in_sta_tmpTask,w
  9578  0A6C  3901               	andlw	1
  9579  0A6D  00F1               	movwf	??_DINTask
  9580  0A6E  087C               	movf	_u_in_sta_currTask,w
  9581  0A6F  3901               	andlw	1
  9582  0A70  0671               	xorwf	??_DINTask,w
  9583  0A71  1903               	skipnz
  9584  0A72  2A7A               	goto	l2944
  9585                           
  9586                           ;DIN.c: 87: {
  9587                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9588  0A73  107C               	bcf	_u_in_sta_currTask,0
  9589  0A74  1C6F               	btfss	_u_in_sta_tmpTask,0
  9590  0A75  2A77               	goto	l2940
  9591  0A76  147C               	bsf	_u_in_sta_currTask,0
  9592  0A77                     l2940:	
  9593                           
  9594                           ;DIN.c: 89: tmrDbncSel=0;
  9595  0A77  0020               	movlb	0	; select bank0
  9596  0A78  01E9               	clrf	_tmrDbncSel
  9597                           
  9598                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9599  0A79  146C               	bsf	_u_flg_din,0
  9600  0A7A                     l2944:	
  9601                           
  9602                           ;DIN.c: 91: }
  9603                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9604  0A7A  1C7C               	btfss	_u_in_sta_currTask,0
  9605  0A7B  2A7E               	goto	l2948
  9606                           
  9607                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9608  0A7C  14EC               	bsf	_u_flg_din,1
  9609  0A7D  0008               	return
  9610  0A7E                     l2948:	
  9611                           
  9612                           ;DIN.c: 96: else
  9613                           ;DIN.c: 97: {
  9614                           ;DIN.c: 98: tmrLongSel=0;
  9615  0A7E  0021               	movlb	1	; select bank1
  9616  0A7F  01A6               	clrf	_tmrLongSel^(0+128)
  9617  0A80  01A7               	clrf	(_tmrLongSel+1)^(0+128)
  9618                           
  9619                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9620  0A81  0020               	movlb	0	; select bank0
  9621  0A82  10EC               	bcf	_u_flg_din,1
  9622  0A83  0008               	return
  9623  0A84                     __end_of_DINTask:	
  9624                           
  9625                           	psect	text54
  9626  08F7                     __ptext54:	
  9627 ;; *************** function _DINInit *****************
  9628 ;; Defined at:
  9629 ;;		line 25 in file "DIN.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;  sta             1    wreg     unsigned char 
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;  sta             1    1[COMMON] unsigned char 
  9634 ;; Return value:  Size  Location     Type
  9635 ;;		None               void
  9636 ;; Registers used:
  9637 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;Total ram usage:        1 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    2
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_main
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           
  9658                           ;psect for function _DINInit
  9659  08F7                     _DINInit:	
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9663                           ;DINInit@sta stored from wreg
  9664  08F7  00F1               	movwf	DINInit@sta
  9665                           
  9666                           ;DIN.c: 26: switch(sta)
  9667  08F8  2903               	goto	l2908
  9668  08F9                     l2904:	
  9669                           ;DIN.c: 27: {
  9670                           ;DIN.c: 31: case 1:
  9671                           
  9672                           
  9673                           ;DIN.c: 33: u_flg_din.val=0;
  9674  08F9  0020               	movlb	0	; select bank0
  9675  08FA  01EC               	clrf	_u_flg_din
  9676                           
  9677                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9678  08FB  01FC               	clrf	_u_in_sta_currTask
  9679                           
  9680                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9681  08FC  01EF               	clrf	_u_in_sta_tmpTask
  9682                           
  9683                           ;DIN.c: 36: u_in_ev_up.val=0;
  9684  08FD  0021               	movlb	1	; select bank1
  9685  08FE  01AD               	clrf	_u_in_ev_up^(0+128)
  9686                           
  9687                           ;DIN.c: 37: u_in_ev_down.val=0;
  9688  08FF  0020               	movlb	0	; select bank0
  9689  0900  01ED               	clrf	_u_in_ev_down
  9690                           
  9691                           ;DIN.c: 38: u_in_ev_long.val=0;
  9692  0901  01EE               	clrf	_u_in_ev_long
  9693                           
  9694                           ;DIN.c: 43: }
  9695                           
  9696                           ;DIN.c: 39: break;
  9697  0902  0008               	return
  9698  0903                     l2908:	
  9699  0903  0871               	movf	DINInit@sta,w
  9700                           
  9701                           ; Switch size 1, requested type "space"
  9702                           ; Number of cases is 1, Range of values is 1 to 1
  9703                           ; switch strategies available:
  9704                           ; Name         Instructions Cycles
  9705                           ; simple_byte            4     3 (average)
  9706                           ; direct_byte           11     9 (fixed)
  9707                           ; jumptable            263     9 (fixed)
  9708                           ;	Chosen strategy is simple_byte
  9709  0904  3A01               	xorlw	1	; case 1
  9710  0905  1903               	skipnz
  9711  0906  28F9               	goto	l2904
  9712  0907  2908               	goto	l208
  9713  0908                     l208:	
  9714  0908  0008               	return
  9715  0909                     __end_of_DINInit:	
  9716                           
  9717                           	psect	text55
  9718  087C                     __ptext55:	
  9719 ;; *************** function _NVMInit *****************
  9720 ;; Defined at:
  9721 ;;		line 7 in file "NVM.c"
  9722 ;; Parameters:    Size  Location     Type
  9723 ;;  sta             1    wreg     unsigned char 
  9724 ;; Auto vars:     Size  Location     Type
  9725 ;;  sta             1    1[COMMON] unsigned char 
  9726 ;; Return value:  Size  Location     Type
  9727 ;;		None               void
  9728 ;; Registers used:
  9729 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9730 ;; Tracked objects:
  9731 ;;		On entry : 0/0
  9732 ;;		On exit  : 0/0
  9733 ;;		Unchanged: 0/0
  9734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;Total ram usage:        1 bytes
  9740 ;; Hardware stack levels used:    1
  9741 ;; Hardware stack levels required when called:    2
  9742 ;; This function calls:
  9743 ;;		Nothing
  9744 ;; This function is called by:
  9745 ;;		_main
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           
  9750                           ;psect for function _NVMInit
  9751  087C                     _NVMInit:	
  9752                           
  9753                           ;incstack = 0
  9754                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  9755                           ;NVMInit@sta stored from wreg
  9756  087C  00F1               	movwf	NVMInit@sta
  9757                           
  9758                           ;NVM.c: 8: switch(sta)
  9759  087D  2881               	goto	l2816
  9760  087E                     l2812:	
  9761                           ;NVM.c: 9: {
  9762                           ;NVM.c: 10: case 0:
  9763                           
  9764                           
  9765                           ;NVM.c: 12: PMCON1=0b00000000;
  9766  087E  0023               	movlb	3	; select bank3
  9767  087F  0195               	clrf	21	;volatile
  9768                           
  9769                           ;NVM.c: 20: }
  9770                           
  9771                           ;NVM.c: 13: break;
  9772  0880  0008               	return
  9773  0881                     l2816:	
  9774  0881  0871               	movf	NVMInit@sta,w
  9775                           
  9776                           ; Switch size 1, requested type "space"
  9777                           ; Number of cases is 1, Range of values is 0 to 0
  9778                           ; switch strategies available:
  9779                           ; Name         Instructions Cycles
  9780                           ; simple_byte            4     3 (average)
  9781                           ; direct_byte            8     6 (fixed)
  9782                           ; jumptable            260     6 (fixed)
  9783                           ;	Chosen strategy is simple_byte
  9784  0882  3A00               	xorlw	0	; case 0
  9785  0883  1903               	skipnz
  9786  0884  287E               	goto	l2812
  9787  0885  2886               	goto	l151
  9788  0886                     l151:	
  9789  0886  0008               	return
  9790  0887                     __end_of_NVMInit:	
  9791                           
  9792                           	psect	text56
  9793  0C5D                     __ptext56:	
  9794 ;; *************** function _CC1Init *****************
  9795 ;; Defined at:
  9796 ;;		line 75 in file "CC1.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;  state           1    wreg     unsigned char 
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;  state           1    2[BANK0 ] unsigned char 
  9801 ;; Return value:  Size  Location     Type
  9802 ;;		None               void
  9803 ;; Registers used:
  9804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;Total ram usage:        2 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    4
  9817 ;; This function calls:
  9818 ;;		_DLYDelay_ms
  9819 ;;		_CC1Strobe
  9820 ;;		_CC1Write
  9821 ;; This function is called by:
  9822 ;;		_main
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _CC1Init
  9828  0C5D                     _CC1Init:	
  9829                           
  9830                           ;incstack = 0
  9831                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9832                           ;CC1Init@state stored from wreg
  9833  0C5D  0020               	movlb	0	; select bank0
  9834  0C5E  00A2               	movwf	CC1Init@state
  9835                           
  9836                           ;CC1.c: 76: switch(state)
  9837  0C5F  2C83               	goto	l4034
  9838  0C60                     l4024:	
  9839                           ;CC1.c: 84: case 2:
  9840                           
  9841                           ;CC1.c: 83: break;
  9842                           
  9843                           ;CC1.c: 77: {
  9844                           ;CC1.c: 81: case 1:
  9845                           
  9846                           
  9847                           ;CC1.c: 86: CC1Strobe(SRES);
  9848  0C60  3030               	movlw	48
  9849  0C61  3189  2155  318C   	fcall	_CC1Strobe
  9850                           
  9851                           ;CC1.c: 87: DLYDelay_ms(1);
  9852  0C64  3001               	movlw	1
  9853  0C65  00F1               	movwf	?_DLYDelay_ms
  9854  0C66  3000               	movlw	0
  9855  0C67  00F2               	movwf	?_DLYDelay_ms+1
  9856  0C68  3189  21AD  318C   	fcall	_DLYDelay_ms
  9857                           
  9858                           ;CC1.c: 88: CC1Write(0x00,cc1InitVal,0x2E);
  9859  0C6B  30A0               	movlw	low _cc1InitVal
  9860  0C6C  00F7               	movwf	?_CC1Write
  9861  0C6D  3001               	movlw	high _cc1InitVal
  9862  0C6E  00F8               	movwf	?_CC1Write+1
  9863  0C6F  302E               	movlw	46
  9864  0C70  00FB               	movwf	??_CC1Init
  9865  0C71  087B               	movf	??_CC1Init,w
  9866  0C72  00F9               	movwf	?_CC1Write+2
  9867  0C73  3000               	movlw	0
  9868  0C74  318B  2323  318C   	fcall	_CC1Write
  9869                           
  9870                           ;CC1.c: 89: CC1Write(0x3E,cc1PaTable,8);
  9871  0C77  304A               	movlw	low _cc1PaTable
  9872  0C78  00F7               	movwf	?_CC1Write
  9873  0C79  3001               	movlw	high _cc1PaTable
  9874  0C7A  00F8               	movwf	?_CC1Write+1
  9875  0C7B  3008               	movlw	8
  9876  0C7C  00FB               	movwf	??_CC1Init
  9877  0C7D  087B               	movf	??_CC1Init,w
  9878  0C7E  00F9               	movwf	?_CC1Write+2
  9879  0C7F  303E               	movlw	62
  9880  0C80  318B  2323         	fcall	_CC1Write
  9881                           
  9882                           ;CC1.c: 91: }
  9883                           
  9884                           ;CC1.c: 90: break;
  9885  0C82  0008               	return
  9886  0C83                     l4034:	
  9887  0C83  0020               	movlb	0	; select bank0
  9888  0C84  0822               	movf	CC1Init@state,w
  9889                           
  9890                           ; Switch size 1, requested type "space"
  9891                           ; Number of cases is 2, Range of values is 1 to 2
  9892                           ; switch strategies available:
  9893                           ; Name         Instructions Cycles
  9894                           ; simple_byte            7     4 (average)
  9895                           ; direct_byte           13     9 (fixed)
  9896                           ; jumptable            263     9 (fixed)
  9897                           ;	Chosen strategy is simple_byte
  9898  0C85  3A01               	xorlw	1	; case 1
  9899  0C86  1903               	skipnz
  9900  0C87  2C8C               	goto	l122
  9901  0C88  3A03               	xorlw	3	; case 2
  9902  0C89  1903               	skipnz
  9903  0C8A  2C60               	goto	l4024
  9904  0C8B  2C8C               	goto	l122
  9905  0C8C                     l122:	
  9906  0C8C  0008               	return
  9907  0C8D                     __end_of_CC1Init:	
  9908                           
  9909                           	psect	text57
  9910  0B23                     __ptext57:	
  9911 ;; *************** function _CC1Write *****************
  9912 ;; Defined at:
  9913 ;;		line 128 in file "CC1.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  addr            1    wreg     unsigned char 
  9916 ;;  src             2    7[COMMON] PTR unsigned char 
  9917 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
  9918 ;;  len             1    9[COMMON] unsigned char 
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;  addr            1    0[BANK0 ] unsigned char 
  9921 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;		None               void
  9924 ;; Registers used:
  9925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9931 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;Total ram usage:        6 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    3
  9938 ;; This function calls:
  9939 ;;		_SPIWrite
  9940 ;; This function is called by:
  9941 ;;		_CC1Init
  9942 ;;		_RTXSndPkt
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function _CC1Write
  9948  0B23                     _CC1Write:	
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9952                           ;CC1Write@addr stored from wreg
  9953  0B23  0020               	movlb	0	; select bank0
  9954  0B24  00A0               	movwf	CC1Write@addr
  9955                           
  9956                           ;CC1.c: 129: unsigned char cc1Addr;
  9957                           ;CC1.c: 132: LATAbits.LATA5=0;
  9958  0B25  0022               	movlb	2	; select bank2
  9959  0B26  128C               	bcf	12,5	;volatile
  9960                           
  9961                           ;CC1.c: 135: cc1Addr=((addr&0b00111111)|0b01000000);
  9962  0B27  0020               	movlb	0	; select bank0
  9963  0B28  0820               	movf	CC1Write@addr,w
  9964  0B29  393F               	andlw	63
  9965  0B2A  3840               	iorlw	64
  9966  0B2B  00FA               	movwf	??_CC1Write
  9967  0B2C  087A               	movf	??_CC1Write,w
  9968  0B2D  00A1               	movwf	CC1Write@cc1Addr
  9969                           
  9970                           ;CC1.c: 136: SPIWrite((&(cc1Addr)),1);
  9971  0B2E  3021               	movlw	low CC1Write@cc1Addr
  9972  0B2F  00F1               	movwf	?_SPIWrite
  9973  0B30  3000               	movlw	high CC1Write@cc1Addr
  9974  0B31  00F2               	movwf	?_SPIWrite+1
  9975  0B32  01F3               	clrf	?_SPIWrite+2
  9976  0B33  0AF3               	incf	?_SPIWrite+2,f
  9977  0B34  318A  224A  318B   	fcall	_SPIWrite
  9978                           
  9979                           ;CC1.c: 139: SPIWrite(src,len);
  9980  0B37  0878               	movf	CC1Write@src+1,w
  9981  0B38  01F2               	clrf	?_SPIWrite+1
  9982  0B39  07F2               	addwf	?_SPIWrite+1,f
  9983  0B3A  0877               	movf	CC1Write@src,w
  9984  0B3B  01F1               	clrf	?_SPIWrite
  9985  0B3C  07F1               	addwf	?_SPIWrite,f
  9986  0B3D  0879               	movf	CC1Write@len,w
  9987  0B3E  00FA               	movwf	??_CC1Write
  9988  0B3F  087A               	movf	??_CC1Write,w
  9989  0B40  00F3               	movwf	?_SPIWrite+2
  9990  0B41  318A  224A         	fcall	_SPIWrite
  9991                           
  9992                           ;CC1.c: 142: LATAbits.LATA5=1;
  9993  0B43  0022               	movlb	2	; select bank2
  9994  0B44  168C               	bsf	12,5	;volatile
  9995  0B45  0008               	return
  9996  0B46                     __end_of_CC1Write:	
  9997                           
  9998                           	psect	text58
  9999  0955                     __ptext58:	
 10000 ;; *************** function _CC1Strobe *****************
 10001 ;; Defined at:
 10002 ;;		line 95 in file "CC1.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;  e_stb           1    wreg     enum E1827
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  e_stb           1    8[COMMON] enum E1827
 10007 ;;  cc1Stb          1    9[COMMON] unsigned char 
 10008 ;;  i               1    0        unsigned char 
 10009 ;; Return value:  Size  Location     Type
 10010 ;;		None               void
 10011 ;; Registers used:
 10012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10013 ;; Tracked objects:
 10014 ;;		On entry : 0/0
 10015 ;;		On exit  : 0/0
 10016 ;;		Unchanged: 0/0
 10017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;Total ram usage:        3 bytes
 10023 ;; Hardware stack levels used:    1
 10024 ;; Hardware stack levels required when called:    3
 10025 ;; This function calls:
 10026 ;;		_SPIWrite
 10027 ;; This function is called by:
 10028 ;;		_CC1Init
 10029 ;;		_RTXInit
 10030 ;;		_RTXSndPkt
 10031 ;; This function uses a non-reentrant model
 10032 ;;
 10033                           
 10034                           
 10035                           ;psect for function _CC1Strobe
 10036  0955                     _CC1Strobe:	
 10037                           
 10038                           ;incstack = 0
 10039                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10040                           ;CC1Strobe@e_stb stored from wreg
 10041  0955  00F8               	movwf	CC1Strobe@e_stb
 10042                           
 10043                           ;CC1.c: 96: unsigned char cc1Stb,i;
 10044                           ;CC1.c: 99: LATAbits.LATA5=0;
 10045  0956  0022               	movlb	2	; select bank2
 10046  0957  128C               	bcf	12,5	;volatile
 10047                           
 10048                           ;CC1.c: 102: cc1Stb=((e_stb&0b00111111)|0b10000000);
 10049  0958  0878               	movf	CC1Strobe@e_stb,w
 10050  0959  393F               	andlw	63
 10051  095A  3880               	iorlw	128
 10052  095B  00F7               	movwf	??_CC1Strobe
 10053  095C  0877               	movf	??_CC1Strobe,w
 10054  095D  00F9               	movwf	CC1Strobe@cc1Stb
 10055                           
 10056                           ;CC1.c: 103: SPIWrite((&(cc1Stb)),1);
 10057  095E  3079               	movlw	low CC1Strobe@cc1Stb
 10058  095F  00F1               	movwf	?_SPIWrite
 10059  0960  3000               	movlw	high CC1Strobe@cc1Stb
 10060  0961  00F2               	movwf	?_SPIWrite+1
 10061  0962  01F3               	clrf	?_SPIWrite+2
 10062  0963  0AF3               	incf	?_SPIWrite+2,f
 10063  0964  318A  224A         	fcall	_SPIWrite
 10064                           
 10065                           ;CC1.c: 106: LATAbits.LATA5=1;
 10066  0966  0022               	movlb	2	; select bank2
 10067  0967  168C               	bsf	12,5	;volatile
 10068  0968  0008               	return
 10069  0969                     __end_of_CC1Strobe:	
 10070                           
 10071                           	psect	text59
 10072  0A4A                     __ptext59:	
 10073 ;; *************** function _SPIWrite *****************
 10074 ;; Defined at:
 10075 ;;		line 40 in file "SPI.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
 10078 ;;		 -> pktTx(9), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
 10079 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
 10080 ;;  len             1    3[COMMON] unsigned char 
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;  i               1    6[COMMON] unsigned char 
 10083 ;; Return value:  Size  Location     Type
 10084 ;;		None               void
 10085 ;; Registers used:
 10086 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10092 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;Total ram usage:        6 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    2
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_CC1Strobe
 10103 ;;		_CC1Read
 10104 ;;		_CC1Write
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           
 10109                           ;psect for function _SPIWrite
 10110  0A4A                     _SPIWrite:	
 10111                           
 10112                           ;SPI.c: 41: unsigned char i;
 10113                           ;SPI.c: 43: for(i=0;i<len;i++)
 10114                           
 10115                           ;incstack = 0
 10116                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 10117  0A4A  01F6               	clrf	SPIWrite@i
 10118  0A4B                     l4012:	
 10119  0A4B  0873               	movf	SPIWrite@len,w
 10120  0A4C  0276               	subwf	SPIWrite@i,w
 10121  0A4D  1803               	btfsc	3,0
 10122  0A4E  0008               	return
 10123                           
 10124                           ;SPI.c: 44: {
 10125                           ;SPI.c: 45: PIR1bits.SSPIF=0;
 10126  0A4F  0020               	movlb	0	; select bank0
 10127  0A50  1191               	bcf	17,3	;volatile
 10128                           
 10129                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
 10130  0A51  0876               	movf	SPIWrite@i,w
 10131  0A52  00F4               	movwf	??_SPIWrite
 10132  0A53  01F5               	clrf	??_SPIWrite+1
 10133  0A54  0874               	movf	??_SPIWrite,w
 10134  0A55  0771               	addwf	SPIWrite@srcPtr,w
 10135  0A56  0086               	movwf	6
 10136  0A57  0875               	movf	??_SPIWrite+1,w
 10137  0A58  3D72               	addwfc	SPIWrite@srcPtr+1,w
 10138  0A59  0087               	movwf	7
 10139  0A5A  0801               	movf	1,w
 10140  0A5B  0024               	movlb	4	; select bank4
 10141  0A5C  0091               	movwf	17	;volatile
 10142  0A5D                     l79:	
 10143                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
 10144                           
 10145  0A5D  0020               	movlb	0	; select bank0
 10146  0A5E  1991               	btfsc	17,3	;volatile
 10147  0A5F  2A62               	goto	l4010
 10148                           
 10149                           ;SPI.c: 48: _nop();
 10150  0A60  0000               	nop
 10151  0A61  2A5D               	goto	l79
 10152  0A62                     l4010:	
 10153  0A62  3001               	movlw	1
 10154  0A63  00F4               	movwf	??_SPIWrite
 10155  0A64  0874               	movf	??_SPIWrite,w
 10156  0A65  07F6               	addwf	SPIWrite@i,f
 10157  0A66  2A4B               	goto	l4012
 10158  0A67                     __end_of_SPIWrite:	
 10159                           
 10160                           	psect	text60
 10161  09AD                     __ptext60:	
 10162 ;; *************** function _DLYDelay_ms *****************
 10163 ;; Defined at:
 10164 ;;		line 18 in file "DLY.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;  val             2    1[COMMON] unsigned short 
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;  i               2    5[COMMON] unsigned short 
 10169 ;; Return value:  Size  Location     Type
 10170 ;;		None               void
 10171 ;; Registers used:
 10172 ;;		wreg, status,2
 10173 ;; Tracked objects:
 10174 ;;		On entry : 0/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;Total ram usage:        6 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    2
 10185 ;; This function calls:
 10186 ;;		Nothing
 10187 ;; This function is called by:
 10188 ;;		_CC1Init
 10189 ;;		_DPYInitDisplay
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _DLYDelay_ms
 10195  09AD                     _DLYDelay_ms:	
 10196                           
 10197                           ;DLY.c: 19: unsigned short i;
 10198                           ;DLY.c: 21: for(i=0;i<val;i++)
 10199                           
 10200                           ;incstack = 0
 10201                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
 10202  09AD  01F5               	clrf	DLYDelay_ms@i
 10203  09AE  01F6               	clrf	DLYDelay_ms@i+1
 10204  09AF                     l94:	
 10205  09AF  0872               	movf	DLYDelay_ms@val+1,w
 10206  09B0  0276               	subwf	DLYDelay_ms@i+1,w
 10207  09B1  1D03               	skipz
 10208  09B2  29B5               	goto	u4045
 10209  09B3  0871               	movf	DLYDelay_ms@val,w
 10210  09B4  0275               	subwf	DLYDelay_ms@i,w
 10211  09B5                     u4045:	
 10212  09B5  1803               	btfsc	3,0
 10213  09B6  0008               	return
 10214  09B7  0064               	clrwdt	;# 
 10215                           
 10216                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
 10217  09B8  3003               	movlw	3
 10218  09B9  00F4               	movwf	??_DLYDelay_ms+1
 10219  09BA  3097               	movlw	151
 10220  09BB  00F3               	movwf	??_DLYDelay_ms
 10221  09BC                     u5037:	
 10222  09BC  0BF3               	decfsz	??_DLYDelay_ms,f
 10223  09BD  29BC               	goto	u5037
 10224  09BE  0BF4               	decfsz	??_DLYDelay_ms+1,f
 10225  09BF  29BC               	goto	u5037
 10226  09C0  29C1               	nop2
 10227  09C1  3001               	movlw	1
 10228  09C2  07F5               	addwf	DLYDelay_ms@i,f
 10229  09C3  3000               	movlw	0
 10230  09C4  3DF6               	addwfc	DLYDelay_ms@i+1,f
 10231  09C5  29AF               	goto	l94
 10232  09C6                     __end_of_DLYDelay_ms:	
 10233                           
 10234                           	psect	text61
 10235  0AA1                     __ptext61:	
 10236 ;; *************** function _SPIInit *****************
 10237 ;; Defined at:
 10238 ;;		line 9 in file "SPI.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;  state           1    wreg     unsigned char 
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;  state           1    2[COMMON] unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;		None               void
 10245 ;; Registers used:
 10246 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;Total ram usage:        2 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    2
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_main
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           
 10267                           ;psect for function _SPIInit
 10268  0AA1                     _SPIInit:	
 10269                           
 10270                           ;incstack = 0
 10271                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
 10272                           ;SPIInit@state stored from wreg
 10273  0AA1  00F2               	movwf	SPIInit@state
 10274                           
 10275                           ;SPI.c: 10: switch(state)
 10276  0AA2  2AB3               	goto	l2740
 10277  0AA3                     l61:	
 10278                           ;SPI.c: 11: {
 10279                           ;SPI.c: 12: case 0:
 10280                           
 10281                           
 10282                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
 10283  0AA3  0021               	movlb	1	; select bank1
 10284  0AA4  160E               	bsf	14,4	;volatile
 10285  0AA5  30D7               	movlw	215
 10286  0AA6  00F1               	movwf	??_SPIInit
 10287  0AA7  0871               	movf	??_SPIInit,w
 10288  0AA8  058E               	andwf	14,f	;volatile
 10289  0AA9  0024               	movlb	4	; select bank4
 10290  0AAA  1295               	bcf	21,5	;volatile
 10291  0AAB  0191               	clrf	17	;volatile
 10292  0AAC  3001               	movlw	1
 10293  0AAD  0095               	movwf	21	;volatile
 10294  0AAE  0196               	clrf	22	;volatile
 10295  0AAF  3040               	movlw	64
 10296  0AB0  0094               	movwf	20	;volatile
 10297  0AB1  1695               	bsf	21,5	;volatile
 10298                           
 10299                           ;SPI.c: 22: }
 10300                           
 10301                           ;SPI.c: 21: break;
 10302                           
 10303                           ;SPI.c: 19: case 2:
 10304                           
 10305                           ;SPI.c: 18: break;
 10306                           
 10307                           ;SPI.c: 16: case 1:
 10308                           
 10309                           ;SPI.c: 15: break;
 10310  0AB2  0008               	return
 10311  0AB3                     l2740:	
 10312  0AB3  0872               	movf	SPIInit@state,w
 10313                           
 10314                           ; Switch size 1, requested type "space"
 10315                           ; Number of cases is 3, Range of values is 0 to 2
 10316                           ; switch strategies available:
 10317                           ; Name         Instructions Cycles
 10318                           ; simple_byte           10     6 (average)
 10319                           ; direct_byte           12     6 (fixed)
 10320                           ; jumptable            260     6 (fixed)
 10321                           ;	Chosen strategy is simple_byte
 10322  0AB4  3A00               	xorlw	0	; case 0
 10323  0AB5  1903               	skipnz
 10324  0AB6  2AA3               	goto	l61
 10325  0AB7  3A01               	xorlw	1	; case 1
 10326  0AB8  1903               	skipnz
 10327  0AB9  2ABE               	goto	l65
 10328  0ABA  3A03               	xorlw	3	; case 2
 10329  0ABB  1903               	skipnz
 10330  0ABC  2ABE               	goto	l65
 10331  0ABD  2ABE               	goto	l65
 10332  0ABE                     l65:	
 10333  0ABE  0008               	return
 10334  0ABF                     __end_of_SPIInit:	
 10335                           
 10336                           	psect	text62
 10337  0996                     __ptext62:	
 10338 ;; *************** function _OUTInit *****************
 10339 ;; Defined at:
 10340 ;;		line 7 in file "OUT.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;  sta             1    wreg     unsigned char 
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;  sta             1    2[COMMON] unsigned char 
 10345 ;; Return value:  Size  Location     Type
 10346 ;;		None               void
 10347 ;; Registers used:
 10348 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10357 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10358 ;;Total ram usage:        2 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    2
 10361 ;; This function calls:
 10362 ;;		Nothing
 10363 ;; This function is called by:
 10364 ;;		_main
 10365 ;; This function uses a non-reentrant model
 10366 ;;
 10367                           
 10368                           
 10369                           ;psect for function _OUTInit
 10370  0996                     _OUTInit:	
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 10374                           ;OUTInit@sta stored from wreg
 10375  0996  00F2               	movwf	OUTInit@sta
 10376                           
 10377                           ;OUT.c: 8: switch(sta)
 10378  0997  29A7               	goto	l2700
 10379  0998                     l2692:	
 10380                           ;OUT.c: 9: {
 10381                           ;OUT.c: 10: case 0:
 10382                           
 10383                           
 10384                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00000111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00000000; ANSELC&=0b00000000;
 10385  0998  0021               	movlb	1	; select bank1
 10386  0999  018C               	clrf	12	;volatile
 10387  099A  3007               	movlw	7
 10388  099B  00F1               	movwf	??_OUTInit
 10389  099C  0871               	movf	??_OUTInit,w
 10390  099D  058D               	andwf	13,f	;volatile
 10391  099E  3010               	movlw	16
 10392  099F  00F1               	movwf	??_OUTInit
 10393  09A0  0871               	movf	??_OUTInit,w
 10394  09A1  058E               	andwf	14,f	;volatile
 10395  09A2  0023               	movlb	3	; select bank3
 10396  09A3  018C               	clrf	12	;volatile
 10397  09A4  018D               	clrf	13	;volatile
 10398  09A5  018E               	clrf	14	;volatile
 10399                           
 10400                           ;OUT.c: 20: }
 10401                           
 10402                           ;OUT.c: 13: break;
 10403  09A6  0008               	return
 10404  09A7                     l2700:	
 10405  09A7  0872               	movf	OUTInit@sta,w
 10406                           
 10407                           ; Switch size 1, requested type "space"
 10408                           ; Number of cases is 1, Range of values is 0 to 0
 10409                           ; switch strategies available:
 10410                           ; Name         Instructions Cycles
 10411                           ; simple_byte            4     3 (average)
 10412                           ; direct_byte            8     6 (fixed)
 10413                           ; jumptable            260     6 (fixed)
 10414                           ;	Chosen strategy is simple_byte
 10415  09A8  3A00               	xorlw	0	; case 0
 10416  09A9  1903               	skipnz
 10417  09AA  2998               	goto	l2692
 10418  09AB  29AC               	goto	l34
 10419  09AC                     l34:	
 10420  09AC  0008               	return
 10421  09AD                     __end_of_OUTInit:	
 10422                           
 10423                           	psect	text63
 10424  097F                     __ptext63:	
 10425 ;; *************** function _INInit *****************
 10426 ;; Defined at:
 10427 ;;		line 7 in file "IN.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;  sta             1    wreg     unsigned char 
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  sta             1    2[COMMON] unsigned char 
 10432 ;; Return value:  Size  Location     Type
 10433 ;;		None               void
 10434 ;; Registers used:
 10435 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        2 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    2
 10448 ;; This function calls:
 10449 ;;		Nothing
 10450 ;; This function is called by:
 10451 ;;		_main
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           
 10456                           ;psect for function _INInit
 10457  097F                     _INInit:	
 10458                           
 10459                           ;incstack = 0
 10460                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 10461                           ;INInit@sta stored from wreg
 10462  097F  00F2               	movwf	INInit@sta
 10463                           
 10464                           ;IN.c: 8: switch(sta)
 10465  0980  2990               	goto	l2688
 10466  0981                     l2680:	
 10467                           ;IN.c: 9: {
 10468                           ;IN.c: 10: case 0:
 10469                           
 10470                           
 10471                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELB&=0b11111000; WPUB=0b00000111;
 10472  0981  3007               	movlw	7
 10473  0982  00F1               	movwf	??_INInit
 10474  0983  0871               	movf	??_INInit,w
 10475  0984  0021               	movlb	1	; select bank1
 10476  0985  048D               	iorwf	13,f	;volatile
 10477  0986  160E               	bsf	14,4	;volatile
 10478  0987  30F8               	movlw	248
 10479  0988  00F1               	movwf	??_INInit
 10480  0989  0871               	movf	??_INInit,w
 10481  098A  0023               	movlb	3	; select bank3
 10482  098B  058D               	andwf	13,f	;volatile
 10483  098C  3007               	movlw	7
 10484  098D  0024               	movlb	4	; select bank4
 10485  098E  008D               	movwf	13	;volatile
 10486                           
 10487                           ;IN.c: 20: }
 10488                           
 10489                           ;IN.c: 13: break;
 10490  098F  0008               	return
 10491  0990                     l2688:	
 10492  0990  0872               	movf	INInit@sta,w
 10493                           
 10494                           ; Switch size 1, requested type "space"
 10495                           ; Number of cases is 1, Range of values is 0 to 0
 10496                           ; switch strategies available:
 10497                           ; Name         Instructions Cycles
 10498                           ; simple_byte            4     3 (average)
 10499                           ; direct_byte            8     6 (fixed)
 10500                           ; jumptable            260     6 (fixed)
 10501                           ;	Chosen strategy is simple_byte
 10502  0991  3A00               	xorlw	0	; case 0
 10503  0992  1903               	skipnz
 10504  0993  2981               	goto	l2680
 10505  0994  2995               	goto	l14
 10506  0995                     l14:	
 10507  0995  0008               	return
 10508  0996                     __end_of_INInit:	
 10509                           
 10510                           	psect	intentry
 10511  0004                     __pintentry:	
 10512 ;; *************** function _INTIsr *****************
 10513 ;; Defined at:
 10514 ;;		line 38 in file "Base.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;		None
 10517 ;; Auto vars:     Size  Location     Type
 10518 ;;		None
 10519 ;; Return value:  Size  Location     Type
 10520 ;;		None               void
 10521 ;; Registers used:
 10522 ;;		wreg, status,2, status,0, pclath, cstack
 10523 ;; Tracked objects:
 10524 ;;		On entry : 0/0
 10525 ;;		On exit  : 0/0
 10526 ;;		Unchanged: 0/0
 10527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;Total ram usage:        1 bytes
 10533 ;; Hardware stack levels used:    1
 10534 ;; Hardware stack levels required when called:    1
 10535 ;; This function calls:
 10536 ;;		_SYSInt
 10537 ;; This function is called by:
 10538 ;;		Interrupt level 1
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542  0004                     _INTIsr:	
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 10546  0004  3180               	pagesel	$
 10547  0005  0020               	movlb	0	; select bank0
 10548  0006  087F               	movf	127,w
 10549  0007  00F0               	movwf	??_INTIsr
 10550                           
 10551                           ;Base.c: 40: if(INTCONbits.T0IF==1)
 10552  0008  1D0B               	btfss	11,2	;volatile
 10553  0009  280D               	goto	i1l626
 10554                           
 10555                           ;Base.c: 41: {
 10556                           ;Base.c: 43: INTCONbits.T0IF=0;
 10557  000A  110B               	bcf	11,2	;volatile
 10558                           
 10559                           ;Base.c: 46: SYSInt();
 10560  000B  3188  2049         	fcall	_SYSInt
 10561  000D                     i1l626:	
 10562  000D  0870               	movf	??_INTIsr,w
 10563  000E  0020               	movlb	0	; select bank0
 10564  000F  00FF               	movwf	127
 10565  0010  0009               	retfie
 10566  0011                     __end_of_INTIsr:	
 10567                           
 10568                           	psect	text65
 10569  0849                     __ptext65:	
 10570 ;; *************** function _SYSInt *****************
 10571 ;; Defined at:
 10572 ;;		line 33 in file "SYS.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;		None
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;		None
 10577 ;; Return value:  Size  Location     Type
 10578 ;;		None               void
 10579 ;; Registers used:
 10580 ;;		wreg
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10590 ;;Total ram usage:        0 bytes
 10591 ;; Hardware stack levels used:    1
 10592 ;; This function calls:
 10593 ;;		Nothing
 10594 ;; This function is called by:
 10595 ;;		_INTIsr
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           
 10600                           ;psect for function _SYSInt
 10601  0849                     _SYSInt:	
 10602                           
 10603                           ;SYS.c: 35: u_SYS_STA.TICK=1;
 10604                           
 10605                           ;incstack = 0
 10606                           ; Regs used in _SYSInt: [wreg]
 10607  0849  0021               	movlb	1	; select bank1
 10608  084A  142C               	bsf	_u_SYS_STA^(0+128),0
 10609                           
 10610                           ;SYS.c: 38: TMR0=255-156;
 10611  084B  3063               	movlw	99
 10612  084C  0020               	movlb	0	; select bank0
 10613  084D  0095               	movwf	21	;volatile
 10614  084E  0008               	return
 10615  084F                     __end_of_SYSInt:	
 10616  007E                     btemp	set	126	;btemp
 10617  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    45
    Data        64
    BSS         90
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80     26      75
    BANK2            80      0      50
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___lbtoft	float  size(1) Largest target is 0

    ?___ftsub	float  size(1) Largest target is 0

    ?___lltoft	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___ftneg	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftpack	float  size(1) Largest target is 0

    ?___lldiv	unsigned long  size(1) Largest target is 0

    ?___llmod	unsigned long  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> RTXUpdateDisplay@status(BANK1[2]), 

    ?_ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ?_sprintf	int  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S872$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    RTXUpdateDisplay@p	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    DPYSendStr@data	PTR unsigned char  size(2) Largest target is 16
		 -> strTemp(BANK2[16]), strTitle(BANK1[12]), 

    DPYDrawChar@p	PTR unsigned char  size(1) Largest target is 9
		 -> picBatt(BANK2[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_CC1Read
    _RTXReadPkt->_PGMWriteNvm
    _RTXReadPkt->___lbtoft
    ___lbtoft->___ftpack
    _RTXSndPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIWrite
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _sprintf->___llmod
    ___llmod->___lldiv
    _DPYSendStr->_DPYSetCur
    _DPYIsBusy->_DLYDelay_us
    _DPYSendChar->_DPYWriteByte
    _DPYSetCur->_DPYWriteByte
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar
    _DPYDrawChar->_DPYWriteByte
    _DPYWriteByte->_DLYDelay_us
    _DPYWriteNibble->_DLYDelay_us
    _CC1Init->_CC1Write
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PGMInit
    _SYSTask->_PGMSelLong
    _RTXTick->_RTXSendPgm
    _RTXSendPgm->_RTXSndPkt
    _RTXTask->_RTXReadPkt
    _RTXSendRData->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_ftoa
    _ftoa->_sprintf
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _sprintf->___llmod
    ___llmod->___lldiv
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar
    _CC1Init->_CC1Write

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXReadPkt->_RTXUpdateDisplay
    _RTXInit->_RTXUpdateDisplay

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   24205
                                             71 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _CC1Init
                            _NVMInit
                            _DINInit
                            _DINTask
                            _DPYInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              1     1      0    1705
                            _DINTick
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    1117
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    1117
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   10956
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0   10956
                                             69 BANK0      2     2      0
                            _CC1Read
                        _PGMWriteNvm
                   _RTXUpdateDisplay
                          _RTXRcvPkt
                       _RTXSendRData
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3     343
                                              9 COMMON     3     0      3
                                              0 BANK0      5     5      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RTXSendRData                                         1     1      0    1117
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    1117
                                              2 BANK0      6     5      1
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2     390
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     130
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0    8196
                                             57 BANK0      1     1      0
                          _CC1Strobe
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _RTXUpdateDisplay                                    30    30      0    7967
                                             53 BANK0      4     4      0
                                              0 BANK1     26    26      0
                         _DPYSendStr
                               _ftoa
                            ___awdiv
                             ___ftge
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     300
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (4) _ftoa                                                14    10      4    4969
                                             39 BANK0     14    10      4
                            _sprintf
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             6     2      4     414
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4     252
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    1602
                                             10 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    1537
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3      45
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6     800
                                              0 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     136
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             26    17      9    1392
                                             13 BANK0     26    17      9
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4      92
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___llmod                                             10     2      8     159
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     162
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _DPYSendStr                                           8     4      4    1426
                                              0 BANK0      8     4      4
                          _DPYSetCur
                        _DPYSendChar
                          _DPYIsBusy
 ---------------------------------------------------------------------------------
 (5) _DPYIsBusy                                            2     2      0     105
                                              5 COMMON     2     2      0
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (5) _DPYSendChar                                          2     2      0     430
                                              8 COMMON     2     2      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYSetCur                                            4     3      1     498
                                              8 COMMON     4     3      1
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DPYInit                                              1     1      0    1528
                                              4 BANK0      1     1      0
                     _DPYInitDisplay
 ---------------------------------------------------------------------------------
 (2) _DPYInitDisplay                                       2     2      0    1497
                                             11 COMMON     1     1      0
                                              3 BANK0      1     1      0
                        _DLYDelay_ms
                     _DPYWriteNibble
                       _DPYWriteByte
                        _DPYDrawChar
 ---------------------------------------------------------------------------------
 (3) _DPYDrawChar                                          6     5      1     625
                                              8 COMMON     3     2      1
                                              0 BANK0      3     3      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (6) _DPYWriteByte                                         3     2      1     399
                                              5 COMMON     3     2      1
                _OUTSetHTCDataNibble
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (3) _DPYWriteNibble                                       2     1      1     368
                                              5 COMMON     2     1      1
                _OUTSetHTCDataNibble
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (6) _DLYDelay_us                                          4     2      2      68
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _OUTSetHTCDataNibble                                  3     3      0     207
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC1Init                                              2     2      0     557
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                        _DLYDelay_ms
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (3) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTIsr                                               1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (9) _SYSInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _CC1Init
     _DLYDelay_ms
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _NVMInit
   _DINInit
   _DINTask
   _DPYInit
     _DPYInitDisplay
       _DLYDelay_ms
       _DPYWriteNibble
         _OUTSetHTCDataNibble
         _DLYDelay_us
       _DPYWriteByte
         _OUTSetHTCDataNibble
         _DLYDelay_us
       _DPYDrawChar
         _DPYWriteByte
           _OUTSetHTCDataNibble
           _DLYDelay_us
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXUpdateDisplay
       _DPYSendStr
         _DPYSetCur
           _DPYWriteByte
             _OUTSetHTCDataNibble
             _DLYDelay_us
         _DPYSendChar
           _DPYWriteByte
             _OUTSetHTCDataNibble
             _DLYDelay_us
         _DPYIsBusy
           _DLYDelay_us
       _ftoa
         _sprintf
           _isdigit
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___wmul
         ___ftge
         ___ftmul
           ___ftpack
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
       ___awdiv
       ___ftge
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _PGMWriteNvm
         _NVMWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _ftoa
           _sprintf
             _isdigit
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
         ___awdiv
         ___ftge
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRData
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
       ___lbtoft
         ___ftpack
   _SYSInit
   _SYSTask
     _DINTick
     _PGMTick
     _PGMPgmOff
     _PGMSelDown
     _PGMSelLong
       _PGMWriteNvm
         _NVMWrite
     _RTXTick
       _RTXSendPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1A      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      32       9       62.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     109      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     114      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Nov 03 19:27:01 2014

          __size_of_CC1Strobe 0014                    __CFG_CP$ON 0000                            l14 0995  
                          l34 09AC                            l61 0AA3                            l70 0ACA  
                          l65 0ABE                            l94 09AF                            l79 0A5D  
                          l88 08D7                  ___awdiv@sign 0077           ___wmul@multiplicand 0073  
                ?_DLYDelay_ms 0071                  ?_DLYDelay_us 0071                  ___ftadd@exp1 007B  
                ___ftadd@exp2 007A                  ___ftadd@sign 0079                           l122 0C8C  
                         l211 0BC3                           l213 0BC1                           l151 0886  
                         l208 0908                           l170 052F                           l163 04EF  
                         l156 07EF                           l180 0586                           l173 0538  
                         l165 04FA                           l166 051E                           l183 0598  
                         l167 0509                           l258 091B                           l178 057F  
                         l356 09DE                           l460 0335                           l630 0E46  
                         l295 0F59                           l439 0BAF                           l471 0EFA  
                         l631 0E47                           l456 02CE                           l289 0C99  
                         l660 00E8                           l629 0E0A                           l558 0B68  
                         l663 0100                           l835 07C3                           l829 07AC  
                         l858 0487               __end_of_CC1Init 0C8D               __end_of_CC1Read 0A4A  
                __CFG_BORV$LO 0000                           wreg 0009                    _RTXReadPkt 0FA3  
             __end_of_DINInit 0909            DPYDrawChar@tmpAddr 0021               __end_of_DINTask 0A84  
             __end_of_DINTick 0BD7                  __CFG_LVP$OFF 0000                    _RTXSendPgm 0B69  
                 ?_DPYSendStr 0020                          l1048 0A8C                          l4000 0ACF  
                        l4010 0A62                          l4012 0A4B                          l4004 0AC1  
                        l4024 0C60                          l4034 0C83                          l4114 0F55  
                        l2700 09A7                          l3500 0077                          l3420 0B5D  
                        l4070 090F                          l3406 0B48                          l4160 0DE0  
                        l3520 00E4                          l3424 0B60               __end_of_DPYInit 091C  
                        l4066 090C                          l4170 0DEF                          l3522 00EA  
                        l4314 0298                          l2740 0AB3                          l2812 087E  
                        l2900 0593                          l4252 09C9                          l4148 0976  
                        l3532 010F                          l3508 00A7                          l4308 0283  
                        l2830 07DD                          l4254 09CC                          l4262 09D5  
                        l4158 0DD8                          l3542 012E                          l3526 00EF  
                        l3518 00B5                          l4326 02B9                          l2680 0981  
                        l2816 0881                          l2904 08F9                          l4176 0DFE  
                        l3640 0EAF                          l4336 02F0                          l4512 0B15  
                        l4098 0C95                          l4178 0DC7                          l3562 0192  
                        l3554 0163                          l3546 0134                          l4610 0440  
                        l4362 0361                          l4354 0341                          l4346 0318  
                        l4370 03AC                          l4290 0B93                          l4426 0FD6  
                        l4506 0B0E                          l2692 0998                          l2908 0903  
                        l2940 0A77                          l4268 0890                          l3900 0E9C  
                        l4620 0462                          l4452 0683                          l4364 037C  
                        l4198 0D50                          l3910 0D81                          l3582 020F  
                        l3566 01AF                          l3558 017A                          l3494 0068  
                        l4630 0483                          l4622 0466                          l3646 0EBA  
                        l4374 03DA                          l4518 0B1C                          l2688 0990  
                        l2944 0A7A                          l3912 0D8F                          l3920 0DB2  
                        l3576 01C7                          l3568 01B2                          l3584 004C  
                        l3752 0CD5                          l4560 0793                          l4616 0453  
                        l3672 0EF1                          l3664 0EE0                          l3656 0EC2  
                        l4288 0B8F                          l4296 0BA3                          l3586 021C  
                        l4570 07B9                          l4562 0798                          l4554 0782  
                        l4634 0499                          l4618 045D                          l3658 0ECE  
                        l2948 0A7E                          l2892 0581                          l2884 0561  
                        l3916 0DA7                          l3756 0CEB                          l4628 0479  
                        l4716 0BDB                          l3668 0EE9                          l4476 0F13  
                        l2878 055B                          l3598 08C5                          l4558 0789  
                        l4638 04AB                          l3838 070C                          l4718 0BED  
                        l3936 0A86                          l4568 07B1                          l4680 060C  
                        l4664 05C9                          l4648 04C6                          l4592 0417  
                        l3872 0771                          l3864 0757                          l3856 073C  
                        l4658 05B3                          l3866 0760                          l3858 074A  
                        l4692 0628                          l4676 0604                          l4588 0410  
                        l3868 0763                          l3886 0E63                          l4598 0426  
                        l3896 0E91                          l3888 0E71                          l4688 0620  
                        STR_1 082E                  __CFG_WDTE$ON 0000             NVMWrite@bufTmpRow 0020  
                        u3005 01D6                          _LATA 010C                          u3015 0219  
                        u3215 0ECF                          u3225 0ED9                          u4035 08DD  
                        u3235 0EE1                          u4045 09B5                          u5015 0BE1  
                        _PIE1 0091                          _PIE2 0092                          u3195 0EC5  
                        u5037 09BC                          u4095 0F6D                          u3805 0E92  
                        u2925 013B                          u3725 0758                          u4285 02ED  
                        u2935 0159                          u4615 07B4                          u3665 0713  
                        u3835 0D84                          u3915 0A8D                          u2955 0172  
                        u3765 0E66                          u3925 0A92                          u2965 018A  
                        u4645 07CA                          u3855 0D9D                          u2975 01A2  
                        u4575 078E                          u4815 0467                          u3695 073D  
                        u3785 0E72                          u3865 0DA8                          _PIR1 0011  
                        _PIR2 0012                          u3795 0E86                          u4595 07A7  
                        u4915 05D5                          u4755 0441                          u4925 05E5  
                        u4845 047A                          u4945 060D                          u4785 0454  
                        u4955 0613                          u4985 0629                          u4995 062F  
                        _TMR0 0015                          _WPUB 020D               __end_of_PGMInit 09DF  
             __end_of_PGMTick 08AC                  __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000  
                        _batt 00A0                          _main 0E04              __end_of_CC1Write 0B46  
                        _ftoa 0650                  ___ftpack@arg 0071               __end_of_NVMInit 0887  
             __end_of_NVMRead 0800                  ___ftpack@exp 0074                          _temp 00A3  
             __end_of_SPIInit 0ABF               __end_of_SPIRead 0ADF                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
             __end_of_OUTInit 09AD                  ?_DPYDrawChar 0078                 __CFG_BOREN$ON 0000  
                        start 0011               __end_of_RTXInit 0BB0             NVMWrite@latchAddr 0063  
             __end_of_RTXTask 0855               __end_of_RTXTick 08B9                 __CFG_IESO$OFF 0000  
             __end_of_SYSInit 0B69               __end_of_SYSTask 0B23            __size_of_DPYIsBusy 0040  
                ___ftmul@cntr 002E                  ___ftmul@sign 002F            __size_of_DPYSetCur 0016  
                 ?_PGMReadNvm 0070                 __CFG_LPBOR$ON 0000                   ?_PGMSelDown 0070  
                ___fttol@exp1 003D                   ?_PGMSelLong 0070              ??_DPYWriteNibble 0076  
                ?_DPYSendChar 0070                  ___fttol@lval 0039                  SPIInit@state 0072  
                       ?_main 0070                         ?_ftoa 0047               __end_of___awdiv 0EF8  
             __end_of___ftadd 04DE               __end_of___ftneg 0869               __end_of___lldiv 0EA5  
             __end_of___ftmul 0650               ___awdiv@divisor 0071                         _T1CON 0018  
             __end_of___llmod 0DBB               __end_of___ftsub 09F8               __end_of___fttol 077A  
          __size_of_PGMPgmOff 0005                         i1l626 000D               ___awdiv@counter 0076  
                       _PMADR 0191                         _PMDAT 0193                         _TMR1H 0017  
                       _TMR1L 0016                         _TRISA 008C                         _TRISB 008D  
                       _TRISC 008E                 __CFG_PWRTE$ON 0000                  ___lltoft@exp 007A  
                 _sys_pgm_sta 00AB         __size_of_RTXSendRData 0022               __end_of_dpowers 0829  
           __end_of_CC1Strobe 0969               __end_of_isdigit 08C7                         _pktRx 00BA  
                       _pktTx 00C3                 ___ftpack@sign 0075                         main@i 0068  
                       ftoa@f 0047              __end_of_NVMWrite 059C                         ftoa@l 0050  
            __end_of_SPIWrite 0A67                         status 0003                         wtemp0 007E  
             __end_of_sprintf 0222                  ?_PGMCheckNvm 0070                __CFG_MCLRE$OFF 0000  
             __initialization 0013                  DLYDelay_ms@i 0075                  DLYDelay_us@i 0073  
                __end_of_main 0E52                  __end_of_ftoa 06F3            __size_of_RTXRcvPkt 000E  
          __size_of_RTXSndPkt 0055                     ??_CC1Init 007B                     ??_CC1Read 0079  
         __size_of_DPYSendStr 0049                CC1Strobe@e_stb 0078             RTXUpdateDisplay@i 00EA  
           RTXUpdateDisplay@j 00E9             RTXUpdateDisplay@p 00E6                   DPYIsBusy@bf 0076  
                      ??_main 0067                    _cc1PaTable 014A                        ??_ftoa 004B  
               ___fttol@sign1 0038                  _RTXSendRData 0ADF                  CC1Init@state 0022  
                   ??_DINInit 0071                  NVMWrite@addr 0071                     ??_DINTask 0071  
                   ??_DINTick 0071                    _cc1InitVal 01A0                  ?_PGMNvmReset 0070  
                   ??_DPYInit 007C                     ??_PGMInit 007C                     ??_PGMTick 0071  
                 ?_RTXReadPkt 0070             __end_of_DPYIsBusy 0D78                 SPIRead@dstPtr 0074  
                 ?_RTXSendPgm 0070                     ??_NVMInit 0071                     ??_NVMRead 0075  
           __end_of_DPYSetCur 097F              ___llmod@dividend 0029                     ??_SPIInit 0071  
                   ??_SPIRead 0072              ___awdiv@dividend 0073                     ??_OUTInit 0071  
                      _ANSELA 018C                        _ANSELB 018D                        _ANSELC 018E  
            __end_of___ftpack 07DA              __end_of___lbtoft 0A12           __size_of_PGMReadNvm 0013  
            __end_of___lltoft 0C02                     ??_RTXInit 007C                  ?_PGMWriteNvm 0070  
         __size_of_PGMSelDown 000A                     ??_RTXTask 007C                     ??_RTXTick 007C  
         __size_of_PGMSelLong 000C                        _INTCON 000B        OUTSetHTCDataNibble@val 0072  
         _OUTSetHTCDataNibble 0A12                     ??_SYSInit 0071                        _PMCON1 0195  
                      _PMCON2 0196                     ??_SYSTask 007C                        _INTIsr 0004  
                      _OSCCON 0099                        _INInit 097F                        _WDTCON 0097  
                      _SSPBUF 0211             __end_of_PGMPgmOff 0849                        _SYSInt 0849  
    __end_of_RTXUpdateDisplay 03E8                   DPYSendStr@i 0026           RTXReadPkt@numRxByte 0066  
                      ___ftge 0CBF                 ?_DPYWriteByte 0075                        ___wmul 0A84  
                   ??___awdiv 0075                     ??___ftadd 0026                __CFG_STVREN$ON 0000  
                   ??___ftneg 0074                     ??___lldiv 0079                     ??___ftmul 0026  
                   ??___llmod 007A                     ??___ftsub 007C                     ??___fttol 0034  
        ?_OUTSetHTCDataNibble 0070       __size_of_DPYInitDisplay 003E              ___awdiv@quotient 0078  
                      _tmrPgm 006A                        ftoa@cp 0054         ___ftmul@f3_as_product 002B  
        __size_of_DLYDelay_ms 0019          __size_of_DLYDelay_us 0011                     ?_CC1Write 0077  
                   ??_isdigit 0071             __end_of_RTXRcvPkt 08D5                     ??_sprintf 0036  
           __end_of_RTXSndPkt 0F4D       __end_of__initialization 0043                    ___ftadd@f1 0020  
                  ___ftadd@f2 0023                    ___ftge@ff1 0071                    ___ftge@ff2 0074  
    RTXUpdateDisplay@maxDigit 00E8                    ___ftneg@f1 0071                    ___lbtoft@c 0024  
                  ___ftmul@f1 0020                    ___ftmul@f2 0023          __size_of_DPYDrawChar 002C  
                  ___ftsub@f1 002D                    ___ftsub@f2 002A                    ___fttol@f1 0030  
              __pcstackCOMMON 0070                ??_DPYWriteByte 0076                  __pidataBANK2 08E6  
                __pidataBANK3 0C2E           __size_of_RTXReadPkt 005D                    ___lltoft@c 0020  
             NVMWrite@rowAddr 0060           __size_of_RTXSendPgm 0023         ??_OUTSetHTCDataNibble 0071  
                   ?_NVMWrite 0071               CC1Strobe@cc1Stb 0079          __size_of_DPYSendChar 0009  
                   ?_SPIWrite 0071                    CC1Read@len 0078                    CC1Read@dst 0077  
                  ??_CC1Write 007A                  CC1Write@addr 0020                  DPYDrawChar@i 0022  
                DPYDrawChar@p 0078                  ??_DPYSendStr 0024                  sprintf@width 0042  
                  __pbssBANK0 0069                    __pbssBANK1 00A0                    __pbssBANK2 0120  
                     ?_INTIsr 0070                       ?_INInit 0070               __CFG_VCAPEN$OFF 0000  
                     ?_SYSInt 0070                     INInit@sta 0072          __size_of_PGMCheckNvm 000C  
                  __pmaintext 0E04                       ?___ftge 0071                  ??_PGMReadNvm 0078  
             CC1Write@cc1Addr 0021                       ?___wmul 0071                  ??_PGMSelDown 0071  
                ??_PGMSelLong 0065                    __pintentry 0004                       _CC1Init 0C5D  
                     _CC1Read 0A2E            __end_of_DPYSendStr 0E04             _u_in_sta_currTask 007C  
                   ?___ftpack 0071                     ?___lbtoft 0079                    ??_NVMWrite 0075  
                   ?___lltoft 0020                    ??_SPIWrite 0074                       _DINInit 08F7  
                     _DINTick 0BB0                       _DINTask 0A67                       _DPYInit 0909  
                     _PGMInit 09C6                       _PGMTick 089F          __size_of_PGMNvmReset 0013  
                     _SSPCON1 0215                       _SSPCON2 0216                       _NVMInit 087C  
                     _NVMRead 07DA                       _SPIInit 0AA1                       _SPIRead 0ABF  
                     _SSPSTAT 0214                       _OUTInit 0996                  DPYSendChar@c 0079  
             DPYDrawChar@addr 0020                    __stringtab 0800                       _RTXInit 0B8C  
                DPYSetCur@col 0078                       _RTXTick 08AC                       _RTXTask 084F  
                DPYSetCur@row 007A            __end_of_PGMReadNvm 092F                       _SYSInit 0B46  
                     _SYSTask 0B01            __end_of_PGMSelDown 087C            __end_of_PGMSelLong 089F  
                   _CC1Strobe 0955               __size_of_INTIsr 000D               __size_of_INInit 0017  
        __size_of_PGMWriteNvm 0013               __size_of_SYSInt 0006                     NVMWrite@i 0062  
                   NVMWrite@j 0064                     SPIWrite@i 0076         RTXUpdateDisplay@isDec 00E4  
             __size_of___ftge 003B                       ___awdiv 0EA5                       ___ftadd 03E8  
                RTXInit@state 0059                       ___ftneg 0861                       ___lldiv 0E52  
             __size_of___wmul 001D                       ___ftmul 059C                       ___llmod 0D78  
                     ___ftsub 09DF                       ___fttol 06F3                _DPYInitDisplay 0CFA  
                  ??___ftpack 0076                    ??___lbtoft 0020                    ??___lltoft 0079  
                     __ptext1 0B01                       __ptext2 08AC                       __ptext3 0B69  
                     __ptext4 0893                       __ptext5 0872                       __ptext6 0844  
                     __ptext7 089F                       __ptext8 0BB0                       __ptext9 0B46  
                     _picBatt 0141                       _dpowers 0801                       _isdigit 08B9  
                     _pgm_cfg 00CC                       _pgm_flg 00A8                  ??_RTXReadPkt 0065  
                ??_RTXSendPgm 0028                       _strTemp 0131          __end_of_DPYWriteByte 0FA3  
                     _sprintf 0046                       clrloop0 085C                       _rtx_flg 00A9  
OUTSetHTCDataNibble@dataToSet 0073                  RTXRcvPkt@len 0020                  RTXRcvPkt@dst 0023  
        end_of_initialization 0043                       ftoa@buf 0120                    _u_in_ev_up 00AD  
                     ftoa@rem 004C                     _DPYIsBusy 0D38                    ?_CC1Strobe 0070  
          RTXSndPkt@numRxByte 0025                       init_ram 0855            RTXSndPkt@numTxByte 0026  
                   _DPYSetCur 0969                       initloop 0856                  RTXSndPkt@len 0022  
                RTXSndPkt@src 0024                  RTXSndPkt@sta 0027               ___lldiv@divisor 0071  
           ?_RTXUpdateDisplay 0070               ___lldiv@counter 0024            ??_RTXUpdateDisplay 0055  
                   _PGMPgmOff 0844        __end_of_DPYInitDisplay 0D38                    _tmrDbncSel 0069  
          __end_of_RTXReadPkt 1000                    DINInit@sta 0071            __end_of_RTXSendPgm 0B8C  
                   _PORTAbits 000C                     _PORTBbits 000D             DPYWriteNibble@val 0075  
                  _tmrLongSel 00A6              __CFG_FOSC$INTOSC 0000       __size_of_DPYWriteNibble 0032  
           __size_of_CC1Write 0023                   NVMRead@addr 0071                   NVMRead@dest 0073  
                  ?_DPYIsBusy 0070                     _RTXRcvPkt 08C7                    ?_DPYSetCur 0078  
                   _RTXSndPkt 0EF8                __end_of_INTIsr 0011                __end_of_INInit 0996  
              __end_of_SYSInt 084F                   ___ftmul@exp 002A                    ?_PGMPgmOff 0070  
             ?_DPYInitDisplay 0070                DLYDelay_ms@val 0071                DLYDelay_us@val 0071  
              __end_of___ftge 0CFA                __end_of___wmul 0AA1                 ??_DLYDelay_ms 0073  
               ??_DLYDelay_us 0073                DPYSendStr@data 0021                  SYSInit@state 0072  
           __size_of_NVMWrite 00BE             __size_of_SPIWrite 001D           start_initialization 0013  
                  ftoa@status 004A                   CC1Read@addr 007A                   NVMWrite@len 0074  
                    ??_INTIsr 0070                      ??_INInit 0071                   ??_CC1Strobe 0077  
                  DPYInit@sta 0024                    ?_RTXRcvPkt 0020                    ?_RTXSndPkt 0022  
               ??_DPYDrawChar 0079               ___llmod@divisor 0025               ___llmod@counter 007B  
                    ??_SYSInt 0070                CC1Read@cc1Addr 007B   __end_of_OUTSetHTCDataNibble 0A2E  
         RTXUpdateDisplay@val 00E5                      ??___ftge 0077                      ??___wmul 0075  
               ??_DPYSendChar 0078                      ?_CC1Init 0070                      ?_CC1Read 0077  
                 __pdataBANK2 0141                   __pdataBANK3 01A0                   SPIWrite@len 0073  
                    ?_DINInit 0070                      ?_DINTask 0070                      ?_DINTick 0070  
       __size_of_DPYWriteByte 0056             __size_of___ftpack 0060             __size_of___lbtoft 001A  
           __size_of___lltoft 002B                   __pbssCOMMON 007C                      ?_DPYInit 0070  
               __pcstackBANK0 0020                 __pcstackBANK1 00D1           __end_of_DLYDelay_ms 09C6  
         __end_of_DLYDelay_us 08E6                     _s_CC1_FLG 00AA                      ?_PGMInit 0070  
                    ?_PGMTick 0070           __end_of__stringdata 0839                  _isdigit$1010 0071  
                    ?_NVMInit 0070                      ?_NVMRead 0071                      ?_SPIInit 0070  
                    ?_SPIRead 0071                NVMWrite@source 0073                      ?_OUTInit 0070  
                PGMInit@state 0066                      ?_RTXInit 0070                      ?_RTXTask 0070  
                    ?_RTXTick 0070                   ??_DPYIsBusy 0075                   CC1Write@len 0079  
                    ?_SYSInit 0070                   CC1Write@src 0077                      ?_SYSTask 0070  
                 sprintf@_val 003D                   sprintf@flag 003B                   ??_DPYSetCur 0079  
               ??_PGMCheckNvm 007C                   sprintf@prec 0044                   ??_PGMPgmOff 0071  
         __end_of_DPYDrawChar 0C2E                      ?___awdiv 0071                      ?___ftadd 0020  
                _DPYWriteByte 0F4D                      ?___ftneg 0071                      ?___lldiv 0071  
                    ?___ftmul 0020                      ?___llmod 0025                      ?___ftsub 002A  
                    ?___fttol 0030                     _u_SYS_STA 00AC                     __pstrings 0800  
            _u_in_sta_tmpTask 006F                 ?_RTXSendRData 0070                      NVMRead@i 0077  
               ??_PGMNvmReset 0065                      SPIRead@i 0075                      _CC1Write 0B23  
         __end_of_DPYSendChar 0872                      ?_isdigit 0070                _DPYWriteNibble 0C8D  
                    ?_sprintf 002D                 ??_PGMWriteNvm 0078                     _u_flg_din 006C  
                 ??_RTXRcvPkt 0021                   ??_RTXSndPkt 0023                ___wmul@product 0075  
                    _LATAbits 010C                      _LATCbits 010E                     clear_ram0 085B  
                    _PIR1bits 0011           __end_of_PGMCheckNvm 0893              DPYWriteNibble@rs 0076  
                   _tmrRcvPkt 006B                ??_RTXSendRData 0028              __size_of_CC1Init 0030  
            __size_of_CC1Read 001C                   _DLYDelay_ms 09AD                   _DLYDelay_us 08D5  
                    _NVMWrite 04DE                   __stringdata 082E                      _SPIWrite 0A4A  
           ___wmul@multiplier 0071                    NVMInit@sta 0071                    NVMRead@len 0074  
      __end_of_DPYWriteNibble 0CBF     __size_of_RTXUpdateDisplay 01C6                 DPYSetCur@addr 007B  
            __size_of_DINInit 0012              __size_of_DINTask 001D              __size_of_DINTick 0027  
            __size_of_DPYInit 0013                    SPIRead@len 0071              __size_of_PGMInit 0019  
            __size_of_PGMTick 000D           __end_of_PGMNvmReset 0955                 DPYSendStr@col 0020  
               DPYSendStr@len 0023              __size_of_NVMInit 000B                 DPYSendStr@row 0027  
            __size_of_NVMRead 0026              __size_of_SPIInit 001E              __size_of_SPIRead 0020  
                _u_in_ev_down 006D                  _u_in_ev_long 006E              __size_of_OUTInit 0017  
            __size_of_RTXInit 0024              __size_of_RTXTask 0006              __size_of_RTXTick 000D  
            __size_of_SYSInit 0023              __size_of_SYSTask 0022              ??_DPYInitDisplay 007B  
                 _DPYDrawChar 0C02                    OUTInit@sta 0072           __end_of_PGMWriteNvm 0942  
                 _DPYSendChar 0869              __size_of___awdiv 0053              __size_of___ftadd 00F6  
            __size_of___ftneg 0008              __size_of___lldiv 0053              __size_of___ftmul 00B4  
            __size_of___llmod 0043              __size_of___ftsub 0019              __size_of___fttol 0087  
                    ___ftpack 077A                      ___lbtoft 09F8        RTXUpdateDisplay@offset 00E7  
          __end_of__stringtab 0801        RTXUpdateDisplay@posDec 00E3                      ___lltoft 0BD7  
      RTXUpdateDisplay@strTmp 00D1        RTXUpdateDisplay@status 00E1               ?_DPYWriteNibble 0075  
            __size_of_isdigit 000E                      __ptext10 084F                      __ptext11 0FA3  
                    __ptext20 0EA5                      __ptext12 09F8                      __ptext21 0650  
                    __ptext13 0ADF                      __ptext30 0046                      __ptext22 0BD7  
                    __ptext14 0EF8                      __ptext31 0A84                      __ptext23 06F3  
                    __ptext15 08C7                      __ptext40 0887                      __ptext32 0D78  
                    __ptext24 09DF                      __ptext16 0A2E                      __ptext41 0942  
                    __ptext33 0E52                      __ptext25 03E8                      __ptext17 0ABF  
                    __ptext50 0C8D                      __ptext42 092F                      __ptext34 08B9  
                    __ptext26 0861                      __ptext18 0B8C                      __ptext51 08D5  
                    __ptext43 04DE                      __ptext35 0DBB                      __ptext27 059C  
                    __ptext19 0222                      __ptext60 09AD                      __ptext52 0A12  
                    __ptext44 091C                      __ptext36 0D38                      __ptext28 077A  
                    __ptext61 0AA1                      __ptext53 0A67                      __ptext45 07DA  
                    __ptext37 0869                      __ptext29 0CBF                      __ptext62 0996  
                    __ptext54 08F7                      __ptext46 0909                      __ptext38 0969  
                    __ptext63 097F                      __ptext55 087C                      __ptext47 0CFA  
                    __ptext39 09C6                      __ptext56 0C5D                      __ptext48 0C02  
                    __ptext65 0849                      __ptext57 0B23                      __ptext49 0F4D  
                    __ptext58 0955                      __ptext59 0A4A              __size_of_sprintf 01DC  
         __end_of_nvm_pgm_cfg 082E                 __size_of_main 004E                 __size_of_ftoa 00A3  
                 _PGMCheckNvm 0887               DPYWriteByte@val 0075                      _strTitle 00AE  
                 _PGMNvmReset 0942                    _INTCONbits 000B                      isdigit@c 0072  
           DPYInitDisplay@tmp 0023                    _DPYSendStr 0DBB                SPIWrite@srcPtr 0071  
                    intlevel1 0000                     sprintf@ap 003C                     sprintf@sp 0041  
                 _PGMWriteNvm 092F                    _PMCON1bits 0195          __end_of_RTXSendRData 0B01  
            ___lldiv@dividend 0075             __CFG_CLKOUTEN$OFF 0000                DPYWriteByte@rs 0077  
                  _PGMReadNvm 091C                    _PGMSelDown 0872                    _PGMSelLong 0893  
__size_of_OUTSetHTCDataNibble 001C                    _OPTION_REG 0095                      sprintf@c 0046  
                    sprintf@f 002D              _RTXUpdateDisplay 0222              ___lldiv@quotient 0020  
                 _nvm_pgm_cfg 0829                    _SSPCONbits 0215  
