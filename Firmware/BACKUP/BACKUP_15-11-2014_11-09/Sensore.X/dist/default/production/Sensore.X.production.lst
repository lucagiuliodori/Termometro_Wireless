

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Nov 10 17:17:43 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	dabs	1,0x7E,2
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0090                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  0116                     	;# 
   121  0117                     	;# 
   122  011D                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  018E                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0194                     	;# 
   132  0195                     	;# 
   133  0196                     	;# 
   134  0197                     	;# 
   135  0199                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019C                     	;# 
   142  019C                     	;# 
   143  019D                     	;# 
   144  019E                     	;# 
   145  019F                     	;# 
   146  020D                     	;# 
   147  0210                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0291                     	;# 
   164  0291                     	;# 
   165  0292                     	;# 
   166  0293                     	;# 
   167  0298                     	;# 
   168  0298                     	;# 
   169  0299                     	;# 
   170  029A                     	;# 
   171  0394                     	;# 
   172  0395                     	;# 
   173  0396                     	;# 
   174  0FE4                     	;# 
   175  0FE5                     	;# 
   176  0FE6                     	;# 
   177  0FE7                     	;# 
   178  0FE8                     	;# 
   179  0FE9                     	;# 
   180  0FEA                     	;# 
   181  0FEB                     	;# 
   182  0FED                     	;# 
   183  0FEE                     	;# 
   184  0FEF                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  0010                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0015                     	;# 
   204  0016                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001C                     	;# 
   212  008C                     	;# 
   213  008D                     	;# 
   214  008E                     	;# 
   215  0090                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0095                     	;# 
   219  0096                     	;# 
   220  0097                     	;# 
   221  0099                     	;# 
   222  009A                     	;# 
   223  009B                     	;# 
   224  009B                     	;# 
   225  009C                     	;# 
   226  009D                     	;# 
   227  009E                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  0116                     	;# 
   232  0117                     	;# 
   233  011D                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  018E                     	;# 
   237  0191                     	;# 
   238  0191                     	;# 
   239  0192                     	;# 
   240  0193                     	;# 
   241  0193                     	;# 
   242  0194                     	;# 
   243  0195                     	;# 
   244  0196                     	;# 
   245  0197                     	;# 
   246  0199                     	;# 
   247  019A                     	;# 
   248  019B                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019C                     	;# 
   253  019C                     	;# 
   254  019D                     	;# 
   255  019E                     	;# 
   256  019F                     	;# 
   257  020D                     	;# 
   258  0210                     	;# 
   259  0211                     	;# 
   260  0211                     	;# 
   261  0212                     	;# 
   262  0212                     	;# 
   263  0213                     	;# 
   264  0213                     	;# 
   265  0214                     	;# 
   266  0214                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  0291                     	;# 
   275  0291                     	;# 
   276  0292                     	;# 
   277  0293                     	;# 
   278  0298                     	;# 
   279  0298                     	;# 
   280  0299                     	;# 
   281  029A                     	;# 
   282  0394                     	;# 
   283  0395                     	;# 
   284  0396                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  0010                     	;# 
   312  0011                     	;# 
   313  0012                     	;# 
   314  0015                     	;# 
   315  0016                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001C                     	;# 
   323  008C                     	;# 
   324  008D                     	;# 
   325  008E                     	;# 
   326  0090                     	;# 
   327  0091                     	;# 
   328  0092                     	;# 
   329  0095                     	;# 
   330  0096                     	;# 
   331  0097                     	;# 
   332  0099                     	;# 
   333  009A                     	;# 
   334  009B                     	;# 
   335  009B                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  0116                     	;# 
   343  0117                     	;# 
   344  011D                     	;# 
   345  018C                     	;# 
   346  018D                     	;# 
   347  018E                     	;# 
   348  0191                     	;# 
   349  0191                     	;# 
   350  0192                     	;# 
   351  0193                     	;# 
   352  0193                     	;# 
   353  0194                     	;# 
   354  0195                     	;# 
   355  0196                     	;# 
   356  0197                     	;# 
   357  0199                     	;# 
   358  019A                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019C                     	;# 
   364  019C                     	;# 
   365  019D                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  020D                     	;# 
   369  0210                     	;# 
   370  0211                     	;# 
   371  0211                     	;# 
   372  0212                     	;# 
   373  0212                     	;# 
   374  0213                     	;# 
   375  0213                     	;# 
   376  0214                     	;# 
   377  0214                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0216                     	;# 
   382  0216                     	;# 
   383  0217                     	;# 
   384  0217                     	;# 
   385  0291                     	;# 
   386  0291                     	;# 
   387  0292                     	;# 
   388  0293                     	;# 
   389  0298                     	;# 
   390  0298                     	;# 
   391  0299                     	;# 
   392  029A                     	;# 
   393  0394                     	;# 
   394  0395                     	;# 
   395  0396                     	;# 
   396  0FE4                     	;# 
   397  0FE5                     	;# 
   398  0FE6                     	;# 
   399  0FE7                     	;# 
   400  0FE8                     	;# 
   401  0FE9                     	;# 
   402  0FEA                     	;# 
   403  0FEB                     	;# 
   404  0FED                     	;# 
   405  0FEE                     	;# 
   406  0FEF                     	;# 
   407  0000                     	;# 
   408  0001                     	;# 
   409  0002                     	;# 
   410  0003                     	;# 
   411  0004                     	;# 
   412  0005                     	;# 
   413  0006                     	;# 
   414  0007                     	;# 
   415  0008                     	;# 
   416  0009                     	;# 
   417  000A                     	;# 
   418  000B                     	;# 
   419  000C                     	;# 
   420  000D                     	;# 
   421  000E                     	;# 
   422  0010                     	;# 
   423  0011                     	;# 
   424  0012                     	;# 
   425  0015                     	;# 
   426  0016                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001C                     	;# 
   434  008C                     	;# 
   435  008D                     	;# 
   436  008E                     	;# 
   437  0090                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0095                     	;# 
   441  0096                     	;# 
   442  0097                     	;# 
   443  0099                     	;# 
   444  009A                     	;# 
   445  009B                     	;# 
   446  009B                     	;# 
   447  009C                     	;# 
   448  009D                     	;# 
   449  009E                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  0116                     	;# 
   454  0117                     	;# 
   455  011D                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458  018E                     	;# 
   459  0191                     	;# 
   460  0191                     	;# 
   461  0192                     	;# 
   462  0193                     	;# 
   463  0193                     	;# 
   464  0194                     	;# 
   465  0195                     	;# 
   466  0196                     	;# 
   467  0197                     	;# 
   468  0199                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019C                     	;# 
   475  019C                     	;# 
   476  019D                     	;# 
   477  019E                     	;# 
   478  019F                     	;# 
   479  020D                     	;# 
   480  0210                     	;# 
   481  0211                     	;# 
   482  0211                     	;# 
   483  0212                     	;# 
   484  0212                     	;# 
   485  0213                     	;# 
   486  0213                     	;# 
   487  0214                     	;# 
   488  0214                     	;# 
   489  0215                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0216                     	;# 
   493  0216                     	;# 
   494  0217                     	;# 
   495  0217                     	;# 
   496  0291                     	;# 
   497  0291                     	;# 
   498  0292                     	;# 
   499  0293                     	;# 
   500  0298                     	;# 
   501  0298                     	;# 
   502  0299                     	;# 
   503  029A                     	;# 
   504  0394                     	;# 
   505  0395                     	;# 
   506  0396                     	;# 
   507  0FE4                     	;# 
   508  0FE5                     	;# 
   509  0FE6                     	;# 
   510  0FE7                     	;# 
   511  0FE8                     	;# 
   512  0FE9                     	;# 
   513  0FEA                     	;# 
   514  0FEB                     	;# 
   515  0FED                     	;# 
   516  0FEE                     	;# 
   517  0FEF                     	;# 
   518  0000                     	;# 
   519  0001                     	;# 
   520  0002                     	;# 
   521  0003                     	;# 
   522  0004                     	;# 
   523  0005                     	;# 
   524  0006                     	;# 
   525  0007                     	;# 
   526  0008                     	;# 
   527  0009                     	;# 
   528  000A                     	;# 
   529  000B                     	;# 
   530  000C                     	;# 
   531  000D                     	;# 
   532  000E                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0015                     	;# 
   537  0016                     	;# 
   538  0016                     	;# 
   539  0017                     	;# 
   540  0018                     	;# 
   541  0019                     	;# 
   542  001A                     	;# 
   543  001B                     	;# 
   544  001C                     	;# 
   545  008C                     	;# 
   546  008D                     	;# 
   547  008E                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0095                     	;# 
   552  0096                     	;# 
   553  0097                     	;# 
   554  0099                     	;# 
   555  009A                     	;# 
   556  009B                     	;# 
   557  009B                     	;# 
   558  009C                     	;# 
   559  009D                     	;# 
   560  009E                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  0116                     	;# 
   565  0117                     	;# 
   566  011D                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  018E                     	;# 
   570  0191                     	;# 
   571  0191                     	;# 
   572  0192                     	;# 
   573  0193                     	;# 
   574  0193                     	;# 
   575  0194                     	;# 
   576  0195                     	;# 
   577  0196                     	;# 
   578  0197                     	;# 
   579  0199                     	;# 
   580  019A                     	;# 
   581  019B                     	;# 
   582  019B                     	;# 
   583  019B                     	;# 
   584  019B                     	;# 
   585  019C                     	;# 
   586  019C                     	;# 
   587  019D                     	;# 
   588  019E                     	;# 
   589  019F                     	;# 
   590  020D                     	;# 
   591  0210                     	;# 
   592  0211                     	;# 
   593  0211                     	;# 
   594  0212                     	;# 
   595  0212                     	;# 
   596  0213                     	;# 
   597  0213                     	;# 
   598  0214                     	;# 
   599  0214                     	;# 
   600  0215                     	;# 
   601  0215                     	;# 
   602  0215                     	;# 
   603  0216                     	;# 
   604  0216                     	;# 
   605  0217                     	;# 
   606  0217                     	;# 
   607  0291                     	;# 
   608  0291                     	;# 
   609  0292                     	;# 
   610  0293                     	;# 
   611  0298                     	;# 
   612  0298                     	;# 
   613  0299                     	;# 
   614  029A                     	;# 
   615  0394                     	;# 
   616  0395                     	;# 
   617  0396                     	;# 
   618  0FE4                     	;# 
   619  0FE5                     	;# 
   620  0FE6                     	;# 
   621  0FE7                     	;# 
   622  0FE8                     	;# 
   623  0FE9                     	;# 
   624  0FEA                     	;# 
   625  0FEB                     	;# 
   626  0FED                     	;# 
   627  0FEE                     	;# 
   628  0FEF                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0015                     	;# 
   648  0016                     	;# 
   649  0016                     	;# 
   650  0017                     	;# 
   651  0018                     	;# 
   652  0019                     	;# 
   653  001A                     	;# 
   654  001B                     	;# 
   655  001C                     	;# 
   656  008C                     	;# 
   657  008D                     	;# 
   658  008E                     	;# 
   659  0090                     	;# 
   660  0091                     	;# 
   661  0092                     	;# 
   662  0095                     	;# 
   663  0096                     	;# 
   664  0097                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  0116                     	;# 
   676  0117                     	;# 
   677  011D                     	;# 
   678  018C                     	;# 
   679  018D                     	;# 
   680  018E                     	;# 
   681  0191                     	;# 
   682  0191                     	;# 
   683  0192                     	;# 
   684  0193                     	;# 
   685  0193                     	;# 
   686  0194                     	;# 
   687  0195                     	;# 
   688  0196                     	;# 
   689  0197                     	;# 
   690  0199                     	;# 
   691  019A                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019C                     	;# 
   698  019D                     	;# 
   699  019E                     	;# 
   700  019F                     	;# 
   701  020D                     	;# 
   702  0210                     	;# 
   703  0211                     	;# 
   704  0211                     	;# 
   705  0212                     	;# 
   706  0212                     	;# 
   707  0213                     	;# 
   708  0213                     	;# 
   709  0214                     	;# 
   710  0214                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  0291                     	;# 
   719  0291                     	;# 
   720  0292                     	;# 
   721  0293                     	;# 
   722  0298                     	;# 
   723  0298                     	;# 
   724  0299                     	;# 
   725  029A                     	;# 
   726  0394                     	;# 
   727  0395                     	;# 
   728  0396                     	;# 
   729  0FE4                     	;# 
   730  0FE5                     	;# 
   731  0FE6                     	;# 
   732  0FE7                     	;# 
   733  0FE8                     	;# 
   734  0FE9                     	;# 
   735  0FEA                     	;# 
   736  0FEB                     	;# 
   737  0FED                     	;# 
   738  0FEE                     	;# 
   739  0FEF                     	;# 
   740  0000                     	;# 
   741  0001                     	;# 
   742  0002                     	;# 
   743  0003                     	;# 
   744  0004                     	;# 
   745  0005                     	;# 
   746  0006                     	;# 
   747  0007                     	;# 
   748  0008                     	;# 
   749  0009                     	;# 
   750  000A                     	;# 
   751  000B                     	;# 
   752  000C                     	;# 
   753  000D                     	;# 
   754  000E                     	;# 
   755  0010                     	;# 
   756  0011                     	;# 
   757  0012                     	;# 
   758  0015                     	;# 
   759  0016                     	;# 
   760  0016                     	;# 
   761  0017                     	;# 
   762  0018                     	;# 
   763  0019                     	;# 
   764  001A                     	;# 
   765  001B                     	;# 
   766  001C                     	;# 
   767  008C                     	;# 
   768  008D                     	;# 
   769  008E                     	;# 
   770  0090                     	;# 
   771  0091                     	;# 
   772  0092                     	;# 
   773  0095                     	;# 
   774  0096                     	;# 
   775  0097                     	;# 
   776  0099                     	;# 
   777  009A                     	;# 
   778  009B                     	;# 
   779  009B                     	;# 
   780  009C                     	;# 
   781  009D                     	;# 
   782  009E                     	;# 
   783  010C                     	;# 
   784  010D                     	;# 
   785  010E                     	;# 
   786  0116                     	;# 
   787  0117                     	;# 
   788  011D                     	;# 
   789  018C                     	;# 
   790  018D                     	;# 
   791  018E                     	;# 
   792  0191                     	;# 
   793  0191                     	;# 
   794  0192                     	;# 
   795  0193                     	;# 
   796  0193                     	;# 
   797  0194                     	;# 
   798  0195                     	;# 
   799  0196                     	;# 
   800  0197                     	;# 
   801  0199                     	;# 
   802  019A                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019C                     	;# 
   808  019C                     	;# 
   809  019D                     	;# 
   810  019E                     	;# 
   811  019F                     	;# 
   812  020D                     	;# 
   813  0210                     	;# 
   814  0211                     	;# 
   815  0211                     	;# 
   816  0212                     	;# 
   817  0212                     	;# 
   818  0213                     	;# 
   819  0213                     	;# 
   820  0214                     	;# 
   821  0214                     	;# 
   822  0215                     	;# 
   823  0215                     	;# 
   824  0215                     	;# 
   825  0216                     	;# 
   826  0216                     	;# 
   827  0217                     	;# 
   828  0217                     	;# 
   829  0291                     	;# 
   830  0291                     	;# 
   831  0292                     	;# 
   832  0293                     	;# 
   833  0298                     	;# 
   834  0298                     	;# 
   835  0299                     	;# 
   836  029A                     	;# 
   837  0394                     	;# 
   838  0395                     	;# 
   839  0396                     	;# 
   840  0FE4                     	;# 
   841  0FE5                     	;# 
   842  0FE6                     	;# 
   843  0FE7                     	;# 
   844  0FE8                     	;# 
   845  0FE9                     	;# 
   846  0FEA                     	;# 
   847  0FEB                     	;# 
   848  0FED                     	;# 
   849  0FEE                     	;# 
   850  0FEF                     	;# 
   851  0000                     	;# 
   852  0001                     	;# 
   853  0002                     	;# 
   854  0003                     	;# 
   855  0004                     	;# 
   856  0005                     	;# 
   857  0006                     	;# 
   858  0007                     	;# 
   859  0008                     	;# 
   860  0009                     	;# 
   861  000A                     	;# 
   862  000B                     	;# 
   863  000C                     	;# 
   864  000D                     	;# 
   865  000E                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0015                     	;# 
   870  0016                     	;# 
   871  0016                     	;# 
   872  0017                     	;# 
   873  0018                     	;# 
   874  0019                     	;# 
   875  001A                     	;# 
   876  001B                     	;# 
   877  001C                     	;# 
   878  008C                     	;# 
   879  008D                     	;# 
   880  008E                     	;# 
   881  0090                     	;# 
   882  0091                     	;# 
   883  0092                     	;# 
   884  0095                     	;# 
   885  0096                     	;# 
   886  0097                     	;# 
   887  0099                     	;# 
   888  009A                     	;# 
   889  009B                     	;# 
   890  009B                     	;# 
   891  009C                     	;# 
   892  009D                     	;# 
   893  009E                     	;# 
   894  010C                     	;# 
   895  010D                     	;# 
   896  010E                     	;# 
   897  0116                     	;# 
   898  0117                     	;# 
   899  011D                     	;# 
   900  018C                     	;# 
   901  018D                     	;# 
   902  018E                     	;# 
   903  0191                     	;# 
   904  0191                     	;# 
   905  0192                     	;# 
   906  0193                     	;# 
   907  0193                     	;# 
   908  0194                     	;# 
   909  0195                     	;# 
   910  0196                     	;# 
   911  0197                     	;# 
   912  0199                     	;# 
   913  019A                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019C                     	;# 
   919  019C                     	;# 
   920  019D                     	;# 
   921  019E                     	;# 
   922  019F                     	;# 
   923  020D                     	;# 
   924  0210                     	;# 
   925  0211                     	;# 
   926  0211                     	;# 
   927  0212                     	;# 
   928  0212                     	;# 
   929  0213                     	;# 
   930  0213                     	;# 
   931  0214                     	;# 
   932  0214                     	;# 
   933  0215                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0216                     	;# 
   937  0216                     	;# 
   938  0217                     	;# 
   939  0217                     	;# 
   940  0291                     	;# 
   941  0291                     	;# 
   942  0292                     	;# 
   943  0293                     	;# 
   944  0298                     	;# 
   945  0298                     	;# 
   946  0299                     	;# 
   947  029A                     	;# 
   948  0394                     	;# 
   949  0395                     	;# 
   950  0396                     	;# 
   951  0FE4                     	;# 
   952  0FE5                     	;# 
   953  0FE6                     	;# 
   954  0FE7                     	;# 
   955  0FE8                     	;# 
   956  0FE9                     	;# 
   957  0FEA                     	;# 
   958  0FEB                     	;# 
   959  0FED                     	;# 
   960  0FEE                     	;# 
   961  0FEF                     	;# 
   962  0000                     	;# 
   963  0001                     	;# 
   964  0002                     	;# 
   965  0003                     	;# 
   966  0004                     	;# 
   967  0005                     	;# 
   968  0006                     	;# 
   969  0007                     	;# 
   970  0008                     	;# 
   971  0009                     	;# 
   972  000A                     	;# 
   973  000B                     	;# 
   974  000C                     	;# 
   975  000D                     	;# 
   976  000E                     	;# 
   977  0010                     	;# 
   978  0011                     	;# 
   979  0012                     	;# 
   980  0015                     	;# 
   981  0016                     	;# 
   982  0016                     	;# 
   983  0017                     	;# 
   984  0018                     	;# 
   985  0019                     	;# 
   986  001A                     	;# 
   987  001B                     	;# 
   988  001C                     	;# 
   989  008C                     	;# 
   990  008D                     	;# 
   991  008E                     	;# 
   992  0090                     	;# 
   993  0091                     	;# 
   994  0092                     	;# 
   995  0095                     	;# 
   996  0096                     	;# 
   997  0097                     	;# 
   998  0099                     	;# 
   999  009A                     	;# 
  1000  009B                     	;# 
  1001  009B                     	;# 
  1002  009C                     	;# 
  1003  009D                     	;# 
  1004  009E                     	;# 
  1005  010C                     	;# 
  1006  010D                     	;# 
  1007  010E                     	;# 
  1008  0116                     	;# 
  1009  0117                     	;# 
  1010  011D                     	;# 
  1011  018C                     	;# 
  1012  018D                     	;# 
  1013  018E                     	;# 
  1014  0191                     	;# 
  1015  0191                     	;# 
  1016  0192                     	;# 
  1017  0193                     	;# 
  1018  0193                     	;# 
  1019  0194                     	;# 
  1020  0195                     	;# 
  1021  0196                     	;# 
  1022  0197                     	;# 
  1023  0199                     	;# 
  1024  019A                     	;# 
  1025  019B                     	;# 
  1026  019B                     	;# 
  1027  019B                     	;# 
  1028  019B                     	;# 
  1029  019C                     	;# 
  1030  019C                     	;# 
  1031  019D                     	;# 
  1032  019E                     	;# 
  1033  019F                     	;# 
  1034  020D                     	;# 
  1035  0210                     	;# 
  1036  0211                     	;# 
  1037  0211                     	;# 
  1038  0212                     	;# 
  1039  0212                     	;# 
  1040  0213                     	;# 
  1041  0213                     	;# 
  1042  0214                     	;# 
  1043  0214                     	;# 
  1044  0215                     	;# 
  1045  0215                     	;# 
  1046  0215                     	;# 
  1047  0216                     	;# 
  1048  0216                     	;# 
  1049  0217                     	;# 
  1050  0217                     	;# 
  1051  0291                     	;# 
  1052  0291                     	;# 
  1053  0292                     	;# 
  1054  0293                     	;# 
  1055  0298                     	;# 
  1056  0298                     	;# 
  1057  0299                     	;# 
  1058  029A                     	;# 
  1059  0394                     	;# 
  1060  0395                     	;# 
  1061  0396                     	;# 
  1062  0FE4                     	;# 
  1063  0FE5                     	;# 
  1064  0FE6                     	;# 
  1065  0FE7                     	;# 
  1066  0FE8                     	;# 
  1067  0FE9                     	;# 
  1068  0FEA                     	;# 
  1069  0FEB                     	;# 
  1070  0FED                     	;# 
  1071  0FEE                     	;# 
  1072  0FEF                     	;# 
  1073  0000                     	;# 
  1074  0001                     	;# 
  1075  0002                     	;# 
  1076  0003                     	;# 
  1077  0004                     	;# 
  1078  0005                     	;# 
  1079  0006                     	;# 
  1080  0007                     	;# 
  1081  0008                     	;# 
  1082  0009                     	;# 
  1083  000A                     	;# 
  1084  000B                     	;# 
  1085  000C                     	;# 
  1086  000D                     	;# 
  1087  000E                     	;# 
  1088  0010                     	;# 
  1089  0011                     	;# 
  1090  0012                     	;# 
  1091  0015                     	;# 
  1092  0016                     	;# 
  1093  0016                     	;# 
  1094  0017                     	;# 
  1095  0018                     	;# 
  1096  0019                     	;# 
  1097  001A                     	;# 
  1098  001B                     	;# 
  1099  001C                     	;# 
  1100  008C                     	;# 
  1101  008D                     	;# 
  1102  008E                     	;# 
  1103  0090                     	;# 
  1104  0091                     	;# 
  1105  0092                     	;# 
  1106  0095                     	;# 
  1107  0096                     	;# 
  1108  0097                     	;# 
  1109  0099                     	;# 
  1110  009A                     	;# 
  1111  009B                     	;# 
  1112  009B                     	;# 
  1113  009C                     	;# 
  1114  009D                     	;# 
  1115  009E                     	;# 
  1116  010C                     	;# 
  1117  010D                     	;# 
  1118  010E                     	;# 
  1119  0116                     	;# 
  1120  0117                     	;# 
  1121  011D                     	;# 
  1122  018C                     	;# 
  1123  018D                     	;# 
  1124  018E                     	;# 
  1125  0191                     	;# 
  1126  0191                     	;# 
  1127  0192                     	;# 
  1128  0193                     	;# 
  1129  0193                     	;# 
  1130  0194                     	;# 
  1131  0195                     	;# 
  1132  0196                     	;# 
  1133  0197                     	;# 
  1134  0199                     	;# 
  1135  019A                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019C                     	;# 
  1141  019C                     	;# 
  1142  019D                     	;# 
  1143  019E                     	;# 
  1144  019F                     	;# 
  1145  020D                     	;# 
  1146  0210                     	;# 
  1147  0211                     	;# 
  1148  0211                     	;# 
  1149  0212                     	;# 
  1150  0212                     	;# 
  1151  0213                     	;# 
  1152  0213                     	;# 
  1153  0214                     	;# 
  1154  0214                     	;# 
  1155  0215                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0216                     	;# 
  1159  0216                     	;# 
  1160  0217                     	;# 
  1161  0217                     	;# 
  1162  0291                     	;# 
  1163  0291                     	;# 
  1164  0292                     	;# 
  1165  0293                     	;# 
  1166  0298                     	;# 
  1167  0298                     	;# 
  1168  0299                     	;# 
  1169  029A                     	;# 
  1170  0394                     	;# 
  1171  0395                     	;# 
  1172  0396                     	;# 
  1173  0FE4                     	;# 
  1174  0FE5                     	;# 
  1175  0FE6                     	;# 
  1176  0FE7                     	;# 
  1177  0FE8                     	;# 
  1178  0FE9                     	;# 
  1179  0FEA                     	;# 
  1180  0FEB                     	;# 
  1181  0FED                     	;# 
  1182  0FEE                     	;# 
  1183  0FEF                     	;# 
  1184  0000                     	;# 
  1185  0001                     	;# 
  1186  0002                     	;# 
  1187  0003                     	;# 
  1188  0004                     	;# 
  1189  0005                     	;# 
  1190  0006                     	;# 
  1191  0007                     	;# 
  1192  0008                     	;# 
  1193  0009                     	;# 
  1194  000A                     	;# 
  1195  000B                     	;# 
  1196  000C                     	;# 
  1197  000D                     	;# 
  1198  000E                     	;# 
  1199  0010                     	;# 
  1200  0011                     	;# 
  1201  0012                     	;# 
  1202  0015                     	;# 
  1203  0016                     	;# 
  1204  0016                     	;# 
  1205  0017                     	;# 
  1206  0018                     	;# 
  1207  0019                     	;# 
  1208  001A                     	;# 
  1209  001B                     	;# 
  1210  001C                     	;# 
  1211  008C                     	;# 
  1212  008D                     	;# 
  1213  008E                     	;# 
  1214  0090                     	;# 
  1215  0091                     	;# 
  1216  0092                     	;# 
  1217  0095                     	;# 
  1218  0096                     	;# 
  1219  0097                     	;# 
  1220  0099                     	;# 
  1221  009A                     	;# 
  1222  009B                     	;# 
  1223  009B                     	;# 
  1224  009C                     	;# 
  1225  009D                     	;# 
  1226  009E                     	;# 
  1227  010C                     	;# 
  1228  010D                     	;# 
  1229  010E                     	;# 
  1230  0116                     	;# 
  1231  0117                     	;# 
  1232  011D                     	;# 
  1233  018C                     	;# 
  1234  018D                     	;# 
  1235  018E                     	;# 
  1236  0191                     	;# 
  1237  0191                     	;# 
  1238  0192                     	;# 
  1239  0193                     	;# 
  1240  0193                     	;# 
  1241  0194                     	;# 
  1242  0195                     	;# 
  1243  0196                     	;# 
  1244  0197                     	;# 
  1245  0199                     	;# 
  1246  019A                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019C                     	;# 
  1252  019C                     	;# 
  1253  019D                     	;# 
  1254  019E                     	;# 
  1255  019F                     	;# 
  1256  020D                     	;# 
  1257  0210                     	;# 
  1258  0211                     	;# 
  1259  0211                     	;# 
  1260  0212                     	;# 
  1261  0212                     	;# 
  1262  0213                     	;# 
  1263  0213                     	;# 
  1264  0214                     	;# 
  1265  0214                     	;# 
  1266  0215                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0216                     	;# 
  1270  0216                     	;# 
  1271  0217                     	;# 
  1272  0217                     	;# 
  1273  0291                     	;# 
  1274  0291                     	;# 
  1275  0292                     	;# 
  1276  0293                     	;# 
  1277  0298                     	;# 
  1278  0298                     	;# 
  1279  0299                     	;# 
  1280  029A                     	;# 
  1281  0394                     	;# 
  1282  0395                     	;# 
  1283  0396                     	;# 
  1284  0FE4                     	;# 
  1285  0FE5                     	;# 
  1286  0FE6                     	;# 
  1287  0FE7                     	;# 
  1288  0FE8                     	;# 
  1289  0FE9                     	;# 
  1290  0FEA                     	;# 
  1291  0FEB                     	;# 
  1292  0FED                     	;# 
  1293  0FEE                     	;# 
  1294  0FEF                     	;# 
  1295  0000                     	;# 
  1296  0001                     	;# 
  1297  0002                     	;# 
  1298  0003                     	;# 
  1299  0004                     	;# 
  1300  0005                     	;# 
  1301  0006                     	;# 
  1302  0007                     	;# 
  1303  0008                     	;# 
  1304  0009                     	;# 
  1305  000A                     	;# 
  1306  000B                     	;# 
  1307  000C                     	;# 
  1308  000D                     	;# 
  1309  000E                     	;# 
  1310  0010                     	;# 
  1311  0011                     	;# 
  1312  0012                     	;# 
  1313  0015                     	;# 
  1314  0016                     	;# 
  1315  0016                     	;# 
  1316  0017                     	;# 
  1317  0018                     	;# 
  1318  0019                     	;# 
  1319  001A                     	;# 
  1320  001B                     	;# 
  1321  001C                     	;# 
  1322  008C                     	;# 
  1323  008D                     	;# 
  1324  008E                     	;# 
  1325  0090                     	;# 
  1326  0091                     	;# 
  1327  0092                     	;# 
  1328  0095                     	;# 
  1329  0096                     	;# 
  1330  0097                     	;# 
  1331  0099                     	;# 
  1332  009A                     	;# 
  1333  009B                     	;# 
  1334  009B                     	;# 
  1335  009C                     	;# 
  1336  009D                     	;# 
  1337  009E                     	;# 
  1338  010C                     	;# 
  1339  010D                     	;# 
  1340  010E                     	;# 
  1341  0116                     	;# 
  1342  0117                     	;# 
  1343  011D                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0194                     	;# 
  1353  0195                     	;# 
  1354  0196                     	;# 
  1355  0197                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019B                     	;# 
  1361  019B                     	;# 
  1362  019C                     	;# 
  1363  019C                     	;# 
  1364  019D                     	;# 
  1365  019E                     	;# 
  1366  019F                     	;# 
  1367  020D                     	;# 
  1368  0210                     	;# 
  1369  0211                     	;# 
  1370  0211                     	;# 
  1371  0212                     	;# 
  1372  0212                     	;# 
  1373  0213                     	;# 
  1374  0213                     	;# 
  1375  0214                     	;# 
  1376  0214                     	;# 
  1377  0215                     	;# 
  1378  0215                     	;# 
  1379  0215                     	;# 
  1380  0216                     	;# 
  1381  0216                     	;# 
  1382  0217                     	;# 
  1383  0217                     	;# 
  1384  0291                     	;# 
  1385  0291                     	;# 
  1386  0292                     	;# 
  1387  0293                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  0394                     	;# 
  1393  0395                     	;# 
  1394  0396                     	;# 
  1395  0FE4                     	;# 
  1396  0FE5                     	;# 
  1397  0FE6                     	;# 
  1398  0FE7                     	;# 
  1399  0FE8                     	;# 
  1400  0FE9                     	;# 
  1401  0FEA                     	;# 
  1402  0FEB                     	;# 
  1403  0FED                     	;# 
  1404  0FEE                     	;# 
  1405  0FEF                     	;# 
  1406  0000                     	;# 
  1407  0001                     	;# 
  1408  0002                     	;# 
  1409  0003                     	;# 
  1410  0004                     	;# 
  1411  0005                     	;# 
  1412  0006                     	;# 
  1413  0007                     	;# 
  1414  0008                     	;# 
  1415  0009                     	;# 
  1416  000A                     	;# 
  1417  000B                     	;# 
  1418  000C                     	;# 
  1419  000D                     	;# 
  1420  000E                     	;# 
  1421  0010                     	;# 
  1422  0011                     	;# 
  1423  0012                     	;# 
  1424  0015                     	;# 
  1425  0016                     	;# 
  1426  0016                     	;# 
  1427  0017                     	;# 
  1428  0018                     	;# 
  1429  0019                     	;# 
  1430  001A                     	;# 
  1431  001B                     	;# 
  1432  001C                     	;# 
  1433  008C                     	;# 
  1434  008D                     	;# 
  1435  008E                     	;# 
  1436  0090                     	;# 
  1437  0091                     	;# 
  1438  0092                     	;# 
  1439  0095                     	;# 
  1440  0096                     	;# 
  1441  0097                     	;# 
  1442  0099                     	;# 
  1443  009A                     	;# 
  1444  009B                     	;# 
  1445  009B                     	;# 
  1446  009C                     	;# 
  1447  009D                     	;# 
  1448  009E                     	;# 
  1449  010C                     	;# 
  1450  010D                     	;# 
  1451  010E                     	;# 
  1452  0116                     	;# 
  1453  0117                     	;# 
  1454  011D                     	;# 
  1455  018C                     	;# 
  1456  018D                     	;# 
  1457  018E                     	;# 
  1458  0191                     	;# 
  1459  0191                     	;# 
  1460  0192                     	;# 
  1461  0193                     	;# 
  1462  0193                     	;# 
  1463  0194                     	;# 
  1464  0195                     	;# 
  1465  0196                     	;# 
  1466  0197                     	;# 
  1467  0199                     	;# 
  1468  019A                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019B                     	;# 
  1473  019C                     	;# 
  1474  019C                     	;# 
  1475  019D                     	;# 
  1476  019E                     	;# 
  1477  019F                     	;# 
  1478  020D                     	;# 
  1479  0210                     	;# 
  1480  0211                     	;# 
  1481  0211                     	;# 
  1482  0212                     	;# 
  1483  0212                     	;# 
  1484  0213                     	;# 
  1485  0213                     	;# 
  1486  0214                     	;# 
  1487  0214                     	;# 
  1488  0215                     	;# 
  1489  0215                     	;# 
  1490  0215                     	;# 
  1491  0216                     	;# 
  1492  0216                     	;# 
  1493  0217                     	;# 
  1494  0217                     	;# 
  1495  0291                     	;# 
  1496  0291                     	;# 
  1497  0292                     	;# 
  1498  0293                     	;# 
  1499  0298                     	;# 
  1500  0298                     	;# 
  1501  0299                     	;# 
  1502  029A                     	;# 
  1503  0394                     	;# 
  1504  0395                     	;# 
  1505  0396                     	;# 
  1506  0FE4                     	;# 
  1507  0FE5                     	;# 
  1508  0FE6                     	;# 
  1509  0FE7                     	;# 
  1510  0FE8                     	;# 
  1511  0FE9                     	;# 
  1512  0FEA                     	;# 
  1513  0FEB                     	;# 
  1514  0FED                     	;# 
  1515  0FEE                     	;# 
  1516  0FEF                     	;# 
  1517  0000                     	;# 
  1518  0001                     	;# 
  1519  0002                     	;# 
  1520  0003                     	;# 
  1521  0004                     	;# 
  1522  0005                     	;# 
  1523  0006                     	;# 
  1524  0007                     	;# 
  1525  0008                     	;# 
  1526  0009                     	;# 
  1527  000A                     	;# 
  1528  000B                     	;# 
  1529  000C                     	;# 
  1530  000D                     	;# 
  1531  000E                     	;# 
  1532  0010                     	;# 
  1533  0011                     	;# 
  1534  0012                     	;# 
  1535  0015                     	;# 
  1536  0016                     	;# 
  1537  0016                     	;# 
  1538  0017                     	;# 
  1539  0018                     	;# 
  1540  0019                     	;# 
  1541  001A                     	;# 
  1542  001B                     	;# 
  1543  001C                     	;# 
  1544  008C                     	;# 
  1545  008D                     	;# 
  1546  008E                     	;# 
  1547  0090                     	;# 
  1548  0091                     	;# 
  1549  0092                     	;# 
  1550  0095                     	;# 
  1551  0096                     	;# 
  1552  0097                     	;# 
  1553  0099                     	;# 
  1554  009A                     	;# 
  1555  009B                     	;# 
  1556  009B                     	;# 
  1557  009C                     	;# 
  1558  009D                     	;# 
  1559  009E                     	;# 
  1560  010C                     	;# 
  1561  010D                     	;# 
  1562  010E                     	;# 
  1563  0116                     	;# 
  1564  0117                     	;# 
  1565  011D                     	;# 
  1566  018C                     	;# 
  1567  018D                     	;# 
  1568  018E                     	;# 
  1569  0191                     	;# 
  1570  0191                     	;# 
  1571  0192                     	;# 
  1572  0193                     	;# 
  1573  0193                     	;# 
  1574  0194                     	;# 
  1575  0195                     	;# 
  1576  0196                     	;# 
  1577  0197                     	;# 
  1578  0199                     	;# 
  1579  019A                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019B                     	;# 
  1584  019C                     	;# 
  1585  019C                     	;# 
  1586  019D                     	;# 
  1587  019E                     	;# 
  1588  019F                     	;# 
  1589  020D                     	;# 
  1590  0210                     	;# 
  1591  0211                     	;# 
  1592  0211                     	;# 
  1593  0212                     	;# 
  1594  0212                     	;# 
  1595  0213                     	;# 
  1596  0213                     	;# 
  1597  0214                     	;# 
  1598  0214                     	;# 
  1599  0215                     	;# 
  1600  0215                     	;# 
  1601  0215                     	;# 
  1602  0216                     	;# 
  1603  0216                     	;# 
  1604  0217                     	;# 
  1605  0217                     	;# 
  1606  0291                     	;# 
  1607  0291                     	;# 
  1608  0292                     	;# 
  1609  0293                     	;# 
  1610  0298                     	;# 
  1611  0298                     	;# 
  1612  0299                     	;# 
  1613  029A                     	;# 
  1614  0394                     	;# 
  1615  0395                     	;# 
  1616  0396                     	;# 
  1617  0FE4                     	;# 
  1618  0FE5                     	;# 
  1619  0FE6                     	;# 
  1620  0FE7                     	;# 
  1621  0FE8                     	;# 
  1622  0FE9                     	;# 
  1623  0FEA                     	;# 
  1624  0FEB                     	;# 
  1625  0FED                     	;# 
  1626  0FEE                     	;# 
  1627  0FEF                     	;# 
  1628                           
  1629                           	psect	idataBANK1
  1630  0C84                     __pidataBANK1:	
  1631                           
  1632                           ;initializer for _cc1PaTable
  1633  0C84  3403               	retlw	3
  1634  0C85  340F               	retlw	15
  1635  0C86  341E               	retlw	30
  1636  0C87  3427               	retlw	39
  1637  0C88  3450               	retlw	80
  1638  0C89  3481               	retlw	129
  1639  0C8A  34CB               	retlw	203
  1640  0C8B  34C2               	retlw	194
  1641                           
  1642                           	psect	idataBANK2
  1643  07C6                     __pidataBANK2:	
  1644                           
  1645                           ;initializer for _cc1InitVal
  1646  07C6  3447               	retlw	71
  1647  07C7  3446               	retlw	70
  1648  07C8  3480               	retlw	128
  1649  07C9  340B               	retlw	11
  1650  07CA  34D3               	retlw	211
  1651  07CB  3491               	retlw	145
  1652  07CC  3409               	retlw	9
  1653  07CD  3408               	retlw	8
  1654  07CE  3404               	retlw	4
  1655  07CF  3400               	retlw	0
  1656  07D0  3400               	retlw	0
  1657  07D1  3406               	retlw	6
  1658  07D2  3400               	retlw	0
  1659  07D3  3421               	retlw	33
  1660  07D4  3463               	retlw	99
  1661  07D5  3491               	retlw	145
  1662  07D6  34CA               	retlw	202
  1663  07D7  3483               	retlw	131
  1664  07D8  3402               	retlw	2
  1665  07D9  3402               	retlw	2
  1666  07DA  343B               	retlw	59
  1667  07DB  3434               	retlw	52
  1668  07DC  3407               	retlw	7
  1669  07DD  343F               	retlw	63
  1670  07DE  3408               	retlw	8
  1671  07DF  3416               	retlw	22
  1672  07E0  346C               	retlw	108
  1673  07E1  3403               	retlw	3
  1674  07E2  3440               	retlw	64
  1675  07E3  3491               	retlw	145
  1676  07E4  3487               	retlw	135
  1677  07E5  346B               	retlw	107
  1678  07E6  34FB               	retlw	251
  1679  07E7  3456               	retlw	86
  1680  07E8  3416               	retlw	22
  1681  07E9  34E9               	retlw	233
  1682  07EA  342A               	retlw	42
  1683  07EB  3400               	retlw	0
  1684  07EC  341F               	retlw	31
  1685  07ED  3441               	retlw	65
  1686  07EE  3400               	retlw	0
  1687  07EF  3459               	retlw	89
  1688  07F0  347F               	retlw	127
  1689  07F1  343F               	retlw	63
  1690  07F2  3481               	retlw	129
  1691  07F3  3435               	retlw	53
  1692  07F4  3409               	retlw	9
  1693                           
  1694                           	psect	strings
  1695  0800                     __pstrings:	
  1696  0800                     __stringtab:	
  1697  0800  3400               	retlw	0
  1698  0801                     __end_of__stringtab:	
  1699  0801                     _nvm_pgm_cfg:	
  1700  0801  345C               	retlw	92
  1701  0802  34C5               	retlw	197
  1702  0803  3400               	retlw	0
  1703  0804  3400               	retlw	0
  1704  0805  3400               	retlw	0
  1705  0806                     __end_of_nvm_pgm_cfg:	
  1706  000B                     _INTCON	set	11
  1707  000B                     _INTCONbits	set	11
  1708  0011                     _PIR1	set	17
  1709  0011                     _PIR1bits	set	17
  1710  0012                     _PIR2	set	18
  1711  000C                     _PORTAbits	set	12
  1712  000D                     _PORTB	set	13
  1713  000D                     _PORTBbits	set	13
  1714  000E                     _PORTC	set	14
  1715  000E                     _PORTCbits	set	14
  1716  0018                     _T1CON	set	24
  1717  0015                     _TMR0	set	21
  1718  0017                     _TMR1H	set	23
  1719  0016                     _TMR1L	set	22
  1720  009D                     _ADCON0	set	157
  1721  009D                     _ADCON0bits	set	157
  1722  009E                     _ADCON1	set	158
  1723  009C                     _ADRESH	set	156
  1724  0095                     _OPTION_REG	set	149
  1725  0099                     _OSCCON	set	153
  1726  0091                     _PIE1	set	145
  1727  0092                     _PIE2	set	146
  1728  008C                     _TRISA	set	140
  1729  008D                     _TRISB	set	141
  1730  008E                     _TRISC	set	142
  1731  0097                     _WDTCON	set	151
  1732  0117                     _FVRCON	set	279
  1733  0191                     _PMADR	set	401
  1734  0193                     _PMDAT	set	403
  1735  018C                     _ANSELA	set	396
  1736  018D                     _ANSELB	set	397
  1737  018E                     _ANSELC	set	398
  1738  0195                     _PMCON1	set	405
  1739  0195                     _PMCON1bits	set	405
  1740  0196                     _PMCON2	set	406
  1741  0211                     _SSPBUF	set	529
  1742  0215                     _SSPCON1	set	533
  1743  0216                     _SSPCON2	set	534
  1744  0215                     _SSPCONbits	set	533
  1745  0214                     _SSPSTAT	set	532
  1746  020D                     _WPUB	set	525
  1747  0396                     _IOCBFbits	set	918
  1748  0395                     _IOCBN	set	917
  1749  0394                     _IOCBP	set	916
  1750                           
  1751                           ; #config settings
  1752  0000                     
  1753                           	psect	cinit
  1754  0016                     start_initialization:	
  1755  0016                     __initialization:	
  1756                           
  1757                           ; Clear objects allocated to COMMON
  1758  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1759                           
  1760                           ; Clear objects allocated to BANK0
  1761  0017  3069               	movlw	low __pbssBANK0
  1762  0018  0084               	movwf	4
  1763  0019  3000               	movlw	high __pbssBANK0
  1764  001A  0085               	movwf	5
  1765  001B  3007               	movlw	7
  1766  001C  318C  2476  3180   	fcall	clear_ram0
  1767                           
  1768                           ; Clear objects allocated to BANK1
  1769  001F  30A0               	movlw	low __pbssBANK1
  1770  0020  0084               	movwf	4
  1771  0021  3000               	movlw	high __pbssBANK1
  1772  0022  0085               	movwf	5
  1773  0023  302A               	movlw	42
  1774  0024  318C  2476  3180   	fcall	clear_ram0
  1775                           
  1776                           ; Initialize objects allocated to BANK1
  1777  0027  3084               	movlw	low __pidataBANK1
  1778  0028  0084               	movwf	4
  1779  0029  308C               	movlw	(high __pidataBANK1)| (0+128)
  1780  002A  0085               	movwf	5
  1781  002B  30CA               	movlw	low __pdataBANK1
  1782  002C  0086               	movwf	6
  1783  002D  3000               	movlw	high __pdataBANK1
  1784  002E  0087               	movwf	7
  1785  002F  3008               	movlw	8
  1786  0030  318C  2470  3180   	fcall	init_ram
  1787                           
  1788                           ; Initialize objects allocated to BANK2
  1789  0033  30C6               	movlw	low __pidataBANK2
  1790  0034  0084               	movwf	4
  1791  0035  3087               	movlw	(high __pidataBANK2)| (0+128)
  1792  0036  0085               	movwf	5
  1793  0037  3020               	movlw	low __pdataBANK2
  1794  0038  0086               	movwf	6
  1795  0039  3001               	movlw	high __pdataBANK2
  1796  003A  0087               	movwf	7
  1797  003B  302F               	movlw	47
  1798  003C  318C  2470         	fcall	init_ram
  1799  003E                     end_of_initialization:	
  1800                           ;End of C runtime variable initialization code
  1801                           
  1802  003E                     __end_of__initialization:	
  1803  003E  0020               	movlb	0
  1804  003F  3186  2E84         	ljmp	_main	;jump to C main() function
  1805                           
  1806                           	psect	bssCOMMON
  1807  007C                     __pbssCOMMON:	
  1808  007C                     _u_in_sta_currTask:	
  1809  007C                     	ds	1
  1810                           
  1811                           	psect	bssBANK0
  1812  0069                     __pbssBANK0:	
  1813  0069                     _batt:	
  1814  0069                     	ds	1
  1815  006A                     _flg_slp:	
  1816  006A                     	ds	1
  1817  006B                     _pgm_flg:	
  1818  006B                     	ds	1
  1819  006C                     _tmrPgm:	
  1820  006C                     	ds	1
  1821  006D                     _tmrRcvPkt:	
  1822  006D                     	ds	1
  1823  006E                     _u_flg_din:	
  1824  006E                     	ds	1
  1825  006F                     _u_in_sta_tmpTask:	
  1826  006F                     	ds	1
  1827                           
  1828                           	psect	bssBANK1
  1829  00A0                     __pbssBANK1:	
  1830  00A0                     _battV:	
  1831  00A0                     	ds	3
  1832  00A3                     _tempC:	
  1833  00A3                     	ds	3
  1834  00A6                     _tmrLongSel:	
  1835  00A6                     	ds	2
  1836  00A8                     _adc_ch:	
  1837  00A8                     	ds	1
  1838  00A9                     _cntSndData:	
  1839  00A9                     	ds	1
  1840  00AA                     _rtx_flg:	
  1841  00AA                     	ds	1
  1842  00AB                     _s_CC1_FLG:	
  1843  00AB                     	ds	1
  1844  00AC                     _sys_pgm_sta:	
  1845  00AC                     	ds	1
  1846  00AD                     _temp:	
  1847  00AD                     	ds	1
  1848  00AE                     _tmrDbncSel:	
  1849  00AE                     	ds	1
  1850  00AF                     _u_SYS_STA:	
  1851  00AF                     	ds	1
  1852  00B0                     _u_in_ev_down:	
  1853  00B0                     	ds	1
  1854  00B1                     _u_in_ev_long:	
  1855  00B1                     	ds	1
  1856  00B2                     _u_in_ev_up:	
  1857  00B2                     	ds	1
  1858  00B3                     _pktRx:	
  1859  00B3                     	ds	9
  1860  00BC                     _pktTx:	
  1861  00BC                     	ds	9
  1862  00C5                     _pgm_cfg:	
  1863  00C5                     	ds	5
  1864                           
  1865                           	psect	dataBANK1
  1866  00CA                     __pdataBANK1:	
  1867  00CA                     _cc1PaTable:	
  1868  00CA                     	ds	8
  1869                           
  1870                           	psect	dataBANK2
  1871  0120                     __pdataBANK2:	
  1872  0120                     _cc1InitVal:	
  1873  0120                     	ds	47
  1874                           
  1875                           	psect	clrtext
  1876  0C76                     clear_ram0:	
  1877                           ;	Called with FSR0 containing the base address, and
  1878                           ;	WREG with the size to clear
  1879                           
  1880  0C76  0064               	clrwdt	;clear the watchdog before getting into this loop
  1881  0C77                     clrloop0:	
  1882  0C77  0180               	clrf	0	;clear RAM location pointed to by FSR
  1883  0C78  3101               	addfsr 0,1
  1884  0C79  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1885  0C7A  2C77               	goto	clrloop0	;have we reached the end yet?
  1886  0C7B  3400               	retlw	0	;all done for this memory range, return
  1887                           
  1888                           	psect	inittext
  1889  0C70                     init_ram:	
  1890  0C70  00FE               	movwf	126
  1891  0C71                     initloop:	
  1892  0C71  0012               	moviw fsr0++
  1893  0C72  001E               	movwi fsr1++
  1894  0C73  0BFE               	decfsz	126,f
  1895  0C74  2C71               	goto	initloop
  1896  0C75  3400               	retlw	0
  1897                           
  1898                           	psect	cstackCOMMON
  1899  0070                     __pcstackCOMMON:	
  1900  0070                     ?_CC1Strobe:	
  1901  0070                     ?_CC1LoadREG:	
  1902                           ; 0 bytes @ 0x0
  1903                           
  1904  0070                     ?_PGMReadNvm:	
  1905                           ; 0 bytes @ 0x0
  1906                           
  1907  0070                     ?_PGMCheckNvm:	
  1908                           ; 0 bytes @ 0x0
  1909                           
  1910  0070                     ?_PGMNvmReset:	
  1911                           ; 0 bytes @ 0x0
  1912                           
  1913  0070                     ?_RTXStartSendData:	
  1914                           ; 0 bytes @ 0x0
  1915                           
  1916  0070                     ?_RTXSendData:	
  1917                           ; 0 bytes @ 0x0
  1918                           
  1919  0070                     ?_RTXReadPkt:	
  1920                           ; 0 bytes @ 0x0
  1921                           
  1922  0070                     ?_RTXSendRPgm:	
  1923                           ; 0 bytes @ 0x0
  1924                           
  1925  0070                     ?_INInit:	
  1926                           ; 0 bytes @ 0x0
  1927                           
  1928  0070                     ?_OUTInit:	
  1929                           ; 0 bytes @ 0x0
  1930                           
  1931  0070                     ?_SPIInit:	
  1932                           ; 0 bytes @ 0x0
  1933                           
  1934  0070                     ?_ADCInit:	
  1935                           ; 0 bytes @ 0x0
  1936                           
  1937  0070                     ?_ADCConv:	
  1938                           ; 0 bytes @ 0x0
  1939                           
  1940  0070                     ?_CC1Init:	
  1941                           ; 0 bytes @ 0x0
  1942                           
  1943  0070                     ?_CC1Sleep:	
  1944                           ; 0 bytes @ 0x0
  1945                           
  1946  0070                     ?_LEDInit:	
  1947                           ; 0 bytes @ 0x0
  1948                           
  1949  0070                     ?_LEDNormalFlash:	
  1950                           ; 0 bytes @ 0x0
  1951                           
  1952  0070                     ?_LEDFastFlash:	
  1953                           ; 0 bytes @ 0x0
  1954                           
  1955  0070                     ?_NVMInit:	
  1956                           ; 0 bytes @ 0x0
  1957                           
  1958  0070                     ?_DINInit:	
  1959                           ; 0 bytes @ 0x0
  1960                           
  1961  0070                     ?_DINTick:	
  1962                           ; 0 bytes @ 0x0
  1963                           
  1964  0070                     ?_DINTask:	
  1965                           ; 0 bytes @ 0x0
  1966                           
  1967  0070                     ?_SLPSleep:	
  1968                           ; 0 bytes @ 0x0
  1969                           
  1970  0070                     ?_PGMInit:	
  1971                           ; 0 bytes @ 0x0
  1972                           
  1973  0070                     ?_PGMTick:	
  1974                           ; 0 bytes @ 0x0
  1975                           
  1976  0070                     ?_PGMWriteNvm:	
  1977                           ; 0 bytes @ 0x0
  1978                           
  1979  0070                     ?_PGMPgmOff:	
  1980                           ; 0 bytes @ 0x0
  1981                           
  1982  0070                     ?_PGMSelDown:	
  1983                           ; 0 bytes @ 0x0
  1984                           
  1985  0070                     ?_PGMSelLong:	
  1986                           ; 0 bytes @ 0x0
  1987                           
  1988  0070                     ?_RTXInit:	
  1989                           ; 0 bytes @ 0x0
  1990                           
  1991  0070                     ?_RTXTick:	
  1992                           ; 0 bytes @ 0x0
  1993                           
  1994  0070                     ?_RTXTask:	
  1995                           ; 0 bytes @ 0x0
  1996                           
  1997  0070                     ?_RTXAwake:	
  1998                           ; 0 bytes @ 0x0
  1999                           
  2000  0070                     ?_SYSInit:	
  2001                           ; 0 bytes @ 0x0
  2002                           
  2003  0070                     ?_SYSInt:	
  2004                           ; 0 bytes @ 0x0
  2005                           
  2006  0070                     ??_SYSInt:	
  2007                           ; 0 bytes @ 0x0
  2008                           
  2009  0070                     ?_SYSTask:	
  2010                           ; 0 bytes @ 0x0
  2011                           
  2012  0070                     ?_INTIsr:	
  2013                           ; 0 bytes @ 0x0
  2014                           
  2015  0070                     ??_INTIsr:	
  2016                           ; 0 bytes @ 0x0
  2017                           
  2018  0070                     ?_main:	
  2019                           ; 0 bytes @ 0x0
  2020                           
  2021                           
  2022                           ; 0 bytes @ 0x0
  2023  0070                     	ds	1
  2024  0071                     ??_INInit:	
  2025  0071                     ??_OUTInit:	
  2026                           ; 0 bytes @ 0x1
  2027                           
  2028  0071                     ??_SPIInit:	
  2029                           ; 0 bytes @ 0x1
  2030                           
  2031  0071                     ?_SPIRead:	
  2032                           ; 0 bytes @ 0x1
  2033                           
  2034  0071                     ?_SPIWrite:	
  2035                           ; 0 bytes @ 0x1
  2036                           
  2037  0071                     ??_ADCInit:	
  2038                           ; 0 bytes @ 0x1
  2039                           
  2040  0071                     ?_DLYDelay_ms:	
  2041                           ; 0 bytes @ 0x1
  2042                           
  2043  0071                     ??_LEDInit:	
  2044                           ; 0 bytes @ 0x1
  2045                           
  2046  0071                     ??_NVMInit:	
  2047                           ; 0 bytes @ 0x1
  2048                           
  2049  0071                     ?_NVMRead:	
  2050                           ; 0 bytes @ 0x1
  2051                           
  2052  0071                     ?_NVMWrite:	
  2053                           ; 0 bytes @ 0x1
  2054                           
  2055  0071                     ??_DINInit:	
  2056                           ; 0 bytes @ 0x1
  2057                           
  2058  0071                     ??_DINTick:	
  2059                           ; 0 bytes @ 0x1
  2060                           
  2061  0071                     ??_DINTask:	
  2062                           ; 0 bytes @ 0x1
  2063                           
  2064  0071                     ??_PGMTick:	
  2065                           ; 0 bytes @ 0x1
  2066                           
  2067  0071                     ??_PGMPgmOff:	
  2068                           ; 0 bytes @ 0x1
  2069                           
  2070  0071                     ??_SYSInit:	
  2071                           ; 0 bytes @ 0x1
  2072                           
  2073  0071                     ?___ftge:	
  2074                           ; 0 bytes @ 0x1
  2075                           
  2076  0071                     ?___lwdiv:	
  2077                           ; 1 bit 
  2078                           
  2079  0071                     ?___ftpack:	
  2080                           ; 2 bytes @ 0x1
  2081                           
  2082  0071                     SPIRead@len:	
  2083                           ; 3 bytes @ 0x1
  2084                           
  2085  0071                     LEDInit@sta:	
  2086                           ; 1 bytes @ 0x1
  2087                           
  2088  0071                     NVMInit@sta:	
  2089                           ; 1 bytes @ 0x1
  2090                           
  2091  0071                     DINInit@sta:	
  2092                           ; 1 bytes @ 0x1
  2093                           
  2094  0071                     SPIWrite@srcPtr:	
  2095                           ; 1 bytes @ 0x1
  2096                           
  2097  0071                     DLYDelay_ms@val:	
  2098                           ; 2 bytes @ 0x1
  2099                           
  2100  0071                     NVMRead@addr:	
  2101                           ; 2 bytes @ 0x1
  2102                           
  2103  0071                     NVMWrite@addr:	
  2104                           ; 2 bytes @ 0x1
  2105                           
  2106  0071                     ___lwdiv@divisor:	
  2107                           ; 2 bytes @ 0x1
  2108                           
  2109  0071                     ___ftpack@arg:	
  2110                           ; 2 bytes @ 0x1
  2111                           
  2112  0071                     ___ftge@ff1:	
  2113                           ; 3 bytes @ 0x1
  2114                           
  2115                           
  2116                           ; 3 bytes @ 0x1
  2117  0071                     	ds	1
  2118  0072                     ??_SPIRead:	
  2119  0072                     INInit@sta:	
  2120                           ; 0 bytes @ 0x2
  2121                           
  2122  0072                     OUTInit@sta:	
  2123                           ; 1 bytes @ 0x2
  2124                           
  2125  0072                     SPIInit@state:	
  2126                           ; 1 bytes @ 0x2
  2127                           
  2128  0072                     ADCInit@state:	
  2129                           ; 1 bytes @ 0x2
  2130                           
  2131  0072                     SYSInit@state:	
  2132                           ; 1 bytes @ 0x2
  2133                           
  2134                           
  2135                           ; 1 bytes @ 0x2
  2136  0072                     	ds	1
  2137  0073                     ??_DLYDelay_ms:	
  2138  0073                     SPIWrite@len:	
  2139                           ; 0 bytes @ 0x3
  2140                           
  2141  0073                     NVMRead@dest:	
  2142                           ; 1 bytes @ 0x3
  2143                           
  2144  0073                     NVMWrite@source:	
  2145                           ; 1 bytes @ 0x3
  2146                           
  2147  0073                     ___lwdiv@dividend:	
  2148                           ; 1 bytes @ 0x3
  2149                           
  2150                           
  2151                           ; 2 bytes @ 0x3
  2152  0073                     	ds	1
  2153  0074                     ??_SPIWrite:	
  2154  0074                     SPIRead@dstPtr:	
  2155                           ; 0 bytes @ 0x4
  2156                           
  2157  0074                     NVMRead@len:	
  2158                           ; 1 bytes @ 0x4
  2159                           
  2160  0074                     NVMWrite@len:	
  2161                           ; 1 bytes @ 0x4
  2162                           
  2163  0074                     ___ftpack@exp:	
  2164                           ; 1 bytes @ 0x4
  2165                           
  2166  0074                     ___ftge@ff2:	
  2167                           ; 1 bytes @ 0x4
  2168                           
  2169                           
  2170                           ; 3 bytes @ 0x4
  2171  0074                     	ds	1
  2172  0075                     ??_NVMRead:	
  2173  0075                     ??_NVMWrite:	
  2174                           ; 0 bytes @ 0x5
  2175                           
  2176  0075                     ??___lwdiv:	
  2177                           ; 0 bytes @ 0x5
  2178                           
  2179  0075                     SPIRead@i:	
  2180                           ; 0 bytes @ 0x5
  2181                           
  2182  0075                     ___ftpack@sign:	
  2183                           ; 1 bytes @ 0x5
  2184                           
  2185  0075                     DLYDelay_ms@i:	
  2186                           ; 1 bytes @ 0x5
  2187                           
  2188                           
  2189                           ; 2 bytes @ 0x5
  2190  0075                     	ds	1
  2191  0076                     ??___ftpack:	
  2192  0076                     SPIWrite@i:	
  2193                           ; 0 bytes @ 0x6
  2194                           
  2195  0076                     ___lwdiv@quotient:	
  2196                           ; 1 bytes @ 0x6
  2197                           
  2198                           
  2199                           ; 2 bytes @ 0x6
  2200  0076                     	ds	1
  2201  0077                     ??_CC1Strobe:	
  2202  0077                     ?_CC1Read:	
  2203                           ; 0 bytes @ 0x7
  2204                           
  2205  0077                     ?_CC1Write:	
  2206                           ; 0 bytes @ 0x7
  2207                           
  2208  0077                     ??_LEDNormalFlash:	
  2209                           ; 0 bytes @ 0x7
  2210                           
  2211  0077                     ??_LEDFastFlash:	
  2212                           ; 0 bytes @ 0x7
  2213                           
  2214  0077                     ??___ftge:	
  2215                           ; 0 bytes @ 0x7
  2216                           
  2217  0077                     CC1Read@dst:	
  2218                           ; 0 bytes @ 0x7
  2219                           
  2220  0077                     NVMRead@i:	
  2221                           ; 1 bytes @ 0x7
  2222                           
  2223  0077                     CC1Write@src:	
  2224                           ; 1 bytes @ 0x7
  2225                           
  2226                           
  2227                           ; 2 bytes @ 0x7
  2228  0077                     	ds	1
  2229  0078                     ??_PGMReadNvm:	
  2230  0078                     ??_PGMWriteNvm:	
  2231                           ; 0 bytes @ 0x8
  2232                           
  2233  0078                     CC1Strobe@e_stb:	
  2234                           ; 0 bytes @ 0x8
  2235                           
  2236  0078                     CC1Read@len:	
  2237                           ; 1 bytes @ 0x8
  2238                           
  2239  0078                     LEDNormalFlash@num:	
  2240                           ; 1 bytes @ 0x8
  2241                           
  2242  0078                     LEDFastFlash@num:	
  2243                           ; 1 bytes @ 0x8
  2244                           
  2245  0078                     ___lwdiv@counter:	
  2246                           ; 1 bytes @ 0x8
  2247                           
  2248                           
  2249                           ; 1 bytes @ 0x8
  2250  0078                     	ds	1
  2251  0079                     ??_CC1Read:	
  2252  0079                     ?___awtoft:	
  2253                           ; 0 bytes @ 0x9
  2254                           
  2255  0079                     CC1Strobe@cc1Stb:	
  2256                           ; 3 bytes @ 0x9
  2257                           
  2258  0079                     CC1Write@len:	
  2259                           ; 1 bytes @ 0x9
  2260                           
  2261  0079                     LEDNormalFlash@i:	
  2262                           ; 1 bytes @ 0x9
  2263                           
  2264  0079                     LEDFastFlash@i:	
  2265                           ; 1 bytes @ 0x9
  2266                           
  2267  0079                     ___awtoft@c:	
  2268                           ; 1 bytes @ 0x9
  2269                           
  2270                           
  2271                           ; 2 bytes @ 0x9
  2272  0079                     	ds	1
  2273  007A                     ??_CC1Write:	
  2274  007A                     ??_CC1Sleep:	
  2275                           ; 0 bytes @ 0xA
  2276                           
  2277  007A                     ??_SLPSleep:	
  2278                           ; 0 bytes @ 0xA
  2279                           
  2280  007A                     CC1Read@addr:	
  2281                           ; 0 bytes @ 0xA
  2282                           
  2283                           
  2284                           ; 1 bytes @ 0xA
  2285  007A                     	ds	1
  2286  007B                     ??_CC1LoadREG:	
  2287  007B                     CC1Read@cc1Addr:	
  2288                           ; 0 bytes @ 0xB
  2289                           
  2290                           
  2291                           ; 1 bytes @ 0xB
  2292  007B                     	ds	1
  2293  007C                     ??_PGMCheckNvm:	
  2294  007C                     ??_RTXStartSendData:	
  2295                           ; 0 bytes @ 0xC
  2296                           
  2297  007C                     ??_ADCGetTempCCal:	
  2298                           ; 0 bytes @ 0xC
  2299                           
  2300  007C                     ??_CC1Init:	
  2301                           ; 0 bytes @ 0xC
  2302                           
  2303  007C                     ??_PGMInit:	
  2304                           ; 0 bytes @ 0xC
  2305                           
  2306  007C                     ??_PGMSelLong:	
  2307                           ; 0 bytes @ 0xC
  2308                           
  2309  007C                     ??_RTXInit:	
  2310                           ; 0 bytes @ 0xC
  2311                           
  2312  007C                     ??_RTXTick:	
  2313                           ; 0 bytes @ 0xC
  2314                           
  2315  007C                     ??_RTXTask:	
  2316                           ; 0 bytes @ 0xC
  2317                           
  2318  007C                     ??_RTXAwake:	
  2319                           ; 0 bytes @ 0xC
  2320                           
  2321  007C                     ??_SYSTask:	
  2322                           ; 0 bytes @ 0xC
  2323                           
  2324                           
  2325                           	psect	cstackBANK0
  2326  0020                     __pcstackBANK0:	
  2327                           ; 0 bytes @ 0xC
  2328                           
  2329  0020                     ?_RTXRcvPkt:	
  2330  0020                     ??___awtoft:	
  2331                           ; 0 bytes @ 0x0
  2332                           
  2333  0020                     CC1Write@addr:	
  2334                           ; 0 bytes @ 0x0
  2335                           
  2336  0020                     SLPSleep@IOCBNTmp:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0020                     RTXRcvPkt@len:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0020                     NVMWrite@bufTmpRow:	
  2343                           ; 1 bytes @ 0x0
  2344                           
  2345                           
  2346                           ; 64 bytes @ 0x0
  2347  0020                     	ds	1
  2348  0021                     ??_RTXRcvPkt:	
  2349  0021                     CC1Write@cc1Addr:	
  2350                           ; 0 bytes @ 0x1
  2351                           
  2352  0021                     SLPSleep@INTCONTmp:	
  2353                           ; 1 bytes @ 0x1
  2354                           
  2355                           
  2356                           ; 1 bytes @ 0x1
  2357  0021                     	ds	1
  2358  0022                     ?_RTXSndPkt:	
  2359  0022                     CC1Init@state:	
  2360                           ; 0 bytes @ 0x2
  2361                           
  2362  0022                     SLPSleep@WPUBTmp:	
  2363                           ; 1 bytes @ 0x2
  2364                           
  2365  0022                     RTXSndPkt@len:	
  2366                           ; 1 bytes @ 0x2
  2367                           
  2368  0022                     ___awtoft@sign:	
  2369                           ; 1 bytes @ 0x2
  2370                           
  2371                           
  2372                           ; 1 bytes @ 0x2
  2373  0022                     	ds	1
  2374  0023                     ??_RTXSndPkt:	
  2375  0023                     ?___ftmul:	
  2376                           ; 0 bytes @ 0x3
  2377                           
  2378  0023                     SLPSleep@WDTCONTmp:	
  2379                           ; 3 bytes @ 0x3
  2380                           
  2381  0023                     RTXRcvPkt@dst:	
  2382                           ; 1 bytes @ 0x3
  2383                           
  2384  0023                     ___ftmul@f1:	
  2385                           ; 1 bytes @ 0x3
  2386                           
  2387                           
  2388                           ; 3 bytes @ 0x3
  2389  0023                     	ds	1
  2390  0024                     SLPSleep@OPTION_REGTmp:	
  2391  0024                     RTXSndPkt@src:	
  2392                           ; 1 bytes @ 0x4
  2393                           
  2394                           
  2395                           ; 1 bytes @ 0x4
  2396  0024                     	ds	1
  2397  0025                     SLPSleep@FVRCONTmp:	
  2398  0025                     RTXSndPkt@numRxByte:	
  2399                           ; 1 bytes @ 0x5
  2400                           
  2401                           
  2402                           ; 1 bytes @ 0x5
  2403  0025                     	ds	1
  2404  0026                     SLPSleep@ADCON0Tmp:	
  2405  0026                     RTXSndPkt@numTxByte:	
  2406                           ; 1 bytes @ 0x6
  2407                           
  2408  0026                     ___ftmul@f2:	
  2409                           ; 1 bytes @ 0x6
  2410                           
  2411                           
  2412                           ; 3 bytes @ 0x6
  2413  0026                     	ds	1
  2414  0027                     SLPSleep@TESTBATTtmp:	
  2415  0027                     RTXSndPkt@sta:	
  2416                           ; 1 bytes @ 0x7
  2417                           
  2418                           
  2419                           ; 1 bytes @ 0x7
  2420  0027                     	ds	1
  2421  0028                     ??_RTXSendRPgm:	
  2422                           
  2423                           ; 0 bytes @ 0x8
  2424  0028                     	ds	1
  2425  0029                     ??___ftmul:	
  2426                           
  2427                           ; 0 bytes @ 0x9
  2428  0029                     	ds	4
  2429  002D                     ___ftmul@exp:	
  2430                           
  2431                           ; 1 bytes @ 0xD
  2432  002D                     	ds	1
  2433  002E                     ___ftmul@f3_as_product:	
  2434                           
  2435                           ; 3 bytes @ 0xE
  2436  002E                     	ds	3
  2437  0031                     ___ftmul@cntr:	
  2438                           
  2439                           ; 1 bytes @ 0x11
  2440  0031                     	ds	1
  2441  0032                     ___ftmul@sign:	
  2442                           
  2443                           ; 1 bytes @ 0x12
  2444  0032                     	ds	1
  2445  0033                     ?___ftdiv:	
  2446  0033                     ___ftdiv@f2:	
  2447                           ; 3 bytes @ 0x13
  2448                           
  2449                           
  2450                           ; 3 bytes @ 0x13
  2451  0033                     	ds	3
  2452  0036                     ___ftdiv@f1:	
  2453                           
  2454                           ; 3 bytes @ 0x16
  2455  0036                     	ds	3
  2456  0039                     ??___ftdiv:	
  2457                           
  2458                           ; 0 bytes @ 0x19
  2459  0039                     	ds	4
  2460  003D                     ___ftdiv@cntr:	
  2461                           
  2462                           ; 1 bytes @ 0x1D
  2463  003D                     	ds	1
  2464  003E                     ___ftdiv@f3:	
  2465                           
  2466                           ; 3 bytes @ 0x1E
  2467  003E                     	ds	3
  2468  0041                     ___ftdiv@exp:	
  2469                           
  2470                           ; 1 bytes @ 0x21
  2471  0041                     	ds	1
  2472  0042                     ___ftdiv@sign:	
  2473                           
  2474                           ; 1 bytes @ 0x22
  2475  0042                     	ds	1
  2476  0043                     ?___ftadd:	
  2477  0043                     ___ftadd@f1:	
  2478                           ; 3 bytes @ 0x23
  2479                           
  2480                           
  2481                           ; 3 bytes @ 0x23
  2482  0043                     	ds	3
  2483  0046                     ___ftadd@f2:	
  2484                           
  2485                           ; 3 bytes @ 0x26
  2486  0046                     	ds	3
  2487  0049                     ??___ftadd:	
  2488                           
  2489                           ; 0 bytes @ 0x29
  2490  0049                     	ds	4
  2491  004D                     ___ftadd@sign:	
  2492                           
  2493                           ; 1 bytes @ 0x2D
  2494  004D                     	ds	1
  2495  004E                     ___ftadd@exp2:	
  2496                           
  2497                           ; 1 bytes @ 0x2E
  2498  004E                     	ds	1
  2499  004F                     ___ftadd@exp1:	
  2500                           
  2501                           ; 1 bytes @ 0x2F
  2502  004F                     	ds	1
  2503  0050                     ??_ADCConv:	
  2504  0050                     ?_ADCGetTempCCal:	
  2505                           ; 0 bytes @ 0x30
  2506                           
  2507                           
  2508                           ; 3 bytes @ 0x30
  2509  0050                     	ds	2
  2510  0052                     ADCConv@sumBatt:	
  2511                           
  2512                           ; 2 bytes @ 0x32
  2513  0052                     	ds	1
  2514  0053                     ??_RTXSendData:	
  2515                           
  2516                           ; 0 bytes @ 0x33
  2517  0053                     	ds	1
  2518  0054                     ADCConv@sumTemp:	
  2519  0054                     RTXSendData@valTemp:	
  2520                           ; 2 bytes @ 0x34
  2521                           
  2522                           
  2523                           ; 3 bytes @ 0x34
  2524  0054                     	ds	2
  2525  0056                     _ADCConv$1374:	
  2526                           
  2527                           ; 3 bytes @ 0x36
  2528  0056                     	ds	1
  2529  0057                     RTXSendData@valBatt:	
  2530                           
  2531                           ; 3 bytes @ 0x37
  2532  0057                     	ds	2
  2533  0059                     ADCConv@cntSum:	
  2534                           
  2535                           ; 1 bytes @ 0x39
  2536  0059                     	ds	1
  2537  005A                     RTXInit@state:	
  2538                           
  2539                           ; 1 bytes @ 0x3A
  2540  005A                     	ds	6
  2541  0060                     NVMWrite@rowAddr:	
  2542                           
  2543                           ; 2 bytes @ 0x40
  2544  0060                     	ds	2
  2545  0062                     NVMWrite@i:	
  2546                           
  2547                           ; 1 bytes @ 0x42
  2548  0062                     	ds	1
  2549  0063                     NVMWrite@latchAddr:	
  2550                           
  2551                           ; 1 bytes @ 0x43
  2552  0063                     	ds	1
  2553  0064                     NVMWrite@j:	
  2554                           
  2555                           ; 1 bytes @ 0x44
  2556  0064                     	ds	1
  2557  0065                     ??_PGMNvmReset:	
  2558  0065                     ??_RTXReadPkt:	
  2559                           ; 0 bytes @ 0x45
  2560                           
  2561  0065                     ??_PGMSelDown:	
  2562                           ; 0 bytes @ 0x45
  2563                           
  2564                           
  2565                           ; 0 bytes @ 0x45
  2566  0065                     	ds	1
  2567  0066                     PGMInit@state:	
  2568  0066                     RTXReadPkt@numRxByte:	
  2569                           ; 1 bytes @ 0x46
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0x46
  2573  0066                     	ds	1
  2574  0067                     ??_main:	
  2575                           
  2576                           ; 0 bytes @ 0x47
  2577  0067                     	ds	1
  2578  0068                     main@i:	
  2579                           
  2580                           ; 1 bytes @ 0x48
  2581  0068                     	ds	1
  2582                           
  2583                           	psect	maintext
  2584  0684                     __pmaintext:	
  2585 ;;
  2586 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2587 ;;
  2588 ;; *************** function _main *****************
  2589 ;; Defined at:
  2590 ;;		line 55 in file "Sensore.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  i               1   72[BANK0 ] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;		None               void
  2597 ;; Registers used:
  2598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 17F/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2606 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2608 ;;Total ram usage:        2 bytes
  2609 ;; Hardware stack levels required when called:   10
  2610 ;; This function calls:
  2611 ;;		_INInit
  2612 ;;		_OUTInit
  2613 ;;		_SPIInit
  2614 ;;		_ADCInit
  2615 ;;		_CC1Init
  2616 ;;		_LEDInit
  2617 ;;		_NVMInit
  2618 ;;		_DINInit
  2619 ;;		_DINTask
  2620 ;;		_PGMInit
  2621 ;;		_RTXInit
  2622 ;;		_RTXTask
  2623 ;;		_SYSInit
  2624 ;;		_SYSTask
  2625 ;; This function is called by:
  2626 ;;		Startup code after reset
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _main
  2632  0684                     _main:	
  2633                           
  2634                           ;Sensore.c: 56: unsigned char i;
  2635                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2636                           
  2637                           ;incstack = 0
  2638                           ; Regs used in _main: [allreg]
  2639  0684  0020               	movlb	0	; select bank0
  2640  0685  01E8               	clrf	main@i
  2641  0686  3003               	movlw	3
  2642  0687  0268               	subwf	main@i,w
  2643  0688  1803               	btfsc	3,0
  2644  0689  2ECB               	goto	l684
  2645  068A                     l683:	
  2646  068A  0064               	clrwdt	;# 
  2647                           
  2648                           ;Sensore.c: 63: SYSInit(i);
  2649  068B  0020               	movlb	0	; select bank0
  2650  068C  0868               	movf	main@i,w
  2651  068D  318F  2786  3186   	fcall	_SYSInit
  2652                           
  2653                           ;Sensore.c: 64: INInit(i);
  2654  0690  0020               	movlb	0	; select bank0
  2655  0691  0868               	movf	main@i,w
  2656  0692  318D  2552  3186   	fcall	_INInit
  2657                           
  2658                           ;Sensore.c: 65: OUTInit(i);
  2659  0695  0020               	movlb	0	; select bank0
  2660  0696  0868               	movf	main@i,w
  2661  0697  318E  2698  3186   	fcall	_OUTInit
  2662                           
  2663                           ;Sensore.c: 66: DINInit(i);
  2664  069A  0020               	movlb	0	; select bank0
  2665  069B  0868               	movf	main@i,w
  2666  069C  318C  24E3  3186   	fcall	_DINInit
  2667                           
  2668                           ;Sensore.c: 67: LEDInit(i);
  2669  069F  0020               	movlb	0	; select bank0
  2670  06A0  0868               	movf	main@i,w
  2671  06A1  318C  2495  3186   	fcall	_LEDInit
  2672                           
  2673                           ;Sensore.c: 68: SPIInit(i);
  2674  06A4  0020               	movlb	0	; select bank0
  2675  06A5  0868               	movf	main@i,w
  2676  06A6  318E  2620  3186   	fcall	_SPIInit
  2677                           
  2678                           ;Sensore.c: 69: CC1Init(i);
  2679  06A9  0020               	movlb	0	; select bank0
  2680  06AA  0868               	movf	main@i,w
  2681  06AB  318D  25CC  3186   	fcall	_CC1Init
  2682                           
  2683                           ;Sensore.c: 70: NVMInit(i);
  2684  06AE  0020               	movlb	0	; select bank0
  2685  06AF  0868               	movf	main@i,w
  2686  06B0  3187  27F5  3186   	fcall	_NVMInit
  2687                           
  2688                           ;Sensore.c: 71: RTXInit(i);
  2689  06B3  0020               	movlb	0	; select bank0
  2690  06B4  0868               	movf	main@i,w
  2691  06B5  318F  273C  3186   	fcall	_RTXInit
  2692                           
  2693                           ;Sensore.c: 72: PGMInit(i);
  2694  06B8  0020               	movlb	0	; select bank0
  2695  06B9  0868               	movf	main@i,w
  2696  06BA  318D  2569  3186   	fcall	_PGMInit
  2697                           
  2698                           ;Sensore.c: 73: ADCInit(i);
  2699  06BD  0020               	movlb	0	; select bank0
  2700  06BE  0868               	movf	main@i,w
  2701  06BF  318F  27D4  3186   	fcall	_ADCInit
  2702  06C2  3001               	movlw	1
  2703  06C3  0020               	movlb	0	; select bank0
  2704  06C4  00E7               	movwf	??_main
  2705  06C5  0867               	movf	??_main,w
  2706  06C6  07E8               	addwf	main@i,f
  2707  06C7  3003               	movlw	3
  2708  06C8  0268               	subwf	main@i,w
  2709  06C9  1C03               	skipc
  2710  06CA  2E8A               	goto	l683
  2711  06CB                     l684:	
  2712                           
  2713                           ;Sensore.c: 74: }
  2714                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2715  06CB  178B               	bsf	11,7	;volatile
  2716  06CC                     l685:	
  2717                           ;Sensore.c: 80: while(1)
  2718                           
  2719  06CC  0064               	clrwdt	;# 
  2720                           
  2721                           ;Sensore.c: 84: SYSTask();
  2722  06CD  3187  2794  3186   	fcall	_SYSTask
  2723                           
  2724                           ;Sensore.c: 85: DINTask();
  2725  06D0  318E  263E  3186   	fcall	_DINTask
  2726                           
  2727                           ;Sensore.c: 86: RTXTask();
  2728  06D3  318C  246A  3186   	fcall	_RTXTask
  2729  06D6  2ECC               	goto	l685
  2730  06D7                     __end_of_main:	
  2731                           
  2732                           	psect	text1
  2733  0794                     __ptext1:	
  2734 ;; *************** function _SYSTask *****************
  2735 ;; Defined at:
  2736 ;;		line 45 in file "SYS.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;		None               void
  2743 ;; Registers used:
  2744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    9
  2757 ;; This function calls:
  2758 ;;		_DINTick
  2759 ;;		_SLPSleep
  2760 ;;		_PGMTick
  2761 ;;		_PGMPgmOff
  2762 ;;		_PGMSelDown
  2763 ;;		_PGMSelLong
  2764 ;;		_RTXTick
  2765 ;;		_RTXAwake
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;; This function uses a non-reentrant model
  2769 ;;
  2770                           
  2771                           
  2772                           ;psect for function _SYSTask
  2773  0794                     _SYSTask:	
  2774                           
  2775                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  2776                           
  2777                           ;incstack = 0
  2778                           ; Regs used in _SYSTask: [allreg]
  2779  0794  0021               	movlb	1	; select bank1
  2780  0795  1C2F               	btfss	_u_SYS_STA^(0+128),0
  2781  0796  2FA1               	goto	l3789
  2782                           
  2783                           ;SYS.c: 48: {
  2784                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  2785  0797  102F               	bcf	_u_SYS_STA^(0+128),0
  2786                           
  2787                           ;SYS.c: 53: RTXTick();
  2788  0798  318C  24B9  3187   	fcall	_RTXTick
  2789                           
  2790                           ;SYS.c: 54: DINTick();
  2791  079B  318F  27AC  3187   	fcall	_DINTick
  2792                           
  2793                           ;SYS.c: 55: PGMTick();
  2794  079E  318C  24AC  3187   	fcall	_PGMTick
  2795  07A1                     l3789:	
  2796                           
  2797                           ;SYS.c: 56: }
  2798                           ;SYS.c: 58: if(u_in_ev_down.sel)
  2799  07A1  0021               	movlb	1	; select bank1
  2800  07A2  1C30               	btfss	_u_in_ev_down^(0+128),0
  2801  07A3  2FA8               	goto	l3795
  2802                           
  2803                           ;SYS.c: 59: {
  2804                           ;SYS.c: 61: u_in_ev_down.sel=0;
  2805  07A4  1030               	bcf	_u_in_ev_down^(0+128),0
  2806                           
  2807                           ;SYS.c: 62: PGMSelDown();
  2808  07A5  318C  24F4  3187   	fcall	_PGMSelDown
  2809  07A8                     l3795:	
  2810                           
  2811                           ;SYS.c: 63: }
  2812                           ;SYS.c: 64: if(u_in_ev_long.sel)
  2813  07A8  0021               	movlb	1	; select bank1
  2814  07A9  1C31               	btfss	_u_in_ev_long^(0+128),0
  2815  07AA  2FAF               	goto	l3801
  2816                           
  2817                           ;SYS.c: 65: {
  2818                           ;SYS.c: 67: u_in_ev_long.sel=0;
  2819  07AB  1031               	bcf	_u_in_ev_long^(0+128),0
  2820                           
  2821                           ;SYS.c: 68: PGMSelLong();
  2822  07AC  318C  248C  3187   	fcall	_PGMSelLong
  2823  07AF                     l3801:	
  2824                           
  2825                           ;SYS.c: 69: }
  2826                           ;SYS.c: 72: if(flg_slp.goSleep)
  2827  07AF  0020               	movlb	0	; select bank0
  2828  07B0  1C6A               	btfss	_flg_slp,0
  2829  07B1  2FB8               	goto	l3807
  2830                           
  2831                           ;SYS.c: 73: {
  2832                           ;SYS.c: 75: flg_slp.goSleep=0;
  2833  07B2  106A               	bcf	_flg_slp,0
  2834                           
  2835                           ;SYS.c: 77: if(!(!PORTBbits.RB2))
  2836  07B3  1D0D               	btfss	13,2	;volatile
  2837  07B4  2FB8               	goto	l3807
  2838                           
  2839                           ;SYS.c: 78: SLPSleep();
  2840  07B5  3185  2511  3187   	fcall	_SLPSleep
  2841  07B8                     l3807:	
  2842                           
  2843                           ;SYS.c: 79: }
  2844                           ;SYS.c: 82: if(rtx_flg.pgmDone)
  2845  07B8  0021               	movlb	1	; select bank1
  2846  07B9  1C2A               	btfss	_rtx_flg^(0+128),0
  2847  07BA  2FBF               	goto	l3813
  2848                           
  2849                           ;SYS.c: 83: {
  2850                           ;SYS.c: 85: rtx_flg.pgmDone=0;
  2851  07BB  102A               	bcf	_rtx_flg^(0+128),0
  2852                           
  2853                           ;SYS.c: 87: PGMPgmOff();
  2854  07BC  318C  2460  3187   	fcall	_PGMPgmOff
  2855  07BF                     l3813:	
  2856                           
  2857                           ;SYS.c: 88: }
  2858                           ;SYS.c: 91: if(flg_slp.exitSleep)
  2859  07BF  0020               	movlb	0	; select bank0
  2860  07C0  1CEA               	btfss	_flg_slp,1
  2861  07C1  0008               	return
  2862                           
  2863                           ;SYS.c: 92: {
  2864                           ;SYS.c: 94: flg_slp.exitSleep=0;
  2865  07C2  10EA               	bcf	_flg_slp,1
  2866                           
  2867                           ;SYS.c: 96: RTXAwake();
  2868  07C3  318D  25B2         	fcall	_RTXAwake
  2869  07C5  0008               	return
  2870  07C6                     __end_of_SYSTask:	
  2871                           
  2872                           	psect	text2
  2873  0DB2                     __ptext2:	
  2874 ;; *************** function _RTXAwake *****************
  2875 ;; Defined at:
  2876 ;;		line 90 in file "RTX.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;		None               void
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    8
  2897 ;; This function calls:
  2898 ;;		_DLYDelay_ms
  2899 ;;		_CC1Init
  2900 ;;		_RTXInit
  2901 ;; This function is called by:
  2902 ;;		_SYSTask
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           
  2907                           ;psect for function _RTXAwake
  2908  0DB2                     _RTXAwake:	
  2909                           
  2910                           ;RTX.c: 92: PORTAbits.RA5=0;
  2911                           
  2912                           ;incstack = 0
  2913                           ; Regs used in _RTXAwake: [allreg]
  2914  0DB2  0020               	movlb	0	; select bank0
  2915  0DB3  128C               	bcf	12,5	;volatile
  2916                           
  2917                           ;RTX.c: 93: DLYDelay_ms(1);
  2918  0DB4  3001               	movlw	1
  2919  0DB5  00F1               	movwf	?_DLYDelay_ms
  2920  0DB6  3000               	movlw	0
  2921  0DB7  00F2               	movwf	?_DLYDelay_ms+1
  2922  0DB8  318D  2599  318D   	fcall	_DLYDelay_ms
  2923                           
  2924                           ;RTX.c: 94: PORTAbits.RA5=1;
  2925  0DBB  0020               	movlb	0	; select bank0
  2926  0DBC  168C               	bsf	12,5	;volatile
  2927                           
  2928                           ;RTX.c: 95: DLYDelay_ms(1);
  2929  0DBD  3001               	movlw	1
  2930  0DBE  00F1               	movwf	?_DLYDelay_ms
  2931  0DBF  3000               	movlw	0
  2932  0DC0  00F2               	movwf	?_DLYDelay_ms+1
  2933  0DC1  318D  2599  318D   	fcall	_DLYDelay_ms
  2934                           
  2935                           ;RTX.c: 98: CC1Init(2);
  2936  0DC4  3002               	movlw	2
  2937  0DC5  318D  25CC  318D   	fcall	_CC1Init
  2938                           
  2939                           ;RTX.c: 101: RTXInit(2);
  2940  0DC8  3002               	movlw	2
  2941  0DC9  318F  273C         	fcall	_RTXInit
  2942  0DCB  0008               	return
  2943  0DCC                     __end_of_RTXAwake:	
  2944                           
  2945                           	psect	text3
  2946  0F3C                     __ptext3:	
  2947 ;; *************** function _RTXInit *****************
  2948 ;; Defined at:
  2949 ;;		line 49 in file "RTX.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  state           1    wreg     unsigned char 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  state           1   58[BANK0 ] unsigned char 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;Total ram usage:        1 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:    7
  2970 ;; This function calls:
  2971 ;;		_CC1Strobe
  2972 ;;		_RTXStartSendData
  2973 ;; This function is called by:
  2974 ;;		_RTXAwake
  2975 ;;		_main
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           
  2980                           ;psect for function _RTXInit
  2981  0F3C                     _RTXInit:	
  2982                           
  2983                           ;incstack = 0
  2984                           ; Regs used in _RTXInit: [allreg]
  2985                           ;RTXInit@state stored from wreg
  2986  0F3C  0020               	movlb	0	; select bank0
  2987  0F3D  00DA               	movwf	RTXInit@state
  2988                           
  2989                           ;RTX.c: 50: switch(state)
  2990  0F3E  2F53               	goto	l3641
  2991  0F3F                     l3633:	
  2992                           ;RTX.c: 55: case 1:
  2993                           
  2994                           ;RTX.c: 54: break;
  2995                           
  2996                           ;RTX.c: 51: {
  2997                           ;RTX.c: 52: case 0:
  2998                           
  2999                           
  3000                           ;RTX.c: 57: tmrRcvPkt=0;
  3001  0F3F  01ED               	clrf	_tmrRcvPkt
  3002                           
  3003                           ;RTX.c: 58: cntSndData=0;
  3004  0F40  0021               	movlb	1	; select bank1
  3005  0F41  01A9               	clrf	_cntSndData^(0+128)
  3006                           
  3007                           ;RTX.c: 59: rtx_flg.val=0;
  3008  0F42  01AA               	clrf	_rtx_flg^(0+128)
  3009                           
  3010                           ;RTX.c: 60: break;
  3011  0F43  0008               	return
  3012  0F44                     l3635:	
  3013                           ;RTX.c: 61: case 2:
  3014                           
  3015                           
  3016                           ;RTX.c: 63: CC1Strobe(SIDLE);
  3017  0F44  3036               	movlw	54
  3018  0F45  318D  253E  318F   	fcall	_CC1Strobe
  3019                           
  3020                           ;RTX.c: 64: CC1Strobe(SCAL);
  3021  0F48  3033               	movlw	51
  3022  0F49  318D  253E  318F   	fcall	_CC1Strobe
  3023                           
  3024                           ;RTX.c: 65: CC1Strobe(SRX);
  3025  0F4C  3034               	movlw	52
  3026  0F4D  318D  253E  318F   	fcall	_CC1Strobe
  3027                           
  3028                           ;RTX.c: 66: RTXStartSendData();
  3029  0F50  318C  24D4         	fcall	_RTXStartSendData
  3030                           
  3031                           ;RTX.c: 68: }
  3032                           
  3033                           ;RTX.c: 67: break;
  3034  0F52  0008               	return
  3035  0F53                     l3641:	
  3036  0F53  0020               	movlb	0	; select bank0
  3037  0F54  085A               	movf	RTXInit@state,w
  3038                           
  3039                           ; Switch size 1, requested type "space"
  3040                           ; Number of cases is 3, Range of values is 0 to 2
  3041                           ; switch strategies available:
  3042                           ; Name         Instructions Cycles
  3043                           ; simple_byte           10     6 (average)
  3044                           ; direct_byte           12     6 (fixed)
  3045                           ; jumptable            260     6 (fixed)
  3046                           ;	Chosen strategy is simple_byte
  3047  0F55  3A00               	xorlw	0	; case 0
  3048  0F56  1903               	skipnz
  3049  0F57  2F5F               	goto	l475
  3050  0F58  3A01               	xorlw	1	; case 1
  3051  0F59  1903               	skipnz
  3052  0F5A  2F3F               	goto	l3633
  3053  0F5B  3A03               	xorlw	3	; case 2
  3054  0F5C  1903               	skipnz
  3055  0F5D  2F44               	goto	l3635
  3056  0F5E  2F5F               	goto	l475
  3057  0F5F                     l475:	
  3058  0F5F  0008               	return
  3059  0F60                     __end_of_RTXInit:	
  3060                           
  3061                           	psect	text4
  3062  0DCC                     __ptext4:	
  3063 ;; *************** function _CC1Init *****************
  3064 ;; Defined at:
  3065 ;;		line 75 in file "CC1.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  state           1    wreg     unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  state           1    2[BANK0 ] unsigned char 
  3070 ;; Return value:  Size  Location     Type
  3071 ;;		None               void
  3072 ;; Registers used:
  3073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    5
  3086 ;; This function calls:
  3087 ;;		_DLYDelay_ms
  3088 ;;		_CC1Strobe
  3089 ;;		_CC1LoadREG
  3090 ;; This function is called by:
  3091 ;;		_RTXAwake
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function _CC1Init
  3098  0DCC                     _CC1Init:	
  3099                           
  3100                           ;incstack = 0
  3101                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3102                           ;CC1Init@state stored from wreg
  3103  0DCC  0020               	movlb	0	; select bank0
  3104  0DCD  00A2               	movwf	CC1Init@state
  3105                           
  3106                           ;CC1.c: 76: switch(state)
  3107  0DCE  2DDD               	goto	l3481
  3108  0DCF                     l3473:	
  3109                           ;CC1.c: 84: case 2:
  3110                           
  3111                           ;CC1.c: 83: break;
  3112                           
  3113                           ;CC1.c: 77: {
  3114                           ;CC1.c: 81: case 1:
  3115                           
  3116                           
  3117                           ;CC1.c: 86: CC1Strobe(SRES);
  3118  0DCF  3030               	movlw	48
  3119  0DD0  318D  253E  318D   	fcall	_CC1Strobe
  3120                           
  3121                           ;CC1.c: 87: DLYDelay_ms(5);
  3122  0DD3  3005               	movlw	5
  3123  0DD4  00F1               	movwf	?_DLYDelay_ms
  3124  0DD5  3000               	movlw	0
  3125  0DD6  00F2               	movwf	?_DLYDelay_ms+1
  3126  0DD7  318D  2599  318D   	fcall	_DLYDelay_ms
  3127                           
  3128                           ;CC1.c: 88: CC1LoadREG();
  3129  0DDA  318D  2581         	fcall	_CC1LoadREG
  3130                           
  3131                           ;CC1.c: 90: }
  3132                           
  3133                           ;CC1.c: 89: break;
  3134  0DDC  0008               	return
  3135  0DDD                     l3481:	
  3136  0DDD  0020               	movlb	0	; select bank0
  3137  0DDE  0822               	movf	CC1Init@state,w
  3138                           
  3139                           ; Switch size 1, requested type "space"
  3140                           ; Number of cases is 2, Range of values is 1 to 2
  3141                           ; switch strategies available:
  3142                           ; Name         Instructions Cycles
  3143                           ; simple_byte            7     4 (average)
  3144                           ; direct_byte           13     9 (fixed)
  3145                           ; jumptable            263     9 (fixed)
  3146                           ;	Chosen strategy is simple_byte
  3147  0DDF  3A01               	xorlw	1	; case 1
  3148  0DE0  1903               	skipnz
  3149  0DE1  2DE6               	goto	l172
  3150  0DE2  3A03               	xorlw	3	; case 2
  3151  0DE3  1903               	skipnz
  3152  0DE4  2DCF               	goto	l3473
  3153  0DE5  2DE6               	goto	l172
  3154  0DE6                     l172:	
  3155  0DE6  0008               	return
  3156  0DE7                     __end_of_CC1Init:	
  3157                           
  3158                           	psect	text5
  3159  0D81                     __ptext5:	
  3160 ;; *************** function _CC1LoadREG *****************
  3161 ;; Defined at:
  3162 ;;		line 156 in file "CC1.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;		None               void
  3169 ;; Registers used:
  3170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;Total ram usage:        1 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; Hardware stack levels required when called:    4
  3183 ;; This function calls:
  3184 ;;		_CC1Write
  3185 ;; This function is called by:
  3186 ;;		_CC1Init
  3187 ;; This function uses a non-reentrant model
  3188 ;;
  3189                           
  3190                           
  3191                           ;psect for function _CC1LoadREG
  3192  0D81                     _CC1LoadREG:	
  3193                           
  3194                           ;CC1.c: 157: CC1Write(0x00,cc1InitVal,0x2E);
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _CC1LoadREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3198  0D81  3020               	movlw	low _cc1InitVal
  3199  0D82  00F7               	movwf	?_CC1Write
  3200  0D83  3001               	movlw	high _cc1InitVal
  3201  0D84  00F8               	movwf	?_CC1Write+1
  3202  0D85  302E               	movlw	46
  3203  0D86  00FB               	movwf	??_CC1LoadREG
  3204  0D87  087B               	movf	??_CC1LoadREG,w
  3205  0D88  00F9               	movwf	?_CC1Write+2
  3206  0D89  3000               	movlw	0
  3207  0D8A  318E  26F9  318D   	fcall	_CC1Write
  3208                           
  3209                           ;CC1.c: 158: CC1Write(0x3E,cc1PaTable,8);
  3210  0D8D  30CA               	movlw	low _cc1PaTable
  3211  0D8E  00F7               	movwf	?_CC1Write
  3212  0D8F  3000               	movlw	high _cc1PaTable
  3213  0D90  00F8               	movwf	?_CC1Write+1
  3214  0D91  3008               	movlw	8
  3215  0D92  00FB               	movwf	??_CC1LoadREG
  3216  0D93  087B               	movf	??_CC1LoadREG,w
  3217  0D94  00F9               	movwf	?_CC1Write+2
  3218  0D95  303E               	movlw	62
  3219  0D96  318E  26F9         	fcall	_CC1Write
  3220  0D98  0008               	return
  3221  0D99                     __end_of_CC1LoadREG:	
  3222                           
  3223                           	psect	text6
  3224  0CB9                     __ptext6:	
  3225 ;; *************** function _RTXTick *****************
  3226 ;; Defined at:
  3227 ;;		line 72 in file "RTX.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;		None
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;		None
  3232 ;; Return value:  Size  Location     Type
  3233 ;;		None               void
  3234 ;; Registers used:
  3235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;Total ram usage:        0 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; Hardware stack levels required when called:    6
  3248 ;; This function calls:
  3249 ;;		_RTXSendData
  3250 ;; This function is called by:
  3251 ;;		_SYSTask
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           
  3256                           ;psect for function _RTXTick
  3257  0CB9                     _RTXTick:	
  3258                           
  3259                           ;RTX.c: 74: if(tmrRcvPkt)
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3263  0CB9  0020               	movlb	0	; select bank0
  3264  0CBA  086D               	movf	_tmrRcvPkt,w
  3265  0CBB  1903               	btfsc	3,2
  3266  0CBC  0008               	return
  3267                           
  3268                           ;RTX.c: 75: {
  3269                           ;RTX.c: 76: tmrRcvPkt--;
  3270  0CBD  3001               	movlw	1
  3271  0CBE  02ED               	subwf	_tmrRcvPkt,f
  3272                           
  3273                           ;RTX.c: 77: if(!(tmrRcvPkt))
  3274  0CBF  08ED               	movf	_tmrRcvPkt,f
  3275  0CC0  1D03               	skipz
  3276  0CC1  0008               	return
  3277                           
  3278                           ;RTX.c: 78: RTXSendData();
  3279  0CC2  3184  249E         	fcall	_RTXSendData
  3280  0CC4  0020               	movlb	0	; select bank0
  3281  0CC5  0008               	return
  3282  0CC6                     __end_of_RTXTick:	
  3283                           
  3284                           	psect	text7
  3285  0C8C                     __ptext7:	
  3286 ;; *************** function _PGMSelLong *****************
  3287 ;; Defined at:
  3288 ;;		line 116 in file "PGM.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;		None               void
  3295 ;; Registers used:
  3296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3306 ;;Total ram usage:        0 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    4
  3309 ;; This function calls:
  3310 ;;		_LEDNormalFlash
  3311 ;;		_PGMWriteNvm
  3312 ;; This function is called by:
  3313 ;;		_SYSTask
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _PGMSelLong
  3319  0C8C                     _PGMSelLong:	
  3320                           
  3321                           ;PGM.c: 118: pgm_cfg.menu=0;
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3325  0C8C  0021               	movlb	1	; select bank1
  3326  0C8D  01C7               	clrf	(_pgm_cfg^(0+128)+2)
  3327                           
  3328                           ;PGM.c: 120: PGMWriteNvm();
  3329  0C8E  318D  2518  318C   	fcall	_PGMWriteNvm
  3330                           
  3331                           ;PGM.c: 122: LEDNormalFlash(3);
  3332  0C91  3003               	movlw	3
  3333  0C92  318E  265C         	fcall	_LEDNormalFlash
  3334  0C94  0008               	return
  3335  0C95                     __end_of_PGMSelLong:	
  3336                           
  3337                           	psect	text8
  3338  0CF4                     __ptext8:	
  3339 ;; *************** function _PGMSelDown *****************
  3340 ;; Defined at:
  3341 ;;		line 102 in file "PGM.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;		None
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;		None               void
  3348 ;; Registers used:
  3349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3358 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3359 ;;Total ram usage:        1 bytes
  3360 ;; Hardware stack levels used:    1
  3361 ;; Hardware stack levels required when called:    4
  3362 ;; This function calls:
  3363 ;;		_PGMWriteNvm
  3364 ;; This function is called by:
  3365 ;;		_SYSTask
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _PGMSelDown
  3371  0CF4                     _PGMSelDown:	
  3372                           
  3373                           ;PGM.c: 104: pgm_flg.pgmonoff=1;
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _PGMSelDown: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3377  0CF4  0020               	movlb	0	; select bank0
  3378  0CF5  146B               	bsf	_pgm_flg,0
  3379                           
  3380                           ;PGM.c: 106: PORTCbits.RC7=0;
  3381  0CF6  138E               	bcf	14,7	;volatile
  3382                           
  3383                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  3384  0CF7  0816               	movf	22,w	;volatile
  3385  0CF8  0617               	xorwf	23,w	;volatile
  3386  0CF9  00E5               	movwf	??_PGMSelDown
  3387  0CFA  0865               	movf	??_PGMSelDown,w
  3388  0CFB  0021               	movlb	1	; select bank1
  3389  0CFC  00C8               	movwf	(_pgm_cfg^(0+128)+3)
  3390                           
  3391                           ;PGM.c: 110: PGMWriteNvm();
  3392  0CFD  318D  2518         	fcall	_PGMWriteNvm
  3393                           
  3394                           ;PGM.c: 112: tmrPgm=100;
  3395  0CFF  3064               	movlw	100
  3396  0D00  0020               	movlb	0	; select bank0
  3397  0D01  00E5               	movwf	??_PGMSelDown
  3398  0D02  0865               	movf	??_PGMSelDown,w
  3399  0D03  00EC               	movwf	_tmrPgm
  3400  0D04  0008               	return
  3401  0D05                     __end_of_PGMSelDown:	
  3402                           
  3403                           	psect	text9
  3404  0C60                     __ptext9:	
  3405 ;; *************** function _PGMPgmOff *****************
  3406 ;; Defined at:
  3407 ;;		line 94 in file "PGM.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;		None
  3410 ;; Auto vars:     Size  Location     Type
  3411 ;;		None
  3412 ;; Return value:  Size  Location     Type
  3413 ;;		None               void
  3414 ;; Registers used:
  3415 ;;		status,2
  3416 ;; Tracked objects:
  3417 ;;		On entry : 0/0
  3418 ;;		On exit  : 0/0
  3419 ;;		Unchanged: 0/0
  3420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3425 ;;Total ram usage:        0 bytes
  3426 ;; Hardware stack levels used:    1
  3427 ;; Hardware stack levels required when called:    2
  3428 ;; This function calls:
  3429 ;;		Nothing
  3430 ;; This function is called by:
  3431 ;;		_SYSTask
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           
  3436                           ;psect for function _PGMPgmOff
  3437  0C60                     _PGMPgmOff:	
  3438                           
  3439                           ;PGM.c: 96: tmrPgm=0;
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _PGMPgmOff: [status,2]
  3443  0C60  0020               	movlb	0	; select bank0
  3444  0C61  01EC               	clrf	_tmrPgm
  3445                           
  3446                           ;PGM.c: 98: pgm_flg.pgmonoff=0;
  3447  0C62  106B               	bcf	_pgm_flg,0
  3448  0C63  0008               	return
  3449  0C64                     __end_of_PGMPgmOff:	
  3450                           
  3451                           	psect	text10
  3452  0CAC                     __ptext10:	
  3453 ;; *************** function _PGMTick *****************
  3454 ;; Defined at:
  3455 ;;		line 46 in file "PGM.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;		None
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;		None
  3460 ;; Return value:  Size  Location     Type
  3461 ;;		None               void
  3462 ;; Registers used:
  3463 ;;		wreg, status,2, status,0
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;Total ram usage:        0 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    2
  3476 ;; This function calls:
  3477 ;;		Nothing
  3478 ;; This function is called by:
  3479 ;;		_SYSTask
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function _PGMTick
  3485  0CAC                     _PGMTick:	
  3486                           
  3487                           ;PGM.c: 48: if(tmrPgm)
  3488                           
  3489                           ;incstack = 0
  3490                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3491  0CAC  0020               	movlb	0	; select bank0
  3492  0CAD  086C               	movf	_tmrPgm,w
  3493  0CAE  1903               	btfsc	3,2
  3494  0CAF  0008               	return
  3495                           
  3496                           ;PGM.c: 49: {
  3497                           ;PGM.c: 50: tmrPgm--;
  3498  0CB0  3001               	movlw	1
  3499  0CB1  02EC               	subwf	_tmrPgm,f
  3500                           
  3501                           ;PGM.c: 51: if(!(tmrPgm))
  3502  0CB2  08EC               	movf	_tmrPgm,f
  3503  0CB3  1D03               	skipz
  3504  0CB4  0008               	return
  3505                           
  3506                           ;PGM.c: 52: {
  3507                           ;PGM.c: 54: pgm_flg.pgmonoff=0;
  3508  0CB5  106B               	bcf	_pgm_flg,0
  3509                           
  3510                           ;PGM.c: 56: PORTCbits.RC7=1;
  3511  0CB6  178E               	bsf	14,7	;volatile
  3512                           
  3513                           ;PGM.c: 58: flg_slp.goSleep=1;
  3514  0CB7  146A               	bsf	_flg_slp,0
  3515  0CB8  0008               	return
  3516  0CB9                     __end_of_PGMTick:	
  3517                           
  3518                           	psect	text11
  3519  0511                     __ptext11:	
  3520 ;; *************** function _SLPSleep *****************
  3521 ;; Defined at:
  3522 ;;		line 7 in file "SLP.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;		None
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  3527 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  3528 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  3529 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  3530 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  3531 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  3532 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  3533 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;		None               void
  3536 ;; Registers used:
  3537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3544 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3546 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3547 ;;Total ram usage:        9 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    5
  3550 ;; This function calls:
  3551 ;;		_CC1Sleep
  3552 ;; This function is called by:
  3553 ;;		_SYSTask
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           
  3558                           ;psect for function _SLPSleep
  3559  0511                     _SLPSleep:	
  3560                           
  3561                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  3562                           ;SLP.c: 10: CC1Sleep();
  3563                           
  3564                           ;incstack = 0
  3565                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3566  0511  318C  247C  3185   	fcall	_CC1Sleep
  3567                           
  3568                           ;SLP.c: 12: WPUBTmp=WPUB;
  3569  0514  0024               	movlb	4	; select bank4
  3570  0515  080D               	movf	13,w	;volatile
  3571  0516  00FA               	movwf	??_SLPSleep
  3572  0517  087A               	movf	??_SLPSleep,w
  3573  0518  0020               	movlb	0	; select bank0
  3574  0519  00A2               	movwf	SLPSleep@WPUBTmp
  3575                           
  3576                           ;SLP.c: 13: WPUB=0b00000100;
  3577  051A  3004               	movlw	4
  3578  051B  0024               	movlb	4	; select bank4
  3579  051C  008D               	movwf	13	;volatile
  3580                           
  3581                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3582  051D  0021               	movlb	1	; select bank1
  3583  051E  081D               	movf	29,w	;volatile
  3584  051F  00FA               	movwf	??_SLPSleep
  3585  0520  087A               	movf	??_SLPSleep,w
  3586  0521  0020               	movlb	0	; select bank0
  3587  0522  00A6               	movwf	SLPSleep@ADCON0Tmp
  3588                           
  3589                           ;SLP.c: 16: ADCON0=0b00000000;
  3590  0523  0021               	movlb	1	; select bank1
  3591  0524  019D               	clrf	29	;volatile
  3592                           
  3593                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3594  0525  0022               	movlb	2	; select bank2
  3595  0526  0817               	movf	23,w	;volatile
  3596  0527  00FA               	movwf	??_SLPSleep
  3597  0528  087A               	movf	??_SLPSleep,w
  3598  0529  0020               	movlb	0	; select bank0
  3599  052A  00A5               	movwf	SLPSleep@FVRCONTmp
  3600                           
  3601                           ;SLP.c: 19: FVRCON=0b00000000;
  3602  052B  0022               	movlb	2	; select bank2
  3603  052C  0197               	clrf	23	;volatile
  3604                           
  3605                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3606  052D  0027               	movlb	7	; select bank7
  3607  052E  0815               	movf	21,w	;volatile
  3608  052F  00FA               	movwf	??_SLPSleep
  3609  0530  087A               	movf	??_SLPSleep,w
  3610  0531  0020               	movlb	0	; select bank0
  3611  0532  00A0               	movwf	SLPSleep@IOCBNTmp
  3612                           
  3613                           ;SLP.c: 22: INTCONTmp=INTCON;
  3614  0533  080B               	movf	11,w	;volatile
  3615  0534  00FA               	movwf	??_SLPSleep
  3616  0535  087A               	movf	??_SLPSleep,w
  3617  0536  00A1               	movwf	SLPSleep@INTCONTmp
  3618                           
  3619                           ;SLP.c: 23: INTCON=0b10001000;
  3620  0537  3088               	movlw	136
  3621  0538  008B               	movwf	11	;volatile
  3622                           
  3623                           ;SLP.c: 24: IOCBN=0b00000100;
  3624  0539  3004               	movlw	4
  3625  053A  0027               	movlb	7	; select bank7
  3626  053B  0095               	movwf	21	;volatile
  3627                           
  3628                           ;SLP.c: 26: TESTBATTtmp=0;
  3629  053C  0020               	movlb	0	; select bank0
  3630  053D  01A7               	clrf	SLPSleep@TESTBATTtmp
  3631                           
  3632                           ;SLP.c: 27: if(PORTBbits.RB5)
  3633  053E  1E8D               	btfss	13,5	;volatile
  3634  053F  2D42               	goto	l3577
  3635                           
  3636                           ;SLP.c: 28: TESTBATTtmp=1;
  3637  0540  01A7               	clrf	SLPSleep@TESTBATTtmp
  3638  0541  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3639  0542                     l3577:	
  3640                           
  3641                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3642  0542  0021               	movlb	1	; select bank1
  3643  0543  0817               	movf	23,w	;volatile
  3644  0544  00FA               	movwf	??_SLPSleep
  3645  0545  087A               	movf	??_SLPSleep,w
  3646  0546  0020               	movlb	0	; select bank0
  3647  0547  00A3               	movwf	SLPSleep@WDTCONTmp
  3648                           
  3649                           ;SLP.c: 31: WDTCON=0b00011011;
  3650  0548  301B               	movlw	27
  3651  0549  0021               	movlb	1	; select bank1
  3652  054A  0097               	movwf	23	;volatile
  3653                           
  3654                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3655  054B  0815               	movf	21,w	;volatile
  3656  054C  00FA               	movwf	??_SLPSleep
  3657  054D  087A               	movf	??_SLPSleep,w
  3658  054E  0020               	movlb	0	; select bank0
  3659  054F  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3660                           
  3661                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3662  0550  300A               	movlw	10
  3663  0551  0021               	movlb	1	; select bank1
  3664  0552  0095               	movwf	21	;volatile
  3665  0553  0064               	clrwdt	;# 
  3666  0554  0063               	sleep	;# 
  3667                           
  3668                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3669  0555  0020               	movlb	0	; select bank0
  3670  0556  0820               	movf	SLPSleep@IOCBNTmp,w
  3671  0557  0027               	movlb	7	; select bank7
  3672  0558  0095               	movwf	21	;volatile
  3673                           
  3674                           ;SLP.c: 40: INTCON=INTCONTmp;
  3675  0559  0020               	movlb	0	; select bank0
  3676  055A  0821               	movf	SLPSleep@INTCONTmp,w
  3677  055B  008B               	movwf	11	;volatile
  3678                           
  3679                           ;SLP.c: 41: WPUB=WPUBTmp;
  3680  055C  0822               	movf	SLPSleep@WPUBTmp,w
  3681  055D  0024               	movlb	4	; select bank4
  3682  055E  008D               	movwf	13	;volatile
  3683                           
  3684                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3685  055F  0020               	movlb	0	; select bank0
  3686  0560  0826               	movf	SLPSleep@ADCON0Tmp,w
  3687  0561  0021               	movlb	1	; select bank1
  3688  0562  009D               	movwf	29	;volatile
  3689                           
  3690                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3691  0563  0020               	movlb	0	; select bank0
  3692  0564  0825               	movf	SLPSleep@FVRCONTmp,w
  3693  0565  0022               	movlb	2	; select bank2
  3694  0566  0097               	movwf	23	;volatile
  3695                           
  3696                           ;SLP.c: 44: PORTBbits.RB5=0;
  3697  0567  0020               	movlb	0	; select bank0
  3698  0568  128D               	bcf	13,5	;volatile
  3699                           
  3700                           ;SLP.c: 45: if(TESTBATTtmp)
  3701  0569  0827               	movf	SLPSleep@TESTBATTtmp,w
  3702  056A  1D03               	skipz
  3703                           
  3704                           ;SLP.c: 46: PORTBbits.RB5=1;
  3705  056B  168D               	bsf	13,5	;volatile
  3706                           
  3707                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3708  056C  0823               	movf	SLPSleep@WDTCONTmp,w
  3709  056D  0021               	movlb	1	; select bank1
  3710  056E  0097               	movwf	23	;volatile
  3711                           
  3712                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3713  056F  0020               	movlb	0	; select bank0
  3714  0570  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3715  0571  0021               	movlb	1	; select bank1
  3716  0572  0095               	movwf	21	;volatile
  3717                           
  3718                           ;SLP.c: 50: flg_slp.exitSleep=1;
  3719  0573  0020               	movlb	0	; select bank0
  3720  0574  14EA               	bsf	_flg_slp,1
  3721  0575  0008               	return
  3722  0576                     __end_of_SLPSleep:	
  3723                           
  3724                           	psect	text12
  3725  0C7C                     __ptext12:	
  3726 ;; *************** function _CC1Sleep *****************
  3727 ;; Defined at:
  3728 ;;		line 145 in file "CC1.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;		None               void
  3735 ;; Registers used:
  3736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    4
  3749 ;; This function calls:
  3750 ;;		_CC1Strobe
  3751 ;; This function is called by:
  3752 ;;		_SLPSleep
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _CC1Sleep
  3758  0C7C                     _CC1Sleep:	
  3759                           
  3760                           ;CC1.c: 147: PORTAbits.RA5=0;
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3764  0C7C  0020               	movlb	0	; select bank0
  3765  0C7D  128C               	bcf	12,5	;volatile
  3766                           
  3767                           ;CC1.c: 149: CC1Strobe(SWOR);
  3768  0C7E  3038               	movlw	56
  3769  0C7F  318D  253E         	fcall	_CC1Strobe
  3770                           
  3771                           ;CC1.c: 151: PORTAbits.RA5=1;
  3772  0C81  0020               	movlb	0	; select bank0
  3773  0C82  168C               	bsf	12,5	;volatile
  3774  0C83  0008               	return
  3775  0C84                     __end_of_CC1Sleep:	
  3776                           
  3777                           	psect	text13
  3778  0FAC                     __ptext13:	
  3779 ;; *************** function _DINTick *****************
  3780 ;; Defined at:
  3781 ;;		line 47 in file "DIN.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;		None
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;		None
  3786 ;; Return value:  Size  Location     Type
  3787 ;;		None               void
  3788 ;; Registers used:
  3789 ;;		wreg, status,2, status,0
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3799 ;;Total ram usage:        1 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    2
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_SYSTask
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           
  3810                           ;psect for function _DINTick
  3811  0FAC                     _DINTick:	
  3812                           
  3813                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3814                           
  3815                           ;incstack = 0
  3816                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3817  0FAC  0020               	movlb	0	; select bank0
  3818  0FAD  1C6E               	btfss	_u_flg_din,0
  3819  0FAE  2FC1               	goto	l295
  3820                           
  3821                           ;DIN.c: 51: {
  3822                           ;DIN.c: 52: tmrDbncSel++;
  3823  0FAF  3001               	movlw	1
  3824  0FB0  00F1               	movwf	??_DINTick
  3825  0FB1  0871               	movf	??_DINTick,w
  3826  0FB2  0021               	movlb	1	; select bank1
  3827  0FB3  07AE               	addwf	_tmrDbncSel^(0+128),f
  3828                           
  3829                           ;DIN.c: 53: if(tmrDbncSel>5)
  3830  0FB4  3006               	movlw	6
  3831  0FB5  022E               	subwf	_tmrDbncSel^(0+128),w
  3832  0FB6  1C03               	skipc
  3833  0FB7  2FC1               	goto	l295
  3834                           
  3835                           ;DIN.c: 54: {
  3836                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3837  0FB8  0020               	movlb	0	; select bank0
  3838  0FB9  106E               	bcf	_u_flg_din,0
  3839                           
  3840                           ;DIN.c: 56: tmrDbncSel=0;
  3841  0FBA  0021               	movlb	1	; select bank1
  3842  0FBB  01AE               	clrf	_tmrDbncSel^(0+128)
  3843                           
  3844                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3845  0FBC  1C7C               	btfss	_u_in_sta_currTask,0
  3846  0FBD  2FC0               	goto	l297
  3847                           
  3848                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3849  0FBE  1430               	bsf	_u_in_ev_down^(0+128),0
  3850  0FBF  2FC1               	goto	l295
  3851  0FC0                     l297:	
  3852                           
  3853                           ;DIN.c: 60: else
  3854                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3855  0FC0  1432               	bsf	_u_in_ev_up^(0+128),0
  3856  0FC1                     l295:	
  3857                           
  3858                           ;DIN.c: 62: }
  3859                           ;DIN.c: 63: }
  3860                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3861  0FC1  0020               	movlb	0	; select bank0
  3862  0FC2  1CEE               	btfss	_u_flg_din,1
  3863  0FC3  0008               	return
  3864                           
  3865                           ;DIN.c: 67: {
  3866                           ;DIN.c: 68: tmrLongSel++;
  3867  0FC4  3001               	movlw	1
  3868  0FC5  0021               	movlb	1	; select bank1
  3869  0FC6  07A6               	addwf	_tmrLongSel^(0+128),f
  3870  0FC7  3000               	movlw	0
  3871  0FC8  3DA7               	addwfc	(_tmrLongSel+1)^(0+128),f
  3872                           
  3873                           ;DIN.c: 69: if(tmrLongSel>200)
  3874  0FC9  3000               	movlw	0
  3875  0FCA  0227               	subwf	(_tmrLongSel+1)^(0+128),w
  3876  0FCB  30C9               	movlw	201
  3877  0FCC  1903               	skipnz
  3878  0FCD  0226               	subwf	_tmrLongSel^(0+128),w
  3879  0FCE  1C03               	skipc
  3880  0FCF  0008               	return
  3881                           
  3882                           ;DIN.c: 70: {
  3883                           ;DIN.c: 72: tmrLongSel=0;
  3884  0FD0  01A6               	clrf	_tmrLongSel^(0+128)
  3885  0FD1  01A7               	clrf	(_tmrLongSel+1)^(0+128)
  3886                           
  3887                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3888  0FD2  1431               	bsf	_u_in_ev_long^(0+128),0
  3889  0FD3  0008               	return
  3890  0FD4                     __end_of_DINTick:	
  3891                           
  3892                           	psect	text14
  3893  0F86                     __ptext14:	
  3894 ;; *************** function _SYSInit *****************
  3895 ;; Defined at:
  3896 ;;		line 18 in file "SYS.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;  state           1    wreg     unsigned char 
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;  state           1    2[COMMON] unsigned char 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;		None               void
  3903 ;; Registers used:
  3904 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3914 ;;Total ram usage:        2 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    2
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_main
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _SYSInit
  3926  0F86                     _SYSInit:	
  3927                           
  3928                           ;incstack = 0
  3929                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3930                           ;SYSInit@state stored from wreg
  3931  0F86  00F2               	movwf	SYSInit@state
  3932                           
  3933                           ;SYS.c: 19: switch(state)
  3934  0F87  2FA3               	goto	l3021
  3935  0F88                     l2999:	
  3936                           ;SYS.c: 20: {
  3937                           ;SYS.c: 21: case 0:
  3938                           
  3939                           
  3940                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  3941  0F88  3006               	movlw	6
  3942  0F89  0021               	movlb	1	; select bank1
  3943  0F8A  0095               	movwf	21	;volatile
  3944  0F8B  3073               	movlw	115
  3945  0F8C  0099               	movwf	25	;volatile
  3946  0F8D  3009               	movlw	9
  3947  0F8E  0097               	movwf	23	;volatile
  3948  0F8F  0027               	movlb	7	; select bank7
  3949  0F90  0194               	clrf	20	;volatile
  3950  0F91  0195               	clrf	21	;volatile
  3951  0F92  3063               	movlw	99
  3952  0F93  0020               	movlb	0	; select bank0
  3953  0F94  0095               	movwf	21	;volatile
  3954  0F95  168B               	bsf	11,5	;volatile
  3955  0F96  30FB               	movlw	251
  3956  0F97  00F1               	movwf	??_SYSInit
  3957  0F98  0871               	movf	??_SYSInit,w
  3958  0F99  058B               	andwf	11,f	;volatile
  3959  0F9A  0191               	clrf	17	;volatile
  3960  0F9B  0192               	clrf	18	;volatile
  3961  0F9C  0021               	movlb	1	; select bank1
  3962  0F9D  0191               	clrf	17	;volatile
  3963  0F9E  0192               	clrf	18	;volatile
  3964                           
  3965                           ;SYS.c: 24: break;
  3966  0F9F  0008               	return
  3967  0FA0                     l3017:	
  3968                           ;SYS.c: 25: case 1:
  3969                           
  3970                           
  3971                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  3972  0FA0  0021               	movlb	1	; select bank1
  3973  0FA1  01AF               	clrf	_u_SYS_STA^(0+128)
  3974                           
  3975                           ;SYS.c: 32: }
  3976                           
  3977                           ;SYS.c: 28: break;
  3978  0FA2  0008               	return
  3979  0FA3                     l3021:	
  3980  0FA3  0872               	movf	SYSInit@state,w
  3981                           
  3982                           ; Switch size 1, requested type "space"
  3983                           ; Number of cases is 2, Range of values is 0 to 1
  3984                           ; switch strategies available:
  3985                           ; Name         Instructions Cycles
  3986                           ; simple_byte            7     4 (average)
  3987                           ; direct_byte           10     6 (fixed)
  3988                           ; jumptable            260     6 (fixed)
  3989                           ;	Chosen strategy is simple_byte
  3990  0FA4  3A00               	xorlw	0	; case 0
  3991  0FA5  1903               	skipnz
  3992  0FA6  2F88               	goto	l2999
  3993  0FA7  3A01               	xorlw	1	; case 1
  3994  0FA8  1903               	skipnz
  3995  0FA9  2FA0               	goto	l3017
  3996  0FAA  2FAB               	goto	l600
  3997  0FAB                     l600:	
  3998  0FAB  0008               	return
  3999  0FAC                     __end_of_SYSInit:	
  4000                           
  4001                           	psect	text15
  4002  0C6A                     __ptext15:	
  4003 ;; *************** function _RTXTask *****************
  4004 ;; Defined at:
  4005 ;;		line 83 in file "RTX.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;		None               void
  4012 ;; Registers used:
  4013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;Total ram usage:        0 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    8
  4026 ;; This function calls:
  4027 ;;		_RTXReadPkt
  4028 ;; This function is called by:
  4029 ;;		_main
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           
  4034                           ;psect for function _RTXTask
  4035  0C6A                     _RTXTask:	
  4036                           
  4037                           ;RTX.c: 85: if(!(PORTBbits.RB0))
  4038                           
  4039                           ;incstack = 0
  4040                           ; Regs used in _RTXTask: [allreg]
  4041  0C6A  0020               	movlb	0	; select bank0
  4042  0C6B  180D               	btfsc	13,0	;volatile
  4043  0C6C  0008               	return
  4044                           
  4045                           ;RTX.c: 86: RTXReadPkt();
  4046  0C6D  3185  25D6         	fcall	_RTXReadPkt
  4047  0C6F  0008               	return
  4048  0C70                     __end_of_RTXTask:	
  4049                           
  4050                           	psect	text16
  4051  05D6                     __ptext16:	
  4052 ;; *************** function _RTXReadPkt *****************
  4053 ;; Defined at:
  4054 ;;		line 135 in file "RTX.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;		None
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;		None               void
  4061 ;; Registers used:
  4062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;Total ram usage:        2 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    7
  4075 ;; This function calls:
  4076 ;;		_CC1Strobe
  4077 ;;		_CC1Read
  4078 ;;		_LEDNormalFlash
  4079 ;;		_PGMWriteNvm
  4080 ;;		_RTXStartSendData
  4081 ;;		_RTXRcvPkt
  4082 ;;		_RTXSendRPgm
  4083 ;; This function is called by:
  4084 ;;		_RTXTask
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function _RTXReadPkt
  4090  05D6                     _RTXReadPkt:	
  4091                           
  4092                           ;RTX.c: 136: unsigned char numRxByte;
  4093                           ;RTX.c: 139: CC1Read(0x3B,(&(numRxByte)),1);
  4094                           
  4095                           ;incstack = 0
  4096                           ; Regs used in _RTXReadPkt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4097  05D6  3066               	movlw	RTXReadPkt@numRxByte& (0+255)
  4098  05D7  0020               	movlb	0	; select bank0
  4099  05D8  00E5               	movwf	??_RTXReadPkt
  4100  05D9  0865               	movf	??_RTXReadPkt,w
  4101  05DA  00F7               	movwf	?_CC1Read
  4102  05DB  01F8               	clrf	?_CC1Read+1
  4103  05DC  0AF8               	incf	?_CC1Read+1,f
  4104  05DD  303B               	movlw	59
  4105  05DE  318D  25E7  3185   	fcall	_CC1Read
  4106                           
  4107                           ;RTX.c: 140: while(numRxByte>=0x09)
  4108  05E1  3009               	movlw	9
  4109  05E2  0020               	movlb	0	; select bank0
  4110  05E3  0266               	subwf	RTXReadPkt@numRxByte,w
  4111  05E4  1C03               	btfss	3,0
  4112  05E5  0008               	return
  4113  05E6  0064               	clrwdt	;# 
  4114                           
  4115                           ;RTX.c: 144: RTXRcvPkt(pktRx,0x09);
  4116  05E7  3009               	movlw	9
  4117  05E8  0020               	movlb	0	; select bank0
  4118  05E9  00E5               	movwf	??_RTXReadPkt
  4119  05EA  0865               	movf	??_RTXReadPkt,w
  4120  05EB  00A0               	movwf	?_RTXRcvPkt
  4121  05EC  30B3               	movlw	_pktRx& (0+255)
  4122  05ED  318C  24C6  3185   	fcall	_RTXRcvPkt
  4123                           
  4124                           ;RTX.c: 146: if(pgm_flg.pgmonoff)
  4125  05F0  0020               	movlb	0	; select bank0
  4126  05F1  1C6B               	btfss	_pgm_flg,0
  4127  05F2  2E15               	goto	l3727
  4128                           
  4129                           ;RTX.c: 147: {
  4130                           ;RTX.c: 148: if(pktRx[0]==0x00)
  4131  05F3  0021               	movlb	1	; select bank1
  4132  05F4  08B3               	movf	_pktRx^(0+128),f
  4133  05F5  1D03               	skipz
  4134  05F6  2DD6               	goto	_RTXReadPkt
  4135                           
  4136                           ;RTX.c: 149: {
  4137                           ;RTX.c: 151: if(pktRx[2]==PGM)
  4138  05F7  0835               	movf	(_pktRx^(0+128)+2),w
  4139  05F8  3A01               	xorlw	1
  4140  05F9  1D03               	skipz
  4141  05FA  2DD6               	goto	_RTXReadPkt
  4142                           
  4143                           ;RTX.c: 152: {
  4144                           ;RTX.c: 154: pgm_cfg.baseId=pktRx[1];
  4145  05FB  0834               	movf	(_pktRx^(0+128)+1),w
  4146  05FC  0020               	movlb	0	; select bank0
  4147  05FD  00E5               	movwf	??_RTXReadPkt
  4148  05FE  0865               	movf	??_RTXReadPkt,w
  4149  05FF  0021               	movlb	1	; select bank1
  4150  0600  00C9               	movwf	(_pgm_cfg^(0+128)+4)
  4151                           
  4152                           ;RTX.c: 156: pgm_cfg.menu=1;
  4153  0601  01C7               	clrf	(_pgm_cfg^(0+128)+2)
  4154  0602  0AC7               	incf	(_pgm_cfg^(0+128)+2),f
  4155                           
  4156                           ;RTX.c: 157: PGMWriteNvm();
  4157  0603  318D  2518  3185   	fcall	_PGMWriteNvm
  4158                           
  4159                           ;RTX.c: 159: RTXSendRPgm();
  4160  0606  318F  271A  3185   	fcall	_RTXSendRPgm
  4161                           
  4162                           ;RTX.c: 161: rtx_flg.pgmDone=1;
  4163  0609  0021               	movlb	1	; select bank1
  4164  060A  142A               	bsf	_rtx_flg^(0+128),0
  4165                           
  4166                           ;RTX.c: 163: tmrRcvPkt=0;
  4167  060B  0020               	movlb	0	; select bank0
  4168  060C  01ED               	clrf	_tmrRcvPkt
  4169                           
  4170                           ;RTX.c: 165: RTXStartSendData();
  4171  060D  318C  24D4  3185   	fcall	_RTXStartSendData
  4172                           
  4173                           ;RTX.c: 167: LEDNormalFlash(3);
  4174  0610  3003               	movlw	3
  4175  0611  318E  265C  3185   	fcall	_LEDNormalFlash
  4176                           
  4177                           ;RTX.c: 168: }
  4178                           ;RTX.c: 169: }
  4179                           ;RTX.c: 170: }
  4180  0614  2DD6               	goto	_RTXReadPkt
  4181  0615                     l3727:	
  4182                           
  4183                           ;RTX.c: 171: else
  4184                           ;RTX.c: 172: {
  4185                           ;RTX.c: 173: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  4186  0615  0021               	movlb	1	; select bank1
  4187  0616  0848               	movf	(_pgm_cfg^(0+128)+3),w
  4188  0617  0633               	xorwf	_pktRx^(0+128),w
  4189  0618  1D03               	skipz
  4190  0619  2DD6               	goto	_RTXReadPkt
  4191  061A  0849               	movf	(_pgm_cfg^(0+128)+4),w
  4192  061B  0634               	xorwf	(_pktRx^(0+128)+1),w
  4193  061C  1D03               	skipz
  4194  061D  2DD6               	goto	_RTXReadPkt
  4195                           
  4196                           ;RTX.c: 174: {
  4197                           ;RTX.c: 176: if(pktRx[2]==rDAT)
  4198  061E  0835               	movf	(_pktRx^(0+128)+2),w
  4199  061F  3A80               	xorlw	128
  4200  0620  1D03               	skipz
  4201  0621  2DD6               	goto	_RTXReadPkt
  4202                           
  4203                           ;RTX.c: 177: {
  4204                           ;RTX.c: 179: CC1Strobe(SIDLE);
  4205  0622  3036               	movlw	54
  4206  0623  318D  253E  3185   	fcall	_CC1Strobe
  4207                           
  4208                           ;RTX.c: 181: tmrRcvPkt=0;
  4209  0626  0020               	movlb	0	; select bank0
  4210  0627  01ED               	clrf	_tmrRcvPkt
  4211                           
  4212                           ;RTX.c: 183: cntSndData=0;
  4213  0628  0021               	movlb	1	; select bank1
  4214  0629  01A9               	clrf	_cntSndData^(0+128)
  4215                           
  4216                           ;RTX.c: 185: flg_slp.goSleep=1;
  4217  062A  0020               	movlb	0	; select bank0
  4218  062B  146A               	bsf	_flg_slp,0
  4219  062C  2DD6               	goto	_RTXReadPkt
  4220  062D                     __end_of_RTXReadPkt:	
  4221                           ;RTX.c: 186: }
  4222                           ;RTX.c: 187: }
  4223                           ;RTX.c: 188: }
  4224                           ;RTX.c: 190: CC1Read(0x3B,(&(numRxByte)),1);
  4225                           
  4226                           
  4227                           	psect	text17
  4228  0F1A                     __ptext17:	
  4229 ;; *************** function _RTXSendRPgm *****************
  4230 ;; Defined at:
  4231 ;;		line 256 in file "RTX.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;		None               void
  4238 ;; Registers used:
  4239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;Total ram usage:        1 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    5
  4252 ;; This function calls:
  4253 ;;		_RTXSndPkt
  4254 ;; This function is called by:
  4255 ;;		_RTXReadPkt
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           
  4260                           ;psect for function _RTXSendRPgm
  4261  0F1A                     _RTXSendRPgm:	
  4262                           
  4263                           ;RTX.c: 258: pktTx[0]=pgm_cfg.baseId;
  4264                           
  4265                           ;incstack = 0
  4266                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4267  0F1A  0021               	movlb	1	; select bank1
  4268  0F1B  0849               	movf	(_pgm_cfg^(0+128)+4),w
  4269  0F1C  0020               	movlb	0	; select bank0
  4270  0F1D  00A8               	movwf	??_RTXSendRPgm
  4271  0F1E  0828               	movf	??_RTXSendRPgm,w
  4272  0F1F  0021               	movlb	1	; select bank1
  4273  0F20  00BC               	movwf	_pktTx^(0+128)
  4274                           
  4275                           ;RTX.c: 259: pktTx[1]=pgm_cfg.sensId;
  4276  0F21  0848               	movf	(_pgm_cfg^(0+128)+3),w
  4277  0F22  0020               	movlb	0	; select bank0
  4278  0F23  00A8               	movwf	??_RTXSendRPgm
  4279  0F24  0828               	movf	??_RTXSendRPgm,w
  4280  0F25  0021               	movlb	1	; select bank1
  4281  0F26  00BD               	movwf	(_pktTx^(0+128)+1)
  4282                           
  4283                           ;RTX.c: 260: pktTx[2]=rPGM;
  4284  0F27  3081               	movlw	129
  4285  0F28  0020               	movlb	0	; select bank0
  4286  0F29  00A8               	movwf	??_RTXSendRPgm
  4287  0F2A  0828               	movf	??_RTXSendRPgm,w
  4288  0F2B  0021               	movlb	1	; select bank1
  4289  0F2C  00BE               	movwf	(_pktTx^(0+128)+2)
  4290                           
  4291                           ;RTX.c: 261: pktTx[3]=0x00;
  4292  0F2D  01BF               	clrf	(_pktTx^(0+128)+3)
  4293                           
  4294                           ;RTX.c: 262: pktTx[4]=0x00;
  4295  0F2E  01C0               	clrf	(_pktTx^(0+128)+4)
  4296                           
  4297                           ;RTX.c: 263: pktTx[5]=0x00;
  4298  0F2F  01C1               	clrf	(_pktTx^(0+128)+5)
  4299                           
  4300                           ;RTX.c: 264: pktTx[6]=0x00;
  4301  0F30  01C2               	clrf	(_pktTx^(0+128)+6)
  4302                           
  4303                           ;RTX.c: 265: pktTx[7]=0x00;
  4304  0F31  01C3               	clrf	(_pktTx^(0+128)+7)
  4305                           
  4306                           ;RTX.c: 266: pktTx[8]=0x00;
  4307  0F32  01C4               	clrf	(_pktTx^(0+128)+8)
  4308                           
  4309                           ;RTX.c: 269: RTXSndPkt(pktTx,0x09);
  4310  0F33  3009               	movlw	9
  4311  0F34  0020               	movlb	0	; select bank0
  4312  0F35  00A8               	movwf	??_RTXSendRPgm
  4313  0F36  0828               	movf	??_RTXSendRPgm,w
  4314  0F37  00A2               	movwf	?_RTXSndPkt
  4315  0F38  30BC               	movlw	_pktTx& (0+255)
  4316  0F39  3186  262D         	fcall	_RTXSndPkt
  4317  0F3B  0008               	return
  4318  0F3C                     __end_of_RTXSendRPgm:	
  4319                           
  4320                           	psect	text18
  4321  0CC6                     __ptext18:	
  4322 ;; *************** function _RTXRcvPkt *****************
  4323 ;; Defined at:
  4324 ;;		line 129 in file "RTX.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  dst             1    wreg     PTR unsigned char 
  4327 ;;		 -> pktRx(9), 
  4328 ;;  len             1    0[BANK0 ] unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  4331 ;;		 -> pktRx(9), 
  4332 ;; Return value:  Size  Location     Type
  4333 ;;		None               void
  4334 ;; Registers used:
  4335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4341 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;Total ram usage:        4 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    4
  4348 ;; This function calls:
  4349 ;;		_CC1Read
  4350 ;; This function is called by:
  4351 ;;		_RTXReadPkt
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           
  4356                           ;psect for function _RTXRcvPkt
  4357  0CC6                     _RTXRcvPkt:	
  4358                           
  4359                           ;incstack = 0
  4360                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4361                           ;RTXRcvPkt@dst stored from wreg
  4362  0CC6  0020               	movlb	0	; select bank0
  4363  0CC7  00A3               	movwf	RTXRcvPkt@dst
  4364                           
  4365                           ;RTX.c: 131: CC1Read(0x3F,dst,len);
  4366  0CC8  0823               	movf	RTXRcvPkt@dst,w
  4367  0CC9  00A1               	movwf	??_RTXRcvPkt
  4368  0CCA  0821               	movf	??_RTXRcvPkt,w
  4369  0CCB  00F7               	movwf	?_CC1Read
  4370  0CCC  0820               	movf	RTXRcvPkt@len,w
  4371  0CCD  00A2               	movwf	??_RTXRcvPkt+1
  4372  0CCE  0822               	movf	??_RTXRcvPkt+1,w
  4373  0CCF  00F8               	movwf	?_CC1Read+1
  4374  0CD0  303F               	movlw	63
  4375  0CD1  318D  25E7         	fcall	_CC1Read
  4376  0CD3  0008               	return
  4377  0CD4                     __end_of_RTXRcvPkt:	
  4378                           
  4379                           	psect	text19
  4380  0CD4                     __ptext19:	
  4381 ;; *************** function _RTXStartSendData *****************
  4382 ;; Defined at:
  4383 ;;		line 195 in file "RTX.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;		None
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;		None               void
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;Total ram usage:        0 bytes
  4402 ;; Hardware stack levels used:    1
  4403 ;; Hardware stack levels required when called:    6
  4404 ;; This function calls:
  4405 ;;		_ADCConv
  4406 ;;		_DLYDelay_ms
  4407 ;;		_RTXSendData
  4408 ;; This function is called by:
  4409 ;;		_RTXInit
  4410 ;;		_RTXReadPkt
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           
  4415                           ;psect for function _RTXStartSendData
  4416  0CD4                     _RTXStartSendData:	
  4417                           
  4418                           ;RTX.c: 197: DLYDelay_ms(100);
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4422  0CD4  3064               	movlw	100
  4423  0CD5  00F1               	movwf	?_DLYDelay_ms
  4424  0CD6  3000               	movlw	0
  4425  0CD7  00F2               	movwf	?_DLYDelay_ms+1
  4426  0CD8  318D  2599  318C   	fcall	_DLYDelay_ms
  4427                           
  4428                           ;RTX.c: 199: ADCConv();
  4429  0CDB  3180  2041  318C   	fcall	_ADCConv
  4430                           
  4431                           ;RTX.c: 201: cntSndData=0;
  4432  0CDE  0021               	movlb	1	; select bank1
  4433  0CDF  01A9               	clrf	_cntSndData^(0+128)
  4434                           
  4435                           ;RTX.c: 202: RTXSendData();
  4436  0CE0  3184  249E         	fcall	_RTXSendData
  4437  0CE2  0008               	return
  4438  0CE3                     __end_of_RTXStartSendData:	
  4439                           
  4440                           	psect	text20
  4441  049E                     __ptext20:	
  4442 ;; *************** function _RTXSendData *****************
  4443 ;; Defined at:
  4444 ;;		line 206 in file "RTX.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;		None
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;  valBatt         3   55[BANK0 ] struct _RTX_DATA
  4449 ;;  valTemp         3   52[BANK0 ] struct _RTX_DATA
  4450 ;; Return value:  Size  Location     Type
  4451 ;;		None               void
  4452 ;; Registers used:
  4453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4462 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4463 ;;Total ram usage:        7 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    5
  4466 ;; This function calls:
  4467 ;;		_ADCGetTempCCal
  4468 ;;		_LEDFastFlash
  4469 ;;		_RTXSndPkt
  4470 ;; This function is called by:
  4471 ;;		_RTXTick
  4472 ;;		_RTXStartSendData
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           
  4477                           ;psect for function _RTXSendData
  4478  049E                     _RTXSendData:	
  4479                           
  4480                           ;RTX.c: 207: tu_RTX_DATA valTemp,valBatt;
  4481                           ;RTX.c: 209: if(pgm_flg.pgmonoff)
  4482                           
  4483                           ;incstack = 0
  4484                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4485  049E  0020               	movlb	0	; select bank0
  4486  049F  1C6B               	btfss	_pgm_flg,0
  4487  04A0  2CA9               	goto	l3665
  4488                           
  4489                           ;RTX.c: 210: {
  4490                           ;RTX.c: 212: cntSndData=0;
  4491  04A1  0021               	movlb	1	; select bank1
  4492  04A2  01A9               	clrf	_cntSndData^(0+128)
  4493                           
  4494                           ;RTX.c: 214: tmrRcvPkt=100;
  4495  04A3  3064               	movlw	100
  4496  04A4  0020               	movlb	0	; select bank0
  4497  04A5  00D3               	movwf	??_RTXSendData
  4498  04A6  0853               	movf	??_RTXSendData,w
  4499  04A7  00ED               	movwf	_tmrRcvPkt
  4500                           
  4501                           ;RTX.c: 215: }
  4502  04A8  0008               	return
  4503  04A9                     l3665:	
  4504                           
  4505                           ;RTX.c: 216: else
  4506                           ;RTX.c: 217: {
  4507                           ;RTX.c: 219: if(cntSndData<5)
  4508  04A9  3005               	movlw	5
  4509  04AA  0021               	movlb	1	; select bank1
  4510  04AB  0229               	subwf	_cntSndData^(0+128),w
  4511  04AC  1803               	skipnc
  4512  04AD  2D0E               	goto	l517
  4513                           
  4514                           ;RTX.c: 220: {
  4515                           ;RTX.c: 222: if(pgm_cfg.menu)
  4516  04AE  0847               	movf	(_pgm_cfg^(0+128)+2),w
  4517  04AF  1903               	btfsc	3,2
  4518  04B0  2D08               	goto	l3695
  4519                           
  4520                           ;RTX.c: 223: {
  4521                           ;RTX.c: 225: pktTx[0]=pgm_cfg.baseId;
  4522  04B1  0849               	movf	(_pgm_cfg^(0+128)+4),w
  4523  04B2  0020               	movlb	0	; select bank0
  4524  04B3  00D3               	movwf	??_RTXSendData
  4525  04B4  0853               	movf	??_RTXSendData,w
  4526  04B5  0021               	movlb	1	; select bank1
  4527  04B6  00BC               	movwf	_pktTx^(0+128)
  4528                           
  4529                           ;RTX.c: 226: pktTx[1]=pgm_cfg.sensId;
  4530  04B7  0848               	movf	(_pgm_cfg^(0+128)+3),w
  4531  04B8  0020               	movlb	0	; select bank0
  4532  04B9  00D3               	movwf	??_RTXSendData
  4533  04BA  0853               	movf	??_RTXSendData,w
  4534  04BB  0021               	movlb	1	; select bank1
  4535  04BC  00BD               	movwf	(_pktTx^(0+128)+1)
  4536                           
  4537                           ;RTX.c: 227: pktTx[2]=DAT;
  4538  04BD  01BE               	clrf	(_pktTx^(0+128)+2)
  4539                           
  4540                           ;RTX.c: 228: valTemp.val=ADCGetTempCCal();
  4541  04BE  3186  26D7  3184   	fcall	_ADCGetTempCCal
  4542  04C1  0020               	movlb	0	; select bank0
  4543  04C2  0850               	movf	?_ADCGetTempCCal,w
  4544  04C3  00D4               	movwf	RTXSendData@valTemp
  4545  04C4  0851               	movf	?_ADCGetTempCCal+1,w
  4546  04C5  00D5               	movwf	RTXSendData@valTemp+1
  4547  04C6  0852               	movf	?_ADCGetTempCCal+2,w
  4548  04C7  00D6               	movwf	RTXSendData@valTemp+2
  4549                           
  4550                           ;RTX.c: 229: pktTx[3]=valTemp.val_byte[0];
  4551  04C8  0854               	movf	RTXSendData@valTemp,w
  4552  04C9  00D3               	movwf	??_RTXSendData
  4553  04CA  0853               	movf	??_RTXSendData,w
  4554  04CB  0021               	movlb	1	; select bank1
  4555  04CC  00BF               	movwf	(_pktTx^(0+128)+3)
  4556                           
  4557                           ;RTX.c: 230: pktTx[4]=valTemp.val_byte[1];
  4558  04CD  0020               	movlb	0	; select bank0
  4559  04CE  0855               	movf	RTXSendData@valTemp+1,w
  4560  04CF  00D3               	movwf	??_RTXSendData
  4561  04D0  0853               	movf	??_RTXSendData,w
  4562  04D1  0021               	movlb	1	; select bank1
  4563  04D2  00C0               	movwf	(_pktTx^(0+128)+4)
  4564                           
  4565                           ;RTX.c: 231: pktTx[5]=valTemp.val_byte[2];
  4566  04D3  0020               	movlb	0	; select bank0
  4567  04D4  0856               	movf	RTXSendData@valTemp+2,w
  4568  04D5  00D3               	movwf	??_RTXSendData
  4569  04D6  0853               	movf	??_RTXSendData,w
  4570  04D7  0021               	movlb	1	; select bank1
  4571  04D8  00C1               	movwf	(_pktTx^(0+128)+5)
  4572                           
  4573                           ;RTX.c: 232: valBatt.val=battV;
  4574  04D9  0820               	movf	_battV^(0+128),w
  4575  04DA  0020               	movlb	0	; select bank0
  4576  04DB  00D7               	movwf	RTXSendData@valBatt
  4577  04DC  0021               	movlb	1	; select bank1
  4578  04DD  0821               	movf	(_battV+1)^(0+128),w
  4579  04DE  0020               	movlb	0	; select bank0
  4580  04DF  00D8               	movwf	RTXSendData@valBatt+1
  4581  04E0  0021               	movlb	1	; select bank1
  4582  04E1  0822               	movf	(_battV+2)^(0+128),w
  4583  04E2  0020               	movlb	0	; select bank0
  4584  04E3  00D9               	movwf	RTXSendData@valBatt+2
  4585                           
  4586                           ;RTX.c: 233: pktTx[6]=valBatt.val_byte[0];
  4587  04E4  0857               	movf	RTXSendData@valBatt,w
  4588  04E5  00D3               	movwf	??_RTXSendData
  4589  04E6  0853               	movf	??_RTXSendData,w
  4590  04E7  0021               	movlb	1	; select bank1
  4591  04E8  00C2               	movwf	(_pktTx^(0+128)+6)
  4592                           
  4593                           ;RTX.c: 234: pktTx[7]=valBatt.val_byte[1];
  4594  04E9  0020               	movlb	0	; select bank0
  4595  04EA  0858               	movf	RTXSendData@valBatt+1,w
  4596  04EB  00D3               	movwf	??_RTXSendData
  4597  04EC  0853               	movf	??_RTXSendData,w
  4598  04ED  0021               	movlb	1	; select bank1
  4599  04EE  00C3               	movwf	(_pktTx^(0+128)+7)
  4600                           
  4601                           ;RTX.c: 235: pktTx[8]=valBatt.val_byte[2];
  4602  04EF  0020               	movlb	0	; select bank0
  4603  04F0  0859               	movf	RTXSendData@valBatt+2,w
  4604  04F1  00D3               	movwf	??_RTXSendData
  4605  04F2  0853               	movf	??_RTXSendData,w
  4606  04F3  0021               	movlb	1	; select bank1
  4607  04F4  00C4               	movwf	(_pktTx^(0+128)+8)
  4608                           
  4609                           ;RTX.c: 238: RTXSndPkt(pktTx,0x09);
  4610  04F5  3009               	movlw	9
  4611  04F6  0020               	movlb	0	; select bank0
  4612  04F7  00D3               	movwf	??_RTXSendData
  4613  04F8  0853               	movf	??_RTXSendData,w
  4614  04F9  00A2               	movwf	?_RTXSndPkt
  4615  04FA  30BC               	movlw	_pktTx& (0+255)
  4616  04FB  3186  262D  3184   	fcall	_RTXSndPkt
  4617                           
  4618                           ;RTX.c: 241: cntSndData++;
  4619  04FE  3001               	movlw	1
  4620  04FF  0020               	movlb	0	; select bank0
  4621  0500  00D3               	movwf	??_RTXSendData
  4622  0501  0853               	movf	??_RTXSendData,w
  4623  0502  0021               	movlb	1	; select bank1
  4624  0503  07A9               	addwf	_cntSndData^(0+128),f
  4625                           
  4626                           ;RTX.c: 244: LEDFastFlash(1);
  4627  0504  3001               	movlw	1
  4628  0505  318E  267A         	fcall	_LEDFastFlash
  4629  0507  0021               	movlb	1	; select bank1
  4630  0508                     l3695:	
  4631                           
  4632                           ;RTX.c: 245: }
  4633                           ;RTX.c: 248: tmrRcvPkt=100;
  4634  0508  3064               	movlw	100
  4635  0509  0020               	movlb	0	; select bank0
  4636  050A  00D3               	movwf	??_RTXSendData
  4637  050B  0853               	movf	??_RTXSendData,w
  4638  050C  00ED               	movwf	_tmrRcvPkt
  4639                           
  4640                           ;RTX.c: 249: }
  4641  050D  0008               	return
  4642  050E                     l517:	
  4643                           
  4644                           ;RTX.c: 250: else
  4645                           ;RTX.c: 251: flg_slp.goSleep=1;
  4646  050E  0020               	movlb	0	; select bank0
  4647  050F  146A               	bsf	_flg_slp,0
  4648  0510  0008               	return
  4649  0511                     __end_of_RTXSendData:	
  4650                           
  4651                           	psect	text21
  4652  062D                     __ptext21:	
  4653 ;; *************** function _RTXSndPkt *****************
  4654 ;; Defined at:
  4655 ;;		line 105 in file "RTX.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  src             1    wreg     PTR unsigned char 
  4658 ;;		 -> pktTx(9), 
  4659 ;;  len             1    2[BANK0 ] unsigned char 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;  src             1    4[BANK0 ] PTR unsigned char 
  4662 ;;		 -> pktTx(9), 
  4663 ;;  sta             1    7[BANK0 ] unsigned char 
  4664 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4665 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4675 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;Total ram usage:        6 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    4
  4682 ;; This function calls:
  4683 ;;		_CC1Strobe
  4684 ;;		_CC1Read
  4685 ;;		_CC1Write
  4686 ;; This function is called by:
  4687 ;;		_RTXSendData
  4688 ;;		_RTXSendRPgm
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _RTXSndPkt
  4694  062D                     _RTXSndPkt:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4698                           ;RTXSndPkt@src stored from wreg
  4699  062D  0020               	movlb	0	; select bank0
  4700  062E  00A4               	movwf	RTXSndPkt@src
  4701  062F                     l490:	
  4702                           ;RTX.c: 106: unsigned char sta,numRxByte,numTxByte;
  4703                           ;RTX.c: 109: do
  4704                           
  4705  062F  0064               	clrwdt	;# 
  4706                           
  4707                           ;RTX.c: 112: CC1Read(0x35,(&(sta)),1);
  4708  0630  3027               	movlw	RTXSndPkt@sta& (0+255)
  4709  0631  0020               	movlb	0	; select bank0
  4710  0632  00A3               	movwf	??_RTXSndPkt
  4711  0633  0823               	movf	??_RTXSndPkt,w
  4712  0634  00F7               	movwf	?_CC1Read
  4713  0635  01F8               	clrf	?_CC1Read+1
  4714  0636  0AF8               	incf	?_CC1Read+1,f
  4715  0637  3035               	movlw	53
  4716  0638  318D  25E7  3186   	fcall	_CC1Read
  4717                           
  4718                           ;RTX.c: 113: }
  4719                           ;RTX.c: 114: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4720  063B  301F               	movlw	31
  4721  063C  0020               	movlb	0	; select bank0
  4722  063D  0527               	andwf	RTXSndPkt@sta,w
  4723  063E  00A3               	movwf	??_RTXSndPkt
  4724  063F  0823               	movf	??_RTXSndPkt,w
  4725  0640  3A0D               	xorlw	13
  4726  0641  1903               	skipnz
  4727  0642  2E4A               	goto	l3759
  4728  0643  301F               	movlw	31
  4729  0644  0527               	andwf	RTXSndPkt@sta,w
  4730  0645  00A3               	movwf	??_RTXSndPkt
  4731  0646  0823               	movf	??_RTXSndPkt,w
  4732  0647  3A01               	xorlw	1
  4733  0648  1D03               	skipz
  4734  0649  2E2F               	goto	l490
  4735  064A                     l3759:	
  4736                           
  4737                           ;RTX.c: 116: CC1Strobe(SIDLE);
  4738  064A  3036               	movlw	54
  4739  064B  318D  253E  3186   	fcall	_CC1Strobe
  4740                           
  4741                           ;RTX.c: 117: CC1Read(0x3B,(&(numRxByte)),1);
  4742  064E  3025               	movlw	RTXSndPkt@numRxByte& (0+255)
  4743  064F  0020               	movlb	0	; select bank0
  4744  0650  00A3               	movwf	??_RTXSndPkt
  4745  0651  0823               	movf	??_RTXSndPkt,w
  4746  0652  00F7               	movwf	?_CC1Read
  4747  0653  01F8               	clrf	?_CC1Read+1
  4748  0654  0AF8               	incf	?_CC1Read+1,f
  4749  0655  303B               	movlw	59
  4750  0656  318D  25E7  3186   	fcall	_CC1Read
  4751                           
  4752                           ;RTX.c: 118: CC1Read(0x3A,(&(numTxByte)),1);
  4753  0659  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  4754  065A  0020               	movlb	0	; select bank0
  4755  065B  00A3               	movwf	??_RTXSndPkt
  4756  065C  0823               	movf	??_RTXSndPkt,w
  4757  065D  00F7               	movwf	?_CC1Read
  4758  065E  01F8               	clrf	?_CC1Read+1
  4759  065F  0AF8               	incf	?_CC1Read+1,f
  4760  0660  303A               	movlw	58
  4761  0661  318D  25E7  3186   	fcall	_CC1Read
  4762                           
  4763                           ;RTX.c: 120: CC1Strobe(SFTX);
  4764  0664  303B               	movlw	59
  4765  0665  318D  253E  3186   	fcall	_CC1Strobe
  4766                           
  4767                           ;RTX.c: 121: CC1Read(0x3A,(&(numTxByte)),1);
  4768  0668  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  4769  0669  0020               	movlb	0	; select bank0
  4770  066A  00A3               	movwf	??_RTXSndPkt
  4771  066B  0823               	movf	??_RTXSndPkt,w
  4772  066C  00F7               	movwf	?_CC1Read
  4773  066D  01F8               	clrf	?_CC1Read+1
  4774  066E  0AF8               	incf	?_CC1Read+1,f
  4775  066F  303A               	movlw	58
  4776  0670  318D  25E7  3186   	fcall	_CC1Read
  4777                           
  4778                           ;RTX.c: 123: CC1Write(0x3F,src,len);
  4779  0673  0020               	movlb	0	; select bank0
  4780  0674  0824               	movf	RTXSndPkt@src,w
  4781  0675  00F7               	movwf	?_CC1Write
  4782  0676  3000               	movlw	0
  4783  0677  00F8               	movwf	?_CC1Write+1
  4784  0678  0822               	movf	RTXSndPkt@len,w
  4785  0679  00A3               	movwf	??_RTXSndPkt
  4786  067A  0823               	movf	??_RTXSndPkt,w
  4787  067B  00F9               	movwf	?_CC1Write+2
  4788  067C  303F               	movlw	63
  4789  067D  318E  26F9  3186   	fcall	_CC1Write
  4790                           
  4791                           ;RTX.c: 125: CC1Strobe(STX);
  4792  0680  3035               	movlw	53
  4793  0681  318D  253E         	fcall	_CC1Strobe
  4794  0683  0008               	return
  4795  0684                     __end_of_RTXSndPkt:	
  4796                           
  4797                           	psect	text22
  4798  0EF9                     __ptext22:	
  4799 ;; *************** function _CC1Write *****************
  4800 ;; Defined at:
  4801 ;;		line 127 in file "CC1.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  addr            1    wreg     unsigned char 
  4804 ;;  src             2    7[COMMON] PTR unsigned char 
  4805 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
  4806 ;;  len             1    9[COMMON] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  addr            1    0[BANK0 ] unsigned char 
  4809 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;		None               void
  4812 ;; Registers used:
  4813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4819 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4822 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;Total ram usage:        6 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    3
  4826 ;; This function calls:
  4827 ;;		_SPIWrite
  4828 ;; This function is called by:
  4829 ;;		_CC1LoadREG
  4830 ;;		_RTXSndPkt
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           
  4835                           ;psect for function _CC1Write
  4836  0EF9                     _CC1Write:	
  4837                           
  4838                           ;incstack = 0
  4839                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4840                           ;CC1Write@addr stored from wreg
  4841  0EF9  0020               	movlb	0	; select bank0
  4842  0EFA  00A0               	movwf	CC1Write@addr
  4843                           
  4844                           ;CC1.c: 128: unsigned char cc1Addr;
  4845                           ;CC1.c: 131: PORTAbits.RA5=0;
  4846  0EFB  128C               	bcf	12,5	;volatile
  4847                           
  4848                           ;CC1.c: 134: cc1Addr=((addr&0b00111111)|0b01000000);
  4849  0EFC  0820               	movf	CC1Write@addr,w
  4850  0EFD  393F               	andlw	63
  4851  0EFE  3840               	iorlw	64
  4852  0EFF  00FA               	movwf	??_CC1Write
  4853  0F00  087A               	movf	??_CC1Write,w
  4854  0F01  00A1               	movwf	CC1Write@cc1Addr
  4855                           
  4856                           ;CC1.c: 135: SPIWrite((&(cc1Addr)),1);
  4857  0F02  3021               	movlw	low CC1Write@cc1Addr
  4858  0F03  00F1               	movwf	?_SPIWrite
  4859  0F04  3000               	movlw	high CC1Write@cc1Addr
  4860  0F05  00F2               	movwf	?_SPIWrite+1
  4861  0F06  01F3               	clrf	?_SPIWrite+2
  4862  0F07  0AF3               	incf	?_SPIWrite+2,f
  4863  0F08  318E  2603  318E   	fcall	_SPIWrite
  4864                           
  4865                           ;CC1.c: 138: SPIWrite(src,len);
  4866  0F0B  0878               	movf	CC1Write@src+1,w
  4867  0F0C  01F2               	clrf	?_SPIWrite+1
  4868  0F0D  07F2               	addwf	?_SPIWrite+1,f
  4869  0F0E  0877               	movf	CC1Write@src,w
  4870  0F0F  01F1               	clrf	?_SPIWrite
  4871  0F10  07F1               	addwf	?_SPIWrite,f
  4872  0F11  0879               	movf	CC1Write@len,w
  4873  0F12  00FA               	movwf	??_CC1Write
  4874  0F13  087A               	movf	??_CC1Write,w
  4875  0F14  00F3               	movwf	?_SPIWrite+2
  4876  0F15  318E  2603         	fcall	_SPIWrite
  4877                           
  4878                           ;CC1.c: 141: PORTAbits.RA5=1;
  4879  0F17  0020               	movlb	0	; select bank0
  4880  0F18  168C               	bsf	12,5	;volatile
  4881  0F19  0008               	return
  4882  0F1A                     __end_of_CC1Write:	
  4883                           
  4884                           	psect	text23
  4885  0DE7                     __ptext23:	
  4886 ;; *************** function _CC1Read *****************
  4887 ;; Defined at:
  4888 ;;		line 109 in file "CC1.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  addr            1    wreg     unsigned char 
  4891 ;;  dst             1    7[COMMON] PTR unsigned char 
  4892 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4893 ;;		 -> RTXSndPkt@sta(1), 
  4894 ;;  len             1    8[COMMON] unsigned char 
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  addr            1   10[COMMON] unsigned char 
  4897 ;;  cc1Addr         1   11[COMMON] unsigned char 
  4898 ;; Return value:  Size  Location     Type
  4899 ;;		None               void
  4900 ;; Registers used:
  4901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;Total ram usage:        5 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    3
  4914 ;; This function calls:
  4915 ;;		_SPIRead
  4916 ;;		_SPIWrite
  4917 ;; This function is called by:
  4918 ;;		_RTXSndPkt
  4919 ;;		_RTXRcvPkt
  4920 ;;		_RTXReadPkt
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           
  4925                           ;psect for function _CC1Read
  4926  0DE7                     _CC1Read:	
  4927                           
  4928                           ;incstack = 0
  4929                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4930                           ;CC1Read@addr stored from wreg
  4931  0DE7  00FA               	movwf	CC1Read@addr
  4932                           
  4933                           ;CC1.c: 110: unsigned char cc1Addr;
  4934                           ;CC1.c: 113: PORTAbits.RA5=0;
  4935  0DE8  0020               	movlb	0	; select bank0
  4936  0DE9  128C               	bcf	12,5	;volatile
  4937                           
  4938                           ;CC1.c: 116: cc1Addr=((addr&0b00111111)|0b11000000);
  4939  0DEA  087A               	movf	CC1Read@addr,w
  4940  0DEB  393F               	andlw	63
  4941  0DEC  38C0               	iorlw	192
  4942  0DED  00F9               	movwf	??_CC1Read
  4943  0DEE  0879               	movf	??_CC1Read,w
  4944  0DEF  00FB               	movwf	CC1Read@cc1Addr
  4945                           
  4946                           ;CC1.c: 117: SPIWrite((&(cc1Addr)),1);
  4947  0DF0  307B               	movlw	low CC1Read@cc1Addr
  4948  0DF1  00F1               	movwf	?_SPIWrite
  4949  0DF2  3000               	movlw	high CC1Read@cc1Addr
  4950  0DF3  00F2               	movwf	?_SPIWrite+1
  4951  0DF4  01F3               	clrf	?_SPIWrite+2
  4952  0DF5  0AF3               	incf	?_SPIWrite+2,f
  4953  0DF6  318E  2603  318D   	fcall	_SPIWrite
  4954                           
  4955                           ;CC1.c: 120: SPIRead(dst,len);
  4956  0DF9  0878               	movf	CC1Read@len,w
  4957  0DFA  00F9               	movwf	??_CC1Read
  4958  0DFB  0879               	movf	??_CC1Read,w
  4959  0DFC  00F1               	movwf	?_SPIRead
  4960  0DFD  0877               	movf	CC1Read@dst,w
  4961  0DFE  318E  26B8         	fcall	_SPIRead
  4962                           
  4963                           ;CC1.c: 123: PORTAbits.RA5=1;
  4964  0E00  0020               	movlb	0	; select bank0
  4965  0E01  168C               	bsf	12,5	;volatile
  4966  0E02  0008               	return
  4967  0E03                     __end_of_CC1Read:	
  4968                           
  4969                           	psect	text24
  4970  0EB8                     __ptext24:	
  4971 ;; *************** function _SPIRead *****************
  4972 ;; Defined at:
  4973 ;;		line 26 in file "SPI.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  dstPtr          1    wreg     PTR unsigned char 
  4976 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4977 ;;		 -> RTXSndPkt@sta(1), 
  4978 ;;  len             1    1[COMMON] unsigned char 
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  4981 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4982 ;;		 -> RTXSndPkt@sta(1), 
  4983 ;;  i               1    5[COMMON] unsigned char 
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4993 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;Total ram usage:        5 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    2
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_CC1Read
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function _SPIRead
  5009  0EB8                     _SPIRead:	
  5010                           
  5011                           ;incstack = 0
  5012                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5013                           ;SPIRead@dstPtr stored from wreg
  5014  0EB8  00F4               	movwf	SPIRead@dstPtr
  5015                           
  5016                           ;SPI.c: 27: unsigned char i;
  5017                           ;SPI.c: 29: for(i=0;i<len;i++)
  5018  0EB9  01F5               	clrf	SPIRead@i
  5019  0EBA                     l3391:	
  5020  0EBA  0871               	movf	SPIRead@len,w
  5021  0EBB  0275               	subwf	SPIRead@i,w
  5022  0EBC  1803               	btfsc	3,0
  5023  0EBD  0008               	return
  5024                           
  5025                           ;SPI.c: 30: {
  5026                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5027  0EBE  0020               	movlb	0	; select bank0
  5028  0EBF  1191               	bcf	17,3	;volatile
  5029                           
  5030                           ;SPI.c: 32: SSPBUF=0xFF;
  5031  0EC0  30FF               	movlw	255
  5032  0EC1  0024               	movlb	4	; select bank4
  5033  0EC2  0091               	movwf	17	;volatile
  5034  0EC3                     l65:	
  5035                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5036                           
  5037  0EC3  0020               	movlb	0	; select bank0
  5038  0EC4  1991               	btfsc	17,3	;volatile
  5039  0EC5  2EC8               	goto	l3387
  5040                           
  5041                           ;SPI.c: 34: _nop();
  5042  0EC6  0000               	nop
  5043  0EC7  2EC3               	goto	l65
  5044  0EC8                     l3387:	
  5045                           
  5046                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5047  0EC8  0024               	movlb	4	; select bank4
  5048  0EC9  0811               	movf	17,w	;volatile
  5049  0ECA  00F2               	movwf	??_SPIRead
  5050  0ECB  0875               	movf	SPIRead@i,w
  5051  0ECC  0774               	addwf	SPIRead@dstPtr,w
  5052  0ECD  00F3               	movwf	??_SPIRead+1
  5053  0ECE  0873               	movf	??_SPIRead+1,w
  5054  0ECF  0086               	movwf	6
  5055  0ED0  0187               	clrf	7
  5056  0ED1  0872               	movf	??_SPIRead,w
  5057  0ED2  0081               	movwf	1
  5058  0ED3  3001               	movlw	1
  5059  0ED4  00F2               	movwf	??_SPIRead
  5060  0ED5  0872               	movf	??_SPIRead,w
  5061  0ED6  07F5               	addwf	SPIRead@i,f
  5062  0ED7  2EBA               	goto	l3391
  5063  0ED8                     __end_of_SPIRead:	
  5064                           
  5065                           	psect	text25
  5066  0D3E                     __ptext25:	
  5067 ;; *************** function _CC1Strobe *****************
  5068 ;; Defined at:
  5069 ;;		line 94 in file "CC1.c"
  5070 ;; Parameters:    Size  Location     Type
  5071 ;;  e_stb           1    wreg     enum E1829
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  e_stb           1    8[COMMON] enum E1829
  5074 ;;  cc1Stb          1    9[COMMON] unsigned char 
  5075 ;;  i               1    0        unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;		None               void
  5078 ;; Registers used:
  5079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5089 ;;Total ram usage:        3 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    3
  5092 ;; This function calls:
  5093 ;;		_SPIWrite
  5094 ;; This function is called by:
  5095 ;;		_CC1Init
  5096 ;;		_CC1Sleep
  5097 ;;		_RTXInit
  5098 ;;		_RTXSndPkt
  5099 ;;		_RTXReadPkt
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           
  5104                           ;psect for function _CC1Strobe
  5105  0D3E                     _CC1Strobe:	
  5106                           
  5107                           ;incstack = 0
  5108                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5109                           ;CC1Strobe@e_stb stored from wreg
  5110  0D3E  00F8               	movwf	CC1Strobe@e_stb
  5111                           
  5112                           ;CC1.c: 95: unsigned char cc1Stb,i;
  5113                           ;CC1.c: 98: PORTAbits.RA5=0;
  5114  0D3F  0020               	movlb	0	; select bank0
  5115  0D40  128C               	bcf	12,5	;volatile
  5116                           
  5117                           ;CC1.c: 101: cc1Stb=((e_stb&0b00111111)|0b10000000);
  5118  0D41  0878               	movf	CC1Strobe@e_stb,w
  5119  0D42  393F               	andlw	63
  5120  0D43  3880               	iorlw	128
  5121  0D44  00F7               	movwf	??_CC1Strobe
  5122  0D45  0877               	movf	??_CC1Strobe,w
  5123  0D46  00F9               	movwf	CC1Strobe@cc1Stb
  5124                           
  5125                           ;CC1.c: 102: SPIWrite((&(cc1Stb)),1);
  5126  0D47  3079               	movlw	low CC1Strobe@cc1Stb
  5127  0D48  00F1               	movwf	?_SPIWrite
  5128  0D49  3000               	movlw	high CC1Strobe@cc1Stb
  5129  0D4A  00F2               	movwf	?_SPIWrite+1
  5130  0D4B  01F3               	clrf	?_SPIWrite+2
  5131  0D4C  0AF3               	incf	?_SPIWrite+2,f
  5132  0D4D  318E  2603         	fcall	_SPIWrite
  5133                           
  5134                           ;CC1.c: 105: PORTAbits.RA5=1;
  5135  0D4F  0020               	movlb	0	; select bank0
  5136  0D50  168C               	bsf	12,5	;volatile
  5137  0D51  0008               	return
  5138  0D52                     __end_of_CC1Strobe:	
  5139                           
  5140                           	psect	text26
  5141  0E03                     __ptext26:	
  5142 ;; *************** function _SPIWrite *****************
  5143 ;; Defined at:
  5144 ;;		line 40 in file "SPI.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  5147 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), CC1Write@cc1Addr(1), 
  5148 ;;		 -> CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  5149 ;;  len             1    3[COMMON] unsigned char 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  i               1    6[COMMON] unsigned char 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5161 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;Total ram usage:        6 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    2
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_CC1Strobe
  5172 ;;		_CC1Read
  5173 ;;		_CC1Write
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           
  5178                           ;psect for function _SPIWrite
  5179  0E03                     _SPIWrite:	
  5180                           
  5181                           ;SPI.c: 41: unsigned char i;
  5182                           ;SPI.c: 43: for(i=0;i<len;i++)
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  5186  0E03  01F6               	clrf	SPIWrite@i
  5187  0E04                     l3399:	
  5188  0E04  0873               	movf	SPIWrite@len,w
  5189  0E05  0276               	subwf	SPIWrite@i,w
  5190  0E06  1803               	btfsc	3,0
  5191  0E07  0008               	return
  5192                           
  5193                           ;SPI.c: 44: {
  5194                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  5195  0E08  0020               	movlb	0	; select bank0
  5196  0E09  1191               	bcf	17,3	;volatile
  5197                           
  5198                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  5199  0E0A  0876               	movf	SPIWrite@i,w
  5200  0E0B  00F4               	movwf	??_SPIWrite
  5201  0E0C  01F5               	clrf	??_SPIWrite+1
  5202  0E0D  0874               	movf	??_SPIWrite,w
  5203  0E0E  0771               	addwf	SPIWrite@srcPtr,w
  5204  0E0F  0086               	movwf	6
  5205  0E10  0875               	movf	??_SPIWrite+1,w
  5206  0E11  3D72               	addwfc	SPIWrite@srcPtr+1,w
  5207  0E12  0087               	movwf	7
  5208  0E13  0801               	movf	1,w
  5209  0E14  0024               	movlb	4	; select bank4
  5210  0E15  0091               	movwf	17	;volatile
  5211  0E16                     l74:	
  5212                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  5213                           
  5214  0E16  0020               	movlb	0	; select bank0
  5215  0E17  1991               	btfsc	17,3	;volatile
  5216  0E18  2E1B               	goto	l3397
  5217                           
  5218                           ;SPI.c: 48: _nop();
  5219  0E19  0000               	nop
  5220  0E1A  2E16               	goto	l74
  5221  0E1B                     l3397:	
  5222  0E1B  3001               	movlw	1
  5223  0E1C  00F4               	movwf	??_SPIWrite
  5224  0E1D  0874               	movf	??_SPIWrite,w
  5225  0E1E  07F6               	addwf	SPIWrite@i,f
  5226  0E1F  2E04               	goto	l3399
  5227  0E20                     __end_of_SPIWrite:	
  5228                           
  5229                           	psect	text27
  5230  0E7A                     __ptext27:	
  5231 ;; *************** function _LEDFastFlash *****************
  5232 ;; Defined at:
  5233 ;;		line 39 in file "LED.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;  num             1    wreg     unsigned char 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;  num             1    8[COMMON] unsigned char 
  5238 ;;  i               1    9[COMMON] unsigned char 
  5239 ;; Return value:  Size  Location     Type
  5240 ;;		None               void
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0, pclath, cstack
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;Total ram usage:        3 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; Hardware stack levels required when called:    3
  5255 ;; This function calls:
  5256 ;;		_DLYDelay_ms
  5257 ;; This function is called by:
  5258 ;;		_RTXSendData
  5259 ;; This function uses a non-reentrant model
  5260 ;;
  5261                           
  5262                           
  5263                           ;psect for function _LEDFastFlash
  5264  0E7A                     _LEDFastFlash:	
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  5268                           ;LEDFastFlash@num stored from wreg
  5269  0E7A  00F8               	movwf	LEDFastFlash@num
  5270                           
  5271                           ;LED.c: 40: unsigned char i;
  5272                           ;LED.c: 42: for(i=0;i<num;i++)
  5273  0E7B  01F9               	clrf	LEDFastFlash@i
  5274  0E7C                     l3537:	
  5275  0E7C  0878               	movf	LEDFastFlash@num,w
  5276  0E7D  0279               	subwf	LEDFastFlash@i,w
  5277  0E7E  1803               	btfsc	3,0
  5278  0E7F  0008               	return
  5279  0E80  0064               	clrwdt	;# 
  5280                           
  5281                           ;LED.c: 45: PORTCbits.RC7=0;
  5282  0E81  0020               	movlb	0	; select bank0
  5283  0E82  138E               	bcf	14,7	;volatile
  5284                           
  5285                           ;LED.c: 46: DLYDelay_ms(5);
  5286  0E83  3005               	movlw	5
  5287  0E84  00F1               	movwf	?_DLYDelay_ms
  5288  0E85  3000               	movlw	0
  5289  0E86  00F2               	movwf	?_DLYDelay_ms+1
  5290  0E87  318D  2599  318E   	fcall	_DLYDelay_ms
  5291                           
  5292                           ;LED.c: 47: PORTCbits.RC7=1;
  5293  0E8A  0020               	movlb	0	; select bank0
  5294  0E8B  178E               	bsf	14,7	;volatile
  5295                           
  5296                           ;LED.c: 48: DLYDelay_ms(5);
  5297  0E8C  3005               	movlw	5
  5298  0E8D  00F1               	movwf	?_DLYDelay_ms
  5299  0E8E  3000               	movlw	0
  5300  0E8F  00F2               	movwf	?_DLYDelay_ms+1
  5301  0E90  318D  2599  318E   	fcall	_DLYDelay_ms
  5302  0E93  3001               	movlw	1
  5303  0E94  00F7               	movwf	??_LEDFastFlash
  5304  0E95  0877               	movf	??_LEDFastFlash,w
  5305  0E96  07F9               	addwf	LEDFastFlash@i,f
  5306  0E97  2E7C               	goto	l3537
  5307  0E98                     __end_of_LEDFastFlash:	
  5308                           
  5309                           	psect	text28
  5310  06D7                     __ptext28:	
  5311 ;; *************** function _ADCGetTempCCal *****************
  5312 ;; Defined at:
  5313 ;;		line 138 in file "ADC.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;		None
  5318 ;; Return value:  Size  Location     Type
  5319 ;;                  3   48[BANK0 ] float 
  5320 ;; Registers used:
  5321 ;;		wreg, status,2, status,0, pclath, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5327 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;Total ram usage:        3 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    4
  5334 ;; This function calls:
  5335 ;;		___ftadd
  5336 ;;		___ftge
  5337 ;; This function is called by:
  5338 ;;		_RTXSendData
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _ADCGetTempCCal
  5344  06D7                     _ADCGetTempCCal:	
  5345                           
  5346                           ;ADC.c: 139: if(battV>=3)
  5347                           
  5348                           ;incstack = 0
  5349                           ; Regs used in _ADCGetTempCCal: [wreg+status,2+status,0+pclath+cstack]
  5350  06D7  0021               	movlb	1	; select bank1
  5351  06D8  0820               	movf	_battV^(0+128),w
  5352  06D9  00F1               	movwf	?___ftge
  5353  06DA  0821               	movf	(_battV+1)^(0+128),w
  5354  06DB  00F2               	movwf	?___ftge+1
  5355  06DC  0822               	movf	(_battV+2)^(0+128),w
  5356  06DD  00F3               	movwf	?___ftge+2
  5357  06DE  3000               	movlw	0
  5358  06DF  00F4               	movwf	?___ftge+3
  5359  06E0  3040               	movlw	64
  5360  06E1  00F5               	movwf	?___ftge+4
  5361  06E2  3040               	movlw	64
  5362  06E3  00F6               	movwf	?___ftge+5
  5363  06E4  3187  2723  3186   	fcall	___ftge
  5364  06E7  1C03               	btfss	3,0
  5365  06E8  2F06               	goto	l3463
  5366                           
  5367                           ;ADC.c: 140: return (tempC+-108);
  5368  06E9  3000               	movlw	0
  5369  06EA  0020               	movlb	0	; select bank0
  5370  06EB  00C3               	movwf	?___ftadd
  5371  06EC  30D8               	movlw	216
  5372  06ED  00C4               	movwf	?___ftadd+1
  5373  06EE  30C2               	movlw	194
  5374  06EF  00C5               	movwf	?___ftadd+2
  5375  06F0  0021               	movlb	1	; select bank1
  5376  06F1  0823               	movf	_tempC^(0+128),w
  5377  06F2  0020               	movlb	0	; select bank0
  5378  06F3  00C6               	movwf	?___ftadd+3
  5379  06F4  0021               	movlb	1	; select bank1
  5380  06F5  0824               	movf	(_tempC+1)^(0+128),w
  5381  06F6  0020               	movlb	0	; select bank0
  5382  06F7  00C7               	movwf	?___ftadd+4
  5383  06F8  0021               	movlb	1	; select bank1
  5384  06F9  0825               	movf	(_tempC+2)^(0+128),w
  5385  06FA  0020               	movlb	0	; select bank0
  5386  06FB  00C8               	movwf	?___ftadd+5
  5387  06FC  3181  218D         	fcall	___ftadd
  5388  06FE  0020               	movlb	0	; select bank0
  5389  06FF  0843               	movf	?___ftadd,w
  5390  0700  00D0               	movwf	?_ADCGetTempCCal
  5391  0701  0844               	movf	?___ftadd+1,w
  5392  0702  00D1               	movwf	?_ADCGetTempCCal+1
  5393  0703  0845               	movf	?___ftadd+2,w
  5394  0704  00D2               	movwf	?_ADCGetTempCCal+2
  5395  0705  0008               	return
  5396  0706                     l3463:	
  5397                           
  5398                           ;ADC.c: 141: else
  5399                           ;ADC.c: 142: return (tempC+-102);
  5400  0706  3000               	movlw	0
  5401  0707  0020               	movlb	0	; select bank0
  5402  0708  00C3               	movwf	?___ftadd
  5403  0709  30CC               	movlw	204
  5404  070A  00C4               	movwf	?___ftadd+1
  5405  070B  30C2               	movlw	194
  5406  070C  00C5               	movwf	?___ftadd+2
  5407  070D  0021               	movlb	1	; select bank1
  5408  070E  0823               	movf	_tempC^(0+128),w
  5409  070F  0020               	movlb	0	; select bank0
  5410  0710  00C6               	movwf	?___ftadd+3
  5411  0711  0021               	movlb	1	; select bank1
  5412  0712  0824               	movf	(_tempC+1)^(0+128),w
  5413  0713  0020               	movlb	0	; select bank0
  5414  0714  00C7               	movwf	?___ftadd+4
  5415  0715  0021               	movlb	1	; select bank1
  5416  0716  0825               	movf	(_tempC+2)^(0+128),w
  5417  0717  0020               	movlb	0	; select bank0
  5418  0718  00C8               	movwf	?___ftadd+5
  5419  0719  3181  218D         	fcall	___ftadd
  5420  071B  0020               	movlb	0	; select bank0
  5421  071C  0843               	movf	?___ftadd,w
  5422  071D  00D0               	movwf	?_ADCGetTempCCal
  5423  071E  0844               	movf	?___ftadd+1,w
  5424  071F  00D1               	movwf	?_ADCGetTempCCal+1
  5425  0720  0845               	movf	?___ftadd+2,w
  5426  0721  00D2               	movwf	?_ADCGetTempCCal+2
  5427  0722  0008               	return
  5428  0723                     __end_of_ADCGetTempCCal:	
  5429                           
  5430                           	psect	text29
  5431  0723                     __ptext29:	
  5432 ;; *************** function ___ftge *****************
  5433 ;; Defined at:
  5434 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftge.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  ff1             3    1[COMMON] float 
  5437 ;;  ff2             3    4[COMMON] float 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;		None
  5440 ;; Return value:  Size  Location     Type
  5441 ;;		None               void
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0
  5444 ;; Tracked objects:
  5445 ;;		On entry : 0/0
  5446 ;;		On exit  : 0/0
  5447 ;;		Unchanged: 0/0
  5448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5449 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;Total ram usage:        9 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    2
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_ADCGetTempCCal
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           
  5464                           ;psect for function ___ftge
  5465  0723                     ___ftge:	
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5469  0723  1FF3               	btfss	___ftge@ff1+2,7
  5470  0724  2F39               	goto	l3251
  5471  0725  0971               	comf	___ftge@ff1,w
  5472  0726  00F7               	movwf	??___ftge
  5473  0727  0972               	comf	___ftge@ff1+1,w
  5474  0728  00F8               	movwf	??___ftge+1
  5475  0729  0973               	comf	___ftge@ff1+2,w
  5476  072A  00F9               	movwf	??___ftge+2
  5477  072B  0AF7               	incf	??___ftge,f
  5478  072C  1903               	skipnz
  5479  072D  0AF8               	incf	??___ftge+1,f
  5480  072E  1903               	skipnz
  5481  072F  0AF9               	incf	??___ftge+2,f
  5482  0730  3000               	movlw	0
  5483  0731  0777               	addwf	??___ftge,w
  5484  0732  00F1               	movwf	___ftge@ff1
  5485  0733  3000               	movlw	0
  5486  0734  3D78               	addwfc	??___ftge+1,w
  5487  0735  00F2               	movwf	___ftge@ff1+1
  5488  0736  3080               	movlw	128
  5489  0737  3D79               	addwfc	??___ftge+2,w
  5490  0738  00F3               	movwf	___ftge@ff1+2
  5491  0739                     l3251:	
  5492  0739  1FF6               	btfss	___ftge@ff2+2,7
  5493  073A  2F4F               	goto	l3255
  5494  073B  0974               	comf	___ftge@ff2,w
  5495  073C  00F7               	movwf	??___ftge
  5496  073D  0975               	comf	___ftge@ff2+1,w
  5497  073E  00F8               	movwf	??___ftge+1
  5498  073F  0976               	comf	___ftge@ff2+2,w
  5499  0740  00F9               	movwf	??___ftge+2
  5500  0741  0AF7               	incf	??___ftge,f
  5501  0742  1903               	skipnz
  5502  0743  0AF8               	incf	??___ftge+1,f
  5503  0744  1903               	skipnz
  5504  0745  0AF9               	incf	??___ftge+2,f
  5505  0746  3000               	movlw	0
  5506  0747  0777               	addwf	??___ftge,w
  5507  0748  00F4               	movwf	___ftge@ff2
  5508  0749  3000               	movlw	0
  5509  074A  3D78               	addwfc	??___ftge+1,w
  5510  074B  00F5               	movwf	___ftge@ff2+1
  5511  074C  3080               	movlw	128
  5512  074D  3D79               	addwfc	??___ftge+2,w
  5513  074E  00F6               	movwf	___ftge@ff2+2
  5514  074F                     l3255:	
  5515  074F  3080               	movlw	128
  5516  0750  06F3               	xorwf	___ftge@ff1+2,f
  5517  0751  3080               	movlw	128
  5518  0752  06F6               	xorwf	___ftge@ff2+2,f
  5519  0753  0876               	movf	___ftge@ff2+2,w
  5520  0754  0273               	subwf	___ftge@ff1+2,w
  5521  0755  1D03               	skipz
  5522  0756  0008               	return
  5523  0757  0875               	movf	___ftge@ff2+1,w
  5524  0758  0272               	subwf	___ftge@ff1+1,w
  5525  0759  1D03               	skipz
  5526  075A  0008               	return
  5527  075B  0874               	movf	___ftge@ff2,w
  5528  075C  0271               	subwf	___ftge@ff1,w
  5529  075D  0008               	return
  5530  075E                     __end_of___ftge:	
  5531                           
  5532                           	psect	text30
  5533  0041                     __ptext30:	
  5534 ;; *************** function _ADCConv *****************
  5535 ;; Defined at:
  5536 ;;		line 48 in file "ADC.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;  sumTemp         2   52[BANK0 ] unsigned short 
  5541 ;;  sumBatt         2   50[BANK0 ] unsigned short 
  5542 ;;  cntSum          1   57[BANK0 ] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;		None               void
  5545 ;; Registers used:
  5546 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;Total ram usage:       10 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    4
  5559 ;; This function calls:
  5560 ;;		___awtoft
  5561 ;;		___ftadd
  5562 ;;		___ftdiv
  5563 ;;		___ftmul
  5564 ;;		___lwdiv
  5565 ;; This function is called by:
  5566 ;;		_RTXStartSendData
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           
  5571                           ;psect for function _ADCConv
  5572  0041                     _ADCConv:	
  5573                           
  5574                           ;ADC.c: 49: unsigned short sumBatt=0,sumTemp=0;
  5575                           
  5576                           ;incstack = 0
  5577                           ; Regs used in _ADCConv: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5578  0041  0020               	movlb	0	; select bank0
  5579  0042  01D2               	clrf	ADCConv@sumBatt
  5580  0043  01D3               	clrf	ADCConv@sumBatt+1
  5581  0044  01D4               	clrf	ADCConv@sumTemp
  5582  0045  01D5               	clrf	ADCConv@sumTemp+1
  5583                           
  5584                           ;ADC.c: 50: unsigned char cntSum=0;
  5585  0046  01D9               	clrf	ADCConv@cntSum
  5586                           
  5587                           ;ADC.c: 53: {
  5588                           ;ADC.c: 55: switch(adc_ch)
  5589                           
  5590                           ;ADC.c: 52: while(1)
  5591  0047  297F               	goto	l3453
  5592  0048                     l116:	
  5593                           ;ADC.c: 56: {
  5594                           ;ADC.c: 57: case ADC_CH_BATT:
  5595                           
  5596                           
  5597                           ;ADC.c: 59: PORTBbits.RB5=1;
  5598  0048  0020               	movlb	0	; select bank0
  5599  0049  168D               	bsf	13,5	;volatile
  5600                           
  5601                           ;ADC.c: 61: if(cntSum==10)
  5602  004A  0859               	movf	ADCConv@cntSum,w
  5603  004B  3A0A               	xorlw	10
  5604  004C  1D03               	skipz
  5605  004D  28BB               	goto	l3417
  5606                           
  5607                           ;ADC.c: 62: {
  5608                           ;ADC.c: 64: batt=sumBatt/10;
  5609  004E  300A               	movlw	10
  5610  004F  00F1               	movwf	?___lwdiv
  5611  0050  3000               	movlw	0
  5612  0051  00F2               	movwf	?___lwdiv+1
  5613  0052  0853               	movf	ADCConv@sumBatt+1,w
  5614  0053  01F4               	clrf	?___lwdiv+3
  5615  0054  07F4               	addwf	?___lwdiv+3,f
  5616  0055  0852               	movf	ADCConv@sumBatt,w
  5617  0056  01F3               	clrf	?___lwdiv+2
  5618  0057  07F3               	addwf	?___lwdiv+2,f
  5619  0058  3187  275E  3180   	fcall	___lwdiv
  5620  005B  0871               	movf	?___lwdiv,w
  5621  005C  0020               	movlb	0	; select bank0
  5622  005D  00D0               	movwf	??_ADCConv
  5623  005E  0850               	movf	??_ADCConv,w
  5624  005F  00E9               	movwf	_batt
  5625                           
  5626                           ;ADC.c: 70: battV=batt*4*1.024/1024*11;
  5627  0060  3000               	movlw	0
  5628  0061  00B3               	movwf	?___ftdiv
  5629  0062  3080               	movlw	128
  5630  0063  00B4               	movwf	?___ftdiv+1
  5631  0064  3044               	movlw	68
  5632  0065  00B5               	movwf	?___ftdiv+2
  5633  0066  3012               	movlw	18
  5634  0067  00A3               	movwf	?___ftmul
  5635  0068  3083               	movlw	131
  5636  0069  00A4               	movwf	?___ftmul+1
  5637  006A  303F               	movlw	63
  5638  006B  00A5               	movwf	?___ftmul+2
  5639  006C  0869               	movf	_batt,w
  5640  006D  00D0               	movwf	??_ADCConv
  5641  006E  01D1               	clrf	??_ADCConv+1
  5642  006F  35D0               	lslf	??_ADCConv,f
  5643  0070  0DD1               	rlf	??_ADCConv+1,f
  5644  0071  35D0               	lslf	??_ADCConv,f
  5645  0072  0DD1               	rlf	??_ADCConv+1,f
  5646  0073  0850               	movf	??_ADCConv,w
  5647  0074  00F9               	movwf	?___awtoft
  5648  0075  0851               	movf	??_ADCConv+1,w
  5649  0076  00FA               	movwf	?___awtoft+1
  5650  0077  318E  26D8  3180   	fcall	___awtoft
  5651  007A  0879               	movf	?___awtoft,w
  5652  007B  0020               	movlb	0	; select bank0
  5653  007C  00A6               	movwf	?___ftmul+3
  5654  007D  087A               	movf	?___awtoft+1,w
  5655  007E  00A7               	movwf	?___ftmul+4
  5656  007F  087B               	movf	?___awtoft+2,w
  5657  0080  00A8               	movwf	?___ftmul+5
  5658  0081  3183  2341  3180   	fcall	___ftmul
  5659  0084  0020               	movlb	0	; select bank0
  5660  0085  0823               	movf	?___ftmul,w
  5661  0086  00B6               	movwf	?___ftdiv+3
  5662  0087  0824               	movf	?___ftmul+1,w
  5663  0088  00B7               	movwf	?___ftdiv+4
  5664  0089  0825               	movf	?___ftmul+2,w
  5665  008A  00B8               	movwf	?___ftdiv+5
  5666  008B  3183  23F5  3180   	fcall	___ftdiv
  5667  008E  0020               	movlb	0	; select bank0
  5668  008F  0833               	movf	?___ftdiv,w
  5669  0090  00D6               	movwf	_ADCConv$1374
  5670  0091  0834               	movf	?___ftdiv+1,w
  5671  0092  00D7               	movwf	_ADCConv$1374+1
  5672  0093  0835               	movf	?___ftdiv+2,w
  5673  0094  00D8               	movwf	_ADCConv$1374+2
  5674                           
  5675                           ;ADC.c: 70: battV=batt*4*1.024/1024*11;
  5676  0095  3000               	movlw	0
  5677  0096  00A3               	movwf	?___ftmul
  5678  0097  3030               	movlw	48
  5679  0098  00A4               	movwf	?___ftmul+1
  5680  0099  3041               	movlw	65
  5681  009A  00A5               	movwf	?___ftmul+2
  5682  009B  0856               	movf	_ADCConv$1374,w
  5683  009C  00A6               	movwf	?___ftmul+3
  5684  009D  0857               	movf	_ADCConv$1374+1,w
  5685  009E  00A7               	movwf	?___ftmul+4
  5686  009F  0858               	movf	_ADCConv$1374+2,w
  5687  00A0  00A8               	movwf	?___ftmul+5
  5688  00A1  3183  2341  3180   	fcall	___ftmul
  5689  00A4  0020               	movlb	0	; select bank0
  5690  00A5  0823               	movf	?___ftmul,w
  5691  00A6  0021               	movlb	1	; select bank1
  5692  00A7  00A0               	movwf	_battV^(0+128)
  5693  00A8  0020               	movlb	0	; select bank0
  5694  00A9  0824               	movf	?___ftmul+1,w
  5695  00AA  0021               	movlb	1	; select bank1
  5696  00AB  00A1               	movwf	(_battV+1)^(0+128)
  5697  00AC  0020               	movlb	0	; select bank0
  5698  00AD  0825               	movf	?___ftmul+2,w
  5699  00AE  0021               	movlb	1	; select bank1
  5700  00AF  00A2               	movwf	(_battV+2)^(0+128)
  5701                           
  5702                           ;ADC.c: 72: sumBatt=0;
  5703  00B0  0020               	movlb	0	; select bank0
  5704  00B1  01D2               	clrf	ADCConv@sumBatt
  5705  00B2  01D3               	clrf	ADCConv@sumBatt+1
  5706                           
  5707                           ;ADC.c: 74: cntSum=0;
  5708  00B3  01D9               	clrf	ADCConv@cntSum
  5709                           
  5710                           ;ADC.c: 76: ADCON1=0b00000000;
  5711  00B4  0021               	movlb	1	; select bank1
  5712  00B5  019E               	clrf	30	;volatile
  5713                           
  5714                           ;ADC.c: 77: ADCON0=0b00101001;
  5715  00B6  3029               	movlw	41
  5716  00B7  009D               	movwf	29	;volatile
  5717                           
  5718                           ;ADC.c: 78: adc_ch=ADC_CH_TEMP;
  5719  00B8  01A8               	clrf	_adc_ch^(0+128)
  5720  00B9  0AA8               	incf	_adc_ch^(0+128),f
  5721                           
  5722                           ;ADC.c: 79: }
  5723  00BA  28C8               	goto	l3421
  5724  00BB                     l3417:	
  5725                           
  5726                           ;ADC.c: 80: else
  5727                           ;ADC.c: 81: {
  5728                           ;ADC.c: 83: sumBatt+=ADRESH;
  5729  00BB  0021               	movlb	1	; select bank1
  5730  00BC  081C               	movf	28,w	;volatile
  5731  00BD  0020               	movlb	0	; select bank0
  5732  00BE  00D0               	movwf	??_ADCConv
  5733  00BF  01D1               	clrf	??_ADCConv+1
  5734  00C0  0850               	movf	??_ADCConv,w
  5735  00C1  07D2               	addwf	ADCConv@sumBatt,f
  5736  00C2  0851               	movf	??_ADCConv+1,w
  5737  00C3  3DD3               	addwfc	ADCConv@sumBatt+1,f
  5738                           
  5739                           ;ADC.c: 85: cntSum++;
  5740  00C4  3001               	movlw	1
  5741  00C5  00D0               	movwf	??_ADCConv
  5742  00C6  0850               	movf	??_ADCConv,w
  5743  00C7  07D9               	addwf	ADCConv@cntSum,f
  5744  00C8                     l3421:	
  5745                           
  5746                           ;ADC.c: 86: }
  5747                           ;ADC.c: 88: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5748  00C8  3006               	movlw	6
  5749  00C9  0020               	movlb	0	; select bank0
  5750  00CA  00D0               	movwf	??_ADCConv
  5751  00CB                     u3617:	
  5752  00CB  0BD0               	decfsz	??_ADCConv,f
  5753  00CC  28CB               	goto	u3617
  5754  00CD  0000               	nop
  5755  00CE  297C               	goto	l3449
  5756  00CF                     l120:	
  5757                           ;ADC.c: 92: case ADC_CH_TEMP:
  5758                           
  5759                           ;ADC.c: 91: break;
  5760                           
  5761                           ;ADC.c: 90: ADCON0bits.GO=1;
  5762                           
  5763                           
  5764                           ;ADC.c: 94: PORTBbits.RB5=0;
  5765  00CF  0020               	movlb	0	; select bank0
  5766  00D0  128D               	bcf	13,5	;volatile
  5767                           
  5768                           ;ADC.c: 96: if(cntSum==10)
  5769  00D1  0859               	movf	ADCConv@cntSum,w
  5770  00D2  3A0A               	xorlw	10
  5771  00D3  1D03               	skipz
  5772  00D4  2969               	goto	l3443
  5773                           
  5774                           ;ADC.c: 97: {
  5775                           ;ADC.c: 99: temp=sumTemp/10;
  5776  00D5  300A               	movlw	10
  5777  00D6  00F1               	movwf	?___lwdiv
  5778  00D7  3000               	movlw	0
  5779  00D8  00F2               	movwf	?___lwdiv+1
  5780  00D9  0855               	movf	ADCConv@sumTemp+1,w
  5781  00DA  01F4               	clrf	?___lwdiv+3
  5782  00DB  07F4               	addwf	?___lwdiv+3,f
  5783  00DC  0854               	movf	ADCConv@sumTemp,w
  5784  00DD  01F3               	clrf	?___lwdiv+2
  5785  00DE  07F3               	addwf	?___lwdiv+2,f
  5786  00DF  3187  275E  3180   	fcall	___lwdiv
  5787  00E2  0871               	movf	?___lwdiv,w
  5788  00E3  0020               	movlb	0	; select bank0
  5789  00E4  00D0               	movwf	??_ADCConv
  5790  00E5  0850               	movf	??_ADCConv,w
  5791  00E6  0021               	movlb	1	; select bank1
  5792  00E7  00AD               	movwf	_temp^(0+128)
  5793                           
  5794                           ;ADC.c: 106: tempC=((temp*4)*(battV/1024)*1000-747)/2.47;
  5795  00E8  0820               	movf	_battV^(0+128),w
  5796  00E9  0020               	movlb	0	; select bank0
  5797  00EA  00B6               	movwf	?___ftdiv+3
  5798  00EB  0021               	movlb	1	; select bank1
  5799  00EC  0821               	movf	(_battV+1)^(0+128),w
  5800  00ED  0020               	movlb	0	; select bank0
  5801  00EE  00B7               	movwf	?___ftdiv+4
  5802  00EF  0021               	movlb	1	; select bank1
  5803  00F0  0822               	movf	(_battV+2)^(0+128),w
  5804  00F1  0020               	movlb	0	; select bank0
  5805  00F2  00B8               	movwf	?___ftdiv+5
  5806  00F3  3000               	movlw	0
  5807  00F4  00B3               	movwf	?___ftdiv
  5808  00F5  3080               	movlw	128
  5809  00F6  00B4               	movwf	?___ftdiv+1
  5810  00F7  3044               	movlw	68
  5811  00F8  00B5               	movwf	?___ftdiv+2
  5812  00F9  3183  23F5  3180   	fcall	___ftdiv
  5813  00FC  0020               	movlb	0	; select bank0
  5814  00FD  0833               	movf	?___ftdiv,w
  5815  00FE  00A3               	movwf	?___ftmul
  5816  00FF  0834               	movf	?___ftdiv+1,w
  5817  0100  00A4               	movwf	?___ftmul+1
  5818  0101  0835               	movf	?___ftdiv+2,w
  5819  0102  00A5               	movwf	?___ftmul+2
  5820  0103  0021               	movlb	1	; select bank1
  5821  0104  082D               	movf	_temp^(0+128),w
  5822  0105  0020               	movlb	0	; select bank0
  5823  0106  00D0               	movwf	??_ADCConv
  5824  0107  01D1               	clrf	??_ADCConv+1
  5825  0108  35D0               	lslf	??_ADCConv,f
  5826  0109  0DD1               	rlf	??_ADCConv+1,f
  5827  010A  35D0               	lslf	??_ADCConv,f
  5828  010B  0DD1               	rlf	??_ADCConv+1,f
  5829  010C  0850               	movf	??_ADCConv,w
  5830  010D  00F9               	movwf	?___awtoft
  5831  010E  0851               	movf	??_ADCConv+1,w
  5832  010F  00FA               	movwf	?___awtoft+1
  5833  0110  318E  26D8  3180   	fcall	___awtoft
  5834  0113  0879               	movf	?___awtoft,w
  5835  0114  0020               	movlb	0	; select bank0
  5836  0115  00A6               	movwf	?___ftmul+3
  5837  0116  087A               	movf	?___awtoft+1,w
  5838  0117  00A7               	movwf	?___ftmul+4
  5839  0118  087B               	movf	?___awtoft+2,w
  5840  0119  00A8               	movwf	?___ftmul+5
  5841  011A  3183  2341  3180   	fcall	___ftmul
  5842  011D  0020               	movlb	0	; select bank0
  5843  011E  0823               	movf	?___ftmul,w
  5844  011F  00D6               	movwf	_ADCConv$1374
  5845  0120  0824               	movf	?___ftmul+1,w
  5846  0121  00D7               	movwf	_ADCConv$1374+1
  5847  0122  0825               	movf	?___ftmul+2,w
  5848  0123  00D8               	movwf	_ADCConv$1374+2
  5849                           
  5850                           ;ADC.c: 106: tempC=((temp*4)*(battV/1024)*1000-747)/2.47;
  5851  0124  3014               	movlw	20
  5852  0125  00B3               	movwf	?___ftdiv
  5853  0126  301E               	movlw	30
  5854  0127  00B4               	movwf	?___ftdiv+1
  5855  0128  3040               	movlw	64
  5856  0129  00B5               	movwf	?___ftdiv+2
  5857  012A  30C0               	movlw	192
  5858  012B  00C3               	movwf	?___ftadd
  5859  012C  303A               	movlw	58
  5860  012D  00C4               	movwf	?___ftadd+1
  5861  012E  30C4               	movlw	196
  5862  012F  00C5               	movwf	?___ftadd+2
  5863  0130  3000               	movlw	0
  5864  0131  00A3               	movwf	?___ftmul
  5865  0132  307A               	movlw	122
  5866  0133  00A4               	movwf	?___ftmul+1
  5867  0134  3044               	movlw	68
  5868  0135  00A5               	movwf	?___ftmul+2
  5869  0136  0856               	movf	_ADCConv$1374,w
  5870  0137  00A6               	movwf	?___ftmul+3
  5871  0138  0857               	movf	_ADCConv$1374+1,w
  5872  0139  00A7               	movwf	?___ftmul+4
  5873  013A  0858               	movf	_ADCConv$1374+2,w
  5874  013B  00A8               	movwf	?___ftmul+5
  5875  013C  3183  2341  3180   	fcall	___ftmul
  5876  013F  0020               	movlb	0	; select bank0
  5877  0140  0823               	movf	?___ftmul,w
  5878  0141  00C6               	movwf	?___ftadd+3
  5879  0142  0824               	movf	?___ftmul+1,w
  5880  0143  00C7               	movwf	?___ftadd+4
  5881  0144  0825               	movf	?___ftmul+2,w
  5882  0145  00C8               	movwf	?___ftadd+5
  5883  0146  3181  218D  3180   	fcall	___ftadd
  5884  0149  0020               	movlb	0	; select bank0
  5885  014A  0843               	movf	?___ftadd,w
  5886  014B  00B6               	movwf	?___ftdiv+3
  5887  014C  0844               	movf	?___ftadd+1,w
  5888  014D  00B7               	movwf	?___ftdiv+4
  5889  014E  0845               	movf	?___ftadd+2,w
  5890  014F  00B8               	movwf	?___ftdiv+5
  5891  0150  3183  23F5         	fcall	___ftdiv
  5892  0152  0020               	movlb	0	; select bank0
  5893  0153  0833               	movf	?___ftdiv,w
  5894  0154  0021               	movlb	1	; select bank1
  5895  0155  00A3               	movwf	_tempC^(0+128)
  5896  0156  0020               	movlb	0	; select bank0
  5897  0157  0834               	movf	?___ftdiv+1,w
  5898  0158  0021               	movlb	1	; select bank1
  5899  0159  00A4               	movwf	(_tempC+1)^(0+128)
  5900  015A  0020               	movlb	0	; select bank0
  5901  015B  0835               	movf	?___ftdiv+2,w
  5902  015C  0021               	movlb	1	; select bank1
  5903  015D  00A5               	movwf	(_tempC+2)^(0+128)
  5904                           
  5905                           ;ADC.c: 108: sumTemp=0;
  5906  015E  0020               	movlb	0	; select bank0
  5907  015F  01D4               	clrf	ADCConv@sumTemp
  5908  0160  01D5               	clrf	ADCConv@sumTemp+1
  5909                           
  5910                           ;ADC.c: 110: cntSum=0;
  5911  0161  01D9               	clrf	ADCConv@cntSum
  5912                           
  5913                           ;ADC.c: 112: ADCON1=0b00000011;
  5914  0162  3003               	movlw	3
  5915  0163  0021               	movlb	1	; select bank1
  5916  0164  009E               	movwf	30	;volatile
  5917                           
  5918                           ;ADC.c: 113: ADCON0=0b00101101;
  5919  0165  302D               	movlw	45
  5920  0166  009D               	movwf	29	;volatile
  5921                           
  5922                           ;ADC.c: 114: adc_ch=ADC_CH_BATT;
  5923  0167  01A8               	clrf	_adc_ch^(0+128)
  5924                           
  5925                           ;ADC.c: 116: return;
  5926  0168  0008               	return
  5927  0169                     l3443:	
  5928                           ;ADC.c: 117: }
  5929                           
  5930                           
  5931                           ;ADC.c: 118: else
  5932                           ;ADC.c: 119: {
  5933                           ;ADC.c: 121: sumTemp+=ADRESH;
  5934  0169  0021               	movlb	1	; select bank1
  5935  016A  081C               	movf	28,w	;volatile
  5936  016B  0020               	movlb	0	; select bank0
  5937  016C  00D0               	movwf	??_ADCConv
  5938  016D  01D1               	clrf	??_ADCConv+1
  5939  016E  0850               	movf	??_ADCConv,w
  5940  016F  07D4               	addwf	ADCConv@sumTemp,f
  5941  0170  0851               	movf	??_ADCConv+1,w
  5942  0171  3DD5               	addwfc	ADCConv@sumTemp+1,f
  5943                           
  5944                           ;ADC.c: 123: cntSum++;
  5945  0172  3001               	movlw	1
  5946  0173  00D0               	movwf	??_ADCConv
  5947  0174  0850               	movf	??_ADCConv,w
  5948  0175  07D9               	addwf	ADCConv@cntSum,f
  5949                           
  5950                           ;ADC.c: 124: }
  5951                           ;ADC.c: 126: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5952  0176  3006               	movlw	6
  5953  0177  0020               	movlb	0	; select bank0
  5954  0178  00D0               	movwf	??_ADCConv
  5955  0179                     u3627:	
  5956  0179  0BD0               	decfsz	??_ADCConv,f
  5957  017A  2979               	goto	u3627
  5958  017B  0000               	nop
  5959  017C                     l3449:	
  5960                           
  5961                           ;ADC.c: 128: ADCON0bits.GO=1;
  5962  017C  0021               	movlb	1	; select bank1
  5963  017D  149D               	bsf	29,1	;volatile
  5964                           
  5965                           ;ADC.c: 130: }
  5966                           
  5967                           ;ADC.c: 129: break;
  5968  017E  2988               	goto	l124
  5969  017F                     l3453:	
  5970  017F  0021               	movlb	1	; select bank1
  5971  0180  0828               	movf	_adc_ch^(0+128),w
  5972                           
  5973                           ; Switch size 1, requested type "space"
  5974                           ; Number of cases is 2, Range of values is 0 to 1
  5975                           ; switch strategies available:
  5976                           ; Name         Instructions Cycles
  5977                           ; simple_byte            7     4 (average)
  5978                           ; direct_byte           10     6 (fixed)
  5979                           ; jumptable            260     6 (fixed)
  5980                           ;	Chosen strategy is simple_byte
  5981  0181  3A00               	xorlw	0	; case 0
  5982  0182  1903               	skipnz
  5983  0183  2848               	goto	l116
  5984  0184  3A01               	xorlw	1	; case 1
  5985  0185  1903               	skipnz
  5986  0186  28CF               	goto	l120
  5987  0187  2988               	goto	l124
  5988  0188                     l124:	
  5989                           ;ADC.c: 132: while(ADCON0bits.GO)
  5990                           
  5991  0188  0021               	movlb	1	; select bank1
  5992  0189  1C9D               	btfss	29,1	;volatile
  5993  018A  297F               	goto	l3453
  5994  018B  0064               	clrwdt	;# 
  5995  018C  2988               	goto	l124
  5996  018D                     __end_of_ADCConv:	
  5997                           
  5998                           	psect	text31
  5999  075E                     __ptext31:	
  6000 ;; *************** function ___lwdiv *****************
  6001 ;; Defined at:
  6002 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  divisor         2    1[COMMON] unsigned int 
  6005 ;;  dividend        2    3[COMMON] unsigned int 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  quotient        2    6[COMMON] unsigned int 
  6008 ;;  counter         1    8[COMMON] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  2    1[COMMON] unsigned int 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:        8 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    2
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		_ADCConv
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           
  6033                           ;psect for function ___lwdiv
  6034  075E                     ___lwdiv:	
  6035                           
  6036                           ;incstack = 0
  6037                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6038  075E  01F6               	clrf	___lwdiv@quotient
  6039  075F  01F7               	clrf	___lwdiv@quotient+1
  6040  0760  0872               	movf	___lwdiv@divisor+1,w
  6041  0761  0471               	iorwf	___lwdiv@divisor,w
  6042  0762  1903               	skipnz
  6043  0763  2F8D               	goto	l3339
  6044  0764  01F8               	clrf	___lwdiv@counter
  6045  0765  0AF8               	incf	___lwdiv@counter,f
  6046  0766                     l3327:	
  6047  0766  1BF2               	btfsc	___lwdiv@divisor+1,7
  6048  0767  2F72               	goto	l3329
  6049  0768  3001               	movlw	1
  6050  0769                     u2585:	
  6051  0769  35F1               	lslf	___lwdiv@divisor,f
  6052  076A  0DF2               	rlf	___lwdiv@divisor+1,f
  6053  076B  0B89               	decfsz	9,f
  6054  076C  2F69               	goto	u2585
  6055  076D  3001               	movlw	1
  6056  076E  00F5               	movwf	??___lwdiv
  6057  076F  0875               	movf	??___lwdiv,w
  6058  0770  07F8               	addwf	___lwdiv@counter,f
  6059  0771  2F66               	goto	l3327
  6060  0772                     l3329:	
  6061  0772  3001               	movlw	1
  6062  0773                     u2605:	
  6063  0773  35F6               	lslf	___lwdiv@quotient,f
  6064  0774  0DF7               	rlf	___lwdiv@quotient+1,f
  6065  0775  0B89               	decfsz	9,f
  6066  0776  2F73               	goto	u2605
  6067  0777  0872               	movf	___lwdiv@divisor+1,w
  6068  0778  0274               	subwf	___lwdiv@dividend+1,w
  6069  0779  1D03               	skipz
  6070  077A  2F7D               	goto	u2615
  6071  077B  0871               	movf	___lwdiv@divisor,w
  6072  077C  0273               	subwf	___lwdiv@dividend,w
  6073  077D                     u2615:	
  6074  077D  1C03               	skipc
  6075  077E  2F84               	goto	l3335
  6076  077F  0871               	movf	___lwdiv@divisor,w
  6077  0780  02F3               	subwf	___lwdiv@dividend,f
  6078  0781  0872               	movf	___lwdiv@divisor+1,w
  6079  0782  3BF4               	subwfb	___lwdiv@dividend+1,f
  6080  0783  1476               	bsf	___lwdiv@quotient,0
  6081  0784                     l3335:	
  6082  0784  3001               	movlw	1
  6083  0785                     u2625:	
  6084  0785  36F2               	lsrf	___lwdiv@divisor+1,f
  6085  0786  0CF1               	rrf	___lwdiv@divisor,f
  6086  0787  0B89               	decfsz	9,f
  6087  0788  2F85               	goto	u2625
  6088  0789  3001               	movlw	1
  6089  078A  02F8               	subwf	___lwdiv@counter,f
  6090  078B  1D03               	btfss	3,2
  6091  078C  2F72               	goto	l3329
  6092  078D                     l3339:	
  6093  078D  0877               	movf	___lwdiv@quotient+1,w
  6094  078E  01F2               	clrf	?___lwdiv+1
  6095  078F  07F2               	addwf	?___lwdiv+1,f
  6096  0790  0876               	movf	___lwdiv@quotient,w
  6097  0791  01F1               	clrf	?___lwdiv
  6098  0792  07F1               	addwf	?___lwdiv,f
  6099  0793  0008               	return
  6100  0794                     __end_of___lwdiv:	
  6101                           
  6102                           	psect	text32
  6103  0341                     __ptext32:	
  6104 ;; *************** function ___ftmul *****************
  6105 ;; Defined at:
  6106 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  f1              3    3[BANK0 ] float 
  6109 ;;  f2              3    6[BANK0 ] float 
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;  f3_as_produc    3   14[BANK0 ] unsigned um
  6112 ;;  sign            1   18[BANK0 ] unsigned char 
  6113 ;;  cntr            1   17[BANK0 ] unsigned char 
  6114 ;;  exp             1   13[BANK0 ] unsigned char 
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  3    3[BANK0 ] float 
  6117 ;; Registers used:
  6118 ;;		wreg, status,2, status,0, pclath, cstack
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6124 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;Total ram usage:       16 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; Hardware stack levels required when called:    3
  6131 ;; This function calls:
  6132 ;;		___ftpack
  6133 ;; This function is called by:
  6134 ;;		_ADCConv
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function ___ftmul
  6140  0341                     ___ftmul:	
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6144  0341  0020               	movlb	0	; select bank0
  6145  0342  0823               	movf	___ftmul@f1,w
  6146  0343  00A9               	movwf	??___ftmul
  6147  0344  0824               	movf	___ftmul@f1+1,w
  6148  0345  00AA               	movwf	??___ftmul+1
  6149  0346  0825               	movf	___ftmul@f1+2,w
  6150  0347  00AB               	movwf	??___ftmul+2
  6151  0348  1003               	clrc
  6152  0349  0D2A               	rlf	??___ftmul+1,w
  6153  034A  0D2B               	rlf	??___ftmul+2,w
  6154  034B  00AC               	movwf	??___ftmul+3
  6155  034C  082C               	movf	??___ftmul+3,w
  6156  034D  00AD               	movwf	___ftmul@exp
  6157  034E  08AD               	movf	___ftmul@exp,f
  6158  034F  1D03               	skipz
  6159  0350  2B58               	goto	l4009
  6160  0351  3000               	movlw	0
  6161  0352  00A3               	movwf	?___ftmul
  6162  0353  3000               	movlw	0
  6163  0354  00A4               	movwf	?___ftmul+1
  6164  0355  3000               	movlw	0
  6165  0356  00A5               	movwf	?___ftmul+2
  6166  0357  0008               	return
  6167  0358                     l4009:	
  6168  0358  0826               	movf	___ftmul@f2,w
  6169  0359  00A9               	movwf	??___ftmul
  6170  035A  0827               	movf	___ftmul@f2+1,w
  6171  035B  00AA               	movwf	??___ftmul+1
  6172  035C  0828               	movf	___ftmul@f2+2,w
  6173  035D  00AB               	movwf	??___ftmul+2
  6174  035E  1003               	clrc
  6175  035F  0D2A               	rlf	??___ftmul+1,w
  6176  0360  0D2B               	rlf	??___ftmul+2,w
  6177  0361  00AC               	movwf	??___ftmul+3
  6178  0362  082C               	movf	??___ftmul+3,w
  6179  0363  00B2               	movwf	___ftmul@sign
  6180  0364  08B2               	movf	___ftmul@sign,f
  6181  0365  1D03               	skipz
  6182  0366  2B6E               	goto	l4015
  6183  0367  3000               	movlw	0
  6184  0368  00A3               	movwf	?___ftmul
  6185  0369  3000               	movlw	0
  6186  036A  00A4               	movwf	?___ftmul+1
  6187  036B  3000               	movlw	0
  6188  036C  00A5               	movwf	?___ftmul+2
  6189  036D  0008               	return
  6190  036E                     l4015:	
  6191  036E  0832               	movf	___ftmul@sign,w
  6192  036F  3E7B               	addlw	123
  6193  0370  00A9               	movwf	??___ftmul
  6194  0371  0829               	movf	??___ftmul,w
  6195  0372  07AD               	addwf	___ftmul@exp,f
  6196  0373  0823               	movf	___ftmul@f1,w
  6197  0374  00A9               	movwf	??___ftmul
  6198  0375  0824               	movf	___ftmul@f1+1,w
  6199  0376  00AA               	movwf	??___ftmul+1
  6200  0377  0825               	movf	___ftmul@f1+2,w
  6201  0378  00AB               	movwf	??___ftmul+2
  6202  0379  3010               	movlw	16
  6203  037A                     u3515:	
  6204  037A  36AB               	lsrf	??___ftmul+2,f
  6205  037B  0CAA               	rrf	??___ftmul+1,f
  6206  037C  0CA9               	rrf	??___ftmul,f
  6207  037D  0B89               	decfsz	9,f
  6208  037E  2B7A               	goto	u3515
  6209  037F  0829               	movf	??___ftmul,w
  6210  0380  00AC               	movwf	??___ftmul+3
  6211  0381  082C               	movf	??___ftmul+3,w
  6212  0382  00B2               	movwf	___ftmul@sign
  6213  0383  0826               	movf	___ftmul@f2,w
  6214  0384  00A9               	movwf	??___ftmul
  6215  0385  0827               	movf	___ftmul@f2+1,w
  6216  0386  00AA               	movwf	??___ftmul+1
  6217  0387  0828               	movf	___ftmul@f2+2,w
  6218  0388  00AB               	movwf	??___ftmul+2
  6219  0389  3010               	movlw	16
  6220  038A                     u3525:	
  6221  038A  36AB               	lsrf	??___ftmul+2,f
  6222  038B  0CAA               	rrf	??___ftmul+1,f
  6223  038C  0CA9               	rrf	??___ftmul,f
  6224  038D  0B89               	decfsz	9,f
  6225  038E  2B8A               	goto	u3525
  6226  038F  0829               	movf	??___ftmul,w
  6227  0390  00AC               	movwf	??___ftmul+3
  6228  0391  082C               	movf	??___ftmul+3,w
  6229  0392  06B2               	xorwf	___ftmul@sign,f
  6230  0393  3080               	movlw	128
  6231  0394  00A9               	movwf	??___ftmul
  6232  0395  0829               	movf	??___ftmul,w
  6233  0396  05B2               	andwf	___ftmul@sign,f
  6234  0397  17A4               	bsf	___ftmul@f1+1,7
  6235  0398  17A7               	bsf	___ftmul@f2+1,7
  6236  0399  30FF               	movlw	255
  6237  039A  05A6               	andwf	___ftmul@f2,f
  6238  039B  30FF               	movlw	255
  6239  039C  05A7               	andwf	___ftmul@f2+1,f
  6240  039D  3000               	movlw	0
  6241  039E  05A8               	andwf	___ftmul@f2+2,f
  6242  039F  3000               	movlw	0
  6243  03A0  00AE               	movwf	___ftmul@f3_as_product
  6244  03A1  3000               	movlw	0
  6245  03A2  00AF               	movwf	___ftmul@f3_as_product+1
  6246  03A3  3000               	movlw	0
  6247  03A4  00B0               	movwf	___ftmul@f3_as_product+2
  6248  03A5  3007               	movlw	7
  6249  03A6  00A9               	movwf	??___ftmul
  6250  03A7  0829               	movf	??___ftmul,w
  6251  03A8  00B1               	movwf	___ftmul@cntr
  6252  03A9                     l4027:	
  6253  03A9  1C23               	btfss	___ftmul@f1,0
  6254  03AA  2BB1               	goto	l4031
  6255  03AB  0826               	movf	___ftmul@f2,w
  6256  03AC  07AE               	addwf	___ftmul@f3_as_product,f
  6257  03AD  0827               	movf	___ftmul@f2+1,w
  6258  03AE  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  6259  03AF  0828               	movf	___ftmul@f2+2,w
  6260  03B0  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  6261  03B1                     l4031:	
  6262  03B1  3001               	movlw	1
  6263  03B2                     u3545:	
  6264  03B2  36A5               	lsrf	___ftmul@f1+2,f
  6265  03B3  0CA4               	rrf	___ftmul@f1+1,f
  6266  03B4  0CA3               	rrf	___ftmul@f1,f
  6267  03B5  0B89               	decfsz	9,f
  6268  03B6  2BB2               	goto	u3545
  6269  03B7  3001               	movlw	1
  6270  03B8                     u3555:	
  6271  03B8  35A6               	lslf	___ftmul@f2,f
  6272  03B9  0DA7               	rlf	___ftmul@f2+1,f
  6273  03BA  0DA8               	rlf	___ftmul@f2+2,f
  6274  03BB  0B89               	decfsz	9,f
  6275  03BC  2BB8               	goto	u3555
  6276  03BD  3001               	movlw	1
  6277  03BE  02B1               	subwf	___ftmul@cntr,f
  6278  03BF  1D03               	btfss	3,2
  6279  03C0  2BA9               	goto	l4027
  6280  03C1  3009               	movlw	9
  6281  03C2  00A9               	movwf	??___ftmul
  6282  03C3  0829               	movf	??___ftmul,w
  6283  03C4  00B1               	movwf	___ftmul@cntr
  6284  03C5                     l4039:	
  6285  03C5  1C23               	btfss	___ftmul@f1,0
  6286  03C6  2BCD               	goto	l4043
  6287  03C7  0826               	movf	___ftmul@f2,w
  6288  03C8  07AE               	addwf	___ftmul@f3_as_product,f
  6289  03C9  0827               	movf	___ftmul@f2+1,w
  6290  03CA  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  6291  03CB  0828               	movf	___ftmul@f2+2,w
  6292  03CC  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  6293  03CD                     l4043:	
  6294  03CD  3001               	movlw	1
  6295  03CE                     u3585:	
  6296  03CE  36A5               	lsrf	___ftmul@f1+2,f
  6297  03CF  0CA4               	rrf	___ftmul@f1+1,f
  6298  03D0  0CA3               	rrf	___ftmul@f1,f
  6299  03D1  0B89               	decfsz	9,f
  6300  03D2  2BCE               	goto	u3585
  6301  03D3  3001               	movlw	1
  6302  03D4                     u3595:	
  6303  03D4  36B0               	lsrf	___ftmul@f3_as_product+2,f
  6304  03D5  0CAF               	rrf	___ftmul@f3_as_product+1,f
  6305  03D6  0CAE               	rrf	___ftmul@f3_as_product,f
  6306  03D7  0B89               	decfsz	9,f
  6307  03D8  2BD4               	goto	u3595
  6308  03D9  3001               	movlw	1
  6309  03DA  02B1               	subwf	___ftmul@cntr,f
  6310  03DB  1D03               	btfss	3,2
  6311  03DC  2BC5               	goto	l4039
  6312  03DD  082E               	movf	___ftmul@f3_as_product,w
  6313  03DE  00F1               	movwf	?___ftpack
  6314  03DF  082F               	movf	___ftmul@f3_as_product+1,w
  6315  03E0  00F2               	movwf	?___ftpack+1
  6316  03E1  0830               	movf	___ftmul@f3_as_product+2,w
  6317  03E2  00F3               	movwf	?___ftpack+2
  6318  03E3  082D               	movf	___ftmul@exp,w
  6319  03E4  00A9               	movwf	??___ftmul
  6320  03E5  0829               	movf	??___ftmul,w
  6321  03E6  00F4               	movwf	?___ftpack+3
  6322  03E7  0832               	movf	___ftmul@sign,w
  6323  03E8  00AA               	movwf	??___ftmul+1
  6324  03E9  082A               	movf	??___ftmul+1,w
  6325  03EA  00F5               	movwf	?___ftpack+4
  6326  03EB  3185  2576         	fcall	___ftpack
  6327  03ED  0871               	movf	?___ftpack,w
  6328  03EE  0020               	movlb	0	; select bank0
  6329  03EF  00A3               	movwf	?___ftmul
  6330  03F0  0872               	movf	?___ftpack+1,w
  6331  03F1  00A4               	movwf	?___ftmul+1
  6332  03F2  0873               	movf	?___ftpack+2,w
  6333  03F3  00A5               	movwf	?___ftmul+2
  6334  03F4  0008               	return
  6335  03F5                     __end_of___ftmul:	
  6336                           
  6337                           	psect	text33
  6338  03F5                     __ptext33:	
  6339 ;; *************** function ___ftdiv *****************
  6340 ;; Defined at:
  6341 ;;		line 50 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftdiv.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  f2              3   19[BANK0 ] float 
  6344 ;;  f1              3   22[BANK0 ] float 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  f3              3   30[BANK0 ] float 
  6347 ;;  sign            1   34[BANK0 ] unsigned char 
  6348 ;;  exp             1   33[BANK0 ] unsigned char 
  6349 ;;  cntr            1   29[BANK0 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  3   19[BANK0 ] float 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0, pclath, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6359 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;Total ram usage:       16 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    3
  6366 ;; This function calls:
  6367 ;;		___ftpack
  6368 ;; This function is called by:
  6369 ;;		_ADCConv
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function ___ftdiv
  6375  03F5                     ___ftdiv:	
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6379  03F5  0020               	movlb	0	; select bank0
  6380  03F6  0836               	movf	___ftdiv@f1,w
  6381  03F7  00B9               	movwf	??___ftdiv
  6382  03F8  0837               	movf	___ftdiv@f1+1,w
  6383  03F9  00BA               	movwf	??___ftdiv+1
  6384  03FA  0838               	movf	___ftdiv@f1+2,w
  6385  03FB  00BB               	movwf	??___ftdiv+2
  6386  03FC  1003               	clrc
  6387  03FD  0D3A               	rlf	??___ftdiv+1,w
  6388  03FE  0D3B               	rlf	??___ftdiv+2,w
  6389  03FF  00BC               	movwf	??___ftdiv+3
  6390  0400  083C               	movf	??___ftdiv+3,w
  6391  0401  00C1               	movwf	___ftdiv@exp
  6392  0402  08C1               	movf	___ftdiv@exp,f
  6393  0403  1D03               	skipz
  6394  0404  2C0C               	goto	l3967
  6395  0405  3000               	movlw	0
  6396  0406  00B3               	movwf	?___ftdiv
  6397  0407  3000               	movlw	0
  6398  0408  00B4               	movwf	?___ftdiv+1
  6399  0409  3000               	movlw	0
  6400  040A  00B5               	movwf	?___ftdiv+2
  6401  040B  0008               	return
  6402  040C                     l3967:	
  6403  040C  0833               	movf	___ftdiv@f2,w
  6404  040D  00B9               	movwf	??___ftdiv
  6405  040E  0834               	movf	___ftdiv@f2+1,w
  6406  040F  00BA               	movwf	??___ftdiv+1
  6407  0410  0835               	movf	___ftdiv@f2+2,w
  6408  0411  00BB               	movwf	??___ftdiv+2
  6409  0412  1003               	clrc
  6410  0413  0D3A               	rlf	??___ftdiv+1,w
  6411  0414  0D3B               	rlf	??___ftdiv+2,w
  6412  0415  00BC               	movwf	??___ftdiv+3
  6413  0416  083C               	movf	??___ftdiv+3,w
  6414  0417  00C2               	movwf	___ftdiv@sign
  6415  0418  08C2               	movf	___ftdiv@sign,f
  6416  0419  1D03               	skipz
  6417  041A  2C22               	goto	l3973
  6418  041B  3000               	movlw	0
  6419  041C  00B3               	movwf	?___ftdiv
  6420  041D  3000               	movlw	0
  6421  041E  00B4               	movwf	?___ftdiv+1
  6422  041F  3000               	movlw	0
  6423  0420  00B5               	movwf	?___ftdiv+2
  6424  0421  0008               	return
  6425  0422                     l3973:	
  6426  0422  3000               	movlw	0
  6427  0423  00BE               	movwf	___ftdiv@f3
  6428  0424  3000               	movlw	0
  6429  0425  00BF               	movwf	___ftdiv@f3+1
  6430  0426  3000               	movlw	0
  6431  0427  00C0               	movwf	___ftdiv@f3+2
  6432  0428  3089               	movlw	137
  6433  0429  0742               	addwf	___ftdiv@sign,w
  6434  042A  00B9               	movwf	??___ftdiv
  6435  042B  0839               	movf	??___ftdiv,w
  6436  042C  02C1               	subwf	___ftdiv@exp,f
  6437  042D  0836               	movf	___ftdiv@f1,w
  6438  042E  00B9               	movwf	??___ftdiv
  6439  042F  0837               	movf	___ftdiv@f1+1,w
  6440  0430  00BA               	movwf	??___ftdiv+1
  6441  0431  0838               	movf	___ftdiv@f1+2,w
  6442  0432  00BB               	movwf	??___ftdiv+2
  6443  0433  3010               	movlw	16
  6444  0434                     u3435:	
  6445  0434  36BB               	lsrf	??___ftdiv+2,f
  6446  0435  0CBA               	rrf	??___ftdiv+1,f
  6447  0436  0CB9               	rrf	??___ftdiv,f
  6448  0437  0B89               	decfsz	9,f
  6449  0438  2C34               	goto	u3435
  6450  0439  0839               	movf	??___ftdiv,w
  6451  043A  00BC               	movwf	??___ftdiv+3
  6452  043B  083C               	movf	??___ftdiv+3,w
  6453  043C  00C2               	movwf	___ftdiv@sign
  6454  043D  0833               	movf	___ftdiv@f2,w
  6455  043E  00B9               	movwf	??___ftdiv
  6456  043F  0834               	movf	___ftdiv@f2+1,w
  6457  0440  00BA               	movwf	??___ftdiv+1
  6458  0441  0835               	movf	___ftdiv@f2+2,w
  6459  0442  00BB               	movwf	??___ftdiv+2
  6460  0443  3010               	movlw	16
  6461  0444                     u3445:	
  6462  0444  36BB               	lsrf	??___ftdiv+2,f
  6463  0445  0CBA               	rrf	??___ftdiv+1,f
  6464  0446  0CB9               	rrf	??___ftdiv,f
  6465  0447  0B89               	decfsz	9,f
  6466  0448  2C44               	goto	u3445
  6467  0449  0839               	movf	??___ftdiv,w
  6468  044A  00BC               	movwf	??___ftdiv+3
  6469  044B  083C               	movf	??___ftdiv+3,w
  6470  044C  06C2               	xorwf	___ftdiv@sign,f
  6471  044D  3080               	movlw	128
  6472  044E  00B9               	movwf	??___ftdiv
  6473  044F  0839               	movf	??___ftdiv,w
  6474  0450  05C2               	andwf	___ftdiv@sign,f
  6475  0451  17B7               	bsf	___ftdiv@f1+1,7
  6476  0452  30FF               	movlw	255
  6477  0453  05B6               	andwf	___ftdiv@f1,f
  6478  0454  30FF               	movlw	255
  6479  0455  05B7               	andwf	___ftdiv@f1+1,f
  6480  0456  3000               	movlw	0
  6481  0457  05B8               	andwf	___ftdiv@f1+2,f
  6482  0458  17B4               	bsf	___ftdiv@f2+1,7
  6483  0459  30FF               	movlw	255
  6484  045A  05B3               	andwf	___ftdiv@f2,f
  6485  045B  30FF               	movlw	255
  6486  045C  05B4               	andwf	___ftdiv@f2+1,f
  6487  045D  3000               	movlw	0
  6488  045E  05B5               	andwf	___ftdiv@f2+2,f
  6489  045F  3018               	movlw	24
  6490  0460  00B9               	movwf	??___ftdiv
  6491  0461  0839               	movf	??___ftdiv,w
  6492  0462  00BD               	movwf	___ftdiv@cntr
  6493  0463                     l3987:	
  6494  0463  3001               	movlw	1
  6495  0464                     u3455:	
  6496  0464  35BE               	lslf	___ftdiv@f3,f
  6497  0465  0DBF               	rlf	___ftdiv@f3+1,f
  6498  0466  0DC0               	rlf	___ftdiv@f3+2,f
  6499  0467  0B89               	decfsz	9,f
  6500  0468  2C64               	goto	u3455
  6501  0469  0835               	movf	___ftdiv@f2+2,w
  6502  046A  0238               	subwf	___ftdiv@f1+2,w
  6503  046B  1D03               	skipz
  6504  046C  2C73               	goto	u3465
  6505  046D  0834               	movf	___ftdiv@f2+1,w
  6506  046E  0237               	subwf	___ftdiv@f1+1,w
  6507  046F  1D03               	skipz
  6508  0470  2C73               	goto	u3465
  6509  0471  0833               	movf	___ftdiv@f2,w
  6510  0472  0236               	subwf	___ftdiv@f1,w
  6511  0473                     u3465:	
  6512  0473  1C03               	skipc
  6513  0474  2C7C               	goto	l3995
  6514  0475  0833               	movf	___ftdiv@f2,w
  6515  0476  02B6               	subwf	___ftdiv@f1,f
  6516  0477  0834               	movf	___ftdiv@f2+1,w
  6517  0478  3BB7               	subwfb	___ftdiv@f1+1,f
  6518  0479  0835               	movf	___ftdiv@f2+2,w
  6519  047A  3BB8               	subwfb	___ftdiv@f1+2,f
  6520  047B  143E               	bsf	___ftdiv@f3,0
  6521  047C                     l3995:	
  6522  047C  3001               	movlw	1
  6523  047D                     u3475:	
  6524  047D  35B6               	lslf	___ftdiv@f1,f
  6525  047E  0DB7               	rlf	___ftdiv@f1+1,f
  6526  047F  0DB8               	rlf	___ftdiv@f1+2,f
  6527  0480  0B89               	decfsz	9,f
  6528  0481  2C7D               	goto	u3475
  6529  0482  3001               	movlw	1
  6530  0483  02BD               	subwf	___ftdiv@cntr,f
  6531  0484  1D03               	btfss	3,2
  6532  0485  2C63               	goto	l3987
  6533  0486  083E               	movf	___ftdiv@f3,w
  6534  0487  00F1               	movwf	?___ftpack
  6535  0488  083F               	movf	___ftdiv@f3+1,w
  6536  0489  00F2               	movwf	?___ftpack+1
  6537  048A  0840               	movf	___ftdiv@f3+2,w
  6538  048B  00F3               	movwf	?___ftpack+2
  6539  048C  0841               	movf	___ftdiv@exp,w
  6540  048D  00B9               	movwf	??___ftdiv
  6541  048E  0839               	movf	??___ftdiv,w
  6542  048F  00F4               	movwf	?___ftpack+3
  6543  0490  0842               	movf	___ftdiv@sign,w
  6544  0491  00BA               	movwf	??___ftdiv+1
  6545  0492  083A               	movf	??___ftdiv+1,w
  6546  0493  00F5               	movwf	?___ftpack+4
  6547  0494  3185  2576         	fcall	___ftpack
  6548  0496  0871               	movf	?___ftpack,w
  6549  0497  0020               	movlb	0	; select bank0
  6550  0498  00B3               	movwf	?___ftdiv
  6551  0499  0872               	movf	?___ftpack+1,w
  6552  049A  00B4               	movwf	?___ftdiv+1
  6553  049B  0873               	movf	?___ftpack+2,w
  6554  049C  00B5               	movwf	?___ftdiv+2
  6555  049D  0008               	return
  6556  049E                     __end_of___ftdiv:	
  6557                           
  6558                           	psect	text34
  6559  018D                     __ptext34:	
  6560 ;; *************** function ___ftadd *****************
  6561 ;; Defined at:
  6562 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  f1              3   35[BANK0 ] float 
  6565 ;;  f2              3   38[BANK0 ] float 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  exp1            1   47[BANK0 ] unsigned char 
  6568 ;;  exp2            1   46[BANK0 ] unsigned char 
  6569 ;;  sign            1   45[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  3   35[BANK0 ] float 
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:       13 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    3
  6586 ;; This function calls:
  6587 ;;		___ftpack
  6588 ;; This function is called by:
  6589 ;;		_ADCConv
  6590 ;;		_ADCGetTempCCal
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           
  6595                           ;psect for function ___ftadd
  6596  018D                     ___ftadd:	
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6600  018D  0020               	movlb	0	; select bank0
  6601  018E  0843               	movf	___ftadd@f1,w
  6602  018F  00C9               	movwf	??___ftadd
  6603  0190  0844               	movf	___ftadd@f1+1,w
  6604  0191  00CA               	movwf	??___ftadd+1
  6605  0192  0845               	movf	___ftadd@f1+2,w
  6606  0193  00CB               	movwf	??___ftadd+2
  6607  0194  1003               	clrc
  6608  0195  0D4A               	rlf	??___ftadd+1,w
  6609  0196  0D4B               	rlf	??___ftadd+2,w
  6610  0197  00CC               	movwf	??___ftadd+3
  6611  0198  084C               	movf	??___ftadd+3,w
  6612  0199  00CF               	movwf	___ftadd@exp1
  6613  019A  0846               	movf	___ftadd@f2,w
  6614  019B  00C9               	movwf	??___ftadd
  6615  019C  0847               	movf	___ftadd@f2+1,w
  6616  019D  00CA               	movwf	??___ftadd+1
  6617  019E  0848               	movf	___ftadd@f2+2,w
  6618  019F  00CB               	movwf	??___ftadd+2
  6619  01A0  1003               	clrc
  6620  01A1  0D4A               	rlf	??___ftadd+1,w
  6621  01A2  0D4B               	rlf	??___ftadd+2,w
  6622  01A3  00CC               	movwf	??___ftadd+3
  6623  01A4  084C               	movf	??___ftadd+3,w
  6624  01A5  00CE               	movwf	___ftadd@exp2
  6625  01A6  084F               	movf	___ftadd@exp1,w
  6626  01A7  1903               	btfsc	3,2
  6627  01A8  29B5               	goto	l3897
  6628  01A9  084E               	movf	___ftadd@exp2,w
  6629  01AA  024F               	subwf	___ftadd@exp1,w
  6630  01AB  1803               	skipnc
  6631  01AC  29BC               	goto	l3901
  6632  01AD  034F               	decf	___ftadd@exp1,w
  6633  01AE  3AFF               	xorlw	255
  6634  01AF  074E               	addwf	___ftadd@exp2,w
  6635  01B0  00C9               	movwf	??___ftadd
  6636  01B1  3019               	movlw	25
  6637  01B2  0249               	subwf	??___ftadd,w
  6638  01B3  1C03               	skipc
  6639  01B4  29BC               	goto	l3901
  6640  01B5                     l3897:	
  6641  01B5  0846               	movf	___ftadd@f2,w
  6642  01B6  00C3               	movwf	?___ftadd
  6643  01B7  0847               	movf	___ftadd@f2+1,w
  6644  01B8  00C4               	movwf	?___ftadd+1
  6645  01B9  0848               	movf	___ftadd@f2+2,w
  6646  01BA  00C5               	movwf	?___ftadd+2
  6647  01BB  0008               	return
  6648  01BC                     l3901:	
  6649  01BC  084E               	movf	___ftadd@exp2,w
  6650  01BD  1903               	btfsc	3,2
  6651  01BE  0008               	return
  6652  01BF  084F               	movf	___ftadd@exp1,w
  6653  01C0  024E               	subwf	___ftadd@exp2,w
  6654  01C1  1803               	skipnc
  6655  01C2  29CB               	goto	l3907
  6656  01C3  034E               	decf	___ftadd@exp2,w
  6657  01C4  3AFF               	xorlw	255
  6658  01C5  074F               	addwf	___ftadd@exp1,w
  6659  01C6  00C9               	movwf	??___ftadd
  6660  01C7  3019               	movlw	25
  6661  01C8  0249               	subwf	??___ftadd,w
  6662  01C9  1803               	btfsc	3,0
  6663  01CA  0008               	return
  6664  01CB                     l3907:	
  6665  01CB  3006               	movlw	6
  6666  01CC  00C9               	movwf	??___ftadd
  6667  01CD  0849               	movf	??___ftadd,w
  6668  01CE  00CD               	movwf	___ftadd@sign
  6669  01CF  1BC5               	btfsc	___ftadd@f1+2,7
  6670  01D0  17CD               	bsf	___ftadd@sign,7
  6671  01D1  1BC8               	btfsc	___ftadd@f2+2,7
  6672  01D2  174D               	bsf	___ftadd@sign,6
  6673  01D3  17C4               	bsf	___ftadd@f1+1,7
  6674  01D4  30FF               	movlw	255
  6675  01D5  05C3               	andwf	___ftadd@f1,f
  6676  01D6  30FF               	movlw	255
  6677  01D7  05C4               	andwf	___ftadd@f1+1,f
  6678  01D8  3000               	movlw	0
  6679  01D9  05C5               	andwf	___ftadd@f1+2,f
  6680  01DA  17C7               	bsf	___ftadd@f2+1,7
  6681  01DB  30FF               	movlw	255
  6682  01DC  05C6               	andwf	___ftadd@f2,f
  6683  01DD  30FF               	movlw	255
  6684  01DE  05C7               	andwf	___ftadd@f2+1,f
  6685  01DF  3000               	movlw	0
  6686  01E0  05C8               	andwf	___ftadd@f2+2,f
  6687  01E1  084E               	movf	___ftadd@exp2,w
  6688  01E2  024F               	subwf	___ftadd@exp1,w
  6689  01E3  1803               	skipnc
  6690  01E4  2A07               	goto	l3929
  6691  01E5                     l3919:	
  6692  01E5  3001               	movlw	1
  6693  01E6                     u3275:	
  6694  01E6  35C6               	lslf	___ftadd@f2,f
  6695  01E7  0DC7               	rlf	___ftadd@f2+1,f
  6696  01E8  0DC8               	rlf	___ftadd@f2+2,f
  6697  01E9  0B89               	decfsz	9,f
  6698  01EA  29E6               	goto	u3275
  6699  01EB  3001               	movlw	1
  6700  01EC  02CE               	subwf	___ftadd@exp2,f
  6701  01ED  084E               	movf	___ftadd@exp2,w
  6702  01EE  064F               	xorwf	___ftadd@exp1,w
  6703  01EF  1903               	skipnz
  6704  01F0  2A02               	goto	l3927
  6705  01F1  3001               	movlw	1
  6706  01F2  02CD               	subwf	___ftadd@sign,f
  6707  01F3  084D               	movf	___ftadd@sign,w
  6708  01F4  3907               	andlw	7
  6709  01F5  1903               	btfsc	3,2
  6710  01F6  2A02               	goto	l3927
  6711  01F7  29E5               	goto	l3919
  6712  01F8                     l3925:	
  6713  01F8  3001               	movlw	1
  6714  01F9                     u3305:	
  6715  01F9  36C5               	lsrf	___ftadd@f1+2,f
  6716  01FA  0CC4               	rrf	___ftadd@f1+1,f
  6717  01FB  0CC3               	rrf	___ftadd@f1,f
  6718  01FC  0B89               	decfsz	9,f
  6719  01FD  29F9               	goto	u3305
  6720  01FE  3001               	movlw	1
  6721  01FF  00C9               	movwf	??___ftadd
  6722  0200  0849               	movf	??___ftadd,w
  6723  0201  07CF               	addwf	___ftadd@exp1,f
  6724  0202                     l3927:	
  6725  0202  084F               	movf	___ftadd@exp1,w
  6726  0203  064E               	xorwf	___ftadd@exp2,w
  6727  0204  1903               	btfsc	3,2
  6728  0205  2A2C               	goto	l864
  6729  0206  29F8               	goto	l3925
  6730  0207                     l3929:	
  6731  0207  084F               	movf	___ftadd@exp1,w
  6732  0208  024E               	subwf	___ftadd@exp2,w
  6733  0209  1803               	skipnc
  6734  020A  2A2C               	goto	l864
  6735  020B                     l3931:	
  6736  020B  3001               	movlw	1
  6737  020C                     u3335:	
  6738  020C  35C3               	lslf	___ftadd@f1,f
  6739  020D  0DC4               	rlf	___ftadd@f1+1,f
  6740  020E  0DC5               	rlf	___ftadd@f1+2,f
  6741  020F  0B89               	decfsz	9,f
  6742  0210  2A0C               	goto	u3335
  6743  0211  3001               	movlw	1
  6744  0212  02CF               	subwf	___ftadd@exp1,f
  6745  0213  084E               	movf	___ftadd@exp2,w
  6746  0214  064F               	xorwf	___ftadd@exp1,w
  6747  0215  1903               	skipnz
  6748  0216  2A28               	goto	l3939
  6749  0217  3001               	movlw	1
  6750  0218  02CD               	subwf	___ftadd@sign,f
  6751  0219  084D               	movf	___ftadd@sign,w
  6752  021A  3907               	andlw	7
  6753  021B  1903               	btfsc	3,2
  6754  021C  2A28               	goto	l3939
  6755  021D  2A0B               	goto	l3931
  6756  021E                     l3937:	
  6757  021E  3001               	movlw	1
  6758  021F                     u3365:	
  6759  021F  36C8               	lsrf	___ftadd@f2+2,f
  6760  0220  0CC7               	rrf	___ftadd@f2+1,f
  6761  0221  0CC6               	rrf	___ftadd@f2,f
  6762  0222  0B89               	decfsz	9,f
  6763  0223  2A1F               	goto	u3365
  6764  0224  3001               	movlw	1
  6765  0225  00C9               	movwf	??___ftadd
  6766  0226  0849               	movf	??___ftadd,w
  6767  0227  07CE               	addwf	___ftadd@exp2,f
  6768  0228                     l3939:	
  6769  0228  084F               	movf	___ftadd@exp1,w
  6770  0229  064E               	xorwf	___ftadd@exp2,w
  6771  022A  1D03               	skipz
  6772  022B  2A1E               	goto	l3937
  6773  022C                     l864:	
  6774  022C  1FCD               	btfss	___ftadd@sign,7
  6775  022D  2A3E               	goto	l3943
  6776  022E  30FF               	movlw	255
  6777  022F  06C3               	xorwf	___ftadd@f1,f
  6778  0230  30FF               	movlw	255
  6779  0231  06C4               	xorwf	___ftadd@f1+1,f
  6780  0232  30FF               	movlw	255
  6781  0233  06C5               	xorwf	___ftadd@f1+2,f
  6782  0234  3001               	movlw	1
  6783  0235  07C3               	addwf	___ftadd@f1,f
  6784  0236  3000               	movlw	0
  6785  0237  1803               	skipnc
  6786  0238  3001               	movlw	1
  6787  0239  07C4               	addwf	___ftadd@f1+1,f
  6788  023A  3000               	movlw	0
  6789  023B  1803               	skipnc
  6790  023C  3001               	movlw	1
  6791  023D  07C5               	addwf	___ftadd@f1+2,f
  6792  023E                     l3943:	
  6793  023E  1F4D               	btfss	___ftadd@sign,6
  6794  023F  2A50               	goto	l3947
  6795  0240  30FF               	movlw	255
  6796  0241  06C6               	xorwf	___ftadd@f2,f
  6797  0242  30FF               	movlw	255
  6798  0243  06C7               	xorwf	___ftadd@f2+1,f
  6799  0244  30FF               	movlw	255
  6800  0245  06C8               	xorwf	___ftadd@f2+2,f
  6801  0246  3001               	movlw	1
  6802  0247  07C6               	addwf	___ftadd@f2,f
  6803  0248  3000               	movlw	0
  6804  0249  1803               	skipnc
  6805  024A  3001               	movlw	1
  6806  024B  07C7               	addwf	___ftadd@f2+1,f
  6807  024C  3000               	movlw	0
  6808  024D  1803               	skipnc
  6809  024E  3001               	movlw	1
  6810  024F  07C8               	addwf	___ftadd@f2+2,f
  6811  0250                     l3947:	
  6812  0250  01CD               	clrf	___ftadd@sign
  6813  0251  0843               	movf	___ftadd@f1,w
  6814  0252  07C6               	addwf	___ftadd@f2,f
  6815  0253  0844               	movf	___ftadd@f1+1,w
  6816  0254  3DC7               	addwfc	___ftadd@f2+1,f
  6817  0255  0845               	movf	___ftadd@f1+2,w
  6818  0256  3DC8               	addwfc	___ftadd@f2+2,f
  6819  0257  1FC8               	btfss	___ftadd@f2+2,7
  6820  0258  2A6B               	goto	l3957
  6821  0259  30FF               	movlw	255
  6822  025A  06C6               	xorwf	___ftadd@f2,f
  6823  025B  30FF               	movlw	255
  6824  025C  06C7               	xorwf	___ftadd@f2+1,f
  6825  025D  30FF               	movlw	255
  6826  025E  06C8               	xorwf	___ftadd@f2+2,f
  6827  025F  3001               	movlw	1
  6828  0260  07C6               	addwf	___ftadd@f2,f
  6829  0261  3000               	movlw	0
  6830  0262  1803               	skipnc
  6831  0263  3001               	movlw	1
  6832  0264  07C7               	addwf	___ftadd@f2+1,f
  6833  0265  3000               	movlw	0
  6834  0266  1803               	skipnc
  6835  0267  3001               	movlw	1
  6836  0268  07C8               	addwf	___ftadd@f2+2,f
  6837  0269  01CD               	clrf	___ftadd@sign
  6838  026A  0ACD               	incf	___ftadd@sign,f
  6839  026B                     l3957:	
  6840  026B  0846               	movf	___ftadd@f2,w
  6841  026C  00F1               	movwf	?___ftpack
  6842  026D  0847               	movf	___ftadd@f2+1,w
  6843  026E  00F2               	movwf	?___ftpack+1
  6844  026F  0848               	movf	___ftadd@f2+2,w
  6845  0270  00F3               	movwf	?___ftpack+2
  6846  0271  084F               	movf	___ftadd@exp1,w
  6847  0272  00C9               	movwf	??___ftadd
  6848  0273  0849               	movf	??___ftadd,w
  6849  0274  00F4               	movwf	?___ftpack+3
  6850  0275  084D               	movf	___ftadd@sign,w
  6851  0276  00CA               	movwf	??___ftadd+1
  6852  0277  084A               	movf	??___ftadd+1,w
  6853  0278  00F5               	movwf	?___ftpack+4
  6854  0279  3185  2576         	fcall	___ftpack
  6855  027B  0871               	movf	?___ftpack,w
  6856  027C  0020               	movlb	0	; select bank0
  6857  027D  00C3               	movwf	?___ftadd
  6858  027E  0872               	movf	?___ftpack+1,w
  6859  027F  00C4               	movwf	?___ftadd+1
  6860  0280  0873               	movf	?___ftpack+2,w
  6861  0281  00C5               	movwf	?___ftadd+2
  6862  0282  0008               	return
  6863  0283                     __end_of___ftadd:	
  6864                           
  6865                           	psect	text35
  6866  0ED8                     __ptext35:	
  6867 ;; *************** function ___awtoft *****************
  6868 ;; Defined at:
  6869 ;;		line 33 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awtoft.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  c               2    9[COMMON] int 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  sign            1    2[BANK0 ] unsigned char 
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  3    9[COMMON] float 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, status,0, pclath, cstack
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6883 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6884 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;Total ram usage:        6 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    3
  6890 ;; This function calls:
  6891 ;;		___ftpack
  6892 ;; This function is called by:
  6893 ;;		_ADCConv
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           
  6898                           ;psect for function ___awtoft
  6899  0ED8                     ___awtoft:	
  6900                           
  6901                           ;incstack = 0
  6902                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6903  0ED8  0020               	movlb	0	; select bank0
  6904  0ED9  01A2               	clrf	___awtoft@sign
  6905  0EDA  1FFA               	btfss	___awtoft@c+1,7
  6906  0EDB  2EE3               	goto	l3885
  6907  0EDC  09F9               	comf	___awtoft@c,f
  6908  0EDD  09FA               	comf	___awtoft@c+1,f
  6909  0EDE  0AF9               	incf	___awtoft@c,f
  6910  0EDF  1903               	skipnz
  6911  0EE0  0AFA               	incf	___awtoft@c+1,f
  6912  0EE1  01A2               	clrf	___awtoft@sign
  6913  0EE2  0AA2               	incf	___awtoft@sign,f
  6914  0EE3                     l3885:	
  6915  0EE3  0879               	movf	___awtoft@c,w
  6916  0EE4  00F1               	movwf	?___ftpack
  6917  0EE5  087A               	movf	___awtoft@c+1,w
  6918  0EE6  00F2               	movwf	?___ftpack+1
  6919  0EE7  01F3               	clrf	?___ftpack+2
  6920  0EE8  308E               	movlw	142
  6921  0EE9  00A0               	movwf	??___awtoft
  6922  0EEA  0820               	movf	??___awtoft,w
  6923  0EEB  00F4               	movwf	?___ftpack+3
  6924  0EEC  0822               	movf	___awtoft@sign,w
  6925  0EED  00A1               	movwf	??___awtoft+1
  6926  0EEE  0821               	movf	??___awtoft+1,w
  6927  0EEF  00F5               	movwf	?___ftpack+4
  6928  0EF0  3185  2576         	fcall	___ftpack
  6929  0EF2  0871               	movf	?___ftpack,w
  6930  0EF3  00F9               	movwf	?___awtoft
  6931  0EF4  0872               	movf	?___ftpack+1,w
  6932  0EF5  00FA               	movwf	?___awtoft+1
  6933  0EF6  0873               	movf	?___ftpack+2,w
  6934  0EF7  00FB               	movwf	?___awtoft+2
  6935  0EF8  0008               	return
  6936  0EF9                     __end_of___awtoft:	
  6937                           
  6938                           	psect	text36
  6939  0576                     __ptext36:	
  6940 ;; *************** function ___ftpack *****************
  6941 ;; Defined at:
  6942 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  arg             3    1[COMMON] unsigned um
  6945 ;;  exp             1    4[COMMON] unsigned char 
  6946 ;;  sign            1    5[COMMON] unsigned char 
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;		None
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  3    1[COMMON] float 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6958 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;Total ram usage:        8 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    2
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		___awtoft
  6969 ;;		___ftadd
  6970 ;;		___ftdiv
  6971 ;;		___ftmul
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           
  6976                           ;psect for function ___ftpack
  6977  0576                     ___ftpack:	
  6978                           
  6979                           ;incstack = 0
  6980                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6981  0576  0874               	movf	___ftpack@exp,w
  6982  0577  1903               	btfsc	3,2
  6983  0578  2D7E               	goto	l3851
  6984  0579  0873               	movf	___ftpack@arg+2,w
  6985  057A  0472               	iorwf	___ftpack@arg+1,w
  6986  057B  0471               	iorwf	___ftpack@arg,w
  6987  057C  1D03               	skipz
  6988  057D  2D8F               	goto	l3857
  6989  057E                     l3851:	
  6990  057E  3000               	movlw	0
  6991  057F  00F1               	movwf	?___ftpack
  6992  0580  3000               	movlw	0
  6993  0581  00F2               	movwf	?___ftpack+1
  6994  0582  3000               	movlw	0
  6995  0583  00F3               	movwf	?___ftpack+2
  6996  0584  0008               	return
  6997  0585                     l3855:	
  6998  0585  3001               	movlw	1
  6999  0586  00F6               	movwf	??___ftpack
  7000  0587  0876               	movf	??___ftpack,w
  7001  0588  07F4               	addwf	___ftpack@exp,f
  7002  0589  3001               	movlw	1
  7003  058A                     u3085:	
  7004  058A  36F3               	lsrf	___ftpack@arg+2,f
  7005  058B  0CF2               	rrf	___ftpack@arg+1,f
  7006  058C  0CF1               	rrf	___ftpack@arg,f
  7007  058D  0B89               	decfsz	9,f
  7008  058E  2D8A               	goto	u3085
  7009  058F                     l3857:	
  7010  058F  30FE               	movlw	254
  7011  0590  0573               	andwf	___ftpack@arg+2,w
  7012  0591  1903               	btfsc	3,2
  7013  0592  2DA8               	goto	l835
  7014  0593  2D85               	goto	l3855
  7015  0594                     l3859:	
  7016  0594  3001               	movlw	1
  7017  0595  00F6               	movwf	??___ftpack
  7018  0596  0876               	movf	??___ftpack,w
  7019  0597  07F4               	addwf	___ftpack@exp,f
  7020  0598  3001               	movlw	1
  7021  0599  07F1               	addwf	___ftpack@arg,f
  7022  059A  3000               	movlw	0
  7023  059B  1803               	skipnc
  7024  059C  3001               	movlw	1
  7025  059D  07F2               	addwf	___ftpack@arg+1,f
  7026  059E  3000               	movlw	0
  7027  059F  1803               	skipnc
  7028  05A0  3001               	movlw	1
  7029  05A1  07F3               	addwf	___ftpack@arg+2,f
  7030  05A2  3001               	movlw	1
  7031  05A3                     u3105:	
  7032  05A3  36F3               	lsrf	___ftpack@arg+2,f
  7033  05A4  0CF2               	rrf	___ftpack@arg+1,f
  7034  05A5  0CF1               	rrf	___ftpack@arg,f
  7035  05A6  0B89               	decfsz	9,f
  7036  05A7  2DA3               	goto	u3105
  7037  05A8                     l835:	
  7038  05A8  30FF               	movlw	255
  7039  05A9  0573               	andwf	___ftpack@arg+2,w
  7040  05AA  1903               	btfsc	3,2
  7041  05AB  2DB5               	goto	l3867
  7042  05AC  2D94               	goto	l3859
  7043  05AD                     l3865:	
  7044  05AD  3001               	movlw	1
  7045  05AE  02F4               	subwf	___ftpack@exp,f
  7046  05AF  3001               	movlw	1
  7047  05B0                     u3125:	
  7048  05B0  35F1               	lslf	___ftpack@arg,f
  7049  05B1  0DF2               	rlf	___ftpack@arg+1,f
  7050  05B2  0DF3               	rlf	___ftpack@arg+2,f
  7051  05B3  0B89               	decfsz	9,f
  7052  05B4  2DB0               	goto	u3125
  7053  05B5                     l3867:	
  7054  05B5  1FF2               	btfss	___ftpack@arg+1,7
  7055  05B6  2DAD               	goto	l3865
  7056  05B7  1874               	btfsc	___ftpack@exp,0
  7057  05B8  2DBF               	goto	l841
  7058  05B9  30FF               	movlw	255
  7059  05BA  05F1               	andwf	___ftpack@arg,f
  7060  05BB  307F               	movlw	127
  7061  05BC  05F2               	andwf	___ftpack@arg+1,f
  7062  05BD  30FF               	movlw	255
  7063  05BE  05F3               	andwf	___ftpack@arg+2,f
  7064  05BF                     l841:	
  7065  05BF  1003               	clrc
  7066  05C0  0CF4               	rrf	___ftpack@exp,f
  7067  05C1  0874               	movf	___ftpack@exp,w
  7068  05C2  00F6               	movwf	??___ftpack
  7069  05C3  01F7               	clrf	??___ftpack+1
  7070  05C4  01F8               	clrf	??___ftpack+2
  7071  05C5  3010               	movlw	16
  7072  05C6                     u3155:	
  7073  05C6  35F6               	lslf	??___ftpack,f
  7074  05C7  0DF7               	rlf	??___ftpack+1,f
  7075  05C8  0DF8               	rlf	??___ftpack+2,f
  7076  05C9  0B89               	decfsz	9,f
  7077  05CA  2DC6               	goto	u3155
  7078  05CB  0876               	movf	??___ftpack,w
  7079  05CC  04F1               	iorwf	___ftpack@arg,f
  7080  05CD  0877               	movf	??___ftpack+1,w
  7081  05CE  04F2               	iorwf	___ftpack@arg+1,f
  7082  05CF  0878               	movf	??___ftpack+2,w
  7083  05D0  04F3               	iorwf	___ftpack@arg+2,f
  7084  05D1  0875               	movf	___ftpack@sign,w
  7085  05D2  1903               	btfsc	3,2
  7086  05D3  0008               	return
  7087  05D4  17F3               	bsf	___ftpack@arg+2,7
  7088  05D5  0008               	return
  7089  05D6                     __end_of___ftpack:	
  7090                           
  7091                           	psect	text37
  7092  0E5C                     __ptext37:	
  7093 ;; *************** function _LEDNormalFlash *****************
  7094 ;; Defined at:
  7095 ;;		line 25 in file "LED.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  num             1    wreg     unsigned char 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  num             1    8[COMMON] unsigned char 
  7100 ;;  i               1    9[COMMON] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;		None               void
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, pclath, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;Total ram usage:        3 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    3
  7117 ;; This function calls:
  7118 ;;		_DLYDelay_ms
  7119 ;; This function is called by:
  7120 ;;		_PGMSelLong
  7121 ;;		_RTXReadPkt
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _LEDNormalFlash
  7127  0E5C                     _LEDNormalFlash:	
  7128                           
  7129                           ;incstack = 0
  7130                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  7131                           ;LEDNormalFlash@num stored from wreg
  7132  0E5C  00F8               	movwf	LEDNormalFlash@num
  7133                           
  7134                           ;LED.c: 26: unsigned char i;
  7135                           ;LED.c: 28: for(i=0;i<num;i++)
  7136  0E5D  01F9               	clrf	LEDNormalFlash@i
  7137  0E5E                     l3527:	
  7138  0E5E  0878               	movf	LEDNormalFlash@num,w
  7139  0E5F  0279               	subwf	LEDNormalFlash@i,w
  7140  0E60  1803               	btfsc	3,0
  7141  0E61  0008               	return
  7142  0E62  0064               	clrwdt	;# 
  7143                           
  7144                           ;LED.c: 31: PORTCbits.RC7=0;
  7145  0E63  0020               	movlb	0	; select bank0
  7146  0E64  138E               	bcf	14,7	;volatile
  7147                           
  7148                           ;LED.c: 32: DLYDelay_ms(200);
  7149  0E65  30C8               	movlw	200
  7150  0E66  00F1               	movwf	?_DLYDelay_ms
  7151  0E67  3000               	movlw	0
  7152  0E68  00F2               	movwf	?_DLYDelay_ms+1
  7153  0E69  318D  2599  318E   	fcall	_DLYDelay_ms
  7154                           
  7155                           ;LED.c: 33: PORTCbits.RC7=1;
  7156  0E6C  0020               	movlb	0	; select bank0
  7157  0E6D  178E               	bsf	14,7	;volatile
  7158                           
  7159                           ;LED.c: 34: DLYDelay_ms(200);
  7160  0E6E  30C8               	movlw	200
  7161  0E6F  00F1               	movwf	?_DLYDelay_ms
  7162  0E70  3000               	movlw	0
  7163  0E71  00F2               	movwf	?_DLYDelay_ms+1
  7164  0E72  318D  2599  318E   	fcall	_DLYDelay_ms
  7165  0E75  3001               	movlw	1
  7166  0E76  00F7               	movwf	??_LEDNormalFlash
  7167  0E77  0877               	movf	??_LEDNormalFlash,w
  7168  0E78  07F9               	addwf	LEDNormalFlash@i,f
  7169  0E79  2E5E               	goto	l3527
  7170  0E7A                     __end_of_LEDNormalFlash:	
  7171                           
  7172                           	psect	text38
  7173  0D99                     __ptext38:	
  7174 ;; *************** function _DLYDelay_ms *****************
  7175 ;; Defined at:
  7176 ;;		line 18 in file "DLY.c"
  7177 ;; Parameters:    Size  Location     Type
  7178 ;;  val             2    1[COMMON] unsigned short 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  i               2    5[COMMON] unsigned short 
  7181 ;; Return value:  Size  Location     Type
  7182 ;;		None               void
  7183 ;; Registers used:
  7184 ;;		wreg, status,2
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : 0/0
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;Total ram usage:        6 bytes
  7195 ;; Hardware stack levels used:    1
  7196 ;; Hardware stack levels required when called:    2
  7197 ;; This function calls:
  7198 ;;		Nothing
  7199 ;; This function is called by:
  7200 ;;		_CC1Init
  7201 ;;		_LEDNormalFlash
  7202 ;;		_LEDFastFlash
  7203 ;;		_RTXAwake
  7204 ;;		_RTXStartSendData
  7205 ;;		_LEDVFastFlash
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           
  7210                           ;psect for function _DLYDelay_ms
  7211  0D99                     _DLYDelay_ms:	
  7212                           
  7213                           ;DLY.c: 19: unsigned short i;
  7214                           ;DLY.c: 21: for(i=0;i<val;i++)
  7215                           
  7216                           ;incstack = 0
  7217                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  7218  0D99  01F5               	clrf	DLYDelay_ms@i
  7219  0D9A  01F6               	clrf	DLYDelay_ms@i+1
  7220  0D9B                     l144:	
  7221  0D9B  0872               	movf	DLYDelay_ms@val+1,w
  7222  0D9C  0276               	subwf	DLYDelay_ms@i+1,w
  7223  0D9D  1D03               	skipz
  7224  0D9E  2DA1               	goto	u2745
  7225  0D9F  0871               	movf	DLYDelay_ms@val,w
  7226  0DA0  0275               	subwf	DLYDelay_ms@i,w
  7227  0DA1                     u2745:	
  7228  0DA1  1803               	btfsc	3,0
  7229  0DA2  0008               	return
  7230  0DA3  0064               	clrwdt	;# 
  7231                           
  7232                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  7233  0DA4  3003               	movlw	3
  7234  0DA5  00F4               	movwf	??_DLYDelay_ms+1
  7235  0DA6  3097               	movlw	151
  7236  0DA7  00F3               	movwf	??_DLYDelay_ms
  7237  0DA8                     u3637:	
  7238  0DA8  0BF3               	decfsz	??_DLYDelay_ms,f
  7239  0DA9  2DA8               	goto	u3637
  7240  0DAA  0BF4               	decfsz	??_DLYDelay_ms+1,f
  7241  0DAB  2DA8               	goto	u3637
  7242  0DAC  2DAD               	nop2
  7243  0DAD  3001               	movlw	1
  7244  0DAE  07F5               	addwf	DLYDelay_ms@i,f
  7245  0DAF  3000               	movlw	0
  7246  0DB0  3DF6               	addwfc	DLYDelay_ms@i+1,f
  7247  0DB1  2D9B               	goto	l144
  7248  0DB2                     __end_of_DLYDelay_ms:	
  7249                           
  7250                           	psect	text39
  7251  0D69                     __ptext39:	
  7252 ;; *************** function _PGMInit *****************
  7253 ;; Defined at:
  7254 ;;		line 25 in file "PGM.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  state           1    wreg     unsigned char 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;  state           1   70[BANK0 ] unsigned char 
  7259 ;; Return value:  Size  Location     Type
  7260 ;;		None               void
  7261 ;; Registers used:
  7262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;Total ram usage:        1 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    6
  7275 ;; This function calls:
  7276 ;;		_PGMReadNvm
  7277 ;;		_PGMCheckNvm
  7278 ;; This function is called by:
  7279 ;;		_main
  7280 ;; This function uses a non-reentrant model
  7281 ;;
  7282                           
  7283                           
  7284                           ;psect for function _PGMInit
  7285  0D69                     _PGMInit:	
  7286                           
  7287                           ;incstack = 0
  7288                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7289                           ;PGMInit@state stored from wreg
  7290  0D69  0020               	movlb	0	; select bank0
  7291  0D6A  00E6               	movwf	PGMInit@state
  7292                           
  7293                           ;PGM.c: 26: switch(state)
  7294  0D6B  2D77               	goto	l3599
  7295  0D6C                     l3589:	
  7296                           ;PGM.c: 27: {
  7297                           ;PGM.c: 28: case 0:
  7298                           
  7299                           
  7300                           ;PGM.c: 30: T1CON=0b00000001;
  7301  0D6C  3001               	movlw	1
  7302  0D6D  0098               	movwf	24	;volatile
  7303                           
  7304                           ;PGM.c: 31: break;
  7305  0D6E  0008               	return
  7306  0D6F                     l3591:	
  7307                           ;PGM.c: 32: case 1:
  7308                           
  7309                           
  7310                           ;PGM.c: 34: tmrPgm=0;
  7311  0D6F  01EC               	clrf	_tmrPgm
  7312                           
  7313                           ;PGM.c: 35: pgm_flg.val=0;
  7314  0D70  01EB               	clrf	_pgm_flg
  7315                           
  7316                           ;PGM.c: 36: PGMReadNvm();
  7317  0D71  318D  2505  318D   	fcall	_PGMReadNvm
  7318                           
  7319                           ;PGM.c: 37: PGMCheckNvm();
  7320  0D74  318C  24A0         	fcall	_PGMCheckNvm
  7321                           
  7322                           ;PGM.c: 42: }
  7323                           
  7324                           ;PGM.c: 38: break;
  7325  0D76  0008               	return
  7326  0D77                     l3599:	
  7327  0D77  0020               	movlb	0	; select bank0
  7328  0D78  0866               	movf	PGMInit@state,w
  7329                           
  7330                           ; Switch size 1, requested type "space"
  7331                           ; Number of cases is 2, Range of values is 0 to 1
  7332                           ; switch strategies available:
  7333                           ; Name         Instructions Cycles
  7334                           ; simple_byte            7     4 (average)
  7335                           ; direct_byte           10     6 (fixed)
  7336                           ; jumptable            260     6 (fixed)
  7337                           ;	Chosen strategy is simple_byte
  7338  0D79  3A00               	xorlw	0	; case 0
  7339  0D7A  1903               	skipnz
  7340  0D7B  2D6C               	goto	l3589
  7341  0D7C  3A01               	xorlw	1	; case 1
  7342  0D7D  1903               	skipnz
  7343  0D7E  2D6F               	goto	l3591
  7344  0D7F  2D80               	goto	l378
  7345  0D80                     l378:	
  7346  0D80  0008               	return
  7347  0D81                     __end_of_PGMInit:	
  7348                           
  7349                           	psect	text40
  7350  0CA0                     __ptext40:	
  7351 ;; *************** function _PGMCheckNvm *****************
  7352 ;; Defined at:
  7353 ;;		line 74 in file "PGM.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;		None               void
  7360 ;; Registers used:
  7361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;Total ram usage:        0 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    5
  7374 ;; This function calls:
  7375 ;;		_PGMNvmReset
  7376 ;; This function is called by:
  7377 ;;		_PGMInit
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           
  7382                           ;psect for function _PGMCheckNvm
  7383  0CA0                     _PGMCheckNvm:	
  7384                           
  7385                           ;PGM.c: 75: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  7386                           
  7387                           ;incstack = 0
  7388                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7389  0CA0  0021               	movlb	1	; select bank1
  7390  0CA1  0845               	movf	_pgm_cfg^(0+128),w
  7391  0CA2  3AC5               	xorlw	197
  7392  0CA3  1D03               	skipz
  7393  0CA4  2CA9               	goto	l3605
  7394  0CA5  0846               	movf	(_pgm_cfg^(0+128)+1),w
  7395  0CA6  3A5C               	xorlw	92
  7396  0CA7  1903               	skipnz
  7397  0CA8  0008               	return
  7398  0CA9                     l3605:	
  7399                           
  7400                           ;PGM.c: 76: PGMNvmReset();
  7401  0CA9  318D  252B         	fcall	_PGMNvmReset
  7402  0CAB  0008               	return
  7403  0CAC                     __end_of_PGMCheckNvm:	
  7404                           
  7405                           	psect	text41
  7406  0D2B                     __ptext41:	
  7407 ;; *************** function _PGMNvmReset *****************
  7408 ;; Defined at:
  7409 ;;		line 80 in file "PGM.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;		None
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;		None
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;Total ram usage:        1 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    4
  7430 ;; This function calls:
  7431 ;;		_PGMWriteNvm
  7432 ;; This function is called by:
  7433 ;;		_PGMCheckNvm
  7434 ;; This function uses a non-reentrant model
  7435 ;;
  7436                           
  7437                           
  7438                           ;psect for function _PGMNvmReset
  7439  0D2B                     _PGMNvmReset:	
  7440                           
  7441                           ;PGM.c: 82: pgm_cfg.valChk1=0xC5;
  7442                           
  7443                           ;incstack = 0
  7444                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7445  0D2B  30C5               	movlw	197
  7446  0D2C  0020               	movlb	0	; select bank0
  7447  0D2D  00E5               	movwf	??_PGMNvmReset
  7448  0D2E  0865               	movf	??_PGMNvmReset,w
  7449  0D2F  0021               	movlb	1	; select bank1
  7450  0D30  00C5               	movwf	_pgm_cfg^(0+128)
  7451                           
  7452                           ;PGM.c: 83: pgm_cfg.valChk2=0x5C;
  7453  0D31  305C               	movlw	92
  7454  0D32  0020               	movlb	0	; select bank0
  7455  0D33  00E5               	movwf	??_PGMNvmReset
  7456  0D34  0865               	movf	??_PGMNvmReset,w
  7457  0D35  0021               	movlb	1	; select bank1
  7458  0D36  00C6               	movwf	(_pgm_cfg^(0+128)+1)
  7459                           
  7460                           ;PGM.c: 84: pgm_cfg.menu=0x00;
  7461  0D37  01C7               	clrf	(_pgm_cfg^(0+128)+2)
  7462                           
  7463                           ;PGM.c: 85: pgm_cfg.sensId=0x00;
  7464  0D38  01C8               	clrf	(_pgm_cfg^(0+128)+3)
  7465                           
  7466                           ;PGM.c: 86: pgm_cfg.baseId=0x00;
  7467  0D39  01C9               	clrf	(_pgm_cfg^(0+128)+4)
  7468                           
  7469                           ;PGM.c: 88: PGMWriteNvm();
  7470  0D3A  318D  2518         	fcall	_PGMWriteNvm
  7471  0D3C  0001               	reset	;# 
  7472  0D3D  0008               	return
  7473  0D3E                     __end_of_PGMNvmReset:	
  7474                           
  7475                           	psect	text42
  7476  0D18                     __ptext42:	
  7477 ;; *************** function _PGMWriteNvm *****************
  7478 ;; Defined at:
  7479 ;;		line 69 in file "PGM.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;		None
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;		None
  7484 ;; Return value:  Size  Location     Type
  7485 ;;		None               void
  7486 ;; Registers used:
  7487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;Total ram usage:        4 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    3
  7500 ;; This function calls:
  7501 ;;		_NVMWrite
  7502 ;; This function is called by:
  7503 ;;		_PGMNvmReset
  7504 ;;		_PGMSelDown
  7505 ;;		_PGMSelLong
  7506 ;;		_RTXReadPkt
  7507 ;; This function uses a non-reentrant model
  7508 ;;
  7509                           
  7510                           
  7511                           ;psect for function _PGMWriteNvm
  7512  0D18                     _PGMWriteNvm:	
  7513                           
  7514                           ;PGM.c: 70: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  7515                           
  7516                           ;incstack = 0
  7517                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7518  0D18  3001               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  7519  0D19  00F8               	movwf	??_PGMWriteNvm
  7520  0D1A  3088               	movlw	(high __stringtab)| (0+128)
  7521  0D1B  00F9               	movwf	??_PGMWriteNvm+1
  7522  0D1C  0878               	movf	??_PGMWriteNvm,w
  7523  0D1D  00F1               	movwf	?_NVMWrite
  7524  0D1E  0879               	movf	??_PGMWriteNvm+1,w
  7525  0D1F  00F2               	movwf	?_NVMWrite+1
  7526  0D20  30C5               	movlw	_pgm_cfg& (0+255)
  7527  0D21  00FA               	movwf	??_PGMWriteNvm+2
  7528  0D22  087A               	movf	??_PGMWriteNvm+2,w
  7529  0D23  00F3               	movwf	?_NVMWrite+2
  7530  0D24  3005               	movlw	5
  7531  0D25  00FB               	movwf	??_PGMWriteNvm+3
  7532  0D26  087B               	movf	??_PGMWriteNvm+3,w
  7533  0D27  00F4               	movwf	?_NVMWrite+3
  7534  0D28  3182  2283         	fcall	_NVMWrite
  7535  0D2A  0008               	return
  7536  0D2B                     __end_of_PGMWriteNvm:	
  7537                           
  7538                           	psect	text43
  7539  0283                     __ptext43:	
  7540 ;; *************** function _NVMWrite *****************
  7541 ;; Defined at:
  7542 ;;		line 39 in file "NVM.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  addr            2    1[COMMON] unsigned short 
  7545 ;;  source          1    3[COMMON] PTR unsigned char 
  7546 ;;		 -> pgm_cfg(5), 
  7547 ;;  len             1    4[COMMON] unsigned char 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  7550 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  7551 ;;  j               1   68[BANK0 ] unsigned char 
  7552 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  7553 ;;  i               1   66[BANK0 ] unsigned char 
  7554 ;; Return value:  Size  Location     Type
  7555 ;;		None               void
  7556 ;; Registers used:
  7557 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7563 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;Total ram usage:       76 bytes
  7568 ;; Hardware stack levels used:    1
  7569 ;; Hardware stack levels required when called:    2
  7570 ;; This function calls:
  7571 ;;		Nothing
  7572 ;; This function is called by:
  7573 ;;		_PGMWriteNvm
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           
  7578                           ;psect for function _NVMWrite
  7579  0283                     _NVMWrite:	
  7580                           
  7581                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  7582                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  7583                           ;NVM.c: 43: INTCONbits.GIE=0;
  7584                           
  7585                           ;incstack = 0
  7586                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7587  0283  138B               	bcf	11,7	;volatile
  7588                           
  7589                           ;NVM.c: 44: PMCON1bits.WREN=1;
  7590  0284  0023               	movlb	3	; select bank3
  7591  0285  1515               	bsf	21,2	;volatile
  7592                           
  7593                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  7594  0286  1315               	bcf	21,6	;volatile
  7595                           
  7596                           ;NVM.c: 48: i=0;
  7597  0287  0020               	movlb	0	; select bank0
  7598  0288  01E2               	clrf	NVMWrite@i
  7599                           
  7600                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  7601  0289  30E0               	movlw	224
  7602  028A  0571               	andwf	NVMWrite@addr,w
  7603  028B  00E0               	movwf	NVMWrite@rowAddr
  7604  028C  30FF               	movlw	255
  7605  028D  0572               	andwf	NVMWrite@addr+1,w
  7606  028E  00E1               	movwf	NVMWrite@rowAddr+1
  7607                           
  7608                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  7609  028F  0871               	movf	NVMWrite@addr,w
  7610  0290  391F               	andlw	31
  7611  0291  00F5               	movwf	??_NVMWrite
  7612  0292  0875               	movf	??_NVMWrite,w
  7613  0293  00E3               	movwf	NVMWrite@latchAddr
  7614  0294                     l247:	
  7615                           ;NVM.c: 52: while(i<len)
  7616                           
  7617  0294  0874               	movf	NVMWrite@len,w
  7618  0295  0262               	subwf	NVMWrite@i,w
  7619  0296  1803               	btfsc	3,0
  7620  0297  2B3D               	goto	l267
  7621  0298  0064               	clrwdt	;# 
  7622                           
  7623                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  7624  0299  0020               	movlb	0	; select bank0
  7625  029A  01E4               	clrf	NVMWrite@j
  7626  029B  3020               	movlw	32
  7627  029C  0264               	subwf	NVMWrite@j,w
  7628  029D  1803               	btfsc	3,0
  7629  029E  2AC3               	goto	l250
  7630  029F                     l249:	
  7631  029F  0064               	clrwdt	;# 
  7632                           
  7633                           ;NVM.c: 60: PMADR=(rowAddr+j);
  7634  02A0  0020               	movlb	0	; select bank0
  7635  02A1  0864               	movf	NVMWrite@j,w
  7636  02A2  0760               	addwf	NVMWrite@rowAddr,w
  7637  02A3  00F5               	movwf	??_NVMWrite
  7638  02A4  0861               	movf	NVMWrite@rowAddr+1,w
  7639  02A5  1803               	skipnc
  7640  02A6  0A61               	incf	NVMWrite@rowAddr+1,w
  7641  02A7  00F6               	movwf	??_NVMWrite+1
  7642  02A8  0875               	movf	??_NVMWrite,w
  7643  02A9  0023               	movlb	3	; select bank3
  7644  02AA  0091               	movwf	17	;volatile
  7645  02AB  0876               	movf	??_NVMWrite+1,w
  7646  02AC  0092               	movwf	18	;volatile
  7647                           
  7648                           ;NVM.c: 61: PMCON1bits.RD=1;
  7649  02AD  1415               	bsf	21,0	;volatile
  7650  02AE                     l251:	
  7651                           ;NVM.c: 62: while(PMCON1bits.RD);
  7652                           
  7653  02AE  1815               	btfsc	21,0	;volatile
  7654  02AF  2AAE               	goto	l251
  7655                           
  7656                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  7657  02B0  0020               	movlb	0	; select bank0
  7658  02B1  3564               	lslf	NVMWrite@j,w
  7659  02B2  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  7660  02B3  0086               	movwf	6
  7661  02B4  0187               	clrf	7
  7662  02B5  0023               	movlb	3	; select bank3
  7663  02B6  0813               	movf	19,w	;volatile
  7664  02B7  3FC0               	movwi [0]fsr1
  7665  02B8  0814               	movf	20,w	;volatile
  7666  02B9  3FC1               	movwi [1]fsr1
  7667  02BA  3001               	movlw	1
  7668  02BB  00F5               	movwf	??_NVMWrite
  7669  02BC  0875               	movf	??_NVMWrite,w
  7670  02BD  0020               	movlb	0	; select bank0
  7671  02BE  07E4               	addwf	NVMWrite@j,f
  7672  02BF  3020               	movlw	32
  7673  02C0  0264               	subwf	NVMWrite@j,w
  7674  02C1  1C03               	skipc
  7675  02C2  2A9F               	goto	l249
  7676  02C3                     l250:	
  7677                           
  7678                           ;NVM.c: 64: }
  7679                           ;NVM.c: 67: PMCON1bits.FREE=1;
  7680  02C3  0023               	movlb	3	; select bank3
  7681  02C4  1615               	bsf	21,4	;volatile
  7682                           
  7683                           ;NVM.c: 68: PMADR=rowAddr;
  7684  02C5  0020               	movlb	0	; select bank0
  7685  02C6  0861               	movf	NVMWrite@rowAddr+1,w
  7686  02C7  0023               	movlb	3	; select bank3
  7687  02C8  0192               	clrf	18	;volatile
  7688  02C9  0792               	addwf	18,f	;volatile
  7689  02CA  0020               	movlb	0	; select bank0
  7690  02CB  0860               	movf	NVMWrite@rowAddr,w
  7691  02CC  0023               	movlb	3	; select bank3
  7692  02CD  0191               	clrf	17	;volatile
  7693  02CE  0791               	addwf	17,f	;volatile
  7694                           
  7695                           ;NVM.c: 69: PMCON2=0x55;
  7696  02CF  3055               	movlw	85
  7697  02D0  0096               	movwf	22	;volatile
  7698                           
  7699                           ;NVM.c: 70: PMCON2=0xAA;
  7700  02D1  30AA               	movlw	170
  7701  02D2  0096               	movwf	22	;volatile
  7702                           
  7703                           ;NVM.c: 71: PMCON1bits.WR=1;
  7704  02D3  1495               	bsf	21,1	;volatile
  7705  02D4                     l254:	
  7706                           ;NVM.c: 72: while(PMCON1bits.WR);
  7707                           
  7708  02D4  1895               	btfsc	21,1	;volatile
  7709  02D5  2AD4               	goto	l254
  7710                           
  7711                           ;NVM.c: 73: _nop();
  7712  02D6  0000               	nop
  7713                           
  7714                           ;NVM.c: 74: _nop();
  7715  02D7  0000               	nop
  7716                           
  7717                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  7718  02D8  3020               	movlw	32
  7719  02D9  0020               	movlb	0	; select bank0
  7720  02DA  0263               	subwf	NVMWrite@latchAddr,w
  7721  02DB  1803               	btfsc	3,0
  7722  02DC  2B00               	goto	l2677
  7723  02DD                     l257:	
  7724  02DD  0064               	clrwdt	;# 
  7725                           
  7726                           ;NVM.c: 81: if(i>=len)
  7727  02DE  0874               	movf	NVMWrite@len,w
  7728  02DF  0020               	movlb	0	; select bank0
  7729  02E0  0262               	subwf	NVMWrite@i,w
  7730  02E1  1803               	btfsc	3,0
  7731  02E2  2B00               	goto	l2677
  7732                           
  7733                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  7734                           
  7735                           ;NVM.c: 82: break;
  7736  02E3  0862               	movf	NVMWrite@i,w
  7737  02E4  0773               	addwf	NVMWrite@source,w
  7738  02E5  00F5               	movwf	??_NVMWrite
  7739  02E6  0875               	movf	??_NVMWrite,w
  7740  02E7  0086               	movwf	6
  7741  02E8  0187               	clrf	7
  7742  02E9  0801               	movf	1,w
  7743  02EA  00F6               	movwf	??_NVMWrite+1
  7744  02EB  01F7               	clrf	??_NVMWrite+2
  7745  02EC  3563               	lslf	NVMWrite@latchAddr,w
  7746  02ED  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  7747  02EE  0086               	movwf	6
  7748  02EF  0187               	clrf	7
  7749  02F0  0876               	movf	??_NVMWrite+1,w
  7750  02F1  3FC0               	movwi [0]fsr1
  7751  02F2  0877               	movf	??_NVMWrite+2,w
  7752  02F3  3FC1               	movwi [1]fsr1
  7753                           
  7754                           ;NVM.c: 85: i++;
  7755  02F4  3001               	movlw	1
  7756  02F5  00F5               	movwf	??_NVMWrite
  7757  02F6  0875               	movf	??_NVMWrite,w
  7758  02F7  07E2               	addwf	NVMWrite@i,f
  7759  02F8  3001               	movlw	1
  7760  02F9  00F5               	movwf	??_NVMWrite
  7761  02FA  0875               	movf	??_NVMWrite,w
  7762  02FB  07E3               	addwf	NVMWrite@latchAddr,f
  7763  02FC  3020               	movlw	32
  7764  02FD  0263               	subwf	NVMWrite@latchAddr,w
  7765  02FE  1C03               	skipc
  7766  02FF  2ADD               	goto	l257
  7767  0300                     l2677:	
  7768                           
  7769                           ;NVM.c: 86: }
  7770                           ;NVM.c: 88: latchAddr=0;
  7771  0300  01E3               	clrf	NVMWrite@latchAddr
  7772                           
  7773                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  7774  0301  01E4               	clrf	NVMWrite@j
  7775  0302  3020               	movlw	32
  7776  0303  0264               	subwf	NVMWrite@j,w
  7777  0304  1803               	btfsc	3,0
  7778  0305  2B38               	goto	l2699
  7779  0306                     l2683:	
  7780                           
  7781                           ;NVM.c: 92: {
  7782                           ;NVM.c: 94: PMADR=(rowAddr+j);
  7783  0306  0864               	movf	NVMWrite@j,w
  7784  0307  0760               	addwf	NVMWrite@rowAddr,w
  7785  0308  00F5               	movwf	??_NVMWrite
  7786  0309  0861               	movf	NVMWrite@rowAddr+1,w
  7787  030A  1803               	skipnc
  7788  030B  0A61               	incf	NVMWrite@rowAddr+1,w
  7789  030C  00F6               	movwf	??_NVMWrite+1
  7790  030D  0875               	movf	??_NVMWrite,w
  7791  030E  0023               	movlb	3	; select bank3
  7792  030F  0091               	movwf	17	;volatile
  7793  0310  0876               	movf	??_NVMWrite+1,w
  7794  0311  0092               	movwf	18	;volatile
  7795                           
  7796                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  7797  0312  0020               	movlb	0	; select bank0
  7798  0313  3564               	lslf	NVMWrite@j,w
  7799  0314  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  7800  0315  0086               	movwf	6
  7801  0316  0187               	clrf	7
  7802  0317  3F40               	moviw [0]fsr1
  7803  0318  0023               	movlb	3	; select bank3
  7804  0319  0093               	movwf	19	;volatile
  7805  031A  3F41               	moviw [1]fsr1
  7806  031B  0094               	movwf	20	;volatile
  7807                           
  7808                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  7809  031C  0020               	movlb	0	; select bank0
  7810  031D  0864               	movf	NVMWrite@j,w
  7811  031E  3A1F               	xorlw	31
  7812  031F  1D03               	skipz
  7813  0320  2B24               	goto	l262
  7814                           
  7815                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  7816  0321  0023               	movlb	3	; select bank3
  7817  0322  1295               	bcf	21,5	;volatile
  7818  0323  2B26               	goto	l2691
  7819  0324                     l262:	
  7820                           
  7821                           ;NVM.c: 99: else
  7822                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  7823  0324  0023               	movlb	3	; select bank3
  7824  0325  1695               	bsf	21,5	;volatile
  7825  0326                     l2691:	
  7826                           
  7827                           ;NVM.c: 101: PMCON2=0x55;
  7828  0326  3055               	movlw	85
  7829  0327  0096               	movwf	22	;volatile
  7830                           
  7831                           ;NVM.c: 102: PMCON2=0xAA;
  7832  0328  30AA               	movlw	170
  7833  0329  0096               	movwf	22	;volatile
  7834                           
  7835                           ;NVM.c: 103: PMCON1bits.WR=1;
  7836  032A  1495               	bsf	21,1	;volatile
  7837  032B                     l264:	
  7838                           ;NVM.c: 104: while(PMCON1bits.WR);
  7839                           
  7840  032B  1895               	btfsc	21,1	;volatile
  7841  032C  2B2B               	goto	l264
  7842                           
  7843                           ;NVM.c: 105: _nop();
  7844  032D  0000               	nop
  7845                           
  7846                           ;NVM.c: 106: _nop();
  7847  032E  0000               	nop
  7848  032F  3001               	movlw	1
  7849  0330  00F5               	movwf	??_NVMWrite
  7850  0331  0875               	movf	??_NVMWrite,w
  7851  0332  0020               	movlb	0	; select bank0
  7852  0333  07E4               	addwf	NVMWrite@j,f
  7853  0334  3020               	movlw	32
  7854  0335  0264               	subwf	NVMWrite@j,w
  7855  0336  1C03               	skipc
  7856  0337  2B06               	goto	l2683
  7857  0338                     l2699:	
  7858                           
  7859                           ;NVM.c: 107: }
  7860                           ;NVM.c: 109: rowAddr+=0x0020;
  7861  0338  3020               	movlw	32
  7862  0339  07E0               	addwf	NVMWrite@rowAddr,f
  7863  033A  3000               	movlw	0
  7864  033B  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  7865  033C  2A94               	goto	l247
  7866  033D                     l267:	
  7867                           
  7868                           ;NVM.c: 110: }
  7869                           ;NVM.c: 112: INTCONbits.GIE=1;
  7870  033D  178B               	bsf	11,7	;volatile
  7871                           
  7872                           ;NVM.c: 113: PMCON1bits.WREN=0;
  7873  033E  0023               	movlb	3	; select bank3
  7874  033F  1115               	bcf	21,2	;volatile
  7875  0340  0008               	return
  7876  0341                     __end_of_NVMWrite:	
  7877                           
  7878                           	psect	text44
  7879  0D05                     __ptext44:	
  7880 ;; *************** function _PGMReadNvm *****************
  7881 ;; Defined at:
  7882 ;;		line 64 in file "PGM.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;		None
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;		None
  7887 ;; Return value:  Size  Location     Type
  7888 ;;		None               void
  7889 ;; Registers used:
  7890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;Total ram usage:        4 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    3
  7903 ;; This function calls:
  7904 ;;		_NVMRead
  7905 ;; This function is called by:
  7906 ;;		_PGMInit
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _PGMReadNvm
  7912  0D05                     _PGMReadNvm:	
  7913                           
  7914                           ;PGM.c: 65: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7918  0D05  3001               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  7919  0D06  00F8               	movwf	??_PGMReadNvm
  7920  0D07  3088               	movlw	(high __stringtab)| (0+128)
  7921  0D08  00F9               	movwf	??_PGMReadNvm+1
  7922  0D09  0878               	movf	??_PGMReadNvm,w
  7923  0D0A  00F1               	movwf	?_NVMRead
  7924  0D0B  0879               	movf	??_PGMReadNvm+1,w
  7925  0D0C  00F2               	movwf	?_NVMRead+1
  7926  0D0D  30C5               	movlw	_pgm_cfg& (0+255)
  7927  0D0E  00FA               	movwf	??_PGMReadNvm+2
  7928  0D0F  087A               	movf	??_PGMReadNvm+2,w
  7929  0D10  00F3               	movwf	?_NVMRead+2
  7930  0D11  3005               	movlw	5
  7931  0D12  00FB               	movwf	??_PGMReadNvm+3
  7932  0D13  087B               	movf	??_PGMReadNvm+3,w
  7933  0D14  00F4               	movwf	?_NVMRead+3
  7934  0D15  318F  2760         	fcall	_NVMRead
  7935  0D17  0008               	return
  7936  0D18                     __end_of_PGMReadNvm:	
  7937                           
  7938                           	psect	text45
  7939  0F60                     __ptext45:	
  7940 ;; *************** function _NVMRead *****************
  7941 ;; Defined at:
  7942 ;;		line 24 in file "NVM.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  addr            2    1[COMMON] unsigned short 
  7945 ;;  dest            1    3[COMMON] PTR unsigned char 
  7946 ;;		 -> pgm_cfg(5), 
  7947 ;;  len             1    4[COMMON] unsigned char 
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;  i               1    7[COMMON] unsigned char 
  7950 ;; Return value:  Size  Location     Type
  7951 ;;		None               void
  7952 ;; Registers used:
  7953 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7954 ;; Tracked objects:
  7955 ;;		On entry : 0/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7959 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;Total ram usage:        7 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:    2
  7966 ;; This function calls:
  7967 ;;		Nothing
  7968 ;; This function is called by:
  7969 ;;		_PGMReadNvm
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           
  7974                           ;psect for function _NVMRead
  7975  0F60                     _NVMRead:	
  7976                           
  7977                           ;NVM.c: 25: unsigned char i;
  7978                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  7982  0F60  0023               	movlb	3	; select bank3
  7983  0F61  1315               	bcf	21,6	;volatile
  7984                           
  7985                           ;NVM.c: 28: for(i=0;i<len;i++)
  7986  0F62  01F7               	clrf	NVMRead@i
  7987  0F63                     l2629:	
  7988  0F63  0874               	movf	NVMRead@len,w
  7989  0F64  0277               	subwf	NVMRead@i,w
  7990  0F65  1803               	btfsc	3,0
  7991  0F66  0008               	return
  7992  0F67  0064               	clrwdt	;# 
  7993                           
  7994                           ;NVM.c: 31: PMADR=(addr+i);
  7995  0F68  0877               	movf	NVMRead@i,w
  7996  0F69  0771               	addwf	NVMRead@addr,w
  7997  0F6A  00F5               	movwf	??_NVMRead
  7998  0F6B  0872               	movf	NVMRead@addr+1,w
  7999  0F6C  1803               	skipnc
  8000  0F6D  0A72               	incf	NVMRead@addr+1,w
  8001  0F6E  00F6               	movwf	??_NVMRead+1
  8002  0F6F  0875               	movf	??_NVMRead,w
  8003  0F70  0023               	movlb	3	; select bank3
  8004  0F71  0091               	movwf	17	;volatile
  8005  0F72  0876               	movf	??_NVMRead+1,w
  8006  0F73  0092               	movwf	18	;volatile
  8007                           
  8008                           ;NVM.c: 32: PMCON1bits.RD=1;
  8009  0F74  1415               	bsf	21,0	;volatile
  8010  0F75                     l240:	
  8011                           ;NVM.c: 33: while(PMCON1bits.RD);
  8012                           
  8013  0F75  1815               	btfsc	21,0	;volatile
  8014  0F76  2F75               	goto	l240
  8015                           
  8016                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  8017  0F77  0813               	movf	19,w	;volatile
  8018  0F78  00F5               	movwf	??_NVMRead
  8019  0F79  0877               	movf	NVMRead@i,w
  8020  0F7A  0773               	addwf	NVMRead@dest,w
  8021  0F7B  00F6               	movwf	??_NVMRead+1
  8022  0F7C  0876               	movf	??_NVMRead+1,w
  8023  0F7D  0086               	movwf	6
  8024  0F7E  0187               	clrf	7
  8025  0F7F  0875               	movf	??_NVMRead,w
  8026  0F80  0081               	movwf	1
  8027  0F81  3001               	movlw	1
  8028  0F82  00F5               	movwf	??_NVMRead
  8029  0F83  0875               	movf	??_NVMRead,w
  8030  0F84  07F7               	addwf	NVMRead@i,f
  8031  0F85  2F63               	goto	l2629
  8032  0F86                     __end_of_NVMRead:	
  8033                           
  8034                           	psect	text46
  8035  0E3E                     __ptext46:	
  8036 ;; *************** function _DINTask *****************
  8037 ;; Defined at:
  8038 ;;		line 80 in file "DIN.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;		None
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;		None               void
  8045 ;; Registers used:
  8046 ;;		wreg, status,2, status,0
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8056 ;;Total ram usage:        1 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    2
  8059 ;; This function calls:
  8060 ;;		Nothing
  8061 ;; This function is called by:
  8062 ;;		_main
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           
  8067                           ;psect for function _DINTask
  8068  0E3E                     _DINTask:	
  8069                           
  8070                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  8071                           
  8072                           ;incstack = 0
  8073                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  8074  0E3E  0020               	movlb	0	; select bank0
  8075  0E3F  01EF               	clrf	_u_in_sta_tmpTask
  8076                           
  8077                           ;DIN.c: 82: if(!PORTBbits.RB2)
  8078  0E40  1D0D               	btfss	13,2	;volatile
  8079                           
  8080                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  8081  0E41  146F               	bsf	_u_in_sta_tmpTask,0
  8082                           
  8083                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  8084  0E42  086F               	movf	_u_in_sta_tmpTask,w
  8085  0E43  3901               	andlw	1
  8086  0E44  00F1               	movwf	??_DINTask
  8087  0E45  087C               	movf	_u_in_sta_currTask,w
  8088  0E46  3901               	andlw	1
  8089  0E47  0671               	xorwf	??_DINTask,w
  8090  0E48  1903               	skipnz
  8091  0E49  2E52               	goto	l2743
  8092                           
  8093                           ;DIN.c: 87: {
  8094                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  8095  0E4A  107C               	bcf	_u_in_sta_currTask,0
  8096  0E4B  1C6F               	btfss	_u_in_sta_tmpTask,0
  8097  0E4C  2E4E               	goto	l2739
  8098  0E4D  147C               	bsf	_u_in_sta_currTask,0
  8099  0E4E                     l2739:	
  8100                           
  8101                           ;DIN.c: 89: tmrDbncSel=0;
  8102  0E4E  0021               	movlb	1	; select bank1
  8103  0E4F  01AE               	clrf	_tmrDbncSel^(0+128)
  8104                           
  8105                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  8106  0E50  0020               	movlb	0	; select bank0
  8107  0E51  146E               	bsf	_u_flg_din,0
  8108  0E52                     l2743:	
  8109                           
  8110                           ;DIN.c: 91: }
  8111                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  8112  0E52  1C7C               	btfss	_u_in_sta_currTask,0
  8113  0E53  2E56               	goto	l2747
  8114                           
  8115                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  8116  0E54  14EE               	bsf	_u_flg_din,1
  8117  0E55  0008               	return
  8118  0E56                     l2747:	
  8119                           
  8120                           ;DIN.c: 96: else
  8121                           ;DIN.c: 97: {
  8122                           ;DIN.c: 98: tmrLongSel=0;
  8123  0E56  0021               	movlb	1	; select bank1
  8124  0E57  01A6               	clrf	_tmrLongSel^(0+128)
  8125  0E58  01A7               	clrf	(_tmrLongSel+1)^(0+128)
  8126                           
  8127                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  8128  0E59  0020               	movlb	0	; select bank0
  8129  0E5A  10EE               	bcf	_u_flg_din,1
  8130  0E5B  0008               	return
  8131  0E5C                     __end_of_DINTask:	
  8132                           
  8133                           	psect	text47
  8134  0CE3                     __ptext47:	
  8135 ;; *************** function _DINInit *****************
  8136 ;; Defined at:
  8137 ;;		line 25 in file "DIN.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  sta             1    wreg     unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  sta             1    1[COMMON] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;		None               void
  8144 ;; Registers used:
  8145 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;Total ram usage:        1 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    2
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		_main
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _DINInit
  8167  0CE3                     _DINInit:	
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  8171                           ;DINInit@sta stored from wreg
  8172  0CE3  00F1               	movwf	DINInit@sta
  8173                           
  8174                           ;DIN.c: 26: switch(sta)
  8175  0CE4  2CEE               	goto	l2707
  8176  0CE5                     l2703:	
  8177                           ;DIN.c: 27: {
  8178                           ;DIN.c: 31: case 1:
  8179                           
  8180                           
  8181                           ;DIN.c: 33: u_flg_din.val=0;
  8182  0CE5  0020               	movlb	0	; select bank0
  8183  0CE6  01EE               	clrf	_u_flg_din
  8184                           
  8185                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  8186  0CE7  01FC               	clrf	_u_in_sta_currTask
  8187                           
  8188                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  8189  0CE8  01EF               	clrf	_u_in_sta_tmpTask
  8190                           
  8191                           ;DIN.c: 36: u_in_ev_up.val=0;
  8192  0CE9  0021               	movlb	1	; select bank1
  8193  0CEA  01B2               	clrf	_u_in_ev_up^(0+128)
  8194                           
  8195                           ;DIN.c: 37: u_in_ev_down.val=0;
  8196  0CEB  01B0               	clrf	_u_in_ev_down^(0+128)
  8197                           
  8198                           ;DIN.c: 38: u_in_ev_long.val=0;
  8199  0CEC  01B1               	clrf	_u_in_ev_long^(0+128)
  8200                           
  8201                           ;DIN.c: 43: }
  8202                           
  8203                           ;DIN.c: 39: break;
  8204  0CED  0008               	return
  8205  0CEE                     l2707:	
  8206  0CEE  0871               	movf	DINInit@sta,w
  8207                           
  8208                           ; Switch size 1, requested type "space"
  8209                           ; Number of cases is 1, Range of values is 1 to 1
  8210                           ; switch strategies available:
  8211                           ; Name         Instructions Cycles
  8212                           ; simple_byte            4     3 (average)
  8213                           ; direct_byte           11     9 (fixed)
  8214                           ; jumptable            263     9 (fixed)
  8215                           ;	Chosen strategy is simple_byte
  8216  0CEF  3A01               	xorlw	1	; case 1
  8217  0CF0  1903               	skipnz
  8218  0CF1  2CE5               	goto	l2703
  8219  0CF2  2CF3               	goto	l292
  8220  0CF3                     l292:	
  8221  0CF3  0008               	return
  8222  0CF4                     __end_of_DINInit:	
  8223                           
  8224                           	psect	text48
  8225  07F5                     __ptext48:	
  8226 ;; *************** function _NVMInit *****************
  8227 ;; Defined at:
  8228 ;;		line 7 in file "NVM.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  sta             1    wreg     unsigned char 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  sta             1    1[COMMON] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;		None               void
  8235 ;; Registers used:
  8236 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:        1 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    2
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_main
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           
  8257                           ;psect for function _NVMInit
  8258  07F5                     _NVMInit:	
  8259                           
  8260                           ;incstack = 0
  8261                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  8262                           ;NVMInit@sta stored from wreg
  8263  07F5  00F1               	movwf	NVMInit@sta
  8264                           
  8265                           ;NVM.c: 8: switch(sta)
  8266  07F6  2FFA               	goto	l2615
  8267  07F7                     l2611:	
  8268                           ;NVM.c: 9: {
  8269                           ;NVM.c: 10: case 0:
  8270                           
  8271                           
  8272                           ;NVM.c: 12: PMCON1=0b00000000;
  8273  07F7  0023               	movlb	3	; select bank3
  8274  07F8  0195               	clrf	21	;volatile
  8275                           
  8276                           ;NVM.c: 20: }
  8277                           
  8278                           ;NVM.c: 13: break;
  8279  07F9  0008               	return
  8280  07FA                     l2615:	
  8281  07FA  0871               	movf	NVMInit@sta,w
  8282                           
  8283                           ; Switch size 1, requested type "space"
  8284                           ; Number of cases is 1, Range of values is 0 to 0
  8285                           ; switch strategies available:
  8286                           ; Name         Instructions Cycles
  8287                           ; simple_byte            4     3 (average)
  8288                           ; direct_byte            8     6 (fixed)
  8289                           ; jumptable            260     6 (fixed)
  8290                           ;	Chosen strategy is simple_byte
  8291  07FB  3A00               	xorlw	0	; case 0
  8292  07FC  1903               	skipnz
  8293  07FD  2FF7               	goto	l2611
  8294  07FE  2FFF               	goto	l235
  8295  07FF                     l235:	
  8296  07FF  0008               	return
  8297  0800                     __end_of_NVMInit:	
  8298                           
  8299                           	psect	text49
  8300  0C95                     __ptext49:	
  8301 ;; *************** function _LEDInit *****************
  8302 ;; Defined at:
  8303 ;;		line 8 in file "LED.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  sta             1    wreg     unsigned char 
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;  sta             1    1[COMMON] unsigned char 
  8308 ;; Return value:  Size  Location     Type
  8309 ;;		None               void
  8310 ;; Registers used:
  8311 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8312 ;; Tracked objects:
  8313 ;;		On entry : 0/0
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;Total ram usage:        1 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:    2
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_main
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           
  8332                           ;psect for function _LEDInit
  8333  0C95                     _LEDInit:	
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  8337                           ;LEDInit@sta stored from wreg
  8338  0C95  00F1               	movwf	LEDInit@sta
  8339                           
  8340                           ;LED.c: 9: switch(sta)
  8341  0C96  2C9A               	goto	l2577
  8342  0C97                     l195:	
  8343                           ;LED.c: 10: {
  8344                           ;LED.c: 17: case 2:
  8345                           
  8346                           
  8347                           ;LED.c: 19: PORTCbits.RC7=1;
  8348  0C97  0020               	movlb	0	; select bank0
  8349  0C98  178E               	bsf	14,7	;volatile
  8350                           
  8351                           ;LED.c: 21: }
  8352                           
  8353                           ;LED.c: 20: break;
  8354  0C99  0008               	return
  8355  0C9A                     l2577:	
  8356  0C9A  0871               	movf	LEDInit@sta,w
  8357                           
  8358                           ; Switch size 1, requested type "space"
  8359                           ; Number of cases is 1, Range of values is 2 to 2
  8360                           ; switch strategies available:
  8361                           ; Name         Instructions Cycles
  8362                           ; simple_byte            4     3 (average)
  8363                           ; direct_byte           11     9 (fixed)
  8364                           ; jumptable            263     9 (fixed)
  8365                           ;	Chosen strategy is simple_byte
  8366  0C9B  3A02               	xorlw	2	; case 2
  8367  0C9C  1903               	skipnz
  8368  0C9D  2C97               	goto	l195
  8369  0C9E  2C9F               	goto	l197
  8370  0C9F                     l197:	
  8371  0C9F  0008               	return
  8372  0CA0                     __end_of_LEDInit:	
  8373                           
  8374                           	psect	text50
  8375  0FD4                     __ptext50:	
  8376 ;; *************** function _ADCInit *****************
  8377 ;; Defined at:
  8378 ;;		line 26 in file "ADC.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;  state           1    wreg     unsigned char 
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;  state           1    2[COMMON] unsigned char 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;		None               void
  8385 ;; Registers used:
  8386 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:        2 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    2
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_main
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _ADCInit
  8408  0FD4                     _ADCInit:	
  8409                           
  8410                           ;incstack = 0
  8411                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  8412                           ;ADCInit@state stored from wreg
  8413  0FD4  00F2               	movwf	ADCInit@state
  8414                           
  8415                           ;ADC.c: 27: switch(state)
  8416  0FD5  2FF7               	goto	l2453
  8417  0FD6                     l2441:	
  8418                           ;ADC.c: 28: {
  8419                           ;ADC.c: 29: case 0:
  8420                           
  8421                           
  8422                           ;ADC.c: 31: ADCON0=0b00101101; ADCON1=0b00000011; FVRCON=0b10000001; ANSELB|=0b00010010;;
  8423  0FD6  302D               	movlw	45
  8424  0FD7  0021               	movlb	1	; select bank1
  8425  0FD8  009D               	movwf	29	;volatile
  8426  0FD9  3003               	movlw	3
  8427  0FDA  009E               	movwf	30	;volatile
  8428  0FDB  3081               	movlw	129
  8429  0FDC  0022               	movlb	2	; select bank2
  8430  0FDD  0097               	movwf	23	;volatile
  8431  0FDE  3012               	movlw	18
  8432  0FDF  00F1               	movwf	??_ADCInit
  8433  0FE0  0871               	movf	??_ADCInit,w
  8434  0FE1  0023               	movlb	3	; select bank3
  8435  0FE2  048D               	iorwf	13,f	;volatile
  8436                           
  8437                           ;ADC.c: 32: break;
  8438  0FE3  0008               	return
  8439  0FE4                     l2445:	
  8440                           ;ADC.c: 33: case 1:
  8441                           
  8442                           
  8443                           ;ADC.c: 35: adc_ch=ADC_CH_BATT;
  8444  0FE4  0021               	movlb	1	; select bank1
  8445  0FE5  01A8               	clrf	_adc_ch^(0+128)
  8446                           
  8447                           ;ADC.c: 36: batt=0;
  8448  0FE6  0020               	movlb	0	; select bank0
  8449  0FE7  01E9               	clrf	_batt
  8450                           
  8451                           ;ADC.c: 37: temp=0;
  8452  0FE8  0021               	movlb	1	; select bank1
  8453  0FE9  01AD               	clrf	_temp^(0+128)
  8454                           
  8455                           ;ADC.c: 38: battV=0;
  8456  0FEA  3000               	movlw	0
  8457  0FEB  00A0               	movwf	_battV^(0+128)
  8458  0FEC  3000               	movlw	0
  8459  0FED  00A1               	movwf	(_battV+1)^(0+128)
  8460  0FEE  3000               	movlw	0
  8461  0FEF  00A2               	movwf	(_battV+2)^(0+128)
  8462                           
  8463                           ;ADC.c: 39: tempC=0;
  8464  0FF0  3000               	movlw	0
  8465  0FF1  00A3               	movwf	_tempC^(0+128)
  8466  0FF2  3000               	movlw	0
  8467  0FF3  00A4               	movwf	(_tempC+1)^(0+128)
  8468  0FF4  3000               	movlw	0
  8469  0FF5  00A5               	movwf	(_tempC+2)^(0+128)
  8470                           
  8471                           ;ADC.c: 44: }
  8472                           
  8473                           ;ADC.c: 40: break;
  8474  0FF6  0008               	return
  8475  0FF7                     l2453:	
  8476  0FF7  0872               	movf	ADCInit@state,w
  8477                           
  8478                           ; Switch size 1, requested type "space"
  8479                           ; Number of cases is 2, Range of values is 0 to 1
  8480                           ; switch strategies available:
  8481                           ; Name         Instructions Cycles
  8482                           ; simple_byte            7     4 (average)
  8483                           ; direct_byte           10     6 (fixed)
  8484                           ; jumptable            260     6 (fixed)
  8485                           ;	Chosen strategy is simple_byte
  8486  0FF8  3A00               	xorlw	0	; case 0
  8487  0FF9  1903               	skipnz
  8488  0FFA  2FD6               	goto	l2441
  8489  0FFB  3A01               	xorlw	1	; case 1
  8490  0FFC  1903               	skipnz
  8491  0FFD  2FE4               	goto	l2445
  8492  0FFE  2FFF               	goto	l111
  8493  0FFF                     l111:	
  8494  0FFF  0008               	return
  8495  1000                     __end_of_ADCInit:	
  8496                           
  8497                           	psect	text51
  8498  0E20                     __ptext51:	
  8499 ;; *************** function _SPIInit *****************
  8500 ;; Defined at:
  8501 ;;		line 9 in file "SPI.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  state           1    wreg     unsigned char 
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;  state           1    2[COMMON] unsigned char 
  8506 ;; Return value:  Size  Location     Type
  8507 ;;		None               void
  8508 ;; Registers used:
  8509 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8510 ;; Tracked objects:
  8511 ;;		On entry : 0/0
  8512 ;;		On exit  : 0/0
  8513 ;;		Unchanged: 0/0
  8514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;Total ram usage:        2 bytes
  8520 ;; Hardware stack levels used:    1
  8521 ;; Hardware stack levels required when called:    2
  8522 ;; This function calls:
  8523 ;;		Nothing
  8524 ;; This function is called by:
  8525 ;;		_main
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           
  8530                           ;psect for function _SPIInit
  8531  0E20                     _SPIInit:	
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  8535                           ;SPIInit@state stored from wreg
  8536  0E20  00F2               	movwf	SPIInit@state
  8537                           
  8538                           ;SPI.c: 10: switch(state)
  8539  0E21  2E32               	goto	l2419
  8540  0E22                     l56:	
  8541                           ;SPI.c: 11: {
  8542                           ;SPI.c: 12: case 0:
  8543                           
  8544                           
  8545                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  8546  0E22  0021               	movlb	1	; select bank1
  8547  0E23  160E               	bsf	14,4	;volatile
  8548  0E24  30D7               	movlw	215
  8549  0E25  00F1               	movwf	??_SPIInit
  8550  0E26  0871               	movf	??_SPIInit,w
  8551  0E27  058E               	andwf	14,f	;volatile
  8552  0E28  0024               	movlb	4	; select bank4
  8553  0E29  1295               	bcf	21,5	;volatile
  8554  0E2A  0191               	clrf	17	;volatile
  8555  0E2B  3001               	movlw	1
  8556  0E2C  0095               	movwf	21	;volatile
  8557  0E2D  0196               	clrf	22	;volatile
  8558  0E2E  3040               	movlw	64
  8559  0E2F  0094               	movwf	20	;volatile
  8560  0E30  1695               	bsf	21,5	;volatile
  8561                           
  8562                           ;SPI.c: 22: }
  8563                           
  8564                           ;SPI.c: 21: break;
  8565                           
  8566                           ;SPI.c: 19: case 2:
  8567                           
  8568                           ;SPI.c: 18: break;
  8569                           
  8570                           ;SPI.c: 16: case 1:
  8571                           
  8572                           ;SPI.c: 15: break;
  8573  0E31  0008               	return
  8574  0E32                     l2419:	
  8575  0E32  0872               	movf	SPIInit@state,w
  8576                           
  8577                           ; Switch size 1, requested type "space"
  8578                           ; Number of cases is 3, Range of values is 0 to 2
  8579                           ; switch strategies available:
  8580                           ; Name         Instructions Cycles
  8581                           ; simple_byte           10     6 (average)
  8582                           ; direct_byte           12     6 (fixed)
  8583                           ; jumptable            260     6 (fixed)
  8584                           ;	Chosen strategy is simple_byte
  8585  0E33  3A00               	xorlw	0	; case 0
  8586  0E34  1903               	skipnz
  8587  0E35  2E22               	goto	l56
  8588  0E36  3A01               	xorlw	1	; case 1
  8589  0E37  1903               	skipnz
  8590  0E38  2E3D               	goto	l60
  8591  0E39  3A03               	xorlw	3	; case 2
  8592  0E3A  1903               	skipnz
  8593  0E3B  2E3D               	goto	l60
  8594  0E3C  2E3D               	goto	l60
  8595  0E3D                     l60:	
  8596  0E3D  0008               	return
  8597  0E3E                     __end_of_SPIInit:	
  8598                           
  8599                           	psect	text52
  8600  0E98                     __ptext52:	
  8601 ;; *************** function _OUTInit *****************
  8602 ;; Defined at:
  8603 ;;		line 7 in file "OUT.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;  sta             1    wreg     unsigned char 
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  sta             1    2[COMMON] unsigned char 
  8608 ;; Return value:  Size  Location     Type
  8609 ;;		None               void
  8610 ;; Registers used:
  8611 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        2 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    2
  8624 ;; This function calls:
  8625 ;;		Nothing
  8626 ;; This function is called by:
  8627 ;;		_main
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _OUTInit
  8633  0E98                     _OUTInit:	
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  8637                           ;OUTInit@sta stored from wreg
  8638  0E98  00F2               	movwf	OUTInit@sta
  8639                           
  8640                           ;OUT.c: 8: switch(sta)
  8641  0E99  2EB2               	goto	l2399
  8642  0E9A                     l2385:	
  8643                           ;OUT.c: 9: {
  8644                           ;OUT.c: 10: case 0:
  8645                           
  8646                           
  8647                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00010111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00010010; ANSELC&=0b00000000; PORTB&=0b11011111; PORTC|=0b10000000;
  8648  0E9A  0021               	movlb	1	; select bank1
  8649  0E9B  018C               	clrf	12	;volatile
  8650  0E9C  3017               	movlw	23
  8651  0E9D  00F1               	movwf	??_OUTInit
  8652  0E9E  0871               	movf	??_OUTInit,w
  8653  0E9F  058D               	andwf	13,f	;volatile
  8654  0EA0  3010               	movlw	16
  8655  0EA1  00F1               	movwf	??_OUTInit
  8656  0EA2  0871               	movf	??_OUTInit,w
  8657  0EA3  058E               	andwf	14,f	;volatile
  8658  0EA4  0023               	movlb	3	; select bank3
  8659  0EA5  018C               	clrf	12	;volatile
  8660  0EA6  3012               	movlw	18
  8661  0EA7  00F1               	movwf	??_OUTInit
  8662  0EA8  0871               	movf	??_OUTInit,w
  8663  0EA9  058D               	andwf	13,f	;volatile
  8664  0EAA  018E               	clrf	14	;volatile
  8665  0EAB  30DF               	movlw	223
  8666  0EAC  00F1               	movwf	??_OUTInit
  8667  0EAD  0871               	movf	??_OUTInit,w
  8668  0EAE  0020               	movlb	0	; select bank0
  8669  0EAF  058D               	andwf	13,f	;volatile
  8670  0EB0  178E               	bsf	14,7	;volatile
  8671                           
  8672                           ;OUT.c: 20: }
  8673                           
  8674                           ;OUT.c: 13: break;
  8675  0EB1  0008               	return
  8676  0EB2                     l2399:	
  8677  0EB2  0872               	movf	OUTInit@sta,w
  8678                           
  8679                           ; Switch size 1, requested type "space"
  8680                           ; Number of cases is 1, Range of values is 0 to 0
  8681                           ; switch strategies available:
  8682                           ; Name         Instructions Cycles
  8683                           ; simple_byte            4     3 (average)
  8684                           ; direct_byte            8     6 (fixed)
  8685                           ; jumptable            260     6 (fixed)
  8686                           ;	Chosen strategy is simple_byte
  8687  0EB3  3A00               	xorlw	0	; case 0
  8688  0EB4  1903               	skipnz
  8689  0EB5  2E9A               	goto	l2385
  8690  0EB6  2EB7               	goto	l36
  8691  0EB7                     l36:	
  8692  0EB7  0008               	return
  8693  0EB8                     __end_of_OUTInit:	
  8694                           
  8695                           	psect	text53
  8696  0D52                     __ptext53:	
  8697 ;; *************** function _INInit *****************
  8698 ;; Defined at:
  8699 ;;		line 7 in file "IN.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  sta             1    wreg     unsigned char 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  sta             1    2[COMMON] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;		None               void
  8706 ;; Registers used:
  8707 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;Total ram usage:        2 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    2
  8720 ;; This function calls:
  8721 ;;		Nothing
  8722 ;; This function is called by:
  8723 ;;		_main
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _INInit
  8729  0D52                     _INInit:	
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  8733                           ;INInit@sta stored from wreg
  8734  0D52  00F2               	movwf	INInit@sta
  8735                           
  8736                           ;IN.c: 8: switch(sta)
  8737  0D53  2D63               	goto	l2381
  8738  0D54                     l2373:	
  8739                           ;IN.c: 9: {
  8740                           ;IN.c: 10: case 0:
  8741                           
  8742                           
  8743                           ;IN.c: 12: TRISB|=0b00010111; TRISC|=0b00010000; ANSELB&=0b11111010; WPUB=0b00000111;
  8744  0D54  3017               	movlw	23
  8745  0D55  00F1               	movwf	??_INInit
  8746  0D56  0871               	movf	??_INInit,w
  8747  0D57  0021               	movlb	1	; select bank1
  8748  0D58  048D               	iorwf	13,f	;volatile
  8749  0D59  160E               	bsf	14,4	;volatile
  8750  0D5A  30FA               	movlw	250
  8751  0D5B  00F1               	movwf	??_INInit
  8752  0D5C  0871               	movf	??_INInit,w
  8753  0D5D  0023               	movlb	3	; select bank3
  8754  0D5E  058D               	andwf	13,f	;volatile
  8755  0D5F  3007               	movlw	7
  8756  0D60  0024               	movlb	4	; select bank4
  8757  0D61  008D               	movwf	13	;volatile
  8758                           
  8759                           ;IN.c: 20: }
  8760                           
  8761                           ;IN.c: 13: break;
  8762  0D62  0008               	return
  8763  0D63                     l2381:	
  8764  0D63  0872               	movf	INInit@sta,w
  8765                           
  8766                           ; Switch size 1, requested type "space"
  8767                           ; Number of cases is 1, Range of values is 0 to 0
  8768                           ; switch strategies available:
  8769                           ; Name         Instructions Cycles
  8770                           ; simple_byte            4     3 (average)
  8771                           ; direct_byte            8     6 (fixed)
  8772                           ; jumptable            260     6 (fixed)
  8773                           ;	Chosen strategy is simple_byte
  8774  0D64  3A00               	xorlw	0	; case 0
  8775  0D65  1903               	skipnz
  8776  0D66  2D54               	goto	l2373
  8777  0D67  2D68               	goto	l14
  8778  0D68                     l14:	
  8779  0D68  0008               	return
  8780  0D69                     __end_of_INInit:	
  8781                           
  8782                           	psect	intentry
  8783  0004                     __pintentry:	
  8784 ;; *************** function _INTIsr *****************
  8785 ;; Defined at:
  8786 ;;		line 38 in file "Sensore.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;		None
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;		None
  8791 ;; Return value:  Size  Location     Type
  8792 ;;		None               void
  8793 ;; Registers used:
  8794 ;;		wreg, status,2, status,0, pclath, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        1 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    1
  8807 ;; This function calls:
  8808 ;;		_SYSInt
  8809 ;; This function is called by:
  8810 ;;		Interrupt level 1
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814  0004                     _INTIsr:	
  8815                           
  8816                           ;incstack = 0
  8817                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  8818  0004  3180               	pagesel	$
  8819  0005  0020               	movlb	0	; select bank0
  8820  0006  087F               	movf	127,w
  8821  0007  00F0               	movwf	??_INTIsr
  8822                           
  8823                           ;Sensore.c: 40: if(INTCONbits.T0IF==1)
  8824  0008  1D0B               	btfss	11,2	;volatile
  8825  0009  280D               	goto	i1l3349
  8826                           
  8827                           ;Sensore.c: 41: {
  8828                           ;Sensore.c: 43: INTCONbits.T0IF=0;
  8829  000A  110B               	bcf	11,2	;volatile
  8830                           
  8831                           ;Sensore.c: 46: SYSInt();
  8832  000B  318C  2464         	fcall	_SYSInt
  8833  000D                     i1l3349:	
  8834                           
  8835                           ;Sensore.c: 47: }
  8836                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  8837  000D  0027               	movlb	7	; select bank7
  8838  000E  1916               	btfsc	22,2	;volatile
  8839                           
  8840                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  8841  000F  1116               	bcf	22,2	;volatile
  8842  0010  0870               	movf	??_INTIsr,w
  8843  0011  0020               	movlb	0	; select bank0
  8844  0012  00FF               	movwf	127
  8845  0013  0009               	retfie
  8846  0014                     __end_of_INTIsr:	
  8847                           
  8848                           	psect	text55
  8849  0C64                     __ptext55:	
  8850 ;; *************** function _SYSInt *****************
  8851 ;; Defined at:
  8852 ;;		line 36 in file "SYS.c"
  8853 ;; Parameters:    Size  Location     Type
  8854 ;;		None
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;		None               void
  8859 ;; Registers used:
  8860 ;;		wreg
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;Total ram usage:        0 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; This function calls:
  8873 ;;		Nothing
  8874 ;; This function is called by:
  8875 ;;		_INTIsr
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           
  8880                           ;psect for function _SYSInt
  8881  0C64                     _SYSInt:	
  8882                           
  8883                           ;SYS.c: 38: u_SYS_STA.TICK=1;
  8884                           
  8885                           ;incstack = 0
  8886                           ; Regs used in _SYSInt: [wreg]
  8887  0C64  0021               	movlb	1	; select bank1
  8888  0C65  142F               	bsf	_u_SYS_STA^(0+128),0
  8889                           
  8890                           ;SYS.c: 41: TMR0=255-156;
  8891  0C66  3063               	movlw	99
  8892  0C67  0020               	movlb	0	; select bank0
  8893  0C68  0095               	movwf	21	;volatile
  8894  0C69  0008               	return
  8895  0C6A                     __end_of_SYSInt:	
  8896  007E                     btemp	set	126	;btemp
  8897  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    5
    Data        55
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80      0      50
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?_ADCGetTempCCal	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), CC1Write@cc1Addr(BANK0[1]), 
		 -> CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _CC1Init->_CC1LoadREG
    _CC1LoadREG->_CC1Write
    _PGMSelLong->_PGMWriteNvm
    _PGMSelDown->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _RTXReadPkt->_CC1Read
    _RTXReadPkt->_PGMWriteNvm
    _RTXRcvPkt->_CC1Read
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _CC1Read->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _ADCConv->___awtoft
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _LEDNormalFlash->_DLYDelay_ms
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PGMInit
    _SYSTask->_PGMSelDown
    _RTXAwake->_RTXInit
    _CC1LoadREG->_CC1Write
    _RTXTick->_RTXSendData
    _RTXTask->_RTXReadPkt
    _RTXSendRPgm->_RTXSndPkt
    _RTXStartSendData->_ADCConv
    _RTXStartSendData->_RTXSendData
    _RTXSendData->_ADCGetTempCCal
    _RTXSndPkt->_CC1Write
    _ADCGetTempCCal->___ftadd
    _ADCConv->___ftadd
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   32359
                                             71 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _CC1Init
                            _LEDInit
                            _NVMInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   12930
                            _DINTick
                           _SLPSleep
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _RTXTick
                           _RTXAwake
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0    8018
                        _DLYDelay_ms
                            _CC1Init
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0    7393
                                             58 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              1     1      0     557
                                              2 BANK0      1     1      0
                        _DLYDelay_ms
                          _CC1Strobe
                         _CC1LoadREG
 ---------------------------------------------------------------------------------
 (4) _CC1LoadREG                                           1     1      0     260
                                             11 COMMON     1     1      0
                           _CC1Write
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    3127
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           0     0      0     724
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     473
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   10141
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0   10141
                                             69 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                   _RTXStartSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0    7164
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (5) _RTXSendData                                          7     7      0    3127
                                             51 BANK0      7     7      0
                     _ADCGetTempCCal
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (6) _RTXSndPkt                                            6     5      1    1114
                                              2 BANK0      6     5      1
                          _CC1Strobe
                            _CC1Read
                           _CC1Write
 ---------------------------------------------------------------------------------
 (7) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (7) _CC1Read                                              5     3      2     390
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIRead                                              5     4      1     130
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (6) _LEDFastFlash                                         3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (6) _ADCGetTempCCal                                       3     0      3    1673
                                             48 BANK0      3     0      3
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     136
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             13    13      0    3969
                                             48 BANK0     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     162
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6     800
                                              3 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6     732
                                             19 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    1537
                                             35 BANK0     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3     445
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (7) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTIsr                                               1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (10) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _CC1Init
     _DLYDelay_ms
     _CC1Strobe
       _SPIWrite
     _CC1LoadREG
       _CC1Write
         _SPIWrite
   _LEDInit
   _NVMInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         ___awtoft
           ___ftpack
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
         ___ftdiv
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___lwdiv
       _DLYDelay_ms
       _RTXSendData
         _ADCGetTempCCal
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftge
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendData
         _ADCConv
           ___awtoft
             ___ftpack
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftdiv
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
           ___lwdiv
         _DLYDelay_ms
         _RTXSendData
           _ADCGetTempCCal
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftge
           _LEDFastFlash
             _DLYDelay_ms
           _RTXSndPkt
             _CC1Strobe
               _SPIWrite
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Write
               _SPIWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
   _SYSInit
   _SYSTask
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMTick
     _PGMPgmOff
     _PGMSelDown
       _PGMWriteNvm
         _NVMWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _RTXTick
       _RTXSendData
         _ADCGetTempCCal
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftge
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
     _RTXAwake
       _DLYDelay_ms
       _CC1Init
         _DLYDelay_ms
         _CC1Strobe
           _SPIWrite
         _CC1LoadREG
           _CC1Write
             _SPIWrite
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             ___awtoft
               ___ftpack
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftdiv
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
             ___lwdiv
           _DLYDelay_ms
           _RTXSendData
             _ADCGetTempCCal
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
               ___ftge
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Strobe
                 _SPIWrite
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Write
                 _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      32       7       62.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CA      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Nov 10 17:17:43 2014

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000            SLPSleep@WPUBTmp 0022  
                       l14 0D68                         l36 0EB7                         l60 0E3D  
            ?_LEDFastFlash 0070                         l56 0E22                         l65 0EC3  
                       l74 0E16               ?_DLYDelay_ms 0071               ___ftadd@exp1 004F  
             ___ftadd@exp2 004E               ___ftadd@sign 004D                        l111 0FFF  
                      l120 00CF                        l124 0188                        l116 0048  
                      l240 0F75                        l144 0D9B                        l250 02C3  
                      l235 07FF                        l251 02AE                        l172 0DE6  
                      l262 0324                        l254 02D4                        l247 0294  
                      l264 032B                        l600 0FAB                        l257 02DD  
                      l249 029F                        l195 0C97                        l267 033D  
                      l292 0CF3                        l197 0C9F                        l517 050E  
                      l295 0FC1                        l297 0FC0                        l378 0D80  
                      l490 062F                        l475 0F5F                        l841 05BF  
                      l835 05A8                        l683 068A                        l684 06CB  
                      l685 06CC                        l864 022C            __end_of_CC1Init 0DE7  
          __end_of_CC1Read 0E03            __end_of_ADCConv 018D            __end_of_ADCInit 1000  
             __CFG_BORV$LO 0000                        wreg 0009                 _RTXReadPkt 05D6  
          __end_of_DINInit 0CF4            __end_of_DINTask 0E5C            __end_of_DINTick 0FD4  
             __CFG_LVP$OFF 0000           _RTXStartSendData 0CD4            __end_of_LEDInit 0CA0  
             ___ftdiv@cntr 003D               ___ftdiv@sign 0042                       l3021 0FA3  
                     l3017 0FA0                       l4031 03B1                       l4015 036E  
                     l2441 0FD6                       l4009 0358                       l2419 0E32  
                     l2611 07F7                       l4043 03CD                       l4027 03A9  
                     l3251 0739                       l2373 0D54                       l2381 0D63  
                     l2445 0FE4                       l2453 0FF7                       l3421 00C8  
                     l2615 07FA                       l2703 0CE5                       l4039 03C5  
                     l3335 0784                       l3327 0766                       l3255 074F  
                     l2385 0E9A                       l3329 0772                       l3417 00BB  
                     l2707 0CEE                       l3339 078D                       l3443 0169  
                     l2629 0F63                       l3605 0CA9                       l3453 017F  
                     l2399 0EB2                       l2743 0E52                       l3527 0E5E  
                     l3463 0706                       l3391 0EBA                       l2577 0C9A  
                     l3449 017C                       l3537 0E7C                       l3473 0DCF  
                     l3481 0DDD                       l3633 0F3F                       l3641 0F53  
                     l3801 07AF                       l2747 0E56                       l2739 0E4E  
                     l2691 0326                       l2683 0306                       l3387 0EC8  
                     l3635 0F44                       l2677 0300                       l3901 01BC  
                     l3397 0E1B                       l3813 07BF                       l3591 0D6F  
                     l3399 0E04                       l3727 0615                       l3807 07B8  
                     l3665 04A9                       l3577 0542                       l2699 0338  
                     l3851 057E                       l3931 020B                       l3907 01CB  
                     l3589 0D6C                       l3925 01F8                       l3599 0D77  
                     l3855 0585                       l3943 023E                       l3927 0202  
                     l3919 01E5                       l3759 064A                       l3695 0508  
                     l3865 05AD                       l3857 058F                       l3937 021E  
                     l3929 0207                       l3867 05B5                       l3859 0594  
                     l3947 0250                       l3939 0228                       l3795 07A8  
                     l3885 0EE3                       l3957 026B                       l3973 0422  
                     l3789 07A1                       l3967 040C                       l2999 0F88  
                     l3897 01B5                       l3995 047C                       l3987 0463  
             __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020                       u3105 05A3  
                     u3125 05B0                       u3305 01F9                       u3155 05C6  
                     u3085 058A                       u2605 0773                       u3335 020C  
                     u2615 077D                       _PIE1 0091                       _PIE2 0092  
                     u2625 0785                       u3275 01E6                       u3435 0434  
                     u3515 037A                       u3365 021F                       u3445 0444  
                     u3525 038A                       u3455 0464                       u2745 0DA1  
                     u3465 0473                       u3545 03B2                       u2585 0769  
                     u3617 00CB                       u3475 047D                       u3555 03B8  
                     u3627 0179                       u3637 0DA8                       u3585 03CE  
                     u3595 03D4                       _PIR1 0011                       _PIR2 0012  
                     _TMR0 0015                       _WPUB 020D            __end_of_PGMInit 0D81  
          __end_of_PGMTick 0CB9               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
         __end_of_CC1Sleep 0C84                       _batt 0069                       _main 0684  
         __end_of_CC1Write 0F1A               ___ftpack@arg 0071            __end_of_NVMInit 0800  
          __end_of_NVMRead 0F86               ___ftpack@exp 0074                       _temp 00AD  
          __end_of_SPIInit 0E3E            __end_of_SPIRead 0ED8                       fsr0h 0005  
                     fsr1h 0007                       fsr0l 0004                       indf0 0000  
                     indf1 0001                       fsr1l 0006                       btemp 007E  
          __end_of_OUTInit 0EB8              __CFG_BOREN$ON 0000                       start 0014  
          __end_of_RTXInit 0F60          NVMWrite@latchAddr 0063            __end_of_RTXTask 0C70  
          __end_of_RTXTick 0CC6              __CFG_IESO$OFF 0000            __end_of_SYSInit 0FAC  
          __end_of_SYSTask 07C6               ___ftmul@cntr 0031               ___ftmul@sign 0032  
             _ADCConv$1374 0056                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelDown 0070                ?_PGMSelLong 0070  
              _RTXSendData 049E                _RTXSendRPgm 0F1A               SPIInit@state 0072  
                    ?_main 0070            __end_of___ftadd 0283            __end_of___ftdiv 049E  
          __end_of___ftmul 03F5                      _T1CON 0018         __size_of_PGMPgmOff 0004  
                    _IOCBN 0395                      _IOCBP 0394            __end_of___lwdiv 0794  
                    _PMADR 0191                      _PMDAT 0193                      _TMR1H 0017  
                    _TMR1L 0016                      _PORTB 000D                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
            __CFG_PWRTE$ON 0000                      _battV 00A0                _sys_pgm_sta 00AC  
            ___awtoft@sign 0022          __end_of_CC1Strobe 0D52                      _tempC 00A3  
                    _pktRx 00B3                      _pktTx 00BC              ___ftpack@sign 0075  
                    main@i 0068           __end_of_SLPSleep 0576           __end_of_NVMWrite 0341  
         __end_of_SPIWrite 0E20           __end_of_RTXAwake 0DCC          LEDNormalFlash@num 0078  
                    status 0003                      wtemp0 007E               ?_PGMCheckNvm 0070  
           __CFG_MCLRE$OFF 0000            __initialization 0016               DLYDelay_ms@i 0075  
             __end_of_main 06D7         __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0057  
                ??_CC1Init 007C                  ??_CC1Read 0079                  ??_ADCConv 0050  
  __size_of_ADCGetTempCCal 004C                  ??_ADCInit 0071             CC1Strobe@e_stb 0078  
             ??_CC1LoadREG 007B                     ??_main 0067                 _cc1PaTable 00CA  
             CC1Init@state 0022                  ??_DINInit 0071               NVMWrite@addr 0071  
                ??_DINTask 0071                  ??_DINTick 0071                 _cc1InitVal 0120  
                ??_LEDInit 0071               ?_PGMNvmReset 0070                  ??_PGMInit 007C  
                ??_PGMTick 0071                ?_RTXReadPkt 0070                     _ADCON0 009D  
                   _ADCON1 009E              SPIRead@dstPtr 0074                  ??_NVMInit 0071  
                ??_NVMRead 0075                     _ADRESH 009C                  ??_SPIInit 0071  
                ??_SPIRead 0072             _LEDNormalFlash 0E5C                  ??_OUTInit 0071  
         __end_of___awtoft 0EF9                     _ANSELA 018C                     _ANSELB 018D  
                   _ANSELC 018E           __end_of___ftpack 05D6        __size_of_PGMReadNvm 0013  
                ??_RTXInit 007C               ?_PGMWriteNvm 0070        __size_of_PGMSelDown 0011  
                   i1l3349 000D                  ??_RTXTask 007C                  ??_RTXTick 007C  
      __size_of_PGMSelLong 0009                     _INTCON 000B                     _FVRCON 0117  
                ??_SYSInit 0071                     _PMCON1 0195                     _PMCON2 0196  
                ??_SYSTask 007C                     _INTIsr 0004                     _OSCCON 0099  
                   _INInit 0D52                     _WDTCON 0097                     _SSPBUF 0211  
            LEDFastFlash@i 0079          __end_of_PGMPgmOff 0C64                     _SYSInt 0C64  
       __end_of_CC1LoadREG 0D99        RTXReadPkt@numRxByte 0066                     ___ftge 0723  
                   _adc_ch 00A8                  ??___ftadd 0049             __CFG_STVREN$ON 0000  
                ??___ftdiv 0039                  ??___ftmul 0029                  ??___lwdiv 0075  
                   _tmrPgm 006C      ___ftmul@f3_as_product 002E                  ?_CC1Sleep 0070  
     __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077     __end_of_LEDNormalFlash 0E7A  
        __end_of_RTXRcvPkt 0CD4          __end_of_RTXSndPkt 0684       __end_of_LEDFastFlash 0E98  
  __end_of__initialization 003E                 ___ftadd@f1 0043                 ___ftadd@f2 0046  
               ___ftge@ff1 0071                 ___ftge@ff2 0074                 ___ftdiv@f1 0036  
               ___ftdiv@f2 0033                 ___ftdiv@f3 003E                 ___awtoft@c 0079  
               ___ftmul@f1 0023                 ___ftmul@f2 0026             __pcstackCOMMON 0070  
             __pidataBANK1 0C84               __pidataBANK2 07C6        __size_of_RTXReadPkt 0057  
 __end_of_RTXStartSendData 0CE3            NVMWrite@rowAddr 0060                  ?_SLPSleep 0070  
                ?_NVMWrite 0071            CC1Strobe@cc1Stb 0079                  ?_SPIWrite 0071  
               CC1Read@len 0078                 CC1Read@dst 0077                 ??_CC1Sleep 007A  
                ?_RTXAwake 0070                 ??_CC1Write 007A               CC1Write@addr 0020  
           ADCConv@sumBatt 0052             ADCConv@sumTemp 0054            ?_LEDNormalFlash 0070  
               __pbssBANK0 0069                 __pbssBANK1 00A0                    ?_INTIsr 0070  
                  ?_INInit 0070            __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070  
                INInit@sta 0072       __size_of_PGMCheckNvm 000C                 __pmaintext 0684  
                  ?___ftge 0071               ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021  
             ??_PGMSelDown 0065               ??_PGMSelLong 007C                 __pintentry 0004  
             ?_RTXSendData 0070               ?_RTXSendRPgm 0070             _ADCGetTempCCal 06D7  
                  _CC1Init 0DCC                    _CC1Read 0DE7                    _ADCConv 0041  
                  _ADCInit 0FD4          _u_in_sta_currTask 007C                  ?___awtoft 0079  
                ?___ftpack 0071                 ??_SLPSleep 007A                 ??_NVMWrite 0075  
               _cntSndData 00A9                 ??_SPIWrite 0074                    _DINInit 0CE3  
               ??_RTXAwake 007C                    _DINTick 0FAC                    _DINTask 0E3E  
             ADCInit@state 0072                    _LEDInit 0C95         RTXSendData@valBatt 0057  
                  _PGMInit 0D69                    _PGMTick 0CAC         RTXSendData@valTemp 0054  
     __size_of_PGMNvmReset 0013                    _SSPCON1 0215                    _SSPCON2 0216  
                  _NVMInit 07F5                    _NVMRead 0F60                    _SPIInit 0E20  
                  _SPIRead 0EB8                    _SSPSTAT 0214                    _OUTInit 0E98  
               __stringtab 0800                    _RTXInit 0F3C                    _RTXTick 0CB9  
                  _RTXTask 0C6A         __end_of_PGMReadNvm 0D18                    _SYSInit 0F86  
                  _SYSTask 0794         __end_of_PGMSelDown 0D05         __end_of_PGMSelLong 0C95  
                _CC1Strobe 0D3E            __size_of_INTIsr 0010            __size_of_INInit 0017  
     __size_of_PGMWriteNvm 0013            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064     __end_of_ADCGetTempCCal 0723                  SPIWrite@i 0076  
          __size_of___ftge 003B                    ___ftadd 018D               RTXInit@state 005A  
                  ___ftdiv 03F5                    ___ftmul 0341                    ___lwdiv 075E  
               ??___awtoft 0020                 ??___ftpack 0076                    __ptext1 0794  
                  __ptext2 0DB2                    __ptext3 0F3C                    __ptext4 0DCC  
                  __ptext5 0D81                    __ptext6 0CB9                    __ptext7 0C8C  
                  __ptext8 0CF4                    __ptext9 0C60                    _flg_slp 006A  
                  _pgm_cfg 00C5                    _pgm_flg 006B      __size_of_LEDFastFlash 001E  
                _IOCBFbits 0396               ??_RTXReadPkt 0065                    clrloop0 0C77  
                  _rtx_flg 00AA               RTXRcvPkt@len 0020               RTXRcvPkt@dst 0023  
     end_of_initialization 003E                 _u_in_ev_up 00B2                 ?_CC1Strobe 0070  
       RTXSndPkt@numRxByte 0025                    init_ram 0C70         RTXSndPkt@numTxByte 0026  
                  initloop 0C71               RTXSndPkt@len 0022               RTXSndPkt@src 0024  
             RTXSndPkt@sta 0027                  _PGMPgmOff 0C60            ?_ADCGetTempCCal 0050  
               _tmrDbncSel 00AE         __end_of_RTXReadPkt 062D                 DINInit@sta 0071  
             _LEDFastFlash 0E7A                  _PORTAbits 000C                  _PORTBbits 000D  
                _PORTCbits 000E                 _tmrLongSel 00A6           __CFG_FOSC$INTOSC 0000  
        __size_of_CC1Sleep 0008          __size_of_CC1Write 0021                NVMRead@addr 0071  
              NVMRead@dest 0073                  _RTXRcvPkt 0CC6                  _RTXSndPkt 062D  
              ___ftdiv@exp 0041             __end_of_INTIsr 0014             __end_of_INInit 0D69  
           __end_of_SYSInt 0C6A                ___ftmul@exp 002D                 ?_PGMPgmOff 0070  
               LEDInit@sta 0071             DLYDelay_ms@val 0071          ?_RTXStartSendData 0070  
           __end_of___ftge 075E              ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C  
     __size_of_RTXSendData 0073           ??_LEDNormalFlash 0077       __size_of_RTXSendRPgm 0022  
             SYSInit@state 0072          __size_of_SLPSleep 0065          __size_of_NVMWrite 00BE  
        __size_of_SPIWrite 001D        start_initialization 0016          __size_of_RTXAwake 001A  
              CC1Read@addr 007A                NVMWrite@len 0074                   ??_INTIsr 0070  
                 ??_INInit 0071                ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020  
               ?_RTXSndPkt 0022                   ??_SYSInt 0070             CC1Read@cc1Addr 007B  
                 ??___ftge 0077                   ?_CC1Init 0070                __pdataBANK1 00CA  
                 ?_CC1Read 0077                __pdataBANK2 0120                SPIWrite@len 0073  
                 ?_ADCConv 0070                   ?_ADCInit 0070                   ?_DINInit 0070  
                 ?_DINTask 0070                   ?_DINTick 0070          __size_of___awtoft 0021  
        __size_of___ftpack 0060                   ?_LEDInit 0070                __pbssCOMMON 007C  
            __pcstackBANK0 0020        __end_of_DLYDelay_ms 0DB2                  _s_CC1_FLG 00AB  
                 ?_PGMInit 0070                   ?_PGMTick 0070                   ?_NVMInit 0070  
                 ?_NVMRead 0071                   ?_SPIInit 0070              ADCConv@cntSum 0059  
                 ?_SPIRead 0071             NVMWrite@source 0073                   ?_OUTInit 0070  
             PGMInit@state 0066                   ?_RTXInit 0070                   ?_RTXTask 0070  
                 ?_RTXTick 0070                CC1Write@len 0079                   ?_SYSInit 0070  
              CC1Write@src 0077                   ?_SYSTask 0070              ??_PGMCheckNvm 007C  
         ___lwdiv@dividend 0073                ??_PGMPgmOff 0071                   ?___ftadd 0043  
                 ?___ftdiv 0033                   ?___ftmul 0023                   ?___lwdiv 0071  
                _u_SYS_STA 00AF                  __pstrings 0800           _u_in_sta_tmpTask 006F  
                 NVMRead@i 0077                   _CC1Sleep 0C7C              ??_PGMNvmReset 0065  
                 SPIRead@i 0075                   _CC1Write 0EF9           ___lwdiv@quotient 0076  
            ??_PGMWriteNvm 0078                  _u_flg_din 006E                ??_RTXRcvPkt 0021  
              ??_RTXSndPkt 0023           ??_ADCGetTempCCal 007C                  clear_ram0 0C76  
                 _PIR1bits 0011        __end_of_PGMCheckNvm 0CAC      SLPSleep@OPTION_REGTmp 0024  
                _tmrRcvPkt 006D           __size_of_CC1Init 001B           __size_of_CC1Read 001C  
                 _SLPSleep 0511                _DLYDelay_ms 0D99                 _CC1LoadREG 0D81  
                 _NVMWrite 0283           __size_of_ADCConv 014C           __size_of_ADCInit 002C  
               _ADCON0bits 009D                   _SPIWrite 0E03                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078                   _RTXAwake 0DB2  
         __size_of_DINInit 0011           __size_of_DINTask 001E           __size_of_DINTick 0028  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0018  
         __size_of_PGMTick 000D        __end_of_PGMNvmReset 0D3E           __size_of_NVMInit 000B  
         __size_of_NVMRead 0026           __size_of_SPIInit 001E           __size_of_SPIRead 0020  
             _u_in_ev_down 00B0            LEDNormalFlash@i 0079               _u_in_ev_long 00B1  
         __size_of_OUTInit 0020           __size_of_RTXInit 0024           __size_of_RTXTask 0006  
         __size_of_RTXTick 000D           __size_of_SYSInit 0026           __size_of_SYSTask 0032  
               OUTInit@sta 0072        __end_of_PGMWriteNvm 0D2B           __size_of___ftadd 00F6  
         __size_of___ftdiv 00A9           __size_of___ftmul 00B4           __size_of___lwdiv 0036  
                 ___awtoft 0ED8                   ___ftpack 0576         __end_of__stringtab 0801  
          ___lwdiv@divisor 0071            ___lwdiv@counter 0078                   __ptext10 0CAC  
                 __ptext11 0511                   __ptext20 049E                   __ptext12 0C7C  
                 __ptext21 062D                   __ptext13 0FAC                   __ptext30 0041  
                 __ptext22 0EF9                   __ptext14 0F86                   __ptext31 075E  
                 __ptext23 0DE7                   __ptext15 0C6A                   __ptext40 0CA0  
                 __ptext32 0341                   __ptext24 0EB8                   __ptext16 05D6  
                 __ptext41 0D2B                   __ptext33 03F5                   __ptext25 0D3E  
                 __ptext17 0F1A                   __ptext50 0FD4                   __ptext42 0D18  
                 __ptext34 018D                   __ptext26 0E03                   __ptext18 0CC6  
                 __ptext51 0E20                   __ptext43 0283                   __ptext35 0ED8  
                 __ptext27 0E7A                   __ptext19 0CD4                   __ptext52 0E98  
                 __ptext44 0D05                   __ptext36 0576                   __ptext28 06D7  
                 __ptext53 0D52                   __ptext45 0F60                   __ptext37 0E5C  
                 __ptext29 0723                   __ptext46 0E3E                   __ptext38 0D99  
                 __ptext55 0C64                   __ptext47 0CE3                   __ptext39 0D69  
                 __ptext48 07F5                   __ptext49 0C95  __size_of_RTXStartSendData 000F  
      __end_of_nvm_pgm_cfg 0806              __size_of_main 0053                _PGMCheckNvm 0CA0  
            ??_RTXSendData 0053              ??_RTXSendRPgm 0028          SLPSleep@ADCON0Tmp 0026  
              ?_CC1LoadREG 0070                _PGMNvmReset 0D2B                 _INTCONbits 000B  
           SPIWrite@srcPtr 0071                   intlevel1 0000                _PGMWriteNvm 0D18  
               _PMCON1bits 0195          __CFG_CLKOUTEN$OFF 0000        SLPSleep@TESTBATTtmp 0027  
               _PGMReadNvm 0D05                 _PGMSelDown 0CF4                 _PGMSelLong 0C8C  
        SLPSleep@INTCONTmp 0021          SLPSleep@FVRCONTmp 0025                 _OPTION_REG 0095  
      __end_of_RTXSendData 0511        __end_of_RTXSendRPgm 0F3C                _nvm_pgm_cfg 0801  
         SLPSleep@IOCBNTmp 0020    __size_of_LEDNormalFlash 001E        __size_of_CC1LoadREG 0018  
        SLPSleep@WDTCONTmp 0023                 _SSPCONbits 0215  
