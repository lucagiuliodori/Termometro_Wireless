

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Nov 10 16:39:41 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	dabs	1,0x7E,2
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0015                     	;# 
    91  0016                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001C                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  0116                     	;# 
   119  0117                     	;# 
   120  011D                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  018E                     	;# 
   124  0191                     	;# 
   125  0191                     	;# 
   126  0192                     	;# 
   127  0193                     	;# 
   128  0193                     	;# 
   129  0194                     	;# 
   130  0195                     	;# 
   131  0196                     	;# 
   132  0197                     	;# 
   133  0199                     	;# 
   134  019A                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019C                     	;# 
   140  019C                     	;# 
   141  019D                     	;# 
   142  019E                     	;# 
   143  019F                     	;# 
   144  020D                     	;# 
   145  0210                     	;# 
   146  0211                     	;# 
   147  0211                     	;# 
   148  0212                     	;# 
   149  0212                     	;# 
   150  0213                     	;# 
   151  0213                     	;# 
   152  0214                     	;# 
   153  0214                     	;# 
   154  0215                     	;# 
   155  0215                     	;# 
   156  0215                     	;# 
   157  0216                     	;# 
   158  0216                     	;# 
   159  0217                     	;# 
   160  0217                     	;# 
   161  0291                     	;# 
   162  0291                     	;# 
   163  0292                     	;# 
   164  0293                     	;# 
   165  0298                     	;# 
   166  0298                     	;# 
   167  0299                     	;# 
   168  029A                     	;# 
   169  0394                     	;# 
   170  0395                     	;# 
   171  0396                     	;# 
   172  0FE4                     	;# 
   173  0FE5                     	;# 
   174  0FE6                     	;# 
   175  0FE7                     	;# 
   176  0FE8                     	;# 
   177  0FE9                     	;# 
   178  0FEA                     	;# 
   179  0FEB                     	;# 
   180  0FED                     	;# 
   181  0FEE                     	;# 
   182  0FEF                     	;# 
   183  0000                     	;# 
   184  0001                     	;# 
   185  0002                     	;# 
   186  0003                     	;# 
   187  0004                     	;# 
   188  0005                     	;# 
   189  0006                     	;# 
   190  0007                     	;# 
   191  0008                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0015                     	;# 
   202  0016                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001C                     	;# 
   210  008C                     	;# 
   211  008D                     	;# 
   212  008E                     	;# 
   213  0090                     	;# 
   214  0091                     	;# 
   215  0092                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0099                     	;# 
   220  009A                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  0116                     	;# 
   230  0117                     	;# 
   231  011D                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  018E                     	;# 
   235  0191                     	;# 
   236  0191                     	;# 
   237  0192                     	;# 
   238  0193                     	;# 
   239  0193                     	;# 
   240  0194                     	;# 
   241  0195                     	;# 
   242  0196                     	;# 
   243  0197                     	;# 
   244  0199                     	;# 
   245  019A                     	;# 
   246  019B                     	;# 
   247  019B                     	;# 
   248  019B                     	;# 
   249  019B                     	;# 
   250  019C                     	;# 
   251  019C                     	;# 
   252  019D                     	;# 
   253  019E                     	;# 
   254  019F                     	;# 
   255  020D                     	;# 
   256  0210                     	;# 
   257  0211                     	;# 
   258  0211                     	;# 
   259  0212                     	;# 
   260  0212                     	;# 
   261  0213                     	;# 
   262  0213                     	;# 
   263  0214                     	;# 
   264  0214                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0216                     	;# 
   269  0216                     	;# 
   270  0217                     	;# 
   271  0217                     	;# 
   272  0291                     	;# 
   273  0291                     	;# 
   274  0292                     	;# 
   275  0293                     	;# 
   276  0298                     	;# 
   277  0298                     	;# 
   278  0299                     	;# 
   279  029A                     	;# 
   280  0394                     	;# 
   281  0395                     	;# 
   282  0396                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294  0000                     	;# 
   295  0001                     	;# 
   296  0002                     	;# 
   297  0003                     	;# 
   298  0004                     	;# 
   299  0005                     	;# 
   300  0006                     	;# 
   301  0007                     	;# 
   302  0008                     	;# 
   303  0009                     	;# 
   304  000A                     	;# 
   305  000B                     	;# 
   306  000C                     	;# 
   307  000D                     	;# 
   308  000E                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0015                     	;# 
   313  0016                     	;# 
   314  0016                     	;# 
   315  0017                     	;# 
   316  0018                     	;# 
   317  0019                     	;# 
   318  001A                     	;# 
   319  001B                     	;# 
   320  001C                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0090                     	;# 
   325  0091                     	;# 
   326  0092                     	;# 
   327  0095                     	;# 
   328  0096                     	;# 
   329  0097                     	;# 
   330  0099                     	;# 
   331  009A                     	;# 
   332  009B                     	;# 
   333  009B                     	;# 
   334  009C                     	;# 
   335  009D                     	;# 
   336  009E                     	;# 
   337  010C                     	;# 
   338  010D                     	;# 
   339  010E                     	;# 
   340  0116                     	;# 
   341  0117                     	;# 
   342  011D                     	;# 
   343  018C                     	;# 
   344  018D                     	;# 
   345  018E                     	;# 
   346  0191                     	;# 
   347  0191                     	;# 
   348  0192                     	;# 
   349  0193                     	;# 
   350  0193                     	;# 
   351  0194                     	;# 
   352  0195                     	;# 
   353  0196                     	;# 
   354  0197                     	;# 
   355  0199                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019E                     	;# 
   365  019F                     	;# 
   366  020D                     	;# 
   367  0210                     	;# 
   368  0211                     	;# 
   369  0211                     	;# 
   370  0212                     	;# 
   371  0212                     	;# 
   372  0213                     	;# 
   373  0213                     	;# 
   374  0214                     	;# 
   375  0214                     	;# 
   376  0215                     	;# 
   377  0215                     	;# 
   378  0215                     	;# 
   379  0216                     	;# 
   380  0216                     	;# 
   381  0217                     	;# 
   382  0217                     	;# 
   383  0291                     	;# 
   384  0291                     	;# 
   385  0292                     	;# 
   386  0293                     	;# 
   387  0298                     	;# 
   388  0298                     	;# 
   389  0299                     	;# 
   390  029A                     	;# 
   391  0394                     	;# 
   392  0395                     	;# 
   393  0396                     	;# 
   394  0FE4                     	;# 
   395  0FE5                     	;# 
   396  0FE6                     	;# 
   397  0FE7                     	;# 
   398  0FE8                     	;# 
   399  0FE9                     	;# 
   400  0FEA                     	;# 
   401  0FEB                     	;# 
   402  0FED                     	;# 
   403  0FEE                     	;# 
   404  0FEF                     	;# 
   405  0000                     	;# 
   406  0001                     	;# 
   407  0002                     	;# 
   408  0003                     	;# 
   409  0004                     	;# 
   410  0005                     	;# 
   411  0006                     	;# 
   412  0007                     	;# 
   413  0008                     	;# 
   414  0009                     	;# 
   415  000A                     	;# 
   416  000B                     	;# 
   417  000C                     	;# 
   418  000D                     	;# 
   419  000E                     	;# 
   420  0010                     	;# 
   421  0011                     	;# 
   422  0012                     	;# 
   423  0015                     	;# 
   424  0016                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001C                     	;# 
   432  008C                     	;# 
   433  008D                     	;# 
   434  008E                     	;# 
   435  0090                     	;# 
   436  0091                     	;# 
   437  0092                     	;# 
   438  0095                     	;# 
   439  0096                     	;# 
   440  0097                     	;# 
   441  0099                     	;# 
   442  009A                     	;# 
   443  009B                     	;# 
   444  009B                     	;# 
   445  009C                     	;# 
   446  009D                     	;# 
   447  009E                     	;# 
   448  010C                     	;# 
   449  010D                     	;# 
   450  010E                     	;# 
   451  0116                     	;# 
   452  0117                     	;# 
   453  011D                     	;# 
   454  018C                     	;# 
   455  018D                     	;# 
   456  018E                     	;# 
   457  0191                     	;# 
   458  0191                     	;# 
   459  0192                     	;# 
   460  0193                     	;# 
   461  0193                     	;# 
   462  0194                     	;# 
   463  0195                     	;# 
   464  0196                     	;# 
   465  0197                     	;# 
   466  0199                     	;# 
   467  019A                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019C                     	;# 
   473  019C                     	;# 
   474  019D                     	;# 
   475  019E                     	;# 
   476  019F                     	;# 
   477  020D                     	;# 
   478  0210                     	;# 
   479  0211                     	;# 
   480  0211                     	;# 
   481  0212                     	;# 
   482  0212                     	;# 
   483  0213                     	;# 
   484  0213                     	;# 
   485  0214                     	;# 
   486  0214                     	;# 
   487  0215                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0216                     	;# 
   491  0216                     	;# 
   492  0217                     	;# 
   493  0217                     	;# 
   494  0291                     	;# 
   495  0291                     	;# 
   496  0292                     	;# 
   497  0293                     	;# 
   498  0298                     	;# 
   499  0298                     	;# 
   500  0299                     	;# 
   501  029A                     	;# 
   502  0394                     	;# 
   503  0395                     	;# 
   504  0396                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000D                     	;# 
   530  000E                     	;# 
   531  0010                     	;# 
   532  0011                     	;# 
   533  0012                     	;# 
   534  0015                     	;# 
   535  0016                     	;# 
   536  0016                     	;# 
   537  0017                     	;# 
   538  0018                     	;# 
   539  0019                     	;# 
   540  001A                     	;# 
   541  001B                     	;# 
   542  001C                     	;# 
   543  008C                     	;# 
   544  008D                     	;# 
   545  008E                     	;# 
   546  0090                     	;# 
   547  0091                     	;# 
   548  0092                     	;# 
   549  0095                     	;# 
   550  0096                     	;# 
   551  0097                     	;# 
   552  0099                     	;# 
   553  009A                     	;# 
   554  009B                     	;# 
   555  009B                     	;# 
   556  009C                     	;# 
   557  009D                     	;# 
   558  009E                     	;# 
   559  010C                     	;# 
   560  010D                     	;# 
   561  010E                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  011D                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567  018E                     	;# 
   568  0191                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0193                     	;# 
   572  0193                     	;# 
   573  0194                     	;# 
   574  0195                     	;# 
   575  0196                     	;# 
   576  0197                     	;# 
   577  0199                     	;# 
   578  019A                     	;# 
   579  019B                     	;# 
   580  019B                     	;# 
   581  019B                     	;# 
   582  019B                     	;# 
   583  019C                     	;# 
   584  019C                     	;# 
   585  019D                     	;# 
   586  019E                     	;# 
   587  019F                     	;# 
   588  020D                     	;# 
   589  0210                     	;# 
   590  0211                     	;# 
   591  0211                     	;# 
   592  0212                     	;# 
   593  0212                     	;# 
   594  0213                     	;# 
   595  0213                     	;# 
   596  0214                     	;# 
   597  0214                     	;# 
   598  0215                     	;# 
   599  0215                     	;# 
   600  0215                     	;# 
   601  0216                     	;# 
   602  0216                     	;# 
   603  0217                     	;# 
   604  0217                     	;# 
   605  0291                     	;# 
   606  0291                     	;# 
   607  0292                     	;# 
   608  0293                     	;# 
   609  0298                     	;# 
   610  0298                     	;# 
   611  0299                     	;# 
   612  029A                     	;# 
   613  0394                     	;# 
   614  0395                     	;# 
   615  0396                     	;# 
   616  0FE4                     	;# 
   617  0FE5                     	;# 
   618  0FE6                     	;# 
   619  0FE7                     	;# 
   620  0FE8                     	;# 
   621  0FE9                     	;# 
   622  0FEA                     	;# 
   623  0FEB                     	;# 
   624  0FED                     	;# 
   625  0FEE                     	;# 
   626  0FEF                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  000D                     	;# 
   641  000E                     	;# 
   642  0010                     	;# 
   643  0011                     	;# 
   644  0012                     	;# 
   645  0015                     	;# 
   646  0016                     	;# 
   647  0016                     	;# 
   648  0017                     	;# 
   649  0018                     	;# 
   650  0019                     	;# 
   651  001A                     	;# 
   652  001B                     	;# 
   653  001C                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0090                     	;# 
   658  0091                     	;# 
   659  0092                     	;# 
   660  0095                     	;# 
   661  0096                     	;# 
   662  0097                     	;# 
   663  0099                     	;# 
   664  009A                     	;# 
   665  009B                     	;# 
   666  009B                     	;# 
   667  009C                     	;# 
   668  009D                     	;# 
   669  009E                     	;# 
   670  010C                     	;# 
   671  010D                     	;# 
   672  010E                     	;# 
   673  0116                     	;# 
   674  0117                     	;# 
   675  011D                     	;# 
   676  018C                     	;# 
   677  018D                     	;# 
   678  018E                     	;# 
   679  0191                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0194                     	;# 
   685  0195                     	;# 
   686  0196                     	;# 
   687  0197                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019B                     	;# 
   693  019B                     	;# 
   694  019C                     	;# 
   695  019C                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  020D                     	;# 
   700  0210                     	;# 
   701  0211                     	;# 
   702  0211                     	;# 
   703  0212                     	;# 
   704  0212                     	;# 
   705  0213                     	;# 
   706  0213                     	;# 
   707  0214                     	;# 
   708  0214                     	;# 
   709  0215                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0216                     	;# 
   713  0216                     	;# 
   714  0217                     	;# 
   715  0217                     	;# 
   716  0291                     	;# 
   717  0291                     	;# 
   718  0292                     	;# 
   719  0293                     	;# 
   720  0298                     	;# 
   721  0298                     	;# 
   722  0299                     	;# 
   723  029A                     	;# 
   724  0394                     	;# 
   725  0395                     	;# 
   726  0396                     	;# 
   727  0FE4                     	;# 
   728  0FE5                     	;# 
   729  0FE6                     	;# 
   730  0FE7                     	;# 
   731  0FE8                     	;# 
   732  0FE9                     	;# 
   733  0FEA                     	;# 
   734  0FEB                     	;# 
   735  0FED                     	;# 
   736  0FEE                     	;# 
   737  0FEF                     	;# 
   738  0000                     	;# 
   739  0001                     	;# 
   740  0002                     	;# 
   741  0003                     	;# 
   742  0004                     	;# 
   743  0005                     	;# 
   744  0006                     	;# 
   745  0007                     	;# 
   746  0008                     	;# 
   747  0009                     	;# 
   748  000A                     	;# 
   749  000B                     	;# 
   750  000C                     	;# 
   751  000D                     	;# 
   752  000E                     	;# 
   753  0010                     	;# 
   754  0011                     	;# 
   755  0012                     	;# 
   756  0015                     	;# 
   757  0016                     	;# 
   758  0016                     	;# 
   759  0017                     	;# 
   760  0018                     	;# 
   761  0019                     	;# 
   762  001A                     	;# 
   763  001B                     	;# 
   764  001C                     	;# 
   765  008C                     	;# 
   766  008D                     	;# 
   767  008E                     	;# 
   768  0090                     	;# 
   769  0091                     	;# 
   770  0092                     	;# 
   771  0095                     	;# 
   772  0096                     	;# 
   773  0097                     	;# 
   774  0099                     	;# 
   775  009A                     	;# 
   776  009B                     	;# 
   777  009B                     	;# 
   778  009C                     	;# 
   779  009D                     	;# 
   780  009E                     	;# 
   781  010C                     	;# 
   782  010D                     	;# 
   783  010E                     	;# 
   784  0116                     	;# 
   785  0117                     	;# 
   786  011D                     	;# 
   787  018C                     	;# 
   788  018D                     	;# 
   789  018E                     	;# 
   790  0191                     	;# 
   791  0191                     	;# 
   792  0192                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0197                     	;# 
   799  0199                     	;# 
   800  019A                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019B                     	;# 
   805  019C                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020D                     	;# 
   811  0210                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0291                     	;# 
   828  0291                     	;# 
   829  0292                     	;# 
   830  0293                     	;# 
   831  0298                     	;# 
   832  0298                     	;# 
   833  0299                     	;# 
   834  029A                     	;# 
   835  0394                     	;# 
   836  0395                     	;# 
   837  0396                     	;# 
   838  0FE4                     	;# 
   839  0FE5                     	;# 
   840  0FE6                     	;# 
   841  0FE7                     	;# 
   842  0FE8                     	;# 
   843  0FE9                     	;# 
   844  0FEA                     	;# 
   845  0FEB                     	;# 
   846  0FED                     	;# 
   847  0FEE                     	;# 
   848  0FEF                     	;# 
   849  0000                     	;# 
   850  0001                     	;# 
   851  0002                     	;# 
   852  0003                     	;# 
   853  0004                     	;# 
   854  0005                     	;# 
   855  0006                     	;# 
   856  0007                     	;# 
   857  0008                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  0010                     	;# 
   865  0011                     	;# 
   866  0012                     	;# 
   867  0015                     	;# 
   868  0016                     	;# 
   869  0016                     	;# 
   870  0017                     	;# 
   871  0018                     	;# 
   872  0019                     	;# 
   873  001A                     	;# 
   874  001B                     	;# 
   875  001C                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  008E                     	;# 
   879  0090                     	;# 
   880  0091                     	;# 
   881  0092                     	;# 
   882  0095                     	;# 
   883  0096                     	;# 
   884  0097                     	;# 
   885  0099                     	;# 
   886  009A                     	;# 
   887  009B                     	;# 
   888  009B                     	;# 
   889  009C                     	;# 
   890  009D                     	;# 
   891  009E                     	;# 
   892  010C                     	;# 
   893  010D                     	;# 
   894  010E                     	;# 
   895  0116                     	;# 
   896  0117                     	;# 
   897  011D                     	;# 
   898  018C                     	;# 
   899  018D                     	;# 
   900  018E                     	;# 
   901  0191                     	;# 
   902  0191                     	;# 
   903  0192                     	;# 
   904  0193                     	;# 
   905  0193                     	;# 
   906  0194                     	;# 
   907  0195                     	;# 
   908  0196                     	;# 
   909  0197                     	;# 
   910  0199                     	;# 
   911  019A                     	;# 
   912  019B                     	;# 
   913  019B                     	;# 
   914  019B                     	;# 
   915  019B                     	;# 
   916  019C                     	;# 
   917  019C                     	;# 
   918  019D                     	;# 
   919  019E                     	;# 
   920  019F                     	;# 
   921  020D                     	;# 
   922  0210                     	;# 
   923  0211                     	;# 
   924  0211                     	;# 
   925  0212                     	;# 
   926  0212                     	;# 
   927  0213                     	;# 
   928  0213                     	;# 
   929  0214                     	;# 
   930  0214                     	;# 
   931  0215                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0216                     	;# 
   935  0216                     	;# 
   936  0217                     	;# 
   937  0217                     	;# 
   938  0291                     	;# 
   939  0291                     	;# 
   940  0292                     	;# 
   941  0293                     	;# 
   942  0298                     	;# 
   943  0298                     	;# 
   944  0299                     	;# 
   945  029A                     	;# 
   946  0394                     	;# 
   947  0395                     	;# 
   948  0396                     	;# 
   949  0FE4                     	;# 
   950  0FE5                     	;# 
   951  0FE6                     	;# 
   952  0FE7                     	;# 
   953  0FE8                     	;# 
   954  0FE9                     	;# 
   955  0FEA                     	;# 
   956  0FEB                     	;# 
   957  0FED                     	;# 
   958  0FEE                     	;# 
   959  0FEF                     	;# 
   960  0000                     	;# 
   961  0001                     	;# 
   962  0002                     	;# 
   963  0003                     	;# 
   964  0004                     	;# 
   965  0005                     	;# 
   966  0006                     	;# 
   967  0007                     	;# 
   968  0008                     	;# 
   969  0009                     	;# 
   970  000A                     	;# 
   971  000B                     	;# 
   972  000C                     	;# 
   973  000D                     	;# 
   974  000E                     	;# 
   975  0010                     	;# 
   976  0011                     	;# 
   977  0012                     	;# 
   978  0015                     	;# 
   979  0016                     	;# 
   980  0016                     	;# 
   981  0017                     	;# 
   982  0018                     	;# 
   983  0019                     	;# 
   984  001A                     	;# 
   985  001B                     	;# 
   986  001C                     	;# 
   987  008C                     	;# 
   988  008D                     	;# 
   989  008E                     	;# 
   990  0090                     	;# 
   991  0091                     	;# 
   992  0092                     	;# 
   993  0095                     	;# 
   994  0096                     	;# 
   995  0097                     	;# 
   996  0099                     	;# 
   997  009A                     	;# 
   998  009B                     	;# 
   999  009B                     	;# 
  1000  009C                     	;# 
  1001  009D                     	;# 
  1002  009E                     	;# 
  1003  010C                     	;# 
  1004  010D                     	;# 
  1005  010E                     	;# 
  1006  0116                     	;# 
  1007  0117                     	;# 
  1008  011D                     	;# 
  1009  018C                     	;# 
  1010  018D                     	;# 
  1011  018E                     	;# 
  1012  0191                     	;# 
  1013  0191                     	;# 
  1014  0192                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0197                     	;# 
  1021  0199                     	;# 
  1022  019A                     	;# 
  1023  019B                     	;# 
  1024  019B                     	;# 
  1025  019B                     	;# 
  1026  019B                     	;# 
  1027  019C                     	;# 
  1028  019C                     	;# 
  1029  019D                     	;# 
  1030  019E                     	;# 
  1031  019F                     	;# 
  1032  020D                     	;# 
  1033  0210                     	;# 
  1034  0211                     	;# 
  1035  0211                     	;# 
  1036  0212                     	;# 
  1037  0212                     	;# 
  1038  0213                     	;# 
  1039  0213                     	;# 
  1040  0214                     	;# 
  1041  0214                     	;# 
  1042  0215                     	;# 
  1043  0215                     	;# 
  1044  0215                     	;# 
  1045  0216                     	;# 
  1046  0216                     	;# 
  1047  0217                     	;# 
  1048  0217                     	;# 
  1049  0291                     	;# 
  1050  0291                     	;# 
  1051  0292                     	;# 
  1052  0293                     	;# 
  1053  0298                     	;# 
  1054  0298                     	;# 
  1055  0299                     	;# 
  1056  029A                     	;# 
  1057  0394                     	;# 
  1058  0395                     	;# 
  1059  0396                     	;# 
  1060  0FE4                     	;# 
  1061  0FE5                     	;# 
  1062  0FE6                     	;# 
  1063  0FE7                     	;# 
  1064  0FE8                     	;# 
  1065  0FE9                     	;# 
  1066  0FEA                     	;# 
  1067  0FEB                     	;# 
  1068  0FED                     	;# 
  1069  0FEE                     	;# 
  1070  0FEF                     	;# 
  1071  0000                     	;# 
  1072  0001                     	;# 
  1073  0002                     	;# 
  1074  0003                     	;# 
  1075  0004                     	;# 
  1076  0005                     	;# 
  1077  0006                     	;# 
  1078  0007                     	;# 
  1079  0008                     	;# 
  1080  0009                     	;# 
  1081  000A                     	;# 
  1082  000B                     	;# 
  1083  000C                     	;# 
  1084  000D                     	;# 
  1085  000E                     	;# 
  1086  0010                     	;# 
  1087  0011                     	;# 
  1088  0012                     	;# 
  1089  0015                     	;# 
  1090  0016                     	;# 
  1091  0016                     	;# 
  1092  0017                     	;# 
  1093  0018                     	;# 
  1094  0019                     	;# 
  1095  001A                     	;# 
  1096  001B                     	;# 
  1097  001C                     	;# 
  1098  008C                     	;# 
  1099  008D                     	;# 
  1100  008E                     	;# 
  1101  0090                     	;# 
  1102  0091                     	;# 
  1103  0092                     	;# 
  1104  0095                     	;# 
  1105  0096                     	;# 
  1106  0097                     	;# 
  1107  0099                     	;# 
  1108  009A                     	;# 
  1109  009B                     	;# 
  1110  009B                     	;# 
  1111  009C                     	;# 
  1112  009D                     	;# 
  1113  009E                     	;# 
  1114  010C                     	;# 
  1115  010D                     	;# 
  1116  010E                     	;# 
  1117  0116                     	;# 
  1118  0117                     	;# 
  1119  011D                     	;# 
  1120  018C                     	;# 
  1121  018D                     	;# 
  1122  018E                     	;# 
  1123  0191                     	;# 
  1124  0191                     	;# 
  1125  0192                     	;# 
  1126  0193                     	;# 
  1127  0193                     	;# 
  1128  0194                     	;# 
  1129  0195                     	;# 
  1130  0196                     	;# 
  1131  0197                     	;# 
  1132  0199                     	;# 
  1133  019A                     	;# 
  1134  019B                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019C                     	;# 
  1139  019C                     	;# 
  1140  019D                     	;# 
  1141  019E                     	;# 
  1142  019F                     	;# 
  1143  020D                     	;# 
  1144  0210                     	;# 
  1145  0211                     	;# 
  1146  0211                     	;# 
  1147  0212                     	;# 
  1148  0212                     	;# 
  1149  0213                     	;# 
  1150  0213                     	;# 
  1151  0214                     	;# 
  1152  0214                     	;# 
  1153  0215                     	;# 
  1154  0215                     	;# 
  1155  0215                     	;# 
  1156  0216                     	;# 
  1157  0216                     	;# 
  1158  0217                     	;# 
  1159  0217                     	;# 
  1160  0291                     	;# 
  1161  0291                     	;# 
  1162  0292                     	;# 
  1163  0293                     	;# 
  1164  0298                     	;# 
  1165  0298                     	;# 
  1166  0299                     	;# 
  1167  029A                     	;# 
  1168  0394                     	;# 
  1169  0395                     	;# 
  1170  0396                     	;# 
  1171  0FE4                     	;# 
  1172  0FE5                     	;# 
  1173  0FE6                     	;# 
  1174  0FE7                     	;# 
  1175  0FE8                     	;# 
  1176  0FE9                     	;# 
  1177  0FEA                     	;# 
  1178  0FEB                     	;# 
  1179  0FED                     	;# 
  1180  0FEE                     	;# 
  1181  0FEF                     	;# 
  1182  0000                     	;# 
  1183  0001                     	;# 
  1184  0002                     	;# 
  1185  0003                     	;# 
  1186  0004                     	;# 
  1187  0005                     	;# 
  1188  0006                     	;# 
  1189  0007                     	;# 
  1190  0008                     	;# 
  1191  0009                     	;# 
  1192  000A                     	;# 
  1193  000B                     	;# 
  1194  000C                     	;# 
  1195  000D                     	;# 
  1196  000E                     	;# 
  1197  0010                     	;# 
  1198  0011                     	;# 
  1199  0012                     	;# 
  1200  0015                     	;# 
  1201  0016                     	;# 
  1202  0016                     	;# 
  1203  0017                     	;# 
  1204  0018                     	;# 
  1205  0019                     	;# 
  1206  001A                     	;# 
  1207  001B                     	;# 
  1208  001C                     	;# 
  1209  008C                     	;# 
  1210  008D                     	;# 
  1211  008E                     	;# 
  1212  0090                     	;# 
  1213  0091                     	;# 
  1214  0092                     	;# 
  1215  0095                     	;# 
  1216  0096                     	;# 
  1217  0097                     	;# 
  1218  0099                     	;# 
  1219  009A                     	;# 
  1220  009B                     	;# 
  1221  009B                     	;# 
  1222  009C                     	;# 
  1223  009D                     	;# 
  1224  009E                     	;# 
  1225  010C                     	;# 
  1226  010D                     	;# 
  1227  010E                     	;# 
  1228  0116                     	;# 
  1229  0117                     	;# 
  1230  011D                     	;# 
  1231  018C                     	;# 
  1232  018D                     	;# 
  1233  018E                     	;# 
  1234  0191                     	;# 
  1235  0191                     	;# 
  1236  0192                     	;# 
  1237  0193                     	;# 
  1238  0193                     	;# 
  1239  0194                     	;# 
  1240  0195                     	;# 
  1241  0196                     	;# 
  1242  0197                     	;# 
  1243  0199                     	;# 
  1244  019A                     	;# 
  1245  019B                     	;# 
  1246  019B                     	;# 
  1247  019B                     	;# 
  1248  019B                     	;# 
  1249  019C                     	;# 
  1250  019C                     	;# 
  1251  019D                     	;# 
  1252  019E                     	;# 
  1253  019F                     	;# 
  1254  020D                     	;# 
  1255  0210                     	;# 
  1256  0211                     	;# 
  1257  0211                     	;# 
  1258  0212                     	;# 
  1259  0212                     	;# 
  1260  0213                     	;# 
  1261  0213                     	;# 
  1262  0214                     	;# 
  1263  0214                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0215                     	;# 
  1267  0216                     	;# 
  1268  0216                     	;# 
  1269  0217                     	;# 
  1270  0217                     	;# 
  1271  0291                     	;# 
  1272  0291                     	;# 
  1273  0292                     	;# 
  1274  0293                     	;# 
  1275  0298                     	;# 
  1276  0298                     	;# 
  1277  0299                     	;# 
  1278  029A                     	;# 
  1279  0394                     	;# 
  1280  0395                     	;# 
  1281  0396                     	;# 
  1282  0FE4                     	;# 
  1283  0FE5                     	;# 
  1284  0FE6                     	;# 
  1285  0FE7                     	;# 
  1286  0FE8                     	;# 
  1287  0FE9                     	;# 
  1288  0FEA                     	;# 
  1289  0FEB                     	;# 
  1290  0FED                     	;# 
  1291  0FEE                     	;# 
  1292  0FEF                     	;# 
  1293  0000                     	;# 
  1294  0001                     	;# 
  1295  0002                     	;# 
  1296  0003                     	;# 
  1297  0004                     	;# 
  1298  0005                     	;# 
  1299  0006                     	;# 
  1300  0007                     	;# 
  1301  0008                     	;# 
  1302  0009                     	;# 
  1303  000A                     	;# 
  1304  000B                     	;# 
  1305  000C                     	;# 
  1306  000D                     	;# 
  1307  000E                     	;# 
  1308  0010                     	;# 
  1309  0011                     	;# 
  1310  0012                     	;# 
  1311  0015                     	;# 
  1312  0016                     	;# 
  1313  0016                     	;# 
  1314  0017                     	;# 
  1315  0018                     	;# 
  1316  0019                     	;# 
  1317  001A                     	;# 
  1318  001B                     	;# 
  1319  001C                     	;# 
  1320  008C                     	;# 
  1321  008D                     	;# 
  1322  008E                     	;# 
  1323  0090                     	;# 
  1324  0091                     	;# 
  1325  0092                     	;# 
  1326  0095                     	;# 
  1327  0096                     	;# 
  1328  0097                     	;# 
  1329  0099                     	;# 
  1330  009A                     	;# 
  1331  009B                     	;# 
  1332  009B                     	;# 
  1333  009C                     	;# 
  1334  009D                     	;# 
  1335  009E                     	;# 
  1336  010C                     	;# 
  1337  010D                     	;# 
  1338  010E                     	;# 
  1339  0116                     	;# 
  1340  0117                     	;# 
  1341  011D                     	;# 
  1342  018C                     	;# 
  1343  018D                     	;# 
  1344  018E                     	;# 
  1345  0191                     	;# 
  1346  0191                     	;# 
  1347  0192                     	;# 
  1348  0193                     	;# 
  1349  0193                     	;# 
  1350  0194                     	;# 
  1351  0195                     	;# 
  1352  0196                     	;# 
  1353  0197                     	;# 
  1354  0199                     	;# 
  1355  019A                     	;# 
  1356  019B                     	;# 
  1357  019B                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019C                     	;# 
  1362  019D                     	;# 
  1363  019E                     	;# 
  1364  019F                     	;# 
  1365  020D                     	;# 
  1366  0210                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0291                     	;# 
  1383  0291                     	;# 
  1384  0292                     	;# 
  1385  0293                     	;# 
  1386  0298                     	;# 
  1387  0298                     	;# 
  1388  0299                     	;# 
  1389  029A                     	;# 
  1390  0394                     	;# 
  1391  0395                     	;# 
  1392  0396                     	;# 
  1393  0FE4                     	;# 
  1394  0FE5                     	;# 
  1395  0FE6                     	;# 
  1396  0FE7                     	;# 
  1397  0FE8                     	;# 
  1398  0FE9                     	;# 
  1399  0FEA                     	;# 
  1400  0FEB                     	;# 
  1401  0FED                     	;# 
  1402  0FEE                     	;# 
  1403  0FEF                     	;# 
  1404  0000                     	;# 
  1405  0001                     	;# 
  1406  0002                     	;# 
  1407  0003                     	;# 
  1408  0004                     	;# 
  1409  0005                     	;# 
  1410  0006                     	;# 
  1411  0007                     	;# 
  1412  0008                     	;# 
  1413  0009                     	;# 
  1414  000A                     	;# 
  1415  000B                     	;# 
  1416  000C                     	;# 
  1417  000D                     	;# 
  1418  000E                     	;# 
  1419  0010                     	;# 
  1420  0011                     	;# 
  1421  0012                     	;# 
  1422  0015                     	;# 
  1423  0016                     	;# 
  1424  0016                     	;# 
  1425  0017                     	;# 
  1426  0018                     	;# 
  1427  0019                     	;# 
  1428  001A                     	;# 
  1429  001B                     	;# 
  1430  001C                     	;# 
  1431  008C                     	;# 
  1432  008D                     	;# 
  1433  008E                     	;# 
  1434  0090                     	;# 
  1435  0091                     	;# 
  1436  0092                     	;# 
  1437  0095                     	;# 
  1438  0096                     	;# 
  1439  0097                     	;# 
  1440  0099                     	;# 
  1441  009A                     	;# 
  1442  009B                     	;# 
  1443  009B                     	;# 
  1444  009C                     	;# 
  1445  009D                     	;# 
  1446  009E                     	;# 
  1447  010C                     	;# 
  1448  010D                     	;# 
  1449  010E                     	;# 
  1450  0116                     	;# 
  1451  0117                     	;# 
  1452  011D                     	;# 
  1453  018C                     	;# 
  1454  018D                     	;# 
  1455  018E                     	;# 
  1456  0191                     	;# 
  1457  0191                     	;# 
  1458  0192                     	;# 
  1459  0193                     	;# 
  1460  0193                     	;# 
  1461  0194                     	;# 
  1462  0195                     	;# 
  1463  0196                     	;# 
  1464  0197                     	;# 
  1465  0199                     	;# 
  1466  019A                     	;# 
  1467  019B                     	;# 
  1468  019B                     	;# 
  1469  019B                     	;# 
  1470  019B                     	;# 
  1471  019C                     	;# 
  1472  019C                     	;# 
  1473  019D                     	;# 
  1474  019E                     	;# 
  1475  019F                     	;# 
  1476  020D                     	;# 
  1477  0210                     	;# 
  1478  0211                     	;# 
  1479  0211                     	;# 
  1480  0212                     	;# 
  1481  0212                     	;# 
  1482  0213                     	;# 
  1483  0213                     	;# 
  1484  0214                     	;# 
  1485  0214                     	;# 
  1486  0215                     	;# 
  1487  0215                     	;# 
  1488  0215                     	;# 
  1489  0216                     	;# 
  1490  0216                     	;# 
  1491  0217                     	;# 
  1492  0217                     	;# 
  1493  0291                     	;# 
  1494  0291                     	;# 
  1495  0292                     	;# 
  1496  0293                     	;# 
  1497  0298                     	;# 
  1498  0298                     	;# 
  1499  0299                     	;# 
  1500  029A                     	;# 
  1501  0394                     	;# 
  1502  0395                     	;# 
  1503  0396                     	;# 
  1504  0FE4                     	;# 
  1505  0FE5                     	;# 
  1506  0FE6                     	;# 
  1507  0FE7                     	;# 
  1508  0FE8                     	;# 
  1509  0FE9                     	;# 
  1510  0FEA                     	;# 
  1511  0FEB                     	;# 
  1512  0FED                     	;# 
  1513  0FEE                     	;# 
  1514  0FEF                     	;# 
  1515  0000                     	;# 
  1516  0001                     	;# 
  1517  0002                     	;# 
  1518  0003                     	;# 
  1519  0004                     	;# 
  1520  0005                     	;# 
  1521  0006                     	;# 
  1522  0007                     	;# 
  1523  0008                     	;# 
  1524  0009                     	;# 
  1525  000A                     	;# 
  1526  000B                     	;# 
  1527  000C                     	;# 
  1528  000D                     	;# 
  1529  000E                     	;# 
  1530  0010                     	;# 
  1531  0011                     	;# 
  1532  0012                     	;# 
  1533  0015                     	;# 
  1534  0016                     	;# 
  1535  0016                     	;# 
  1536  0017                     	;# 
  1537  0018                     	;# 
  1538  0019                     	;# 
  1539  001A                     	;# 
  1540  001B                     	;# 
  1541  001C                     	;# 
  1542  008C                     	;# 
  1543  008D                     	;# 
  1544  008E                     	;# 
  1545  0090                     	;# 
  1546  0091                     	;# 
  1547  0092                     	;# 
  1548  0095                     	;# 
  1549  0096                     	;# 
  1550  0097                     	;# 
  1551  0099                     	;# 
  1552  009A                     	;# 
  1553  009B                     	;# 
  1554  009B                     	;# 
  1555  009C                     	;# 
  1556  009D                     	;# 
  1557  009E                     	;# 
  1558  010C                     	;# 
  1559  010D                     	;# 
  1560  010E                     	;# 
  1561  0116                     	;# 
  1562  0117                     	;# 
  1563  011D                     	;# 
  1564  018C                     	;# 
  1565  018D                     	;# 
  1566  018E                     	;# 
  1567  0191                     	;# 
  1568  0191                     	;# 
  1569  0192                     	;# 
  1570  0193                     	;# 
  1571  0193                     	;# 
  1572  0194                     	;# 
  1573  0195                     	;# 
  1574  0196                     	;# 
  1575  0197                     	;# 
  1576  0199                     	;# 
  1577  019A                     	;# 
  1578  019B                     	;# 
  1579  019B                     	;# 
  1580  019B                     	;# 
  1581  019B                     	;# 
  1582  019C                     	;# 
  1583  019C                     	;# 
  1584  019D                     	;# 
  1585  019E                     	;# 
  1586  019F                     	;# 
  1587  020D                     	;# 
  1588  0210                     	;# 
  1589  0211                     	;# 
  1590  0211                     	;# 
  1591  0212                     	;# 
  1592  0212                     	;# 
  1593  0213                     	;# 
  1594  0213                     	;# 
  1595  0214                     	;# 
  1596  0214                     	;# 
  1597  0215                     	;# 
  1598  0215                     	;# 
  1599  0215                     	;# 
  1600  0216                     	;# 
  1601  0216                     	;# 
  1602  0217                     	;# 
  1603  0217                     	;# 
  1604  0291                     	;# 
  1605  0291                     	;# 
  1606  0292                     	;# 
  1607  0293                     	;# 
  1608  0298                     	;# 
  1609  0298                     	;# 
  1610  0299                     	;# 
  1611  029A                     	;# 
  1612  0394                     	;# 
  1613  0395                     	;# 
  1614  0396                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE9                     	;# 
  1621  0FEA                     	;# 
  1622  0FEB                     	;# 
  1623  0FED                     	;# 
  1624  0FEE                     	;# 
  1625  0FEF                     	;# 
  1626                           
  1627                           	psect	idataBANK1
  1628  0CF3                     __pidataBANK1:	
  1629                           
  1630                           ;initializer for _cc1PaTable
  1631  0CF3  3403               	retlw	3
  1632  0CF4  340F               	retlw	15
  1633  0CF5  341E               	retlw	30
  1634  0CF6  3427               	retlw	39
  1635  0CF7  3450               	retlw	80
  1636  0CF8  3481               	retlw	129
  1637  0CF9  34CB               	retlw	203
  1638  0CFA  34C2               	retlw	194
  1639                           
  1640                           	psect	idataBANK2
  1641  0752                     __pidataBANK2:	
  1642                           
  1643                           ;initializer for _cc1InitVal
  1644  0752  3447               	retlw	71
  1645  0753  3446               	retlw	70
  1646  0754  3480               	retlw	128
  1647  0755  340B               	retlw	11
  1648  0756  34D3               	retlw	211
  1649  0757  3491               	retlw	145
  1650  0758  3409               	retlw	9
  1651  0759  3408               	retlw	8
  1652  075A  3404               	retlw	4
  1653  075B  3400               	retlw	0
  1654  075C  3400               	retlw	0
  1655  075D  3406               	retlw	6
  1656  075E  3400               	retlw	0
  1657  075F  3421               	retlw	33
  1658  0760  3463               	retlw	99
  1659  0761  3491               	retlw	145
  1660  0762  34CA               	retlw	202
  1661  0763  3483               	retlw	131
  1662  0764  3402               	retlw	2
  1663  0765  3402               	retlw	2
  1664  0766  343B               	retlw	59
  1665  0767  3434               	retlw	52
  1666  0768  3407               	retlw	7
  1667  0769  343F               	retlw	63
  1668  076A  3408               	retlw	8
  1669  076B  3416               	retlw	22
  1670  076C  346C               	retlw	108
  1671  076D  3403               	retlw	3
  1672  076E  3440               	retlw	64
  1673  076F  3491               	retlw	145
  1674  0770  3487               	retlw	135
  1675  0771  346B               	retlw	107
  1676  0772  34FB               	retlw	251
  1677  0773  3456               	retlw	86
  1678  0774  3416               	retlw	22
  1679  0775  34E9               	retlw	233
  1680  0776  342A               	retlw	42
  1681  0777  3400               	retlw	0
  1682  0778  341F               	retlw	31
  1683  0779  3441               	retlw	65
  1684  077A  3400               	retlw	0
  1685  077B  3459               	retlw	89
  1686  077C  347F               	retlw	127
  1687  077D  343F               	retlw	63
  1688  077E  3481               	retlw	129
  1689  077F  3435               	retlw	53
  1690  0780  3409               	retlw	9
  1691                           
  1692                           	psect	strings
  1693  0800                     __pstrings:	
  1694  0800                     __stringtab:	
  1695  0800  3400               	retlw	0
  1696  0801                     __end_of__stringtab:	
  1697  0801                     _nvm_pgm_cfg:	
  1698  0801  345C               	retlw	92
  1699  0802  34C5               	retlw	197
  1700  0803  3400               	retlw	0
  1701  0804  3400               	retlw	0
  1702  0805  3400               	retlw	0
  1703  0806                     __end_of_nvm_pgm_cfg:	
  1704  000B                     _INTCON	set	11
  1705  000B                     _INTCONbits	set	11
  1706  0011                     _PIR1	set	17
  1707  0011                     _PIR1bits	set	17
  1708  0012                     _PIR2	set	18
  1709  000C                     _PORTAbits	set	12
  1710  000D                     _PORTB	set	13
  1711  000D                     _PORTBbits	set	13
  1712  000E                     _PORTC	set	14
  1713  000E                     _PORTCbits	set	14
  1714  0018                     _T1CON	set	24
  1715  0015                     _TMR0	set	21
  1716  0017                     _TMR1H	set	23
  1717  0016                     _TMR1L	set	22
  1718  009D                     _ADCON0	set	157
  1719  009D                     _ADCON0bits	set	157
  1720  009E                     _ADCON1	set	158
  1721  009C                     _ADRESH	set	156
  1722  0095                     _OPTION_REG	set	149
  1723  0099                     _OSCCON	set	153
  1724  0091                     _PIE1	set	145
  1725  0092                     _PIE2	set	146
  1726  008C                     _TRISA	set	140
  1727  008D                     _TRISB	set	141
  1728  008E                     _TRISC	set	142
  1729  0097                     _WDTCON	set	151
  1730  0117                     _FVRCON	set	279
  1731  0191                     _PMADR	set	401
  1732  0193                     _PMDAT	set	403
  1733  018C                     _ANSELA	set	396
  1734  018D                     _ANSELB	set	397
  1735  018E                     _ANSELC	set	398
  1736  0195                     _PMCON1	set	405
  1737  0195                     _PMCON1bits	set	405
  1738  0196                     _PMCON2	set	406
  1739  0211                     _SSPBUF	set	529
  1740  0215                     _SSPCON1	set	533
  1741  0216                     _SSPCON2	set	534
  1742  0215                     _SSPCONbits	set	533
  1743  0214                     _SSPSTAT	set	532
  1744  020D                     _WPUB	set	525
  1745  0396                     _IOCBFbits	set	918
  1746  0395                     _IOCBN	set	917
  1747  0394                     _IOCBP	set	916
  1748                           
  1749                           ; #config settings
  1750  0000                     
  1751                           	psect	cinit
  1752  0016                     start_initialization:	
  1753  0016                     __initialization:	
  1754                           
  1755                           ; Clear objects allocated to COMMON
  1756  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1757                           
  1758                           ; Clear objects allocated to BANK0
  1759  0017  3069               	movlw	low __pbssBANK0
  1760  0018  0084               	movwf	4
  1761  0019  3000               	movlw	high __pbssBANK0
  1762  001A  0085               	movwf	5
  1763  001B  3007               	movlw	7
  1764  001C  318C  24E5  3180   	fcall	clear_ram0
  1765                           
  1766                           ; Clear objects allocated to BANK1
  1767  001F  30A0               	movlw	low __pbssBANK1
  1768  0020  0084               	movwf	4
  1769  0021  3000               	movlw	high __pbssBANK1
  1770  0022  0085               	movwf	5
  1771  0023  302A               	movlw	42
  1772  0024  318C  24E5  3180   	fcall	clear_ram0
  1773                           
  1774                           ; Initialize objects allocated to BANK1
  1775  0027  30F3               	movlw	low __pidataBANK1
  1776  0028  0084               	movwf	4
  1777  0029  308C               	movlw	(high __pidataBANK1)| (0+128)
  1778  002A  0085               	movwf	5
  1779  002B  30CA               	movlw	low __pdataBANK1
  1780  002C  0086               	movwf	6
  1781  002D  3000               	movlw	high __pdataBANK1
  1782  002E  0087               	movwf	7
  1783  002F  3008               	movlw	8
  1784  0030  318C  24DF  3180   	fcall	init_ram
  1785                           
  1786                           ; Initialize objects allocated to BANK2
  1787  0033  3052               	movlw	low __pidataBANK2
  1788  0034  0084               	movwf	4
  1789  0035  3087               	movlw	(high __pidataBANK2)| (0+128)
  1790  0036  0085               	movwf	5
  1791  0037  3020               	movlw	low __pdataBANK2
  1792  0038  0086               	movwf	6
  1793  0039  3001               	movlw	high __pdataBANK2
  1794  003A  0087               	movwf	7
  1795  003B  302F               	movlw	47
  1796  003C  318C  24DF         	fcall	init_ram
  1797  003E                     end_of_initialization:	
  1798                           ;End of C runtime variable initialization code
  1799                           
  1800  003E                     __end_of__initialization:	
  1801  003E  0020               	movlb	0
  1802  003F  3186  2E97         	ljmp	_main	;jump to C main() function
  1803                           
  1804                           	psect	bssCOMMON
  1805  007C                     __pbssCOMMON:	
  1806  007C                     _u_in_sta_currTask:	
  1807  007C                     	ds	1
  1808                           
  1809                           	psect	bssBANK0
  1810  0069                     __pbssBANK0:	
  1811  0069                     _batt:	
  1812  0069                     	ds	1
  1813  006A                     _flg_slp:	
  1814  006A                     	ds	1
  1815  006B                     _pgm_flg:	
  1816  006B                     	ds	1
  1817  006C                     _tmrPgm:	
  1818  006C                     	ds	1
  1819  006D                     _tmrRcvPkt:	
  1820  006D                     	ds	1
  1821  006E                     _u_flg_din:	
  1822  006E                     	ds	1
  1823  006F                     _u_in_sta_tmpTask:	
  1824  006F                     	ds	1
  1825                           
  1826                           	psect	bssBANK1
  1827  00A0                     __pbssBANK1:	
  1828  00A0                     _battV:	
  1829  00A0                     	ds	3
  1830  00A3                     _tempC:	
  1831  00A3                     	ds	3
  1832  00A6                     _tmrLongSel:	
  1833  00A6                     	ds	2
  1834  00A8                     _adc_ch:	
  1835  00A8                     	ds	1
  1836  00A9                     _cntSndData:	
  1837  00A9                     	ds	1
  1838  00AA                     _rtx_flg:	
  1839  00AA                     	ds	1
  1840  00AB                     _s_CC1_FLG:	
  1841  00AB                     	ds	1
  1842  00AC                     _sys_pgm_sta:	
  1843  00AC                     	ds	1
  1844  00AD                     _temp:	
  1845  00AD                     	ds	1
  1846  00AE                     _tmrDbncSel:	
  1847  00AE                     	ds	1
  1848  00AF                     _u_SYS_STA:	
  1849  00AF                     	ds	1
  1850  00B0                     _u_in_ev_down:	
  1851  00B0                     	ds	1
  1852  00B1                     _u_in_ev_long:	
  1853  00B1                     	ds	1
  1854  00B2                     _u_in_ev_up:	
  1855  00B2                     	ds	1
  1856  00B3                     _pktRx:	
  1857  00B3                     	ds	9
  1858  00BC                     _pktTx:	
  1859  00BC                     	ds	9
  1860  00C5                     _pgm_cfg:	
  1861  00C5                     	ds	5
  1862                           
  1863                           	psect	dataBANK1
  1864  00CA                     __pdataBANK1:	
  1865  00CA                     _cc1PaTable:	
  1866  00CA                     	ds	8
  1867                           
  1868                           	psect	dataBANK2
  1869  0120                     __pdataBANK2:	
  1870  0120                     _cc1InitVal:	
  1871  0120                     	ds	47
  1872                           
  1873                           	psect	clrtext
  1874  0CE5                     clear_ram0:	
  1875                           ;	Called with FSR0 containing the base address, and
  1876                           ;	WREG with the size to clear
  1877                           
  1878  0CE5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1879  0CE6                     clrloop0:	
  1880  0CE6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1881  0CE7  3101               	addfsr 0,1
  1882  0CE8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1883  0CE9  2CE6               	goto	clrloop0	;have we reached the end yet?
  1884  0CEA  3400               	retlw	0	;all done for this memory range, return
  1885                           
  1886                           	psect	inittext
  1887  0CDF                     init_ram:	
  1888  0CDF  00FE               	movwf	126
  1889  0CE0                     initloop:	
  1890  0CE0  0012               	moviw fsr0++
  1891  0CE1  001E               	movwi fsr1++
  1892  0CE2  0BFE               	decfsz	126,f
  1893  0CE3  2CE0               	goto	initloop
  1894  0CE4  3400               	retlw	0
  1895                           
  1896                           	psect	cstackCOMMON
  1897  0070                     __pcstackCOMMON:	
  1898  0070                     ?_CC1Strobe:	
  1899  0070                     ?_CC1LoadREG:	
  1900                           ; 0 bytes @ 0x0
  1901                           
  1902  0070                     ?_PGMReadNvm:	
  1903                           ; 0 bytes @ 0x0
  1904                           
  1905  0070                     ?_PGMCheckNvm:	
  1906                           ; 0 bytes @ 0x0
  1907                           
  1908  0070                     ?_PGMNvmReset:	
  1909                           ; 0 bytes @ 0x0
  1910                           
  1911  0070                     ?_RTXStartSendData:	
  1912                           ; 0 bytes @ 0x0
  1913                           
  1914  0070                     ?_RTXSendData:	
  1915                           ; 0 bytes @ 0x0
  1916                           
  1917  0070                     ?_RTXReadPkt:	
  1918                           ; 0 bytes @ 0x0
  1919                           
  1920  0070                     ?_RTXSendRPgm:	
  1921                           ; 0 bytes @ 0x0
  1922                           
  1923  0070                     ?_INInit:	
  1924                           ; 0 bytes @ 0x0
  1925                           
  1926  0070                     ?_OUTInit:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0070                     ?_SPIInit:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0070                     ?_ADCInit:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0070                     ?_ADCConv:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0070                     ?_CC1Init:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0070                     ?_CC1Sleep:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0070                     ?_LEDInit:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0070                     ?_LEDNormalFlash:	
  1948                           ; 0 bytes @ 0x0
  1949                           
  1950  0070                     ?_LEDFastFlash:	
  1951                           ; 0 bytes @ 0x0
  1952                           
  1953  0070                     ?_NVMInit:	
  1954                           ; 0 bytes @ 0x0
  1955                           
  1956  0070                     ?_DINInit:	
  1957                           ; 0 bytes @ 0x0
  1958                           
  1959  0070                     ?_DINTick:	
  1960                           ; 0 bytes @ 0x0
  1961                           
  1962  0070                     ?_DINTask:	
  1963                           ; 0 bytes @ 0x0
  1964                           
  1965  0070                     ?_SLPSleep:	
  1966                           ; 0 bytes @ 0x0
  1967                           
  1968  0070                     ?_PGMInit:	
  1969                           ; 0 bytes @ 0x0
  1970                           
  1971  0070                     ?_PGMTick:	
  1972                           ; 0 bytes @ 0x0
  1973                           
  1974  0070                     ?_PGMWriteNvm:	
  1975                           ; 0 bytes @ 0x0
  1976                           
  1977  0070                     ?_PGMPgmOff:	
  1978                           ; 0 bytes @ 0x0
  1979                           
  1980  0070                     ?_PGMSelDown:	
  1981                           ; 0 bytes @ 0x0
  1982                           
  1983  0070                     ?_PGMSelLong:	
  1984                           ; 0 bytes @ 0x0
  1985                           
  1986  0070                     ?_RTXInit:	
  1987                           ; 0 bytes @ 0x0
  1988                           
  1989  0070                     ?_RTXTick:	
  1990                           ; 0 bytes @ 0x0
  1991                           
  1992  0070                     ?_RTXTask:	
  1993                           ; 0 bytes @ 0x0
  1994                           
  1995  0070                     ?_RTXAwake:	
  1996                           ; 0 bytes @ 0x0
  1997                           
  1998  0070                     ?_SYSInit:	
  1999                           ; 0 bytes @ 0x0
  2000                           
  2001  0070                     ?_SYSInt:	
  2002                           ; 0 bytes @ 0x0
  2003                           
  2004  0070                     ??_SYSInt:	
  2005                           ; 0 bytes @ 0x0
  2006                           
  2007  0070                     ?_SYSTask:	
  2008                           ; 0 bytes @ 0x0
  2009                           
  2010  0070                     ?_INTIsr:	
  2011                           ; 0 bytes @ 0x0
  2012                           
  2013  0070                     ??_INTIsr:	
  2014                           ; 0 bytes @ 0x0
  2015                           
  2016  0070                     ?_main:	
  2017                           ; 0 bytes @ 0x0
  2018                           
  2019                           
  2020                           ; 0 bytes @ 0x0
  2021  0070                     	ds	1
  2022  0071                     ??_INInit:	
  2023  0071                     ??_OUTInit:	
  2024                           ; 0 bytes @ 0x1
  2025                           
  2026  0071                     ??_SPIInit:	
  2027                           ; 0 bytes @ 0x1
  2028                           
  2029  0071                     ?_SPIRead:	
  2030                           ; 0 bytes @ 0x1
  2031                           
  2032  0071                     ?_SPIWrite:	
  2033                           ; 0 bytes @ 0x1
  2034                           
  2035  0071                     ??_ADCInit:	
  2036                           ; 0 bytes @ 0x1
  2037                           
  2038  0071                     ?_DLYDelay_ms:	
  2039                           ; 0 bytes @ 0x1
  2040                           
  2041  0071                     ??_LEDInit:	
  2042                           ; 0 bytes @ 0x1
  2043                           
  2044  0071                     ??_NVMInit:	
  2045                           ; 0 bytes @ 0x1
  2046                           
  2047  0071                     ?_NVMRead:	
  2048                           ; 0 bytes @ 0x1
  2049                           
  2050  0071                     ?_NVMWrite:	
  2051                           ; 0 bytes @ 0x1
  2052                           
  2053  0071                     ??_DINInit:	
  2054                           ; 0 bytes @ 0x1
  2055                           
  2056  0071                     ??_DINTick:	
  2057                           ; 0 bytes @ 0x1
  2058                           
  2059  0071                     ??_DINTask:	
  2060                           ; 0 bytes @ 0x1
  2061                           
  2062  0071                     ??_PGMTick:	
  2063                           ; 0 bytes @ 0x1
  2064                           
  2065  0071                     ??_PGMPgmOff:	
  2066                           ; 0 bytes @ 0x1
  2067                           
  2068  0071                     ??_SYSInit:	
  2069                           ; 0 bytes @ 0x1
  2070                           
  2071  0071                     ?___lwdiv:	
  2072                           ; 0 bytes @ 0x1
  2073                           
  2074  0071                     ?___ftpack:	
  2075                           ; 2 bytes @ 0x1
  2076                           
  2077  0071                     SPIRead@len:	
  2078                           ; 3 bytes @ 0x1
  2079                           
  2080  0071                     LEDInit@sta:	
  2081                           ; 1 bytes @ 0x1
  2082                           
  2083  0071                     NVMInit@sta:	
  2084                           ; 1 bytes @ 0x1
  2085                           
  2086  0071                     DINInit@sta:	
  2087                           ; 1 bytes @ 0x1
  2088                           
  2089  0071                     SPIWrite@srcPtr:	
  2090                           ; 1 bytes @ 0x1
  2091                           
  2092  0071                     DLYDelay_ms@val:	
  2093                           ; 2 bytes @ 0x1
  2094                           
  2095  0071                     NVMRead@addr:	
  2096                           ; 2 bytes @ 0x1
  2097                           
  2098  0071                     NVMWrite@addr:	
  2099                           ; 2 bytes @ 0x1
  2100                           
  2101  0071                     ___lwdiv@divisor:	
  2102                           ; 2 bytes @ 0x1
  2103                           
  2104  0071                     ___ftpack@arg:	
  2105                           ; 2 bytes @ 0x1
  2106                           
  2107                           
  2108                           ; 3 bytes @ 0x1
  2109  0071                     	ds	1
  2110  0072                     ??_SPIRead:	
  2111  0072                     INInit@sta:	
  2112                           ; 0 bytes @ 0x2
  2113                           
  2114  0072                     OUTInit@sta:	
  2115                           ; 1 bytes @ 0x2
  2116                           
  2117  0072                     SPIInit@state:	
  2118                           ; 1 bytes @ 0x2
  2119                           
  2120  0072                     ADCInit@state:	
  2121                           ; 1 bytes @ 0x2
  2122                           
  2123  0072                     SYSInit@state:	
  2124                           ; 1 bytes @ 0x2
  2125                           
  2126                           
  2127                           ; 1 bytes @ 0x2
  2128  0072                     	ds	1
  2129  0073                     ??_DLYDelay_ms:	
  2130  0073                     SPIWrite@len:	
  2131                           ; 0 bytes @ 0x3
  2132                           
  2133  0073                     NVMRead@dest:	
  2134                           ; 1 bytes @ 0x3
  2135                           
  2136  0073                     NVMWrite@source:	
  2137                           ; 1 bytes @ 0x3
  2138                           
  2139  0073                     ___lwdiv@dividend:	
  2140                           ; 1 bytes @ 0x3
  2141                           
  2142                           
  2143                           ; 2 bytes @ 0x3
  2144  0073                     	ds	1
  2145  0074                     ??_SPIWrite:	
  2146  0074                     SPIRead@dstPtr:	
  2147                           ; 0 bytes @ 0x4
  2148                           
  2149  0074                     NVMRead@len:	
  2150                           ; 1 bytes @ 0x4
  2151                           
  2152  0074                     NVMWrite@len:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     ___ftpack@exp:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158                           
  2159                           ; 1 bytes @ 0x4
  2160  0074                     	ds	1
  2161  0075                     ??_NVMRead:	
  2162  0075                     ??_NVMWrite:	
  2163                           ; 0 bytes @ 0x5
  2164                           
  2165  0075                     ??___lwdiv:	
  2166                           ; 0 bytes @ 0x5
  2167                           
  2168  0075                     SPIRead@i:	
  2169                           ; 0 bytes @ 0x5
  2170                           
  2171  0075                     ___ftpack@sign:	
  2172                           ; 1 bytes @ 0x5
  2173                           
  2174  0075                     DLYDelay_ms@i:	
  2175                           ; 1 bytes @ 0x5
  2176                           
  2177                           
  2178                           ; 2 bytes @ 0x5
  2179  0075                     	ds	1
  2180  0076                     ??___ftpack:	
  2181  0076                     SPIWrite@i:	
  2182                           ; 0 bytes @ 0x6
  2183                           
  2184  0076                     ___lwdiv@quotient:	
  2185                           ; 1 bytes @ 0x6
  2186                           
  2187                           
  2188                           ; 2 bytes @ 0x6
  2189  0076                     	ds	1
  2190  0077                     ??_CC1Strobe:	
  2191  0077                     ?_CC1Read:	
  2192                           ; 0 bytes @ 0x7
  2193                           
  2194  0077                     ?_CC1Write:	
  2195                           ; 0 bytes @ 0x7
  2196                           
  2197  0077                     ??_LEDNormalFlash:	
  2198                           ; 0 bytes @ 0x7
  2199                           
  2200  0077                     ??_LEDFastFlash:	
  2201                           ; 0 bytes @ 0x7
  2202                           
  2203  0077                     CC1Read@dst:	
  2204                           ; 0 bytes @ 0x7
  2205                           
  2206  0077                     NVMRead@i:	
  2207                           ; 1 bytes @ 0x7
  2208                           
  2209  0077                     CC1Write@src:	
  2210                           ; 1 bytes @ 0x7
  2211                           
  2212                           
  2213                           ; 2 bytes @ 0x7
  2214  0077                     	ds	1
  2215  0078                     ??_PGMReadNvm:	
  2216  0078                     ??_PGMWriteNvm:	
  2217                           ; 0 bytes @ 0x8
  2218                           
  2219  0078                     CC1Strobe@e_stb:	
  2220                           ; 0 bytes @ 0x8
  2221                           
  2222  0078                     CC1Read@len:	
  2223                           ; 1 bytes @ 0x8
  2224                           
  2225  0078                     LEDNormalFlash@num:	
  2226                           ; 1 bytes @ 0x8
  2227                           
  2228  0078                     LEDFastFlash@num:	
  2229                           ; 1 bytes @ 0x8
  2230                           
  2231  0078                     ___lwdiv@counter:	
  2232                           ; 1 bytes @ 0x8
  2233                           
  2234                           
  2235                           ; 1 bytes @ 0x8
  2236  0078                     	ds	1
  2237  0079                     ??_CC1Read:	
  2238  0079                     ?___awtoft:	
  2239                           ; 0 bytes @ 0x9
  2240                           
  2241  0079                     CC1Strobe@cc1Stb:	
  2242                           ; 3 bytes @ 0x9
  2243                           
  2244  0079                     CC1Write@len:	
  2245                           ; 1 bytes @ 0x9
  2246                           
  2247  0079                     LEDNormalFlash@i:	
  2248                           ; 1 bytes @ 0x9
  2249                           
  2250  0079                     LEDFastFlash@i:	
  2251                           ; 1 bytes @ 0x9
  2252                           
  2253  0079                     ___awtoft@c:	
  2254                           ; 1 bytes @ 0x9
  2255                           
  2256                           
  2257                           ; 2 bytes @ 0x9
  2258  0079                     	ds	1
  2259  007A                     ??_CC1Write:	
  2260  007A                     ??_CC1Sleep:	
  2261                           ; 0 bytes @ 0xA
  2262                           
  2263  007A                     ??_SLPSleep:	
  2264                           ; 0 bytes @ 0xA
  2265                           
  2266  007A                     CC1Read@addr:	
  2267                           ; 0 bytes @ 0xA
  2268                           
  2269                           
  2270                           ; 1 bytes @ 0xA
  2271  007A                     	ds	1
  2272  007B                     ??_CC1LoadREG:	
  2273  007B                     CC1Read@cc1Addr:	
  2274                           ; 0 bytes @ 0xB
  2275                           
  2276                           
  2277                           ; 1 bytes @ 0xB
  2278  007B                     	ds	1
  2279  007C                     ??_PGMCheckNvm:	
  2280  007C                     ??_RTXStartSendData:	
  2281                           ; 0 bytes @ 0xC
  2282                           
  2283  007C                     ??_CC1Init:	
  2284                           ; 0 bytes @ 0xC
  2285                           
  2286  007C                     ??_PGMInit:	
  2287                           ; 0 bytes @ 0xC
  2288                           
  2289  007C                     ??_PGMSelLong:	
  2290                           ; 0 bytes @ 0xC
  2291                           
  2292  007C                     ??_RTXInit:	
  2293                           ; 0 bytes @ 0xC
  2294                           
  2295  007C                     ??_RTXTick:	
  2296                           ; 0 bytes @ 0xC
  2297                           
  2298  007C                     ??_RTXTask:	
  2299                           ; 0 bytes @ 0xC
  2300                           
  2301  007C                     ??_RTXAwake:	
  2302                           ; 0 bytes @ 0xC
  2303                           
  2304  007C                     ??_SYSTask:	
  2305                           ; 0 bytes @ 0xC
  2306                           
  2307                           
  2308                           	psect	cstackBANK0
  2309  0020                     __pcstackBANK0:	
  2310                           ; 0 bytes @ 0xC
  2311                           
  2312  0020                     ?_RTXRcvPkt:	
  2313  0020                     ??___awtoft:	
  2314                           ; 0 bytes @ 0x0
  2315                           
  2316  0020                     CC1Write@addr:	
  2317                           ; 0 bytes @ 0x0
  2318                           
  2319  0020                     SLPSleep@IOCBNTmp:	
  2320                           ; 1 bytes @ 0x0
  2321                           
  2322  0020                     RTXRcvPkt@len:	
  2323                           ; 1 bytes @ 0x0
  2324                           
  2325  0020                     NVMWrite@bufTmpRow:	
  2326                           ; 1 bytes @ 0x0
  2327                           
  2328                           
  2329                           ; 64 bytes @ 0x0
  2330  0020                     	ds	1
  2331  0021                     ??_RTXRcvPkt:	
  2332  0021                     CC1Write@cc1Addr:	
  2333                           ; 0 bytes @ 0x1
  2334                           
  2335  0021                     SLPSleep@INTCONTmp:	
  2336                           ; 1 bytes @ 0x1
  2337                           
  2338                           
  2339                           ; 1 bytes @ 0x1
  2340  0021                     	ds	1
  2341  0022                     ?_RTXSndPkt:	
  2342  0022                     CC1Init@state:	
  2343                           ; 0 bytes @ 0x2
  2344                           
  2345  0022                     SLPSleep@WPUBTmp:	
  2346                           ; 1 bytes @ 0x2
  2347                           
  2348  0022                     RTXSndPkt@len:	
  2349                           ; 1 bytes @ 0x2
  2350                           
  2351  0022                     ___awtoft@sign:	
  2352                           ; 1 bytes @ 0x2
  2353                           
  2354                           
  2355                           ; 1 bytes @ 0x2
  2356  0022                     	ds	1
  2357  0023                     ??_RTXSndPkt:	
  2358  0023                     ?___ftmul:	
  2359                           ; 0 bytes @ 0x3
  2360                           
  2361  0023                     SLPSleep@WDTCONTmp:	
  2362                           ; 3 bytes @ 0x3
  2363                           
  2364  0023                     RTXRcvPkt@dst:	
  2365                           ; 1 bytes @ 0x3
  2366                           
  2367  0023                     ___ftmul@f1:	
  2368                           ; 1 bytes @ 0x3
  2369                           
  2370                           
  2371                           ; 3 bytes @ 0x3
  2372  0023                     	ds	1
  2373  0024                     SLPSleep@OPTION_REGTmp:	
  2374  0024                     RTXSndPkt@src:	
  2375                           ; 1 bytes @ 0x4
  2376                           
  2377                           
  2378                           ; 1 bytes @ 0x4
  2379  0024                     	ds	1
  2380  0025                     SLPSleep@FVRCONTmp:	
  2381  0025                     RTXSndPkt@numRxByte:	
  2382                           ; 1 bytes @ 0x5
  2383                           
  2384                           
  2385                           ; 1 bytes @ 0x5
  2386  0025                     	ds	1
  2387  0026                     SLPSleep@ADCON0Tmp:	
  2388  0026                     RTXSndPkt@numTxByte:	
  2389                           ; 1 bytes @ 0x6
  2390                           
  2391  0026                     ___ftmul@f2:	
  2392                           ; 1 bytes @ 0x6
  2393                           
  2394                           
  2395                           ; 3 bytes @ 0x6
  2396  0026                     	ds	1
  2397  0027                     SLPSleep@TESTBATTtmp:	
  2398  0027                     RTXSndPkt@sta:	
  2399                           ; 1 bytes @ 0x7
  2400                           
  2401                           
  2402                           ; 1 bytes @ 0x7
  2403  0027                     	ds	1
  2404  0028                     ??_RTXSendRPgm:	
  2405                           
  2406                           ; 0 bytes @ 0x8
  2407  0028                     	ds	1
  2408  0029                     ??___ftmul:	
  2409                           
  2410                           ; 0 bytes @ 0x9
  2411  0029                     	ds	4
  2412  002D                     ___ftmul@exp:	
  2413                           
  2414                           ; 1 bytes @ 0xD
  2415  002D                     	ds	1
  2416  002E                     ___ftmul@f3_as_product:	
  2417                           
  2418                           ; 3 bytes @ 0xE
  2419  002E                     	ds	3
  2420  0031                     ___ftmul@cntr:	
  2421                           
  2422                           ; 1 bytes @ 0x11
  2423  0031                     	ds	1
  2424  0032                     ___ftmul@sign:	
  2425                           
  2426                           ; 1 bytes @ 0x12
  2427  0032                     	ds	1
  2428  0033                     ?___ftdiv:	
  2429  0033                     ___ftdiv@f2:	
  2430                           ; 3 bytes @ 0x13
  2431                           
  2432                           
  2433                           ; 3 bytes @ 0x13
  2434  0033                     	ds	3
  2435  0036                     ___ftdiv@f1:	
  2436                           
  2437                           ; 3 bytes @ 0x16
  2438  0036                     	ds	3
  2439  0039                     ??___ftdiv:	
  2440                           
  2441                           ; 0 bytes @ 0x19
  2442  0039                     	ds	4
  2443  003D                     ___ftdiv@cntr:	
  2444                           
  2445                           ; 1 bytes @ 0x1D
  2446  003D                     	ds	1
  2447  003E                     ___ftdiv@f3:	
  2448                           
  2449                           ; 3 bytes @ 0x1E
  2450  003E                     	ds	3
  2451  0041                     ___ftdiv@exp:	
  2452                           
  2453                           ; 1 bytes @ 0x21
  2454  0041                     	ds	1
  2455  0042                     ___ftdiv@sign:	
  2456                           
  2457                           ; 1 bytes @ 0x22
  2458  0042                     	ds	1
  2459  0043                     ?___ftadd:	
  2460  0043                     ___ftadd@f1:	
  2461                           ; 3 bytes @ 0x23
  2462                           
  2463                           
  2464                           ; 3 bytes @ 0x23
  2465  0043                     	ds	3
  2466  0046                     ___ftadd@f2:	
  2467                           
  2468                           ; 3 bytes @ 0x26
  2469  0046                     	ds	3
  2470  0049                     ??___ftadd:	
  2471                           
  2472                           ; 0 bytes @ 0x29
  2473  0049                     	ds	4
  2474  004D                     ___ftadd@sign:	
  2475                           
  2476                           ; 1 bytes @ 0x2D
  2477  004D                     	ds	1
  2478  004E                     ___ftadd@exp2:	
  2479                           
  2480                           ; 1 bytes @ 0x2E
  2481  004E                     	ds	1
  2482  004F                     ___ftadd@exp1:	
  2483                           
  2484                           ; 1 bytes @ 0x2F
  2485  004F                     	ds	1
  2486  0050                     ??_RTXSendData:	
  2487  0050                     ??_ADCConv:	
  2488                           ; 0 bytes @ 0x30
  2489                           
  2490                           
  2491                           ; 0 bytes @ 0x30
  2492  0050                     	ds	1
  2493  0051                     RTXSendData@valBatt:	
  2494                           
  2495                           ; 3 bytes @ 0x31
  2496  0051                     	ds	1
  2497  0052                     ADCConv@sumBatt:	
  2498                           
  2499                           ; 2 bytes @ 0x32
  2500  0052                     	ds	2
  2501  0054                     ADCConv@sumTemp:	
  2502  0054                     RTXSendData@valTemp:	
  2503                           ; 2 bytes @ 0x34
  2504                           
  2505                           
  2506                           ; 3 bytes @ 0x34
  2507  0054                     	ds	2
  2508  0056                     _ADCConv$1367:	
  2509                           
  2510                           ; 3 bytes @ 0x36
  2511  0056                     	ds	3
  2512  0059                     ADCConv@cntSum:	
  2513                           
  2514                           ; 1 bytes @ 0x39
  2515  0059                     	ds	1
  2516  005A                     RTXInit@state:	
  2517                           
  2518                           ; 1 bytes @ 0x3A
  2519  005A                     	ds	6
  2520  0060                     NVMWrite@rowAddr:	
  2521                           
  2522                           ; 2 bytes @ 0x40
  2523  0060                     	ds	2
  2524  0062                     NVMWrite@i:	
  2525                           
  2526                           ; 1 bytes @ 0x42
  2527  0062                     	ds	1
  2528  0063                     NVMWrite@latchAddr:	
  2529                           
  2530                           ; 1 bytes @ 0x43
  2531  0063                     	ds	1
  2532  0064                     NVMWrite@j:	
  2533                           
  2534                           ; 1 bytes @ 0x44
  2535  0064                     	ds	1
  2536  0065                     ??_PGMNvmReset:	
  2537  0065                     ??_RTXReadPkt:	
  2538                           ; 0 bytes @ 0x45
  2539                           
  2540  0065                     ??_PGMSelDown:	
  2541                           ; 0 bytes @ 0x45
  2542                           
  2543                           
  2544                           ; 0 bytes @ 0x45
  2545  0065                     	ds	1
  2546  0066                     PGMInit@state:	
  2547  0066                     RTXReadPkt@numRxByte:	
  2548                           ; 1 bytes @ 0x46
  2549                           
  2550                           
  2551                           ; 1 bytes @ 0x46
  2552  0066                     	ds	1
  2553  0067                     ??_main:	
  2554                           
  2555                           ; 0 bytes @ 0x47
  2556  0067                     	ds	1
  2557  0068                     main@i:	
  2558                           
  2559                           ; 1 bytes @ 0x48
  2560  0068                     	ds	1
  2561                           
  2562                           	psect	maintext
  2563  0697                     __pmaintext:	
  2564 ;;
  2565 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2566 ;;
  2567 ;; *************** function _main *****************
  2568 ;; Defined at:
  2569 ;;		line 55 in file "Sensore.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  i               1   72[BANK0 ] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;		None               void
  2576 ;; Registers used:
  2577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 17F/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2587 ;;Total ram usage:        2 bytes
  2588 ;; Hardware stack levels required when called:   10
  2589 ;; This function calls:
  2590 ;;		_INInit
  2591 ;;		_OUTInit
  2592 ;;		_SPIInit
  2593 ;;		_ADCInit
  2594 ;;		_CC1Init
  2595 ;;		_LEDInit
  2596 ;;		_NVMInit
  2597 ;;		_DINInit
  2598 ;;		_DINTask
  2599 ;;		_PGMInit
  2600 ;;		_RTXInit
  2601 ;;		_RTXTask
  2602 ;;		_SYSInit
  2603 ;;		_SYSTask
  2604 ;; This function is called by:
  2605 ;;		Startup code after reset
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           
  2610                           ;psect for function _main
  2611  0697                     _main:	
  2612                           
  2613                           ;Sensore.c: 56: unsigned char i;
  2614                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2615                           
  2616                           ;incstack = 0
  2617                           ; Regs used in _main: [allreg]
  2618  0697  0020               	movlb	0	; select bank0
  2619  0698  01E8               	clrf	main@i
  2620  0699  3003               	movlw	3
  2621  069A  0268               	subwf	main@i,w
  2622  069B  1803               	btfsc	3,0
  2623  069C  2EDE               	goto	l677
  2624  069D                     l676:	
  2625  069D  0064               	clrwdt	;# 
  2626                           
  2627                           ;Sensore.c: 63: SYSInit(i);
  2628  069E  0020               	movlb	0	; select bank0
  2629  069F  0868               	movf	main@i,w
  2630  06A0  3187  27D5  3186   	fcall	_SYSInit
  2631                           
  2632                           ;Sensore.c: 64: INInit(i);
  2633  06A3  0020               	movlb	0	; select bank0
  2634  06A4  0868               	movf	main@i,w
  2635  06A5  318D  25CC  3186   	fcall	_INInit
  2636                           
  2637                           ;Sensore.c: 65: OUTInit(i);
  2638  06A8  0020               	movlb	0	; select bank0
  2639  06A9  0868               	movf	main@i,w
  2640  06AA  318F  2712  3186   	fcall	_OUTInit
  2641                           
  2642                           ;Sensore.c: 66: DINInit(i);
  2643  06AD  0020               	movlb	0	; select bank0
  2644  06AE  0868               	movf	main@i,w
  2645  06AF  318D  255D  3186   	fcall	_DINInit
  2646                           
  2647                           ;Sensore.c: 67: LEDInit(i);
  2648  06B2  0020               	movlb	0	; select bank0
  2649  06B3  0868               	movf	main@i,w
  2650  06B4  318D  2504  3186   	fcall	_LEDInit
  2651                           
  2652                           ;Sensore.c: 68: SPIInit(i);
  2653  06B7  0020               	movlb	0	; select bank0
  2654  06B8  0868               	movf	main@i,w
  2655  06B9  318E  269A  3186   	fcall	_SPIInit
  2656                           
  2657                           ;Sensore.c: 69: CC1Init(i);
  2658  06BC  0020               	movlb	0	; select bank0
  2659  06BD  0868               	movf	main@i,w
  2660  06BE  318E  2646  3186   	fcall	_CC1Init
  2661                           
  2662                           ;Sensore.c: 70: NVMInit(i);
  2663  06C1  0020               	movlb	0	; select bank0
  2664  06C2  0868               	movf	main@i,w
  2665  06C3  318D  250F  3186   	fcall	_NVMInit
  2666                           
  2667                           ;Sensore.c: 71: RTXInit(i);
  2668  06C6  0020               	movlb	0	; select bank0
  2669  06C7  0868               	movf	main@i,w
  2670  06C8  318F  27B6  3186   	fcall	_RTXInit
  2671                           
  2672                           ;Sensore.c: 72: PGMInit(i);
  2673  06CB  0020               	movlb	0	; select bank0
  2674  06CC  0868               	movf	main@i,w
  2675  06CD  318D  25E3  3186   	fcall	_PGMInit
  2676                           
  2677                           ;Sensore.c: 73: ADCInit(i);
  2678  06D0  0020               	movlb	0	; select bank0
  2679  06D1  0868               	movf	main@i,w
  2680  06D2  3187  2781  3186   	fcall	_ADCInit
  2681  06D5  3001               	movlw	1
  2682  06D6  0020               	movlb	0	; select bank0
  2683  06D7  00E7               	movwf	??_main
  2684  06D8  0867               	movf	??_main,w
  2685  06D9  07E8               	addwf	main@i,f
  2686  06DA  3003               	movlw	3
  2687  06DB  0268               	subwf	main@i,w
  2688  06DC  1C03               	skipc
  2689  06DD  2E9D               	goto	l676
  2690  06DE                     l677:	
  2691                           
  2692                           ;Sensore.c: 74: }
  2693                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2694  06DE  178B               	bsf	11,7	;volatile
  2695  06DF                     l678:	
  2696                           ;Sensore.c: 80: while(1)
  2697                           
  2698  06DF  0064               	clrwdt	;# 
  2699                           
  2700                           ;Sensore.c: 84: SYSTask();
  2701  06E0  3187  2720  3186   	fcall	_SYSTask
  2702                           
  2703                           ;Sensore.c: 85: DINTask();
  2704  06E3  318E  26B8  3186   	fcall	_DINTask
  2705                           
  2706                           ;Sensore.c: 86: RTXTask();
  2707  06E6  318C  24D9  3186   	fcall	_RTXTask
  2708  06E9  2EDF               	goto	l678
  2709  06EA                     __end_of_main:	
  2710                           
  2711                           	psect	text1
  2712  0720                     __ptext1:	
  2713 ;; *************** function _SYSTask *****************
  2714 ;; Defined at:
  2715 ;;		line 45 in file "SYS.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;		None
  2720 ;; Return value:  Size  Location     Type
  2721 ;;		None               void
  2722 ;; Registers used:
  2723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2733 ;;Total ram usage:        0 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    9
  2736 ;; This function calls:
  2737 ;;		_DINTick
  2738 ;;		_SLPSleep
  2739 ;;		_PGMTick
  2740 ;;		_PGMPgmOff
  2741 ;;		_PGMSelDown
  2742 ;;		_PGMSelLong
  2743 ;;		_RTXTick
  2744 ;;		_RTXAwake
  2745 ;; This function is called by:
  2746 ;;		_main
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           
  2751                           ;psect for function _SYSTask
  2752  0720                     _SYSTask:	
  2753                           
  2754                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  2755                           
  2756                           ;incstack = 0
  2757                           ; Regs used in _SYSTask: [allreg]
  2758  0720  0021               	movlb	1	; select bank1
  2759  0721  1C2F               	btfss	_u_SYS_STA^(0+128),0
  2760  0722  2F2D               	goto	l3646
  2761                           
  2762                           ;SYS.c: 48: {
  2763                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  2764  0723  102F               	bcf	_u_SYS_STA^(0+128),0
  2765                           
  2766                           ;SYS.c: 53: RTXTick();
  2767  0724  318D  2533  3187   	fcall	_RTXTick
  2768                           
  2769                           ;SYS.c: 54: DINTick();
  2770  0727  3187  27AD  3187   	fcall	_DINTick
  2771                           
  2772                           ;SYS.c: 55: PGMTick();
  2773  072A  318D  2526  3187   	fcall	_PGMTick
  2774  072D                     l3646:	
  2775                           
  2776                           ;SYS.c: 56: }
  2777                           ;SYS.c: 58: if(u_in_ev_down.sel)
  2778  072D  0021               	movlb	1	; select bank1
  2779  072E  1C30               	btfss	_u_in_ev_down^(0+128),0
  2780  072F  2F34               	goto	l3652
  2781                           
  2782                           ;SYS.c: 59: {
  2783                           ;SYS.c: 61: u_in_ev_down.sel=0;
  2784  0730  1030               	bcf	_u_in_ev_down^(0+128),0
  2785                           
  2786                           ;SYS.c: 62: PGMSelDown();
  2787  0731  318D  256E  3187   	fcall	_PGMSelDown
  2788  0734                     l3652:	
  2789                           
  2790                           ;SYS.c: 63: }
  2791                           ;SYS.c: 64: if(u_in_ev_long.sel)
  2792  0734  0021               	movlb	1	; select bank1
  2793  0735  1C31               	btfss	_u_in_ev_long^(0+128),0
  2794  0736  2F3B               	goto	l3658
  2795                           
  2796                           ;SYS.c: 65: {
  2797                           ;SYS.c: 67: u_in_ev_long.sel=0;
  2798  0737  1031               	bcf	_u_in_ev_long^(0+128),0
  2799                           
  2800                           ;SYS.c: 68: PGMSelLong();
  2801  0738  318C  24FB  3187   	fcall	_PGMSelLong
  2802  073B                     l3658:	
  2803                           
  2804                           ;SYS.c: 69: }
  2805                           ;SYS.c: 72: if(flg_slp.goSleep)
  2806  073B  0020               	movlb	0	; select bank0
  2807  073C  1C6A               	btfss	_flg_slp,0
  2808  073D  2F44               	goto	l3664
  2809                           
  2810                           ;SYS.c: 73: {
  2811                           ;SYS.c: 75: flg_slp.goSleep=0;
  2812  073E  106A               	bcf	_flg_slp,0
  2813                           
  2814                           ;SYS.c: 77: if(!(!PORTBbits.RB2))
  2815  073F  1D0D               	btfss	13,2	;volatile
  2816  0740  2F44               	goto	l3664
  2817                           
  2818                           ;SYS.c: 78: SLPSleep();
  2819  0741  3185  2524  3187   	fcall	_SLPSleep
  2820  0744                     l3664:	
  2821                           
  2822                           ;SYS.c: 79: }
  2823                           ;SYS.c: 82: if(rtx_flg.pgmDone)
  2824  0744  0021               	movlb	1	; select bank1
  2825  0745  1C2A               	btfss	_rtx_flg^(0+128),0
  2826  0746  2F4B               	goto	l3670
  2827                           
  2828                           ;SYS.c: 83: {
  2829                           ;SYS.c: 85: rtx_flg.pgmDone=0;
  2830  0747  102A               	bcf	_rtx_flg^(0+128),0
  2831                           
  2832                           ;SYS.c: 87: PGMPgmOff();
  2833  0748  3187  27FB  3187   	fcall	_PGMPgmOff
  2834  074B                     l3670:	
  2835                           
  2836                           ;SYS.c: 88: }
  2837                           ;SYS.c: 91: if(flg_slp.exitSleep)
  2838  074B  0020               	movlb	0	; select bank0
  2839  074C  1CEA               	btfss	_flg_slp,1
  2840  074D  0008               	return
  2841                           
  2842                           ;SYS.c: 92: {
  2843                           ;SYS.c: 94: flg_slp.exitSleep=0;
  2844  074E  10EA               	bcf	_flg_slp,1
  2845                           
  2846                           ;SYS.c: 96: RTXAwake();
  2847  074F  318E  262C         	fcall	_RTXAwake
  2848  0751  0008               	return
  2849  0752                     __end_of_SYSTask:	
  2850                           
  2851                           	psect	text2
  2852  0E2C                     __ptext2:	
  2853 ;; *************** function _RTXAwake *****************
  2854 ;; Defined at:
  2855 ;;		line 90 in file "RTX.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;		None               void
  2862 ;; Registers used:
  2863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    8
  2876 ;; This function calls:
  2877 ;;		_DLYDelay_ms
  2878 ;;		_CC1Init
  2879 ;;		_RTXInit
  2880 ;; This function is called by:
  2881 ;;		_SYSTask
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           
  2886                           ;psect for function _RTXAwake
  2887  0E2C                     _RTXAwake:	
  2888                           
  2889                           ;RTX.c: 92: PORTAbits.RA5=0;
  2890                           
  2891                           ;incstack = 0
  2892                           ; Regs used in _RTXAwake: [allreg]
  2893  0E2C  0020               	movlb	0	; select bank0
  2894  0E2D  128C               	bcf	12,5	;volatile
  2895                           
  2896                           ;RTX.c: 93: DLYDelay_ms(1);
  2897  0E2E  3001               	movlw	1
  2898  0E2F  00F1               	movwf	?_DLYDelay_ms
  2899  0E30  3000               	movlw	0
  2900  0E31  00F2               	movwf	?_DLYDelay_ms+1
  2901  0E32  318E  2613  318E   	fcall	_DLYDelay_ms
  2902                           
  2903                           ;RTX.c: 94: PORTAbits.RA5=1;
  2904  0E35  0020               	movlb	0	; select bank0
  2905  0E36  168C               	bsf	12,5	;volatile
  2906                           
  2907                           ;RTX.c: 95: DLYDelay_ms(1);
  2908  0E37  3001               	movlw	1
  2909  0E38  00F1               	movwf	?_DLYDelay_ms
  2910  0E39  3000               	movlw	0
  2911  0E3A  00F2               	movwf	?_DLYDelay_ms+1
  2912  0E3B  318E  2613  318E   	fcall	_DLYDelay_ms
  2913                           
  2914                           ;RTX.c: 98: CC1Init(2);
  2915  0E3E  3002               	movlw	2
  2916  0E3F  318E  2646  318E   	fcall	_CC1Init
  2917                           
  2918                           ;RTX.c: 101: RTXInit(2);
  2919  0E42  3002               	movlw	2
  2920  0E43  318F  27B6         	fcall	_RTXInit
  2921  0E45  0008               	return
  2922  0E46                     __end_of_RTXAwake:	
  2923                           
  2924                           	psect	text3
  2925  0FB6                     __ptext3:	
  2926 ;; *************** function _RTXInit *****************
  2927 ;; Defined at:
  2928 ;;		line 49 in file "RTX.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;  state           1    wreg     unsigned char 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  state           1   58[BANK0 ] unsigned char 
  2933 ;; Return value:  Size  Location     Type
  2934 ;;		None               void
  2935 ;; Registers used:
  2936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2945 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2946 ;;Total ram usage:        1 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    7
  2949 ;; This function calls:
  2950 ;;		_CC1Strobe
  2951 ;;		_RTXStartSendData
  2952 ;; This function is called by:
  2953 ;;		_RTXAwake
  2954 ;;		_main
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           
  2959                           ;psect for function _RTXInit
  2960  0FB6                     _RTXInit:	
  2961                           
  2962                           ;incstack = 0
  2963                           ; Regs used in _RTXInit: [allreg]
  2964                           ;RTXInit@state stored from wreg
  2965  0FB6  0020               	movlb	0	; select bank0
  2966  0FB7  00DA               	movwf	RTXInit@state
  2967                           
  2968                           ;RTX.c: 50: switch(state)
  2969  0FB8  2FCD               	goto	l3498
  2970  0FB9                     l3490:	
  2971                           ;RTX.c: 55: case 1:
  2972                           
  2973                           ;RTX.c: 54: break;
  2974                           
  2975                           ;RTX.c: 51: {
  2976                           ;RTX.c: 52: case 0:
  2977                           
  2978                           
  2979                           ;RTX.c: 57: tmrRcvPkt=0;
  2980  0FB9  01ED               	clrf	_tmrRcvPkt
  2981                           
  2982                           ;RTX.c: 58: cntSndData=0;
  2983  0FBA  0021               	movlb	1	; select bank1
  2984  0FBB  01A9               	clrf	_cntSndData^(0+128)
  2985                           
  2986                           ;RTX.c: 59: rtx_flg.val=0;
  2987  0FBC  01AA               	clrf	_rtx_flg^(0+128)
  2988                           
  2989                           ;RTX.c: 60: break;
  2990  0FBD  0008               	return
  2991  0FBE                     l3492:	
  2992                           ;RTX.c: 61: case 2:
  2993                           
  2994                           
  2995                           ;RTX.c: 63: CC1Strobe(SIDLE);
  2996  0FBE  3036               	movlw	54
  2997  0FBF  318D  25B8  318F   	fcall	_CC1Strobe
  2998                           
  2999                           ;RTX.c: 64: CC1Strobe(SCAL);
  3000  0FC2  3033               	movlw	51
  3001  0FC3  318D  25B8  318F   	fcall	_CC1Strobe
  3002                           
  3003                           ;RTX.c: 65: CC1Strobe(SRX);
  3004  0FC6  3034               	movlw	52
  3005  0FC7  318D  25B8  318F   	fcall	_CC1Strobe
  3006                           
  3007                           ;RTX.c: 66: RTXStartSendData();
  3008  0FCA  318D  254E         	fcall	_RTXStartSendData
  3009                           
  3010                           ;RTX.c: 68: }
  3011                           
  3012                           ;RTX.c: 67: break;
  3013  0FCC  0008               	return
  3014  0FCD                     l3498:	
  3015  0FCD  0020               	movlb	0	; select bank0
  3016  0FCE  085A               	movf	RTXInit@state,w
  3017                           
  3018                           ; Switch size 1, requested type "space"
  3019                           ; Number of cases is 3, Range of values is 0 to 2
  3020                           ; switch strategies available:
  3021                           ; Name         Instructions Cycles
  3022                           ; simple_byte           10     6 (average)
  3023                           ; direct_byte           12     6 (fixed)
  3024                           ; jumptable            260     6 (fixed)
  3025                           ;	Chosen strategy is simple_byte
  3026  0FCF  3A00               	xorlw	0	; case 0
  3027  0FD0  1903               	skipnz
  3028  0FD1  2FD9               	goto	l468
  3029  0FD2  3A01               	xorlw	1	; case 1
  3030  0FD3  1903               	skipnz
  3031  0FD4  2FB9               	goto	l3490
  3032  0FD5  3A03               	xorlw	3	; case 2
  3033  0FD6  1903               	skipnz
  3034  0FD7  2FBE               	goto	l3492
  3035  0FD8  2FD9               	goto	l468
  3036  0FD9                     l468:	
  3037  0FD9  0008               	return
  3038  0FDA                     __end_of_RTXInit:	
  3039                           
  3040                           	psect	text4
  3041  0E46                     __ptext4:	
  3042 ;; *************** function _CC1Init *****************
  3043 ;; Defined at:
  3044 ;;		line 75 in file "CC1.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  state           1    wreg     unsigned char 
  3047 ;; Auto vars:     Size  Location     Type
  3048 ;;  state           1    2[BANK0 ] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    5
  3065 ;; This function calls:
  3066 ;;		_DLYDelay_ms
  3067 ;;		_CC1Strobe
  3068 ;;		_CC1LoadREG
  3069 ;; This function is called by:
  3070 ;;		_RTXAwake
  3071 ;;		_main
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           
  3076                           ;psect for function _CC1Init
  3077  0E46                     _CC1Init:	
  3078                           
  3079                           ;incstack = 0
  3080                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3081                           ;CC1Init@state stored from wreg
  3082  0E46  0020               	movlb	0	; select bank0
  3083  0E47  00A2               	movwf	CC1Init@state
  3084                           
  3085                           ;CC1.c: 76: switch(state)
  3086  0E48  2E57               	goto	l3338
  3087  0E49                     l3330:	
  3088                           ;CC1.c: 84: case 2:
  3089                           
  3090                           ;CC1.c: 83: break;
  3091                           
  3092                           ;CC1.c: 77: {
  3093                           ;CC1.c: 81: case 1:
  3094                           
  3095                           
  3096                           ;CC1.c: 86: CC1Strobe(SRES);
  3097  0E49  3030               	movlw	48
  3098  0E4A  318D  25B8  318E   	fcall	_CC1Strobe
  3099                           
  3100                           ;CC1.c: 87: DLYDelay_ms(5);
  3101  0E4D  3005               	movlw	5
  3102  0E4E  00F1               	movwf	?_DLYDelay_ms
  3103  0E4F  3000               	movlw	0
  3104  0E50  00F2               	movwf	?_DLYDelay_ms+1
  3105  0E51  318E  2613  318E   	fcall	_DLYDelay_ms
  3106                           
  3107                           ;CC1.c: 88: CC1LoadREG();
  3108  0E54  318D  25FB         	fcall	_CC1LoadREG
  3109                           
  3110                           ;CC1.c: 90: }
  3111                           
  3112                           ;CC1.c: 89: break;
  3113  0E56  0008               	return
  3114  0E57                     l3338:	
  3115  0E57  0020               	movlb	0	; select bank0
  3116  0E58  0822               	movf	CC1Init@state,w
  3117                           
  3118                           ; Switch size 1, requested type "space"
  3119                           ; Number of cases is 2, Range of values is 1 to 2
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; simple_byte            7     4 (average)
  3123                           ; direct_byte           13     9 (fixed)
  3124                           ; jumptable            263     9 (fixed)
  3125                           ;	Chosen strategy is simple_byte
  3126  0E59  3A01               	xorlw	1	; case 1
  3127  0E5A  1903               	skipnz
  3128  0E5B  2E60               	goto	l167
  3129  0E5C  3A03               	xorlw	3	; case 2
  3130  0E5D  1903               	skipnz
  3131  0E5E  2E49               	goto	l3330
  3132  0E5F  2E60               	goto	l167
  3133  0E60                     l167:	
  3134  0E60  0008               	return
  3135  0E61                     __end_of_CC1Init:	
  3136                           
  3137                           	psect	text5
  3138  0DFB                     __ptext5:	
  3139 ;; *************** function _CC1LoadREG *****************
  3140 ;; Defined at:
  3141 ;;		line 156 in file "CC1.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;		None               void
  3148 ;; Registers used:
  3149 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3157 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3159 ;;Total ram usage:        1 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    4
  3162 ;; This function calls:
  3163 ;;		_CC1Write
  3164 ;; This function is called by:
  3165 ;;		_CC1Init
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           
  3170                           ;psect for function _CC1LoadREG
  3171  0DFB                     _CC1LoadREG:	
  3172                           
  3173                           ;CC1.c: 157: CC1Write(0x00,cc1InitVal,0x2E);
  3174                           
  3175                           ;incstack = 0
  3176                           ; Regs used in _CC1LoadREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3177  0DFB  3020               	movlw	low _cc1InitVal
  3178  0DFC  00F7               	movwf	?_CC1Write
  3179  0DFD  3001               	movlw	high _cc1InitVal
  3180  0DFE  00F8               	movwf	?_CC1Write+1
  3181  0DFF  302E               	movlw	46
  3182  0E00  00FB               	movwf	??_CC1LoadREG
  3183  0E01  087B               	movf	??_CC1LoadREG,w
  3184  0E02  00F9               	movwf	?_CC1Write+2
  3185  0E03  3000               	movlw	0
  3186  0E04  318F  2773  318D   	fcall	_CC1Write
  3187                           
  3188                           ;CC1.c: 158: CC1Write(0x3E,cc1PaTable,8);
  3189  0E07  30CA               	movlw	low _cc1PaTable
  3190  0E08  00F7               	movwf	?_CC1Write
  3191  0E09  3000               	movlw	high _cc1PaTable
  3192  0E0A  00F8               	movwf	?_CC1Write+1
  3193  0E0B  3008               	movlw	8
  3194  0E0C  00FB               	movwf	??_CC1LoadREG
  3195  0E0D  087B               	movf	??_CC1LoadREG,w
  3196  0E0E  00F9               	movwf	?_CC1Write+2
  3197  0E0F  303E               	movlw	62
  3198  0E10  318F  2773         	fcall	_CC1Write
  3199  0E12  0008               	return
  3200  0E13                     __end_of_CC1LoadREG:	
  3201                           
  3202                           	psect	text6
  3203  0D33                     __ptext6:	
  3204 ;; *************** function _RTXTick *****************
  3205 ;; Defined at:
  3206 ;;		line 72 in file "RTX.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;		None               void
  3213 ;; Registers used:
  3214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    6
  3227 ;; This function calls:
  3228 ;;		_RTXSendData
  3229 ;; This function is called by:
  3230 ;;		_SYSTask
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _RTXTick
  3236  0D33                     _RTXTick:	
  3237                           
  3238                           ;RTX.c: 74: if(tmrRcvPkt)
  3239                           
  3240                           ;incstack = 0
  3241                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3242  0D33  0020               	movlb	0	; select bank0
  3243  0D34  086D               	movf	_tmrRcvPkt,w
  3244  0D35  1903               	btfsc	3,2
  3245  0D36  0008               	return
  3246                           
  3247                           ;RTX.c: 75: {
  3248                           ;RTX.c: 76: tmrRcvPkt--;
  3249  0D37  3001               	movlw	1
  3250  0D38  02ED               	subwf	_tmrRcvPkt,f
  3251                           
  3252                           ;RTX.c: 77: if(!(tmrRcvPkt))
  3253  0D39  08ED               	movf	_tmrRcvPkt,f
  3254  0D3A  1D03               	skipz
  3255  0D3B  0008               	return
  3256                           
  3257                           ;RTX.c: 78: RTXSendData();
  3258  0D3C  3184  249E         	fcall	_RTXSendData
  3259  0D3E  0020               	movlb	0	; select bank0
  3260  0D3F  0008               	return
  3261  0D40                     __end_of_RTXTick:	
  3262                           
  3263                           	psect	text7
  3264  0CFB                     __ptext7:	
  3265 ;; *************** function _PGMSelLong *****************
  3266 ;; Defined at:
  3267 ;;		line 116 in file "PGM.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;		None
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;		None
  3272 ;; Return value:  Size  Location     Type
  3273 ;;		None               void
  3274 ;; Registers used:
  3275 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3285 ;;Total ram usage:        0 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    4
  3288 ;; This function calls:
  3289 ;;		_LEDNormalFlash
  3290 ;;		_PGMWriteNvm
  3291 ;; This function is called by:
  3292 ;;		_SYSTask
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _PGMSelLong
  3298  0CFB                     _PGMSelLong:	
  3299                           
  3300                           ;PGM.c: 118: pgm_cfg.menu=0;
  3301                           
  3302                           ;incstack = 0
  3303                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3304  0CFB  0021               	movlb	1	; select bank1
  3305  0CFC  01C7               	clrf	(_pgm_cfg^(0+128)+2)
  3306                           
  3307                           ;PGM.c: 120: PGMWriteNvm();
  3308  0CFD  318D  2592  318C   	fcall	_PGMWriteNvm
  3309                           
  3310                           ;PGM.c: 122: LEDNormalFlash(3);
  3311  0D00  3003               	movlw	3
  3312  0D01  318E  26D6         	fcall	_LEDNormalFlash
  3313  0D03  0008               	return
  3314  0D04                     __end_of_PGMSelLong:	
  3315                           
  3316                           	psect	text8
  3317  0D6E                     __ptext8:	
  3318 ;; *************** function _PGMSelDown *****************
  3319 ;; Defined at:
  3320 ;;		line 102 in file "PGM.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;		None
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;		None
  3325 ;; Return value:  Size  Location     Type
  3326 ;;		None               void
  3327 ;; Registers used:
  3328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;Total ram usage:        1 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    4
  3341 ;; This function calls:
  3342 ;;		_PGMWriteNvm
  3343 ;; This function is called by:
  3344 ;;		_SYSTask
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _PGMSelDown
  3350  0D6E                     _PGMSelDown:	
  3351                           
  3352                           ;PGM.c: 104: pgm_flg.pgmonoff=1;
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _PGMSelDown: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3356  0D6E  0020               	movlb	0	; select bank0
  3357  0D6F  146B               	bsf	_pgm_flg,0
  3358                           
  3359                           ;PGM.c: 106: PORTCbits.RC7=0;
  3360  0D70  138E               	bcf	14,7	;volatile
  3361                           
  3362                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  3363  0D71  0816               	movf	22,w	;volatile
  3364  0D72  0617               	xorwf	23,w	;volatile
  3365  0D73  00E5               	movwf	??_PGMSelDown
  3366  0D74  0865               	movf	??_PGMSelDown,w
  3367  0D75  0021               	movlb	1	; select bank1
  3368  0D76  00C8               	movwf	(_pgm_cfg^(0+128)+3)
  3369                           
  3370                           ;PGM.c: 110: PGMWriteNvm();
  3371  0D77  318D  2592         	fcall	_PGMWriteNvm
  3372                           
  3373                           ;PGM.c: 112: tmrPgm=100;
  3374  0D79  3064               	movlw	100
  3375  0D7A  0020               	movlb	0	; select bank0
  3376  0D7B  00E5               	movwf	??_PGMSelDown
  3377  0D7C  0865               	movf	??_PGMSelDown,w
  3378  0D7D  00EC               	movwf	_tmrPgm
  3379  0D7E  0008               	return
  3380  0D7F                     __end_of_PGMSelDown:	
  3381                           
  3382                           	psect	text9
  3383  07FB                     __ptext9:	
  3384 ;; *************** function _PGMPgmOff *****************
  3385 ;; Defined at:
  3386 ;;		line 94 in file "PGM.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;		None               void
  3393 ;; Registers used:
  3394 ;;		status,2
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3404 ;;Total ram usage:        0 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    2
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		_SYSTask
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _PGMPgmOff
  3416  07FB                     _PGMPgmOff:	
  3417                           
  3418                           ;PGM.c: 96: tmrPgm=0;
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in _PGMPgmOff: [status,2]
  3422  07FB  0020               	movlb	0	; select bank0
  3423  07FC  01EC               	clrf	_tmrPgm
  3424                           
  3425                           ;PGM.c: 98: pgm_flg.pgmonoff=0;
  3426  07FD  106B               	bcf	_pgm_flg,0
  3427  07FE  0008               	return
  3428  07FF                     __end_of_PGMPgmOff:	
  3429                           
  3430                           	psect	text10
  3431  0D26                     __ptext10:	
  3432 ;; *************** function _PGMTick *****************
  3433 ;; Defined at:
  3434 ;;		line 46 in file "PGM.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;		None               void
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    2
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_SYSTask
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           
  3463                           ;psect for function _PGMTick
  3464  0D26                     _PGMTick:	
  3465                           
  3466                           ;PGM.c: 48: if(tmrPgm)
  3467                           
  3468                           ;incstack = 0
  3469                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3470  0D26  0020               	movlb	0	; select bank0
  3471  0D27  086C               	movf	_tmrPgm,w
  3472  0D28  1903               	btfsc	3,2
  3473  0D29  0008               	return
  3474                           
  3475                           ;PGM.c: 49: {
  3476                           ;PGM.c: 50: tmrPgm--;
  3477  0D2A  3001               	movlw	1
  3478  0D2B  02EC               	subwf	_tmrPgm,f
  3479                           
  3480                           ;PGM.c: 51: if(!(tmrPgm))
  3481  0D2C  08EC               	movf	_tmrPgm,f
  3482  0D2D  1D03               	skipz
  3483  0D2E  0008               	return
  3484                           
  3485                           ;PGM.c: 52: {
  3486                           ;PGM.c: 54: pgm_flg.pgmonoff=0;
  3487  0D2F  106B               	bcf	_pgm_flg,0
  3488                           
  3489                           ;PGM.c: 56: PORTCbits.RC7=1;
  3490  0D30  178E               	bsf	14,7	;volatile
  3491                           
  3492                           ;PGM.c: 58: flg_slp.goSleep=1;
  3493  0D31  146A               	bsf	_flg_slp,0
  3494  0D32  0008               	return
  3495  0D33                     __end_of_PGMTick:	
  3496                           
  3497                           	psect	text11
  3498  0524                     __ptext11:	
  3499 ;; *************** function _SLPSleep *****************
  3500 ;; Defined at:
  3501 ;;		line 7 in file "SLP.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;		None
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  3506 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  3507 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  3508 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  3509 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  3510 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  3511 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  3512 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;		None               void
  3515 ;; Registers used:
  3516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3523 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3525 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3526 ;;Total ram usage:        9 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:    5
  3529 ;; This function calls:
  3530 ;;		_CC1Sleep
  3531 ;; This function is called by:
  3532 ;;		_SYSTask
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _SLPSleep
  3538  0524                     _SLPSleep:	
  3539                           
  3540                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  3541                           ;SLP.c: 10: CC1Sleep();
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3545  0524  318C  24EB  3185   	fcall	_CC1Sleep
  3546                           
  3547                           ;SLP.c: 12: WPUBTmp=WPUB;
  3548  0527  0024               	movlb	4	; select bank4
  3549  0528  080D               	movf	13,w	;volatile
  3550  0529  00FA               	movwf	??_SLPSleep
  3551  052A  087A               	movf	??_SLPSleep,w
  3552  052B  0020               	movlb	0	; select bank0
  3553  052C  00A2               	movwf	SLPSleep@WPUBTmp
  3554                           
  3555                           ;SLP.c: 13: WPUB=0b00000100;
  3556  052D  3004               	movlw	4
  3557  052E  0024               	movlb	4	; select bank4
  3558  052F  008D               	movwf	13	;volatile
  3559                           
  3560                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3561  0530  0021               	movlb	1	; select bank1
  3562  0531  081D               	movf	29,w	;volatile
  3563  0532  00FA               	movwf	??_SLPSleep
  3564  0533  087A               	movf	??_SLPSleep,w
  3565  0534  0020               	movlb	0	; select bank0
  3566  0535  00A6               	movwf	SLPSleep@ADCON0Tmp
  3567                           
  3568                           ;SLP.c: 16: ADCON0=0b00000000;
  3569  0536  0021               	movlb	1	; select bank1
  3570  0537  019D               	clrf	29	;volatile
  3571                           
  3572                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3573  0538  0022               	movlb	2	; select bank2
  3574  0539  0817               	movf	23,w	;volatile
  3575  053A  00FA               	movwf	??_SLPSleep
  3576  053B  087A               	movf	??_SLPSleep,w
  3577  053C  0020               	movlb	0	; select bank0
  3578  053D  00A5               	movwf	SLPSleep@FVRCONTmp
  3579                           
  3580                           ;SLP.c: 19: FVRCON=0b00000000;
  3581  053E  0022               	movlb	2	; select bank2
  3582  053F  0197               	clrf	23	;volatile
  3583                           
  3584                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3585  0540  0027               	movlb	7	; select bank7
  3586  0541  0815               	movf	21,w	;volatile
  3587  0542  00FA               	movwf	??_SLPSleep
  3588  0543  087A               	movf	??_SLPSleep,w
  3589  0544  0020               	movlb	0	; select bank0
  3590  0545  00A0               	movwf	SLPSleep@IOCBNTmp
  3591                           
  3592                           ;SLP.c: 22: INTCONTmp=INTCON;
  3593  0546  080B               	movf	11,w	;volatile
  3594  0547  00FA               	movwf	??_SLPSleep
  3595  0548  087A               	movf	??_SLPSleep,w
  3596  0549  00A1               	movwf	SLPSleep@INTCONTmp
  3597                           
  3598                           ;SLP.c: 23: INTCON=0b10001000;
  3599  054A  3088               	movlw	136
  3600  054B  008B               	movwf	11	;volatile
  3601                           
  3602                           ;SLP.c: 24: IOCBN=0b00000100;
  3603  054C  3004               	movlw	4
  3604  054D  0027               	movlb	7	; select bank7
  3605  054E  0095               	movwf	21	;volatile
  3606                           
  3607                           ;SLP.c: 26: TESTBATTtmp=0;
  3608  054F  0020               	movlb	0	; select bank0
  3609  0550  01A7               	clrf	SLPSleep@TESTBATTtmp
  3610                           
  3611                           ;SLP.c: 27: if(PORTBbits.RB5)
  3612  0551  1E8D               	btfss	13,5	;volatile
  3613  0552  2D55               	goto	l3434
  3614                           
  3615                           ;SLP.c: 28: TESTBATTtmp=1;
  3616  0553  01A7               	clrf	SLPSleep@TESTBATTtmp
  3617  0554  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3618  0555                     l3434:	
  3619                           
  3620                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3621  0555  0021               	movlb	1	; select bank1
  3622  0556  0817               	movf	23,w	;volatile
  3623  0557  00FA               	movwf	??_SLPSleep
  3624  0558  087A               	movf	??_SLPSleep,w
  3625  0559  0020               	movlb	0	; select bank0
  3626  055A  00A3               	movwf	SLPSleep@WDTCONTmp
  3627                           
  3628                           ;SLP.c: 31: WDTCON=0b00011011;
  3629  055B  301B               	movlw	27
  3630  055C  0021               	movlb	1	; select bank1
  3631  055D  0097               	movwf	23	;volatile
  3632                           
  3633                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3634  055E  0815               	movf	21,w	;volatile
  3635  055F  00FA               	movwf	??_SLPSleep
  3636  0560  087A               	movf	??_SLPSleep,w
  3637  0561  0020               	movlb	0	; select bank0
  3638  0562  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3639                           
  3640                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3641  0563  300A               	movlw	10
  3642  0564  0021               	movlb	1	; select bank1
  3643  0565  0095               	movwf	21	;volatile
  3644  0566  0064               	clrwdt	;# 
  3645  0567  0063               	sleep	;# 
  3646                           
  3647                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3648  0568  0020               	movlb	0	; select bank0
  3649  0569  0820               	movf	SLPSleep@IOCBNTmp,w
  3650  056A  0027               	movlb	7	; select bank7
  3651  056B  0095               	movwf	21	;volatile
  3652                           
  3653                           ;SLP.c: 40: INTCON=INTCONTmp;
  3654  056C  0020               	movlb	0	; select bank0
  3655  056D  0821               	movf	SLPSleep@INTCONTmp,w
  3656  056E  008B               	movwf	11	;volatile
  3657                           
  3658                           ;SLP.c: 41: WPUB=WPUBTmp;
  3659  056F  0822               	movf	SLPSleep@WPUBTmp,w
  3660  0570  0024               	movlb	4	; select bank4
  3661  0571  008D               	movwf	13	;volatile
  3662                           
  3663                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3664  0572  0020               	movlb	0	; select bank0
  3665  0573  0826               	movf	SLPSleep@ADCON0Tmp,w
  3666  0574  0021               	movlb	1	; select bank1
  3667  0575  009D               	movwf	29	;volatile
  3668                           
  3669                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3670  0576  0020               	movlb	0	; select bank0
  3671  0577  0825               	movf	SLPSleep@FVRCONTmp,w
  3672  0578  0022               	movlb	2	; select bank2
  3673  0579  0097               	movwf	23	;volatile
  3674                           
  3675                           ;SLP.c: 44: PORTBbits.RB5=0;
  3676  057A  0020               	movlb	0	; select bank0
  3677  057B  128D               	bcf	13,5	;volatile
  3678                           
  3679                           ;SLP.c: 45: if(TESTBATTtmp)
  3680  057C  0827               	movf	SLPSleep@TESTBATTtmp,w
  3681  057D  1D03               	skipz
  3682                           
  3683                           ;SLP.c: 46: PORTBbits.RB5=1;
  3684  057E  168D               	bsf	13,5	;volatile
  3685                           
  3686                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3687  057F  0823               	movf	SLPSleep@WDTCONTmp,w
  3688  0580  0021               	movlb	1	; select bank1
  3689  0581  0097               	movwf	23	;volatile
  3690                           
  3691                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3692  0582  0020               	movlb	0	; select bank0
  3693  0583  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3694  0584  0021               	movlb	1	; select bank1
  3695  0585  0095               	movwf	21	;volatile
  3696                           
  3697                           ;SLP.c: 50: flg_slp.exitSleep=1;
  3698  0586  0020               	movlb	0	; select bank0
  3699  0587  14EA               	bsf	_flg_slp,1
  3700  0588  0008               	return
  3701  0589                     __end_of_SLPSleep:	
  3702                           
  3703                           	psect	text12
  3704  0CEB                     __ptext12:	
  3705 ;; *************** function _CC1Sleep *****************
  3706 ;; Defined at:
  3707 ;;		line 145 in file "CC1.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;		None               void
  3714 ;; Registers used:
  3715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    4
  3728 ;; This function calls:
  3729 ;;		_CC1Strobe
  3730 ;; This function is called by:
  3731 ;;		_SLPSleep
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _CC1Sleep
  3737  0CEB                     _CC1Sleep:	
  3738                           
  3739                           ;CC1.c: 147: PORTAbits.RA5=0;
  3740                           
  3741                           ;incstack = 0
  3742                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3743  0CEB  0020               	movlb	0	; select bank0
  3744  0CEC  128C               	bcf	12,5	;volatile
  3745                           
  3746                           ;CC1.c: 149: CC1Strobe(SWOR);
  3747  0CED  3038               	movlw	56
  3748  0CEE  318D  25B8         	fcall	_CC1Strobe
  3749                           
  3750                           ;CC1.c: 151: PORTAbits.RA5=1;
  3751  0CF0  0020               	movlb	0	; select bank0
  3752  0CF1  168C               	bsf	12,5	;volatile
  3753  0CF2  0008               	return
  3754  0CF3                     __end_of_CC1Sleep:	
  3755                           
  3756                           	psect	text13
  3757  07AD                     __ptext13:	
  3758 ;; *************** function _DINTick *****************
  3759 ;; Defined at:
  3760 ;;		line 47 in file "DIN.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;		None               void
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3778 ;;Total ram usage:        1 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    2
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_SYSTask
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           
  3789                           ;psect for function _DINTick
  3790  07AD                     _DINTick:	
  3791                           
  3792                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3793                           
  3794                           ;incstack = 0
  3795                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3796  07AD  0020               	movlb	0	; select bank0
  3797  07AE  1C6E               	btfss	_u_flg_din,0
  3798  07AF  2FC2               	goto	l290
  3799                           
  3800                           ;DIN.c: 51: {
  3801                           ;DIN.c: 52: tmrDbncSel++;
  3802  07B0  3001               	movlw	1
  3803  07B1  00F1               	movwf	??_DINTick
  3804  07B2  0871               	movf	??_DINTick,w
  3805  07B3  0021               	movlb	1	; select bank1
  3806  07B4  07AE               	addwf	_tmrDbncSel^(0+128),f
  3807                           
  3808                           ;DIN.c: 53: if(tmrDbncSel>5)
  3809  07B5  3006               	movlw	6
  3810  07B6  022E               	subwf	_tmrDbncSel^(0+128),w
  3811  07B7  1C03               	skipc
  3812  07B8  2FC2               	goto	l290
  3813                           
  3814                           ;DIN.c: 54: {
  3815                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3816  07B9  0020               	movlb	0	; select bank0
  3817  07BA  106E               	bcf	_u_flg_din,0
  3818                           
  3819                           ;DIN.c: 56: tmrDbncSel=0;
  3820  07BB  0021               	movlb	1	; select bank1
  3821  07BC  01AE               	clrf	_tmrDbncSel^(0+128)
  3822                           
  3823                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3824  07BD  1C7C               	btfss	_u_in_sta_currTask,0
  3825  07BE  2FC1               	goto	l292
  3826                           
  3827                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3828  07BF  1430               	bsf	_u_in_ev_down^(0+128),0
  3829  07C0  2FC2               	goto	l290
  3830  07C1                     l292:	
  3831                           
  3832                           ;DIN.c: 60: else
  3833                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3834  07C1  1432               	bsf	_u_in_ev_up^(0+128),0
  3835  07C2                     l290:	
  3836                           
  3837                           ;DIN.c: 62: }
  3838                           ;DIN.c: 63: }
  3839                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3840  07C2  0020               	movlb	0	; select bank0
  3841  07C3  1CEE               	btfss	_u_flg_din,1
  3842  07C4  0008               	return
  3843                           
  3844                           ;DIN.c: 67: {
  3845                           ;DIN.c: 68: tmrLongSel++;
  3846  07C5  3001               	movlw	1
  3847  07C6  0021               	movlb	1	; select bank1
  3848  07C7  07A6               	addwf	_tmrLongSel^(0+128),f
  3849  07C8  3000               	movlw	0
  3850  07C9  3DA7               	addwfc	(_tmrLongSel+1)^(0+128),f
  3851                           
  3852                           ;DIN.c: 69: if(tmrLongSel>200)
  3853  07CA  3000               	movlw	0
  3854  07CB  0227               	subwf	(_tmrLongSel+1)^(0+128),w
  3855  07CC  30C9               	movlw	201
  3856  07CD  1903               	skipnz
  3857  07CE  0226               	subwf	_tmrLongSel^(0+128),w
  3858  07CF  1C03               	skipc
  3859  07D0  0008               	return
  3860                           
  3861                           ;DIN.c: 70: {
  3862                           ;DIN.c: 72: tmrLongSel=0;
  3863  07D1  01A6               	clrf	_tmrLongSel^(0+128)
  3864  07D2  01A7               	clrf	(_tmrLongSel+1)^(0+128)
  3865                           
  3866                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3867  07D3  1431               	bsf	_u_in_ev_long^(0+128),0
  3868  07D4  0008               	return
  3869  07D5                     __end_of_DINTick:	
  3870                           
  3871                           	psect	text14
  3872  07D5                     __ptext14:	
  3873 ;; *************** function _SYSInit *****************
  3874 ;; Defined at:
  3875 ;;		line 18 in file "SYS.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  state           1    wreg     unsigned char 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  state           1    2[COMMON] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;		None               void
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;Total ram usage:        2 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    2
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_main
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           
  3904                           ;psect for function _SYSInit
  3905  07D5                     _SYSInit:	
  3906                           
  3907                           ;incstack = 0
  3908                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3909                           ;SYSInit@state stored from wreg
  3910  07D5  00F2               	movwf	SYSInit@state
  3911                           
  3912                           ;SYS.c: 19: switch(state)
  3913  07D6  2FF2               	goto	l2914
  3914  07D7                     l2892:	
  3915                           ;SYS.c: 20: {
  3916                           ;SYS.c: 21: case 0:
  3917                           
  3918                           
  3919                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  3920  07D7  3006               	movlw	6
  3921  07D8  0021               	movlb	1	; select bank1
  3922  07D9  0095               	movwf	21	;volatile
  3923  07DA  3073               	movlw	115
  3924  07DB  0099               	movwf	25	;volatile
  3925  07DC  3009               	movlw	9
  3926  07DD  0097               	movwf	23	;volatile
  3927  07DE  0027               	movlb	7	; select bank7
  3928  07DF  0194               	clrf	20	;volatile
  3929  07E0  0195               	clrf	21	;volatile
  3930  07E1  3063               	movlw	99
  3931  07E2  0020               	movlb	0	; select bank0
  3932  07E3  0095               	movwf	21	;volatile
  3933  07E4  168B               	bsf	11,5	;volatile
  3934  07E5  30FB               	movlw	251
  3935  07E6  00F1               	movwf	??_SYSInit
  3936  07E7  0871               	movf	??_SYSInit,w
  3937  07E8  058B               	andwf	11,f	;volatile
  3938  07E9  0191               	clrf	17	;volatile
  3939  07EA  0192               	clrf	18	;volatile
  3940  07EB  0021               	movlb	1	; select bank1
  3941  07EC  0191               	clrf	17	;volatile
  3942  07ED  0192               	clrf	18	;volatile
  3943                           
  3944                           ;SYS.c: 24: break;
  3945  07EE  0008               	return
  3946  07EF                     l2910:	
  3947                           ;SYS.c: 25: case 1:
  3948                           
  3949                           
  3950                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  3951  07EF  0021               	movlb	1	; select bank1
  3952  07F0  01AF               	clrf	_u_SYS_STA^(0+128)
  3953                           
  3954                           ;SYS.c: 32: }
  3955                           
  3956                           ;SYS.c: 28: break;
  3957  07F1  0008               	return
  3958  07F2                     l2914:	
  3959  07F2  0872               	movf	SYSInit@state,w
  3960                           
  3961                           ; Switch size 1, requested type "space"
  3962                           ; Number of cases is 2, Range of values is 0 to 1
  3963                           ; switch strategies available:
  3964                           ; Name         Instructions Cycles
  3965                           ; simple_byte            7     4 (average)
  3966                           ; direct_byte           10     6 (fixed)
  3967                           ; jumptable            260     6 (fixed)
  3968                           ;	Chosen strategy is simple_byte
  3969  07F3  3A00               	xorlw	0	; case 0
  3970  07F4  1903               	skipnz
  3971  07F5  2FD7               	goto	l2892
  3972  07F6  3A01               	xorlw	1	; case 1
  3973  07F7  1903               	skipnz
  3974  07F8  2FEF               	goto	l2910
  3975  07F9  2FFA               	goto	l593
  3976  07FA                     l593:	
  3977  07FA  0008               	return
  3978  07FB                     __end_of_SYSInit:	
  3979                           
  3980                           	psect	text15
  3981  0CD9                     __ptext15:	
  3982 ;; *************** function _RTXTask *****************
  3983 ;; Defined at:
  3984 ;;		line 83 in file "RTX.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;		None               void
  3991 ;; Registers used:
  3992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    8
  4005 ;; This function calls:
  4006 ;;		_RTXReadPkt
  4007 ;; This function is called by:
  4008 ;;		_main
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function _RTXTask
  4014  0CD9                     _RTXTask:	
  4015                           
  4016                           ;RTX.c: 85: if(!(PORTBbits.RB0))
  4017                           
  4018                           ;incstack = 0
  4019                           ; Regs used in _RTXTask: [allreg]
  4020  0CD9  0020               	movlb	0	; select bank0
  4021  0CDA  180D               	btfsc	13,0	;volatile
  4022  0CDB  0008               	return
  4023                           
  4024                           ;RTX.c: 86: RTXReadPkt();
  4025  0CDC  3185  25E9         	fcall	_RTXReadPkt
  4026  0CDE  0008               	return
  4027  0CDF                     __end_of_RTXTask:	
  4028                           
  4029                           	psect	text16
  4030  05E9                     __ptext16:	
  4031 ;; *************** function _RTXReadPkt *****************
  4032 ;; Defined at:
  4033 ;;		line 135 in file "RTX.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;		None
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  4038 ;; Return value:  Size  Location     Type
  4039 ;;		None               void
  4040 ;; Registers used:
  4041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4042 ;; Tracked objects:
  4043 ;;		On entry : 0/0
  4044 ;;		On exit  : 0/0
  4045 ;;		Unchanged: 0/0
  4046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4051 ;;Total ram usage:        2 bytes
  4052 ;; Hardware stack levels used:    1
  4053 ;; Hardware stack levels required when called:    7
  4054 ;; This function calls:
  4055 ;;		_CC1Strobe
  4056 ;;		_CC1Read
  4057 ;;		_LEDNormalFlash
  4058 ;;		_PGMWriteNvm
  4059 ;;		_RTXStartSendData
  4060 ;;		_RTXRcvPkt
  4061 ;;		_RTXSendRPgm
  4062 ;; This function is called by:
  4063 ;;		_RTXTask
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           
  4068                           ;psect for function _RTXReadPkt
  4069  05E9                     _RTXReadPkt:	
  4070                           
  4071                           ;RTX.c: 136: unsigned char numRxByte;
  4072                           ;RTX.c: 139: CC1Read(0x3B,(&(numRxByte)),1);
  4073                           
  4074                           ;incstack = 0
  4075                           ; Regs used in _RTXReadPkt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4076  05E9  3066               	movlw	RTXReadPkt@numRxByte& (0+255)
  4077  05EA  0020               	movlb	0	; select bank0
  4078  05EB  00E5               	movwf	??_RTXReadPkt
  4079  05EC  0865               	movf	??_RTXReadPkt,w
  4080  05ED  00F7               	movwf	?_CC1Read
  4081  05EE  01F8               	clrf	?_CC1Read+1
  4082  05EF  0AF8               	incf	?_CC1Read+1,f
  4083  05F0  303B               	movlw	59
  4084  05F1  318E  2661  3185   	fcall	_CC1Read
  4085                           
  4086                           ;RTX.c: 140: while(numRxByte>=0x09)
  4087  05F4  3009               	movlw	9
  4088  05F5  0020               	movlb	0	; select bank0
  4089  05F6  0266               	subwf	RTXReadPkt@numRxByte,w
  4090  05F7  1C03               	btfss	3,0
  4091  05F8  0008               	return
  4092  05F9  0064               	clrwdt	;# 
  4093                           
  4094                           ;RTX.c: 144: RTXRcvPkt(pktRx,0x09);
  4095  05FA  3009               	movlw	9
  4096  05FB  0020               	movlb	0	; select bank0
  4097  05FC  00E5               	movwf	??_RTXReadPkt
  4098  05FD  0865               	movf	??_RTXReadPkt,w
  4099  05FE  00A0               	movwf	?_RTXRcvPkt
  4100  05FF  30B3               	movlw	_pktRx& (0+255)
  4101  0600  318D  2540  3185   	fcall	_RTXRcvPkt
  4102                           
  4103                           ;RTX.c: 146: if(pgm_flg.pgmonoff)
  4104  0603  0020               	movlb	0	; select bank0
  4105  0604  1C6B               	btfss	_pgm_flg,0
  4106  0605  2E28               	goto	l3584
  4107                           
  4108                           ;RTX.c: 147: {
  4109                           ;RTX.c: 148: if(pktRx[0]==0x00)
  4110  0606  0021               	movlb	1	; select bank1
  4111  0607  08B3               	movf	_pktRx^(0+128),f
  4112  0608  1D03               	skipz
  4113  0609  2DE9               	goto	_RTXReadPkt
  4114                           
  4115                           ;RTX.c: 149: {
  4116                           ;RTX.c: 151: if(pktRx[2]==PGM)
  4117  060A  0835               	movf	(_pktRx^(0+128)+2),w
  4118  060B  3A01               	xorlw	1
  4119  060C  1D03               	skipz
  4120  060D  2DE9               	goto	_RTXReadPkt
  4121                           
  4122                           ;RTX.c: 152: {
  4123                           ;RTX.c: 154: pgm_cfg.baseId=pktRx[1];
  4124  060E  0834               	movf	(_pktRx^(0+128)+1),w
  4125  060F  0020               	movlb	0	; select bank0
  4126  0610  00E5               	movwf	??_RTXReadPkt
  4127  0611  0865               	movf	??_RTXReadPkt,w
  4128  0612  0021               	movlb	1	; select bank1
  4129  0613  00C9               	movwf	(_pgm_cfg^(0+128)+4)
  4130                           
  4131                           ;RTX.c: 156: pgm_cfg.menu=1;
  4132  0614  01C7               	clrf	(_pgm_cfg^(0+128)+2)
  4133  0615  0AC7               	incf	(_pgm_cfg^(0+128)+2),f
  4134                           
  4135                           ;RTX.c: 157: PGMWriteNvm();
  4136  0616  318D  2592  3185   	fcall	_PGMWriteNvm
  4137                           
  4138                           ;RTX.c: 159: RTXSendRPgm();
  4139  0619  318F  2794  3185   	fcall	_RTXSendRPgm
  4140                           
  4141                           ;RTX.c: 161: rtx_flg.pgmDone=1;
  4142  061C  0021               	movlb	1	; select bank1
  4143  061D  142A               	bsf	_rtx_flg^(0+128),0
  4144                           
  4145                           ;RTX.c: 163: tmrRcvPkt=0;
  4146  061E  0020               	movlb	0	; select bank0
  4147  061F  01ED               	clrf	_tmrRcvPkt
  4148                           
  4149                           ;RTX.c: 165: RTXStartSendData();
  4150  0620  318D  254E  3185   	fcall	_RTXStartSendData
  4151                           
  4152                           ;RTX.c: 167: LEDNormalFlash(3);
  4153  0623  3003               	movlw	3
  4154  0624  318E  26D6  3185   	fcall	_LEDNormalFlash
  4155                           
  4156                           ;RTX.c: 168: }
  4157                           ;RTX.c: 169: }
  4158                           ;RTX.c: 170: }
  4159  0627  2DE9               	goto	_RTXReadPkt
  4160  0628                     l3584:	
  4161                           
  4162                           ;RTX.c: 171: else
  4163                           ;RTX.c: 172: {
  4164                           ;RTX.c: 173: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  4165  0628  0021               	movlb	1	; select bank1
  4166  0629  0848               	movf	(_pgm_cfg^(0+128)+3),w
  4167  062A  0633               	xorwf	_pktRx^(0+128),w
  4168  062B  1D03               	skipz
  4169  062C  2DE9               	goto	_RTXReadPkt
  4170  062D  0849               	movf	(_pgm_cfg^(0+128)+4),w
  4171  062E  0634               	xorwf	(_pktRx^(0+128)+1),w
  4172  062F  1D03               	skipz
  4173  0630  2DE9               	goto	_RTXReadPkt
  4174                           
  4175                           ;RTX.c: 174: {
  4176                           ;RTX.c: 176: if(pktRx[2]==rDAT)
  4177  0631  0835               	movf	(_pktRx^(0+128)+2),w
  4178  0632  3A80               	xorlw	128
  4179  0633  1D03               	skipz
  4180  0634  2DE9               	goto	_RTXReadPkt
  4181                           
  4182                           ;RTX.c: 177: {
  4183                           ;RTX.c: 179: CC1Strobe(SIDLE);
  4184  0635  3036               	movlw	54
  4185  0636  318D  25B8  3185   	fcall	_CC1Strobe
  4186                           
  4187                           ;RTX.c: 181: tmrRcvPkt=0;
  4188  0639  0020               	movlb	0	; select bank0
  4189  063A  01ED               	clrf	_tmrRcvPkt
  4190                           
  4191                           ;RTX.c: 183: cntSndData=0;
  4192  063B  0021               	movlb	1	; select bank1
  4193  063C  01A9               	clrf	_cntSndData^(0+128)
  4194                           
  4195                           ;RTX.c: 185: flg_slp.goSleep=1;
  4196  063D  0020               	movlb	0	; select bank0
  4197  063E  146A               	bsf	_flg_slp,0
  4198  063F  2DE9               	goto	_RTXReadPkt
  4199  0640                     __end_of_RTXReadPkt:	
  4200                           ;RTX.c: 186: }
  4201                           ;RTX.c: 187: }
  4202                           ;RTX.c: 188: }
  4203                           ;RTX.c: 190: CC1Read(0x3B,(&(numRxByte)),1);
  4204                           
  4205                           
  4206                           	psect	text17
  4207  0F94                     __ptext17:	
  4208 ;; *************** function _RTXSendRPgm *****************
  4209 ;; Defined at:
  4210 ;;		line 256 in file "RTX.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;		None
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;		None
  4215 ;; Return value:  Size  Location     Type
  4216 ;;		None               void
  4217 ;; Registers used:
  4218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;Total ram usage:        1 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    5
  4231 ;; This function calls:
  4232 ;;		_RTXSndPkt
  4233 ;; This function is called by:
  4234 ;;		_RTXReadPkt
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _RTXSendRPgm
  4240  0F94                     _RTXSendRPgm:	
  4241                           
  4242                           ;RTX.c: 258: pktTx[0]=pgm_cfg.baseId;
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4246  0F94  0021               	movlb	1	; select bank1
  4247  0F95  0849               	movf	(_pgm_cfg^(0+128)+4),w
  4248  0F96  0020               	movlb	0	; select bank0
  4249  0F97  00A8               	movwf	??_RTXSendRPgm
  4250  0F98  0828               	movf	??_RTXSendRPgm,w
  4251  0F99  0021               	movlb	1	; select bank1
  4252  0F9A  00BC               	movwf	_pktTx^(0+128)
  4253                           
  4254                           ;RTX.c: 259: pktTx[1]=pgm_cfg.sensId;
  4255  0F9B  0848               	movf	(_pgm_cfg^(0+128)+3),w
  4256  0F9C  0020               	movlb	0	; select bank0
  4257  0F9D  00A8               	movwf	??_RTXSendRPgm
  4258  0F9E  0828               	movf	??_RTXSendRPgm,w
  4259  0F9F  0021               	movlb	1	; select bank1
  4260  0FA0  00BD               	movwf	(_pktTx^(0+128)+1)
  4261                           
  4262                           ;RTX.c: 260: pktTx[2]=rPGM;
  4263  0FA1  3081               	movlw	129
  4264  0FA2  0020               	movlb	0	; select bank0
  4265  0FA3  00A8               	movwf	??_RTXSendRPgm
  4266  0FA4  0828               	movf	??_RTXSendRPgm,w
  4267  0FA5  0021               	movlb	1	; select bank1
  4268  0FA6  00BE               	movwf	(_pktTx^(0+128)+2)
  4269                           
  4270                           ;RTX.c: 261: pktTx[3]=0x00;
  4271  0FA7  01BF               	clrf	(_pktTx^(0+128)+3)
  4272                           
  4273                           ;RTX.c: 262: pktTx[4]=0x00;
  4274  0FA8  01C0               	clrf	(_pktTx^(0+128)+4)
  4275                           
  4276                           ;RTX.c: 263: pktTx[5]=0x00;
  4277  0FA9  01C1               	clrf	(_pktTx^(0+128)+5)
  4278                           
  4279                           ;RTX.c: 264: pktTx[6]=0x00;
  4280  0FAA  01C2               	clrf	(_pktTx^(0+128)+6)
  4281                           
  4282                           ;RTX.c: 265: pktTx[7]=0x00;
  4283  0FAB  01C3               	clrf	(_pktTx^(0+128)+7)
  4284                           
  4285                           ;RTX.c: 266: pktTx[8]=0x00;
  4286  0FAC  01C4               	clrf	(_pktTx^(0+128)+8)
  4287                           
  4288                           ;RTX.c: 269: RTXSndPkt(pktTx,0x09);
  4289  0FAD  3009               	movlw	9
  4290  0FAE  0020               	movlb	0	; select bank0
  4291  0FAF  00A8               	movwf	??_RTXSendRPgm
  4292  0FB0  0828               	movf	??_RTXSendRPgm,w
  4293  0FB1  00A2               	movwf	?_RTXSndPkt
  4294  0FB2  30BC               	movlw	_pktTx& (0+255)
  4295  0FB3  3186  2640         	fcall	_RTXSndPkt
  4296  0FB5  0008               	return
  4297  0FB6                     __end_of_RTXSendRPgm:	
  4298                           
  4299                           	psect	text18
  4300  0D40                     __ptext18:	
  4301 ;; *************** function _RTXRcvPkt *****************
  4302 ;; Defined at:
  4303 ;;		line 129 in file "RTX.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;  dst             1    wreg     PTR unsigned char 
  4306 ;;		 -> pktRx(9), 
  4307 ;;  len             1    0[BANK0 ] unsigned char 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  4310 ;;		 -> pktRx(9), 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;		None               void
  4313 ;; Registers used:
  4314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4320 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;Total ram usage:        4 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    4
  4327 ;; This function calls:
  4328 ;;		_CC1Read
  4329 ;; This function is called by:
  4330 ;;		_RTXReadPkt
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           
  4335                           ;psect for function _RTXRcvPkt
  4336  0D40                     _RTXRcvPkt:	
  4337                           
  4338                           ;incstack = 0
  4339                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4340                           ;RTXRcvPkt@dst stored from wreg
  4341  0D40  0020               	movlb	0	; select bank0
  4342  0D41  00A3               	movwf	RTXRcvPkt@dst
  4343                           
  4344                           ;RTX.c: 131: CC1Read(0x3F,dst,len);
  4345  0D42  0823               	movf	RTXRcvPkt@dst,w
  4346  0D43  00A1               	movwf	??_RTXRcvPkt
  4347  0D44  0821               	movf	??_RTXRcvPkt,w
  4348  0D45  00F7               	movwf	?_CC1Read
  4349  0D46  0820               	movf	RTXRcvPkt@len,w
  4350  0D47  00A2               	movwf	??_RTXRcvPkt+1
  4351  0D48  0822               	movf	??_RTXRcvPkt+1,w
  4352  0D49  00F8               	movwf	?_CC1Read+1
  4353  0D4A  303F               	movlw	63
  4354  0D4B  318E  2661         	fcall	_CC1Read
  4355  0D4D  0008               	return
  4356  0D4E                     __end_of_RTXRcvPkt:	
  4357                           
  4358                           	psect	text19
  4359  0D4E                     __ptext19:	
  4360 ;; *************** function _RTXStartSendData *****************
  4361 ;; Defined at:
  4362 ;;		line 195 in file "RTX.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;		None
  4367 ;; Return value:  Size  Location     Type
  4368 ;;		None               void
  4369 ;; Registers used:
  4370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4380 ;;Total ram usage:        0 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    6
  4383 ;; This function calls:
  4384 ;;		_ADCConv
  4385 ;;		_DLYDelay_ms
  4386 ;;		_RTXSendData
  4387 ;; This function is called by:
  4388 ;;		_RTXInit
  4389 ;;		_RTXReadPkt
  4390 ;; This function uses a non-reentrant model
  4391 ;;
  4392                           
  4393                           
  4394                           ;psect for function _RTXStartSendData
  4395  0D4E                     _RTXStartSendData:	
  4396                           
  4397                           ;RTX.c: 197: DLYDelay_ms(100);
  4398                           
  4399                           ;incstack = 0
  4400                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4401  0D4E  3064               	movlw	100
  4402  0D4F  00F1               	movwf	?_DLYDelay_ms
  4403  0D50  3000               	movlw	0
  4404  0D51  00F2               	movwf	?_DLYDelay_ms+1
  4405  0D52  318E  2613  318D   	fcall	_DLYDelay_ms
  4406                           
  4407                           ;RTX.c: 199: ADCConv();
  4408  0D55  3180  2041  318D   	fcall	_ADCConv
  4409                           
  4410                           ;RTX.c: 201: cntSndData=0;
  4411  0D58  0021               	movlb	1	; select bank1
  4412  0D59  01A9               	clrf	_cntSndData^(0+128)
  4413                           
  4414                           ;RTX.c: 202: RTXSendData();
  4415  0D5A  3184  249E         	fcall	_RTXSendData
  4416  0D5C  0008               	return
  4417  0D5D                     __end_of_RTXStartSendData:	
  4418                           
  4419                           	psect	text20
  4420  049E                     __ptext20:	
  4421 ;; *************** function _RTXSendData *****************
  4422 ;; Defined at:
  4423 ;;		line 206 in file "RTX.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;		None
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;  valTemp         3   52[BANK0 ] struct _RTX_DATA
  4428 ;;  valBatt         3   49[BANK0 ] struct _RTX_DATA
  4429 ;; Return value:  Size  Location     Type
  4430 ;;		None               void
  4431 ;; Registers used:
  4432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4441 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4442 ;;Total ram usage:        7 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    5
  4445 ;; This function calls:
  4446 ;;		_LEDFastFlash
  4447 ;;		_RTXSndPkt
  4448 ;;		___ftadd
  4449 ;; This function is called by:
  4450 ;;		_RTXTick
  4451 ;;		_RTXStartSendData
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           
  4456                           ;psect for function _RTXSendData
  4457  049E                     _RTXSendData:	
  4458                           
  4459                           ;RTX.c: 207: tu_RTX_DATA valTemp,valBatt;
  4460                           ;RTX.c: 209: if(pgm_flg.pgmonoff)
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4464  049E  0020               	movlb	0	; select bank0
  4465  049F  1C6B               	btfss	_pgm_flg,0
  4466  04A0  2CA9               	goto	l3522
  4467                           
  4468                           ;RTX.c: 210: {
  4469                           ;RTX.c: 212: cntSndData=0;
  4470  04A1  0021               	movlb	1	; select bank1
  4471  04A2  01A9               	clrf	_cntSndData^(0+128)
  4472                           
  4473                           ;RTX.c: 214: tmrRcvPkt=100;
  4474  04A3  3064               	movlw	100
  4475  04A4  0020               	movlb	0	; select bank0
  4476  04A5  00D0               	movwf	??_RTXSendData
  4477  04A6  0850               	movf	??_RTXSendData,w
  4478  04A7  00ED               	movwf	_tmrRcvPkt
  4479                           
  4480                           ;RTX.c: 215: }
  4481  04A8  0008               	return
  4482  04A9                     l3522:	
  4483                           
  4484                           ;RTX.c: 216: else
  4485                           ;RTX.c: 217: {
  4486                           ;RTX.c: 219: if(cntSndData<5)
  4487  04A9  3005               	movlw	5
  4488  04AA  0021               	movlb	1	; select bank1
  4489  04AB  0229               	subwf	_cntSndData^(0+128),w
  4490  04AC  1803               	skipnc
  4491  04AD  2D21               	goto	l510
  4492                           
  4493                           ;RTX.c: 220: {
  4494                           ;RTX.c: 222: if(pgm_cfg.menu)
  4495  04AE  0847               	movf	(_pgm_cfg^(0+128)+2),w
  4496  04AF  1903               	btfsc	3,2
  4497  04B0  2D1B               	goto	l3552
  4498                           
  4499                           ;RTX.c: 223: {
  4500                           ;RTX.c: 225: pktTx[0]=pgm_cfg.baseId;
  4501  04B1  0849               	movf	(_pgm_cfg^(0+128)+4),w
  4502  04B2  0020               	movlb	0	; select bank0
  4503  04B3  00D0               	movwf	??_RTXSendData
  4504  04B4  0850               	movf	??_RTXSendData,w
  4505  04B5  0021               	movlb	1	; select bank1
  4506  04B6  00BC               	movwf	_pktTx^(0+128)
  4507                           
  4508                           ;RTX.c: 226: pktTx[1]=pgm_cfg.sensId;
  4509  04B7  0848               	movf	(_pgm_cfg^(0+128)+3),w
  4510  04B8  0020               	movlb	0	; select bank0
  4511  04B9  00D0               	movwf	??_RTXSendData
  4512  04BA  0850               	movf	??_RTXSendData,w
  4513  04BB  0021               	movlb	1	; select bank1
  4514  04BC  00BD               	movwf	(_pktTx^(0+128)+1)
  4515                           
  4516                           ;RTX.c: 227: pktTx[2]=DAT;
  4517  04BD  01BE               	clrf	(_pktTx^(0+128)+2)
  4518                           
  4519                           ;RTX.c: 228: valTemp.val=tempC+-19;
  4520  04BE  3000               	movlw	0
  4521  04BF  0020               	movlb	0	; select bank0
  4522  04C0  00C3               	movwf	?___ftadd
  4523  04C1  3098               	movlw	152
  4524  04C2  00C4               	movwf	?___ftadd+1
  4525  04C3  30C1               	movlw	193
  4526  04C4  00C5               	movwf	?___ftadd+2
  4527  04C5  0021               	movlb	1	; select bank1
  4528  04C6  0823               	movf	_tempC^(0+128),w
  4529  04C7  0020               	movlb	0	; select bank0
  4530  04C8  00C6               	movwf	?___ftadd+3
  4531  04C9  0021               	movlb	1	; select bank1
  4532  04CA  0824               	movf	(_tempC+1)^(0+128),w
  4533  04CB  0020               	movlb	0	; select bank0
  4534  04CC  00C7               	movwf	?___ftadd+4
  4535  04CD  0021               	movlb	1	; select bank1
  4536  04CE  0825               	movf	(_tempC+2)^(0+128),w
  4537  04CF  0020               	movlb	0	; select bank0
  4538  04D0  00C8               	movwf	?___ftadd+5
  4539  04D1  3181  218D  3184   	fcall	___ftadd
  4540  04D4  0020               	movlb	0	; select bank0
  4541  04D5  0843               	movf	?___ftadd,w
  4542  04D6  00D4               	movwf	RTXSendData@valTemp
  4543  04D7  0844               	movf	?___ftadd+1,w
  4544  04D8  00D5               	movwf	RTXSendData@valTemp+1
  4545  04D9  0845               	movf	?___ftadd+2,w
  4546  04DA  00D6               	movwf	RTXSendData@valTemp+2
  4547                           
  4548                           ;RTX.c: 229: pktTx[3]=valTemp.val_byte[0];
  4549  04DB  0854               	movf	RTXSendData@valTemp,w
  4550  04DC  00D0               	movwf	??_RTXSendData
  4551  04DD  0850               	movf	??_RTXSendData,w
  4552  04DE  0021               	movlb	1	; select bank1
  4553  04DF  00BF               	movwf	(_pktTx^(0+128)+3)
  4554                           
  4555                           ;RTX.c: 230: pktTx[4]=valTemp.val_byte[1];
  4556  04E0  0020               	movlb	0	; select bank0
  4557  04E1  0855               	movf	RTXSendData@valTemp+1,w
  4558  04E2  00D0               	movwf	??_RTXSendData
  4559  04E3  0850               	movf	??_RTXSendData,w
  4560  04E4  0021               	movlb	1	; select bank1
  4561  04E5  00C0               	movwf	(_pktTx^(0+128)+4)
  4562                           
  4563                           ;RTX.c: 231: pktTx[5]=valTemp.val_byte[2];
  4564  04E6  0020               	movlb	0	; select bank0
  4565  04E7  0856               	movf	RTXSendData@valTemp+2,w
  4566  04E8  00D0               	movwf	??_RTXSendData
  4567  04E9  0850               	movf	??_RTXSendData,w
  4568  04EA  0021               	movlb	1	; select bank1
  4569  04EB  00C1               	movwf	(_pktTx^(0+128)+5)
  4570                           
  4571                           ;RTX.c: 232: valBatt.val=battV;
  4572  04EC  0820               	movf	_battV^(0+128),w
  4573  04ED  0020               	movlb	0	; select bank0
  4574  04EE  00D1               	movwf	RTXSendData@valBatt
  4575  04EF  0021               	movlb	1	; select bank1
  4576  04F0  0821               	movf	(_battV+1)^(0+128),w
  4577  04F1  0020               	movlb	0	; select bank0
  4578  04F2  00D2               	movwf	RTXSendData@valBatt+1
  4579  04F3  0021               	movlb	1	; select bank1
  4580  04F4  0822               	movf	(_battV+2)^(0+128),w
  4581  04F5  0020               	movlb	0	; select bank0
  4582  04F6  00D3               	movwf	RTXSendData@valBatt+2
  4583                           
  4584                           ;RTX.c: 233: pktTx[6]=valBatt.val_byte[0];
  4585  04F7  0851               	movf	RTXSendData@valBatt,w
  4586  04F8  00D0               	movwf	??_RTXSendData
  4587  04F9  0850               	movf	??_RTXSendData,w
  4588  04FA  0021               	movlb	1	; select bank1
  4589  04FB  00C2               	movwf	(_pktTx^(0+128)+6)
  4590                           
  4591                           ;RTX.c: 234: pktTx[7]=valBatt.val_byte[1];
  4592  04FC  0020               	movlb	0	; select bank0
  4593  04FD  0852               	movf	RTXSendData@valBatt+1,w
  4594  04FE  00D0               	movwf	??_RTXSendData
  4595  04FF  0850               	movf	??_RTXSendData,w
  4596  0500  0021               	movlb	1	; select bank1
  4597  0501  00C3               	movwf	(_pktTx^(0+128)+7)
  4598                           
  4599                           ;RTX.c: 235: pktTx[8]=valTemp.val_byte[2];
  4600  0502  0020               	movlb	0	; select bank0
  4601  0503  0856               	movf	RTXSendData@valTemp+2,w
  4602  0504  00D0               	movwf	??_RTXSendData
  4603  0505  0850               	movf	??_RTXSendData,w
  4604  0506  0021               	movlb	1	; select bank1
  4605  0507  00C4               	movwf	(_pktTx^(0+128)+8)
  4606                           
  4607                           ;RTX.c: 238: RTXSndPkt(pktTx,0x09);
  4608  0508  3009               	movlw	9
  4609  0509  0020               	movlb	0	; select bank0
  4610  050A  00D0               	movwf	??_RTXSendData
  4611  050B  0850               	movf	??_RTXSendData,w
  4612  050C  00A2               	movwf	?_RTXSndPkt
  4613  050D  30BC               	movlw	_pktTx& (0+255)
  4614  050E  3186  2640  3184   	fcall	_RTXSndPkt
  4615                           
  4616                           ;RTX.c: 241: cntSndData++;
  4617  0511  3001               	movlw	1
  4618  0512  0020               	movlb	0	; select bank0
  4619  0513  00D0               	movwf	??_RTXSendData
  4620  0514  0850               	movf	??_RTXSendData,w
  4621  0515  0021               	movlb	1	; select bank1
  4622  0516  07A9               	addwf	_cntSndData^(0+128),f
  4623                           
  4624                           ;RTX.c: 244: LEDFastFlash(1);
  4625  0517  3001               	movlw	1
  4626  0518  318E  26F4         	fcall	_LEDFastFlash
  4627  051A  0021               	movlb	1	; select bank1
  4628  051B                     l3552:	
  4629                           
  4630                           ;RTX.c: 245: }
  4631                           ;RTX.c: 248: tmrRcvPkt=100;
  4632  051B  3064               	movlw	100
  4633  051C  0020               	movlb	0	; select bank0
  4634  051D  00D0               	movwf	??_RTXSendData
  4635  051E  0850               	movf	??_RTXSendData,w
  4636  051F  00ED               	movwf	_tmrRcvPkt
  4637                           
  4638                           ;RTX.c: 249: }
  4639  0520  0008               	return
  4640  0521                     l510:	
  4641                           
  4642                           ;RTX.c: 250: else
  4643                           ;RTX.c: 251: flg_slp.goSleep=1;
  4644  0521  0020               	movlb	0	; select bank0
  4645  0522  146A               	bsf	_flg_slp,0
  4646  0523  0008               	return
  4647  0524                     __end_of_RTXSendData:	
  4648                           
  4649                           	psect	text21
  4650  0640                     __ptext21:	
  4651 ;; *************** function _RTXSndPkt *****************
  4652 ;; Defined at:
  4653 ;;		line 105 in file "RTX.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;  src             1    wreg     PTR unsigned char 
  4656 ;;		 -> pktTx(9), 
  4657 ;;  len             1    2[BANK0 ] unsigned char 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  src             1    4[BANK0 ] PTR unsigned char 
  4660 ;;		 -> pktTx(9), 
  4661 ;;  sta             1    7[BANK0 ] unsigned char 
  4662 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4663 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;		None               void
  4666 ;; Registers used:
  4667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4673 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;Total ram usage:        6 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    4
  4680 ;; This function calls:
  4681 ;;		_CC1Strobe
  4682 ;;		_CC1Read
  4683 ;;		_CC1Write
  4684 ;; This function is called by:
  4685 ;;		_RTXSendData
  4686 ;;		_RTXSendRPgm
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _RTXSndPkt
  4692  0640                     _RTXSndPkt:	
  4693                           
  4694                           ;incstack = 0
  4695                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4696                           ;RTXSndPkt@src stored from wreg
  4697  0640  0020               	movlb	0	; select bank0
  4698  0641  00A4               	movwf	RTXSndPkt@src
  4699  0642                     l483:	
  4700                           ;RTX.c: 106: unsigned char sta,numRxByte,numTxByte;
  4701                           ;RTX.c: 109: do
  4702                           
  4703  0642  0064               	clrwdt	;# 
  4704                           
  4705                           ;RTX.c: 112: CC1Read(0x35,(&(sta)),1);
  4706  0643  3027               	movlw	RTXSndPkt@sta& (0+255)
  4707  0644  0020               	movlb	0	; select bank0
  4708  0645  00A3               	movwf	??_RTXSndPkt
  4709  0646  0823               	movf	??_RTXSndPkt,w
  4710  0647  00F7               	movwf	?_CC1Read
  4711  0648  01F8               	clrf	?_CC1Read+1
  4712  0649  0AF8               	incf	?_CC1Read+1,f
  4713  064A  3035               	movlw	53
  4714  064B  318E  2661  3186   	fcall	_CC1Read
  4715                           
  4716                           ;RTX.c: 113: }
  4717                           ;RTX.c: 114: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4718  064E  301F               	movlw	31
  4719  064F  0020               	movlb	0	; select bank0
  4720  0650  0527               	andwf	RTXSndPkt@sta,w
  4721  0651  00A3               	movwf	??_RTXSndPkt
  4722  0652  0823               	movf	??_RTXSndPkt,w
  4723  0653  3A0D               	xorlw	13
  4724  0654  1903               	skipnz
  4725  0655  2E5D               	goto	l3616
  4726  0656  301F               	movlw	31
  4727  0657  0527               	andwf	RTXSndPkt@sta,w
  4728  0658  00A3               	movwf	??_RTXSndPkt
  4729  0659  0823               	movf	??_RTXSndPkt,w
  4730  065A  3A01               	xorlw	1
  4731  065B  1D03               	skipz
  4732  065C  2E42               	goto	l483
  4733  065D                     l3616:	
  4734                           
  4735                           ;RTX.c: 116: CC1Strobe(SIDLE);
  4736  065D  3036               	movlw	54
  4737  065E  318D  25B8  3186   	fcall	_CC1Strobe
  4738                           
  4739                           ;RTX.c: 117: CC1Read(0x3B,(&(numRxByte)),1);
  4740  0661  3025               	movlw	RTXSndPkt@numRxByte& (0+255)
  4741  0662  0020               	movlb	0	; select bank0
  4742  0663  00A3               	movwf	??_RTXSndPkt
  4743  0664  0823               	movf	??_RTXSndPkt,w
  4744  0665  00F7               	movwf	?_CC1Read
  4745  0666  01F8               	clrf	?_CC1Read+1
  4746  0667  0AF8               	incf	?_CC1Read+1,f
  4747  0668  303B               	movlw	59
  4748  0669  318E  2661  3186   	fcall	_CC1Read
  4749                           
  4750                           ;RTX.c: 118: CC1Read(0x3A,(&(numTxByte)),1);
  4751  066C  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  4752  066D  0020               	movlb	0	; select bank0
  4753  066E  00A3               	movwf	??_RTXSndPkt
  4754  066F  0823               	movf	??_RTXSndPkt,w
  4755  0670  00F7               	movwf	?_CC1Read
  4756  0671  01F8               	clrf	?_CC1Read+1
  4757  0672  0AF8               	incf	?_CC1Read+1,f
  4758  0673  303A               	movlw	58
  4759  0674  318E  2661  3186   	fcall	_CC1Read
  4760                           
  4761                           ;RTX.c: 120: CC1Strobe(SFTX);
  4762  0677  303B               	movlw	59
  4763  0678  318D  25B8  3186   	fcall	_CC1Strobe
  4764                           
  4765                           ;RTX.c: 121: CC1Read(0x3A,(&(numTxByte)),1);
  4766  067B  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  4767  067C  0020               	movlb	0	; select bank0
  4768  067D  00A3               	movwf	??_RTXSndPkt
  4769  067E  0823               	movf	??_RTXSndPkt,w
  4770  067F  00F7               	movwf	?_CC1Read
  4771  0680  01F8               	clrf	?_CC1Read+1
  4772  0681  0AF8               	incf	?_CC1Read+1,f
  4773  0682  303A               	movlw	58
  4774  0683  318E  2661  3186   	fcall	_CC1Read
  4775                           
  4776                           ;RTX.c: 123: CC1Write(0x3F,src,len);
  4777  0686  0020               	movlb	0	; select bank0
  4778  0687  0824               	movf	RTXSndPkt@src,w
  4779  0688  00F7               	movwf	?_CC1Write
  4780  0689  3000               	movlw	0
  4781  068A  00F8               	movwf	?_CC1Write+1
  4782  068B  0822               	movf	RTXSndPkt@len,w
  4783  068C  00A3               	movwf	??_RTXSndPkt
  4784  068D  0823               	movf	??_RTXSndPkt,w
  4785  068E  00F9               	movwf	?_CC1Write+2
  4786  068F  303F               	movlw	63
  4787  0690  318F  2773  3186   	fcall	_CC1Write
  4788                           
  4789                           ;RTX.c: 125: CC1Strobe(STX);
  4790  0693  3035               	movlw	53
  4791  0694  318D  25B8         	fcall	_CC1Strobe
  4792  0696  0008               	return
  4793  0697                     __end_of_RTXSndPkt:	
  4794                           
  4795                           	psect	text22
  4796  0F73                     __ptext22:	
  4797 ;; *************** function _CC1Write *****************
  4798 ;; Defined at:
  4799 ;;		line 127 in file "CC1.c"
  4800 ;; Parameters:    Size  Location     Type
  4801 ;;  addr            1    wreg     unsigned char 
  4802 ;;  src             2    7[COMMON] PTR unsigned char 
  4803 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
  4804 ;;  len             1    9[COMMON] unsigned char 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  addr            1    0[BANK0 ] unsigned char 
  4807 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  4808 ;; Return value:  Size  Location     Type
  4809 ;;		None               void
  4810 ;; Registers used:
  4811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4817 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4820 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4821 ;;Total ram usage:        6 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; Hardware stack levels required when called:    3
  4824 ;; This function calls:
  4825 ;;		_SPIWrite
  4826 ;; This function is called by:
  4827 ;;		_CC1LoadREG
  4828 ;;		_RTXSndPkt
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           
  4833                           ;psect for function _CC1Write
  4834  0F73                     _CC1Write:	
  4835                           
  4836                           ;incstack = 0
  4837                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4838                           ;CC1Write@addr stored from wreg
  4839  0F73  0020               	movlb	0	; select bank0
  4840  0F74  00A0               	movwf	CC1Write@addr
  4841                           
  4842                           ;CC1.c: 128: unsigned char cc1Addr;
  4843                           ;CC1.c: 131: PORTAbits.RA5=0;
  4844  0F75  128C               	bcf	12,5	;volatile
  4845                           
  4846                           ;CC1.c: 134: cc1Addr=((addr&0b00111111)|0b01000000);
  4847  0F76  0820               	movf	CC1Write@addr,w
  4848  0F77  393F               	andlw	63
  4849  0F78  3840               	iorlw	64
  4850  0F79  00FA               	movwf	??_CC1Write
  4851  0F7A  087A               	movf	??_CC1Write,w
  4852  0F7B  00A1               	movwf	CC1Write@cc1Addr
  4853                           
  4854                           ;CC1.c: 135: SPIWrite((&(cc1Addr)),1);
  4855  0F7C  3021               	movlw	low CC1Write@cc1Addr
  4856  0F7D  00F1               	movwf	?_SPIWrite
  4857  0F7E  3000               	movlw	high CC1Write@cc1Addr
  4858  0F7F  00F2               	movwf	?_SPIWrite+1
  4859  0F80  01F3               	clrf	?_SPIWrite+2
  4860  0F81  0AF3               	incf	?_SPIWrite+2,f
  4861  0F82  318E  267D  318F   	fcall	_SPIWrite
  4862                           
  4863                           ;CC1.c: 138: SPIWrite(src,len);
  4864  0F85  0878               	movf	CC1Write@src+1,w
  4865  0F86  01F2               	clrf	?_SPIWrite+1
  4866  0F87  07F2               	addwf	?_SPIWrite+1,f
  4867  0F88  0877               	movf	CC1Write@src,w
  4868  0F89  01F1               	clrf	?_SPIWrite
  4869  0F8A  07F1               	addwf	?_SPIWrite,f
  4870  0F8B  0879               	movf	CC1Write@len,w
  4871  0F8C  00FA               	movwf	??_CC1Write
  4872  0F8D  087A               	movf	??_CC1Write,w
  4873  0F8E  00F3               	movwf	?_SPIWrite+2
  4874  0F8F  318E  267D         	fcall	_SPIWrite
  4875                           
  4876                           ;CC1.c: 141: PORTAbits.RA5=1;
  4877  0F91  0020               	movlb	0	; select bank0
  4878  0F92  168C               	bsf	12,5	;volatile
  4879  0F93  0008               	return
  4880  0F94                     __end_of_CC1Write:	
  4881                           
  4882                           	psect	text23
  4883  0E61                     __ptext23:	
  4884 ;; *************** function _CC1Read *****************
  4885 ;; Defined at:
  4886 ;;		line 109 in file "CC1.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;  addr            1    wreg     unsigned char 
  4889 ;;  dst             1    7[COMMON] PTR unsigned char 
  4890 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4891 ;;		 -> RTXSndPkt@sta(1), 
  4892 ;;  len             1    8[COMMON] unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  addr            1   10[COMMON] unsigned char 
  4895 ;;  cc1Addr         1   11[COMMON] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;Total ram usage:        5 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    3
  4912 ;; This function calls:
  4913 ;;		_SPIRead
  4914 ;;		_SPIWrite
  4915 ;; This function is called by:
  4916 ;;		_RTXSndPkt
  4917 ;;		_RTXRcvPkt
  4918 ;;		_RTXReadPkt
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           
  4923                           ;psect for function _CC1Read
  4924  0E61                     _CC1Read:	
  4925                           
  4926                           ;incstack = 0
  4927                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4928                           ;CC1Read@addr stored from wreg
  4929  0E61  00FA               	movwf	CC1Read@addr
  4930                           
  4931                           ;CC1.c: 110: unsigned char cc1Addr;
  4932                           ;CC1.c: 113: PORTAbits.RA5=0;
  4933  0E62  0020               	movlb	0	; select bank0
  4934  0E63  128C               	bcf	12,5	;volatile
  4935                           
  4936                           ;CC1.c: 116: cc1Addr=((addr&0b00111111)|0b11000000);
  4937  0E64  087A               	movf	CC1Read@addr,w
  4938  0E65  393F               	andlw	63
  4939  0E66  38C0               	iorlw	192
  4940  0E67  00F9               	movwf	??_CC1Read
  4941  0E68  0879               	movf	??_CC1Read,w
  4942  0E69  00FB               	movwf	CC1Read@cc1Addr
  4943                           
  4944                           ;CC1.c: 117: SPIWrite((&(cc1Addr)),1);
  4945  0E6A  307B               	movlw	low CC1Read@cc1Addr
  4946  0E6B  00F1               	movwf	?_SPIWrite
  4947  0E6C  3000               	movlw	high CC1Read@cc1Addr
  4948  0E6D  00F2               	movwf	?_SPIWrite+1
  4949  0E6E  01F3               	clrf	?_SPIWrite+2
  4950  0E6F  0AF3               	incf	?_SPIWrite+2,f
  4951  0E70  318E  267D  318E   	fcall	_SPIWrite
  4952                           
  4953                           ;CC1.c: 120: SPIRead(dst,len);
  4954  0E73  0878               	movf	CC1Read@len,w
  4955  0E74  00F9               	movwf	??_CC1Read
  4956  0E75  0879               	movf	??_CC1Read,w
  4957  0E76  00F1               	movwf	?_SPIRead
  4958  0E77  0877               	movf	CC1Read@dst,w
  4959  0E78  318F  2732         	fcall	_SPIRead
  4960                           
  4961                           ;CC1.c: 123: PORTAbits.RA5=1;
  4962  0E7A  0020               	movlb	0	; select bank0
  4963  0E7B  168C               	bsf	12,5	;volatile
  4964  0E7C  0008               	return
  4965  0E7D                     __end_of_CC1Read:	
  4966                           
  4967                           	psect	text24
  4968  0F32                     __ptext24:	
  4969 ;; *************** function _SPIRead *****************
  4970 ;; Defined at:
  4971 ;;		line 26 in file "SPI.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  dstPtr          1    wreg     PTR unsigned char 
  4974 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4975 ;;		 -> RTXSndPkt@sta(1), 
  4976 ;;  len             1    1[COMMON] unsigned char 
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  4979 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  4980 ;;		 -> RTXSndPkt@sta(1), 
  4981 ;;  i               1    5[COMMON] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;		None               void
  4984 ;; Registers used:
  4985 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4991 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;Total ram usage:        5 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    2
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_CC1Read
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           
  5006                           ;psect for function _SPIRead
  5007  0F32                     _SPIRead:	
  5008                           
  5009                           ;incstack = 0
  5010                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5011                           ;SPIRead@dstPtr stored from wreg
  5012  0F32  00F4               	movwf	SPIRead@dstPtr
  5013                           
  5014                           ;SPI.c: 27: unsigned char i;
  5015                           ;SPI.c: 29: for(i=0;i<len;i++)
  5016  0F33  01F5               	clrf	SPIRead@i
  5017  0F34                     l3260:	
  5018  0F34  0871               	movf	SPIRead@len,w
  5019  0F35  0275               	subwf	SPIRead@i,w
  5020  0F36  1803               	btfsc	3,0
  5021  0F37  0008               	return
  5022                           
  5023                           ;SPI.c: 30: {
  5024                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5025  0F38  0020               	movlb	0	; select bank0
  5026  0F39  1191               	bcf	17,3	;volatile
  5027                           
  5028                           ;SPI.c: 32: SSPBUF=0xFF;
  5029  0F3A  30FF               	movlw	255
  5030  0F3B  0024               	movlb	4	; select bank4
  5031  0F3C  0091               	movwf	17	;volatile
  5032  0F3D                     l65:	
  5033                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5034                           
  5035  0F3D  0020               	movlb	0	; select bank0
  5036  0F3E  1991               	btfsc	17,3	;volatile
  5037  0F3F  2F42               	goto	l3256
  5038                           
  5039                           ;SPI.c: 34: _nop();
  5040  0F40  0000               	nop
  5041  0F41  2F3D               	goto	l65
  5042  0F42                     l3256:	
  5043                           
  5044                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5045  0F42  0024               	movlb	4	; select bank4
  5046  0F43  0811               	movf	17,w	;volatile
  5047  0F44  00F2               	movwf	??_SPIRead
  5048  0F45  0875               	movf	SPIRead@i,w
  5049  0F46  0774               	addwf	SPIRead@dstPtr,w
  5050  0F47  00F3               	movwf	??_SPIRead+1
  5051  0F48  0873               	movf	??_SPIRead+1,w
  5052  0F49  0086               	movwf	6
  5053  0F4A  0187               	clrf	7
  5054  0F4B  0872               	movf	??_SPIRead,w
  5055  0F4C  0081               	movwf	1
  5056  0F4D  3001               	movlw	1
  5057  0F4E  00F2               	movwf	??_SPIRead
  5058  0F4F  0872               	movf	??_SPIRead,w
  5059  0F50  07F5               	addwf	SPIRead@i,f
  5060  0F51  2F34               	goto	l3260
  5061  0F52                     __end_of_SPIRead:	
  5062                           
  5063                           	psect	text25
  5064  0DB8                     __ptext25:	
  5065 ;; *************** function _CC1Strobe *****************
  5066 ;; Defined at:
  5067 ;;		line 94 in file "CC1.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  e_stb           1    wreg     enum E1829
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  e_stb           1    8[COMMON] enum E1829
  5072 ;;  cc1Stb          1    9[COMMON] unsigned char 
  5073 ;;  i               1    0        unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;		None               void
  5076 ;; Registers used:
  5077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;Total ram usage:        3 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    3
  5090 ;; This function calls:
  5091 ;;		_SPIWrite
  5092 ;; This function is called by:
  5093 ;;		_CC1Init
  5094 ;;		_CC1Sleep
  5095 ;;		_RTXInit
  5096 ;;		_RTXSndPkt
  5097 ;;		_RTXReadPkt
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _CC1Strobe
  5103  0DB8                     _CC1Strobe:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5107                           ;CC1Strobe@e_stb stored from wreg
  5108  0DB8  00F8               	movwf	CC1Strobe@e_stb
  5109                           
  5110                           ;CC1.c: 95: unsigned char cc1Stb,i;
  5111                           ;CC1.c: 98: PORTAbits.RA5=0;
  5112  0DB9  0020               	movlb	0	; select bank0
  5113  0DBA  128C               	bcf	12,5	;volatile
  5114                           
  5115                           ;CC1.c: 101: cc1Stb=((e_stb&0b00111111)|0b10000000);
  5116  0DBB  0878               	movf	CC1Strobe@e_stb,w
  5117  0DBC  393F               	andlw	63
  5118  0DBD  3880               	iorlw	128
  5119  0DBE  00F7               	movwf	??_CC1Strobe
  5120  0DBF  0877               	movf	??_CC1Strobe,w
  5121  0DC0  00F9               	movwf	CC1Strobe@cc1Stb
  5122                           
  5123                           ;CC1.c: 102: SPIWrite((&(cc1Stb)),1);
  5124  0DC1  3079               	movlw	low CC1Strobe@cc1Stb
  5125  0DC2  00F1               	movwf	?_SPIWrite
  5126  0DC3  3000               	movlw	high CC1Strobe@cc1Stb
  5127  0DC4  00F2               	movwf	?_SPIWrite+1
  5128  0DC5  01F3               	clrf	?_SPIWrite+2
  5129  0DC6  0AF3               	incf	?_SPIWrite+2,f
  5130  0DC7  318E  267D         	fcall	_SPIWrite
  5131                           
  5132                           ;CC1.c: 105: PORTAbits.RA5=1;
  5133  0DC9  0020               	movlb	0	; select bank0
  5134  0DCA  168C               	bsf	12,5	;volatile
  5135  0DCB  0008               	return
  5136  0DCC                     __end_of_CC1Strobe:	
  5137                           
  5138                           	psect	text26
  5139  0E7D                     __ptext26:	
  5140 ;; *************** function _SPIWrite *****************
  5141 ;; Defined at:
  5142 ;;		line 40 in file "SPI.c"
  5143 ;; Parameters:    Size  Location     Type
  5144 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  5145 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), CC1Write@cc1Addr(1), 
  5146 ;;		 -> CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  5147 ;;  len             1    3[COMMON] unsigned char 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  i               1    6[COMMON] unsigned char 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;		None               void
  5152 ;; Registers used:
  5153 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5159 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5161 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;Total ram usage:        6 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    2
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_CC1Strobe
  5170 ;;		_CC1Read
  5171 ;;		_CC1Write
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           
  5176                           ;psect for function _SPIWrite
  5177  0E7D                     _SPIWrite:	
  5178                           
  5179                           ;SPI.c: 41: unsigned char i;
  5180                           ;SPI.c: 43: for(i=0;i<len;i++)
  5181                           
  5182                           ;incstack = 0
  5183                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  5184  0E7D  01F6               	clrf	SPIWrite@i
  5185  0E7E                     l3268:	
  5186  0E7E  0873               	movf	SPIWrite@len,w
  5187  0E7F  0276               	subwf	SPIWrite@i,w
  5188  0E80  1803               	btfsc	3,0
  5189  0E81  0008               	return
  5190                           
  5191                           ;SPI.c: 44: {
  5192                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  5193  0E82  0020               	movlb	0	; select bank0
  5194  0E83  1191               	bcf	17,3	;volatile
  5195                           
  5196                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  5197  0E84  0876               	movf	SPIWrite@i,w
  5198  0E85  00F4               	movwf	??_SPIWrite
  5199  0E86  01F5               	clrf	??_SPIWrite+1
  5200  0E87  0874               	movf	??_SPIWrite,w
  5201  0E88  0771               	addwf	SPIWrite@srcPtr,w
  5202  0E89  0086               	movwf	6
  5203  0E8A  0875               	movf	??_SPIWrite+1,w
  5204  0E8B  3D72               	addwfc	SPIWrite@srcPtr+1,w
  5205  0E8C  0087               	movwf	7
  5206  0E8D  0801               	movf	1,w
  5207  0E8E  0024               	movlb	4	; select bank4
  5208  0E8F  0091               	movwf	17	;volatile
  5209  0E90                     l74:	
  5210                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  5211                           
  5212  0E90  0020               	movlb	0	; select bank0
  5213  0E91  1991               	btfsc	17,3	;volatile
  5214  0E92  2E95               	goto	l3266
  5215                           
  5216                           ;SPI.c: 48: _nop();
  5217  0E93  0000               	nop
  5218  0E94  2E90               	goto	l74
  5219  0E95                     l3266:	
  5220  0E95  3001               	movlw	1
  5221  0E96  00F4               	movwf	??_SPIWrite
  5222  0E97  0874               	movf	??_SPIWrite,w
  5223  0E98  07F6               	addwf	SPIWrite@i,f
  5224  0E99  2E7E               	goto	l3268
  5225  0E9A                     __end_of_SPIWrite:	
  5226                           
  5227                           	psect	text27
  5228  0EF4                     __ptext27:	
  5229 ;; *************** function _LEDFastFlash *****************
  5230 ;; Defined at:
  5231 ;;		line 39 in file "LED.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  num             1    wreg     unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  num             1    8[COMMON] unsigned char 
  5236 ;;  i               1    9[COMMON] unsigned char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;		None               void
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0, pclath, cstack
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;Total ram usage:        3 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; Hardware stack levels required when called:    3
  5253 ;; This function calls:
  5254 ;;		_DLYDelay_ms
  5255 ;; This function is called by:
  5256 ;;		_RTXSendData
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _LEDFastFlash
  5262  0EF4                     _LEDFastFlash:	
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  5266                           ;LEDFastFlash@num stored from wreg
  5267  0EF4  00F8               	movwf	LEDFastFlash@num
  5268                           
  5269                           ;LED.c: 40: unsigned char i;
  5270                           ;LED.c: 42: for(i=0;i<num;i++)
  5271  0EF5  01F9               	clrf	LEDFastFlash@i
  5272  0EF6                     l3394:	
  5273  0EF6  0878               	movf	LEDFastFlash@num,w
  5274  0EF7  0279               	subwf	LEDFastFlash@i,w
  5275  0EF8  1803               	btfsc	3,0
  5276  0EF9  0008               	return
  5277  0EFA  0064               	clrwdt	;# 
  5278                           
  5279                           ;LED.c: 45: PORTCbits.RC7=0;
  5280  0EFB  0020               	movlb	0	; select bank0
  5281  0EFC  138E               	bcf	14,7	;volatile
  5282                           
  5283                           ;LED.c: 46: DLYDelay_ms(5);
  5284  0EFD  3005               	movlw	5
  5285  0EFE  00F1               	movwf	?_DLYDelay_ms
  5286  0EFF  3000               	movlw	0
  5287  0F00  00F2               	movwf	?_DLYDelay_ms+1
  5288  0F01  318E  2613  318E   	fcall	_DLYDelay_ms
  5289                           
  5290                           ;LED.c: 47: PORTCbits.RC7=1;
  5291  0F04  0020               	movlb	0	; select bank0
  5292  0F05  178E               	bsf	14,7	;volatile
  5293                           
  5294                           ;LED.c: 48: DLYDelay_ms(5);
  5295  0F06  3005               	movlw	5
  5296  0F07  00F1               	movwf	?_DLYDelay_ms
  5297  0F08  3000               	movlw	0
  5298  0F09  00F2               	movwf	?_DLYDelay_ms+1
  5299  0F0A  318E  2613  318E   	fcall	_DLYDelay_ms
  5300  0F0D  3001               	movlw	1
  5301  0F0E  00F7               	movwf	??_LEDFastFlash
  5302  0F0F  0877               	movf	??_LEDFastFlash,w
  5303  0F10  07F9               	addwf	LEDFastFlash@i,f
  5304  0F11  2EF6               	goto	l3394
  5305  0F12                     __end_of_LEDFastFlash:	
  5306                           
  5307                           	psect	text28
  5308  0041                     __ptext28:	
  5309 ;; *************** function _ADCConv *****************
  5310 ;; Defined at:
  5311 ;;		line 48 in file "ADC.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  sumTemp         2   52[BANK0 ] unsigned short 
  5316 ;;  sumBatt         2   50[BANK0 ] unsigned short 
  5317 ;;  cntSum          1   57[BANK0 ] unsigned char 
  5318 ;; Return value:  Size  Location     Type
  5319 ;;		None               void
  5320 ;; Registers used:
  5321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5322 ;; Tracked objects:
  5323 ;;		On entry : 0/0
  5324 ;;		On exit  : 0/0
  5325 ;;		Unchanged: 0/0
  5326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;Total ram usage:       10 bytes
  5332 ;; Hardware stack levels used:    1
  5333 ;; Hardware stack levels required when called:    4
  5334 ;; This function calls:
  5335 ;;		___awtoft
  5336 ;;		___ftadd
  5337 ;;		___ftdiv
  5338 ;;		___ftmul
  5339 ;;		___lwdiv
  5340 ;; This function is called by:
  5341 ;;		_RTXStartSendData
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           
  5346                           ;psect for function _ADCConv
  5347  0041                     _ADCConv:	
  5348                           
  5349                           ;ADC.c: 49: unsigned short sumBatt=0,sumTemp=0;
  5350                           
  5351                           ;incstack = 0
  5352                           ; Regs used in _ADCConv: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5353  0041  0020               	movlb	0	; select bank0
  5354  0042  01D2               	clrf	ADCConv@sumBatt
  5355  0043  01D3               	clrf	ADCConv@sumBatt+1
  5356  0044  01D4               	clrf	ADCConv@sumTemp
  5357  0045  01D5               	clrf	ADCConv@sumTemp+1
  5358                           
  5359                           ;ADC.c: 50: unsigned char cntSum=0;
  5360  0046  01D9               	clrf	ADCConv@cntSum
  5361                           
  5362                           ;ADC.c: 53: {
  5363                           ;ADC.c: 55: switch(adc_ch)
  5364                           
  5365                           ;ADC.c: 52: while(1)
  5366  0047  297F               	goto	l3322
  5367  0048                     l116:	
  5368                           ;ADC.c: 56: {
  5369                           ;ADC.c: 57: case ADC_CH_BATT:
  5370                           
  5371                           
  5372                           ;ADC.c: 59: PORTBbits.RB5=1;
  5373  0048  0020               	movlb	0	; select bank0
  5374  0049  168D               	bsf	13,5	;volatile
  5375                           
  5376                           ;ADC.c: 61: if(cntSum==10)
  5377  004A  0859               	movf	ADCConv@cntSum,w
  5378  004B  3A0A               	xorlw	10
  5379  004C  1D03               	skipz
  5380  004D  28BB               	goto	l3286
  5381                           
  5382                           ;ADC.c: 62: {
  5383                           ;ADC.c: 64: batt=sumBatt/10;
  5384  004E  300A               	movlw	10
  5385  004F  00F1               	movwf	?___lwdiv
  5386  0050  3000               	movlw	0
  5387  0051  00F2               	movwf	?___lwdiv+1
  5388  0052  0853               	movf	ADCConv@sumBatt+1,w
  5389  0053  01F4               	clrf	?___lwdiv+3
  5390  0054  07F4               	addwf	?___lwdiv+3,f
  5391  0055  0852               	movf	ADCConv@sumBatt,w
  5392  0056  01F3               	clrf	?___lwdiv+2
  5393  0057  07F3               	addwf	?___lwdiv+2,f
  5394  0058  3186  26EA  3180   	fcall	___lwdiv
  5395  005B  0871               	movf	?___lwdiv,w
  5396  005C  0020               	movlb	0	; select bank0
  5397  005D  00D0               	movwf	??_ADCConv
  5398  005E  0850               	movf	??_ADCConv,w
  5399  005F  00E9               	movwf	_batt
  5400                           
  5401                           ;ADC.c: 70: battV=batt*4*1.024/1024*11;
  5402  0060  3000               	movlw	0
  5403  0061  00B3               	movwf	?___ftdiv
  5404  0062  3080               	movlw	128
  5405  0063  00B4               	movwf	?___ftdiv+1
  5406  0064  3044               	movlw	68
  5407  0065  00B5               	movwf	?___ftdiv+2
  5408  0066  3012               	movlw	18
  5409  0067  00A3               	movwf	?___ftmul
  5410  0068  3083               	movlw	131
  5411  0069  00A4               	movwf	?___ftmul+1
  5412  006A  303F               	movlw	63
  5413  006B  00A5               	movwf	?___ftmul+2
  5414  006C  0869               	movf	_batt,w
  5415  006D  00D0               	movwf	??_ADCConv
  5416  006E  01D1               	clrf	??_ADCConv+1
  5417  006F  35D0               	lslf	??_ADCConv,f
  5418  0070  0DD1               	rlf	??_ADCConv+1,f
  5419  0071  35D0               	lslf	??_ADCConv,f
  5420  0072  0DD1               	rlf	??_ADCConv+1,f
  5421  0073  0850               	movf	??_ADCConv,w
  5422  0074  00F9               	movwf	?___awtoft
  5423  0075  0851               	movf	??_ADCConv+1,w
  5424  0076  00FA               	movwf	?___awtoft+1
  5425  0077  318F  2752  3180   	fcall	___awtoft
  5426  007A  0879               	movf	?___awtoft,w
  5427  007B  0020               	movlb	0	; select bank0
  5428  007C  00A6               	movwf	?___ftmul+3
  5429  007D  087A               	movf	?___awtoft+1,w
  5430  007E  00A7               	movwf	?___ftmul+4
  5431  007F  087B               	movf	?___awtoft+2,w
  5432  0080  00A8               	movwf	?___ftmul+5
  5433  0081  3183  2341  3180   	fcall	___ftmul
  5434  0084  0020               	movlb	0	; select bank0
  5435  0085  0823               	movf	?___ftmul,w
  5436  0086  00B6               	movwf	?___ftdiv+3
  5437  0087  0824               	movf	?___ftmul+1,w
  5438  0088  00B7               	movwf	?___ftdiv+4
  5439  0089  0825               	movf	?___ftmul+2,w
  5440  008A  00B8               	movwf	?___ftdiv+5
  5441  008B  3183  23F5  3180   	fcall	___ftdiv
  5442  008E  0020               	movlb	0	; select bank0
  5443  008F  0833               	movf	?___ftdiv,w
  5444  0090  00D6               	movwf	_ADCConv$1367
  5445  0091  0834               	movf	?___ftdiv+1,w
  5446  0092  00D7               	movwf	_ADCConv$1367+1
  5447  0093  0835               	movf	?___ftdiv+2,w
  5448  0094  00D8               	movwf	_ADCConv$1367+2
  5449                           
  5450                           ;ADC.c: 70: battV=batt*4*1.024/1024*11;
  5451  0095  3000               	movlw	0
  5452  0096  00A3               	movwf	?___ftmul
  5453  0097  3030               	movlw	48
  5454  0098  00A4               	movwf	?___ftmul+1
  5455  0099  3041               	movlw	65
  5456  009A  00A5               	movwf	?___ftmul+2
  5457  009B  0856               	movf	_ADCConv$1367,w
  5458  009C  00A6               	movwf	?___ftmul+3
  5459  009D  0857               	movf	_ADCConv$1367+1,w
  5460  009E  00A7               	movwf	?___ftmul+4
  5461  009F  0858               	movf	_ADCConv$1367+2,w
  5462  00A0  00A8               	movwf	?___ftmul+5
  5463  00A1  3183  2341  3180   	fcall	___ftmul
  5464  00A4  0020               	movlb	0	; select bank0
  5465  00A5  0823               	movf	?___ftmul,w
  5466  00A6  0021               	movlb	1	; select bank1
  5467  00A7  00A0               	movwf	_battV^(0+128)
  5468  00A8  0020               	movlb	0	; select bank0
  5469  00A9  0824               	movf	?___ftmul+1,w
  5470  00AA  0021               	movlb	1	; select bank1
  5471  00AB  00A1               	movwf	(_battV+1)^(0+128)
  5472  00AC  0020               	movlb	0	; select bank0
  5473  00AD  0825               	movf	?___ftmul+2,w
  5474  00AE  0021               	movlb	1	; select bank1
  5475  00AF  00A2               	movwf	(_battV+2)^(0+128)
  5476                           
  5477                           ;ADC.c: 72: sumBatt=0;
  5478  00B0  0020               	movlb	0	; select bank0
  5479  00B1  01D2               	clrf	ADCConv@sumBatt
  5480  00B2  01D3               	clrf	ADCConv@sumBatt+1
  5481                           
  5482                           ;ADC.c: 74: cntSum=0;
  5483  00B3  01D9               	clrf	ADCConv@cntSum
  5484                           
  5485                           ;ADC.c: 76: ADCON1=0b00000000;
  5486  00B4  0021               	movlb	1	; select bank1
  5487  00B5  019E               	clrf	30	;volatile
  5488                           
  5489                           ;ADC.c: 77: ADCON0=0b00101001;
  5490  00B6  3029               	movlw	41
  5491  00B7  009D               	movwf	29	;volatile
  5492                           
  5493                           ;ADC.c: 78: adc_ch=ADC_CH_TEMP;
  5494  00B8  01A8               	clrf	_adc_ch^(0+128)
  5495  00B9  0AA8               	incf	_adc_ch^(0+128),f
  5496                           
  5497                           ;ADC.c: 79: }
  5498  00BA  28C8               	goto	l3290
  5499  00BB                     l3286:	
  5500                           
  5501                           ;ADC.c: 80: else
  5502                           ;ADC.c: 81: {
  5503                           ;ADC.c: 83: sumBatt+=ADRESH;
  5504  00BB  0021               	movlb	1	; select bank1
  5505  00BC  081C               	movf	28,w	;volatile
  5506  00BD  0020               	movlb	0	; select bank0
  5507  00BE  00D0               	movwf	??_ADCConv
  5508  00BF  01D1               	clrf	??_ADCConv+1
  5509  00C0  0850               	movf	??_ADCConv,w
  5510  00C1  07D2               	addwf	ADCConv@sumBatt,f
  5511  00C2  0851               	movf	??_ADCConv+1,w
  5512  00C3  3DD3               	addwfc	ADCConv@sumBatt+1,f
  5513                           
  5514                           ;ADC.c: 85: cntSum++;
  5515  00C4  3001               	movlw	1
  5516  00C5  00D0               	movwf	??_ADCConv
  5517  00C6  0850               	movf	??_ADCConv,w
  5518  00C7  07D9               	addwf	ADCConv@cntSum,f
  5519  00C8                     l3290:	
  5520                           
  5521                           ;ADC.c: 86: }
  5522                           ;ADC.c: 88: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5523  00C8  3006               	movlw	6
  5524  00C9  0020               	movlb	0	; select bank0
  5525  00CA  00D0               	movwf	??_ADCConv
  5526  00CB                     u3527:	
  5527  00CB  0BD0               	decfsz	??_ADCConv,f
  5528  00CC  28CB               	goto	u3527
  5529  00CD  0000               	nop
  5530  00CE  297C               	goto	l3318
  5531  00CF                     l120:	
  5532                           ;ADC.c: 92: case ADC_CH_TEMP:
  5533                           
  5534                           ;ADC.c: 91: break;
  5535                           
  5536                           ;ADC.c: 90: ADCON0bits.GO=1;
  5537                           
  5538                           
  5539                           ;ADC.c: 94: PORTBbits.RB5=0;
  5540  00CF  0020               	movlb	0	; select bank0
  5541  00D0  128D               	bcf	13,5	;volatile
  5542                           
  5543                           ;ADC.c: 96: if(cntSum==10)
  5544  00D1  0859               	movf	ADCConv@cntSum,w
  5545  00D2  3A0A               	xorlw	10
  5546  00D3  1D03               	skipz
  5547  00D4  2969               	goto	l3312
  5548                           
  5549                           ;ADC.c: 97: {
  5550                           ;ADC.c: 99: temp=sumTemp/10;
  5551  00D5  300A               	movlw	10
  5552  00D6  00F1               	movwf	?___lwdiv
  5553  00D7  3000               	movlw	0
  5554  00D8  00F2               	movwf	?___lwdiv+1
  5555  00D9  0855               	movf	ADCConv@sumTemp+1,w
  5556  00DA  01F4               	clrf	?___lwdiv+3
  5557  00DB  07F4               	addwf	?___lwdiv+3,f
  5558  00DC  0854               	movf	ADCConv@sumTemp,w
  5559  00DD  01F3               	clrf	?___lwdiv+2
  5560  00DE  07F3               	addwf	?___lwdiv+2,f
  5561  00DF  3186  26EA  3180   	fcall	___lwdiv
  5562  00E2  0871               	movf	?___lwdiv,w
  5563  00E3  0020               	movlb	0	; select bank0
  5564  00E4  00D0               	movwf	??_ADCConv
  5565  00E5  0850               	movf	??_ADCConv,w
  5566  00E6  0021               	movlb	1	; select bank1
  5567  00E7  00AD               	movwf	_temp^(0+128)
  5568                           
  5569                           ;ADC.c: 106: tempC=((temp*4)*(battV/1024)*1000-968)/2.47;
  5570  00E8  0820               	movf	_battV^(0+128),w
  5571  00E9  0020               	movlb	0	; select bank0
  5572  00EA  00B6               	movwf	?___ftdiv+3
  5573  00EB  0021               	movlb	1	; select bank1
  5574  00EC  0821               	movf	(_battV+1)^(0+128),w
  5575  00ED  0020               	movlb	0	; select bank0
  5576  00EE  00B7               	movwf	?___ftdiv+4
  5577  00EF  0021               	movlb	1	; select bank1
  5578  00F0  0822               	movf	(_battV+2)^(0+128),w
  5579  00F1  0020               	movlb	0	; select bank0
  5580  00F2  00B8               	movwf	?___ftdiv+5
  5581  00F3  3000               	movlw	0
  5582  00F4  00B3               	movwf	?___ftdiv
  5583  00F5  3080               	movlw	128
  5584  00F6  00B4               	movwf	?___ftdiv+1
  5585  00F7  3044               	movlw	68
  5586  00F8  00B5               	movwf	?___ftdiv+2
  5587  00F9  3183  23F5  3180   	fcall	___ftdiv
  5588  00FC  0020               	movlb	0	; select bank0
  5589  00FD  0833               	movf	?___ftdiv,w
  5590  00FE  00A3               	movwf	?___ftmul
  5591  00FF  0834               	movf	?___ftdiv+1,w
  5592  0100  00A4               	movwf	?___ftmul+1
  5593  0101  0835               	movf	?___ftdiv+2,w
  5594  0102  00A5               	movwf	?___ftmul+2
  5595  0103  0021               	movlb	1	; select bank1
  5596  0104  082D               	movf	_temp^(0+128),w
  5597  0105  0020               	movlb	0	; select bank0
  5598  0106  00D0               	movwf	??_ADCConv
  5599  0107  01D1               	clrf	??_ADCConv+1
  5600  0108  35D0               	lslf	??_ADCConv,f
  5601  0109  0DD1               	rlf	??_ADCConv+1,f
  5602  010A  35D0               	lslf	??_ADCConv,f
  5603  010B  0DD1               	rlf	??_ADCConv+1,f
  5604  010C  0850               	movf	??_ADCConv,w
  5605  010D  00F9               	movwf	?___awtoft
  5606  010E  0851               	movf	??_ADCConv+1,w
  5607  010F  00FA               	movwf	?___awtoft+1
  5608  0110  318F  2752  3180   	fcall	___awtoft
  5609  0113  0879               	movf	?___awtoft,w
  5610  0114  0020               	movlb	0	; select bank0
  5611  0115  00A6               	movwf	?___ftmul+3
  5612  0116  087A               	movf	?___awtoft+1,w
  5613  0117  00A7               	movwf	?___ftmul+4
  5614  0118  087B               	movf	?___awtoft+2,w
  5615  0119  00A8               	movwf	?___ftmul+5
  5616  011A  3183  2341  3180   	fcall	___ftmul
  5617  011D  0020               	movlb	0	; select bank0
  5618  011E  0823               	movf	?___ftmul,w
  5619  011F  00D6               	movwf	_ADCConv$1367
  5620  0120  0824               	movf	?___ftmul+1,w
  5621  0121  00D7               	movwf	_ADCConv$1367+1
  5622  0122  0825               	movf	?___ftmul+2,w
  5623  0123  00D8               	movwf	_ADCConv$1367+2
  5624                           
  5625                           ;ADC.c: 106: tempC=((temp*4)*(battV/1024)*1000-968)/2.47;
  5626  0124  3014               	movlw	20
  5627  0125  00B3               	movwf	?___ftdiv
  5628  0126  301E               	movlw	30
  5629  0127  00B4               	movwf	?___ftdiv+1
  5630  0128  3040               	movlw	64
  5631  0129  00B5               	movwf	?___ftdiv+2
  5632  012A  3000               	movlw	0
  5633  012B  00C3               	movwf	?___ftadd
  5634  012C  3072               	movlw	114
  5635  012D  00C4               	movwf	?___ftadd+1
  5636  012E  30C4               	movlw	196
  5637  012F  00C5               	movwf	?___ftadd+2
  5638  0130  3000               	movlw	0
  5639  0131  00A3               	movwf	?___ftmul
  5640  0132  307A               	movlw	122
  5641  0133  00A4               	movwf	?___ftmul+1
  5642  0134  3044               	movlw	68
  5643  0135  00A5               	movwf	?___ftmul+2
  5644  0136  0856               	movf	_ADCConv$1367,w
  5645  0137  00A6               	movwf	?___ftmul+3
  5646  0138  0857               	movf	_ADCConv$1367+1,w
  5647  0139  00A7               	movwf	?___ftmul+4
  5648  013A  0858               	movf	_ADCConv$1367+2,w
  5649  013B  00A8               	movwf	?___ftmul+5
  5650  013C  3183  2341  3180   	fcall	___ftmul
  5651  013F  0020               	movlb	0	; select bank0
  5652  0140  0823               	movf	?___ftmul,w
  5653  0141  00C6               	movwf	?___ftadd+3
  5654  0142  0824               	movf	?___ftmul+1,w
  5655  0143  00C7               	movwf	?___ftadd+4
  5656  0144  0825               	movf	?___ftmul+2,w
  5657  0145  00C8               	movwf	?___ftadd+5
  5658  0146  3181  218D  3180   	fcall	___ftadd
  5659  0149  0020               	movlb	0	; select bank0
  5660  014A  0843               	movf	?___ftadd,w
  5661  014B  00B6               	movwf	?___ftdiv+3
  5662  014C  0844               	movf	?___ftadd+1,w
  5663  014D  00B7               	movwf	?___ftdiv+4
  5664  014E  0845               	movf	?___ftadd+2,w
  5665  014F  00B8               	movwf	?___ftdiv+5
  5666  0150  3183  23F5         	fcall	___ftdiv
  5667  0152  0020               	movlb	0	; select bank0
  5668  0153  0833               	movf	?___ftdiv,w
  5669  0154  0021               	movlb	1	; select bank1
  5670  0155  00A3               	movwf	_tempC^(0+128)
  5671  0156  0020               	movlb	0	; select bank0
  5672  0157  0834               	movf	?___ftdiv+1,w
  5673  0158  0021               	movlb	1	; select bank1
  5674  0159  00A4               	movwf	(_tempC+1)^(0+128)
  5675  015A  0020               	movlb	0	; select bank0
  5676  015B  0835               	movf	?___ftdiv+2,w
  5677  015C  0021               	movlb	1	; select bank1
  5678  015D  00A5               	movwf	(_tempC+2)^(0+128)
  5679                           
  5680                           ;ADC.c: 108: sumTemp=0;
  5681  015E  0020               	movlb	0	; select bank0
  5682  015F  01D4               	clrf	ADCConv@sumTemp
  5683  0160  01D5               	clrf	ADCConv@sumTemp+1
  5684                           
  5685                           ;ADC.c: 110: cntSum=0;
  5686  0161  01D9               	clrf	ADCConv@cntSum
  5687                           
  5688                           ;ADC.c: 112: ADCON1=0b00000011;
  5689  0162  3003               	movlw	3
  5690  0163  0021               	movlb	1	; select bank1
  5691  0164  009E               	movwf	30	;volatile
  5692                           
  5693                           ;ADC.c: 113: ADCON0=0b00101101;
  5694  0165  302D               	movlw	45
  5695  0166  009D               	movwf	29	;volatile
  5696                           
  5697                           ;ADC.c: 114: adc_ch=ADC_CH_BATT;
  5698  0167  01A8               	clrf	_adc_ch^(0+128)
  5699                           
  5700                           ;ADC.c: 116: return;
  5701  0168  0008               	return
  5702  0169                     l3312:	
  5703                           ;ADC.c: 117: }
  5704                           
  5705                           
  5706                           ;ADC.c: 118: else
  5707                           ;ADC.c: 119: {
  5708                           ;ADC.c: 121: sumTemp+=ADRESH;
  5709  0169  0021               	movlb	1	; select bank1
  5710  016A  081C               	movf	28,w	;volatile
  5711  016B  0020               	movlb	0	; select bank0
  5712  016C  00D0               	movwf	??_ADCConv
  5713  016D  01D1               	clrf	??_ADCConv+1
  5714  016E  0850               	movf	??_ADCConv,w
  5715  016F  07D4               	addwf	ADCConv@sumTemp,f
  5716  0170  0851               	movf	??_ADCConv+1,w
  5717  0171  3DD5               	addwfc	ADCConv@sumTemp+1,f
  5718                           
  5719                           ;ADC.c: 123: cntSum++;
  5720  0172  3001               	movlw	1
  5721  0173  00D0               	movwf	??_ADCConv
  5722  0174  0850               	movf	??_ADCConv,w
  5723  0175  07D9               	addwf	ADCConv@cntSum,f
  5724                           
  5725                           ;ADC.c: 124: }
  5726                           ;ADC.c: 126: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5727  0176  3006               	movlw	6
  5728  0177  0020               	movlb	0	; select bank0
  5729  0178  00D0               	movwf	??_ADCConv
  5730  0179                     u3537:	
  5731  0179  0BD0               	decfsz	??_ADCConv,f
  5732  017A  2979               	goto	u3537
  5733  017B  0000               	nop
  5734  017C                     l3318:	
  5735                           
  5736                           ;ADC.c: 128: ADCON0bits.GO=1;
  5737  017C  0021               	movlb	1	; select bank1
  5738  017D  149D               	bsf	29,1	;volatile
  5739                           
  5740                           ;ADC.c: 130: }
  5741                           
  5742                           ;ADC.c: 129: break;
  5743  017E  2988               	goto	l124
  5744  017F                     l3322:	
  5745  017F  0021               	movlb	1	; select bank1
  5746  0180  0828               	movf	_adc_ch^(0+128),w
  5747                           
  5748                           ; Switch size 1, requested type "space"
  5749                           ; Number of cases is 2, Range of values is 0 to 1
  5750                           ; switch strategies available:
  5751                           ; Name         Instructions Cycles
  5752                           ; simple_byte            7     4 (average)
  5753                           ; direct_byte           10     6 (fixed)
  5754                           ; jumptable            260     6 (fixed)
  5755                           ;	Chosen strategy is simple_byte
  5756  0181  3A00               	xorlw	0	; case 0
  5757  0182  1903               	skipnz
  5758  0183  2848               	goto	l116
  5759  0184  3A01               	xorlw	1	; case 1
  5760  0185  1903               	skipnz
  5761  0186  28CF               	goto	l120
  5762  0187  2988               	goto	l124
  5763  0188                     l124:	
  5764                           ;ADC.c: 132: while(ADCON0bits.GO)
  5765                           
  5766  0188  0021               	movlb	1	; select bank1
  5767  0189  1C9D               	btfss	29,1	;volatile
  5768  018A  297F               	goto	l3322
  5769  018B  0064               	clrwdt	;# 
  5770  018C  2988               	goto	l124
  5771  018D                     __end_of_ADCConv:	
  5772                           
  5773                           	psect	text29
  5774  06EA                     __ptext29:	
  5775 ;; *************** function ___lwdiv *****************
  5776 ;; Defined at:
  5777 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  divisor         2    1[COMMON] unsigned int 
  5780 ;;  dividend        2    3[COMMON] unsigned int 
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;  quotient        2    6[COMMON] unsigned int 
  5783 ;;  counter         1    8[COMMON] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  2    1[COMMON] unsigned int 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5793 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5795 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;Total ram usage:        8 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; Hardware stack levels required when called:    2
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_ADCConv
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           
  5808                           ;psect for function ___lwdiv
  5809  06EA                     ___lwdiv:	
  5810                           
  5811                           ;incstack = 0
  5812                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5813  06EA  01F6               	clrf	___lwdiv@quotient
  5814  06EB  01F7               	clrf	___lwdiv@quotient+1
  5815  06EC  0872               	movf	___lwdiv@divisor+1,w
  5816  06ED  0471               	iorwf	___lwdiv@divisor,w
  5817  06EE  1903               	skipnz
  5818  06EF  2F19               	goto	l3212
  5819  06F0  01F8               	clrf	___lwdiv@counter
  5820  06F1  0AF8               	incf	___lwdiv@counter,f
  5821  06F2                     l3200:	
  5822  06F2  1BF2               	btfsc	___lwdiv@divisor+1,7
  5823  06F3  2EFE               	goto	l3202
  5824  06F4  3001               	movlw	1
  5825  06F5                     u2505:	
  5826  06F5  35F1               	lslf	___lwdiv@divisor,f
  5827  06F6  0DF2               	rlf	___lwdiv@divisor+1,f
  5828  06F7  0B89               	decfsz	9,f
  5829  06F8  2EF5               	goto	u2505
  5830  06F9  3001               	movlw	1
  5831  06FA  00F5               	movwf	??___lwdiv
  5832  06FB  0875               	movf	??___lwdiv,w
  5833  06FC  07F8               	addwf	___lwdiv@counter,f
  5834  06FD  2EF2               	goto	l3200
  5835  06FE                     l3202:	
  5836  06FE  3001               	movlw	1
  5837  06FF                     u2525:	
  5838  06FF  35F6               	lslf	___lwdiv@quotient,f
  5839  0700  0DF7               	rlf	___lwdiv@quotient+1,f
  5840  0701  0B89               	decfsz	9,f
  5841  0702  2EFF               	goto	u2525
  5842  0703  0872               	movf	___lwdiv@divisor+1,w
  5843  0704  0274               	subwf	___lwdiv@dividend+1,w
  5844  0705  1D03               	skipz
  5845  0706  2F09               	goto	u2535
  5846  0707  0871               	movf	___lwdiv@divisor,w
  5847  0708  0273               	subwf	___lwdiv@dividend,w
  5848  0709                     u2535:	
  5849  0709  1C03               	skipc
  5850  070A  2F10               	goto	l3208
  5851  070B  0871               	movf	___lwdiv@divisor,w
  5852  070C  02F3               	subwf	___lwdiv@dividend,f
  5853  070D  0872               	movf	___lwdiv@divisor+1,w
  5854  070E  3BF4               	subwfb	___lwdiv@dividend+1,f
  5855  070F  1476               	bsf	___lwdiv@quotient,0
  5856  0710                     l3208:	
  5857  0710  3001               	movlw	1
  5858  0711                     u2545:	
  5859  0711  36F2               	lsrf	___lwdiv@divisor+1,f
  5860  0712  0CF1               	rrf	___lwdiv@divisor,f
  5861  0713  0B89               	decfsz	9,f
  5862  0714  2F11               	goto	u2545
  5863  0715  3001               	movlw	1
  5864  0716  02F8               	subwf	___lwdiv@counter,f
  5865  0717  1D03               	btfss	3,2
  5866  0718  2EFE               	goto	l3202
  5867  0719                     l3212:	
  5868  0719  0877               	movf	___lwdiv@quotient+1,w
  5869  071A  01F2               	clrf	?___lwdiv+1
  5870  071B  07F2               	addwf	?___lwdiv+1,f
  5871  071C  0876               	movf	___lwdiv@quotient,w
  5872  071D  01F1               	clrf	?___lwdiv
  5873  071E  07F1               	addwf	?___lwdiv,f
  5874  071F  0008               	return
  5875  0720                     __end_of___lwdiv:	
  5876                           
  5877                           	psect	text30
  5878  0341                     __ptext30:	
  5879 ;; *************** function ___ftmul *****************
  5880 ;; Defined at:
  5881 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  f1              3    3[BANK0 ] float 
  5884 ;;  f2              3    6[BANK0 ] float 
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  f3_as_produc    3   14[BANK0 ] unsigned um
  5887 ;;  sign            1   18[BANK0 ] unsigned char 
  5888 ;;  cntr            1   17[BANK0 ] unsigned char 
  5889 ;;  exp             1   13[BANK0 ] unsigned char 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  3    3[BANK0 ] float 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, pclath, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:       16 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:    3
  5906 ;; This function calls:
  5907 ;;		___ftpack
  5908 ;; This function is called by:
  5909 ;;		_ADCConv
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           
  5914                           ;psect for function ___ftmul
  5915  0341                     ___ftmul:	
  5916                           
  5917                           ;incstack = 0
  5918                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5919  0341  0020               	movlb	0	; select bank0
  5920  0342  0823               	movf	___ftmul@f1,w
  5921  0343  00A9               	movwf	??___ftmul
  5922  0344  0824               	movf	___ftmul@f1+1,w
  5923  0345  00AA               	movwf	??___ftmul+1
  5924  0346  0825               	movf	___ftmul@f1+2,w
  5925  0347  00AB               	movwf	??___ftmul+2
  5926  0348  1003               	clrc
  5927  0349  0D2A               	rlf	??___ftmul+1,w
  5928  034A  0D2B               	rlf	??___ftmul+2,w
  5929  034B  00AC               	movwf	??___ftmul+3
  5930  034C  082C               	movf	??___ftmul+3,w
  5931  034D  00AD               	movwf	___ftmul@exp
  5932  034E  08AD               	movf	___ftmul@exp,f
  5933  034F  1D03               	skipz
  5934  0350  2B58               	goto	l3866
  5935  0351  3000               	movlw	0
  5936  0352  00A3               	movwf	?___ftmul
  5937  0353  3000               	movlw	0
  5938  0354  00A4               	movwf	?___ftmul+1
  5939  0355  3000               	movlw	0
  5940  0356  00A5               	movwf	?___ftmul+2
  5941  0357  0008               	return
  5942  0358                     l3866:	
  5943  0358  0826               	movf	___ftmul@f2,w
  5944  0359  00A9               	movwf	??___ftmul
  5945  035A  0827               	movf	___ftmul@f2+1,w
  5946  035B  00AA               	movwf	??___ftmul+1
  5947  035C  0828               	movf	___ftmul@f2+2,w
  5948  035D  00AB               	movwf	??___ftmul+2
  5949  035E  1003               	clrc
  5950  035F  0D2A               	rlf	??___ftmul+1,w
  5951  0360  0D2B               	rlf	??___ftmul+2,w
  5952  0361  00AC               	movwf	??___ftmul+3
  5953  0362  082C               	movf	??___ftmul+3,w
  5954  0363  00B2               	movwf	___ftmul@sign
  5955  0364  08B2               	movf	___ftmul@sign,f
  5956  0365  1D03               	skipz
  5957  0366  2B6E               	goto	l3872
  5958  0367  3000               	movlw	0
  5959  0368  00A3               	movwf	?___ftmul
  5960  0369  3000               	movlw	0
  5961  036A  00A4               	movwf	?___ftmul+1
  5962  036B  3000               	movlw	0
  5963  036C  00A5               	movwf	?___ftmul+2
  5964  036D  0008               	return
  5965  036E                     l3872:	
  5966  036E  0832               	movf	___ftmul@sign,w
  5967  036F  3E7B               	addlw	123
  5968  0370  00A9               	movwf	??___ftmul
  5969  0371  0829               	movf	??___ftmul,w
  5970  0372  07AD               	addwf	___ftmul@exp,f
  5971  0373  0823               	movf	___ftmul@f1,w
  5972  0374  00A9               	movwf	??___ftmul
  5973  0375  0824               	movf	___ftmul@f1+1,w
  5974  0376  00AA               	movwf	??___ftmul+1
  5975  0377  0825               	movf	___ftmul@f1+2,w
  5976  0378  00AB               	movwf	??___ftmul+2
  5977  0379  3010               	movlw	16
  5978  037A                     u3425:	
  5979  037A  36AB               	lsrf	??___ftmul+2,f
  5980  037B  0CAA               	rrf	??___ftmul+1,f
  5981  037C  0CA9               	rrf	??___ftmul,f
  5982  037D  0B89               	decfsz	9,f
  5983  037E  2B7A               	goto	u3425
  5984  037F  0829               	movf	??___ftmul,w
  5985  0380  00AC               	movwf	??___ftmul+3
  5986  0381  082C               	movf	??___ftmul+3,w
  5987  0382  00B2               	movwf	___ftmul@sign
  5988  0383  0826               	movf	___ftmul@f2,w
  5989  0384  00A9               	movwf	??___ftmul
  5990  0385  0827               	movf	___ftmul@f2+1,w
  5991  0386  00AA               	movwf	??___ftmul+1
  5992  0387  0828               	movf	___ftmul@f2+2,w
  5993  0388  00AB               	movwf	??___ftmul+2
  5994  0389  3010               	movlw	16
  5995  038A                     u3435:	
  5996  038A  36AB               	lsrf	??___ftmul+2,f
  5997  038B  0CAA               	rrf	??___ftmul+1,f
  5998  038C  0CA9               	rrf	??___ftmul,f
  5999  038D  0B89               	decfsz	9,f
  6000  038E  2B8A               	goto	u3435
  6001  038F  0829               	movf	??___ftmul,w
  6002  0390  00AC               	movwf	??___ftmul+3
  6003  0391  082C               	movf	??___ftmul+3,w
  6004  0392  06B2               	xorwf	___ftmul@sign,f
  6005  0393  3080               	movlw	128
  6006  0394  00A9               	movwf	??___ftmul
  6007  0395  0829               	movf	??___ftmul,w
  6008  0396  05B2               	andwf	___ftmul@sign,f
  6009  0397  17A4               	bsf	___ftmul@f1+1,7
  6010  0398  17A7               	bsf	___ftmul@f2+1,7
  6011  0399  30FF               	movlw	255
  6012  039A  05A6               	andwf	___ftmul@f2,f
  6013  039B  30FF               	movlw	255
  6014  039C  05A7               	andwf	___ftmul@f2+1,f
  6015  039D  3000               	movlw	0
  6016  039E  05A8               	andwf	___ftmul@f2+2,f
  6017  039F  3000               	movlw	0
  6018  03A0  00AE               	movwf	___ftmul@f3_as_product
  6019  03A1  3000               	movlw	0
  6020  03A2  00AF               	movwf	___ftmul@f3_as_product+1
  6021  03A3  3000               	movlw	0
  6022  03A4  00B0               	movwf	___ftmul@f3_as_product+2
  6023  03A5  3007               	movlw	7
  6024  03A6  00A9               	movwf	??___ftmul
  6025  03A7  0829               	movf	??___ftmul,w
  6026  03A8  00B1               	movwf	___ftmul@cntr
  6027  03A9                     l3884:	
  6028  03A9  1C23               	btfss	___ftmul@f1,0
  6029  03AA  2BB1               	goto	l3888
  6030  03AB  0826               	movf	___ftmul@f2,w
  6031  03AC  07AE               	addwf	___ftmul@f3_as_product,f
  6032  03AD  0827               	movf	___ftmul@f2+1,w
  6033  03AE  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  6034  03AF  0828               	movf	___ftmul@f2+2,w
  6035  03B0  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  6036  03B1                     l3888:	
  6037  03B1  3001               	movlw	1
  6038  03B2                     u3455:	
  6039  03B2  36A5               	lsrf	___ftmul@f1+2,f
  6040  03B3  0CA4               	rrf	___ftmul@f1+1,f
  6041  03B4  0CA3               	rrf	___ftmul@f1,f
  6042  03B5  0B89               	decfsz	9,f
  6043  03B6  2BB2               	goto	u3455
  6044  03B7  3001               	movlw	1
  6045  03B8                     u3465:	
  6046  03B8  35A6               	lslf	___ftmul@f2,f
  6047  03B9  0DA7               	rlf	___ftmul@f2+1,f
  6048  03BA  0DA8               	rlf	___ftmul@f2+2,f
  6049  03BB  0B89               	decfsz	9,f
  6050  03BC  2BB8               	goto	u3465
  6051  03BD  3001               	movlw	1
  6052  03BE  02B1               	subwf	___ftmul@cntr,f
  6053  03BF  1D03               	btfss	3,2
  6054  03C0  2BA9               	goto	l3884
  6055  03C1  3009               	movlw	9
  6056  03C2  00A9               	movwf	??___ftmul
  6057  03C3  0829               	movf	??___ftmul,w
  6058  03C4  00B1               	movwf	___ftmul@cntr
  6059  03C5                     l3896:	
  6060  03C5  1C23               	btfss	___ftmul@f1,0
  6061  03C6  2BCD               	goto	l3900
  6062  03C7  0826               	movf	___ftmul@f2,w
  6063  03C8  07AE               	addwf	___ftmul@f3_as_product,f
  6064  03C9  0827               	movf	___ftmul@f2+1,w
  6065  03CA  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  6066  03CB  0828               	movf	___ftmul@f2+2,w
  6067  03CC  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  6068  03CD                     l3900:	
  6069  03CD  3001               	movlw	1
  6070  03CE                     u3495:	
  6071  03CE  36A5               	lsrf	___ftmul@f1+2,f
  6072  03CF  0CA4               	rrf	___ftmul@f1+1,f
  6073  03D0  0CA3               	rrf	___ftmul@f1,f
  6074  03D1  0B89               	decfsz	9,f
  6075  03D2  2BCE               	goto	u3495
  6076  03D3  3001               	movlw	1
  6077  03D4                     u3505:	
  6078  03D4  36B0               	lsrf	___ftmul@f3_as_product+2,f
  6079  03D5  0CAF               	rrf	___ftmul@f3_as_product+1,f
  6080  03D6  0CAE               	rrf	___ftmul@f3_as_product,f
  6081  03D7  0B89               	decfsz	9,f
  6082  03D8  2BD4               	goto	u3505
  6083  03D9  3001               	movlw	1
  6084  03DA  02B1               	subwf	___ftmul@cntr,f
  6085  03DB  1D03               	btfss	3,2
  6086  03DC  2BC5               	goto	l3896
  6087  03DD  082E               	movf	___ftmul@f3_as_product,w
  6088  03DE  00F1               	movwf	?___ftpack
  6089  03DF  082F               	movf	___ftmul@f3_as_product+1,w
  6090  03E0  00F2               	movwf	?___ftpack+1
  6091  03E1  0830               	movf	___ftmul@f3_as_product+2,w
  6092  03E2  00F3               	movwf	?___ftpack+2
  6093  03E3  082D               	movf	___ftmul@exp,w
  6094  03E4  00A9               	movwf	??___ftmul
  6095  03E5  0829               	movf	??___ftmul,w
  6096  03E6  00F4               	movwf	?___ftpack+3
  6097  03E7  0832               	movf	___ftmul@sign,w
  6098  03E8  00AA               	movwf	??___ftmul+1
  6099  03E9  082A               	movf	??___ftmul+1,w
  6100  03EA  00F5               	movwf	?___ftpack+4
  6101  03EB  3185  2589         	fcall	___ftpack
  6102  03ED  0871               	movf	?___ftpack,w
  6103  03EE  0020               	movlb	0	; select bank0
  6104  03EF  00A3               	movwf	?___ftmul
  6105  03F0  0872               	movf	?___ftpack+1,w
  6106  03F1  00A4               	movwf	?___ftmul+1
  6107  03F2  0873               	movf	?___ftpack+2,w
  6108  03F3  00A5               	movwf	?___ftmul+2
  6109  03F4  0008               	return
  6110  03F5                     __end_of___ftmul:	
  6111                           
  6112                           	psect	text31
  6113  03F5                     __ptext31:	
  6114 ;; *************** function ___ftdiv *****************
  6115 ;; Defined at:
  6116 ;;		line 50 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftdiv.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  f2              3   19[BANK0 ] float 
  6119 ;;  f1              3   22[BANK0 ] float 
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  f3              3   30[BANK0 ] float 
  6122 ;;  sign            1   34[BANK0 ] unsigned char 
  6123 ;;  exp             1   33[BANK0 ] unsigned char 
  6124 ;;  cntr            1   29[BANK0 ] unsigned char 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;                  3   19[BANK0 ] float 
  6127 ;; Registers used:
  6128 ;;		wreg, status,2, status,0, pclath, cstack
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6134 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;Total ram usage:       16 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    3
  6141 ;; This function calls:
  6142 ;;		___ftpack
  6143 ;; This function is called by:
  6144 ;;		_ADCConv
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           
  6149                           ;psect for function ___ftdiv
  6150  03F5                     ___ftdiv:	
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6154  03F5  0020               	movlb	0	; select bank0
  6155  03F6  0836               	movf	___ftdiv@f1,w
  6156  03F7  00B9               	movwf	??___ftdiv
  6157  03F8  0837               	movf	___ftdiv@f1+1,w
  6158  03F9  00BA               	movwf	??___ftdiv+1
  6159  03FA  0838               	movf	___ftdiv@f1+2,w
  6160  03FB  00BB               	movwf	??___ftdiv+2
  6161  03FC  1003               	clrc
  6162  03FD  0D3A               	rlf	??___ftdiv+1,w
  6163  03FE  0D3B               	rlf	??___ftdiv+2,w
  6164  03FF  00BC               	movwf	??___ftdiv+3
  6165  0400  083C               	movf	??___ftdiv+3,w
  6166  0401  00C1               	movwf	___ftdiv@exp
  6167  0402  08C1               	movf	___ftdiv@exp,f
  6168  0403  1D03               	skipz
  6169  0404  2C0C               	goto	l3824
  6170  0405  3000               	movlw	0
  6171  0406  00B3               	movwf	?___ftdiv
  6172  0407  3000               	movlw	0
  6173  0408  00B4               	movwf	?___ftdiv+1
  6174  0409  3000               	movlw	0
  6175  040A  00B5               	movwf	?___ftdiv+2
  6176  040B  0008               	return
  6177  040C                     l3824:	
  6178  040C  0833               	movf	___ftdiv@f2,w
  6179  040D  00B9               	movwf	??___ftdiv
  6180  040E  0834               	movf	___ftdiv@f2+1,w
  6181  040F  00BA               	movwf	??___ftdiv+1
  6182  0410  0835               	movf	___ftdiv@f2+2,w
  6183  0411  00BB               	movwf	??___ftdiv+2
  6184  0412  1003               	clrc
  6185  0413  0D3A               	rlf	??___ftdiv+1,w
  6186  0414  0D3B               	rlf	??___ftdiv+2,w
  6187  0415  00BC               	movwf	??___ftdiv+3
  6188  0416  083C               	movf	??___ftdiv+3,w
  6189  0417  00C2               	movwf	___ftdiv@sign
  6190  0418  08C2               	movf	___ftdiv@sign,f
  6191  0419  1D03               	skipz
  6192  041A  2C22               	goto	l3830
  6193  041B  3000               	movlw	0
  6194  041C  00B3               	movwf	?___ftdiv
  6195  041D  3000               	movlw	0
  6196  041E  00B4               	movwf	?___ftdiv+1
  6197  041F  3000               	movlw	0
  6198  0420  00B5               	movwf	?___ftdiv+2
  6199  0421  0008               	return
  6200  0422                     l3830:	
  6201  0422  3000               	movlw	0
  6202  0423  00BE               	movwf	___ftdiv@f3
  6203  0424  3000               	movlw	0
  6204  0425  00BF               	movwf	___ftdiv@f3+1
  6205  0426  3000               	movlw	0
  6206  0427  00C0               	movwf	___ftdiv@f3+2
  6207  0428  3089               	movlw	137
  6208  0429  0742               	addwf	___ftdiv@sign,w
  6209  042A  00B9               	movwf	??___ftdiv
  6210  042B  0839               	movf	??___ftdiv,w
  6211  042C  02C1               	subwf	___ftdiv@exp,f
  6212  042D  0836               	movf	___ftdiv@f1,w
  6213  042E  00B9               	movwf	??___ftdiv
  6214  042F  0837               	movf	___ftdiv@f1+1,w
  6215  0430  00BA               	movwf	??___ftdiv+1
  6216  0431  0838               	movf	___ftdiv@f1+2,w
  6217  0432  00BB               	movwf	??___ftdiv+2
  6218  0433  3010               	movlw	16
  6219  0434                     u3345:	
  6220  0434  36BB               	lsrf	??___ftdiv+2,f
  6221  0435  0CBA               	rrf	??___ftdiv+1,f
  6222  0436  0CB9               	rrf	??___ftdiv,f
  6223  0437  0B89               	decfsz	9,f
  6224  0438  2C34               	goto	u3345
  6225  0439  0839               	movf	??___ftdiv,w
  6226  043A  00BC               	movwf	??___ftdiv+3
  6227  043B  083C               	movf	??___ftdiv+3,w
  6228  043C  00C2               	movwf	___ftdiv@sign
  6229  043D  0833               	movf	___ftdiv@f2,w
  6230  043E  00B9               	movwf	??___ftdiv
  6231  043F  0834               	movf	___ftdiv@f2+1,w
  6232  0440  00BA               	movwf	??___ftdiv+1
  6233  0441  0835               	movf	___ftdiv@f2+2,w
  6234  0442  00BB               	movwf	??___ftdiv+2
  6235  0443  3010               	movlw	16
  6236  0444                     u3355:	
  6237  0444  36BB               	lsrf	??___ftdiv+2,f
  6238  0445  0CBA               	rrf	??___ftdiv+1,f
  6239  0446  0CB9               	rrf	??___ftdiv,f
  6240  0447  0B89               	decfsz	9,f
  6241  0448  2C44               	goto	u3355
  6242  0449  0839               	movf	??___ftdiv,w
  6243  044A  00BC               	movwf	??___ftdiv+3
  6244  044B  083C               	movf	??___ftdiv+3,w
  6245  044C  06C2               	xorwf	___ftdiv@sign,f
  6246  044D  3080               	movlw	128
  6247  044E  00B9               	movwf	??___ftdiv
  6248  044F  0839               	movf	??___ftdiv,w
  6249  0450  05C2               	andwf	___ftdiv@sign,f
  6250  0451  17B7               	bsf	___ftdiv@f1+1,7
  6251  0452  30FF               	movlw	255
  6252  0453  05B6               	andwf	___ftdiv@f1,f
  6253  0454  30FF               	movlw	255
  6254  0455  05B7               	andwf	___ftdiv@f1+1,f
  6255  0456  3000               	movlw	0
  6256  0457  05B8               	andwf	___ftdiv@f1+2,f
  6257  0458  17B4               	bsf	___ftdiv@f2+1,7
  6258  0459  30FF               	movlw	255
  6259  045A  05B3               	andwf	___ftdiv@f2,f
  6260  045B  30FF               	movlw	255
  6261  045C  05B4               	andwf	___ftdiv@f2+1,f
  6262  045D  3000               	movlw	0
  6263  045E  05B5               	andwf	___ftdiv@f2+2,f
  6264  045F  3018               	movlw	24
  6265  0460  00B9               	movwf	??___ftdiv
  6266  0461  0839               	movf	??___ftdiv,w
  6267  0462  00BD               	movwf	___ftdiv@cntr
  6268  0463                     l3844:	
  6269  0463  3001               	movlw	1
  6270  0464                     u3365:	
  6271  0464  35BE               	lslf	___ftdiv@f3,f
  6272  0465  0DBF               	rlf	___ftdiv@f3+1,f
  6273  0466  0DC0               	rlf	___ftdiv@f3+2,f
  6274  0467  0B89               	decfsz	9,f
  6275  0468  2C64               	goto	u3365
  6276  0469  0835               	movf	___ftdiv@f2+2,w
  6277  046A  0238               	subwf	___ftdiv@f1+2,w
  6278  046B  1D03               	skipz
  6279  046C  2C73               	goto	u3375
  6280  046D  0834               	movf	___ftdiv@f2+1,w
  6281  046E  0237               	subwf	___ftdiv@f1+1,w
  6282  046F  1D03               	skipz
  6283  0470  2C73               	goto	u3375
  6284  0471  0833               	movf	___ftdiv@f2,w
  6285  0472  0236               	subwf	___ftdiv@f1,w
  6286  0473                     u3375:	
  6287  0473  1C03               	skipc
  6288  0474  2C7C               	goto	l3852
  6289  0475  0833               	movf	___ftdiv@f2,w
  6290  0476  02B6               	subwf	___ftdiv@f1,f
  6291  0477  0834               	movf	___ftdiv@f2+1,w
  6292  0478  3BB7               	subwfb	___ftdiv@f1+1,f
  6293  0479  0835               	movf	___ftdiv@f2+2,w
  6294  047A  3BB8               	subwfb	___ftdiv@f1+2,f
  6295  047B  143E               	bsf	___ftdiv@f3,0
  6296  047C                     l3852:	
  6297  047C  3001               	movlw	1
  6298  047D                     u3385:	
  6299  047D  35B6               	lslf	___ftdiv@f1,f
  6300  047E  0DB7               	rlf	___ftdiv@f1+1,f
  6301  047F  0DB8               	rlf	___ftdiv@f1+2,f
  6302  0480  0B89               	decfsz	9,f
  6303  0481  2C7D               	goto	u3385
  6304  0482  3001               	movlw	1
  6305  0483  02BD               	subwf	___ftdiv@cntr,f
  6306  0484  1D03               	btfss	3,2
  6307  0485  2C63               	goto	l3844
  6308  0486  083E               	movf	___ftdiv@f3,w
  6309  0487  00F1               	movwf	?___ftpack
  6310  0488  083F               	movf	___ftdiv@f3+1,w
  6311  0489  00F2               	movwf	?___ftpack+1
  6312  048A  0840               	movf	___ftdiv@f3+2,w
  6313  048B  00F3               	movwf	?___ftpack+2
  6314  048C  0841               	movf	___ftdiv@exp,w
  6315  048D  00B9               	movwf	??___ftdiv
  6316  048E  0839               	movf	??___ftdiv,w
  6317  048F  00F4               	movwf	?___ftpack+3
  6318  0490  0842               	movf	___ftdiv@sign,w
  6319  0491  00BA               	movwf	??___ftdiv+1
  6320  0492  083A               	movf	??___ftdiv+1,w
  6321  0493  00F5               	movwf	?___ftpack+4
  6322  0494  3185  2589         	fcall	___ftpack
  6323  0496  0871               	movf	?___ftpack,w
  6324  0497  0020               	movlb	0	; select bank0
  6325  0498  00B3               	movwf	?___ftdiv
  6326  0499  0872               	movf	?___ftpack+1,w
  6327  049A  00B4               	movwf	?___ftdiv+1
  6328  049B  0873               	movf	?___ftpack+2,w
  6329  049C  00B5               	movwf	?___ftdiv+2
  6330  049D  0008               	return
  6331  049E                     __end_of___ftdiv:	
  6332                           
  6333                           	psect	text32
  6334  018D                     __ptext32:	
  6335 ;; *************** function ___ftadd *****************
  6336 ;; Defined at:
  6337 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;  f1              3   35[BANK0 ] float 
  6340 ;;  f2              3   38[BANK0 ] float 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  exp1            1   47[BANK0 ] unsigned char 
  6343 ;;  exp2            1   46[BANK0 ] unsigned char 
  6344 ;;  sign            1   45[BANK0 ] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  3   35[BANK0 ] float 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0, pclath, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;Total ram usage:       13 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    3
  6361 ;; This function calls:
  6362 ;;		___ftpack
  6363 ;; This function is called by:
  6364 ;;		_ADCConv
  6365 ;;		_RTXSendData
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           
  6370                           ;psect for function ___ftadd
  6371  018D                     ___ftadd:	
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6375  018D  0020               	movlb	0	; select bank0
  6376  018E  0843               	movf	___ftadd@f1,w
  6377  018F  00C9               	movwf	??___ftadd
  6378  0190  0844               	movf	___ftadd@f1+1,w
  6379  0191  00CA               	movwf	??___ftadd+1
  6380  0192  0845               	movf	___ftadd@f1+2,w
  6381  0193  00CB               	movwf	??___ftadd+2
  6382  0194  1003               	clrc
  6383  0195  0D4A               	rlf	??___ftadd+1,w
  6384  0196  0D4B               	rlf	??___ftadd+2,w
  6385  0197  00CC               	movwf	??___ftadd+3
  6386  0198  084C               	movf	??___ftadd+3,w
  6387  0199  00CF               	movwf	___ftadd@exp1
  6388  019A  0846               	movf	___ftadd@f2,w
  6389  019B  00C9               	movwf	??___ftadd
  6390  019C  0847               	movf	___ftadd@f2+1,w
  6391  019D  00CA               	movwf	??___ftadd+1
  6392  019E  0848               	movf	___ftadd@f2+2,w
  6393  019F  00CB               	movwf	??___ftadd+2
  6394  01A0  1003               	clrc
  6395  01A1  0D4A               	rlf	??___ftadd+1,w
  6396  01A2  0D4B               	rlf	??___ftadd+2,w
  6397  01A3  00CC               	movwf	??___ftadd+3
  6398  01A4  084C               	movf	??___ftadd+3,w
  6399  01A5  00CE               	movwf	___ftadd@exp2
  6400  01A6  084F               	movf	___ftadd@exp1,w
  6401  01A7  1903               	btfsc	3,2
  6402  01A8  29B5               	goto	l3754
  6403  01A9  084E               	movf	___ftadd@exp2,w
  6404  01AA  024F               	subwf	___ftadd@exp1,w
  6405  01AB  1803               	skipnc
  6406  01AC  29BC               	goto	l3758
  6407  01AD  034F               	decf	___ftadd@exp1,w
  6408  01AE  3AFF               	xorlw	255
  6409  01AF  074E               	addwf	___ftadd@exp2,w
  6410  01B0  00C9               	movwf	??___ftadd
  6411  01B1  3019               	movlw	25
  6412  01B2  0249               	subwf	??___ftadd,w
  6413  01B3  1C03               	skipc
  6414  01B4  29BC               	goto	l3758
  6415  01B5                     l3754:	
  6416  01B5  0846               	movf	___ftadd@f2,w
  6417  01B6  00C3               	movwf	?___ftadd
  6418  01B7  0847               	movf	___ftadd@f2+1,w
  6419  01B8  00C4               	movwf	?___ftadd+1
  6420  01B9  0848               	movf	___ftadd@f2+2,w
  6421  01BA  00C5               	movwf	?___ftadd+2
  6422  01BB  0008               	return
  6423  01BC                     l3758:	
  6424  01BC  084E               	movf	___ftadd@exp2,w
  6425  01BD  1903               	btfsc	3,2
  6426  01BE  0008               	return
  6427  01BF  084F               	movf	___ftadd@exp1,w
  6428  01C0  024E               	subwf	___ftadd@exp2,w
  6429  01C1  1803               	skipnc
  6430  01C2  29CB               	goto	l3764
  6431  01C3  034E               	decf	___ftadd@exp2,w
  6432  01C4  3AFF               	xorlw	255
  6433  01C5  074F               	addwf	___ftadd@exp1,w
  6434  01C6  00C9               	movwf	??___ftadd
  6435  01C7  3019               	movlw	25
  6436  01C8  0249               	subwf	??___ftadd,w
  6437  01C9  1803               	btfsc	3,0
  6438  01CA  0008               	return
  6439  01CB                     l3764:	
  6440  01CB  3006               	movlw	6
  6441  01CC  00C9               	movwf	??___ftadd
  6442  01CD  0849               	movf	??___ftadd,w
  6443  01CE  00CD               	movwf	___ftadd@sign
  6444  01CF  1BC5               	btfsc	___ftadd@f1+2,7
  6445  01D0  17CD               	bsf	___ftadd@sign,7
  6446  01D1  1BC8               	btfsc	___ftadd@f2+2,7
  6447  01D2  174D               	bsf	___ftadd@sign,6
  6448  01D3  17C4               	bsf	___ftadd@f1+1,7
  6449  01D4  30FF               	movlw	255
  6450  01D5  05C3               	andwf	___ftadd@f1,f
  6451  01D6  30FF               	movlw	255
  6452  01D7  05C4               	andwf	___ftadd@f1+1,f
  6453  01D8  3000               	movlw	0
  6454  01D9  05C5               	andwf	___ftadd@f1+2,f
  6455  01DA  17C7               	bsf	___ftadd@f2+1,7
  6456  01DB  30FF               	movlw	255
  6457  01DC  05C6               	andwf	___ftadd@f2,f
  6458  01DD  30FF               	movlw	255
  6459  01DE  05C7               	andwf	___ftadd@f2+1,f
  6460  01DF  3000               	movlw	0
  6461  01E0  05C8               	andwf	___ftadd@f2+2,f
  6462  01E1  084E               	movf	___ftadd@exp2,w
  6463  01E2  024F               	subwf	___ftadd@exp1,w
  6464  01E3  1803               	skipnc
  6465  01E4  2A07               	goto	l3786
  6466  01E5                     l3776:	
  6467  01E5  3001               	movlw	1
  6468  01E6                     u3185:	
  6469  01E6  35C6               	lslf	___ftadd@f2,f
  6470  01E7  0DC7               	rlf	___ftadd@f2+1,f
  6471  01E8  0DC8               	rlf	___ftadd@f2+2,f
  6472  01E9  0B89               	decfsz	9,f
  6473  01EA  29E6               	goto	u3185
  6474  01EB  3001               	movlw	1
  6475  01EC  02CE               	subwf	___ftadd@exp2,f
  6476  01ED  084E               	movf	___ftadd@exp2,w
  6477  01EE  064F               	xorwf	___ftadd@exp1,w
  6478  01EF  1903               	skipnz
  6479  01F0  2A02               	goto	l3784
  6480  01F1  3001               	movlw	1
  6481  01F2  02CD               	subwf	___ftadd@sign,f
  6482  01F3  084D               	movf	___ftadd@sign,w
  6483  01F4  3907               	andlw	7
  6484  01F5  1903               	btfsc	3,2
  6485  01F6  2A02               	goto	l3784
  6486  01F7  29E5               	goto	l3776
  6487  01F8                     l3782:	
  6488  01F8  3001               	movlw	1
  6489  01F9                     u3215:	
  6490  01F9  36C5               	lsrf	___ftadd@f1+2,f
  6491  01FA  0CC4               	rrf	___ftadd@f1+1,f
  6492  01FB  0CC3               	rrf	___ftadd@f1,f
  6493  01FC  0B89               	decfsz	9,f
  6494  01FD  29F9               	goto	u3215
  6495  01FE  3001               	movlw	1
  6496  01FF  00C9               	movwf	??___ftadd
  6497  0200  0849               	movf	??___ftadd,w
  6498  0201  07CF               	addwf	___ftadd@exp1,f
  6499  0202                     l3784:	
  6500  0202  084F               	movf	___ftadd@exp1,w
  6501  0203  064E               	xorwf	___ftadd@exp2,w
  6502  0204  1903               	btfsc	3,2
  6503  0205  2A2C               	goto	l857
  6504  0206  29F8               	goto	l3782
  6505  0207                     l3786:	
  6506  0207  084F               	movf	___ftadd@exp1,w
  6507  0208  024E               	subwf	___ftadd@exp2,w
  6508  0209  1803               	skipnc
  6509  020A  2A2C               	goto	l857
  6510  020B                     l3788:	
  6511  020B  3001               	movlw	1
  6512  020C                     u3245:	
  6513  020C  35C3               	lslf	___ftadd@f1,f
  6514  020D  0DC4               	rlf	___ftadd@f1+1,f
  6515  020E  0DC5               	rlf	___ftadd@f1+2,f
  6516  020F  0B89               	decfsz	9,f
  6517  0210  2A0C               	goto	u3245
  6518  0211  3001               	movlw	1
  6519  0212  02CF               	subwf	___ftadd@exp1,f
  6520  0213  084E               	movf	___ftadd@exp2,w
  6521  0214  064F               	xorwf	___ftadd@exp1,w
  6522  0215  1903               	skipnz
  6523  0216  2A28               	goto	l3796
  6524  0217  3001               	movlw	1
  6525  0218  02CD               	subwf	___ftadd@sign,f
  6526  0219  084D               	movf	___ftadd@sign,w
  6527  021A  3907               	andlw	7
  6528  021B  1903               	btfsc	3,2
  6529  021C  2A28               	goto	l3796
  6530  021D  2A0B               	goto	l3788
  6531  021E                     l3794:	
  6532  021E  3001               	movlw	1
  6533  021F                     u3275:	
  6534  021F  36C8               	lsrf	___ftadd@f2+2,f
  6535  0220  0CC7               	rrf	___ftadd@f2+1,f
  6536  0221  0CC6               	rrf	___ftadd@f2,f
  6537  0222  0B89               	decfsz	9,f
  6538  0223  2A1F               	goto	u3275
  6539  0224  3001               	movlw	1
  6540  0225  00C9               	movwf	??___ftadd
  6541  0226  0849               	movf	??___ftadd,w
  6542  0227  07CE               	addwf	___ftadd@exp2,f
  6543  0228                     l3796:	
  6544  0228  084F               	movf	___ftadd@exp1,w
  6545  0229  064E               	xorwf	___ftadd@exp2,w
  6546  022A  1D03               	skipz
  6547  022B  2A1E               	goto	l3794
  6548  022C                     l857:	
  6549  022C  1FCD               	btfss	___ftadd@sign,7
  6550  022D  2A3E               	goto	l3800
  6551  022E  30FF               	movlw	255
  6552  022F  06C3               	xorwf	___ftadd@f1,f
  6553  0230  30FF               	movlw	255
  6554  0231  06C4               	xorwf	___ftadd@f1+1,f
  6555  0232  30FF               	movlw	255
  6556  0233  06C5               	xorwf	___ftadd@f1+2,f
  6557  0234  3001               	movlw	1
  6558  0235  07C3               	addwf	___ftadd@f1,f
  6559  0236  3000               	movlw	0
  6560  0237  1803               	skipnc
  6561  0238  3001               	movlw	1
  6562  0239  07C4               	addwf	___ftadd@f1+1,f
  6563  023A  3000               	movlw	0
  6564  023B  1803               	skipnc
  6565  023C  3001               	movlw	1
  6566  023D  07C5               	addwf	___ftadd@f1+2,f
  6567  023E                     l3800:	
  6568  023E  1F4D               	btfss	___ftadd@sign,6
  6569  023F  2A50               	goto	l3804
  6570  0240  30FF               	movlw	255
  6571  0241  06C6               	xorwf	___ftadd@f2,f
  6572  0242  30FF               	movlw	255
  6573  0243  06C7               	xorwf	___ftadd@f2+1,f
  6574  0244  30FF               	movlw	255
  6575  0245  06C8               	xorwf	___ftadd@f2+2,f
  6576  0246  3001               	movlw	1
  6577  0247  07C6               	addwf	___ftadd@f2,f
  6578  0248  3000               	movlw	0
  6579  0249  1803               	skipnc
  6580  024A  3001               	movlw	1
  6581  024B  07C7               	addwf	___ftadd@f2+1,f
  6582  024C  3000               	movlw	0
  6583  024D  1803               	skipnc
  6584  024E  3001               	movlw	1
  6585  024F  07C8               	addwf	___ftadd@f2+2,f
  6586  0250                     l3804:	
  6587  0250  01CD               	clrf	___ftadd@sign
  6588  0251  0843               	movf	___ftadd@f1,w
  6589  0252  07C6               	addwf	___ftadd@f2,f
  6590  0253  0844               	movf	___ftadd@f1+1,w
  6591  0254  3DC7               	addwfc	___ftadd@f2+1,f
  6592  0255  0845               	movf	___ftadd@f1+2,w
  6593  0256  3DC8               	addwfc	___ftadd@f2+2,f
  6594  0257  1FC8               	btfss	___ftadd@f2+2,7
  6595  0258  2A6B               	goto	l3814
  6596  0259  30FF               	movlw	255
  6597  025A  06C6               	xorwf	___ftadd@f2,f
  6598  025B  30FF               	movlw	255
  6599  025C  06C7               	xorwf	___ftadd@f2+1,f
  6600  025D  30FF               	movlw	255
  6601  025E  06C8               	xorwf	___ftadd@f2+2,f
  6602  025F  3001               	movlw	1
  6603  0260  07C6               	addwf	___ftadd@f2,f
  6604  0261  3000               	movlw	0
  6605  0262  1803               	skipnc
  6606  0263  3001               	movlw	1
  6607  0264  07C7               	addwf	___ftadd@f2+1,f
  6608  0265  3000               	movlw	0
  6609  0266  1803               	skipnc
  6610  0267  3001               	movlw	1
  6611  0268  07C8               	addwf	___ftadd@f2+2,f
  6612  0269  01CD               	clrf	___ftadd@sign
  6613  026A  0ACD               	incf	___ftadd@sign,f
  6614  026B                     l3814:	
  6615  026B  0846               	movf	___ftadd@f2,w
  6616  026C  00F1               	movwf	?___ftpack
  6617  026D  0847               	movf	___ftadd@f2+1,w
  6618  026E  00F2               	movwf	?___ftpack+1
  6619  026F  0848               	movf	___ftadd@f2+2,w
  6620  0270  00F3               	movwf	?___ftpack+2
  6621  0271  084F               	movf	___ftadd@exp1,w
  6622  0272  00C9               	movwf	??___ftadd
  6623  0273  0849               	movf	??___ftadd,w
  6624  0274  00F4               	movwf	?___ftpack+3
  6625  0275  084D               	movf	___ftadd@sign,w
  6626  0276  00CA               	movwf	??___ftadd+1
  6627  0277  084A               	movf	??___ftadd+1,w
  6628  0278  00F5               	movwf	?___ftpack+4
  6629  0279  3185  2589         	fcall	___ftpack
  6630  027B  0871               	movf	?___ftpack,w
  6631  027C  0020               	movlb	0	; select bank0
  6632  027D  00C3               	movwf	?___ftadd
  6633  027E  0872               	movf	?___ftpack+1,w
  6634  027F  00C4               	movwf	?___ftadd+1
  6635  0280  0873               	movf	?___ftpack+2,w
  6636  0281  00C5               	movwf	?___ftadd+2
  6637  0282  0008               	return
  6638  0283                     __end_of___ftadd:	
  6639                           
  6640                           	psect	text33
  6641  0F52                     __ptext33:	
  6642 ;; *************** function ___awtoft *****************
  6643 ;; Defined at:
  6644 ;;		line 33 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awtoft.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  c               2    9[COMMON] int 
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;  sign            1    2[BANK0 ] unsigned char 
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  3    9[COMMON] float 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6658 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;Total ram usage:        6 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    3
  6665 ;; This function calls:
  6666 ;;		___ftpack
  6667 ;; This function is called by:
  6668 ;;		_ADCConv
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function ___awtoft
  6674  0F52                     ___awtoft:	
  6675                           
  6676                           ;incstack = 0
  6677                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  6678  0F52  0020               	movlb	0	; select bank0
  6679  0F53  01A2               	clrf	___awtoft@sign
  6680  0F54  1FFA               	btfss	___awtoft@c+1,7
  6681  0F55  2F5D               	goto	l3742
  6682  0F56  09F9               	comf	___awtoft@c,f
  6683  0F57  09FA               	comf	___awtoft@c+1,f
  6684  0F58  0AF9               	incf	___awtoft@c,f
  6685  0F59  1903               	skipnz
  6686  0F5A  0AFA               	incf	___awtoft@c+1,f
  6687  0F5B  01A2               	clrf	___awtoft@sign
  6688  0F5C  0AA2               	incf	___awtoft@sign,f
  6689  0F5D                     l3742:	
  6690  0F5D  0879               	movf	___awtoft@c,w
  6691  0F5E  00F1               	movwf	?___ftpack
  6692  0F5F  087A               	movf	___awtoft@c+1,w
  6693  0F60  00F2               	movwf	?___ftpack+1
  6694  0F61  01F3               	clrf	?___ftpack+2
  6695  0F62  308E               	movlw	142
  6696  0F63  00A0               	movwf	??___awtoft
  6697  0F64  0820               	movf	??___awtoft,w
  6698  0F65  00F4               	movwf	?___ftpack+3
  6699  0F66  0822               	movf	___awtoft@sign,w
  6700  0F67  00A1               	movwf	??___awtoft+1
  6701  0F68  0821               	movf	??___awtoft+1,w
  6702  0F69  00F5               	movwf	?___ftpack+4
  6703  0F6A  3185  2589         	fcall	___ftpack
  6704  0F6C  0871               	movf	?___ftpack,w
  6705  0F6D  00F9               	movwf	?___awtoft
  6706  0F6E  0872               	movf	?___ftpack+1,w
  6707  0F6F  00FA               	movwf	?___awtoft+1
  6708  0F70  0873               	movf	?___ftpack+2,w
  6709  0F71  00FB               	movwf	?___awtoft+2
  6710  0F72  0008               	return
  6711  0F73                     __end_of___awtoft:	
  6712                           
  6713                           	psect	text34
  6714  0589                     __ptext34:	
  6715 ;; *************** function ___ftpack *****************
  6716 ;; Defined at:
  6717 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  arg             3    1[COMMON] unsigned um
  6720 ;;  exp             1    4[COMMON] unsigned char 
  6721 ;;  sign            1    5[COMMON] unsigned char 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;		None
  6724 ;; Return value:  Size  Location     Type
  6725 ;;                  3    1[COMMON] float 
  6726 ;; Registers used:
  6727 ;;		wreg, status,2, status,0
  6728 ;; Tracked objects:
  6729 ;;		On entry : 0/0
  6730 ;;		On exit  : 0/0
  6731 ;;		Unchanged: 0/0
  6732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6733 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;Total ram usage:        8 bytes
  6738 ;; Hardware stack levels used:    1
  6739 ;; Hardware stack levels required when called:    2
  6740 ;; This function calls:
  6741 ;;		Nothing
  6742 ;; This function is called by:
  6743 ;;		___awtoft
  6744 ;;		___ftadd
  6745 ;;		___ftdiv
  6746 ;;		___ftmul
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function ___ftpack
  6752  0589                     ___ftpack:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6756  0589  0874               	movf	___ftpack@exp,w
  6757  058A  1903               	btfsc	3,2
  6758  058B  2D91               	goto	l3708
  6759  058C  0873               	movf	___ftpack@arg+2,w
  6760  058D  0472               	iorwf	___ftpack@arg+1,w
  6761  058E  0471               	iorwf	___ftpack@arg,w
  6762  058F  1D03               	skipz
  6763  0590  2DA2               	goto	l3714
  6764  0591                     l3708:	
  6765  0591  3000               	movlw	0
  6766  0592  00F1               	movwf	?___ftpack
  6767  0593  3000               	movlw	0
  6768  0594  00F2               	movwf	?___ftpack+1
  6769  0595  3000               	movlw	0
  6770  0596  00F3               	movwf	?___ftpack+2
  6771  0597  0008               	return
  6772  0598                     l3712:	
  6773  0598  3001               	movlw	1
  6774  0599  00F6               	movwf	??___ftpack
  6775  059A  0876               	movf	??___ftpack,w
  6776  059B  07F4               	addwf	___ftpack@exp,f
  6777  059C  3001               	movlw	1
  6778  059D                     u2995:	
  6779  059D  36F3               	lsrf	___ftpack@arg+2,f
  6780  059E  0CF2               	rrf	___ftpack@arg+1,f
  6781  059F  0CF1               	rrf	___ftpack@arg,f
  6782  05A0  0B89               	decfsz	9,f
  6783  05A1  2D9D               	goto	u2995
  6784  05A2                     l3714:	
  6785  05A2  30FE               	movlw	254
  6786  05A3  0573               	andwf	___ftpack@arg+2,w
  6787  05A4  1903               	btfsc	3,2
  6788  05A5  2DBB               	goto	l828
  6789  05A6  2D98               	goto	l3712
  6790  05A7                     l3716:	
  6791  05A7  3001               	movlw	1
  6792  05A8  00F6               	movwf	??___ftpack
  6793  05A9  0876               	movf	??___ftpack,w
  6794  05AA  07F4               	addwf	___ftpack@exp,f
  6795  05AB  3001               	movlw	1
  6796  05AC  07F1               	addwf	___ftpack@arg,f
  6797  05AD  3000               	movlw	0
  6798  05AE  1803               	skipnc
  6799  05AF  3001               	movlw	1
  6800  05B0  07F2               	addwf	___ftpack@arg+1,f
  6801  05B1  3000               	movlw	0
  6802  05B2  1803               	skipnc
  6803  05B3  3001               	movlw	1
  6804  05B4  07F3               	addwf	___ftpack@arg+2,f
  6805  05B5  3001               	movlw	1
  6806  05B6                     u3015:	
  6807  05B6  36F3               	lsrf	___ftpack@arg+2,f
  6808  05B7  0CF2               	rrf	___ftpack@arg+1,f
  6809  05B8  0CF1               	rrf	___ftpack@arg,f
  6810  05B9  0B89               	decfsz	9,f
  6811  05BA  2DB6               	goto	u3015
  6812  05BB                     l828:	
  6813  05BB  30FF               	movlw	255
  6814  05BC  0573               	andwf	___ftpack@arg+2,w
  6815  05BD  1903               	btfsc	3,2
  6816  05BE  2DC8               	goto	l3724
  6817  05BF  2DA7               	goto	l3716
  6818  05C0                     l3722:	
  6819  05C0  3001               	movlw	1
  6820  05C1  02F4               	subwf	___ftpack@exp,f
  6821  05C2  3001               	movlw	1
  6822  05C3                     u3035:	
  6823  05C3  35F1               	lslf	___ftpack@arg,f
  6824  05C4  0DF2               	rlf	___ftpack@arg+1,f
  6825  05C5  0DF3               	rlf	___ftpack@arg+2,f
  6826  05C6  0B89               	decfsz	9,f
  6827  05C7  2DC3               	goto	u3035
  6828  05C8                     l3724:	
  6829  05C8  1FF2               	btfss	___ftpack@arg+1,7
  6830  05C9  2DC0               	goto	l3722
  6831  05CA  1874               	btfsc	___ftpack@exp,0
  6832  05CB  2DD2               	goto	l834
  6833  05CC  30FF               	movlw	255
  6834  05CD  05F1               	andwf	___ftpack@arg,f
  6835  05CE  307F               	movlw	127
  6836  05CF  05F2               	andwf	___ftpack@arg+1,f
  6837  05D0  30FF               	movlw	255
  6838  05D1  05F3               	andwf	___ftpack@arg+2,f
  6839  05D2                     l834:	
  6840  05D2  1003               	clrc
  6841  05D3  0CF4               	rrf	___ftpack@exp,f
  6842  05D4  0874               	movf	___ftpack@exp,w
  6843  05D5  00F6               	movwf	??___ftpack
  6844  05D6  01F7               	clrf	??___ftpack+1
  6845  05D7  01F8               	clrf	??___ftpack+2
  6846  05D8  3010               	movlw	16
  6847  05D9                     u3065:	
  6848  05D9  35F6               	lslf	??___ftpack,f
  6849  05DA  0DF7               	rlf	??___ftpack+1,f
  6850  05DB  0DF8               	rlf	??___ftpack+2,f
  6851  05DC  0B89               	decfsz	9,f
  6852  05DD  2DD9               	goto	u3065
  6853  05DE  0876               	movf	??___ftpack,w
  6854  05DF  04F1               	iorwf	___ftpack@arg,f
  6855  05E0  0877               	movf	??___ftpack+1,w
  6856  05E1  04F2               	iorwf	___ftpack@arg+1,f
  6857  05E2  0878               	movf	??___ftpack+2,w
  6858  05E3  04F3               	iorwf	___ftpack@arg+2,f
  6859  05E4  0875               	movf	___ftpack@sign,w
  6860  05E5  1903               	btfsc	3,2
  6861  05E6  0008               	return
  6862  05E7  17F3               	bsf	___ftpack@arg+2,7
  6863  05E8  0008               	return
  6864  05E9                     __end_of___ftpack:	
  6865                           
  6866                           	psect	text35
  6867  0ED6                     __ptext35:	
  6868 ;; *************** function _LEDNormalFlash *****************
  6869 ;; Defined at:
  6870 ;;		line 25 in file "LED.c"
  6871 ;; Parameters:    Size  Location     Type
  6872 ;;  num             1    wreg     unsigned char 
  6873 ;; Auto vars:     Size  Location     Type
  6874 ;;  num             1    8[COMMON] unsigned char 
  6875 ;;  i               1    9[COMMON] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;		None               void
  6878 ;; Registers used:
  6879 ;;		wreg, status,2, status,0, pclath, cstack
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;Total ram usage:        3 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    3
  6892 ;; This function calls:
  6893 ;;		_DLYDelay_ms
  6894 ;; This function is called by:
  6895 ;;		_PGMSelLong
  6896 ;;		_RTXReadPkt
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           
  6901                           ;psect for function _LEDNormalFlash
  6902  0ED6                     _LEDNormalFlash:	
  6903                           
  6904                           ;incstack = 0
  6905                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  6906                           ;LEDNormalFlash@num stored from wreg
  6907  0ED6  00F8               	movwf	LEDNormalFlash@num
  6908                           
  6909                           ;LED.c: 26: unsigned char i;
  6910                           ;LED.c: 28: for(i=0;i<num;i++)
  6911  0ED7  01F9               	clrf	LEDNormalFlash@i
  6912  0ED8                     l3384:	
  6913  0ED8  0878               	movf	LEDNormalFlash@num,w
  6914  0ED9  0279               	subwf	LEDNormalFlash@i,w
  6915  0EDA  1803               	btfsc	3,0
  6916  0EDB  0008               	return
  6917  0EDC  0064               	clrwdt	;# 
  6918                           
  6919                           ;LED.c: 31: PORTCbits.RC7=0;
  6920  0EDD  0020               	movlb	0	; select bank0
  6921  0EDE  138E               	bcf	14,7	;volatile
  6922                           
  6923                           ;LED.c: 32: DLYDelay_ms(200);
  6924  0EDF  30C8               	movlw	200
  6925  0EE0  00F1               	movwf	?_DLYDelay_ms
  6926  0EE1  3000               	movlw	0
  6927  0EE2  00F2               	movwf	?_DLYDelay_ms+1
  6928  0EE3  318E  2613  318E   	fcall	_DLYDelay_ms
  6929                           
  6930                           ;LED.c: 33: PORTCbits.RC7=1;
  6931  0EE6  0020               	movlb	0	; select bank0
  6932  0EE7  178E               	bsf	14,7	;volatile
  6933                           
  6934                           ;LED.c: 34: DLYDelay_ms(200);
  6935  0EE8  30C8               	movlw	200
  6936  0EE9  00F1               	movwf	?_DLYDelay_ms
  6937  0EEA  3000               	movlw	0
  6938  0EEB  00F2               	movwf	?_DLYDelay_ms+1
  6939  0EEC  318E  2613  318E   	fcall	_DLYDelay_ms
  6940  0EEF  3001               	movlw	1
  6941  0EF0  00F7               	movwf	??_LEDNormalFlash
  6942  0EF1  0877               	movf	??_LEDNormalFlash,w
  6943  0EF2  07F9               	addwf	LEDNormalFlash@i,f
  6944  0EF3  2ED8               	goto	l3384
  6945  0EF4                     __end_of_LEDNormalFlash:	
  6946                           
  6947                           	psect	text36
  6948  0E13                     __ptext36:	
  6949 ;; *************** function _DLYDelay_ms *****************
  6950 ;; Defined at:
  6951 ;;		line 18 in file "DLY.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;  val             2    1[COMMON] unsigned short 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  i               2    5[COMMON] unsigned short 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, status,2
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6965 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;Total ram usage:        6 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    2
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_CC1Init
  6976 ;;		_LEDNormalFlash
  6977 ;;		_LEDFastFlash
  6978 ;;		_RTXAwake
  6979 ;;		_RTXStartSendData
  6980 ;;		_LEDVFastFlash
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           
  6985                           ;psect for function _DLYDelay_ms
  6986  0E13                     _DLYDelay_ms:	
  6987                           
  6988                           ;DLY.c: 19: unsigned short i;
  6989                           ;DLY.c: 21: for(i=0;i<val;i++)
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  6993  0E13  01F5               	clrf	DLYDelay_ms@i
  6994  0E14  01F6               	clrf	DLYDelay_ms@i+1
  6995  0E15                     l139:	
  6996  0E15  0872               	movf	DLYDelay_ms@val+1,w
  6997  0E16  0276               	subwf	DLYDelay_ms@i+1,w
  6998  0E17  1D03               	skipz
  6999  0E18  2E1B               	goto	u2655
  7000  0E19  0871               	movf	DLYDelay_ms@val,w
  7001  0E1A  0275               	subwf	DLYDelay_ms@i,w
  7002  0E1B                     u2655:	
  7003  0E1B  1803               	btfsc	3,0
  7004  0E1C  0008               	return
  7005  0E1D  0064               	clrwdt	;# 
  7006                           
  7007                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  7008  0E1E  3003               	movlw	3
  7009  0E1F  00F4               	movwf	??_DLYDelay_ms+1
  7010  0E20  3097               	movlw	151
  7011  0E21  00F3               	movwf	??_DLYDelay_ms
  7012  0E22                     u3547:	
  7013  0E22  0BF3               	decfsz	??_DLYDelay_ms,f
  7014  0E23  2E22               	goto	u3547
  7015  0E24  0BF4               	decfsz	??_DLYDelay_ms+1,f
  7016  0E25  2E22               	goto	u3547
  7017  0E26  2E27               	nop2
  7018  0E27  3001               	movlw	1
  7019  0E28  07F5               	addwf	DLYDelay_ms@i,f
  7020  0E29  3000               	movlw	0
  7021  0E2A  3DF6               	addwfc	DLYDelay_ms@i+1,f
  7022  0E2B  2E15               	goto	l139
  7023  0E2C                     __end_of_DLYDelay_ms:	
  7024                           
  7025                           	psect	text37
  7026  0DE3                     __ptext37:	
  7027 ;; *************** function _PGMInit *****************
  7028 ;; Defined at:
  7029 ;;		line 25 in file "PGM.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  state           1    wreg     unsigned char 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;  state           1   70[BANK0 ] unsigned char 
  7034 ;; Return value:  Size  Location     Type
  7035 ;;		None               void
  7036 ;; Registers used:
  7037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7047 ;;Total ram usage:        1 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    6
  7050 ;; This function calls:
  7051 ;;		_PGMReadNvm
  7052 ;;		_PGMCheckNvm
  7053 ;; This function is called by:
  7054 ;;		_main
  7055 ;; This function uses a non-reentrant model
  7056 ;;
  7057                           
  7058                           
  7059                           ;psect for function _PGMInit
  7060  0DE3                     _PGMInit:	
  7061                           
  7062                           ;incstack = 0
  7063                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7064                           ;PGMInit@state stored from wreg
  7065  0DE3  0020               	movlb	0	; select bank0
  7066  0DE4  00E6               	movwf	PGMInit@state
  7067                           
  7068                           ;PGM.c: 26: switch(state)
  7069  0DE5  2DF1               	goto	l3456
  7070  0DE6                     l3446:	
  7071                           ;PGM.c: 27: {
  7072                           ;PGM.c: 28: case 0:
  7073                           
  7074                           
  7075                           ;PGM.c: 30: T1CON=0b00000001;
  7076  0DE6  3001               	movlw	1
  7077  0DE7  0098               	movwf	24	;volatile
  7078                           
  7079                           ;PGM.c: 31: break;
  7080  0DE8  0008               	return
  7081  0DE9                     l3448:	
  7082                           ;PGM.c: 32: case 1:
  7083                           
  7084                           
  7085                           ;PGM.c: 34: tmrPgm=0;
  7086  0DE9  01EC               	clrf	_tmrPgm
  7087                           
  7088                           ;PGM.c: 35: pgm_flg.val=0;
  7089  0DEA  01EB               	clrf	_pgm_flg
  7090                           
  7091                           ;PGM.c: 36: PGMReadNvm();
  7092  0DEB  318D  257F  318D   	fcall	_PGMReadNvm
  7093                           
  7094                           ;PGM.c: 37: PGMCheckNvm();
  7095  0DEE  318D  251A         	fcall	_PGMCheckNvm
  7096                           
  7097                           ;PGM.c: 42: }
  7098                           
  7099                           ;PGM.c: 38: break;
  7100  0DF0  0008               	return
  7101  0DF1                     l3456:	
  7102  0DF1  0020               	movlb	0	; select bank0
  7103  0DF2  0866               	movf	PGMInit@state,w
  7104                           
  7105                           ; Switch size 1, requested type "space"
  7106                           ; Number of cases is 2, Range of values is 0 to 1
  7107                           ; switch strategies available:
  7108                           ; Name         Instructions Cycles
  7109                           ; simple_byte            7     4 (average)
  7110                           ; direct_byte           10     6 (fixed)
  7111                           ; jumptable            260     6 (fixed)
  7112                           ;	Chosen strategy is simple_byte
  7113  0DF3  3A00               	xorlw	0	; case 0
  7114  0DF4  1903               	skipnz
  7115  0DF5  2DE6               	goto	l3446
  7116  0DF6  3A01               	xorlw	1	; case 1
  7117  0DF7  1903               	skipnz
  7118  0DF8  2DE9               	goto	l3448
  7119  0DF9  2DFA               	goto	l373
  7120  0DFA                     l373:	
  7121  0DFA  0008               	return
  7122  0DFB                     __end_of_PGMInit:	
  7123                           
  7124                           	psect	text38
  7125  0D1A                     __ptext38:	
  7126 ;; *************** function _PGMCheckNvm *****************
  7127 ;; Defined at:
  7128 ;;		line 74 in file "PGM.c"
  7129 ;; Parameters:    Size  Location     Type
  7130 ;;		None
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;		None
  7133 ;; Return value:  Size  Location     Type
  7134 ;;		None               void
  7135 ;; Registers used:
  7136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;Total ram usage:        0 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    5
  7149 ;; This function calls:
  7150 ;;		_PGMNvmReset
  7151 ;; This function is called by:
  7152 ;;		_PGMInit
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           
  7157                           ;psect for function _PGMCheckNvm
  7158  0D1A                     _PGMCheckNvm:	
  7159                           
  7160                           ;PGM.c: 75: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  7161                           
  7162                           ;incstack = 0
  7163                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7164  0D1A  0021               	movlb	1	; select bank1
  7165  0D1B  0845               	movf	_pgm_cfg^(0+128),w
  7166  0D1C  3AC5               	xorlw	197
  7167  0D1D  1D03               	skipz
  7168  0D1E  2D23               	goto	l3462
  7169  0D1F  0846               	movf	(_pgm_cfg^(0+128)+1),w
  7170  0D20  3A5C               	xorlw	92
  7171  0D21  1903               	skipnz
  7172  0D22  0008               	return
  7173  0D23                     l3462:	
  7174                           
  7175                           ;PGM.c: 76: PGMNvmReset();
  7176  0D23  318D  25A5         	fcall	_PGMNvmReset
  7177  0D25  0008               	return
  7178  0D26                     __end_of_PGMCheckNvm:	
  7179                           
  7180                           	psect	text39
  7181  0DA5                     __ptext39:	
  7182 ;; *************** function _PGMNvmReset *****************
  7183 ;; Defined at:
  7184 ;;		line 80 in file "PGM.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;		None
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;		None
  7189 ;; Return value:  Size  Location     Type
  7190 ;;		None               void
  7191 ;; Registers used:
  7192 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;Total ram usage:        1 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    4
  7205 ;; This function calls:
  7206 ;;		_PGMWriteNvm
  7207 ;; This function is called by:
  7208 ;;		_PGMCheckNvm
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           
  7213                           ;psect for function _PGMNvmReset
  7214  0DA5                     _PGMNvmReset:	
  7215                           
  7216                           ;PGM.c: 82: pgm_cfg.valChk1=0xC5;
  7217                           
  7218                           ;incstack = 0
  7219                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7220  0DA5  30C5               	movlw	197
  7221  0DA6  0020               	movlb	0	; select bank0
  7222  0DA7  00E5               	movwf	??_PGMNvmReset
  7223  0DA8  0865               	movf	??_PGMNvmReset,w
  7224  0DA9  0021               	movlb	1	; select bank1
  7225  0DAA  00C5               	movwf	_pgm_cfg^(0+128)
  7226                           
  7227                           ;PGM.c: 83: pgm_cfg.valChk2=0x5C;
  7228  0DAB  305C               	movlw	92
  7229  0DAC  0020               	movlb	0	; select bank0
  7230  0DAD  00E5               	movwf	??_PGMNvmReset
  7231  0DAE  0865               	movf	??_PGMNvmReset,w
  7232  0DAF  0021               	movlb	1	; select bank1
  7233  0DB0  00C6               	movwf	(_pgm_cfg^(0+128)+1)
  7234                           
  7235                           ;PGM.c: 84: pgm_cfg.menu=0x00;
  7236  0DB1  01C7               	clrf	(_pgm_cfg^(0+128)+2)
  7237                           
  7238                           ;PGM.c: 85: pgm_cfg.sensId=0x00;
  7239  0DB2  01C8               	clrf	(_pgm_cfg^(0+128)+3)
  7240                           
  7241                           ;PGM.c: 86: pgm_cfg.baseId=0x00;
  7242  0DB3  01C9               	clrf	(_pgm_cfg^(0+128)+4)
  7243                           
  7244                           ;PGM.c: 88: PGMWriteNvm();
  7245  0DB4  318D  2592         	fcall	_PGMWriteNvm
  7246  0DB6  0001               	reset	;# 
  7247  0DB7  0008               	return
  7248  0DB8                     __end_of_PGMNvmReset:	
  7249                           
  7250                           	psect	text40
  7251  0D92                     __ptext40:	
  7252 ;; *************** function _PGMWriteNvm *****************
  7253 ;; Defined at:
  7254 ;;		line 69 in file "PGM.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;		None
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;		None
  7259 ;; Return value:  Size  Location     Type
  7260 ;;		None               void
  7261 ;; Registers used:
  7262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;Total ram usage:        4 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    3
  7275 ;; This function calls:
  7276 ;;		_NVMWrite
  7277 ;; This function is called by:
  7278 ;;		_PGMNvmReset
  7279 ;;		_PGMSelDown
  7280 ;;		_PGMSelLong
  7281 ;;		_RTXReadPkt
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _PGMWriteNvm
  7287  0D92                     _PGMWriteNvm:	
  7288                           
  7289                           ;PGM.c: 70: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  7290                           
  7291                           ;incstack = 0
  7292                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7293  0D92  3001               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  7294  0D93  00F8               	movwf	??_PGMWriteNvm
  7295  0D94  3088               	movlw	(high __stringtab)| (0+128)
  7296  0D95  00F9               	movwf	??_PGMWriteNvm+1
  7297  0D96  0878               	movf	??_PGMWriteNvm,w
  7298  0D97  00F1               	movwf	?_NVMWrite
  7299  0D98  0879               	movf	??_PGMWriteNvm+1,w
  7300  0D99  00F2               	movwf	?_NVMWrite+1
  7301  0D9A  30C5               	movlw	_pgm_cfg& (0+255)
  7302  0D9B  00FA               	movwf	??_PGMWriteNvm+2
  7303  0D9C  087A               	movf	??_PGMWriteNvm+2,w
  7304  0D9D  00F3               	movwf	?_NVMWrite+2
  7305  0D9E  3005               	movlw	5
  7306  0D9F  00FB               	movwf	??_PGMWriteNvm+3
  7307  0DA0  087B               	movf	??_PGMWriteNvm+3,w
  7308  0DA1  00F4               	movwf	?_NVMWrite+3
  7309  0DA2  3182  2283         	fcall	_NVMWrite
  7310  0DA4  0008               	return
  7311  0DA5                     __end_of_PGMWriteNvm:	
  7312                           
  7313                           	psect	text41
  7314  0283                     __ptext41:	
  7315 ;; *************** function _NVMWrite *****************
  7316 ;; Defined at:
  7317 ;;		line 39 in file "NVM.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  addr            2    1[COMMON] unsigned short 
  7320 ;;  source          1    3[COMMON] PTR unsigned char 
  7321 ;;		 -> pgm_cfg(5), 
  7322 ;;  len             1    4[COMMON] unsigned char 
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  7325 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  7326 ;;  j               1   68[BANK0 ] unsigned char 
  7327 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  7328 ;;  i               1   66[BANK0 ] unsigned char 
  7329 ;; Return value:  Size  Location     Type
  7330 ;;		None               void
  7331 ;; Registers used:
  7332 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;Total ram usage:       76 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    2
  7345 ;; This function calls:
  7346 ;;		Nothing
  7347 ;; This function is called by:
  7348 ;;		_PGMWriteNvm
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           
  7353                           ;psect for function _NVMWrite
  7354  0283                     _NVMWrite:	
  7355                           
  7356                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  7357                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  7358                           ;NVM.c: 43: INTCONbits.GIE=0;
  7359                           
  7360                           ;incstack = 0
  7361                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7362  0283  138B               	bcf	11,7	;volatile
  7363                           
  7364                           ;NVM.c: 44: PMCON1bits.WREN=1;
  7365  0284  0023               	movlb	3	; select bank3
  7366  0285  1515               	bsf	21,2	;volatile
  7367                           
  7368                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  7369  0286  1315               	bcf	21,6	;volatile
  7370                           
  7371                           ;NVM.c: 48: i=0;
  7372  0287  0020               	movlb	0	; select bank0
  7373  0288  01E2               	clrf	NVMWrite@i
  7374                           
  7375                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  7376  0289  30E0               	movlw	224
  7377  028A  0571               	andwf	NVMWrite@addr,w
  7378  028B  00E0               	movwf	NVMWrite@rowAddr
  7379  028C  30FF               	movlw	255
  7380  028D  0572               	andwf	NVMWrite@addr+1,w
  7381  028E  00E1               	movwf	NVMWrite@rowAddr+1
  7382                           
  7383                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  7384  028F  0871               	movf	NVMWrite@addr,w
  7385  0290  391F               	andlw	31
  7386  0291  00F5               	movwf	??_NVMWrite
  7387  0292  0875               	movf	??_NVMWrite,w
  7388  0293  00E3               	movwf	NVMWrite@latchAddr
  7389  0294                     l242:	
  7390                           ;NVM.c: 52: while(i<len)
  7391                           
  7392  0294  0874               	movf	NVMWrite@len,w
  7393  0295  0262               	subwf	NVMWrite@i,w
  7394  0296  1803               	btfsc	3,0
  7395  0297  2B3D               	goto	l262
  7396  0298  0064               	clrwdt	;# 
  7397                           
  7398                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  7399  0299  0020               	movlb	0	; select bank0
  7400  029A  01E4               	clrf	NVMWrite@j
  7401  029B  3020               	movlw	32
  7402  029C  0264               	subwf	NVMWrite@j,w
  7403  029D  1803               	btfsc	3,0
  7404  029E  2AC3               	goto	l245
  7405  029F                     l244:	
  7406  029F  0064               	clrwdt	;# 
  7407                           
  7408                           ;NVM.c: 60: PMADR=(rowAddr+j);
  7409  02A0  0020               	movlb	0	; select bank0
  7410  02A1  0864               	movf	NVMWrite@j,w
  7411  02A2  0760               	addwf	NVMWrite@rowAddr,w
  7412  02A3  00F5               	movwf	??_NVMWrite
  7413  02A4  0861               	movf	NVMWrite@rowAddr+1,w
  7414  02A5  1803               	skipnc
  7415  02A6  0A61               	incf	NVMWrite@rowAddr+1,w
  7416  02A7  00F6               	movwf	??_NVMWrite+1
  7417  02A8  0875               	movf	??_NVMWrite,w
  7418  02A9  0023               	movlb	3	; select bank3
  7419  02AA  0091               	movwf	17	;volatile
  7420  02AB  0876               	movf	??_NVMWrite+1,w
  7421  02AC  0092               	movwf	18	;volatile
  7422                           
  7423                           ;NVM.c: 61: PMCON1bits.RD=1;
  7424  02AD  1415               	bsf	21,0	;volatile
  7425  02AE                     l246:	
  7426                           ;NVM.c: 62: while(PMCON1bits.RD);
  7427                           
  7428  02AE  1815               	btfsc	21,0	;volatile
  7429  02AF  2AAE               	goto	l246
  7430                           
  7431                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  7432  02B0  0020               	movlb	0	; select bank0
  7433  02B1  3564               	lslf	NVMWrite@j,w
  7434  02B2  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  7435  02B3  0086               	movwf	6
  7436  02B4  0187               	clrf	7
  7437  02B5  0023               	movlb	3	; select bank3
  7438  02B6  0813               	movf	19,w	;volatile
  7439  02B7  3FC0               	movwi [0]fsr1
  7440  02B8  0814               	movf	20,w	;volatile
  7441  02B9  3FC1               	movwi [1]fsr1
  7442  02BA  3001               	movlw	1
  7443  02BB  00F5               	movwf	??_NVMWrite
  7444  02BC  0875               	movf	??_NVMWrite,w
  7445  02BD  0020               	movlb	0	; select bank0
  7446  02BE  07E4               	addwf	NVMWrite@j,f
  7447  02BF  3020               	movlw	32
  7448  02C0  0264               	subwf	NVMWrite@j,w
  7449  02C1  1C03               	skipc
  7450  02C2  2A9F               	goto	l244
  7451  02C3                     l245:	
  7452                           
  7453                           ;NVM.c: 64: }
  7454                           ;NVM.c: 67: PMCON1bits.FREE=1;
  7455  02C3  0023               	movlb	3	; select bank3
  7456  02C4  1615               	bsf	21,4	;volatile
  7457                           
  7458                           ;NVM.c: 68: PMADR=rowAddr;
  7459  02C5  0020               	movlb	0	; select bank0
  7460  02C6  0861               	movf	NVMWrite@rowAddr+1,w
  7461  02C7  0023               	movlb	3	; select bank3
  7462  02C8  0192               	clrf	18	;volatile
  7463  02C9  0792               	addwf	18,f	;volatile
  7464  02CA  0020               	movlb	0	; select bank0
  7465  02CB  0860               	movf	NVMWrite@rowAddr,w
  7466  02CC  0023               	movlb	3	; select bank3
  7467  02CD  0191               	clrf	17	;volatile
  7468  02CE  0791               	addwf	17,f	;volatile
  7469                           
  7470                           ;NVM.c: 69: PMCON2=0x55;
  7471  02CF  3055               	movlw	85
  7472  02D0  0096               	movwf	22	;volatile
  7473                           
  7474                           ;NVM.c: 70: PMCON2=0xAA;
  7475  02D1  30AA               	movlw	170
  7476  02D2  0096               	movwf	22	;volatile
  7477                           
  7478                           ;NVM.c: 71: PMCON1bits.WR=1;
  7479  02D3  1495               	bsf	21,1	;volatile
  7480  02D4                     l249:	
  7481                           ;NVM.c: 72: while(PMCON1bits.WR);
  7482                           
  7483  02D4  1895               	btfsc	21,1	;volatile
  7484  02D5  2AD4               	goto	l249
  7485                           
  7486                           ;NVM.c: 73: _nop();
  7487  02D6  0000               	nop
  7488                           
  7489                           ;NVM.c: 74: _nop();
  7490  02D7  0000               	nop
  7491                           
  7492                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  7493  02D8  3020               	movlw	32
  7494  02D9  0020               	movlb	0	; select bank0
  7495  02DA  0263               	subwf	NVMWrite@latchAddr,w
  7496  02DB  1803               	btfsc	3,0
  7497  02DC  2B00               	goto	l2570
  7498  02DD                     l252:	
  7499  02DD  0064               	clrwdt	;# 
  7500                           
  7501                           ;NVM.c: 81: if(i>=len)
  7502  02DE  0874               	movf	NVMWrite@len,w
  7503  02DF  0020               	movlb	0	; select bank0
  7504  02E0  0262               	subwf	NVMWrite@i,w
  7505  02E1  1803               	btfsc	3,0
  7506  02E2  2B00               	goto	l2570
  7507                           
  7508                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  7509                           
  7510                           ;NVM.c: 82: break;
  7511  02E3  0862               	movf	NVMWrite@i,w
  7512  02E4  0773               	addwf	NVMWrite@source,w
  7513  02E5  00F5               	movwf	??_NVMWrite
  7514  02E6  0875               	movf	??_NVMWrite,w
  7515  02E7  0086               	movwf	6
  7516  02E8  0187               	clrf	7
  7517  02E9  0801               	movf	1,w
  7518  02EA  00F6               	movwf	??_NVMWrite+1
  7519  02EB  01F7               	clrf	??_NVMWrite+2
  7520  02EC  3563               	lslf	NVMWrite@latchAddr,w
  7521  02ED  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  7522  02EE  0086               	movwf	6
  7523  02EF  0187               	clrf	7
  7524  02F0  0876               	movf	??_NVMWrite+1,w
  7525  02F1  3FC0               	movwi [0]fsr1
  7526  02F2  0877               	movf	??_NVMWrite+2,w
  7527  02F3  3FC1               	movwi [1]fsr1
  7528                           
  7529                           ;NVM.c: 85: i++;
  7530  02F4  3001               	movlw	1
  7531  02F5  00F5               	movwf	??_NVMWrite
  7532  02F6  0875               	movf	??_NVMWrite,w
  7533  02F7  07E2               	addwf	NVMWrite@i,f
  7534  02F8  3001               	movlw	1
  7535  02F9  00F5               	movwf	??_NVMWrite
  7536  02FA  0875               	movf	??_NVMWrite,w
  7537  02FB  07E3               	addwf	NVMWrite@latchAddr,f
  7538  02FC  3020               	movlw	32
  7539  02FD  0263               	subwf	NVMWrite@latchAddr,w
  7540  02FE  1C03               	skipc
  7541  02FF  2ADD               	goto	l252
  7542  0300                     l2570:	
  7543                           
  7544                           ;NVM.c: 86: }
  7545                           ;NVM.c: 88: latchAddr=0;
  7546  0300  01E3               	clrf	NVMWrite@latchAddr
  7547                           
  7548                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  7549  0301  01E4               	clrf	NVMWrite@j
  7550  0302  3020               	movlw	32
  7551  0303  0264               	subwf	NVMWrite@j,w
  7552  0304  1803               	btfsc	3,0
  7553  0305  2B38               	goto	l2592
  7554  0306                     l2576:	
  7555                           
  7556                           ;NVM.c: 92: {
  7557                           ;NVM.c: 94: PMADR=(rowAddr+j);
  7558  0306  0864               	movf	NVMWrite@j,w
  7559  0307  0760               	addwf	NVMWrite@rowAddr,w
  7560  0308  00F5               	movwf	??_NVMWrite
  7561  0309  0861               	movf	NVMWrite@rowAddr+1,w
  7562  030A  1803               	skipnc
  7563  030B  0A61               	incf	NVMWrite@rowAddr+1,w
  7564  030C  00F6               	movwf	??_NVMWrite+1
  7565  030D  0875               	movf	??_NVMWrite,w
  7566  030E  0023               	movlb	3	; select bank3
  7567  030F  0091               	movwf	17	;volatile
  7568  0310  0876               	movf	??_NVMWrite+1,w
  7569  0311  0092               	movwf	18	;volatile
  7570                           
  7571                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  7572  0312  0020               	movlb	0	; select bank0
  7573  0313  3564               	lslf	NVMWrite@j,w
  7574  0314  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  7575  0315  0086               	movwf	6
  7576  0316  0187               	clrf	7
  7577  0317  3F40               	moviw [0]fsr1
  7578  0318  0023               	movlb	3	; select bank3
  7579  0319  0093               	movwf	19	;volatile
  7580  031A  3F41               	moviw [1]fsr1
  7581  031B  0094               	movwf	20	;volatile
  7582                           
  7583                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  7584  031C  0020               	movlb	0	; select bank0
  7585  031D  0864               	movf	NVMWrite@j,w
  7586  031E  3A1F               	xorlw	31
  7587  031F  1D03               	skipz
  7588  0320  2B24               	goto	l257
  7589                           
  7590                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  7591  0321  0023               	movlb	3	; select bank3
  7592  0322  1295               	bcf	21,5	;volatile
  7593  0323  2B26               	goto	l2584
  7594  0324                     l257:	
  7595                           
  7596                           ;NVM.c: 99: else
  7597                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  7598  0324  0023               	movlb	3	; select bank3
  7599  0325  1695               	bsf	21,5	;volatile
  7600  0326                     l2584:	
  7601                           
  7602                           ;NVM.c: 101: PMCON2=0x55;
  7603  0326  3055               	movlw	85
  7604  0327  0096               	movwf	22	;volatile
  7605                           
  7606                           ;NVM.c: 102: PMCON2=0xAA;
  7607  0328  30AA               	movlw	170
  7608  0329  0096               	movwf	22	;volatile
  7609                           
  7610                           ;NVM.c: 103: PMCON1bits.WR=1;
  7611  032A  1495               	bsf	21,1	;volatile
  7612  032B                     l259:	
  7613                           ;NVM.c: 104: while(PMCON1bits.WR);
  7614                           
  7615  032B  1895               	btfsc	21,1	;volatile
  7616  032C  2B2B               	goto	l259
  7617                           
  7618                           ;NVM.c: 105: _nop();
  7619  032D  0000               	nop
  7620                           
  7621                           ;NVM.c: 106: _nop();
  7622  032E  0000               	nop
  7623  032F  3001               	movlw	1
  7624  0330  00F5               	movwf	??_NVMWrite
  7625  0331  0875               	movf	??_NVMWrite,w
  7626  0332  0020               	movlb	0	; select bank0
  7627  0333  07E4               	addwf	NVMWrite@j,f
  7628  0334  3020               	movlw	32
  7629  0335  0264               	subwf	NVMWrite@j,w
  7630  0336  1C03               	skipc
  7631  0337  2B06               	goto	l2576
  7632  0338                     l2592:	
  7633                           
  7634                           ;NVM.c: 107: }
  7635                           ;NVM.c: 109: rowAddr+=0x0020;
  7636  0338  3020               	movlw	32
  7637  0339  07E0               	addwf	NVMWrite@rowAddr,f
  7638  033A  3000               	movlw	0
  7639  033B  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  7640  033C  2A94               	goto	l242
  7641  033D                     l262:	
  7642                           
  7643                           ;NVM.c: 110: }
  7644                           ;NVM.c: 112: INTCONbits.GIE=1;
  7645  033D  178B               	bsf	11,7	;volatile
  7646                           
  7647                           ;NVM.c: 113: PMCON1bits.WREN=0;
  7648  033E  0023               	movlb	3	; select bank3
  7649  033F  1115               	bcf	21,2	;volatile
  7650  0340  0008               	return
  7651  0341                     __end_of_NVMWrite:	
  7652                           
  7653                           	psect	text42
  7654  0D7F                     __ptext42:	
  7655 ;; *************** function _PGMReadNvm *****************
  7656 ;; Defined at:
  7657 ;;		line 64 in file "PGM.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;		None               void
  7664 ;; Registers used:
  7665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;Total ram usage:        4 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    3
  7678 ;; This function calls:
  7679 ;;		_NVMRead
  7680 ;; This function is called by:
  7681 ;;		_PGMInit
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function _PGMReadNvm
  7687  0D7F                     _PGMReadNvm:	
  7688                           
  7689                           ;PGM.c: 65: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  7690                           
  7691                           ;incstack = 0
  7692                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7693  0D7F  3001               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  7694  0D80  00F8               	movwf	??_PGMReadNvm
  7695  0D81  3088               	movlw	(high __stringtab)| (0+128)
  7696  0D82  00F9               	movwf	??_PGMReadNvm+1
  7697  0D83  0878               	movf	??_PGMReadNvm,w
  7698  0D84  00F1               	movwf	?_NVMRead
  7699  0D85  0879               	movf	??_PGMReadNvm+1,w
  7700  0D86  00F2               	movwf	?_NVMRead+1
  7701  0D87  30C5               	movlw	_pgm_cfg& (0+255)
  7702  0D88  00FA               	movwf	??_PGMReadNvm+2
  7703  0D89  087A               	movf	??_PGMReadNvm+2,w
  7704  0D8A  00F3               	movwf	?_NVMRead+2
  7705  0D8B  3005               	movlw	5
  7706  0D8C  00FB               	movwf	??_PGMReadNvm+3
  7707  0D8D  087B               	movf	??_PGMReadNvm+3,w
  7708  0D8E  00F4               	movwf	?_NVMRead+3
  7709  0D8F  318F  27DA         	fcall	_NVMRead
  7710  0D91  0008               	return
  7711  0D92                     __end_of_PGMReadNvm:	
  7712                           
  7713                           	psect	text43
  7714  0FDA                     __ptext43:	
  7715 ;; *************** function _NVMRead *****************
  7716 ;; Defined at:
  7717 ;;		line 24 in file "NVM.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  addr            2    1[COMMON] unsigned short 
  7720 ;;  dest            1    3[COMMON] PTR unsigned char 
  7721 ;;		 -> pgm_cfg(5), 
  7722 ;;  len             1    4[COMMON] unsigned char 
  7723 ;; Auto vars:     Size  Location     Type
  7724 ;;  i               1    7[COMMON] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        7 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    2
  7741 ;; This function calls:
  7742 ;;		Nothing
  7743 ;; This function is called by:
  7744 ;;		_PGMReadNvm
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _NVMRead
  7750  0FDA                     _NVMRead:	
  7751                           
  7752                           ;NVM.c: 25: unsigned char i;
  7753                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  7754                           
  7755                           ;incstack = 0
  7756                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  7757  0FDA  0023               	movlb	3	; select bank3
  7758  0FDB  1315               	bcf	21,6	;volatile
  7759                           
  7760                           ;NVM.c: 28: for(i=0;i<len;i++)
  7761  0FDC  01F7               	clrf	NVMRead@i
  7762  0FDD                     l2522:	
  7763  0FDD  0874               	movf	NVMRead@len,w
  7764  0FDE  0277               	subwf	NVMRead@i,w
  7765  0FDF  1803               	btfsc	3,0
  7766  0FE0  0008               	return
  7767  0FE1  0064               	clrwdt	;# 
  7768                           
  7769                           ;NVM.c: 31: PMADR=(addr+i);
  7770  0FE2  0877               	movf	NVMRead@i,w
  7771  0FE3  0771               	addwf	NVMRead@addr,w
  7772  0FE4  00F5               	movwf	??_NVMRead
  7773  0FE5  0872               	movf	NVMRead@addr+1,w
  7774  0FE6  1803               	skipnc
  7775  0FE7  0A72               	incf	NVMRead@addr+1,w
  7776  0FE8  00F6               	movwf	??_NVMRead+1
  7777  0FE9  0875               	movf	??_NVMRead,w
  7778  0FEA  0023               	movlb	3	; select bank3
  7779  0FEB  0091               	movwf	17	;volatile
  7780  0FEC  0876               	movf	??_NVMRead+1,w
  7781  0FED  0092               	movwf	18	;volatile
  7782                           
  7783                           ;NVM.c: 32: PMCON1bits.RD=1;
  7784  0FEE  1415               	bsf	21,0	;volatile
  7785  0FEF                     l235:	
  7786                           ;NVM.c: 33: while(PMCON1bits.RD);
  7787                           
  7788  0FEF  1815               	btfsc	21,0	;volatile
  7789  0FF0  2FEF               	goto	l235
  7790                           
  7791                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  7792  0FF1  0813               	movf	19,w	;volatile
  7793  0FF2  00F5               	movwf	??_NVMRead
  7794  0FF3  0877               	movf	NVMRead@i,w
  7795  0FF4  0773               	addwf	NVMRead@dest,w
  7796  0FF5  00F6               	movwf	??_NVMRead+1
  7797  0FF6  0876               	movf	??_NVMRead+1,w
  7798  0FF7  0086               	movwf	6
  7799  0FF8  0187               	clrf	7
  7800  0FF9  0875               	movf	??_NVMRead,w
  7801  0FFA  0081               	movwf	1
  7802  0FFB  3001               	movlw	1
  7803  0FFC  00F5               	movwf	??_NVMRead
  7804  0FFD  0875               	movf	??_NVMRead,w
  7805  0FFE  07F7               	addwf	NVMRead@i,f
  7806  0FFF  2FDD               	goto	l2522
  7807  1000                     __end_of_NVMRead:	
  7808                           
  7809                           	psect	text44
  7810  0EB8                     __ptext44:	
  7811 ;; *************** function _DINTask *****************
  7812 ;; Defined at:
  7813 ;;		line 80 in file "DIN.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;Total ram usage:        1 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    2
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_main
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function _DINTask
  7843  0EB8                     _DINTask:	
  7844                           
  7845                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  7846                           
  7847                           ;incstack = 0
  7848                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  7849  0EB8  0020               	movlb	0	; select bank0
  7850  0EB9  01EF               	clrf	_u_in_sta_tmpTask
  7851                           
  7852                           ;DIN.c: 82: if(!PORTBbits.RB2)
  7853  0EBA  1D0D               	btfss	13,2	;volatile
  7854                           
  7855                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  7856  0EBB  146F               	bsf	_u_in_sta_tmpTask,0
  7857                           
  7858                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  7859  0EBC  086F               	movf	_u_in_sta_tmpTask,w
  7860  0EBD  3901               	andlw	1
  7861  0EBE  00F1               	movwf	??_DINTask
  7862  0EBF  087C               	movf	_u_in_sta_currTask,w
  7863  0EC0  3901               	andlw	1
  7864  0EC1  0671               	xorwf	??_DINTask,w
  7865  0EC2  1903               	skipnz
  7866  0EC3  2ECC               	goto	l2636
  7867                           
  7868                           ;DIN.c: 87: {
  7869                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  7870  0EC4  107C               	bcf	_u_in_sta_currTask,0
  7871  0EC5  1C6F               	btfss	_u_in_sta_tmpTask,0
  7872  0EC6  2EC8               	goto	l2632
  7873  0EC7  147C               	bsf	_u_in_sta_currTask,0
  7874  0EC8                     l2632:	
  7875                           
  7876                           ;DIN.c: 89: tmrDbncSel=0;
  7877  0EC8  0021               	movlb	1	; select bank1
  7878  0EC9  01AE               	clrf	_tmrDbncSel^(0+128)
  7879                           
  7880                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  7881  0ECA  0020               	movlb	0	; select bank0
  7882  0ECB  146E               	bsf	_u_flg_din,0
  7883  0ECC                     l2636:	
  7884                           
  7885                           ;DIN.c: 91: }
  7886                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  7887  0ECC  1C7C               	btfss	_u_in_sta_currTask,0
  7888  0ECD  2ED0               	goto	l2640
  7889                           
  7890                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  7891  0ECE  14EE               	bsf	_u_flg_din,1
  7892  0ECF  0008               	return
  7893  0ED0                     l2640:	
  7894                           
  7895                           ;DIN.c: 96: else
  7896                           ;DIN.c: 97: {
  7897                           ;DIN.c: 98: tmrLongSel=0;
  7898  0ED0  0021               	movlb	1	; select bank1
  7899  0ED1  01A6               	clrf	_tmrLongSel^(0+128)
  7900  0ED2  01A7               	clrf	(_tmrLongSel+1)^(0+128)
  7901                           
  7902                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  7903  0ED3  0020               	movlb	0	; select bank0
  7904  0ED4  10EE               	bcf	_u_flg_din,1
  7905  0ED5  0008               	return
  7906  0ED6                     __end_of_DINTask:	
  7907                           
  7908                           	psect	text45
  7909  0D5D                     __ptext45:	
  7910 ;; *************** function _DINInit *****************
  7911 ;; Defined at:
  7912 ;;		line 25 in file "DIN.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  sta             1    wreg     unsigned char 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  sta             1    1[COMMON] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;		None               void
  7919 ;; Registers used:
  7920 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;Total ram usage:        1 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    2
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_main
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _DINInit
  7942  0D5D                     _DINInit:	
  7943                           
  7944                           ;incstack = 0
  7945                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  7946                           ;DINInit@sta stored from wreg
  7947  0D5D  00F1               	movwf	DINInit@sta
  7948                           
  7949                           ;DIN.c: 26: switch(sta)
  7950  0D5E  2D68               	goto	l2600
  7951  0D5F                     l2596:	
  7952                           ;DIN.c: 27: {
  7953                           ;DIN.c: 31: case 1:
  7954                           
  7955                           
  7956                           ;DIN.c: 33: u_flg_din.val=0;
  7957  0D5F  0020               	movlb	0	; select bank0
  7958  0D60  01EE               	clrf	_u_flg_din
  7959                           
  7960                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  7961  0D61  01FC               	clrf	_u_in_sta_currTask
  7962                           
  7963                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  7964  0D62  01EF               	clrf	_u_in_sta_tmpTask
  7965                           
  7966                           ;DIN.c: 36: u_in_ev_up.val=0;
  7967  0D63  0021               	movlb	1	; select bank1
  7968  0D64  01B2               	clrf	_u_in_ev_up^(0+128)
  7969                           
  7970                           ;DIN.c: 37: u_in_ev_down.val=0;
  7971  0D65  01B0               	clrf	_u_in_ev_down^(0+128)
  7972                           
  7973                           ;DIN.c: 38: u_in_ev_long.val=0;
  7974  0D66  01B1               	clrf	_u_in_ev_long^(0+128)
  7975                           
  7976                           ;DIN.c: 43: }
  7977                           
  7978                           ;DIN.c: 39: break;
  7979  0D67  0008               	return
  7980  0D68                     l2600:	
  7981  0D68  0871               	movf	DINInit@sta,w
  7982                           
  7983                           ; Switch size 1, requested type "space"
  7984                           ; Number of cases is 1, Range of values is 1 to 1
  7985                           ; switch strategies available:
  7986                           ; Name         Instructions Cycles
  7987                           ; simple_byte            4     3 (average)
  7988                           ; direct_byte           11     9 (fixed)
  7989                           ; jumptable            263     9 (fixed)
  7990                           ;	Chosen strategy is simple_byte
  7991  0D69  3A01               	xorlw	1	; case 1
  7992  0D6A  1903               	skipnz
  7993  0D6B  2D5F               	goto	l2596
  7994  0D6C  2D6D               	goto	l287
  7995  0D6D                     l287:	
  7996  0D6D  0008               	return
  7997  0D6E                     __end_of_DINInit:	
  7998                           
  7999                           	psect	text46
  8000  0D0F                     __ptext46:	
  8001 ;; *************** function _NVMInit *****************
  8002 ;; Defined at:
  8003 ;;		line 7 in file "NVM.c"
  8004 ;; Parameters:    Size  Location     Type
  8005 ;;  sta             1    wreg     unsigned char 
  8006 ;; Auto vars:     Size  Location     Type
  8007 ;;  sta             1    1[COMMON] unsigned char 
  8008 ;; Return value:  Size  Location     Type
  8009 ;;		None               void
  8010 ;; Registers used:
  8011 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8012 ;; Tracked objects:
  8013 ;;		On entry : 0/0
  8014 ;;		On exit  : 0/0
  8015 ;;		Unchanged: 0/0
  8016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;Total ram usage:        1 bytes
  8022 ;; Hardware stack levels used:    1
  8023 ;; Hardware stack levels required when called:    2
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		_main
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           
  8032                           ;psect for function _NVMInit
  8033  0D0F                     _NVMInit:	
  8034                           
  8035                           ;incstack = 0
  8036                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  8037                           ;NVMInit@sta stored from wreg
  8038  0D0F  00F1               	movwf	NVMInit@sta
  8039                           
  8040                           ;NVM.c: 8: switch(sta)
  8041  0D10  2D14               	goto	l2508
  8042  0D11                     l2504:	
  8043                           ;NVM.c: 9: {
  8044                           ;NVM.c: 10: case 0:
  8045                           
  8046                           
  8047                           ;NVM.c: 12: PMCON1=0b00000000;
  8048  0D11  0023               	movlb	3	; select bank3
  8049  0D12  0195               	clrf	21	;volatile
  8050                           
  8051                           ;NVM.c: 20: }
  8052                           
  8053                           ;NVM.c: 13: break;
  8054  0D13  0008               	return
  8055  0D14                     l2508:	
  8056  0D14  0871               	movf	NVMInit@sta,w
  8057                           
  8058                           ; Switch size 1, requested type "space"
  8059                           ; Number of cases is 1, Range of values is 0 to 0
  8060                           ; switch strategies available:
  8061                           ; Name         Instructions Cycles
  8062                           ; simple_byte            4     3 (average)
  8063                           ; direct_byte            8     6 (fixed)
  8064                           ; jumptable            260     6 (fixed)
  8065                           ;	Chosen strategy is simple_byte
  8066  0D15  3A00               	xorlw	0	; case 0
  8067  0D16  1903               	skipnz
  8068  0D17  2D11               	goto	l2504
  8069  0D18  2D19               	goto	l230
  8070  0D19                     l230:	
  8071  0D19  0008               	return
  8072  0D1A                     __end_of_NVMInit:	
  8073                           
  8074                           	psect	text47
  8075  0D04                     __ptext47:	
  8076 ;; *************** function _LEDInit *****************
  8077 ;; Defined at:
  8078 ;;		line 8 in file "LED.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  sta             1    wreg     unsigned char 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  sta             1    1[COMMON] unsigned char 
  8083 ;; Return value:  Size  Location     Type
  8084 ;;		None               void
  8085 ;; Registers used:
  8086 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;Total ram usage:        1 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    2
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		_main
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           
  8107                           ;psect for function _LEDInit
  8108  0D04                     _LEDInit:	
  8109                           
  8110                           ;incstack = 0
  8111                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  8112                           ;LEDInit@sta stored from wreg
  8113  0D04  00F1               	movwf	LEDInit@sta
  8114                           
  8115                           ;LED.c: 9: switch(sta)
  8116  0D05  2D09               	goto	l2470
  8117  0D06                     l190:	
  8118                           ;LED.c: 10: {
  8119                           ;LED.c: 17: case 2:
  8120                           
  8121                           
  8122                           ;LED.c: 19: PORTCbits.RC7=1;
  8123  0D06  0020               	movlb	0	; select bank0
  8124  0D07  178E               	bsf	14,7	;volatile
  8125                           
  8126                           ;LED.c: 21: }
  8127                           
  8128                           ;LED.c: 20: break;
  8129  0D08  0008               	return
  8130  0D09                     l2470:	
  8131  0D09  0871               	movf	LEDInit@sta,w
  8132                           
  8133                           ; Switch size 1, requested type "space"
  8134                           ; Number of cases is 1, Range of values is 2 to 2
  8135                           ; switch strategies available:
  8136                           ; Name         Instructions Cycles
  8137                           ; simple_byte            4     3 (average)
  8138                           ; direct_byte           11     9 (fixed)
  8139                           ; jumptable            263     9 (fixed)
  8140                           ;	Chosen strategy is simple_byte
  8141  0D0A  3A02               	xorlw	2	; case 2
  8142  0D0B  1903               	skipnz
  8143  0D0C  2D06               	goto	l190
  8144  0D0D  2D0E               	goto	l192
  8145  0D0E                     l192:	
  8146  0D0E  0008               	return
  8147  0D0F                     __end_of_LEDInit:	
  8148                           
  8149                           	psect	text48
  8150  0781                     __ptext48:	
  8151 ;; *************** function _ADCInit *****************
  8152 ;; Defined at:
  8153 ;;		line 26 in file "ADC.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  state           1    wreg     unsigned char 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  state           1    2[COMMON] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;		None               void
  8160 ;; Registers used:
  8161 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        2 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    2
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_main
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           
  8182                           ;psect for function _ADCInit
  8183  0781                     _ADCInit:	
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  8187                           ;ADCInit@state stored from wreg
  8188  0781  00F2               	movwf	ADCInit@state
  8189                           
  8190                           ;ADC.c: 27: switch(state)
  8191  0782  2FA4               	goto	l2358
  8192  0783                     l2346:	
  8193                           ;ADC.c: 28: {
  8194                           ;ADC.c: 29: case 0:
  8195                           
  8196                           
  8197                           ;ADC.c: 31: ADCON0=0b00101101; ADCON1=0b00000011; FVRCON=0b10000001; ANSELB|=0b00010010;;
  8198  0783  302D               	movlw	45
  8199  0784  0021               	movlb	1	; select bank1
  8200  0785  009D               	movwf	29	;volatile
  8201  0786  3003               	movlw	3
  8202  0787  009E               	movwf	30	;volatile
  8203  0788  3081               	movlw	129
  8204  0789  0022               	movlb	2	; select bank2
  8205  078A  0097               	movwf	23	;volatile
  8206  078B  3012               	movlw	18
  8207  078C  00F1               	movwf	??_ADCInit
  8208  078D  0871               	movf	??_ADCInit,w
  8209  078E  0023               	movlb	3	; select bank3
  8210  078F  048D               	iorwf	13,f	;volatile
  8211                           
  8212                           ;ADC.c: 32: break;
  8213  0790  0008               	return
  8214  0791                     l2350:	
  8215                           ;ADC.c: 33: case 1:
  8216                           
  8217                           
  8218                           ;ADC.c: 35: adc_ch=ADC_CH_BATT;
  8219  0791  0021               	movlb	1	; select bank1
  8220  0792  01A8               	clrf	_adc_ch^(0+128)
  8221                           
  8222                           ;ADC.c: 36: batt=0;
  8223  0793  0020               	movlb	0	; select bank0
  8224  0794  01E9               	clrf	_batt
  8225                           
  8226                           ;ADC.c: 37: temp=0;
  8227  0795  0021               	movlb	1	; select bank1
  8228  0796  01AD               	clrf	_temp^(0+128)
  8229                           
  8230                           ;ADC.c: 38: battV=0;
  8231  0797  3000               	movlw	0
  8232  0798  00A0               	movwf	_battV^(0+128)
  8233  0799  3000               	movlw	0
  8234  079A  00A1               	movwf	(_battV+1)^(0+128)
  8235  079B  3000               	movlw	0
  8236  079C  00A2               	movwf	(_battV+2)^(0+128)
  8237                           
  8238                           ;ADC.c: 39: tempC=0;
  8239  079D  3000               	movlw	0
  8240  079E  00A3               	movwf	_tempC^(0+128)
  8241  079F  3000               	movlw	0
  8242  07A0  00A4               	movwf	(_tempC+1)^(0+128)
  8243  07A1  3000               	movlw	0
  8244  07A2  00A5               	movwf	(_tempC+2)^(0+128)
  8245                           
  8246                           ;ADC.c: 44: }
  8247                           
  8248                           ;ADC.c: 40: break;
  8249  07A3  0008               	return
  8250  07A4                     l2358:	
  8251  07A4  0872               	movf	ADCInit@state,w
  8252                           
  8253                           ; Switch size 1, requested type "space"
  8254                           ; Number of cases is 2, Range of values is 0 to 1
  8255                           ; switch strategies available:
  8256                           ; Name         Instructions Cycles
  8257                           ; simple_byte            7     4 (average)
  8258                           ; direct_byte           10     6 (fixed)
  8259                           ; jumptable            260     6 (fixed)
  8260                           ;	Chosen strategy is simple_byte
  8261  07A5  3A00               	xorlw	0	; case 0
  8262  07A6  1903               	skipnz
  8263  07A7  2F83               	goto	l2346
  8264  07A8  3A01               	xorlw	1	; case 1
  8265  07A9  1903               	skipnz
  8266  07AA  2F91               	goto	l2350
  8267  07AB  2FAC               	goto	l111
  8268  07AC                     l111:	
  8269  07AC  0008               	return
  8270  07AD                     __end_of_ADCInit:	
  8271                           
  8272                           	psect	text49
  8273  0E9A                     __ptext49:	
  8274 ;; *************** function _SPIInit *****************
  8275 ;; Defined at:
  8276 ;;		line 9 in file "SPI.c"
  8277 ;; Parameters:    Size  Location     Type
  8278 ;;  state           1    wreg     unsigned char 
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;  state           1    2[COMMON] unsigned char 
  8281 ;; Return value:  Size  Location     Type
  8282 ;;		None               void
  8283 ;; Registers used:
  8284 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;Total ram usage:        2 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    2
  8297 ;; This function calls:
  8298 ;;		Nothing
  8299 ;; This function is called by:
  8300 ;;		_main
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           
  8305                           ;psect for function _SPIInit
  8306  0E9A                     _SPIInit:	
  8307                           
  8308                           ;incstack = 0
  8309                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  8310                           ;SPIInit@state stored from wreg
  8311  0E9A  00F2               	movwf	SPIInit@state
  8312                           
  8313                           ;SPI.c: 10: switch(state)
  8314  0E9B  2EAC               	goto	l2324
  8315  0E9C                     l56:	
  8316                           ;SPI.c: 11: {
  8317                           ;SPI.c: 12: case 0:
  8318                           
  8319                           
  8320                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  8321  0E9C  0021               	movlb	1	; select bank1
  8322  0E9D  160E               	bsf	14,4	;volatile
  8323  0E9E  30D7               	movlw	215
  8324  0E9F  00F1               	movwf	??_SPIInit
  8325  0EA0  0871               	movf	??_SPIInit,w
  8326  0EA1  058E               	andwf	14,f	;volatile
  8327  0EA2  0024               	movlb	4	; select bank4
  8328  0EA3  1295               	bcf	21,5	;volatile
  8329  0EA4  0191               	clrf	17	;volatile
  8330  0EA5  3001               	movlw	1
  8331  0EA6  0095               	movwf	21	;volatile
  8332  0EA7  0196               	clrf	22	;volatile
  8333  0EA8  3040               	movlw	64
  8334  0EA9  0094               	movwf	20	;volatile
  8335  0EAA  1695               	bsf	21,5	;volatile
  8336                           
  8337                           ;SPI.c: 22: }
  8338                           
  8339                           ;SPI.c: 21: break;
  8340                           
  8341                           ;SPI.c: 19: case 2:
  8342                           
  8343                           ;SPI.c: 18: break;
  8344                           
  8345                           ;SPI.c: 16: case 1:
  8346                           
  8347                           ;SPI.c: 15: break;
  8348  0EAB  0008               	return
  8349  0EAC                     l2324:	
  8350  0EAC  0872               	movf	SPIInit@state,w
  8351                           
  8352                           ; Switch size 1, requested type "space"
  8353                           ; Number of cases is 3, Range of values is 0 to 2
  8354                           ; switch strategies available:
  8355                           ; Name         Instructions Cycles
  8356                           ; simple_byte           10     6 (average)
  8357                           ; direct_byte           12     6 (fixed)
  8358                           ; jumptable            260     6 (fixed)
  8359                           ;	Chosen strategy is simple_byte
  8360  0EAD  3A00               	xorlw	0	; case 0
  8361  0EAE  1903               	skipnz
  8362  0EAF  2E9C               	goto	l56
  8363  0EB0  3A01               	xorlw	1	; case 1
  8364  0EB1  1903               	skipnz
  8365  0EB2  2EB7               	goto	l60
  8366  0EB3  3A03               	xorlw	3	; case 2
  8367  0EB4  1903               	skipnz
  8368  0EB5  2EB7               	goto	l60
  8369  0EB6  2EB7               	goto	l60
  8370  0EB7                     l60:	
  8371  0EB7  0008               	return
  8372  0EB8                     __end_of_SPIInit:	
  8373                           
  8374                           	psect	text50
  8375  0F12                     __ptext50:	
  8376 ;; *************** function _OUTInit *****************
  8377 ;; Defined at:
  8378 ;;		line 7 in file "OUT.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;  sta             1    wreg     unsigned char 
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;  sta             1    2[COMMON] unsigned char 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;		None               void
  8385 ;; Registers used:
  8386 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:        2 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    2
  8399 ;; This function calls:
  8400 ;;		Nothing
  8401 ;; This function is called by:
  8402 ;;		_main
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _OUTInit
  8408  0F12                     _OUTInit:	
  8409                           
  8410                           ;incstack = 0
  8411                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  8412                           ;OUTInit@sta stored from wreg
  8413  0F12  00F2               	movwf	OUTInit@sta
  8414                           
  8415                           ;OUT.c: 8: switch(sta)
  8416  0F13  2F2C               	goto	l2304
  8417  0F14                     l2290:	
  8418                           ;OUT.c: 9: {
  8419                           ;OUT.c: 10: case 0:
  8420                           
  8421                           
  8422                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00010111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00010010; ANSELC&=0b00000000; PORTB&=0b11011111; PORTC|=0b10000000;
  8423  0F14  0021               	movlb	1	; select bank1
  8424  0F15  018C               	clrf	12	;volatile
  8425  0F16  3017               	movlw	23
  8426  0F17  00F1               	movwf	??_OUTInit
  8427  0F18  0871               	movf	??_OUTInit,w
  8428  0F19  058D               	andwf	13,f	;volatile
  8429  0F1A  3010               	movlw	16
  8430  0F1B  00F1               	movwf	??_OUTInit
  8431  0F1C  0871               	movf	??_OUTInit,w
  8432  0F1D  058E               	andwf	14,f	;volatile
  8433  0F1E  0023               	movlb	3	; select bank3
  8434  0F1F  018C               	clrf	12	;volatile
  8435  0F20  3012               	movlw	18
  8436  0F21  00F1               	movwf	??_OUTInit
  8437  0F22  0871               	movf	??_OUTInit,w
  8438  0F23  058D               	andwf	13,f	;volatile
  8439  0F24  018E               	clrf	14	;volatile
  8440  0F25  30DF               	movlw	223
  8441  0F26  00F1               	movwf	??_OUTInit
  8442  0F27  0871               	movf	??_OUTInit,w
  8443  0F28  0020               	movlb	0	; select bank0
  8444  0F29  058D               	andwf	13,f	;volatile
  8445  0F2A  178E               	bsf	14,7	;volatile
  8446                           
  8447                           ;OUT.c: 20: }
  8448                           
  8449                           ;OUT.c: 13: break;
  8450  0F2B  0008               	return
  8451  0F2C                     l2304:	
  8452  0F2C  0872               	movf	OUTInit@sta,w
  8453                           
  8454                           ; Switch size 1, requested type "space"
  8455                           ; Number of cases is 1, Range of values is 0 to 0
  8456                           ; switch strategies available:
  8457                           ; Name         Instructions Cycles
  8458                           ; simple_byte            4     3 (average)
  8459                           ; direct_byte            8     6 (fixed)
  8460                           ; jumptable            260     6 (fixed)
  8461                           ;	Chosen strategy is simple_byte
  8462  0F2D  3A00               	xorlw	0	; case 0
  8463  0F2E  1903               	skipnz
  8464  0F2F  2F14               	goto	l2290
  8465  0F30  2F31               	goto	l36
  8466  0F31                     l36:	
  8467  0F31  0008               	return
  8468  0F32                     __end_of_OUTInit:	
  8469                           
  8470                           	psect	text51
  8471  0DCC                     __ptext51:	
  8472 ;; *************** function _INInit *****************
  8473 ;; Defined at:
  8474 ;;		line 7 in file "IN.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;  sta             1    wreg     unsigned char 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  sta             1    2[COMMON] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        2 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    2
  8495 ;; This function calls:
  8496 ;;		Nothing
  8497 ;; This function is called by:
  8498 ;;		_main
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           
  8503                           ;psect for function _INInit
  8504  0DCC                     _INInit:	
  8505                           
  8506                           ;incstack = 0
  8507                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  8508                           ;INInit@sta stored from wreg
  8509  0DCC  00F2               	movwf	INInit@sta
  8510                           
  8511                           ;IN.c: 8: switch(sta)
  8512  0DCD  2DDD               	goto	l2286
  8513  0DCE                     l2278:	
  8514                           ;IN.c: 9: {
  8515                           ;IN.c: 10: case 0:
  8516                           
  8517                           
  8518                           ;IN.c: 12: TRISB|=0b00010111; TRISC|=0b00010000; ANSELB&=0b11111010; WPUB=0b00000111;
  8519  0DCE  3017               	movlw	23
  8520  0DCF  00F1               	movwf	??_INInit
  8521  0DD0  0871               	movf	??_INInit,w
  8522  0DD1  0021               	movlb	1	; select bank1
  8523  0DD2  048D               	iorwf	13,f	;volatile
  8524  0DD3  160E               	bsf	14,4	;volatile
  8525  0DD4  30FA               	movlw	250
  8526  0DD5  00F1               	movwf	??_INInit
  8527  0DD6  0871               	movf	??_INInit,w
  8528  0DD7  0023               	movlb	3	; select bank3
  8529  0DD8  058D               	andwf	13,f	;volatile
  8530  0DD9  3007               	movlw	7
  8531  0DDA  0024               	movlb	4	; select bank4
  8532  0DDB  008D               	movwf	13	;volatile
  8533                           
  8534                           ;IN.c: 20: }
  8535                           
  8536                           ;IN.c: 13: break;
  8537  0DDC  0008               	return
  8538  0DDD                     l2286:	
  8539  0DDD  0872               	movf	INInit@sta,w
  8540                           
  8541                           ; Switch size 1, requested type "space"
  8542                           ; Number of cases is 1, Range of values is 0 to 0
  8543                           ; switch strategies available:
  8544                           ; Name         Instructions Cycles
  8545                           ; simple_byte            4     3 (average)
  8546                           ; direct_byte            8     6 (fixed)
  8547                           ; jumptable            260     6 (fixed)
  8548                           ;	Chosen strategy is simple_byte
  8549  0DDE  3A00               	xorlw	0	; case 0
  8550  0DDF  1903               	skipnz
  8551  0DE0  2DCE               	goto	l2278
  8552  0DE1  2DE2               	goto	l14
  8553  0DE2                     l14:	
  8554  0DE2  0008               	return
  8555  0DE3                     __end_of_INInit:	
  8556                           
  8557                           	psect	intentry
  8558  0004                     __pintentry:	
  8559 ;; *************** function _INTIsr *****************
  8560 ;; Defined at:
  8561 ;;		line 38 in file "Sensore.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;		None
  8566 ;; Return value:  Size  Location     Type
  8567 ;;		None               void
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0, pclath, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;Total ram usage:        1 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    1
  8582 ;; This function calls:
  8583 ;;		_SYSInt
  8584 ;; This function is called by:
  8585 ;;		Interrupt level 1
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589  0004                     _INTIsr:	
  8590                           
  8591                           ;incstack = 0
  8592                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  8593  0004  3180               	pagesel	$
  8594  0005  0020               	movlb	0	; select bank0
  8595  0006  087F               	movf	127,w
  8596  0007  00F0               	movwf	??_INTIsr
  8597                           
  8598                           ;Sensore.c: 40: if(INTCONbits.T0IF==1)
  8599  0008  1D0B               	btfss	11,2	;volatile
  8600  0009  280D               	goto	i1l3222
  8601                           
  8602                           ;Sensore.c: 41: {
  8603                           ;Sensore.c: 43: INTCONbits.T0IF=0;
  8604  000A  110B               	bcf	11,2	;volatile
  8605                           
  8606                           ;Sensore.c: 46: SYSInt();
  8607  000B  318C  24D3         	fcall	_SYSInt
  8608  000D                     i1l3222:	
  8609                           
  8610                           ;Sensore.c: 47: }
  8611                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  8612  000D  0027               	movlb	7	; select bank7
  8613  000E  1916               	btfsc	22,2	;volatile
  8614                           
  8615                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  8616  000F  1116               	bcf	22,2	;volatile
  8617  0010  0870               	movf	??_INTIsr,w
  8618  0011  0020               	movlb	0	; select bank0
  8619  0012  00FF               	movwf	127
  8620  0013  0009               	retfie
  8621  0014                     __end_of_INTIsr:	
  8622                           
  8623                           	psect	text53
  8624  0CD3                     __ptext53:	
  8625 ;; *************** function _SYSInt *****************
  8626 ;; Defined at:
  8627 ;;		line 36 in file "SYS.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;		None
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;		None
  8632 ;; Return value:  Size  Location     Type
  8633 ;;		None               void
  8634 ;; Registers used:
  8635 ;;		wreg
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;Total ram usage:        0 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		_INTIsr
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           
  8655                           ;psect for function _SYSInt
  8656  0CD3                     _SYSInt:	
  8657                           
  8658                           ;SYS.c: 38: u_SYS_STA.TICK=1;
  8659                           
  8660                           ;incstack = 0
  8661                           ; Regs used in _SYSInt: [wreg]
  8662  0CD3  0021               	movlb	1	; select bank1
  8663  0CD4  142F               	bsf	_u_SYS_STA^(0+128),0
  8664                           
  8665                           ;SYS.c: 41: TMR0=255-156;
  8666  0CD5  3063               	movlw	99
  8667  0CD6  0020               	movlb	0	; select bank0
  8668  0CD7  0095               	movwf	21	;volatile
  8669  0CD8  0008               	return
  8670  0CD9                     __end_of_SYSInt:	
  8671  007E                     btemp	set	126	;btemp
  8672  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    5
    Data        55
    BSS         50
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80      0      50
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), CC1Write@cc1Addr(BANK0[1]), 
		 -> CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _CC1Init->_CC1LoadREG
    _CC1LoadREG->_CC1Write
    _PGMSelLong->_PGMWriteNvm
    _PGMSelDown->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _RTXReadPkt->_CC1Read
    _RTXReadPkt->_PGMWriteNvm
    _RTXRcvPkt->_CC1Read
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _CC1Read->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _ADCConv->___awtoft
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _LEDNormalFlash->_DLYDelay_ms
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PGMInit
    _SYSTask->_PGMSelDown
    _RTXAwake->_RTXInit
    _CC1LoadREG->_CC1Write
    _RTXTick->_RTXSendData
    _RTXTask->_RTXReadPkt
    _RTXSendRPgm->_RTXSndPkt
    _RTXStartSendData->_ADCConv
    _RTXSendData->___ftadd
    _RTXSndPkt->_CC1Write
    _ADCConv->___ftadd
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    ___ftadd->___ftdiv
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   31815
                                             71 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _CC1Init
                            _LEDInit
                            _NVMInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   12658
                            _DINTick
                           _SLPSleep
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _RTXTick
                           _RTXAwake
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0    7882
                        _DLYDelay_ms
                            _CC1Init
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0    7257
                                             58 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              1     1      0     557
                                              2 BANK0      1     1      0
                        _DLYDelay_ms
                          _CC1Strobe
                         _CC1LoadREG
 ---------------------------------------------------------------------------------
 (4) _CC1LoadREG                                           1     1      0     260
                                             11 COMMON     1     1      0
                           _CC1Write
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    2991
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           0     0      0     724
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     473
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   10005
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0   10005
                                             69 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                   _RTXStartSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0    7028
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (5) _RTXSendData                                          7     7      0    2991
                                             48 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) _RTXSndPkt                                            6     5      1    1114
                                              2 BANK0      6     5      1
                          _CC1Strobe
                            _CC1Read
                           _CC1Write
 ---------------------------------------------------------------------------------
 (7) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (7) _CC1Read                                              5     3      2     390
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIRead                                              5     4      1     130
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (6) _LEDFastFlash                                         3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             13    13      0    3969
                                             48 BANK0     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     162
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6     800
                                              3 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6     732
                                             19 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    1537
                                             35 BANK0     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3     445
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (7) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTIsr                                               1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (10) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _CC1Init
     _DLYDelay_ms
     _CC1Strobe
       _SPIWrite
     _CC1LoadREG
       _CC1Write
         _SPIWrite
   _LEDInit
   _NVMInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         ___awtoft
           ___ftpack
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
         ___ftdiv
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
         ___ftmul
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
         ___lwdiv
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendData
         _ADCConv
           ___awtoft
             ___ftpack
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftdiv
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
           ___lwdiv
         _DLYDelay_ms
         _RTXSendData
           _LEDFastFlash
             _DLYDelay_ms
           _RTXSndPkt
             _CC1Strobe
               _SPIWrite
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Write
               _SPIWrite
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
   _SYSInit
   _SYSTask
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMTick
     _PGMPgmOff
     _PGMSelDown
       _PGMWriteNvm
         _NVMWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
     _RTXAwake
       _DLYDelay_ms
       _CC1Init
         _DLYDelay_ms
         _CC1Strobe
           _SPIWrite
         _CC1LoadREG
           _CC1Write
             _SPIWrite
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             ___awtoft
               ___ftpack
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftdiv
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
             ___lwdiv
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Strobe
                 _SPIWrite
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Write
                 _SPIWrite
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      32       7       62.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BE      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CA      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Nov 10 16:39:41 2014

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000            SLPSleep@WPUBTmp 0022  
                       l14 0DE2                         l36 0F31                         l60 0EB7  
            ?_LEDFastFlash 0070                         l56 0E9C                         l65 0F3D  
                       l74 0E90               ?_DLYDelay_ms 0071               ___ftadd@exp1 004F  
             ___ftadd@exp2 004E               ___ftadd@sign 004D                        l111 07AC  
                      l120 00CF                        l124 0188                        l116 0048  
                      l230 0D19                        l242 0294                        l235 0FEF  
                      l139 0E15                        l252 02DD                        l244 029F  
                      l245 02C3                        l190 0D06                        l262 033D  
                      l246 02AE                        l510 0521                        l167 0E60  
                      l192 0D0E                        l257 0324                        l249 02D4  
                      l290 07C2                        l259 032B                        l292 07C1  
                      l373 0DFA                        l287 0D6D                        l483 0642  
                      l468 0FD9                        l593 07FA                        l834 05D2  
                      l828 05BB                        l676 069D                        l677 06DE  
                      l678 06DF                        l857 022C            __end_of_CC1Init 0E61  
          __end_of_CC1Read 0E7D            __end_of_ADCConv 018D            __end_of_ADCInit 07AD  
             __CFG_BORV$LO 0000                        wreg 0009                 _RTXReadPkt 05E9  
          __end_of_DINInit 0D6E            __end_of_DINTask 0ED6            __end_of_DINTick 07D5  
             __CFG_LVP$OFF 0000           _RTXStartSendData 0D4E            __end_of_LEDInit 0D0F  
             ___ftdiv@cntr 003D               ___ftdiv@sign 0042                       l2304 0F2C  
                     l3200 06F2                       l3202 06FE                       l2324 0EAC  
                     l3212 0719                       l2350 0791                       l2504 0D11  
                     l2600 0D68                       l3208 0710                       l3312 0169  
                     l2290 0F14                       l2346 0783                       l2522 0FDD  
                     l3322 017F                       l3330 0E49                       l2508 0D14  
                     l3260 0F34                       l2278 0DCE                       l2286 0DDD  
                     l2358 07A4                       l2470 0D09                       l3318 017C  
                     l2640 0ED0                       l2632 0EC8                       l3256 0F42  
                     l2570 0300                       l3290 00C8                       l3266 0E95  
                     l3522 04A9                       l3434 0555                       l3338 0E57  
                     l2636 0ECC                       l3268 0E7E                       l3462 0D23  
                     l3446 0DE6                       l3286 00BB                       l2910 07EF  
                     l2584 0326                       l2592 0338                       l2576 0306  
                     l3448 0DE9                       l3456 0DF1                       l3384 0ED8  
                     l3712 0598                       l3800 023E                       l3616 065D  
                     l3552 051B                       l3722 05C0                       l3714 05A2  
                     l3394 0EF6                       l2914 07F2                       l3490 0FB9  
                     l2596 0D5F                       l3724 05C8                       l3716 05A7  
                     l3708 0591                       l3804 0250                       l3900 03CD  
                     l3492 0FBE                       l3652 0734                       l3742 0F5D  
                     l3814 026B                       l3830 0422                       l3670 074B  
                     l3646 072D                       l3824 040C                       l3584 0628  
                     l3664 0744                       l3754 01B5                       l3498 0FCD  
                     l3658 073B                       l3764 01CB                       l3852 047C  
                     l3844 0463                       l2892 07D7                       l3782 01F8  
                     l3758 01BC                       l3784 0202                       l3776 01E5  
                     l3872 036E                       l3794 021E                       l3786 0207  
                     l3866 0358                       l3796 0228                       l3788 020B  
                     l3884 03A9                       l3896 03C5                       l3888 03B1  
             __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020                       u3015 05B6  
                     u3035 05C3                       u3215 01F9                       u3065 05D9  
                     u2505 06F5                       u3245 020C                       u2525 06FF  
                     u2535 0709                       _PIE1 0091                       _PIE2 0092  
                     u3185 01E6                       u3345 0434                       u3505 03D4  
                     u3425 037A                       u2545 0711                       u3275 021F  
                     u3355 0444                       u3435 038A                       u3365 0464  
                     u2655 0E1B                       u3375 0473                       u3455 03B2  
                     u3527 00CB                       u3385 047D                       u3465 03B8  
                     u3537 0179                       u3547 0E22                       u3495 03CE  
                     _PIR1 0011                       _PIR2 0012                       u2995 059D  
                     _TMR0 0015                       _WPUB 020D            __end_of_PGMInit 0DFB  
          __end_of_PGMTick 0D33               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
         __end_of_CC1Sleep 0CF3                       _batt 0069                       _main 0697  
         __end_of_CC1Write 0F94               ___ftpack@arg 0071            __end_of_NVMInit 0D1A  
          __end_of_NVMRead 1000               ___ftpack@exp 0074                       _temp 00AD  
          __end_of_SPIInit 0EB8            __end_of_SPIRead 0F52                       fsr0h 0005  
                     fsr1h 0007                       fsr0l 0004                       indf0 0000  
                     indf1 0001                       fsr1l 0006                       btemp 007E  
          __end_of_OUTInit 0F32              __CFG_BOREN$ON 0000                       start 0014  
          __end_of_RTXInit 0FDA          NVMWrite@latchAddr 0063            __end_of_RTXTask 0CDF  
          __end_of_RTXTick 0D40              __CFG_IESO$OFF 0000            __end_of_SYSInit 07FB  
          __end_of_SYSTask 0752               ___ftmul@cntr 0031               ___ftmul@sign 0032  
             _ADCConv$1367 0056                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelDown 0070                ?_PGMSelLong 0070  
              _RTXSendData 049E                _RTXSendRPgm 0F94               SPIInit@state 0072  
                    ?_main 0070            __end_of___ftadd 0283            __end_of___ftdiv 049E  
          __end_of___ftmul 03F5                      _T1CON 0018         __size_of_PGMPgmOff 0004  
                    _IOCBN 0395                      _IOCBP 0394            __end_of___lwdiv 0720  
                    _PMADR 0191                      _PMDAT 0193                      _TMR1H 0017  
                    _TMR1L 0016                      _PORTB 000D                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
            __CFG_PWRTE$ON 0000                      _battV 00A0                _sys_pgm_sta 00AC  
            ___awtoft@sign 0022          __end_of_CC1Strobe 0DCC                      _tempC 00A3  
                    _pktRx 00B3                      _pktTx 00BC              ___ftpack@sign 0075  
                    main@i 0068           __end_of_SLPSleep 0589           __end_of_NVMWrite 0341  
         __end_of_SPIWrite 0E9A           __end_of_RTXAwake 0E46          LEDNormalFlash@num 0078  
                    status 0003                      wtemp0 007E               ?_PGMCheckNvm 0070  
           __CFG_MCLRE$OFF 0000            __initialization 0016               DLYDelay_ms@i 0075  
             __end_of_main 06EA         __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0057  
                ??_CC1Init 007C                  ??_CC1Read 0079                  ??_ADCConv 0050  
                ??_ADCInit 0071             CC1Strobe@e_stb 0078               ??_CC1LoadREG 007B  
                   ??_main 0067                 _cc1PaTable 00CA               CC1Init@state 0022  
                ??_DINInit 0071               NVMWrite@addr 0071                  ??_DINTask 0071  
                ??_DINTick 0071                 _cc1InitVal 0120                  ??_LEDInit 0071  
             ?_PGMNvmReset 0070                  ??_PGMInit 007C                  ??_PGMTick 0071  
              ?_RTXReadPkt 0070                     _ADCON0 009D                     _ADCON1 009E  
            SPIRead@dstPtr 0074                  ??_NVMInit 0071                  ??_NVMRead 0075  
                   _ADRESH 009C                  ??_SPIInit 0071                  ??_SPIRead 0072  
           _LEDNormalFlash 0ED6                  ??_OUTInit 0071           __end_of___awtoft 0F73  
                   _ANSELA 018C                     _ANSELB 018D                     _ANSELC 018E  
         __end_of___ftpack 05E9        __size_of_PGMReadNvm 0013                  ??_RTXInit 007C  
                   i1l3222 000D               ?_PGMWriteNvm 0070        __size_of_PGMSelDown 0011  
                ??_RTXTask 007C                  ??_RTXTick 007C        __size_of_PGMSelLong 0009  
                   _INTCON 000B                     _FVRCON 0117                  ??_SYSInit 0071  
                   _PMCON1 0195                     _PMCON2 0196                  ??_SYSTask 007C  
                   _INTIsr 0004                     _OSCCON 0099                     _INInit 0DCC  
                   _WDTCON 0097                     _SSPBUF 0211              LEDFastFlash@i 0079  
        __end_of_PGMPgmOff 07FF                     _SYSInt 0CD3         __end_of_CC1LoadREG 0E13  
      RTXReadPkt@numRxByte 0066                     _adc_ch 00A8                  ??___ftadd 0049  
           __CFG_STVREN$ON 0000                  ??___ftdiv 0039                  ??___ftmul 0029  
                ??___lwdiv 0075                     _tmrPgm 006C      ___ftmul@f3_as_product 002E  
                ?_CC1Sleep 0070       __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077  
   __end_of_LEDNormalFlash 0EF4          __end_of_RTXRcvPkt 0D4E          __end_of_RTXSndPkt 0697  
     __end_of_LEDFastFlash 0F12    __end_of__initialization 003E                 ___ftadd@f1 0043  
               ___ftadd@f2 0046                 ___ftdiv@f1 0036                 ___ftdiv@f2 0033  
               ___ftdiv@f3 003E                 ___awtoft@c 0079                 ___ftmul@f1 0023  
               ___ftmul@f2 0026             __pcstackCOMMON 0070               __pidataBANK1 0CF3  
             __pidataBANK2 0752        __size_of_RTXReadPkt 0057   __end_of_RTXStartSendData 0D5D  
          NVMWrite@rowAddr 0060                  ?_SLPSleep 0070                  ?_NVMWrite 0071  
          CC1Strobe@cc1Stb 0079                  ?_SPIWrite 0071                 CC1Read@len 0078  
               CC1Read@dst 0077                 ??_CC1Sleep 007A                  ?_RTXAwake 0070  
               ??_CC1Write 007A               CC1Write@addr 0020             ADCConv@sumBatt 0052  
           ADCConv@sumTemp 0054            ?_LEDNormalFlash 0070                 __pbssBANK0 0069  
               __pbssBANK1 00A0                    ?_INTIsr 0070                    ?_INInit 0070  
          __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070                  INInit@sta 0072  
     __size_of_PGMCheckNvm 000C                 __pmaintext 0697               ??_PGMReadNvm 0078  
          CC1Write@cc1Addr 0021               ??_PGMSelDown 0065               ??_PGMSelLong 007C  
               __pintentry 0004               ?_RTXSendData 0070               ?_RTXSendRPgm 0070  
                  _CC1Init 0E46                    _CC1Read 0E61                    _ADCConv 0041  
                  _ADCInit 0781          _u_in_sta_currTask 007C                  ?___awtoft 0079  
                ?___ftpack 0071                 ??_SLPSleep 007A                 ??_NVMWrite 0075  
               _cntSndData 00A9                 ??_SPIWrite 0074                    _DINInit 0D5D  
               ??_RTXAwake 007C                    _DINTick 07AD                    _DINTask 0EB8  
             ADCInit@state 0072                    _LEDInit 0D04         RTXSendData@valBatt 0051  
                  _PGMInit 0DE3                    _PGMTick 0D26         RTXSendData@valTemp 0054  
     __size_of_PGMNvmReset 0013                    _SSPCON1 0215                    _SSPCON2 0216  
                  _NVMInit 0D0F                    _NVMRead 0FDA                    _SPIInit 0E9A  
                  _SPIRead 0F32                    _SSPSTAT 0214                    _OUTInit 0F12  
               __stringtab 0800                    _RTXInit 0FB6                    _RTXTick 0D33  
                  _RTXTask 0CD9         __end_of_PGMReadNvm 0D92                    _SYSInit 07D5  
                  _SYSTask 0720         __end_of_PGMSelDown 0D7F         __end_of_PGMSelLong 0D04  
                _CC1Strobe 0DB8            __size_of_INTIsr 0010            __size_of_INInit 0017  
     __size_of_PGMWriteNvm 0013            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064                  SPIWrite@i 0076                    ___ftadd 018D  
             RTXInit@state 005A                    ___ftdiv 03F5                    ___ftmul 0341  
                  ___lwdiv 06EA                 ??___awtoft 0020                 ??___ftpack 0076  
                  __ptext1 0720                    __ptext2 0E2C                    __ptext3 0FB6  
                  __ptext4 0E46                    __ptext5 0DFB                    __ptext6 0D33  
                  __ptext7 0CFB                    __ptext8 0D6E                    __ptext9 07FB  
                  _flg_slp 006A                    _pgm_cfg 00C5                    _pgm_flg 006B  
    __size_of_LEDFastFlash 001E                  _IOCBFbits 0396               ??_RTXReadPkt 0065  
                  clrloop0 0CE6                    _rtx_flg 00AA               RTXRcvPkt@len 0020  
             RTXRcvPkt@dst 0023       end_of_initialization 003E                 _u_in_ev_up 00B2  
               ?_CC1Strobe 0070         RTXSndPkt@numRxByte 0025                    init_ram 0CDF  
       RTXSndPkt@numTxByte 0026                    initloop 0CE0               RTXSndPkt@len 0022  
             RTXSndPkt@src 0024               RTXSndPkt@sta 0027                  _PGMPgmOff 07FB  
               _tmrDbncSel 00AE         __end_of_RTXReadPkt 0640                 DINInit@sta 0071  
             _LEDFastFlash 0EF4                  _PORTAbits 000C                  _PORTBbits 000D  
                _PORTCbits 000E                 _tmrLongSel 00A6           __CFG_FOSC$INTOSC 0000  
        __size_of_CC1Sleep 0008          __size_of_CC1Write 0021                NVMRead@addr 0071  
              NVMRead@dest 0073                  _RTXRcvPkt 0D40                  _RTXSndPkt 0640  
              ___ftdiv@exp 0041             __end_of_INTIsr 0014             __end_of_INInit 0DE3  
           __end_of_SYSInt 0CD9                ___ftmul@exp 002D                 ?_PGMPgmOff 0070  
               LEDInit@sta 0071             DLYDelay_ms@val 0071          ?_RTXStartSendData 0070  
            ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C       __size_of_RTXSendData 0086  
         ??_LEDNormalFlash 0077       __size_of_RTXSendRPgm 0022               SYSInit@state 0072  
        __size_of_SLPSleep 0065          __size_of_NVMWrite 00BE          __size_of_SPIWrite 001D  
      start_initialization 0016          __size_of_RTXAwake 001A                CC1Read@addr 007A  
              NVMWrite@len 0074                   ??_INTIsr 0070                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022  
                 ??_SYSInt 0070             CC1Read@cc1Addr 007B                   ?_CC1Init 0070  
              __pdataBANK1 00CA                   ?_CC1Read 0077                __pdataBANK2 0120  
              SPIWrite@len 0073                   ?_ADCConv 0070                   ?_ADCInit 0070  
                 ?_DINInit 0070                   ?_DINTask 0070                   ?_DINTick 0070  
        __size_of___awtoft 0021          __size_of___ftpack 0060                   ?_LEDInit 0070  
              __pbssCOMMON 007C              __pcstackBANK0 0020        __end_of_DLYDelay_ms 0E2C  
                _s_CC1_FLG 00AB                   ?_PGMInit 0070                   ?_PGMTick 0070  
                 ?_NVMInit 0070                   ?_NVMRead 0071                   ?_SPIInit 0070  
            ADCConv@cntSum 0059                   ?_SPIRead 0071             NVMWrite@source 0073  
                 ?_OUTInit 0070               PGMInit@state 0066                   ?_RTXInit 0070  
                 ?_RTXTask 0070                   ?_RTXTick 0070                CC1Write@len 0079  
                 ?_SYSInit 0070                CC1Write@src 0077                   ?_SYSTask 0070  
            ??_PGMCheckNvm 007C           ___lwdiv@dividend 0073                ??_PGMPgmOff 0071  
                 ?___ftadd 0043                   ?___ftdiv 0033                   ?___ftmul 0023  
                 ?___lwdiv 0071                  _u_SYS_STA 00AF                  __pstrings 0800  
         _u_in_sta_tmpTask 006F                   NVMRead@i 0077                   _CC1Sleep 0CEB  
            ??_PGMNvmReset 0065                   SPIRead@i 0075                   _CC1Write 0F73  
         ___lwdiv@quotient 0076              ??_PGMWriteNvm 0078                  _u_flg_din 006E  
              ??_RTXRcvPkt 0021                ??_RTXSndPkt 0023                  clear_ram0 0CE5  
                 _PIR1bits 0011        __end_of_PGMCheckNvm 0D26      SLPSleep@OPTION_REGTmp 0024  
                _tmrRcvPkt 006D           __size_of_CC1Init 001B           __size_of_CC1Read 001C  
                 _SLPSleep 0524                _DLYDelay_ms 0E13                 _CC1LoadREG 0DFB  
                 _NVMWrite 0283           __size_of_ADCConv 014C           __size_of_ADCInit 002C  
               _ADCON0bits 009D                   _SPIWrite 0E7D                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078                   _RTXAwake 0E2C  
         __size_of_DINInit 0011           __size_of_DINTask 001E           __size_of_DINTick 0028  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0018  
         __size_of_PGMTick 000D        __end_of_PGMNvmReset 0DB8           __size_of_NVMInit 000B  
         __size_of_NVMRead 0026           __size_of_SPIInit 001E           __size_of_SPIRead 0020  
             _u_in_ev_down 00B0            LEDNormalFlash@i 0079               _u_in_ev_long 00B1  
         __size_of_OUTInit 0020           __size_of_RTXInit 0024           __size_of_RTXTask 0006  
         __size_of_RTXTick 000D           __size_of_SYSInit 0026           __size_of_SYSTask 0032  
               OUTInit@sta 0072        __end_of_PGMWriteNvm 0DA5           __size_of___ftadd 00F6  
         __size_of___ftdiv 00A9           __size_of___ftmul 00B4           __size_of___lwdiv 0036  
                 ___awtoft 0F52                   ___ftpack 0589         __end_of__stringtab 0801  
          ___lwdiv@divisor 0071            ___lwdiv@counter 0078                   __ptext10 0D26  
                 __ptext11 0524                   __ptext20 049E                   __ptext12 0CEB  
                 __ptext21 0640                   __ptext13 07AD                   __ptext30 0341  
                 __ptext22 0F73                   __ptext14 07D5                   __ptext31 03F5  
                 __ptext23 0E61                   __ptext15 0CD9                   __ptext40 0D92  
                 __ptext32 018D                   __ptext24 0F32                   __ptext16 05E9  
                 __ptext41 0283                   __ptext33 0F52                   __ptext25 0DB8  
                 __ptext17 0F94                   __ptext50 0F12                   __ptext42 0D7F  
                 __ptext34 0589                   __ptext26 0E7D                   __ptext18 0D40  
                 __ptext51 0DCC                   __ptext43 0FDA                   __ptext35 0ED6  
                 __ptext27 0EF4                   __ptext19 0D4E                   __ptext44 0EB8  
                 __ptext36 0E13                   __ptext28 0041                   __ptext53 0CD3  
                 __ptext45 0D5D                   __ptext37 0DE3                   __ptext29 06EA  
                 __ptext46 0D0F                   __ptext38 0D1A                   __ptext47 0D04  
                 __ptext39 0DA5                   __ptext48 0781                   __ptext49 0E9A  
__size_of_RTXStartSendData 000F        __end_of_nvm_pgm_cfg 0806              __size_of_main 0053  
              _PGMCheckNvm 0D1A              ??_RTXSendData 0050              ??_RTXSendRPgm 0028  
        SLPSleep@ADCON0Tmp 0026                ?_CC1LoadREG 0070                _PGMNvmReset 0DA5  
               _INTCONbits 000B             SPIWrite@srcPtr 0071                   intlevel1 0000  
              _PGMWriteNvm 0D92                 _PMCON1bits 0195          __CFG_CLKOUTEN$OFF 0000  
      SLPSleep@TESTBATTtmp 0027                 _PGMReadNvm 0D7F                 _PGMSelDown 0D6E  
               _PGMSelLong 0CFB          SLPSleep@INTCONTmp 0021          SLPSleep@FVRCONTmp 0025  
               _OPTION_REG 0095        __end_of_RTXSendData 0524        __end_of_RTXSendRPgm 0FB6  
              _nvm_pgm_cfg 0801           SLPSleep@IOCBNTmp 0020    __size_of_LEDNormalFlash 001E  
      __size_of_CC1LoadREG 0018          SLPSleep@WDTCONTmp 0023                 _SSPCONbits 0215  
