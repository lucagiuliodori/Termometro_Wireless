

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Nov 10 16:49:11 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	intentry,global,class=CODE,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	dabs	1,0x7E,2
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  0010                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001C                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  0116                     	;# 
   141  0117                     	;# 
   142  011D                     	;# 
   143  018C                     	;# 
   144  018D                     	;# 
   145  018E                     	;# 
   146  0191                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0193                     	;# 
   150  0193                     	;# 
   151  0194                     	;# 
   152  0195                     	;# 
   153  0196                     	;# 
   154  0197                     	;# 
   155  0199                     	;# 
   156  019A                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019C                     	;# 
   163  019D                     	;# 
   164  019E                     	;# 
   165  019F                     	;# 
   166  020D                     	;# 
   167  0210                     	;# 
   168  0211                     	;# 
   169  0211                     	;# 
   170  0212                     	;# 
   171  0212                     	;# 
   172  0213                     	;# 
   173  0213                     	;# 
   174  0214                     	;# 
   175  0214                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0215                     	;# 
   179  0216                     	;# 
   180  0216                     	;# 
   181  0217                     	;# 
   182  0217                     	;# 
   183  0291                     	;# 
   184  0291                     	;# 
   185  0292                     	;# 
   186  0293                     	;# 
   187  0298                     	;# 
   188  0298                     	;# 
   189  0299                     	;# 
   190  029A                     	;# 
   191  0394                     	;# 
   192  0395                     	;# 
   193  0396                     	;# 
   194  0FE4                     	;# 
   195  0FE5                     	;# 
   196  0FE6                     	;# 
   197  0FE7                     	;# 
   198  0FE8                     	;# 
   199  0FE9                     	;# 
   200  0FEA                     	;# 
   201  0FEB                     	;# 
   202  0FED                     	;# 
   203  0FEE                     	;# 
   204  0FEF                     	;# 
   205  0000                     	;# 
   206  0001                     	;# 
   207  0002                     	;# 
   208  0003                     	;# 
   209  0004                     	;# 
   210  0005                     	;# 
   211  0006                     	;# 
   212  0007                     	;# 
   213  0008                     	;# 
   214  0009                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000D                     	;# 
   219  000E                     	;# 
   220  0010                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0015                     	;# 
   224  0016                     	;# 
   225  0016                     	;# 
   226  0017                     	;# 
   227  0018                     	;# 
   228  0019                     	;# 
   229  001A                     	;# 
   230  001B                     	;# 
   231  001C                     	;# 
   232  008C                     	;# 
   233  008D                     	;# 
   234  008E                     	;# 
   235  0090                     	;# 
   236  0091                     	;# 
   237  0092                     	;# 
   238  0095                     	;# 
   239  0096                     	;# 
   240  0097                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009B                     	;# 
   245  009C                     	;# 
   246  009D                     	;# 
   247  009E                     	;# 
   248  010C                     	;# 
   249  010D                     	;# 
   250  010E                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  011D                     	;# 
   254  018C                     	;# 
   255  018D                     	;# 
   256  018E                     	;# 
   257  0191                     	;# 
   258  0191                     	;# 
   259  0192                     	;# 
   260  0193                     	;# 
   261  0193                     	;# 
   262  0194                     	;# 
   263  0195                     	;# 
   264  0196                     	;# 
   265  0197                     	;# 
   266  0199                     	;# 
   267  019A                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019B                     	;# 
   272  019C                     	;# 
   273  019C                     	;# 
   274  019D                     	;# 
   275  019E                     	;# 
   276  019F                     	;# 
   277  020D                     	;# 
   278  0210                     	;# 
   279  0211                     	;# 
   280  0211                     	;# 
   281  0212                     	;# 
   282  0212                     	;# 
   283  0213                     	;# 
   284  0213                     	;# 
   285  0214                     	;# 
   286  0214                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0215                     	;# 
   290  0216                     	;# 
   291  0216                     	;# 
   292  0217                     	;# 
   293  0217                     	;# 
   294  0291                     	;# 
   295  0291                     	;# 
   296  0292                     	;# 
   297  0293                     	;# 
   298  0298                     	;# 
   299  0298                     	;# 
   300  0299                     	;# 
   301  029A                     	;# 
   302  0394                     	;# 
   303  0395                     	;# 
   304  0396                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  0010                     	;# 
   332  0011                     	;# 
   333  0012                     	;# 
   334  0015                     	;# 
   335  0016                     	;# 
   336  0016                     	;# 
   337  0017                     	;# 
   338  0018                     	;# 
   339  0019                     	;# 
   340  001A                     	;# 
   341  001B                     	;# 
   342  001C                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  0090                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0099                     	;# 
   353  009A                     	;# 
   354  009B                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010E                     	;# 
   362  0116                     	;# 
   363  0117                     	;# 
   364  011D                     	;# 
   365  018C                     	;# 
   366  018D                     	;# 
   367  018E                     	;# 
   368  0191                     	;# 
   369  0191                     	;# 
   370  0192                     	;# 
   371  0193                     	;# 
   372  0193                     	;# 
   373  0194                     	;# 
   374  0195                     	;# 
   375  0196                     	;# 
   376  0197                     	;# 
   377  0199                     	;# 
   378  019A                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019B                     	;# 
   383  019C                     	;# 
   384  019C                     	;# 
   385  019D                     	;# 
   386  019E                     	;# 
   387  019F                     	;# 
   388  020D                     	;# 
   389  0210                     	;# 
   390  0211                     	;# 
   391  0211                     	;# 
   392  0212                     	;# 
   393  0212                     	;# 
   394  0213                     	;# 
   395  0213                     	;# 
   396  0214                     	;# 
   397  0214                     	;# 
   398  0215                     	;# 
   399  0215                     	;# 
   400  0215                     	;# 
   401  0216                     	;# 
   402  0216                     	;# 
   403  0217                     	;# 
   404  0217                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0298                     	;# 
   410  0298                     	;# 
   411  0299                     	;# 
   412  029A                     	;# 
   413  0394                     	;# 
   414  0395                     	;# 
   415  0396                     	;# 
   416  0FE4                     	;# 
   417  0FE5                     	;# 
   418  0FE6                     	;# 
   419  0FE7                     	;# 
   420  0FE8                     	;# 
   421  0FE9                     	;# 
   422  0FEA                     	;# 
   423  0FEB                     	;# 
   424  0FED                     	;# 
   425  0FEE                     	;# 
   426  0FEF                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  000E                     	;# 
   442  0010                     	;# 
   443  0011                     	;# 
   444  0012                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  0090                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0095                     	;# 
   461  0096                     	;# 
   462  0097                     	;# 
   463  0099                     	;# 
   464  009A                     	;# 
   465  009B                     	;# 
   466  009B                     	;# 
   467  009C                     	;# 
   468  009D                     	;# 
   469  009E                     	;# 
   470  010C                     	;# 
   471  010D                     	;# 
   472  010E                     	;# 
   473  0116                     	;# 
   474  0117                     	;# 
   475  011D                     	;# 
   476  018C                     	;# 
   477  018D                     	;# 
   478  018E                     	;# 
   479  0191                     	;# 
   480  0191                     	;# 
   481  0192                     	;# 
   482  0193                     	;# 
   483  0193                     	;# 
   484  0194                     	;# 
   485  0195                     	;# 
   486  0196                     	;# 
   487  0197                     	;# 
   488  0199                     	;# 
   489  019A                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019C                     	;# 
   495  019C                     	;# 
   496  019D                     	;# 
   497  019E                     	;# 
   498  019F                     	;# 
   499  020D                     	;# 
   500  0210                     	;# 
   501  0211                     	;# 
   502  0211                     	;# 
   503  0212                     	;# 
   504  0212                     	;# 
   505  0213                     	;# 
   506  0213                     	;# 
   507  0214                     	;# 
   508  0214                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0216                     	;# 
   513  0216                     	;# 
   514  0217                     	;# 
   515  0217                     	;# 
   516  0291                     	;# 
   517  0291                     	;# 
   518  0292                     	;# 
   519  0293                     	;# 
   520  0298                     	;# 
   521  0298                     	;# 
   522  0299                     	;# 
   523  029A                     	;# 
   524  0394                     	;# 
   525  0395                     	;# 
   526  0396                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEB                     	;# 
   535  0FED                     	;# 
   536  0FEE                     	;# 
   537  0FEF                     	;# 
   538  0000                     	;# 
   539  0001                     	;# 
   540  0002                     	;# 
   541  0003                     	;# 
   542  0004                     	;# 
   543  0005                     	;# 
   544  0006                     	;# 
   545  0007                     	;# 
   546  0008                     	;# 
   547  0009                     	;# 
   548  000A                     	;# 
   549  000B                     	;# 
   550  000C                     	;# 
   551  000D                     	;# 
   552  000E                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0015                     	;# 
   557  0016                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001C                     	;# 
   565  008C                     	;# 
   566  008D                     	;# 
   567  008E                     	;# 
   568  0090                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0095                     	;# 
   572  0096                     	;# 
   573  0097                     	;# 
   574  0099                     	;# 
   575  009A                     	;# 
   576  009B                     	;# 
   577  009B                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  010C                     	;# 
   582  010D                     	;# 
   583  010E                     	;# 
   584  0116                     	;# 
   585  0117                     	;# 
   586  011D                     	;# 
   587  018C                     	;# 
   588  018D                     	;# 
   589  018E                     	;# 
   590  0191                     	;# 
   591  0191                     	;# 
   592  0192                     	;# 
   593  0193                     	;# 
   594  0193                     	;# 
   595  0194                     	;# 
   596  0195                     	;# 
   597  0196                     	;# 
   598  0197                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019C                     	;# 
   606  019C                     	;# 
   607  019D                     	;# 
   608  019E                     	;# 
   609  019F                     	;# 
   610  020D                     	;# 
   611  0210                     	;# 
   612  0211                     	;# 
   613  0211                     	;# 
   614  0212                     	;# 
   615  0212                     	;# 
   616  0213                     	;# 
   617  0213                     	;# 
   618  0214                     	;# 
   619  0214                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0216                     	;# 
   624  0216                     	;# 
   625  0217                     	;# 
   626  0217                     	;# 
   627  0291                     	;# 
   628  0291                     	;# 
   629  0292                     	;# 
   630  0293                     	;# 
   631  0298                     	;# 
   632  0298                     	;# 
   633  0299                     	;# 
   634  029A                     	;# 
   635  0394                     	;# 
   636  0395                     	;# 
   637  0396                     	;# 
   638  0FE4                     	;# 
   639  0FE5                     	;# 
   640  0FE6                     	;# 
   641  0FE7                     	;# 
   642  0FE8                     	;# 
   643  0FE9                     	;# 
   644  0FEA                     	;# 
   645  0FEB                     	;# 
   646  0FED                     	;# 
   647  0FEE                     	;# 
   648  0FEF                     	;# 
   649  0000                     	;# 
   650  0001                     	;# 
   651  0002                     	;# 
   652  0003                     	;# 
   653  0004                     	;# 
   654  0005                     	;# 
   655  0006                     	;# 
   656  0007                     	;# 
   657  0008                     	;# 
   658  0009                     	;# 
   659  000A                     	;# 
   660  000B                     	;# 
   661  000C                     	;# 
   662  000D                     	;# 
   663  000E                     	;# 
   664  0010                     	;# 
   665  0011                     	;# 
   666  0012                     	;# 
   667  0015                     	;# 
   668  0016                     	;# 
   669  0016                     	;# 
   670  0017                     	;# 
   671  0018                     	;# 
   672  0019                     	;# 
   673  001A                     	;# 
   674  001B                     	;# 
   675  001C                     	;# 
   676  008C                     	;# 
   677  008D                     	;# 
   678  008E                     	;# 
   679  0090                     	;# 
   680  0091                     	;# 
   681  0092                     	;# 
   682  0095                     	;# 
   683  0096                     	;# 
   684  0097                     	;# 
   685  0099                     	;# 
   686  009A                     	;# 
   687  009B                     	;# 
   688  009B                     	;# 
   689  009C                     	;# 
   690  009D                     	;# 
   691  009E                     	;# 
   692  010C                     	;# 
   693  010D                     	;# 
   694  010E                     	;# 
   695  0116                     	;# 
   696  0117                     	;# 
   697  011D                     	;# 
   698  018C                     	;# 
   699  018D                     	;# 
   700  018E                     	;# 
   701  0191                     	;# 
   702  0191                     	;# 
   703  0192                     	;# 
   704  0193                     	;# 
   705  0193                     	;# 
   706  0194                     	;# 
   707  0195                     	;# 
   708  0196                     	;# 
   709  0197                     	;# 
   710  0199                     	;# 
   711  019A                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019B                     	;# 
   716  019C                     	;# 
   717  019C                     	;# 
   718  019D                     	;# 
   719  019E                     	;# 
   720  019F                     	;# 
   721  020D                     	;# 
   722  0210                     	;# 
   723  0211                     	;# 
   724  0211                     	;# 
   725  0212                     	;# 
   726  0212                     	;# 
   727  0213                     	;# 
   728  0213                     	;# 
   729  0214                     	;# 
   730  0214                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0215                     	;# 
   734  0216                     	;# 
   735  0216                     	;# 
   736  0217                     	;# 
   737  0217                     	;# 
   738  0291                     	;# 
   739  0291                     	;# 
   740  0292                     	;# 
   741  0293                     	;# 
   742  0298                     	;# 
   743  0298                     	;# 
   744  0299                     	;# 
   745  029A                     	;# 
   746  0394                     	;# 
   747  0395                     	;# 
   748  0396                     	;# 
   749  0FE4                     	;# 
   750  0FE5                     	;# 
   751  0FE6                     	;# 
   752  0FE7                     	;# 
   753  0FE8                     	;# 
   754  0FE9                     	;# 
   755  0FEA                     	;# 
   756  0FEB                     	;# 
   757  0FED                     	;# 
   758  0FEE                     	;# 
   759  0FEF                     	;# 
   760  0000                     	;# 
   761  0001                     	;# 
   762  0002                     	;# 
   763  0003                     	;# 
   764  0004                     	;# 
   765  0005                     	;# 
   766  0006                     	;# 
   767  0007                     	;# 
   768  0008                     	;# 
   769  0009                     	;# 
   770  000A                     	;# 
   771  000B                     	;# 
   772  000C                     	;# 
   773  000D                     	;# 
   774  000E                     	;# 
   775  0010                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0015                     	;# 
   779  0016                     	;# 
   780  0016                     	;# 
   781  0017                     	;# 
   782  0018                     	;# 
   783  0019                     	;# 
   784  001A                     	;# 
   785  001B                     	;# 
   786  001C                     	;# 
   787  008C                     	;# 
   788  008D                     	;# 
   789  008E                     	;# 
   790  0090                     	;# 
   791  0091                     	;# 
   792  0092                     	;# 
   793  0095                     	;# 
   794  0096                     	;# 
   795  0097                     	;# 
   796  0099                     	;# 
   797  009A                     	;# 
   798  009B                     	;# 
   799  009B                     	;# 
   800  009C                     	;# 
   801  009D                     	;# 
   802  009E                     	;# 
   803  010C                     	;# 
   804  010D                     	;# 
   805  010E                     	;# 
   806  0116                     	;# 
   807  0117                     	;# 
   808  011D                     	;# 
   809  018C                     	;# 
   810  018D                     	;# 
   811  018E                     	;# 
   812  0191                     	;# 
   813  0191                     	;# 
   814  0192                     	;# 
   815  0193                     	;# 
   816  0193                     	;# 
   817  0194                     	;# 
   818  0195                     	;# 
   819  0196                     	;# 
   820  0197                     	;# 
   821  0199                     	;# 
   822  019A                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019B                     	;# 
   827  019C                     	;# 
   828  019C                     	;# 
   829  019D                     	;# 
   830  019E                     	;# 
   831  019F                     	;# 
   832  020D                     	;# 
   833  0210                     	;# 
   834  0211                     	;# 
   835  0211                     	;# 
   836  0212                     	;# 
   837  0212                     	;# 
   838  0213                     	;# 
   839  0213                     	;# 
   840  0214                     	;# 
   841  0214                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0215                     	;# 
   845  0216                     	;# 
   846  0216                     	;# 
   847  0217                     	;# 
   848  0217                     	;# 
   849  0291                     	;# 
   850  0291                     	;# 
   851  0292                     	;# 
   852  0293                     	;# 
   853  0298                     	;# 
   854  0298                     	;# 
   855  0299                     	;# 
   856  029A                     	;# 
   857  0394                     	;# 
   858  0395                     	;# 
   859  0396                     	;# 
   860  0FE4                     	;# 
   861  0FE5                     	;# 
   862  0FE6                     	;# 
   863  0FE7                     	;# 
   864  0FE8                     	;# 
   865  0FE9                     	;# 
   866  0FEA                     	;# 
   867  0FEB                     	;# 
   868  0FED                     	;# 
   869  0FEE                     	;# 
   870  0FEF                     	;# 
   871  0000                     	;# 
   872  0001                     	;# 
   873  0002                     	;# 
   874  0003                     	;# 
   875  0004                     	;# 
   876  0005                     	;# 
   877  0006                     	;# 
   878  0007                     	;# 
   879  0008                     	;# 
   880  0009                     	;# 
   881  000A                     	;# 
   882  000B                     	;# 
   883  000C                     	;# 
   884  000D                     	;# 
   885  000E                     	;# 
   886  0010                     	;# 
   887  0011                     	;# 
   888  0012                     	;# 
   889  0015                     	;# 
   890  0016                     	;# 
   891  0016                     	;# 
   892  0017                     	;# 
   893  0018                     	;# 
   894  0019                     	;# 
   895  001A                     	;# 
   896  001B                     	;# 
   897  001C                     	;# 
   898  008C                     	;# 
   899  008D                     	;# 
   900  008E                     	;# 
   901  0090                     	;# 
   902  0091                     	;# 
   903  0092                     	;# 
   904  0095                     	;# 
   905  0096                     	;# 
   906  0097                     	;# 
   907  0099                     	;# 
   908  009A                     	;# 
   909  009B                     	;# 
   910  009B                     	;# 
   911  009C                     	;# 
   912  009D                     	;# 
   913  009E                     	;# 
   914  010C                     	;# 
   915  010D                     	;# 
   916  010E                     	;# 
   917  0116                     	;# 
   918  0117                     	;# 
   919  011D                     	;# 
   920  018C                     	;# 
   921  018D                     	;# 
   922  018E                     	;# 
   923  0191                     	;# 
   924  0191                     	;# 
   925  0192                     	;# 
   926  0193                     	;# 
   927  0193                     	;# 
   928  0194                     	;# 
   929  0195                     	;# 
   930  0196                     	;# 
   931  0197                     	;# 
   932  0199                     	;# 
   933  019A                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019C                     	;# 
   939  019C                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019F                     	;# 
   943  020D                     	;# 
   944  0210                     	;# 
   945  0211                     	;# 
   946  0211                     	;# 
   947  0212                     	;# 
   948  0212                     	;# 
   949  0213                     	;# 
   950  0213                     	;# 
   951  0214                     	;# 
   952  0214                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0215                     	;# 
   956  0216                     	;# 
   957  0216                     	;# 
   958  0217                     	;# 
   959  0217                     	;# 
   960  0291                     	;# 
   961  0291                     	;# 
   962  0292                     	;# 
   963  0293                     	;# 
   964  0298                     	;# 
   965  0298                     	;# 
   966  0299                     	;# 
   967  029A                     	;# 
   968  0394                     	;# 
   969  0395                     	;# 
   970  0396                     	;# 
   971  0FE4                     	;# 
   972  0FE5                     	;# 
   973  0FE6                     	;# 
   974  0FE7                     	;# 
   975  0FE8                     	;# 
   976  0FE9                     	;# 
   977  0FEA                     	;# 
   978  0FEB                     	;# 
   979  0FED                     	;# 
   980  0FEE                     	;# 
   981  0FEF                     	;# 
   982  0000                     	;# 
   983  0001                     	;# 
   984  0002                     	;# 
   985  0003                     	;# 
   986  0004                     	;# 
   987  0005                     	;# 
   988  0006                     	;# 
   989  0007                     	;# 
   990  0008                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  0010                     	;# 
   998  0011                     	;# 
   999  0012                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  008C                     	;# 
  1010  008D                     	;# 
  1011  008E                     	;# 
  1012  0090                     	;# 
  1013  0091                     	;# 
  1014  0092                     	;# 
  1015  0095                     	;# 
  1016  0096                     	;# 
  1017  0097                     	;# 
  1018  0099                     	;# 
  1019  009A                     	;# 
  1020  009B                     	;# 
  1021  009B                     	;# 
  1022  009C                     	;# 
  1023  009D                     	;# 
  1024  009E                     	;# 
  1025  010C                     	;# 
  1026  010D                     	;# 
  1027  010E                     	;# 
  1028  0116                     	;# 
  1029  0117                     	;# 
  1030  011D                     	;# 
  1031  018C                     	;# 
  1032  018D                     	;# 
  1033  018E                     	;# 
  1034  0191                     	;# 
  1035  0191                     	;# 
  1036  0192                     	;# 
  1037  0193                     	;# 
  1038  0193                     	;# 
  1039  0194                     	;# 
  1040  0195                     	;# 
  1041  0196                     	;# 
  1042  0197                     	;# 
  1043  0199                     	;# 
  1044  019A                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019B                     	;# 
  1049  019C                     	;# 
  1050  019C                     	;# 
  1051  019D                     	;# 
  1052  019E                     	;# 
  1053  019F                     	;# 
  1054  020D                     	;# 
  1055  0210                     	;# 
  1056  0211                     	;# 
  1057  0211                     	;# 
  1058  0212                     	;# 
  1059  0212                     	;# 
  1060  0213                     	;# 
  1061  0213                     	;# 
  1062  0214                     	;# 
  1063  0214                     	;# 
  1064  0215                     	;# 
  1065  0215                     	;# 
  1066  0215                     	;# 
  1067  0216                     	;# 
  1068  0216                     	;# 
  1069  0217                     	;# 
  1070  0217                     	;# 
  1071  0291                     	;# 
  1072  0291                     	;# 
  1073  0292                     	;# 
  1074  0293                     	;# 
  1075  0298                     	;# 
  1076  0298                     	;# 
  1077  0299                     	;# 
  1078  029A                     	;# 
  1079  0394                     	;# 
  1080  0395                     	;# 
  1081  0396                     	;# 
  1082  0FE4                     	;# 
  1083  0FE5                     	;# 
  1084  0FE6                     	;# 
  1085  0FE7                     	;# 
  1086  0FE8                     	;# 
  1087  0FE9                     	;# 
  1088  0FEA                     	;# 
  1089  0FEB                     	;# 
  1090  0FED                     	;# 
  1091  0FEE                     	;# 
  1092  0FEF                     	;# 
  1093  0000                     	;# 
  1094  0001                     	;# 
  1095  0002                     	;# 
  1096  0003                     	;# 
  1097  0004                     	;# 
  1098  0005                     	;# 
  1099  0006                     	;# 
  1100  0007                     	;# 
  1101  0008                     	;# 
  1102  0009                     	;# 
  1103  000A                     	;# 
  1104  000B                     	;# 
  1105  000C                     	;# 
  1106  000D                     	;# 
  1107  000E                     	;# 
  1108  0010                     	;# 
  1109  0011                     	;# 
  1110  0012                     	;# 
  1111  0015                     	;# 
  1112  0016                     	;# 
  1113  0016                     	;# 
  1114  0017                     	;# 
  1115  0018                     	;# 
  1116  0019                     	;# 
  1117  001A                     	;# 
  1118  001B                     	;# 
  1119  001C                     	;# 
  1120  008C                     	;# 
  1121  008D                     	;# 
  1122  008E                     	;# 
  1123  0090                     	;# 
  1124  0091                     	;# 
  1125  0092                     	;# 
  1126  0095                     	;# 
  1127  0096                     	;# 
  1128  0097                     	;# 
  1129  0099                     	;# 
  1130  009A                     	;# 
  1131  009B                     	;# 
  1132  009B                     	;# 
  1133  009C                     	;# 
  1134  009D                     	;# 
  1135  009E                     	;# 
  1136  010C                     	;# 
  1137  010D                     	;# 
  1138  010E                     	;# 
  1139  0116                     	;# 
  1140  0117                     	;# 
  1141  011D                     	;# 
  1142  018C                     	;# 
  1143  018D                     	;# 
  1144  018E                     	;# 
  1145  0191                     	;# 
  1146  0191                     	;# 
  1147  0192                     	;# 
  1148  0193                     	;# 
  1149  0193                     	;# 
  1150  0194                     	;# 
  1151  0195                     	;# 
  1152  0196                     	;# 
  1153  0197                     	;# 
  1154  0199                     	;# 
  1155  019A                     	;# 
  1156  019B                     	;# 
  1157  019B                     	;# 
  1158  019B                     	;# 
  1159  019B                     	;# 
  1160  019C                     	;# 
  1161  019C                     	;# 
  1162  019D                     	;# 
  1163  019E                     	;# 
  1164  019F                     	;# 
  1165  020D                     	;# 
  1166  0210                     	;# 
  1167  0211                     	;# 
  1168  0211                     	;# 
  1169  0212                     	;# 
  1170  0212                     	;# 
  1171  0213                     	;# 
  1172  0213                     	;# 
  1173  0214                     	;# 
  1174  0214                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0215                     	;# 
  1178  0216                     	;# 
  1179  0216                     	;# 
  1180  0217                     	;# 
  1181  0217                     	;# 
  1182  0291                     	;# 
  1183  0291                     	;# 
  1184  0292                     	;# 
  1185  0293                     	;# 
  1186  0298                     	;# 
  1187  0298                     	;# 
  1188  0299                     	;# 
  1189  029A                     	;# 
  1190  0394                     	;# 
  1191  0395                     	;# 
  1192  0396                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  0010                     	;# 
  1220  0011                     	;# 
  1221  0012                     	;# 
  1222  0015                     	;# 
  1223  0016                     	;# 
  1224  0016                     	;# 
  1225  0017                     	;# 
  1226  0018                     	;# 
  1227  0019                     	;# 
  1228  001A                     	;# 
  1229  001B                     	;# 
  1230  001C                     	;# 
  1231  008C                     	;# 
  1232  008D                     	;# 
  1233  008E                     	;# 
  1234  0090                     	;# 
  1235  0091                     	;# 
  1236  0092                     	;# 
  1237  0095                     	;# 
  1238  0096                     	;# 
  1239  0097                     	;# 
  1240  0099                     	;# 
  1241  009A                     	;# 
  1242  009B                     	;# 
  1243  009B                     	;# 
  1244  009C                     	;# 
  1245  009D                     	;# 
  1246  009E                     	;# 
  1247  010C                     	;# 
  1248  010D                     	;# 
  1249  010E                     	;# 
  1250  0116                     	;# 
  1251  0117                     	;# 
  1252  011D                     	;# 
  1253  018C                     	;# 
  1254  018D                     	;# 
  1255  018E                     	;# 
  1256  0191                     	;# 
  1257  0191                     	;# 
  1258  0192                     	;# 
  1259  0193                     	;# 
  1260  0193                     	;# 
  1261  0194                     	;# 
  1262  0195                     	;# 
  1263  0196                     	;# 
  1264  0197                     	;# 
  1265  0199                     	;# 
  1266  019A                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019B                     	;# 
  1270  019B                     	;# 
  1271  019C                     	;# 
  1272  019C                     	;# 
  1273  019D                     	;# 
  1274  019E                     	;# 
  1275  019F                     	;# 
  1276  020D                     	;# 
  1277  0210                     	;# 
  1278  0211                     	;# 
  1279  0211                     	;# 
  1280  0212                     	;# 
  1281  0212                     	;# 
  1282  0213                     	;# 
  1283  0213                     	;# 
  1284  0214                     	;# 
  1285  0214                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0215                     	;# 
  1289  0216                     	;# 
  1290  0216                     	;# 
  1291  0217                     	;# 
  1292  0217                     	;# 
  1293  0291                     	;# 
  1294  0291                     	;# 
  1295  0292                     	;# 
  1296  0293                     	;# 
  1297  0298                     	;# 
  1298  0298                     	;# 
  1299  0299                     	;# 
  1300  029A                     	;# 
  1301  0394                     	;# 
  1302  0395                     	;# 
  1303  0396                     	;# 
  1304  0FE4                     	;# 
  1305  0FE5                     	;# 
  1306  0FE6                     	;# 
  1307  0FE7                     	;# 
  1308  0FE8                     	;# 
  1309  0FE9                     	;# 
  1310  0FEA                     	;# 
  1311  0FEB                     	;# 
  1312  0FED                     	;# 
  1313  0FEE                     	;# 
  1314  0FEF                     	;# 
  1315  0000                     	;# 
  1316  0001                     	;# 
  1317  0002                     	;# 
  1318  0003                     	;# 
  1319  0004                     	;# 
  1320  0005                     	;# 
  1321  0006                     	;# 
  1322  0007                     	;# 
  1323  0008                     	;# 
  1324  0009                     	;# 
  1325  000A                     	;# 
  1326  000B                     	;# 
  1327  000C                     	;# 
  1328  000D                     	;# 
  1329  000E                     	;# 
  1330  0010                     	;# 
  1331  0011                     	;# 
  1332  0012                     	;# 
  1333  0015                     	;# 
  1334  0016                     	;# 
  1335  0016                     	;# 
  1336  0017                     	;# 
  1337  0018                     	;# 
  1338  0019                     	;# 
  1339  001A                     	;# 
  1340  001B                     	;# 
  1341  001C                     	;# 
  1342  008C                     	;# 
  1343  008D                     	;# 
  1344  008E                     	;# 
  1345  0090                     	;# 
  1346  0091                     	;# 
  1347  0092                     	;# 
  1348  0095                     	;# 
  1349  0096                     	;# 
  1350  0097                     	;# 
  1351  0099                     	;# 
  1352  009A                     	;# 
  1353  009B                     	;# 
  1354  009B                     	;# 
  1355  009C                     	;# 
  1356  009D                     	;# 
  1357  009E                     	;# 
  1358  010C                     	;# 
  1359  010D                     	;# 
  1360  010E                     	;# 
  1361  0116                     	;# 
  1362  0117                     	;# 
  1363  011D                     	;# 
  1364  018C                     	;# 
  1365  018D                     	;# 
  1366  018E                     	;# 
  1367  0191                     	;# 
  1368  0191                     	;# 
  1369  0192                     	;# 
  1370  0193                     	;# 
  1371  0193                     	;# 
  1372  0194                     	;# 
  1373  0195                     	;# 
  1374  0196                     	;# 
  1375  0197                     	;# 
  1376  0199                     	;# 
  1377  019A                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019B                     	;# 
  1382  019C                     	;# 
  1383  019C                     	;# 
  1384  019D                     	;# 
  1385  019E                     	;# 
  1386  019F                     	;# 
  1387  020D                     	;# 
  1388  0210                     	;# 
  1389  0211                     	;# 
  1390  0211                     	;# 
  1391  0212                     	;# 
  1392  0212                     	;# 
  1393  0213                     	;# 
  1394  0213                     	;# 
  1395  0214                     	;# 
  1396  0214                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0215                     	;# 
  1400  0216                     	;# 
  1401  0216                     	;# 
  1402  0217                     	;# 
  1403  0217                     	;# 
  1404  0291                     	;# 
  1405  0291                     	;# 
  1406  0292                     	;# 
  1407  0293                     	;# 
  1408  0298                     	;# 
  1409  0298                     	;# 
  1410  0299                     	;# 
  1411  029A                     	;# 
  1412  0394                     	;# 
  1413  0395                     	;# 
  1414  0396                     	;# 
  1415  0FE4                     	;# 
  1416  0FE5                     	;# 
  1417  0FE6                     	;# 
  1418  0FE7                     	;# 
  1419  0FE8                     	;# 
  1420  0FE9                     	;# 
  1421  0FEA                     	;# 
  1422  0FEB                     	;# 
  1423  0FED                     	;# 
  1424  0FEE                     	;# 
  1425  0FEF                     	;# 
  1426                           
  1427                           	psect	idataBANK2
  1428  1525                     __pidataBANK2:	
  1429                           
  1430                           ;initializer for _picBatt
  1431  1525  340E               	retlw	14
  1432  1526  341F               	retlw	31
  1433  1527  3411               	retlw	17
  1434  1528  3411               	retlw	17
  1435  1529  3411               	retlw	17
  1436  152A  3411               	retlw	17
  1437  152B  3411               	retlw	17
  1438  152C  341F               	retlw	31
  1439  152D  3400               	retlw	0
  1440                           
  1441                           ;initializer for _cc1PaTable
  1442  152E  3403               	retlw	3
  1443  152F  340F               	retlw	15
  1444  1530  341E               	retlw	30
  1445  1531  3427               	retlw	39
  1446  1532  3450               	retlw	80
  1447  1533  3481               	retlw	129
  1448  1534  34CB               	retlw	203
  1449  1535  34C2               	retlw	194
  1450                           
  1451                           	psect	idataBANK3
  1452  097B                     __pidataBANK3:	
  1453                           
  1454                           ;initializer for _cc1InitVal
  1455  097B  3447               	retlw	71
  1456  097C  3446               	retlw	70
  1457  097D  344E               	retlw	78
  1458  097E  340B               	retlw	11
  1459  097F  34D3               	retlw	211
  1460  0980  3491               	retlw	145
  1461  0981  3409               	retlw	9
  1462  0982  3408               	retlw	8
  1463  0983  3404               	retlw	4
  1464  0984  3400               	retlw	0
  1465  0985  3400               	retlw	0
  1466  0986  3406               	retlw	6
  1467  0987  3400               	retlw	0
  1468  0988  3421               	retlw	33
  1469  0989  3463               	retlw	99
  1470  098A  3491               	retlw	145
  1471  098B  34CA               	retlw	202
  1472  098C  3483               	retlw	131
  1473  098D  3402               	retlw	2
  1474  098E  3402               	retlw	2
  1475  098F  343B               	retlw	59
  1476  0990  3434               	retlw	52
  1477  0991  3407               	retlw	7
  1478  0992  343F               	retlw	63
  1479  0993  3408               	retlw	8
  1480  0994  3416               	retlw	22
  1481  0995  346C               	retlw	108
  1482  0996  3403               	retlw	3
  1483  0997  3440               	retlw	64
  1484  0998  3491               	retlw	145
  1485  0999  3487               	retlw	135
  1486  099A  346B               	retlw	107
  1487  099B  34FB               	retlw	251
  1488  099C  3456               	retlw	86
  1489  099D  3416               	retlw	22
  1490  099E  34E9               	retlw	233
  1491  099F  342A               	retlw	42
  1492  09A0  3400               	retlw	0
  1493  09A1  341F               	retlw	31
  1494  09A2  3441               	retlw	65
  1495  09A3  3400               	retlw	0
  1496  09A4  3459               	retlw	89
  1497  09A5  347F               	retlw	127
  1498  09A6  343F               	retlw	63
  1499  09A7  3481               	retlw	129
  1500  09A8  3435               	retlw	53
  1501  09A9  3409               	retlw	9
  1502                           
  1503                           	psect	strings
  1504  0800                     __pstrings:	
  1505  0800                     __stringtab:	
  1506  0800  3400               	retlw	0
  1507  0801                     __end_of__stringtab:	
  1508  0801                     _dpowers:	
  1509  0801  3401               	retlw	1
  1510  0802  3400               	retlw	0
  1511  0803  3400               	retlw	0
  1512  0804  3400               	retlw	0
  1513  0805  340A               	retlw	10
  1514  0806  3400               	retlw	0
  1515  0807  3400               	retlw	0
  1516  0808  3400               	retlw	0
  1517  0809  3464               	retlw	100
  1518  080A  3400               	retlw	0
  1519  080B  3400               	retlw	0
  1520  080C  3400               	retlw	0
  1521  080D  34E8               	retlw	232
  1522  080E  3403               	retlw	3
  1523  080F  3400               	retlw	0
  1524  0810  3400               	retlw	0
  1525  0811  3410               	retlw	16
  1526  0812  3427               	retlw	39
  1527  0813  3400               	retlw	0
  1528  0814  3400               	retlw	0
  1529  0815  34A0               	retlw	160
  1530  0816  3486               	retlw	134
  1531  0817  3401               	retlw	1
  1532  0818  3400               	retlw	0
  1533  0819  3440               	retlw	64
  1534  081A  3442               	retlw	66
  1535  081B  340F               	retlw	15
  1536  081C  3400               	retlw	0
  1537  081D  3480               	retlw	128
  1538  081E  3496               	retlw	150
  1539  081F  3498               	retlw	152
  1540  0820  3400               	retlw	0
  1541  0821  3400               	retlw	0
  1542  0822  34E1               	retlw	225
  1543  0823  34F5               	retlw	245
  1544  0824  3405               	retlw	5
  1545  0825  3400               	retlw	0
  1546  0826  34CA               	retlw	202
  1547  0827  349A               	retlw	154
  1548  0828  343B               	retlw	59
  1549  0829                     __end_of_dpowers:	
  1550  0829                     _nvm_pgm_cfg:	
  1551  0829  345C               	retlw	92
  1552  082A  34C5               	retlw	197
  1553  082B  3400               	retlw	0
  1554  082C  3400               	retlw	0
  1555  082D  3400               	retlw	0
  1556  082E                     __end_of_nvm_pgm_cfg:	
  1557  000B                     _INTCON	set	11
  1558  000B                     _INTCONbits	set	11
  1559  0011                     _PIR1	set	17
  1560  0011                     _PIR1bits	set	17
  1561  0012                     _PIR2	set	18
  1562  000C                     _PORTAbits	set	12
  1563  000D                     _PORTBbits	set	13
  1564  0018                     _T1CON	set	24
  1565  0015                     _TMR0	set	21
  1566  0017                     _TMR1H	set	23
  1567  0016                     _TMR1L	set	22
  1568  0095                     _OPTION_REG	set	149
  1569  0099                     _OSCCON	set	153
  1570  0091                     _PIE1	set	145
  1571  0092                     _PIE2	set	146
  1572  008C                     _TRISA	set	140
  1573  008D                     _TRISB	set	141
  1574  008E                     _TRISC	set	142
  1575  0097                     _WDTCON	set	151
  1576  010C                     _LATA	set	268
  1577  010C                     _LATAbits	set	268
  1578  0191                     _PMADR	set	401
  1579  0193                     _PMDAT	set	403
  1580  018C                     _ANSELA	set	396
  1581  018D                     _ANSELB	set	397
  1582  018E                     _ANSELC	set	398
  1583  0195                     _PMCON1	set	405
  1584  0195                     _PMCON1bits	set	405
  1585  0196                     _PMCON2	set	406
  1586  0211                     _SSPBUF	set	529
  1587  0215                     _SSPCON1	set	533
  1588  0216                     _SSPCON2	set	534
  1589  0215                     _SSPCONbits	set	533
  1590  0214                     _SSPSTAT	set	532
  1591  020D                     _WPUB	set	525
  1592  0395                     _IOCBN	set	917
  1593  0394                     _IOCBP	set	916
  1594  082E                     __stringdata:	
  1595  082E                     STR_1:	
  1596  082E  3425               	retlw	37	;'%'
  1597  082F  346C               	retlw	108	;'l'
  1598  0830  3475               	retlw	117	;'u'
  1599  0831  342E               	retlw	46	;'.'
  1600  0832  3425               	retlw	37	;'%'
  1601  0833  3436               	retlw	54	;'6'
  1602  0834  342E               	retlw	46	;'.'
  1603  0835  3436               	retlw	54	;'6'
  1604  0836  346C               	retlw	108	;'l'
  1605  0837  3475               	retlw	117	;'u'
  1606  0838  3400               	retlw	0
  1607  0839                     __end_of__stringdata:	
  1608                           
  1609                           ; #config settings
  1610  0000                     
  1611                           	psect	cinit
  1612  0013                     start_initialization:	
  1613  0013                     __initialization:	
  1614                           
  1615                           ; Clear objects allocated to COMMON
  1616  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  1617                           
  1618                           ; Clear objects allocated to BANK0
  1619  0014  01EE               	clrf	__pbssBANK0& (0+127)
  1620  0015  01EF               	clrf	(__pbssBANK0+1)& (0+127)
  1621                           
  1622                           ; Clear objects allocated to BANK1
  1623  0016  30E0               	movlw	low __pbssBANK1
  1624  0017  0084               	movwf	4
  1625  0018  3000               	movlw	high __pbssBANK1
  1626  0019  0085               	movwf	5
  1627  001A  300F               	movlw	15
  1628  001B  3194  24B0  3180   	fcall	clear_ram0
  1629                           
  1630                           ; Clear objects allocated to BANK2
  1631  001E  3020               	movlw	low __pbssBANK2
  1632  001F  0084               	movwf	4
  1633  0020  3001               	movlw	high __pbssBANK2
  1634  0021  0085               	movwf	5
  1635  0022  3034               	movlw	52
  1636  0023  3194  24B0  3180   	fcall	clear_ram0
  1637                           
  1638                           ; Initialize objects allocated to BANK2
  1639  0026  3025               	movlw	low __pidataBANK2
  1640  0027  0084               	movwf	4
  1641  0028  3095               	movlw	(high __pidataBANK2)| (0+128)
  1642  0029  0085               	movwf	5
  1643  002A  3054               	movlw	low __pdataBANK2
  1644  002B  0086               	movwf	6
  1645  002C  3001               	movlw	high __pdataBANK2
  1646  002D  0087               	movwf	7
  1647  002E  3011               	movlw	17
  1648  002F  3194  24AA  3180   	fcall	init_ram
  1649                           
  1650                           ; Initialize objects allocated to BANK3
  1651  0032  307B               	movlw	low __pidataBANK3
  1652  0033  0084               	movwf	4
  1653  0034  3089               	movlw	(high __pidataBANK3)| (0+128)
  1654  0035  0085               	movwf	5
  1655  0036  30A0               	movlw	low __pdataBANK3
  1656  0037  0086               	movwf	6
  1657  0038  3001               	movlw	high __pdataBANK3
  1658  0039  0087               	movwf	7
  1659  003A  302F               	movlw	47
  1660  003B  3194  24AA         	fcall	init_ram
  1661  003D                     end_of_initialization:	
  1662                           ;End of C runtime variable initialization code
  1663                           
  1664  003D                     __end_of__initialization:	
  1665  003D  0020               	movlb	0
  1666  003E  318B  2BB9         	ljmp	_main	;jump to C main() function
  1667                           
  1668                           	psect	bssCOMMON
  1669  007C                     __pbssCOMMON:	
  1670  007C                     _sta:	
  1671  007C                     	ds	1
  1672                           
  1673                           	psect	bssBANK0
  1674  006E                     __pbssBANK0:	
  1675  006E                     _u_in_sta_currTask:	
  1676  006E                     	ds	1
  1677  006F                     _numRxByte:	
  1678  006F                     	ds	1
  1679                           
  1680                           	psect	bssBANK1
  1681  00E0                     __pbssBANK1:	
  1682  00E0                     _tmrVisBatt:	
  1683  00E0                     	ds	2
  1684  00E2                     _pgm_flg:	
  1685  00E2                     	ds	1
  1686  00E3                     _rtx_flg:	
  1687  00E3                     	ds	1
  1688  00E4                     _s_CC1_FLG:	
  1689  00E4                     	ds	1
  1690  00E5                     _sys_pgm_sta:	
  1691  00E5                     	ds	1
  1692  00E6                     _tmrDbncSel:	
  1693  00E6                     	ds	1
  1694  00E7                     _tmrRcvPkt:	
  1695  00E7                     	ds	1
  1696  00E8                     _u_SYS_STA:	
  1697  00E8                     	ds	1
  1698  00E9                     _u_flg_din:	
  1699  00E9                     	ds	1
  1700  00EA                     _u_in_ev_down:	
  1701  00EA                     	ds	1
  1702  00EB                     _u_in_ev_long:	
  1703  00EB                     	ds	1
  1704  00EC                     _u_in_ev_up:	
  1705  00EC                     	ds	1
  1706  00ED                     _u_in_sta_tmpTask:	
  1707  00ED                     	ds	1
  1708  00EE                     _numTxByte:	
  1709  00EE                     	ds	1
  1710                           
  1711                           	psect	bssBANK2
  1712  0120                     __pbssBANK2:	
  1713  0120                     _batt:	
  1714  0120                     	ds	3
  1715  0123                     _temp:	
  1716  0123                     	ds	3
  1717  0126                     _tmrCalibration:	
  1718  0126                     	ds	2
  1719  0128                     _tmrLongSel:	
  1720  0128                     	ds	2
  1721  012A                     _tmrPgm:	
  1722  012A                     	ds	2
  1723  012C                     ftoa@buf:	
  1724  012C                     	ds	17
  1725  013D                     _pktRx:	
  1726  013D                     	ds	9
  1727  0146                     _pktTx:	
  1728  0146                     	ds	9
  1729  014F                     _pgm_cfg:	
  1730  014F                     	ds	5
  1731                           
  1732                           	psect	dataBANK2
  1733  0154                     __pdataBANK2:	
  1734  0154                     _picBatt:	
  1735  0154                     	ds	9
  1736  015D                     _cc1PaTable:	
  1737  015D                     	ds	8
  1738                           
  1739                           	psect	dataBANK3
  1740  01A0                     __pdataBANK3:	
  1741  01A0                     _cc1InitVal:	
  1742  01A0                     	ds	47
  1743                           
  1744                           	psect	clrtext
  1745  14B0                     clear_ram0:	
  1746                           ;	Called with FSR0 containing the base address, and
  1747                           ;	WREG with the size to clear
  1748                           
  1749  14B0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1750  14B1                     clrloop0:	
  1751  14B1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1752  14B2  3101               	addfsr 0,1
  1753  14B3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1754  14B4  2CB1               	goto	clrloop0	;have we reached the end yet?
  1755  14B5  3400               	retlw	0	;all done for this memory range, return
  1756                           
  1757                           	psect	inittext
  1758  14AA                     init_ram:	
  1759  14AA  00FE               	movwf	126
  1760  14AB                     initloop:	
  1761  14AB  0012               	moviw fsr0++
  1762  14AC  001E               	movwi fsr1++
  1763  14AD  0BFE               	decfsz	126,f
  1764  14AE  2CAB               	goto	initloop
  1765  14AF  3400               	retlw	0
  1766                           
  1767                           	psect	cstackBANK1
  1768  00A0                     __pcstackBANK1:	
  1769  00A0                     RTXVisDec@strTmp:	
  1770                           
  1771                           ; 16 bytes @ 0x0
  1772  00A0                     	ds	16
  1773  00B0                     RTXVisDec@status:	
  1774                           
  1775                           ; 2 bytes @ 0x10
  1776  00B0                     	ds	2
  1777  00B2                     RTXVisDec@posDec:	
  1778                           
  1779                           ; 1 bytes @ 0x12
  1780  00B2                     	ds	1
  1781  00B3                     RTXVisDec@isDec:	
  1782                           
  1783                           ; 1 bytes @ 0x13
  1784  00B3                     	ds	1
  1785  00B4                     RTXVisDec@offset:	
  1786                           
  1787                           ; 1 bytes @ 0x14
  1788  00B4                     	ds	1
  1789  00B5                     RTXVisDec@p:	
  1790                           
  1791                           ; 1 bytes @ 0x15
  1792  00B5                     	ds	1
  1793  00B6                     RTXVisDec@j:	
  1794                           
  1795                           ; 1 bytes @ 0x16
  1796  00B6                     	ds	1
  1797  00B7                     RTXVisDec@i:	
  1798                           
  1799                           ; 1 bytes @ 0x17
  1800  00B7                     	ds	1
  1801  00B8                     RTXUpdateDisplay@charIdSens:	
  1802                           
  1803                           ; 4 bytes @ 0x18
  1804  00B8                     	ds	4
  1805  00BC                     RTXUpdateDisplay@strText:	
  1806                           
  1807                           ; 16 bytes @ 0x1C
  1808  00BC                     	ds	16
  1809  00CC                     RTXUpdateDisplay@maxDigit:	
  1810                           
  1811                           ; 1 bytes @ 0x2C
  1812  00CC                     	ds	1
  1813  00CD                     RTXUpdateDisplay@strTitle:	
  1814                           
  1815                           ; 16 bytes @ 0x2D
  1816  00CD                     	ds	16
  1817  00DD                     RTXUpdateDisplay@curPos:	
  1818                           
  1819                           ; 1 bytes @ 0x3D
  1820  00DD                     	ds	1
  1821  00DE                     RTXUpdateDisplay@val:	
  1822                           
  1823                           ; 1 bytes @ 0x3E
  1824  00DE                     	ds	1
  1825  00DF                     RTXUpdateDisplay@i:	
  1826                           
  1827                           ; 1 bytes @ 0x3F
  1828  00DF                     	ds	1
  1829                           
  1830                           	psect	cstackCOMMON
  1831  0070                     __pcstackCOMMON:	
  1832  0070                     ?_CC1Strobe:	
  1833  0070                     ?_DPYInitDisplay:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0070                     ?_PGMReadNvm:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0070                     ?_PGMCheckNvm:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0070                     ?_PGMPgmOff:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0070                     ?_PGMNvmReset:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0070                     ?_RTXUpdateDisplay:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  0070                     ?_RTXPgmOff:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0070                     ?_RTXSup:	
  1855                           ; 0 bytes @ 0x0
  1856                           
  1857  0070                     ?_RTXSendPgm:	
  1858                           ; 0 bytes @ 0x0
  1859                           
  1860  0070                     ?_RTXReadPkt:	
  1861                           ; 0 bytes @ 0x0
  1862                           
  1863  0070                     ?_RTXSendRData:	
  1864                           ; 0 bytes @ 0x0
  1865                           
  1866  0070                     ?_isdigit:	
  1867                           ; 0 bytes @ 0x0
  1868                           
  1869  0070                     ?_INInit:	
  1870                           ; 1 bit 
  1871                           
  1872  0070                     ?_OUTInit:	
  1873                           ; 0 bytes @ 0x0
  1874                           
  1875  0070                     ?_OUTSetHTCDataNibble:	
  1876                           ; 0 bytes @ 0x0
  1877                           
  1878  0070                     ?_SPIInit:	
  1879                           ; 0 bytes @ 0x0
  1880                           
  1881  0070                     ?_CC1Init:	
  1882                           ; 0 bytes @ 0x0
  1883                           
  1884  0070                     ?_NVMInit:	
  1885                           ; 0 bytes @ 0x0
  1886                           
  1887  0070                     ?_DINInit:	
  1888                           ; 0 bytes @ 0x0
  1889                           
  1890  0070                     ?_DINTick:	
  1891                           ; 0 bytes @ 0x0
  1892                           
  1893  0070                     ?_DINTask:	
  1894                           ; 0 bytes @ 0x0
  1895                           
  1896  0070                     ?_DPYInit:	
  1897                           ; 0 bytes @ 0x0
  1898                           
  1899  0070                     ?_DPYSendChar:	
  1900                           ; 0 bytes @ 0x0
  1901                           
  1902  0070                     ?_PGMInit:	
  1903                           ; 0 bytes @ 0x0
  1904                           
  1905  0070                     ?_PGMTick:	
  1906                           ; 0 bytes @ 0x0
  1907                           
  1908  0070                     ?_PGMWriteNvm:	
  1909                           ; 0 bytes @ 0x0
  1910                           
  1911  0070                     ?_PGMSelDown:	
  1912                           ; 0 bytes @ 0x0
  1913                           
  1914  0070                     ?_PGMSelLong:	
  1915                           ; 0 bytes @ 0x0
  1916                           
  1917  0070                     ?_RTXInit:	
  1918                           ; 0 bytes @ 0x0
  1919                           
  1920  0070                     ?_RTXTick:	
  1921                           ; 0 bytes @ 0x0
  1922                           
  1923  0070                     ?_RTXTask:	
  1924                           ; 0 bytes @ 0x0
  1925                           
  1926  0070                     ?_RTXSelDown:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0070                     ?_RTXPgmOn:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0070                     ?_SYSInit:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0070                     ?_SYSInt:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0070                     ??_SYSInt:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0070                     ?_SYSTask:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0070                     ?_INTIsr:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0070                     ??_INTIsr:	
  1948                           ; 0 bytes @ 0x0
  1949                           
  1950  0070                     ?_main:	
  1951                           ; 0 bytes @ 0x0
  1952                           
  1953  0070                     ?_DPYIsBusy:	
  1954                           ; 0 bytes @ 0x0
  1955                           
  1956                           
  1957                           ; 1 bytes @ 0x0
  1958  0070                     	ds	1
  1959  0071                     ??_RTXPgmOff:	
  1960  0071                     ??_isdigit:	
  1961                           ; 0 bytes @ 0x1
  1962                           
  1963  0071                     ??_INInit:	
  1964                           ; 0 bytes @ 0x1
  1965                           
  1966  0071                     ??_OUTInit:	
  1967                           ; 0 bytes @ 0x1
  1968                           
  1969  0071                     ??_OUTSetHTCDataNibble:	
  1970                           ; 0 bytes @ 0x1
  1971                           
  1972  0071                     ??_SPIInit:	
  1973                           ; 0 bytes @ 0x1
  1974                           
  1975  0071                     ?_SPIRead:	
  1976                           ; 0 bytes @ 0x1
  1977                           
  1978  0071                     ?_SPIWrite:	
  1979                           ; 0 bytes @ 0x1
  1980                           
  1981  0071                     ?_DLYDelay_us:	
  1982                           ; 0 bytes @ 0x1
  1983                           
  1984  0071                     ?_DLYDelay_ms:	
  1985                           ; 0 bytes @ 0x1
  1986                           
  1987  0071                     ??_NVMInit:	
  1988                           ; 0 bytes @ 0x1
  1989                           
  1990  0071                     ?_NVMRead:	
  1991                           ; 0 bytes @ 0x1
  1992                           
  1993  0071                     ?_NVMWrite:	
  1994                           ; 0 bytes @ 0x1
  1995                           
  1996  0071                     ??_DINInit:	
  1997                           ; 0 bytes @ 0x1
  1998                           
  1999  0071                     ??_DINTick:	
  2000                           ; 0 bytes @ 0x1
  2001                           
  2002  0071                     ??_DINTask:	
  2003                           ; 0 bytes @ 0x1
  2004                           
  2005  0071                     ??_SYSInit:	
  2006                           ; 0 bytes @ 0x1
  2007                           
  2008  0071                     ?___ftge:	
  2009                           ; 0 bytes @ 0x1
  2010                           
  2011  0071                     ?___awdiv:	
  2012                           ; 1 bit 
  2013                           
  2014  0071                     ?___lwdiv:	
  2015                           ; 2 bytes @ 0x1
  2016                           
  2017  0071                     ?___lwmod:	
  2018                           ; 2 bytes @ 0x1
  2019                           
  2020  0071                     ?___wmul:	
  2021                           ; 2 bytes @ 0x1
  2022                           
  2023  0071                     ?___ftpack:	
  2024                           ; 2 bytes @ 0x1
  2025                           
  2026  0071                     ?___ftneg:	
  2027                           ; 3 bytes @ 0x1
  2028                           
  2029  0071                     ?___lldiv:	
  2030                           ; 3 bytes @ 0x1
  2031                           
  2032  0071                     NVMInit@sta:	
  2033                           ; 4 bytes @ 0x1
  2034                           
  2035  0071                     DINInit@sta:	
  2036                           ; 1 bytes @ 0x1
  2037                           
  2038  0071                     _isdigit$1094:	
  2039                           ; 1 bytes @ 0x1
  2040                           
  2041  0071                     SPIRead@dstPtr:	
  2042                           ; 1 bytes @ 0x1
  2043                           
  2044  0071                     SPIWrite@srcPtr:	
  2045                           ; 2 bytes @ 0x1
  2046                           
  2047  0071                     DLYDelay_us@val:	
  2048                           ; 2 bytes @ 0x1
  2049                           
  2050  0071                     DLYDelay_ms@val:	
  2051                           ; 2 bytes @ 0x1
  2052                           
  2053  0071                     NVMRead@addr:	
  2054                           ; 2 bytes @ 0x1
  2055                           
  2056  0071                     NVMWrite@addr:	
  2057                           ; 2 bytes @ 0x1
  2058                           
  2059  0071                     ___awdiv@divisor:	
  2060                           ; 2 bytes @ 0x1
  2061                           
  2062  0071                     ___lwdiv@divisor:	
  2063                           ; 2 bytes @ 0x1
  2064                           
  2065  0071                     ___lwmod@divisor:	
  2066                           ; 2 bytes @ 0x1
  2067                           
  2068  0071                     ___wmul@multiplier:	
  2069                           ; 2 bytes @ 0x1
  2070                           
  2071  0071                     ___ftpack@arg:	
  2072                           ; 2 bytes @ 0x1
  2073                           
  2074  0071                     ___ftge@ff1:	
  2075                           ; 3 bytes @ 0x1
  2076                           
  2077  0071                     ___ftneg@f1:	
  2078                           ; 3 bytes @ 0x1
  2079                           
  2080  0071                     ___lldiv@divisor:	
  2081                           ; 3 bytes @ 0x1
  2082                           
  2083                           
  2084                           ; 4 bytes @ 0x1
  2085  0071                     	ds	1
  2086  0072                     INInit@sta:	
  2087  0072                     OUTInit@sta:	
  2088                           ; 1 bytes @ 0x2
  2089                           
  2090  0072                     OUTSetHTCDataNibble@val:	
  2091                           ; 1 bytes @ 0x2
  2092                           
  2093  0072                     SPIInit@state:	
  2094                           ; 1 bytes @ 0x2
  2095                           
  2096  0072                     SYSInit@state:	
  2097                           ; 1 bytes @ 0x2
  2098                           
  2099  0072                     isdigit@c:	
  2100                           ; 1 bytes @ 0x2
  2101                           
  2102                           
  2103                           ; 1 bytes @ 0x2
  2104  0072                     	ds	1
  2105  0073                     ??_DLYDelay_us:	
  2106  0073                     ??_DLYDelay_ms:	
  2107                           ; 0 bytes @ 0x3
  2108                           
  2109  0073                     OUTSetHTCDataNibble@dataToSet:	
  2110                           ; 0 bytes @ 0x3
  2111                           
  2112  0073                     SPIRead@len:	
  2113                           ; 1 bytes @ 0x3
  2114                           
  2115  0073                     SPIWrite@len:	
  2116                           ; 1 bytes @ 0x3
  2117                           
  2118  0073                     NVMRead@dest:	
  2119                           ; 1 bytes @ 0x3
  2120                           
  2121  0073                     NVMWrite@source:	
  2122                           ; 1 bytes @ 0x3
  2123                           
  2124  0073                     DLYDelay_us@i:	
  2125                           ; 1 bytes @ 0x3
  2126                           
  2127  0073                     ___awdiv@dividend:	
  2128                           ; 2 bytes @ 0x3
  2129                           
  2130  0073                     ___lwdiv@dividend:	
  2131                           ; 2 bytes @ 0x3
  2132                           
  2133  0073                     ___lwmod@dividend:	
  2134                           ; 2 bytes @ 0x3
  2135                           
  2136  0073                     ___wmul@multiplicand:	
  2137                           ; 2 bytes @ 0x3
  2138                           
  2139                           
  2140                           ; 2 bytes @ 0x3
  2141  0073                     	ds	1
  2142  0074                     ??_SPIRead:	
  2143  0074                     ??_SPIWrite:	
  2144                           ; 0 bytes @ 0x4
  2145                           
  2146  0074                     ??___ftneg:	
  2147                           ; 0 bytes @ 0x4
  2148                           
  2149  0074                     NVMRead@len:	
  2150                           ; 0 bytes @ 0x4
  2151                           
  2152  0074                     NVMWrite@len:	
  2153                           ; 1 bytes @ 0x4
  2154                           
  2155  0074                     ___ftpack@exp:	
  2156                           ; 1 bytes @ 0x4
  2157                           
  2158  0074                     ___ftge@ff2:	
  2159                           ; 1 bytes @ 0x4
  2160                           
  2161                           
  2162                           ; 3 bytes @ 0x4
  2163  0074                     	ds	1
  2164  0075                     ?_DPYWriteNibble:	
  2165  0075                     ?_DPYWriteByte:	
  2166                           ; 0 bytes @ 0x5
  2167                           
  2168  0075                     ??_DPYIsBusy:	
  2169                           ; 0 bytes @ 0x5
  2170                           
  2171  0075                     ??_NVMRead:	
  2172                           ; 0 bytes @ 0x5
  2173                           
  2174  0075                     ??_NVMWrite:	
  2175                           ; 0 bytes @ 0x5
  2176                           
  2177  0075                     ??___awdiv:	
  2178                           ; 0 bytes @ 0x5
  2179                           
  2180  0075                     ??___lwdiv:	
  2181                           ; 0 bytes @ 0x5
  2182                           
  2183  0075                     ??___lwmod:	
  2184                           ; 0 bytes @ 0x5
  2185                           
  2186  0075                     ??___wmul:	
  2187                           ; 0 bytes @ 0x5
  2188                           
  2189  0075                     DPYWriteNibble@val:	
  2190                           ; 0 bytes @ 0x5
  2191                           
  2192  0075                     DPYWriteByte@val:	
  2193                           ; 1 bytes @ 0x5
  2194                           
  2195  0075                     ___ftpack@sign:	
  2196                           ; 1 bytes @ 0x5
  2197                           
  2198  0075                     DLYDelay_ms@i:	
  2199                           ; 1 bytes @ 0x5
  2200                           
  2201  0075                     ___wmul@product:	
  2202                           ; 2 bytes @ 0x5
  2203                           
  2204  0075                     ___lldiv@dividend:	
  2205                           ; 2 bytes @ 0x5
  2206                           
  2207                           
  2208                           ; 4 bytes @ 0x5
  2209  0075                     	ds	1
  2210  0076                     ??_DPYWriteNibble:	
  2211  0076                     ??_DPYWriteByte:	
  2212                           ; 0 bytes @ 0x6
  2213                           
  2214  0076                     ??___ftpack:	
  2215                           ; 0 bytes @ 0x6
  2216                           
  2217  0076                     SPIWrite@i:	
  2218                           ; 0 bytes @ 0x6
  2219                           
  2220  0076                     DPYWriteNibble@rs:	
  2221                           ; 1 bytes @ 0x6
  2222                           
  2223  0076                     DPYIsBusy@bf:	
  2224                           ; 1 bytes @ 0x6
  2225                           
  2226  0076                     ___awdiv@counter:	
  2227                           ; 1 bytes @ 0x6
  2228                           
  2229  0076                     ___lwmod@counter:	
  2230                           ; 1 bytes @ 0x6
  2231                           
  2232  0076                     ___lwdiv@quotient:	
  2233                           ; 1 bytes @ 0x6
  2234                           
  2235                           
  2236                           ; 2 bytes @ 0x6
  2237  0076                     	ds	1
  2238  0077                     ??_CC1Strobe:	
  2239  0077                     ?_CC1Write:	
  2240                           ; 0 bytes @ 0x7
  2241                           
  2242  0077                     ??___ftge:	
  2243                           ; 0 bytes @ 0x7
  2244                           
  2245  0077                     CC1Write@src:	
  2246                           ; 0 bytes @ 0x7
  2247                           
  2248  0077                     NVMRead@i:	
  2249                           ; 1 bytes @ 0x7
  2250                           
  2251  0077                     DPYWriteByte@rs:	
  2252                           ; 1 bytes @ 0x7
  2253                           
  2254  0077                     ___awdiv@sign:	
  2255                           ; 1 bytes @ 0x7
  2256                           
  2257                           
  2258                           ; 1 bytes @ 0x7
  2259  0077                     	ds	1
  2260  0078                     ?_DPYDrawChar:	
  2261  0078                     ??_PGMReadNvm:	
  2262                           ; 0 bytes @ 0x8
  2263                           
  2264  0078                     ?_DPYSetCur:	
  2265                           ; 0 bytes @ 0x8
  2266                           
  2267  0078                     ??_DPYSendChar:	
  2268                           ; 0 bytes @ 0x8
  2269                           
  2270  0078                     ??_PGMWriteNvm:	
  2271                           ; 0 bytes @ 0x8
  2272                           
  2273  0078                     CC1Strobe@e_stb:	
  2274                           ; 0 bytes @ 0x8
  2275                           
  2276  0078                     CC1Write@len:	
  2277                           ; 1 bytes @ 0x8
  2278                           
  2279  0078                     DPYDrawChar@p:	
  2280                           ; 1 bytes @ 0x8
  2281                           
  2282  0078                     DPYSetCur@col:	
  2283                           ; 1 bytes @ 0x8
  2284                           
  2285  0078                     ___lwdiv@counter:	
  2286                           ; 1 bytes @ 0x8
  2287                           
  2288  0078                     ___awdiv@quotient:	
  2289                           ; 1 bytes @ 0x8
  2290                           
  2291                           
  2292                           ; 2 bytes @ 0x8
  2293  0078                     	ds	1
  2294  0079                     ??_CC1Write:	
  2295  0079                     ??_DPYDrawChar:	
  2296                           ; 0 bytes @ 0x9
  2297                           
  2298  0079                     ??_utoa:	
  2299                           ; 0 bytes @ 0x9
  2300                           
  2301  0079                     ??_DPYSetCur:	
  2302                           ; 0 bytes @ 0x9
  2303                           
  2304  0079                     ??___lldiv:	
  2305                           ; 0 bytes @ 0x9
  2306                           
  2307  0079                     ??___lltoft:	
  2308                           ; 0 bytes @ 0x9
  2309                           
  2310  0079                     SPIRead@i:	
  2311                           ; 0 bytes @ 0x9
  2312                           
  2313  0079                     CC1Strobe@cc1Stb:	
  2314                           ; 1 bytes @ 0x9
  2315                           
  2316  0079                     DPYSendChar@c:	
  2317                           ; 1 bytes @ 0x9
  2318                           
  2319  0079                     ___ftadd@sign:	
  2320                           ; 1 bytes @ 0x9
  2321                           
  2322                           
  2323                           ; 1 bytes @ 0x9
  2324  0079                     	ds	1
  2325  007A                     ??_itoa:	
  2326  007A                     ??_CC1Read:	
  2327                           ; 0 bytes @ 0xA
  2328                           
  2329  007A                     ??___llmod:	
  2330                           ; 0 bytes @ 0xA
  2331                           
  2332  007A                     CC1Write@addr:	
  2333                           ; 0 bytes @ 0xA
  2334                           
  2335  007A                     DPYSetCur@row:	
  2336                           ; 1 bytes @ 0xA
  2337                           
  2338  007A                     ___ftadd@exp2:	
  2339                           ; 1 bytes @ 0xA
  2340                           
  2341  007A                     ___lltoft@exp:	
  2342                           ; 1 bytes @ 0xA
  2343                           
  2344                           
  2345                           ; 1 bytes @ 0xA
  2346  007A                     	ds	1
  2347  007B                     ??_DPYInitDisplay:	
  2348  007B                     ??_RTXSup:	
  2349                           ; 0 bytes @ 0xB
  2350                           
  2351  007B                     ?_RTXRcvPkt:	
  2352                           ; 0 bytes @ 0xB
  2353                           
  2354  007B                     CC1Write@cc1Addr:	
  2355                           ; 0 bytes @ 0xB
  2356                           
  2357  007B                     DPYSetCur@addr:	
  2358                           ; 1 bytes @ 0xB
  2359                           
  2360  007B                     RTXRcvPkt@len:	
  2361                           ; 1 bytes @ 0xB
  2362                           
  2363  007B                     ___ftadd@exp1:	
  2364                           ; 1 bytes @ 0xB
  2365                           
  2366  007B                     ___llmod@counter:	
  2367                           ; 1 bytes @ 0xB
  2368                           
  2369                           
  2370                           ; 1 bytes @ 0xB
  2371  007B                     	ds	1
  2372  007C                     ??_PGMCheckNvm:	
  2373  007C                     ??_PGMPgmOff:	
  2374                           ; 0 bytes @ 0xC
  2375                           
  2376  007C                     ??_DPYInit:	
  2377                           ; 0 bytes @ 0xC
  2378                           
  2379  007C                     ??_PGMInit:	
  2380                           ; 0 bytes @ 0xC
  2381                           
  2382  007C                     ??_PGMTick:	
  2383                           ; 0 bytes @ 0xC
  2384                           
  2385  007C                     ??_PGMSelDown:	
  2386                           ; 0 bytes @ 0xC
  2387                           
  2388  007C                     ??_RTXInit:	
  2389                           ; 0 bytes @ 0xC
  2390                           
  2391  007C                     ??_RTXTick:	
  2392                           ; 0 bytes @ 0xC
  2393                           
  2394  007C                     ??_RTXTask:	
  2395                           ; 0 bytes @ 0xC
  2396                           
  2397  007C                     ??_RTXSelDown:	
  2398                           ; 0 bytes @ 0xC
  2399                           
  2400  007C                     ??_RTXPgmOn:	
  2401                           ; 0 bytes @ 0xC
  2402                           
  2403  007C                     ??_SYSTask:	
  2404                           ; 0 bytes @ 0xC
  2405                           
  2406  007C                     ??___ftsub:	
  2407                           ; 0 bytes @ 0xC
  2408                           
  2409                           
  2410                           	psect	cstackBANK0
  2411  0020                     __pcstackBANK0:	
  2412                           ; 0 bytes @ 0xC
  2413                           
  2414  0020                     ??_CC1Init:	
  2415  0020                     ?_CC1Read:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0020                     ?_DPYSendStr:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0020                     ?_utoa:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0020                     ?___ftadd:	
  2425                           ; 1 bytes @ 0x0
  2426                           
  2427  0020                     ?___ftmul:	
  2428                           ; 3 bytes @ 0x0
  2429                           
  2430  0020                     ?___lltoft:	
  2431                           ; 3 bytes @ 0x0
  2432                           
  2433  0020                     DPYDrawChar@addr:	
  2434                           ; 3 bytes @ 0x0
  2435                           
  2436  0020                     DPYSendStr@col:	
  2437                           ; 1 bytes @ 0x0
  2438                           
  2439  0020                     CC1Read@dst:	
  2440                           ; 1 bytes @ 0x0
  2441                           
  2442  0020                     utoa@val:	
  2443                           ; 2 bytes @ 0x0
  2444                           
  2445  0020                     ___ftadd@f1:	
  2446                           ; 2 bytes @ 0x0
  2447                           
  2448  0020                     ___ftmul@f1:	
  2449                           ; 3 bytes @ 0x0
  2450                           
  2451  0020                     ___lldiv@quotient:	
  2452                           ; 3 bytes @ 0x0
  2453                           
  2454  0020                     ___lltoft@c:	
  2455                           ; 4 bytes @ 0x0
  2456                           
  2457  0020                     NVMWrite@bufTmpRow:	
  2458                           ; 4 bytes @ 0x0
  2459                           
  2460                           
  2461                           ; 64 bytes @ 0x0
  2462  0020                     	ds	1
  2463  0021                     DPYDrawChar@tmpAddr:	
  2464  0021                     DPYSendStr@data:	
  2465                           ; 1 bytes @ 0x1
  2466                           
  2467                           
  2468                           ; 1 bytes @ 0x1
  2469  0021                     	ds	1
  2470  0022                     CC1Init@state:	
  2471  0022                     CC1Read@len:	
  2472                           ; 1 bytes @ 0x2
  2473                           
  2474  0022                     DPYDrawChar@i:	
  2475                           ; 1 bytes @ 0x2
  2476                           
  2477  0022                     DPYSendStr@len:	
  2478                           ; 1 bytes @ 0x2
  2479                           
  2480  0022                     utoa@base:	
  2481                           ; 1 bytes @ 0x2
  2482                           
  2483                           
  2484                           ; 2 bytes @ 0x2
  2485  0022                     	ds	1
  2486  0023                     ??_DPYSendStr:	
  2487  0023                     CC1Read@addr:	
  2488                           ; 0 bytes @ 0x3
  2489                           
  2490  0023                     DPYInitDisplay@tmp:	
  2491                           ; 1 bytes @ 0x3
  2492                           
  2493  0023                     ___ftadd@f2:	
  2494                           ; 1 bytes @ 0x3
  2495                           
  2496  0023                     ___ftmul@f2:	
  2497                           ; 3 bytes @ 0x3
  2498                           
  2499                           
  2500                           ; 3 bytes @ 0x3
  2501  0023                     	ds	1
  2502  0024                     CC1Read@cc1Addr:	
  2503  0024                     DPYInit@sta:	
  2504                           ; 1 bytes @ 0x4
  2505                           
  2506  0024                     DPYSendStr@i:	
  2507                           ; 1 bytes @ 0x4
  2508                           
  2509  0024                     ___lldiv@counter:	
  2510                           ; 1 bytes @ 0x4
  2511                           
  2512  0024                     utoa@v:	
  2513                           ; 1 bytes @ 0x4
  2514                           
  2515                           
  2516                           ; 2 bytes @ 0x4
  2517  0024                     	ds	1
  2518  0025                     ?_RTXSndPkt:	
  2519  0025                     ??_RTXRcvPkt:	
  2520                           ; 0 bytes @ 0x5
  2521                           
  2522  0025                     ?___llmod:	
  2523                           ; 0 bytes @ 0x5
  2524                           
  2525  0025                     DPYSendStr@row:	
  2526                           ; 4 bytes @ 0x5
  2527                           
  2528  0025                     RTXSndPkt@len:	
  2529                           ; 1 bytes @ 0x5
  2530                           
  2531  0025                     ___llmod@divisor:	
  2532                           ; 1 bytes @ 0x5
  2533                           
  2534                           
  2535                           ; 4 bytes @ 0x5
  2536  0025                     	ds	1
  2537  0026                     ??_RTXSndPkt:	
  2538  0026                     ??___ftadd:	
  2539                           ; 0 bytes @ 0x6
  2540                           
  2541  0026                     ??___ftmul:	
  2542                           ; 0 bytes @ 0x6
  2543                           
  2544  0026                     RTXRcvPkt@dst:	
  2545                           ; 0 bytes @ 0x6
  2546                           
  2547  0026                     utoa@c:	
  2548                           ; 1 bytes @ 0x6
  2549                           
  2550                           
  2551                           ; 1 bytes @ 0x6
  2552  0026                     	ds	1
  2553  0027                     utoa@buf:	
  2554                           
  2555                           ; 1 bytes @ 0x7
  2556  0027                     	ds	1
  2557  0028                     ?_itoa:	
  2558  0028                     RTXSndPkt@src:	
  2559                           ; 1 bytes @ 0x8
  2560                           
  2561  0028                     itoa@val:	
  2562                           ; 1 bytes @ 0x8
  2563                           
  2564                           
  2565                           ; 2 bytes @ 0x8
  2566  0028                     	ds	1
  2567  0029                     ??_RTXSendPgm:	
  2568  0029                     ??_RTXSendRData:	
  2569                           ; 0 bytes @ 0x9
  2570                           
  2571  0029                     ___llmod@dividend:	
  2572                           ; 0 bytes @ 0x9
  2573                           
  2574                           
  2575                           ; 4 bytes @ 0x9
  2576  0029                     	ds	1
  2577  002A                     ?___ftsub:	
  2578  002A                     ___ftmul@exp:	
  2579                           ; 3 bytes @ 0xA
  2580                           
  2581  002A                     itoa@base:	
  2582                           ; 1 bytes @ 0xA
  2583                           
  2584  002A                     ___ftsub@f2:	
  2585                           ; 2 bytes @ 0xA
  2586                           
  2587                           
  2588                           ; 3 bytes @ 0xA
  2589  002A                     	ds	1
  2590  002B                     ___ftmul@f3_as_product:	
  2591                           
  2592                           ; 3 bytes @ 0xB
  2593  002B                     	ds	1
  2594  002C                     itoa@cp:	
  2595                           
  2596                           ; 1 bytes @ 0xC
  2597  002C                     	ds	1
  2598  002D                     ?_sprintf:	
  2599  002D                     sprintf@f:	
  2600                           ; 2 bytes @ 0xD
  2601                           
  2602  002D                     itoa@buf:	
  2603                           ; 1 bytes @ 0xD
  2604                           
  2605  002D                     ___ftsub@f1:	
  2606                           ; 1 bytes @ 0xD
  2607                           
  2608                           
  2609                           ; 3 bytes @ 0xD
  2610  002D                     	ds	1
  2611  002E                     ___ftmul@cntr:	
  2612                           
  2613                           ; 1 bytes @ 0xE
  2614  002E                     	ds	1
  2615  002F                     ___ftmul@sign:	
  2616                           
  2617                           ; 1 bytes @ 0xF
  2618  002F                     	ds	1
  2619  0030                     ?___fttol:	
  2620  0030                     ___fttol@f1:	
  2621                           ; 4 bytes @ 0x10
  2622                           
  2623                           
  2624                           ; 3 bytes @ 0x10
  2625  0030                     	ds	4
  2626  0034                     ??___fttol:	
  2627                           
  2628                           ; 0 bytes @ 0x14
  2629  0034                     	ds	2
  2630  0036                     ??_sprintf:	
  2631                           
  2632                           ; 0 bytes @ 0x16
  2633  0036                     	ds	2
  2634  0038                     ___fttol@sign1:	
  2635                           
  2636                           ; 1 bytes @ 0x18
  2637  0038                     	ds	1
  2638  0039                     ___fttol@lval:	
  2639                           
  2640                           ; 4 bytes @ 0x19
  2641  0039                     	ds	2
  2642  003B                     sprintf@flag:	
  2643                           
  2644                           ; 1 bytes @ 0x1B
  2645  003B                     	ds	1
  2646  003C                     sprintf@ap:	
  2647                           
  2648                           ; 1 bytes @ 0x1C
  2649  003C                     	ds	1
  2650  003D                     ___fttol@exp1:	
  2651  003D                     sprintf@_val:	
  2652                           ; 1 bytes @ 0x1D
  2653                           
  2654                           
  2655                           ; 4 bytes @ 0x1D
  2656  003D                     	ds	4
  2657  0041                     sprintf@sp:	
  2658                           
  2659                           ; 1 bytes @ 0x21
  2660  0041                     	ds	1
  2661  0042                     sprintf@width:	
  2662                           
  2663                           ; 2 bytes @ 0x22
  2664  0042                     	ds	2
  2665  0044                     sprintf@prec:	
  2666                           
  2667                           ; 2 bytes @ 0x24
  2668  0044                     	ds	2
  2669  0046                     sprintf@c:	
  2670                           
  2671                           ; 1 bytes @ 0x26
  2672  0046                     	ds	1
  2673  0047                     ?_ftoa:	
  2674  0047                     ftoa@f:	
  2675                           ; 1 bytes @ 0x27
  2676                           
  2677                           
  2678                           ; 3 bytes @ 0x27
  2679  0047                     	ds	3
  2680  004A                     ftoa@status:	
  2681                           
  2682                           ; 1 bytes @ 0x2A
  2683  004A                     	ds	1
  2684  004B                     ??_ftoa:	
  2685                           
  2686                           ; 0 bytes @ 0x2B
  2687  004B                     	ds	1
  2688  004C                     ftoa@rem:	
  2689                           
  2690                           ; 4 bytes @ 0x2C
  2691  004C                     	ds	4
  2692  0050                     ftoa@l:	
  2693                           
  2694                           ; 4 bytes @ 0x30
  2695  0050                     	ds	4
  2696  0054                     ftoa@cp:	
  2697                           
  2698                           ; 1 bytes @ 0x34
  2699  0054                     	ds	1
  2700  0055                     ?_RTXVisDec:	
  2701  0055                     RTXVisDec@val:	
  2702                           ; 1 bytes @ 0x35
  2703                           
  2704                           
  2705                           ; 3 bytes @ 0x35
  2706  0055                     	ds	3
  2707  0058                     RTXVisDec@buff:	
  2708                           
  2709                           ; 1 bytes @ 0x38
  2710  0058                     	ds	1
  2711  0059                     RTXVisDec@maxDigit:	
  2712                           
  2713                           ; 1 bytes @ 0x39
  2714  0059                     	ds	1
  2715  005A                     ??_RTXVisDec:	
  2716                           
  2717                           ; 0 bytes @ 0x3A
  2718  005A                     	ds	4
  2719  005E                     ??_RTXUpdateDisplay:	
  2720                           
  2721                           ; 0 bytes @ 0x3E
  2722  005E                     	ds	2
  2723  0060                     NVMWrite@rowAddr:	
  2724                           
  2725                           ; 2 bytes @ 0x40
  2726  0060                     	ds	1
  2727  0061                     RTXInit@state:	
  2728                           
  2729                           ; 1 bytes @ 0x41
  2730  0061                     	ds	1
  2731  0062                     NVMWrite@i:	
  2732                           
  2733                           ; 1 bytes @ 0x42
  2734  0062                     	ds	1
  2735  0063                     NVMWrite@latchAddr:	
  2736                           
  2737                           ; 1 bytes @ 0x43
  2738  0063                     	ds	1
  2739  0064                     NVMWrite@j:	
  2740                           
  2741                           ; 1 bytes @ 0x44
  2742  0064                     	ds	1
  2743  0065                     ??_PGMNvmReset:	
  2744  0065                     ??_RTXReadPkt:	
  2745                           ; 0 bytes @ 0x45
  2746                           
  2747  0065                     ??_PGMSelLong:	
  2748                           ; 0 bytes @ 0x45
  2749                           
  2750                           
  2751                           ; 0 bytes @ 0x45
  2752  0065                     	ds	1
  2753  0066                     PGMInit@state:	
  2754  0066                     RTXReadPkt@valTemp:	
  2755                           ; 1 bytes @ 0x46
  2756                           
  2757                           
  2758                           ; 3 bytes @ 0x46
  2759  0066                     	ds	3
  2760  0069                     RTXReadPkt@valBatt:	
  2761                           
  2762                           ; 3 bytes @ 0x49
  2763  0069                     	ds	3
  2764  006C                     ??_main:	
  2765                           
  2766                           ; 0 bytes @ 0x4C
  2767  006C                     	ds	1
  2768  006D                     main@i:	
  2769                           
  2770                           ; 1 bytes @ 0x4D
  2771  006D                     	ds	1
  2772                           
  2773                           	psect	maintext
  2774  0BB9                     __pmaintext:	
  2775 ;;
  2776 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2777 ;;
  2778 ;; *************** function _main *****************
  2779 ;; Defined at:
  2780 ;;		line 51 in file "Base.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  i               1   77[BANK0 ] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;		None               void
  2787 ;; Registers used:
  2788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 17F/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2798 ;;Total ram usage:        2 bytes
  2799 ;; Hardware stack levels required when called:   11
  2800 ;; This function calls:
  2801 ;;		_INInit
  2802 ;;		_OUTInit
  2803 ;;		_SPIInit
  2804 ;;		_CC1Init
  2805 ;;		_NVMInit
  2806 ;;		_DINInit
  2807 ;;		_DINTask
  2808 ;;		_DPYInit
  2809 ;;		_PGMInit
  2810 ;;		_RTXInit
  2811 ;;		_RTXTask
  2812 ;;		_SYSInit
  2813 ;;		_SYSTask
  2814 ;; This function is called by:
  2815 ;;		Startup code after reset
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           
  2820                           ;psect for function _main
  2821  0BB9                     _main:	
  2822                           
  2823                           ;Base.c: 52: unsigned char i;
  2824                           ;Base.c: 55: for(i=0;i<3;i++)
  2825                           
  2826                           ;incstack = 0
  2827                           ; Regs used in _main: [allreg]
  2828  0BB9  0020               	movlb	0	; select bank0
  2829  0BBA  01ED               	clrf	main@i
  2830  0BBB  3003               	movlw	3
  2831  0BBC  026D               	subwf	main@i,w
  2832  0BBD  1803               	btfsc	3,0
  2833  0BBE  2BFB               	goto	l698
  2834  0BBF                     l697:	
  2835  0BBF  0064               	clrwdt	;# 
  2836                           
  2837                           ;Base.c: 59: SYSInit(i);
  2838  0BC0  0020               	movlb	0	; select bank0
  2839  0BC1  086D               	movf	main@i,w
  2840  0BC2  3197  2746  318B   	fcall	_SYSInit
  2841                           
  2842                           ;Base.c: 60: INInit(i);
  2843  0BC5  0020               	movlb	0	; select bank0
  2844  0BC6  086D               	movf	main@i,w
  2845  0BC7  3195  25D3  318B   	fcall	_INInit
  2846                           
  2847                           ;Base.c: 61: OUTInit(i);
  2848  0BCA  0020               	movlb	0	; select bank0
  2849  0BCB  086D               	movf	main@i,w
  2850  0BCC  3188  2039  318B   	fcall	_OUTInit
  2851                           
  2852                           ;Base.c: 62: DINInit(i);
  2853  0BCF  0020               	movlb	0	; select bank0
  2854  0BD0  086D               	movf	main@i,w
  2855  0BD1  3195  2536  318B   	fcall	_DINInit
  2856                           
  2857                           ;Base.c: 63: SPIInit(i);
  2858  0BD4  0020               	movlb	0	; select bank0
  2859  0BD5  086D               	movf	main@i,w
  2860  0BD6  3196  26A8  318B   	fcall	_SPIInit
  2861                           
  2862                           ;Base.c: 64: CC1Init(i);
  2863  0BD9  0020               	movlb	0	; select bank0
  2864  0BDA  086D               	movf	main@i,w
  2865  0BDB  3189  21AA  318B   	fcall	_CC1Init
  2866                           
  2867                           ;Base.c: 65: NVMInit(i);
  2868  0BDE  0020               	movlb	0	; select bank0
  2869  0BDF  086D               	movf	main@i,w
  2870  0BE0  3194  24D1  318B   	fcall	_NVMInit
  2871                           
  2872                           ;Base.c: 66: DPYInit(i);
  2873  0BE3  0020               	movlb	0	; select bank0
  2874  0BE4  086D               	movf	main@i,w
  2875  0BE5  3195  2548  318B   	fcall	_DPYInit
  2876                           
  2877                           ;Base.c: 67: RTXInit(i);
  2878  0BE8  0020               	movlb	0	; select bank0
  2879  0BE9  086D               	movf	main@i,w
  2880  0BEA  3188  20A0  318B   	fcall	_RTXInit
  2881                           
  2882                           ;Base.c: 68: PGMInit(i);
  2883  0BED  0020               	movlb	0	; select bank0
  2884  0BEE  086D               	movf	main@i,w
  2885  0BEF  3196  261C  318B   	fcall	_PGMInit
  2886  0BF2  3001               	movlw	1
  2887  0BF3  0020               	movlb	0	; select bank0
  2888  0BF4  00EC               	movwf	??_main
  2889  0BF5  086C               	movf	??_main,w
  2890  0BF6  07ED               	addwf	main@i,f
  2891  0BF7  3003               	movlw	3
  2892  0BF8  026D               	subwf	main@i,w
  2893  0BF9  1C03               	skipc
  2894  0BFA  2BBF               	goto	l697
  2895  0BFB                     l698:	
  2896                           
  2897                           ;Base.c: 69: }
  2898                           ;Base.c: 72: INTCONbits.GIE=1;
  2899  0BFB  178B               	bsf	11,7	;volatile
  2900  0BFC                     l699:	
  2901                           ;Base.c: 75: while(1)
  2902                           
  2903  0BFC  0064               	clrwdt	;# 
  2904                           
  2905                           ;Base.c: 79: SYSTask();
  2906  0BFD  318A  220E  318B   	fcall	_SYSTask
  2907                           
  2908                           ;Base.c: 80: DINTask();
  2909  0C00  3197  278D  318B   	fcall	_DINTask
  2910                           
  2911                           ;Base.c: 81: RTXTask();
  2912  0C03  3194  24A4  318B   	fcall	_RTXTask
  2913  0C06  2BFC               	goto	l699
  2914  0C07                     __end_of_main:	
  2915                           
  2916                           	psect	text1
  2917  0A0E                     __ptext1:	
  2918 ;; *************** function _SYSTask *****************
  2919 ;; Defined at:
  2920 ;;		line 42 in file "SYS.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;		None
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;		None
  2925 ;; Return value:  Size  Location     Type
  2926 ;;		None               void
  2927 ;; Registers used:
  2928 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2929 ;; Tracked objects:
  2930 ;;		On entry : 0/0
  2931 ;;		On exit  : 0/0
  2932 ;;		Unchanged: 0/0
  2933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2938 ;;Total ram usage:        0 bytes
  2939 ;; Hardware stack levels used:    1
  2940 ;; Hardware stack levels required when called:   10
  2941 ;; This function calls:
  2942 ;;		_DINTick
  2943 ;;		_PGMTick
  2944 ;;		_PGMPgmOff
  2945 ;;		_PGMSelDown
  2946 ;;		_PGMSelLong
  2947 ;;		_RTXPgmOff
  2948 ;;		_RTXTick
  2949 ;;		_RTXSelDown
  2950 ;;		_RTXPgmOn
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           
  2957                           ;psect for function _SYSTask
  2958  0A0E                     _SYSTask:	
  2959                           
  2960                           ;SYS.c: 44: if(u_SYS_STA.TICK)
  2961                           
  2962                           ;incstack = 0
  2963                           ; Regs used in _SYSTask: [allreg]
  2964  0A0E  0021               	movlb	1	; select bank1
  2965  0A0F  1C68               	btfss	_u_SYS_STA^(0+128),0
  2966  0A10  2A1B               	goto	l5560
  2967                           
  2968                           ;SYS.c: 45: {
  2969                           ;SYS.c: 47: u_SYS_STA.TICK=0;
  2970  0A11  1068               	bcf	_u_SYS_STA^(0+128),0
  2971                           
  2972                           ;SYS.c: 50: RTXTick();
  2973  0A12  3187  27C4  318A   	fcall	_RTXTick
  2974                           
  2975                           ;SYS.c: 51: DINTick();
  2976  0A15  3188  2078  318A   	fcall	_DINTick
  2977                           
  2978                           ;SYS.c: 52: PGMTick();
  2979  0A18  3195  2504  318A   	fcall	_PGMTick
  2980  0A1B                     l5560:	
  2981                           
  2982                           ;SYS.c: 53: }
  2983                           ;SYS.c: 55: if(u_in_ev_down.sel)
  2984  0A1B  0021               	movlb	1	; select bank1
  2985  0A1C  1C6A               	btfss	_u_in_ev_down^(0+128),0
  2986  0A1D  2A25               	goto	l5566
  2987                           
  2988                           ;SYS.c: 56: {
  2989                           ;SYS.c: 58: u_in_ev_down.sel=0;
  2990  0A1E  106A               	bcf	_u_in_ev_down^(0+128),0
  2991                           
  2992                           ;SYS.c: 59: PGMSelDown();
  2993  0A1F  3195  25A8  318A   	fcall	_PGMSelDown
  2994                           
  2995                           ;SYS.c: 60: RTXSelDown();
  2996  0A22  3196  2637  318A   	fcall	_RTXSelDown
  2997  0A25                     l5566:	
  2998                           
  2999                           ;SYS.c: 61: }
  3000                           ;SYS.c: 62: if(u_in_ev_long.sel)
  3001  0A25  0021               	movlb	1	; select bank1
  3002  0A26  1C6B               	btfss	_u_in_ev_long^(0+128),0
  3003  0A27  2A2C               	goto	l5572
  3004                           
  3005                           ;SYS.c: 63: {
  3006                           ;SYS.c: 65: u_in_ev_long.sel=0;
  3007  0A28  106B               	bcf	_u_in_ev_long^(0+128),0
  3008                           
  3009                           ;SYS.c: 66: PGMSelLong();
  3010  0A29  3197  2704  318A   	fcall	_PGMSelLong
  3011  0A2C                     l5572:	
  3012                           
  3013                           ;SYS.c: 67: }
  3014                           ;SYS.c: 71: if(rtx_flg.pgmDone)
  3015  0A2C  0021               	movlb	1	; select bank1
  3016  0A2D  1CE3               	btfss	_rtx_flg^(0+128),1
  3017  0A2E  2A33               	goto	l5578
  3018                           
  3019                           ;SYS.c: 72: {
  3020                           ;SYS.c: 74: rtx_flg.pgmDone=0;
  3021  0A2F  10E3               	bcf	_rtx_flg^(0+128),1
  3022                           
  3023                           ;SYS.c: 76: PGMPgmOff();
  3024  0A30  3194  24C7  318A   	fcall	_PGMPgmOff
  3025  0A33                     l5578:	
  3026                           
  3027                           ;SYS.c: 77: }
  3028                           ;SYS.c: 80: if(pgm_flg.evPgmOn)
  3029  0A33  0021               	movlb	1	; select bank1
  3030  0A34  1CE2               	btfss	_pgm_flg^(0+128),1
  3031  0A35  2A3A               	goto	l5584
  3032                           
  3033                           ;SYS.c: 81: {
  3034                           ;SYS.c: 83: pgm_flg.evPgmOn=0;
  3035  0A36  10E2               	bcf	_pgm_flg^(0+128),1
  3036                           
  3037                           ;SYS.c: 85: RTXPgmOn();
  3038  0A37  3194  2493  318A   	fcall	_RTXPgmOn
  3039  0A3A                     l5584:	
  3040                           
  3041                           ;SYS.c: 86: }
  3042                           ;SYS.c: 87: if(pgm_flg.evPgmOff)
  3043  0A3A  0021               	movlb	1	; select bank1
  3044  0A3B  1D62               	btfss	_pgm_flg^(0+128),2
  3045  0A3C  0008               	return
  3046                           
  3047                           ;SYS.c: 88: {
  3048                           ;SYS.c: 90: pgm_flg.evPgmOff=0;
  3049  0A3D  1162               	bcf	_pgm_flg^(0+128),2
  3050                           
  3051                           ;SYS.c: 92: RTXPgmOff();
  3052  0A3E  3194  249E         	fcall	_RTXPgmOff
  3053  0A40  0008               	return
  3054  0A41                     __end_of_SYSTask:	
  3055                           
  3056                           	psect	text2
  3057  1493                     __ptext2:	
  3058 ;; *************** function _RTXPgmOn *****************
  3059 ;; Defined at:
  3060 ;;		line 465 in file "RTX.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;		None
  3065 ;; Return value:  Size  Location     Type
  3066 ;;		None               void
  3067 ;; Registers used:
  3068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3078 ;;Total ram usage:        0 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    6
  3081 ;; This function calls:
  3082 ;;		_RTXSendPgm
  3083 ;; This function is called by:
  3084 ;;		_SYSTask
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _RTXPgmOn
  3090  1493                     _RTXPgmOn:	
  3091                           
  3092                           ;RTX.c: 467: rtx_flg.pgmonoff=1;
  3093                           
  3094                           ;incstack = 0
  3095                           ; Regs used in _RTXPgmOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3096  1493  0021               	movlb	1	; select bank1
  3097  1494  1563               	bsf	_rtx_flg^(0+128),2
  3098                           
  3099                           ;RTX.c: 469: RTXSendPgm();
  3100  1495  3196  26E5         	fcall	_RTXSendPgm
  3101  1497  0008               	return
  3102  1498                     __end_of_RTXPgmOn:	
  3103                           
  3104                           	psect	text3
  3105  1637                     __ptext3:	
  3106 ;; *************** function _RTXSelDown *****************
  3107 ;; Defined at:
  3108 ;;		line 306 in file "RTX.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    8
  3129 ;; This function calls:
  3130 ;;		_RTXUpdateDisplay
  3131 ;; This function is called by:
  3132 ;;		_SYSTask
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _RTXSelDown
  3138  1637                     _RTXSelDown:	
  3139                           
  3140                           ;RTX.c: 307: if(pgm_cfg.menu)
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in _RTXSelDown: [allreg]
  3144  1637  0022               	movlb	2	; select bank2
  3145  1638  0851               	movf	(_pgm_cfg^(0+256)+2),w
  3146  1639  1903               	btfsc	3,2
  3147  163A  0008               	return
  3148                           
  3149                           ;RTX.c: 308: {
  3150                           ;RTX.c: 309: if(tmrVisBatt)
  3151  163B  0021               	movlb	1	; select bank1
  3152  163C  0861               	movf	(_tmrVisBatt+1)^(0+128),w
  3153  163D  0460               	iorwf	_tmrVisBatt^(0+128),w
  3154  163E  1903               	skipnz
  3155  163F  2E48               	goto	l5108
  3156                           
  3157                           ;RTX.c: 310: {
  3158                           ;RTX.c: 312: RTXUpdateDisplay(UPD_DPY_TEMP);
  3159  1640  3001               	movlw	1
  3160  1641  3180  2040         	fcall	_RTXUpdateDisplay
  3161                           
  3162                           ;RTX.c: 314: tmrVisBatt=0;
  3163  1643  0021               	movlb	1	; select bank1
  3164  1644  01E0               	clrf	_tmrVisBatt^(0+128)
  3165  1645  01E1               	clrf	(_tmrVisBatt+1)^(0+128)
  3166                           
  3167                           ;RTX.c: 315: }
  3168  1646  0022               	movlb	2	; select bank2
  3169  1647  0008               	return
  3170  1648                     l5108:	
  3171                           
  3172                           ;RTX.c: 316: else
  3173                           ;RTX.c: 317: {
  3174                           ;RTX.c: 319: RTXUpdateDisplay(UPD_DPY_BATT);
  3175  1648  3002               	movlw	2
  3176  1649  3180  2040         	fcall	_RTXUpdateDisplay
  3177                           
  3178                           ;RTX.c: 321: tmrVisBatt=500;
  3179  164B  30F4               	movlw	244
  3180  164C  0021               	movlb	1	; select bank1
  3181  164D  00E0               	movwf	_tmrVisBatt^(0+128)
  3182  164E  3001               	movlw	1
  3183  164F  00E1               	movwf	(_tmrVisBatt^(0+128)+1)
  3184  1650  0022               	movlb	2	; select bank2
  3185  1651  0008               	return
  3186  1652                     __end_of_RTXSelDown:	
  3187                           
  3188                           	psect	text4
  3189  07C4                     __ptext4:	
  3190 ;; *************** function _RTXTick *****************
  3191 ;; Defined at:
  3192 ;;		line 83 in file "RTX.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;		None
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;		None
  3197 ;; Return value:  Size  Location     Type
  3198 ;;		None               void
  3199 ;; Registers used:
  3200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3210 ;;Total ram usage:        0 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    8
  3213 ;; This function calls:
  3214 ;;		_CC1Strobe
  3215 ;;		_RTXUpdateDisplay
  3216 ;;		_RTXSup
  3217 ;;		_RTXSendPgm
  3218 ;; This function is called by:
  3219 ;;		_SYSTask
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           
  3224                           ;psect for function _RTXTick
  3225  07C4                     _RTXTick:	
  3226                           
  3227                           ;RTX.c: 85: RTXSup();
  3228                           
  3229                           ;incstack = 0
  3230                           ; Regs used in _RTXTick: [allreg]
  3231  07C4  3189  2121  3187   	fcall	_RTXSup
  3232                           
  3233                           ;RTX.c: 87: tmrCalibration++;
  3234  07C7  3001               	movlw	1
  3235  07C8  0022               	movlb	2	; select bank2
  3236  07C9  07A6               	addwf	_tmrCalibration^(0+256),f
  3237  07CA  3000               	movlw	0
  3238  07CB  3DA7               	addwfc	(_tmrCalibration+1)^(0+256),f
  3239                           
  3240                           ;RTX.c: 88: if(tmrCalibration>1000)
  3241  07CC  3003               	movlw	3
  3242  07CD  0227               	subwf	(_tmrCalibration+1)^(0+256),w
  3243  07CE  30E9               	movlw	233
  3244  07CF  1903               	skipnz
  3245  07D0  0226               	subwf	_tmrCalibration^(0+256),w
  3246  07D1  1C03               	skipc
  3247  07D2  2FE1               	goto	l5430
  3248                           
  3249                           ;RTX.c: 89: {
  3250                           ;RTX.c: 90: tmrCalibration=0;
  3251  07D3  01A6               	clrf	_tmrCalibration^(0+256)
  3252  07D4  01A7               	clrf	(_tmrCalibration+1)^(0+256)
  3253                           
  3254                           ;RTX.c: 91: CC1Strobe(SIDLE);
  3255  07D5  3036               	movlw	54
  3256  07D6  3195  2594  3187   	fcall	_CC1Strobe
  3257                           
  3258                           ;RTX.c: 92: CC1Strobe(SCAL);
  3259  07D9  3033               	movlw	51
  3260  07DA  3195  2594  3187   	fcall	_CC1Strobe
  3261                           
  3262                           ;RTX.c: 93: CC1Strobe(SFRX);
  3263  07DD  303A               	movlw	58
  3264  07DE  3195  2594  3187   	fcall	_CC1Strobe
  3265  07E1                     l5430:	
  3266                           
  3267                           ;RTX.c: 94: }
  3268                           ;RTX.c: 97: if(tmrRcvPkt)
  3269  07E1  0021               	movlb	1	; select bank1
  3270  07E2  0867               	movf	_tmrRcvPkt^(0+128),w
  3271  07E3  1903               	btfsc	3,2
  3272  07E4  2FEE               	goto	l5438
  3273                           
  3274                           ;RTX.c: 98: {
  3275                           ;RTX.c: 99: tmrRcvPkt--;
  3276  07E5  3001               	movlw	1
  3277  07E6  02E7               	subwf	_tmrRcvPkt^(0+128),f
  3278                           
  3279                           ;RTX.c: 100: if(!(tmrRcvPkt))
  3280  07E7  08E7               	movf	_tmrRcvPkt^(0+128),f
  3281  07E8  1D03               	skipz
  3282  07E9  2FEE               	goto	l5438
  3283                           
  3284                           ;RTX.c: 101: RTXSendPgm();
  3285  07EA  3196  26E5  3187   	fcall	_RTXSendPgm
  3286  07ED  0021               	movlb	1	; select bank1
  3287  07EE                     l5438:	
  3288                           
  3289                           ;RTX.c: 102: }
  3290                           ;RTX.c: 105: if(tmrVisBatt)
  3291  07EE  0021               	movlb	1	; select bank1
  3292  07EF  0861               	movf	(_tmrVisBatt+1)^(0+128),w
  3293  07F0  0460               	iorwf	_tmrVisBatt^(0+128),w
  3294  07F1  1903               	skipnz
  3295  07F2  0008               	return
  3296                           
  3297                           ;RTX.c: 106: {
  3298                           ;RTX.c: 107: tmrVisBatt--;
  3299  07F3  3001               	movlw	1
  3300  07F4  02E0               	subwf	_tmrVisBatt^(0+128),f
  3301  07F5  3000               	movlw	0
  3302  07F6  3BE1               	subwfb	(_tmrVisBatt+1)^(0+128),f
  3303                           
  3304                           ;RTX.c: 108: if(!(tmrVisBatt))
  3305  07F7  0861               	movf	(_tmrVisBatt+1)^(0+128),w
  3306  07F8  0460               	iorwf	_tmrVisBatt^(0+128),w
  3307  07F9  1D03               	skipz
  3308  07FA  0008               	return
  3309                           
  3310                           ;RTX.c: 109: RTXUpdateDisplay(UPD_DPY_TEMP);
  3311  07FB  3001               	movlw	1
  3312  07FC  3180  2040         	fcall	_RTXUpdateDisplay
  3313  07FE  0008               	return
  3314  07FF                     __end_of_RTXTick:	
  3315                           
  3316                           	psect	text5
  3317  16E5                     __ptext5:	
  3318 ;; *************** function _RTXSendPgm *****************
  3319 ;; Defined at:
  3320 ;;		line 445 in file "RTX.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;		None
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;		None
  3325 ;; Return value:  Size  Location     Type
  3326 ;;		None               void
  3327 ;; Registers used:
  3328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3338 ;;Total ram usage:        1 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    5
  3341 ;; This function calls:
  3342 ;;		_RTXSndPkt
  3343 ;; This function is called by:
  3344 ;;		_RTXTick
  3345 ;;		_RTXPgmOn
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           
  3350                           ;psect for function _RTXSendPgm
  3351  16E5                     _RTXSendPgm:	
  3352                           
  3353                           ;RTX.c: 447: pktTx[0]=0;
  3354                           
  3355                           ;incstack = 0
  3356                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3357  16E5  0022               	movlb	2	; select bank2
  3358  16E6  01C6               	clrf	_pktTx^(0+256)
  3359                           
  3360                           ;RTX.c: 448: pktTx[1]=pgm_cfg.baseId;
  3361  16E7  0853               	movf	(_pgm_cfg^(0+256)+4),w
  3362  16E8  0020               	movlb	0	; select bank0
  3363  16E9  00A9               	movwf	??_RTXSendPgm
  3364  16EA  0829               	movf	??_RTXSendPgm,w
  3365  16EB  0022               	movlb	2	; select bank2
  3366  16EC  00C7               	movwf	(_pktTx^(0+256)+1)
  3367                           
  3368                           ;RTX.c: 449: pktTx[2]=PGM;
  3369  16ED  01C8               	clrf	(_pktTx^(0+256)+2)
  3370  16EE  0AC8               	incf	(_pktTx^(0+256)+2),f
  3371                           
  3372                           ;RTX.c: 450: pktTx[3]=0x00;
  3373  16EF  01C9               	clrf	(_pktTx^(0+256)+3)
  3374                           
  3375                           ;RTX.c: 451: pktTx[4]=0x00;
  3376  16F0  01CA               	clrf	(_pktTx^(0+256)+4)
  3377                           
  3378                           ;RTX.c: 452: pktTx[5]=0x00;
  3379  16F1  01CB               	clrf	(_pktTx^(0+256)+5)
  3380                           
  3381                           ;RTX.c: 453: pktTx[6]=0x00;
  3382  16F2  01CC               	clrf	(_pktTx^(0+256)+6)
  3383                           
  3384                           ;RTX.c: 454: pktTx[7]=0x00;
  3385  16F3  01CD               	clrf	(_pktTx^(0+256)+7)
  3386                           
  3387                           ;RTX.c: 455: pktTx[8]=0x00;
  3388  16F4  01CE               	clrf	(_pktTx^(0+256)+8)
  3389                           
  3390                           ;RTX.c: 458: RTXSndPkt(pktTx,0x09);
  3391  16F5  3009               	movlw	9
  3392  16F6  0020               	movlb	0	; select bank0
  3393  16F7  00A9               	movwf	??_RTXSendPgm
  3394  16F8  0829               	movf	??_RTXSendPgm,w
  3395  16F9  00A5               	movwf	?_RTXSndPkt
  3396  16FA  3046               	movlw	_pktTx& (0+255)
  3397  16FB  318D  2503         	fcall	_RTXSndPkt
  3398                           
  3399                           ;RTX.c: 461: tmrRcvPkt=10;
  3400  16FD  300A               	movlw	10
  3401  16FE  0020               	movlb	0	; select bank0
  3402  16FF  00A9               	movwf	??_RTXSendPgm
  3403  1700  0829               	movf	??_RTXSendPgm,w
  3404  1701  0021               	movlb	1	; select bank1
  3405  1702  00E7               	movwf	_tmrRcvPkt^(0+128)
  3406  1703  0008               	return
  3407  1704                     __end_of_RTXSendPgm:	
  3408                           
  3409                           	psect	text6
  3410  1704                     __ptext6:	
  3411 ;; *************** function _PGMSelLong *****************
  3412 ;; Defined at:
  3413 ;;		line 118 in file "PGM.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;		None
  3416 ;; Auto vars:     Size  Location     Type
  3417 ;;		None
  3418 ;; Return value:  Size  Location     Type
  3419 ;;		None               void
  3420 ;; Registers used:
  3421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3431 ;;Total ram usage:        1 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    9
  3434 ;; This function calls:
  3435 ;;		_DLYDelay_ms
  3436 ;;		_PGMPgmOff
  3437 ;;		_PGMWriteNvm
  3438 ;;		_RTXUpdateDisplay
  3439 ;;		_RTXPgmOff
  3440 ;; This function is called by:
  3441 ;;		_SYSTask
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _PGMSelLong
  3447  1704                     _PGMSelLong:	
  3448                           
  3449                           ;PGM.c: 120: pgm_cfg.sensId=TMR1L^TMR1H;
  3450                           
  3451                           ;incstack = 0
  3452                           ; Regs used in _PGMSelLong: [allreg]
  3453  1704  0020               	movlb	0	; select bank0
  3454  1705  0816               	movf	22,w	;volatile
  3455  1706  0617               	xorwf	23,w	;volatile
  3456  1707  00E5               	movwf	??_PGMSelLong
  3457  1708  0865               	movf	??_PGMSelLong,w
  3458  1709  0022               	movlb	2	; select bank2
  3459  170A  00D2               	movwf	(_pgm_cfg^(0+256)+3)
  3460                           
  3461                           ;PGM.c: 122: pgm_cfg.menu=0x00;
  3462  170B  01D1               	clrf	(_pgm_cfg^(0+256)+2)
  3463                           
  3464                           ;PGM.c: 124: PGMWriteNvm();
  3465  170C  3195  256E  3197   	fcall	_PGMWriteNvm
  3466                           
  3467                           ;PGM.c: 126: RTXUpdateDisplay(UPD_DPY_PGMRST);
  3468  170F  3005               	movlw	5
  3469  1710  3180  2040  3197   	fcall	_RTXUpdateDisplay
  3470                           
  3471                           ;PGM.c: 128: DLYDelay_ms(2000);
  3472  1713  30D0               	movlw	208
  3473  1714  00F1               	movwf	?_DLYDelay_ms
  3474  1715  3007               	movlw	7
  3475  1716  00F2               	movwf	?_DLYDelay_ms+1
  3476  1717  3195  25EA  3197   	fcall	_DLYDelay_ms
  3477                           
  3478                           ;PGM.c: 130: RTXUpdateDisplay(UPD_DPY_RST);
  3479  171A  3000               	movlw	0
  3480  171B  3180  2040  3197   	fcall	_RTXUpdateDisplay
  3481                           
  3482                           ;PGM.c: 132: PGMPgmOff();
  3483  171E  3194  24C7  3197   	fcall	_PGMPgmOff
  3484                           
  3485                           ;PGM.c: 133: RTXPgmOff();
  3486  1721  3194  249E         	fcall	_RTXPgmOff
  3487  1723  0008               	return
  3488  1724                     __end_of_PGMSelLong:	
  3489                           
  3490                           	psect	text7
  3491  15A8                     __ptext7:	
  3492 ;; *************** function _PGMSelDown *****************
  3493 ;; Defined at:
  3494 ;;		line 99 in file "PGM.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;		None               void
  3501 ;; Registers used:
  3502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3512 ;;Total ram usage:        0 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    9
  3515 ;; This function calls:
  3516 ;;		_PGMPgmOff
  3517 ;;		_RTXUpdateDisplay
  3518 ;; This function is called by:
  3519 ;;		_SYSTask
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           
  3524                           ;psect for function _PGMSelDown
  3525  15A8                     _PGMSelDown:	
  3526                           
  3527                           ;PGM.c: 100: if(!(pgm_cfg.menu))
  3528                           
  3529                           ;incstack = 0
  3530                           ; Regs used in _PGMSelDown: [allreg]
  3531  15A8  0022               	movlb	2	; select bank2
  3532  15A9  08D1               	movf	(_pgm_cfg^(0+256)+2),f
  3533  15AA  1D03               	skipz
  3534  15AB  0008               	return
  3535                           
  3536                           ;PGM.c: 101: {
  3537                           ;PGM.c: 102: if(pgm_flg.pgmonoff)
  3538  15AC  0021               	movlb	1	; select bank1
  3539  15AD  1C62               	btfss	_pgm_flg^(0+128),0
  3540  15AE  2DB2               	goto	l382
  3541                           
  3542                           ;PGM.c: 103: PGMPgmOff();
  3543  15AF  3194  24C7         	fcall	_PGMPgmOff
  3544  15B1  0008               	return
  3545  15B2                     l382:	
  3546                           
  3547                           ;PGM.c: 104: else
  3548                           ;PGM.c: 105: {
  3549                           ;PGM.c: 107: pgm_flg.pgmonoff=1;
  3550  15B2  1462               	bsf	_pgm_flg^(0+128),0
  3551                           
  3552                           ;PGM.c: 108: pgm_flg.evPgmOn=1;
  3553  15B3  14E2               	bsf	_pgm_flg^(0+128),1
  3554                           
  3555                           ;PGM.c: 110: tmrPgm=1000;
  3556  15B4  30E8               	movlw	232
  3557  15B5  0022               	movlb	2	; select bank2
  3558  15B6  00AA               	movwf	_tmrPgm^(0+256)
  3559  15B7  3003               	movlw	3
  3560  15B8  00AB               	movwf	(_tmrPgm^(0+256)+1)
  3561                           
  3562                           ;PGM.c: 112: RTXUpdateDisplay(UPD_DPY_PGM);
  3563  15B9  3003               	movlw	3
  3564  15BA  3180  2040         	fcall	_RTXUpdateDisplay
  3565  15BC  0008               	return
  3566  15BD                     __end_of_PGMSelDown:	
  3567                           
  3568                           	psect	text8
  3569  1504                     __ptext8:	
  3570 ;; *************** function _PGMTick *****************
  3571 ;; Defined at:
  3572 ;;		line 47 in file "PGM.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;		None
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;		None
  3577 ;; Return value:  Size  Location     Type
  3578 ;;		None               void
  3579 ;; Registers used:
  3580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3590 ;;Total ram usage:        0 bytes
  3591 ;; Hardware stack levels used:    1
  3592 ;; Hardware stack levels required when called:    9
  3593 ;; This function calls:
  3594 ;;		_PGMPgmOff
  3595 ;; This function is called by:
  3596 ;;		_SYSTask
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function _PGMTick
  3602  1504                     _PGMTick:	
  3603                           
  3604                           ;PGM.c: 49: if(tmrPgm)
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _PGMTick: [allreg]
  3608  1504  0022               	movlb	2	; select bank2
  3609  1505  082B               	movf	(_tmrPgm+1)^(0+256),w
  3610  1506  042A               	iorwf	_tmrPgm^(0+256),w
  3611  1507  1903               	skipnz
  3612  1508  0008               	return
  3613                           
  3614                           ;PGM.c: 50: {
  3615                           ;PGM.c: 51: tmrPgm--;
  3616  1509  3001               	movlw	1
  3617  150A  02AA               	subwf	_tmrPgm^(0+256),f
  3618  150B  3000               	movlw	0
  3619  150C  3BAB               	subwfb	(_tmrPgm+1)^(0+256),f
  3620                           
  3621                           ;PGM.c: 52: if(!(tmrPgm))
  3622  150D  082B               	movf	(_tmrPgm+1)^(0+256),w
  3623  150E  042A               	iorwf	_tmrPgm^(0+256),w
  3624  150F  1D03               	skipz
  3625  1510  0008               	return
  3626                           
  3627                           ;PGM.c: 53: PGMPgmOff();
  3628  1511  3194  24C7         	fcall	_PGMPgmOff
  3629  1513  0008               	return
  3630  1514                     __end_of_PGMTick:	
  3631                           
  3632                           	psect	text9
  3633  14C7                     __ptext9:	
  3634 ;; *************** function _PGMPgmOff *****************
  3635 ;; Defined at:
  3636 ;;		line 88 in file "PGM.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;		None               void
  3643 ;; Registers used:
  3644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    8
  3657 ;; This function calls:
  3658 ;;		_RTXUpdateDisplay
  3659 ;; This function is called by:
  3660 ;;		_PGMTick
  3661 ;;		_PGMSelDown
  3662 ;;		_PGMSelLong
  3663 ;;		_SYSTask
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function _PGMPgmOff
  3669  14C7                     _PGMPgmOff:	
  3670                           
  3671                           ;PGM.c: 90: tmrPgm=0;
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _PGMPgmOff: [allreg]
  3675  14C7  0022               	movlb	2	; select bank2
  3676  14C8  01AA               	clrf	_tmrPgm^(0+256)
  3677  14C9  01AB               	clrf	(_tmrPgm+1)^(0+256)
  3678                           
  3679                           ;PGM.c: 92: pgm_flg.pgmonoff=0;
  3680  14CA  0021               	movlb	1	; select bank1
  3681  14CB  1062               	bcf	_pgm_flg^(0+128),0
  3682                           
  3683                           ;PGM.c: 93: pgm_flg.evPgmOff=1;
  3684  14CC  1562               	bsf	_pgm_flg^(0+128),2
  3685                           
  3686                           ;PGM.c: 95: RTXUpdateDisplay(UPD_DPY_RST);
  3687  14CD  3000               	movlw	0
  3688  14CE  3180  2040         	fcall	_RTXUpdateDisplay
  3689  14D0  0008               	return
  3690  14D1                     __end_of_PGMPgmOff:	
  3691                           
  3692                           	psect	text10
  3693  0878                     __ptext10:	
  3694 ;; *************** function _DINTick *****************
  3695 ;; Defined at:
  3696 ;;		line 47 in file "DIN.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;		None
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;		None
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3713 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3714 ;;Total ram usage:        1 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    2
  3717 ;; This function calls:
  3718 ;;		Nothing
  3719 ;; This function is called by:
  3720 ;;		_SYSTask
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           
  3725                           ;psect for function _DINTick
  3726  0878                     _DINTick:	
  3727                           
  3728                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3729                           
  3730                           ;incstack = 0
  3731                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3732  0878  0021               	movlb	1	; select bank1
  3733  0879  1C69               	btfss	_u_flg_din^(0+128),0
  3734  087A  288D               	goto	l214
  3735                           
  3736                           ;DIN.c: 51: {
  3737                           ;DIN.c: 52: tmrDbncSel++;
  3738  087B  3001               	movlw	1
  3739  087C  00F1               	movwf	??_DINTick
  3740  087D  0871               	movf	??_DINTick,w
  3741  087E  07E6               	addwf	_tmrDbncSel^(0+128),f
  3742                           
  3743                           ;DIN.c: 53: if(tmrDbncSel>5)
  3744  087F  3006               	movlw	6
  3745  0880  0266               	subwf	_tmrDbncSel^(0+128),w
  3746  0881  1C03               	skipc
  3747  0882  288D               	goto	l214
  3748                           
  3749                           ;DIN.c: 54: {
  3750                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3751  0883  1069               	bcf	_u_flg_din^(0+128),0
  3752                           
  3753                           ;DIN.c: 56: tmrDbncSel=0;
  3754  0884  01E6               	clrf	_tmrDbncSel^(0+128)
  3755                           
  3756                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3757  0885  0020               	movlb	0	; select bank0
  3758  0886  1C6E               	btfss	_u_in_sta_currTask,0
  3759  0887  288B               	goto	l216
  3760                           
  3761                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3762  0888  0021               	movlb	1	; select bank1
  3763  0889  146A               	bsf	_u_in_ev_down^(0+128),0
  3764  088A  288D               	goto	l214
  3765  088B                     l216:	
  3766                           
  3767                           ;DIN.c: 60: else
  3768                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3769  088B  0021               	movlb	1	; select bank1
  3770  088C  146C               	bsf	_u_in_ev_up^(0+128),0
  3771  088D                     l214:	
  3772                           
  3773                           ;DIN.c: 62: }
  3774                           ;DIN.c: 63: }
  3775                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3776  088D  1CE9               	btfss	_u_flg_din^(0+128),1
  3777  088E  0008               	return
  3778                           
  3779                           ;DIN.c: 67: {
  3780                           ;DIN.c: 68: tmrLongSel++;
  3781  088F  3001               	movlw	1
  3782  0890  0022               	movlb	2	; select bank2
  3783  0891  07A8               	addwf	_tmrLongSel^(0+256),f
  3784  0892  3000               	movlw	0
  3785  0893  3DA9               	addwfc	(_tmrLongSel+1)^(0+256),f
  3786                           
  3787                           ;DIN.c: 69: if(tmrLongSel>200)
  3788  0894  3000               	movlw	0
  3789  0895  0229               	subwf	(_tmrLongSel+1)^(0+256),w
  3790  0896  30C9               	movlw	201
  3791  0897  1903               	skipnz
  3792  0898  0228               	subwf	_tmrLongSel^(0+256),w
  3793  0899  1C03               	skipc
  3794  089A  0008               	return
  3795                           
  3796                           ;DIN.c: 70: {
  3797                           ;DIN.c: 72: tmrLongSel=0;
  3798  089B  01A8               	clrf	_tmrLongSel^(0+256)
  3799  089C  01A9               	clrf	(_tmrLongSel+1)^(0+256)
  3800                           
  3801                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3802  089D  0021               	movlb	1	; select bank1
  3803  089E  146B               	bsf	_u_in_ev_long^(0+128),0
  3804  089F  0008               	return
  3805  08A0                     __end_of_DINTick:	
  3806                           
  3807                           	psect	text11
  3808  1746                     __ptext11:	
  3809 ;; *************** function _SYSInit *****************
  3810 ;; Defined at:
  3811 ;;		line 15 in file "SYS.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  state           1    wreg     unsigned char 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  state           1    2[COMMON] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;		None               void
  3818 ;; Registers used:
  3819 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3828 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3829 ;;Total ram usage:        2 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_main
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function _SYSInit
  3841  1746                     _SYSInit:	
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3845                           ;SYSInit@state stored from wreg
  3846  1746  00F2               	movwf	SYSInit@state
  3847                           
  3848                           ;SYS.c: 16: switch(state)
  3849  1747  2F60               	goto	l3852
  3850  1748                     l3834:	
  3851                           ;SYS.c: 17: {
  3852                           ;SYS.c: 18: case 0:
  3853                           
  3854                           
  3855                           ;SYS.c: 20: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; TMR0=255-156; I
      +                          NTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000; PIE1=0b00000000
      +                          ; PIE2=0b00000000;
  3856  1748  3006               	movlw	6
  3857  1749  0021               	movlb	1	; select bank1
  3858  174A  0095               	movwf	21	;volatile
  3859  174B  3071               	movlw	113
  3860  174C  0099               	movwf	25	;volatile
  3861  174D  3009               	movlw	9
  3862  174E  0097               	movwf	23	;volatile
  3863  174F  3063               	movlw	99
  3864  1750  0020               	movlb	0	; select bank0
  3865  1751  0095               	movwf	21	;volatile
  3866  1752  168B               	bsf	11,5	;volatile
  3867  1753  30FB               	movlw	251
  3868  1754  00F1               	movwf	??_SYSInit
  3869  1755  0871               	movf	??_SYSInit,w
  3870  1756  058B               	andwf	11,f	;volatile
  3871  1757  0191               	clrf	17	;volatile
  3872  1758  0192               	clrf	18	;volatile
  3873  1759  0021               	movlb	1	; select bank1
  3874  175A  0191               	clrf	17	;volatile
  3875  175B  0192               	clrf	18	;volatile
  3876                           
  3877                           ;SYS.c: 21: break;
  3878  175C  0008               	return
  3879  175D                     l3848:	
  3880                           ;SYS.c: 22: case 1:
  3881                           
  3882                           
  3883                           ;SYS.c: 24: u_SYS_STA.VAL=0;
  3884  175D  0021               	movlb	1	; select bank1
  3885  175E  01E8               	clrf	_u_SYS_STA^(0+128)
  3886                           
  3887                           ;SYS.c: 29: }
  3888                           
  3889                           ;SYS.c: 25: break;
  3890  175F  0008               	return
  3891  1760                     l3852:	
  3892  1760  0872               	movf	SYSInit@state,w
  3893                           
  3894                           ; Switch size 1, requested type "space"
  3895                           ; Number of cases is 2, Range of values is 0 to 1
  3896                           ; switch strategies available:
  3897                           ; Name         Instructions Cycles
  3898                           ; simple_byte            7     4 (average)
  3899                           ; direct_byte           10     6 (fixed)
  3900                           ; jumptable            260     6 (fixed)
  3901                           ;	Chosen strategy is simple_byte
  3902  1761  3A00               	xorlw	0	; case 0
  3903  1762  1903               	skipnz
  3904  1763  2F48               	goto	l3834
  3905  1764  3A01               	xorlw	1	; case 1
  3906  1765  1903               	skipnz
  3907  1766  2F5D               	goto	l3848
  3908  1767  2F68               	goto	l624
  3909  1768                     l624:	
  3910  1768  0008               	return
  3911  1769                     __end_of_SYSInit:	
  3912                           
  3913                           	psect	text12
  3914  14A4                     __ptext12:	
  3915 ;; *************** function _RTXTask *****************
  3916 ;; Defined at:
  3917 ;;		line 114 in file "RTX.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;		None               void
  3924 ;; Registers used:
  3925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3935 ;;Total ram usage:        0 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    9
  3938 ;; This function calls:
  3939 ;;		_RTXReadPkt
  3940 ;; This function is called by:
  3941 ;;		_main
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _RTXTask
  3947  14A4                     _RTXTask:	
  3948                           
  3949                           ;RTX.c: 116: if(!(PORTBbits.RB0))
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _RTXTask: [allreg]
  3953  14A4  0020               	movlb	0	; select bank0
  3954  14A5  180D               	btfsc	13,0	;volatile
  3955  14A6  0008               	return
  3956                           
  3957                           ;RTX.c: 117: RTXReadPkt();
  3958  14A7  318F  2758         	fcall	_RTXReadPkt
  3959  14A9  0008               	return
  3960  14AA                     __end_of_RTXTask:	
  3961                           
  3962                           	psect	text13
  3963  0F58                     __ptext13:	
  3964 ;; *************** function _RTXReadPkt *****************
  3965 ;; Defined at:
  3966 ;;		line 355 in file "RTX.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;		None
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  valBatt         3   73[BANK0 ] struct _RTX_DATA
  3971 ;;  valTemp         3   70[BANK0 ] struct _RTX_DATA
  3972 ;; Return value:  Size  Location     Type
  3973 ;;		None               void
  3974 ;; Registers used:
  3975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3982 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;Total ram usage:        7 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    8
  3988 ;; This function calls:
  3989 ;;		_DLYDelay_ms
  3990 ;;		_CC1Read
  3991 ;;		_PGMWriteNvm
  3992 ;;		_RTXUpdateDisplay
  3993 ;;		_RTXPgmOff
  3994 ;;		_RTXSup
  3995 ;;		_RTXRcvPkt
  3996 ;;		_RTXSendRData
  3997 ;; This function is called by:
  3998 ;;		_RTXTask
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           
  4003                           ;psect for function _RTXReadPkt
  4004  0F58                     _RTXReadPkt:	
  4005                           
  4006                           ;RTX.c: 356: tu_RTX_DATA valTemp,valBatt;
  4007                           ;RTX.c: 359: CC1Read(0x3B,(&(numRxByte)),1);
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in _RTXReadPkt: [allreg]
  4011  0F58  306F               	movlw	low _numRxByte
  4012  0F59  0020               	movlb	0	; select bank0
  4013  0F5A  00A0               	movwf	?_CC1Read
  4014  0F5B  3000               	movlw	high _numRxByte
  4015  0F5C  00A1               	movwf	?_CC1Read+1
  4016  0F5D  01A2               	clrf	?_CC1Read+2
  4017  0F5E  0AA2               	incf	?_CC1Read+2,f
  4018  0F5F  303B               	movlw	59
  4019  0F60  3197  2769  318F   	fcall	_CC1Read
  4020  0F63                     l5520:	
  4021                           ;RTX.c: 360: while(numRxByte>=0x09)
  4022                           
  4023  0F63  3009               	movlw	9
  4024  0F64  0020               	movlb	0	; select bank0
  4025  0F65  026F               	subwf	_numRxByte,w
  4026  0F66  1C03               	btfss	3,0
  4027  0F67  0008               	return
  4028  0F68  0064               	clrwdt	;# 
  4029                           
  4030                           ;RTX.c: 364: RTXRcvPkt(pktRx,0x09);
  4031  0F69  3009               	movlw	9
  4032  0F6A  0020               	movlb	0	; select bank0
  4033  0F6B  00E5               	movwf	??_RTXReadPkt
  4034  0F6C  0865               	movf	??_RTXReadPkt,w
  4035  0F6D  00FB               	movwf	?_RTXRcvPkt
  4036  0F6E  303D               	movlw	_pktRx& (0+255)
  4037  0F6F  3194  24F6  318F   	fcall	_RTXRcvPkt
  4038                           
  4039                           ;RTX.c: 366: if(rtx_flg.pgmonoff)
  4040  0F72  0021               	movlb	1	; select bank1
  4041  0F73  1D63               	btfss	_rtx_flg^(0+128),2
  4042  0F74  2F9F               	goto	l5500
  4043                           
  4044                           ;RTX.c: 367: {
  4045                           ;RTX.c: 368: if((pktRx[0]==pgm_cfg.baseId))
  4046  0F75  0022               	movlb	2	; select bank2
  4047  0F76  0853               	movf	(_pgm_cfg^(0+256)+4),w
  4048  0F77  063D               	xorwf	_pktRx^(0+256),w
  4049  0F78  1D03               	skipz
  4050  0F79  2FF1               	goto	l5516
  4051                           
  4052                           ;RTX.c: 369: {
  4053                           ;RTX.c: 371: if(pktRx[2]==rPGM)
  4054  0F7A  083F               	movf	(_pktRx^(0+256)+2),w
  4055  0F7B  3A81               	xorlw	129
  4056  0F7C  1D03               	skipz
  4057  0F7D  2FF1               	goto	l5516
  4058                           
  4059                           ;RTX.c: 372: {
  4060                           ;RTX.c: 374: pgm_cfg.sensId=pktRx[1];
  4061  0F7E  083E               	movf	(_pktRx^(0+256)+1),w
  4062  0F7F  0020               	movlb	0	; select bank0
  4063  0F80  00E5               	movwf	??_RTXReadPkt
  4064  0F81  0865               	movf	??_RTXReadPkt,w
  4065  0F82  0022               	movlb	2	; select bank2
  4066  0F83  00D2               	movwf	(_pgm_cfg^(0+256)+3)
  4067                           
  4068                           ;RTX.c: 376: pgm_cfg.menu=1;
  4069  0F84  01D1               	clrf	(_pgm_cfg^(0+256)+2)
  4070  0F85  0AD1               	incf	(_pgm_cfg^(0+256)+2),f
  4071                           
  4072                           ;RTX.c: 377: PGMWriteNvm();
  4073  0F86  3195  256E  318F   	fcall	_PGMWriteNvm
  4074                           
  4075                           ;RTX.c: 379: rtx_flg.pgmDone=1;
  4076  0F89  0021               	movlb	1	; select bank1
  4077  0F8A  14E3               	bsf	_rtx_flg^(0+128),1
  4078                           
  4079                           ;RTX.c: 381: tmrRcvPkt=0;
  4080  0F8B  01E7               	clrf	_tmrRcvPkt^(0+128)
  4081                           
  4082                           ;RTX.c: 383: RTXUpdateDisplay(UPD_DPY_PGMDONE);
  4083  0F8C  3004               	movlw	4
  4084  0F8D  3180  2040  318F   	fcall	_RTXUpdateDisplay
  4085                           
  4086                           ;RTX.c: 385: DLYDelay_ms(2000);
  4087  0F90  30D0               	movlw	208
  4088  0F91  00F1               	movwf	?_DLYDelay_ms
  4089  0F92  3007               	movlw	7
  4090  0F93  00F2               	movwf	?_DLYDelay_ms+1
  4091  0F94  3195  25EA  318F   	fcall	_DLYDelay_ms
  4092                           
  4093                           ;RTX.c: 387: RTXUpdateDisplay(UPD_DPY_RST);
  4094  0F97  3000               	movlw	0
  4095  0F98  3180  2040  318F   	fcall	_RTXUpdateDisplay
  4096                           
  4097                           ;RTX.c: 389: RTXPgmOff();
  4098  0F9B  3194  249E  318F   	fcall	_RTXPgmOff
  4099                           
  4100                           ;RTX.c: 390: }
  4101                           ;RTX.c: 391: }
  4102                           ;RTX.c: 392: }
  4103  0F9E  2FF1               	goto	l5516
  4104  0F9F                     l5500:	
  4105                           
  4106                           ;RTX.c: 393: else
  4107                           ;RTX.c: 394: {
  4108                           ;RTX.c: 395: if((pktRx[0]==pgm_cfg.baseId) && (pktRx[1]==pgm_cfg.sensId))
  4109  0F9F  0022               	movlb	2	; select bank2
  4110  0FA0  0853               	movf	(_pgm_cfg^(0+256)+4),w
  4111  0FA1  063D               	xorwf	_pktRx^(0+256),w
  4112  0FA2  1D03               	skipz
  4113  0FA3  2FF1               	goto	l5516
  4114  0FA4  0852               	movf	(_pgm_cfg^(0+256)+3),w
  4115  0FA5  063E               	xorwf	(_pktRx^(0+256)+1),w
  4116  0FA6  1D03               	skipz
  4117  0FA7  2FF1               	goto	l5516
  4118                           
  4119                           ;RTX.c: 396: {
  4120                           ;RTX.c: 398: if(pktRx[2]==DAT)
  4121  0FA8  08BF               	movf	(_pktRx^(0+256)+2),f
  4122  0FA9  1D03               	skipz
  4123  0FAA  2FF1               	goto	l5516
  4124                           
  4125                           ;RTX.c: 399: {
  4126                           ;RTX.c: 401: valTemp.val_byte[0]=pktRx[3];
  4127  0FAB  0840               	movf	(_pktRx^(0+256)+3),w
  4128  0FAC  0020               	movlb	0	; select bank0
  4129  0FAD  00E5               	movwf	??_RTXReadPkt
  4130  0FAE  0865               	movf	??_RTXReadPkt,w
  4131  0FAF  00E6               	movwf	RTXReadPkt@valTemp
  4132                           
  4133                           ;RTX.c: 402: valTemp.val_byte[1]=pktRx[4];
  4134  0FB0  0022               	movlb	2	; select bank2
  4135  0FB1  0841               	movf	(_pktRx^(0+256)+4),w
  4136  0FB2  0020               	movlb	0	; select bank0
  4137  0FB3  00E5               	movwf	??_RTXReadPkt
  4138  0FB4  0865               	movf	??_RTXReadPkt,w
  4139  0FB5  00E7               	movwf	RTXReadPkt@valTemp+1
  4140                           
  4141                           ;RTX.c: 403: valTemp.val_byte[2]=pktRx[5];
  4142  0FB6  0022               	movlb	2	; select bank2
  4143  0FB7  0842               	movf	(_pktRx^(0+256)+5),w
  4144  0FB8  0020               	movlb	0	; select bank0
  4145  0FB9  00E5               	movwf	??_RTXReadPkt
  4146  0FBA  0865               	movf	??_RTXReadPkt,w
  4147  0FBB  00E8               	movwf	RTXReadPkt@valTemp+2
  4148                           
  4149                           ;RTX.c: 404: temp=valTemp.val;
  4150  0FBC  0866               	movf	RTXReadPkt@valTemp,w
  4151  0FBD  0022               	movlb	2	; select bank2
  4152  0FBE  00A3               	movwf	_temp^(0+256)
  4153  0FBF  0020               	movlb	0	; select bank0
  4154  0FC0  0867               	movf	RTXReadPkt@valTemp+1,w
  4155  0FC1  0022               	movlb	2	; select bank2
  4156  0FC2  00A4               	movwf	(_temp+1)^(0+256)
  4157  0FC3  0020               	movlb	0	; select bank0
  4158  0FC4  0868               	movf	RTXReadPkt@valTemp+2,w
  4159  0FC5  0022               	movlb	2	; select bank2
  4160  0FC6  00A5               	movwf	(_temp+2)^(0+256)
  4161                           
  4162                           ;RTX.c: 406: valBatt.val_byte[0]=pktRx[6];
  4163  0FC7  0843               	movf	(_pktRx^(0+256)+6),w
  4164  0FC8  0020               	movlb	0	; select bank0
  4165  0FC9  00E5               	movwf	??_RTXReadPkt
  4166  0FCA  0865               	movf	??_RTXReadPkt,w
  4167  0FCB  00E9               	movwf	RTXReadPkt@valBatt
  4168                           
  4169                           ;RTX.c: 407: valBatt.val_byte[1]=pktRx[7];
  4170  0FCC  0022               	movlb	2	; select bank2
  4171  0FCD  0844               	movf	(_pktRx^(0+256)+7),w
  4172  0FCE  0020               	movlb	0	; select bank0
  4173  0FCF  00E5               	movwf	??_RTXReadPkt
  4174  0FD0  0865               	movf	??_RTXReadPkt,w
  4175  0FD1  00EA               	movwf	RTXReadPkt@valBatt+1
  4176                           
  4177                           ;RTX.c: 408: valBatt.val_byte[2]=pktRx[8];
  4178  0FD2  0022               	movlb	2	; select bank2
  4179  0FD3  0845               	movf	(_pktRx^(0+256)+8),w
  4180  0FD4  0020               	movlb	0	; select bank0
  4181  0FD5  00E5               	movwf	??_RTXReadPkt
  4182  0FD6  0865               	movf	??_RTXReadPkt,w
  4183  0FD7  00EB               	movwf	RTXReadPkt@valBatt+2
  4184                           
  4185                           ;RTX.c: 409: batt=valBatt.val;
  4186  0FD8  0869               	movf	RTXReadPkt@valBatt,w
  4187  0FD9  0022               	movlb	2	; select bank2
  4188  0FDA  00A0               	movwf	_batt^(0+256)
  4189  0FDB  0020               	movlb	0	; select bank0
  4190  0FDC  086A               	movf	RTXReadPkt@valBatt+1,w
  4191  0FDD  0022               	movlb	2	; select bank2
  4192  0FDE  00A1               	movwf	(_batt+1)^(0+256)
  4193  0FDF  0020               	movlb	0	; select bank0
  4194  0FE0  086B               	movf	RTXReadPkt@valBatt+2,w
  4195  0FE1  0022               	movlb	2	; select bank2
  4196  0FE2  00A2               	movwf	(_batt+2)^(0+256)
  4197                           
  4198                           ;RTX.c: 411: RTXSendRData();
  4199  0FE3  3197  2724  318F   	fcall	_RTXSendRData
  4200                           
  4201                           ;RTX.c: 413: if(tmrVisBatt)
  4202  0FE6  0021               	movlb	1	; select bank1
  4203  0FE7  0861               	movf	(_tmrVisBatt+1)^(0+128),w
  4204  0FE8  0460               	iorwf	_tmrVisBatt^(0+128),w
  4205  0FE9  1903               	skipnz
  4206  0FEA  2FED               	goto	l5514
  4207                           
  4208                           ;RTX.c: 414: RTXUpdateDisplay(UPD_DPY_BATT);
  4209  0FEB  3002               	movlw	2
  4210  0FEC  2FEE               	goto	L1
  4211  0FED                     l5514:	
  4212                           
  4213                           ;RTX.c: 415: else
  4214                           ;RTX.c: 416: RTXUpdateDisplay(UPD_DPY_TEMP);
  4215  0FED  3001               	movlw	1
  4216  0FEE                     L1:	
  4217  0FEE  3180  2040  318F   	fcall	_RTXUpdateDisplay
  4218  0FF1                     l5516:	
  4219                           
  4220                           ;RTX.c: 417: }
  4221                           ;RTX.c: 418: }
  4222                           ;RTX.c: 419: }
  4223                           ;RTX.c: 421: CC1Read(0x3B,(&(numRxByte)),1);
  4224  0FF1  306F               	movlw	low _numRxByte
  4225  0FF2  0020               	movlb	0	; select bank0
  4226  0FF3  00A0               	movwf	?_CC1Read
  4227  0FF4  3000               	movlw	high _numRxByte
  4228  0FF5  00A1               	movwf	?_CC1Read+1
  4229  0FF6  01A2               	clrf	?_CC1Read+2
  4230  0FF7  0AA2               	incf	?_CC1Read+2,f
  4231  0FF8  303B               	movlw	59
  4232  0FF9  3197  2769  318F   	fcall	_CC1Read
  4233                           
  4234                           ;RTX.c: 423: RTXSup();
  4235  0FFC  3189  2121  318F   	fcall	_RTXSup
  4236  0FFF  2F63               	goto	l5520
  4237  1000                     __end_of_RTXReadPkt:	
  4238                           
  4239                           	psect	text14
  4240  1724                     __ptext14:	
  4241 ;; *************** function _RTXSendRData *****************
  4242 ;; Defined at:
  4243 ;;		line 428 in file "RTX.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;		None               void
  4250 ;; Registers used:
  4251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;Total ram usage:        1 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    5
  4264 ;; This function calls:
  4265 ;;		_RTXSndPkt
  4266 ;; This function is called by:
  4267 ;;		_RTXReadPkt
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           
  4272                           ;psect for function _RTXSendRData
  4273  1724                     _RTXSendRData:	
  4274                           
  4275                           ;RTX.c: 430: pktTx[0]=pgm_cfg.sensId;
  4276                           
  4277                           ;incstack = 0
  4278                           ; Regs used in _RTXSendRData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4279  1724  0022               	movlb	2	; select bank2
  4280  1725  0852               	movf	(_pgm_cfg^(0+256)+3),w
  4281  1726  0020               	movlb	0	; select bank0
  4282  1727  00A9               	movwf	??_RTXSendRData
  4283  1728  0829               	movf	??_RTXSendRData,w
  4284  1729  0022               	movlb	2	; select bank2
  4285  172A  00C6               	movwf	_pktTx^(0+256)
  4286                           
  4287                           ;RTX.c: 431: pktTx[1]=pgm_cfg.baseId;
  4288  172B  0853               	movf	(_pgm_cfg^(0+256)+4),w
  4289  172C  0020               	movlb	0	; select bank0
  4290  172D  00A9               	movwf	??_RTXSendRData
  4291  172E  0829               	movf	??_RTXSendRData,w
  4292  172F  0022               	movlb	2	; select bank2
  4293  1730  00C7               	movwf	(_pktTx^(0+256)+1)
  4294                           
  4295                           ;RTX.c: 432: pktTx[2]=rDAT;
  4296  1731  3080               	movlw	128
  4297  1732  0020               	movlb	0	; select bank0
  4298  1733  00A9               	movwf	??_RTXSendRData
  4299  1734  0829               	movf	??_RTXSendRData,w
  4300  1735  0022               	movlb	2	; select bank2
  4301  1736  00C8               	movwf	(_pktTx^(0+256)+2)
  4302                           
  4303                           ;RTX.c: 433: pktTx[3]=0x00;
  4304  1737  01C9               	clrf	(_pktTx^(0+256)+3)
  4305                           
  4306                           ;RTX.c: 434: pktTx[4]=0x00;
  4307  1738  01CA               	clrf	(_pktTx^(0+256)+4)
  4308                           
  4309                           ;RTX.c: 435: pktTx[5]=0x00;
  4310  1739  01CB               	clrf	(_pktTx^(0+256)+5)
  4311                           
  4312                           ;RTX.c: 436: pktTx[6]=0x00;
  4313  173A  01CC               	clrf	(_pktTx^(0+256)+6)
  4314                           
  4315                           ;RTX.c: 437: pktTx[7]=0x00;
  4316  173B  01CD               	clrf	(_pktTx^(0+256)+7)
  4317                           
  4318                           ;RTX.c: 438: pktTx[8]=0x00;
  4319  173C  01CE               	clrf	(_pktTx^(0+256)+8)
  4320                           
  4321                           ;RTX.c: 441: RTXSndPkt(pktTx,0x09);
  4322  173D  3009               	movlw	9
  4323  173E  0020               	movlb	0	; select bank0
  4324  173F  00A9               	movwf	??_RTXSendRData
  4325  1740  0829               	movf	??_RTXSendRData,w
  4326  1741  00A5               	movwf	?_RTXSndPkt
  4327  1742  3046               	movlw	_pktTx& (0+255)
  4328  1743  318D  2503         	fcall	_RTXSndPkt
  4329  1745  0008               	return
  4330  1746                     __end_of_RTXSendRData:	
  4331                           
  4332                           	psect	text15
  4333  0D03                     __ptext15:	
  4334 ;; *************** function _RTXSndPkt *****************
  4335 ;; Defined at:
  4336 ;;		line 327 in file "RTX.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  src             1    wreg     PTR unsigned char 
  4339 ;;		 -> pktTx(9), 
  4340 ;;  len             1    5[BANK0 ] unsigned char 
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;  src             1    8[BANK0 ] PTR unsigned char 
  4343 ;;		 -> pktTx(9), 
  4344 ;; Return value:  Size  Location     Type
  4345 ;;		None               void
  4346 ;; Registers used:
  4347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4353 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;Total ram usage:        4 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    4
  4360 ;; This function calls:
  4361 ;;		_CC1Strobe
  4362 ;;		_CC1Write
  4363 ;;		_CC1Read
  4364 ;; This function is called by:
  4365 ;;		_RTXSendRData
  4366 ;;		_RTXSendPgm
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           
  4371                           ;psect for function _RTXSndPkt
  4372  0D03                     _RTXSndPkt:	
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4376                           ;RTXSndPkt@src stored from wreg
  4377  0D03  0020               	movlb	0	; select bank0
  4378  0D04  00A8               	movwf	RTXSndPkt@src
  4379  0D05                     l524:	
  4380                           ;RTX.c: 329: do
  4381                           
  4382  0D05  0064               	clrwdt	;# 
  4383                           
  4384                           ;RTX.c: 332: CC1Read(0x35,(&(sta)),1);
  4385  0D06  307C               	movlw	low _sta
  4386  0D07  0020               	movlb	0	; select bank0
  4387  0D08  00A0               	movwf	?_CC1Read
  4388  0D09  3000               	movlw	high _sta
  4389  0D0A  00A1               	movwf	?_CC1Read+1
  4390  0D0B  01A2               	clrf	?_CC1Read+2
  4391  0D0C  0AA2               	incf	?_CC1Read+2,f
  4392  0D0D  3035               	movlw	53
  4393  0D0E  3197  2769  318D   	fcall	_CC1Read
  4394                           
  4395                           ;RTX.c: 333: }
  4396                           ;RTX.c: 334: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4397  0D11  301F               	movlw	31
  4398  0D12  057C               	andwf	_sta,w
  4399  0D13  0020               	movlb	0	; select bank0
  4400  0D14  00A6               	movwf	??_RTXSndPkt
  4401  0D15  0826               	movf	??_RTXSndPkt,w
  4402  0D16  3A0D               	xorlw	13
  4403  0D17  1903               	skipnz
  4404  0D18  2D20               	goto	l5528
  4405  0D19  301F               	movlw	31
  4406  0D1A  057C               	andwf	_sta,w
  4407  0D1B  00A6               	movwf	??_RTXSndPkt
  4408  0D1C  0826               	movf	??_RTXSndPkt,w
  4409  0D1D  3A01               	xorlw	1
  4410  0D1E  1D03               	skipz
  4411  0D1F  2D05               	goto	l524
  4412  0D20                     l5528:	
  4413                           
  4414                           ;RTX.c: 336: CC1Strobe(SIDLE);
  4415  0D20  3036               	movlw	54
  4416  0D21  3195  2594  318D   	fcall	_CC1Strobe
  4417                           
  4418                           ;RTX.c: 337: CC1Read(0x3B,(&(numRxByte)),1);
  4419  0D24  306F               	movlw	low _numRxByte
  4420  0D25  0020               	movlb	0	; select bank0
  4421  0D26  00A0               	movwf	?_CC1Read
  4422  0D27  3000               	movlw	high _numRxByte
  4423  0D28  00A1               	movwf	?_CC1Read+1
  4424  0D29  01A2               	clrf	?_CC1Read+2
  4425  0D2A  0AA2               	incf	?_CC1Read+2,f
  4426  0D2B  303B               	movlw	59
  4427  0D2C  3197  2769  318D   	fcall	_CC1Read
  4428                           
  4429                           ;RTX.c: 338: CC1Read(0x3A,(&(numTxByte)),1);
  4430  0D2F  30EE               	movlw	low _numTxByte
  4431  0D30  0020               	movlb	0	; select bank0
  4432  0D31  00A0               	movwf	?_CC1Read
  4433  0D32  3000               	movlw	high _numTxByte
  4434  0D33  00A1               	movwf	?_CC1Read+1
  4435  0D34  01A2               	clrf	?_CC1Read+2
  4436  0D35  0AA2               	incf	?_CC1Read+2,f
  4437  0D36  303A               	movlw	58
  4438  0D37  3197  2769  318D   	fcall	_CC1Read
  4439                           
  4440                           ;RTX.c: 340: CC1Strobe(SFTX);
  4441  0D3A  303B               	movlw	59
  4442  0D3B  3195  2594  318D   	fcall	_CC1Strobe
  4443                           
  4444                           ;RTX.c: 341: CC1Read(0x3A,(&(numTxByte)),1);
  4445  0D3E  30EE               	movlw	low _numTxByte
  4446  0D3F  0020               	movlb	0	; select bank0
  4447  0D40  00A0               	movwf	?_CC1Read
  4448  0D41  3000               	movlw	high _numTxByte
  4449  0D42  00A1               	movwf	?_CC1Read+1
  4450  0D43  01A2               	clrf	?_CC1Read+2
  4451  0D44  0AA2               	incf	?_CC1Read+2,f
  4452  0D45  303A               	movlw	58
  4453  0D46  3197  2769  318D   	fcall	_CC1Read
  4454                           
  4455                           ;RTX.c: 343: CC1Write(0x3F,src,len);
  4456  0D49  0020               	movlb	0	; select bank0
  4457  0D4A  0828               	movf	RTXSndPkt@src,w
  4458  0D4B  00A6               	movwf	??_RTXSndPkt
  4459  0D4C  0826               	movf	??_RTXSndPkt,w
  4460  0D4D  00F7               	movwf	?_CC1Write
  4461  0D4E  0825               	movf	RTXSndPkt@len,w
  4462  0D4F  00A7               	movwf	??_RTXSndPkt+1
  4463  0D50  0827               	movf	??_RTXSndPkt+1,w
  4464  0D51  00F8               	movwf	?_CC1Write+1
  4465  0D52  303F               	movlw	63
  4466  0D53  3196  26C6  318D   	fcall	_CC1Write
  4467                           
  4468                           ;RTX.c: 345: CC1Strobe(STX);
  4469  0D56  3035               	movlw	53
  4470  0D57  3195  2594         	fcall	_CC1Strobe
  4471  0D59  0008               	return
  4472  0D5A                     __end_of_RTXSndPkt:	
  4473                           
  4474                           	psect	text16
  4475  14F6                     __ptext16:	
  4476 ;; *************** function _RTXRcvPkt *****************
  4477 ;; Defined at:
  4478 ;;		line 349 in file "RTX.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  dst             1    wreg     PTR unsigned char 
  4481 ;;		 -> pktRx(9), 
  4482 ;;  len             1   11[COMMON] unsigned char 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  dst             1    6[BANK0 ] PTR unsigned char 
  4485 ;;		 -> pktRx(9), 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;		None               void
  4488 ;; Registers used:
  4489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4495 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;Total ram usage:        3 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    4
  4502 ;; This function calls:
  4503 ;;		_CC1Read
  4504 ;; This function is called by:
  4505 ;;		_RTXReadPkt
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           
  4510                           ;psect for function _RTXRcvPkt
  4511  14F6                     _RTXRcvPkt:	
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4515                           ;RTXRcvPkt@dst stored from wreg
  4516  14F6  0020               	movlb	0	; select bank0
  4517  14F7  00A6               	movwf	RTXRcvPkt@dst
  4518                           
  4519                           ;RTX.c: 351: CC1Read(0x3F,dst,len);
  4520  14F8  0826               	movf	RTXRcvPkt@dst,w
  4521  14F9  00A0               	movwf	?_CC1Read
  4522  14FA  3001               	movlw	1
  4523  14FB  00A1               	movwf	?_CC1Read+1
  4524  14FC  087B               	movf	RTXRcvPkt@len,w
  4525  14FD  00A5               	movwf	??_RTXRcvPkt
  4526  14FE  0825               	movf	??_RTXRcvPkt,w
  4527  14FF  00A2               	movwf	?_CC1Read+2
  4528  1500  303F               	movlw	63
  4529  1501  3197  2769         	fcall	_CC1Read
  4530  1503  0008               	return
  4531  1504                     __end_of_RTXRcvPkt:	
  4532                           
  4533                           	psect	text17
  4534  0921                     __ptext17:	
  4535 ;; *************** function _RTXSup *****************
  4536 ;; Defined at:
  4537 ;;		line 284 in file "RTX.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;		None               void
  4544 ;; Registers used:
  4545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    4
  4558 ;; This function calls:
  4559 ;;		_CC1Strobe
  4560 ;;		_CC1Read
  4561 ;; This function is called by:
  4562 ;;		_RTXTick
  4563 ;;		_RTXReadPkt
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _RTXSup
  4569  0921                     _RTXSup:	
  4570                           
  4571                           ;RTX.c: 286: CC1Read(0x35,(&(sta)),1);
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _RTXSup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4575  0921  307C               	movlw	low _sta
  4576  0922  0020               	movlb	0	; select bank0
  4577  0923  00A0               	movwf	?_CC1Read
  4578  0924  3000               	movlw	high _sta
  4579  0925  00A1               	movwf	?_CC1Read+1
  4580  0926  01A2               	clrf	?_CC1Read+2
  4581  0927  0AA2               	incf	?_CC1Read+2,f
  4582  0928  3035               	movlw	53
  4583  0929  3197  2769  3189   	fcall	_CC1Read
  4584                           
  4585                           ;RTX.c: 289: switch(sta)
  4586  092C  2941               	goto	l4938
  4587  092D                     l4930:	
  4588                           ;RTX.c: 290: {
  4589                           ;RTX.c: 291: case IDLE:
  4590                           
  4591                           
  4592                           ;RTX.c: 292: CC1Strobe(SRX);
  4593  092D  3034               	movlw	52
  4594  092E  3195  2594         	fcall	_CC1Strobe
  4595                           
  4596                           ;RTX.c: 293: break;
  4597  0930  0008               	return
  4598  0931                     l4932:	
  4599                           ;RTX.c: 294: case RXFIFO_OVERFLOW:
  4600                           
  4601                           
  4602                           ;RTX.c: 295: CC1Strobe(SFRX);
  4603  0931  303A               	movlw	58
  4604  0932  3195  2594  3189   	fcall	_CC1Strobe
  4605                           
  4606                           ;RTX.c: 296: CC1Strobe(SRX);
  4607  0935  3034               	movlw	52
  4608  0936  3195  2594         	fcall	_CC1Strobe
  4609                           
  4610                           ;RTX.c: 297: break;
  4611  0938  0008               	return
  4612  0939                     l4934:	
  4613                           ;RTX.c: 298: case TXFIFO_UNDERFLOW:
  4614                           
  4615                           
  4616                           ;RTX.c: 299: CC1Strobe(SFTX);
  4617  0939  303B               	movlw	59
  4618  093A  3195  2594  3189   	fcall	_CC1Strobe
  4619                           
  4620                           ;RTX.c: 300: CC1Strobe(SRX);
  4621  093D  3034               	movlw	52
  4622  093E  3195  2594         	fcall	_CC1Strobe
  4623                           
  4624                           ;RTX.c: 302: }
  4625                           
  4626                           ;RTX.c: 301: break;
  4627  0940  0008               	return
  4628  0941                     l4938:	
  4629  0941  087C               	movf	_sta,w
  4630                           
  4631                           ; Switch size 1, requested type "space"
  4632                           ; Number of cases is 3, Range of values is 1 to 22
  4633                           ; switch strategies available:
  4634                           ; Name         Instructions Cycles
  4635                           ; simple_byte           10     6 (average)
  4636                           ; direct_byte           53     9 (fixed)
  4637                           ; jumptable            263     9 (fixed)
  4638                           ;	Chosen strategy is simple_byte
  4639  0942  3A01               	xorlw	1	; case 1
  4640  0943  1903               	skipnz
  4641  0944  292D               	goto	l4930
  4642  0945  3A10               	xorlw	16	; case 17
  4643  0946  1903               	skipnz
  4644  0947  2931               	goto	l4932
  4645  0948  3A07               	xorlw	7	; case 22
  4646  0949  1903               	skipnz
  4647  094A  2939               	goto	l4934
  4648  094B  294C               	goto	l515
  4649  094C                     l515:	
  4650  094C  0008               	return
  4651  094D                     __end_of_RTXSup:	
  4652                           
  4653                           	psect	text18
  4654  1769                     __ptext18:	
  4655 ;; *************** function _CC1Read *****************
  4656 ;; Defined at:
  4657 ;;		line 113 in file "CC1.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  addr            1    wreg     unsigned char 
  4660 ;;  dst             2    0[BANK0 ] PTR unsigned char 
  4661 ;;		 -> pktRx(9), numTxByte(1), numRxByte(1), sta(1), 
  4662 ;;  len             1    2[BANK0 ] unsigned char 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  addr            1    3[BANK0 ] unsigned char 
  4665 ;;  cc1Addr         1    4[BANK0 ] unsigned char 
  4666 ;; Return value:  Size  Location     Type
  4667 ;;		None               void
  4668 ;; Registers used:
  4669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4670 ;; Tracked objects:
  4671 ;;		On entry : 0/0
  4672 ;;		On exit  : 0/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4675 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;Total ram usage:        6 bytes
  4680 ;; Hardware stack levels used:    1
  4681 ;; Hardware stack levels required when called:    3
  4682 ;; This function calls:
  4683 ;;		_SPIRead
  4684 ;;		_SPIWrite
  4685 ;; This function is called by:
  4686 ;;		_RTXSup
  4687 ;;		_RTXSndPkt
  4688 ;;		_RTXRcvPkt
  4689 ;;		_RTXReadPkt
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           
  4694                           ;psect for function _CC1Read
  4695  1769                     _CC1Read:	
  4696                           
  4697                           ;incstack = 0
  4698                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4699                           ;CC1Read@addr stored from wreg
  4700  1769  0020               	movlb	0	; select bank0
  4701  176A  00A3               	movwf	CC1Read@addr
  4702                           
  4703                           ;CC1.c: 114: unsigned char cc1Addr;
  4704                           ;CC1.c: 117: LATAbits.LATA5=0;
  4705  176B  0022               	movlb	2	; select bank2
  4706  176C  128C               	bcf	12,5	;volatile
  4707                           
  4708                           ;CC1.c: 120: cc1Addr=((addr&0b00111111)|0b11000000);
  4709  176D  0020               	movlb	0	; select bank0
  4710  176E  0823               	movf	CC1Read@addr,w
  4711  176F  393F               	andlw	63
  4712  1770  38C0               	iorlw	192
  4713  1771  00FA               	movwf	??_CC1Read
  4714  1772  087A               	movf	??_CC1Read,w
  4715  1773  00A4               	movwf	CC1Read@cc1Addr
  4716                           
  4717                           ;CC1.c: 121: SPIWrite((&(cc1Addr)),1);
  4718  1774  3024               	movlw	low CC1Read@cc1Addr
  4719  1775  00F1               	movwf	?_SPIWrite
  4720  1776  3000               	movlw	high CC1Read@cc1Addr
  4721  1777  00F2               	movwf	?_SPIWrite+1
  4722  1778  01F3               	clrf	?_SPIWrite+2
  4723  1779  0AF3               	incf	?_SPIWrite+2,f
  4724  177A  3196  266E  3197   	fcall	_SPIWrite
  4725                           
  4726                           ;CC1.c: 124: SPIRead(dst,len);
  4727  177D  0020               	movlb	0	; select bank0
  4728  177E  0821               	movf	CC1Read@dst+1,w
  4729  177F  01F2               	clrf	?_SPIRead+1
  4730  1780  07F2               	addwf	?_SPIRead+1,f
  4731  1781  0820               	movf	CC1Read@dst,w
  4732  1782  01F1               	clrf	?_SPIRead
  4733  1783  07F1               	addwf	?_SPIRead,f
  4734  1784  0822               	movf	CC1Read@len,w
  4735  1785  00FA               	movwf	??_CC1Read
  4736  1786  087A               	movf	??_CC1Read,w
  4737  1787  00F3               	movwf	?_SPIRead+2
  4738  1788  3197  27B3         	fcall	_SPIRead
  4739                           
  4740                           ;CC1.c: 127: LATAbits.LATA5=1;
  4741  178A  0022               	movlb	2	; select bank2
  4742  178B  168C               	bsf	12,5	;volatile
  4743  178C  0008               	return
  4744  178D                     __end_of_CC1Read:	
  4745                           
  4746                           	psect	text19
  4747  17B3                     __ptext19:	
  4748 ;; *************** function _SPIRead *****************
  4749 ;; Defined at:
  4750 ;;		line 26 in file "SPI.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  dstPtr          2    1[COMMON] PTR unsigned char 
  4753 ;;		 -> pktRx(9), numTxByte(1), numRxByte(1), sta(1), 
  4754 ;;  len             1    3[COMMON] unsigned char 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  i               1    9[COMMON] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;		None               void
  4759 ;; Registers used:
  4760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4766 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;Total ram usage:        9 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    2
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_CC1Read
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           
  4781                           ;psect for function _SPIRead
  4782  17B3                     _SPIRead:	
  4783                           
  4784                           ;SPI.c: 27: unsigned char i;
  4785                           ;SPI.c: 29: for(i=0;i<len;i++)
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  4789  17B3  01F9               	clrf	SPIRead@i
  4790  17B4                     l4520:	
  4791  17B4  0873               	movf	SPIRead@len,w
  4792  17B5  0279               	subwf	SPIRead@i,w
  4793  17B6  1803               	btfsc	3,0
  4794  17B7  0008               	return
  4795                           
  4796                           ;SPI.c: 30: {
  4797                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  4798  17B8  0020               	movlb	0	; select bank0
  4799  17B9  1191               	bcf	17,3	;volatile
  4800                           
  4801                           ;SPI.c: 32: SSPBUF=0xFF;
  4802  17BA  30FF               	movlw	255
  4803  17BB  0024               	movlb	4	; select bank4
  4804  17BC  0091               	movwf	17	;volatile
  4805  17BD                     l70:	
  4806                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  4807                           
  4808  17BD  0020               	movlb	0	; select bank0
  4809  17BE  1991               	btfsc	17,3	;volatile
  4810  17BF  2FC2               	goto	l4516
  4811                           
  4812                           ;SPI.c: 34: _nop();
  4813  17C0  0000               	nop
  4814  17C1  2FBD               	goto	l70
  4815  17C2                     l4516:	
  4816                           
  4817                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  4818  17C2  0024               	movlb	4	; select bank4
  4819  17C3  0811               	movf	17,w	;volatile
  4820  17C4  00F4               	movwf	??_SPIRead
  4821  17C5  0879               	movf	SPIRead@i,w
  4822  17C6  00F5               	movwf	??_SPIRead+1
  4823  17C7  01F6               	clrf	??_SPIRead+2
  4824  17C8  0875               	movf	??_SPIRead+1,w
  4825  17C9  0771               	addwf	SPIRead@dstPtr,w
  4826  17CA  00F7               	movwf	??_SPIRead+3
  4827  17CB  0876               	movf	??_SPIRead+2,w
  4828  17CC  3D72               	addwfc	SPIRead@dstPtr+1,w
  4829  17CD  00F8               	movwf	??_SPIRead+4
  4830  17CE  0877               	movf	??_SPIRead+3,w
  4831  17CF  0086               	movwf	6
  4832  17D0  0878               	movf	??_SPIRead+4,w
  4833  17D1  0087               	movwf	7
  4834  17D2  0874               	movf	??_SPIRead,w
  4835  17D3  0081               	movwf	1
  4836  17D4  3001               	movlw	1
  4837  17D5  00F4               	movwf	??_SPIRead
  4838  17D6  0874               	movf	??_SPIRead,w
  4839  17D7  07F9               	addwf	SPIRead@i,f
  4840  17D8  2FB4               	goto	l4520
  4841  17D9                     __end_of_SPIRead:	
  4842                           
  4843                           	psect	text20
  4844  149E                     __ptext20:	
  4845 ;; *************** function _RTXPgmOff *****************
  4846 ;; Defined at:
  4847 ;;		line 473 in file "RTX.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;		None
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;		None               void
  4854 ;; Registers used:
  4855 ;;		status,2
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;Total ram usage:        0 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    2
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_PGMSelLong
  4872 ;;		_RTXReadPkt
  4873 ;;		_SYSTask
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           
  4878                           ;psect for function _RTXPgmOff
  4879  149E                     _RTXPgmOff:	
  4880                           
  4881                           ;RTX.c: 475: rtx_flg.pgmonoff=0;
  4882                           
  4883                           ;incstack = 0
  4884                           ; Regs used in _RTXPgmOff: [status,2]
  4885  149E  0021               	movlb	1	; select bank1
  4886  149F  1163               	bcf	_rtx_flg^(0+128),2
  4887                           
  4888                           ;RTX.c: 477: tmrRcvPkt=0;
  4889  14A0  01E7               	clrf	_tmrRcvPkt^(0+128)
  4890                           
  4891                           ;RTX.c: 479: tmrVisBatt=0;
  4892  14A1  01E0               	clrf	_tmrVisBatt^(0+128)
  4893  14A2  01E1               	clrf	(_tmrVisBatt+1)^(0+128)
  4894  14A3  0008               	return
  4895  14A4                     __end_of_RTXPgmOff:	
  4896                           
  4897                           	psect	text21
  4898  08A0                     __ptext21:	
  4899 ;; *************** function _RTXInit *****************
  4900 ;; Defined at:
  4901 ;;		line 58 in file "RTX.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  state           1    wreg     unsigned char 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  state           1   65[BANK0 ] unsigned char 
  4906 ;; Return value:  Size  Location     Type
  4907 ;;		None               void
  4908 ;; Registers used:
  4909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;Total ram usage:        1 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    8
  4922 ;; This function calls:
  4923 ;;		_CC1Strobe
  4924 ;;		_RTXUpdateDisplay
  4925 ;; This function is called by:
  4926 ;;		_main
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _RTXInit
  4932  08A0                     _RTXInit:	
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _RTXInit: [allreg]
  4936                           ;RTXInit@state stored from wreg
  4937  08A0  0020               	movlb	0	; select bank0
  4938  08A1  00E1               	movwf	RTXInit@state
  4939                           
  4940                           ;RTX.c: 59: switch(state)
  4941  08A2  28BD               	goto	l4896
  4942  08A3                     l4888:	
  4943                           ;RTX.c: 64: case 1:
  4944                           
  4945                           ;RTX.c: 63: break;
  4946                           
  4947                           ;RTX.c: 60: {
  4948                           ;RTX.c: 61: case 0:
  4949                           
  4950                           
  4951                           ;RTX.c: 66: tmrRcvPkt=0;
  4952  08A3  0021               	movlb	1	; select bank1
  4953  08A4  01E7               	clrf	_tmrRcvPkt^(0+128)
  4954                           
  4955                           ;RTX.c: 67: rtx_flg.val=0;
  4956  08A5  01E3               	clrf	_rtx_flg^(0+128)
  4957                           
  4958                           ;RTX.c: 68: tmrCalibration=0;
  4959  08A6  0022               	movlb	2	; select bank2
  4960  08A7  01A6               	clrf	_tmrCalibration^(0+256)
  4961  08A8  01A7               	clrf	(_tmrCalibration+1)^(0+256)
  4962                           
  4963                           ;RTX.c: 69: tmrVisBatt=0;
  4964  08A9  0021               	movlb	1	; select bank1
  4965  08AA  01E0               	clrf	_tmrVisBatt^(0+128)
  4966  08AB  01E1               	clrf	(_tmrVisBatt+1)^(0+128)
  4967                           
  4968                           ;RTX.c: 70: break;
  4969  08AC  0008               	return
  4970  08AD                     l4890:	
  4971                           ;RTX.c: 71: case 2:
  4972                           
  4973                           
  4974                           ;RTX.c: 73: CC1Strobe(SIDLE);
  4975  08AD  3036               	movlw	54
  4976  08AE  3195  2594  3188   	fcall	_CC1Strobe
  4977                           
  4978                           ;RTX.c: 74: CC1Strobe(SCAL);
  4979  08B1  3033               	movlw	51
  4980  08B2  3195  2594  3188   	fcall	_CC1Strobe
  4981                           
  4982                           ;RTX.c: 75: CC1Strobe(SRX);
  4983  08B5  3034               	movlw	52
  4984  08B6  3195  2594  3188   	fcall	_CC1Strobe
  4985                           
  4986                           ;RTX.c: 77: RTXUpdateDisplay(UPD_DPY_RST);
  4987  08B9  3000               	movlw	0
  4988  08BA  3180  2040         	fcall	_RTXUpdateDisplay
  4989                           
  4990                           ;RTX.c: 79: }
  4991                           
  4992                           ;RTX.c: 78: break;
  4993  08BC  0008               	return
  4994  08BD                     l4896:	
  4995  08BD  0020               	movlb	0	; select bank0
  4996  08BE  0861               	movf	RTXInit@state,w
  4997                           
  4998                           ; Switch size 1, requested type "space"
  4999                           ; Number of cases is 3, Range of values is 0 to 2
  5000                           ; switch strategies available:
  5001                           ; Name         Instructions Cycles
  5002                           ; simple_byte           10     6 (average)
  5003                           ; direct_byte           12     6 (fixed)
  5004                           ; jumptable            260     6 (fixed)
  5005                           ;	Chosen strategy is simple_byte
  5006  08BF  3A00               	xorlw	0	; case 0
  5007  08C0  1903               	skipnz
  5008  08C1  28C9               	goto	l457
  5009  08C2  3A01               	xorlw	1	; case 1
  5010  08C3  1903               	skipnz
  5011  08C4  28A3               	goto	l4888
  5012  08C5  3A03               	xorlw	3	; case 2
  5013  08C6  1903               	skipnz
  5014  08C7  28AD               	goto	l4890
  5015  08C8  28C9               	goto	l457
  5016  08C9                     l457:	
  5017  08C9  0008               	return
  5018  08CA                     __end_of_RTXInit:	
  5019                           
  5020                           	psect	text22
  5021  0040                     __ptext22:	
  5022 ;; *************** function _RTXUpdateDisplay *****************
  5023 ;; Defined at:
  5024 ;;		line 121 in file "RTX.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  val             1    wreg     enum E2114
  5027 ;; Auto vars:     Size  Location     Type
  5028 ;;  val             1   62[BANK1 ] enum E2114
  5029 ;;  strTitle       16   45[BANK1 ] unsigned char [16]
  5030 ;;  strText        16   28[BANK1 ] unsigned char [16]
  5031 ;;  charIdSens      4   24[BANK1 ] unsigned char [4]
  5032 ;;  i               1   63[BANK1 ] unsigned char 
  5033 ;;  curPos          1   61[BANK1 ] unsigned char 
  5034 ;;  maxDigit        1   44[BANK1 ] unsigned char 
  5035 ;; Return value:  Size  Location     Type
  5036 ;;		None               void
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/0
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Locals:         0       0      40       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Totals:         0       3      40       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;Total ram usage:       43 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:    7
  5051 ;; This function calls:
  5052 ;;		_DPYSendStr
  5053 ;;		_itoa
  5054 ;;		_RTXVisDec
  5055 ;;		___ftge
  5056 ;; This function is called by:
  5057 ;;		_PGMPgmOff
  5058 ;;		_PGMSelDown
  5059 ;;		_PGMSelLong
  5060 ;;		_RTXInit
  5061 ;;		_RTXTick
  5062 ;;		_RTXSelDown
  5063 ;;		_RTXReadPkt
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function _RTXUpdateDisplay
  5069  0040                     _RTXUpdateDisplay:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in _RTXUpdateDisplay: [allreg]
  5073                           ;RTXUpdateDisplay@val stored from wreg
  5074  0040  0021               	movlb	1	; select bank1
  5075  0041  00DE               	movwf	RTXUpdateDisplay@val^(0+128)
  5076                           
  5077                           ;RTX.c: 122: char charIdSens[4],strTitle[16],strText[16];
  5078                           ;RTX.c: 123: unsigned char i,maxDigit,curPos;
  5079                           ;RTX.c: 126: for(i=0;i<sizeof(strTitle)/sizeof(char);i++)
  5080  0042  01DF               	clrf	RTXUpdateDisplay@i^(0+128)
  5081  0043  3010               	movlw	16
  5082  0044  025F               	subwf	RTXUpdateDisplay@i^(0+128),w
  5083  0045  1803               	btfsc	3,0
  5084  0046  285B               	goto	l4782
  5085  0047                     l4776:	
  5086                           
  5087                           ;RTX.c: 127: strTitle[i]=' ';
  5088  0047  3020               	movlw	32
  5089  0048  0020               	movlb	0	; select bank0
  5090  0049  00DE               	movwf	??_RTXUpdateDisplay
  5091  004A  0021               	movlb	1	; select bank1
  5092  004B  085F               	movf	RTXUpdateDisplay@i^(0+128),w
  5093  004C  3ECD               	addlw	RTXUpdateDisplay@strTitle& (0+255)
  5094  004D  0086               	movwf	6
  5095  004E  0187               	clrf	7
  5096  004F  0020               	movlb	0	; select bank0
  5097  0050  085E               	movf	??_RTXUpdateDisplay,w
  5098  0051  0081               	movwf	1
  5099  0052  3001               	movlw	1
  5100  0053  00DE               	movwf	??_RTXUpdateDisplay
  5101  0054  085E               	movf	??_RTXUpdateDisplay,w
  5102  0055  0021               	movlb	1	; select bank1
  5103  0056  07DF               	addwf	RTXUpdateDisplay@i^(0+128),f
  5104  0057  3010               	movlw	16
  5105  0058  025F               	subwf	RTXUpdateDisplay@i^(0+128),w
  5106  0059  1C03               	skipc
  5107  005A  2847               	goto	l4776
  5108  005B                     l4782:	
  5109                           
  5110                           ;RTX.c: 128: for(i=0;i<sizeof(strText)/sizeof(char);i++)
  5111  005B  01DF               	clrf	RTXUpdateDisplay@i^(0+128)
  5112  005C  3010               	movlw	16
  5113  005D  025F               	subwf	RTXUpdateDisplay@i^(0+128),w
  5114  005E  1803               	btfsc	3,0
  5115  005F  2874               	goto	l4794
  5116  0060                     l4788:	
  5117                           
  5118                           ;RTX.c: 129: strText[i]=' ';
  5119  0060  3020               	movlw	32
  5120  0061  0020               	movlb	0	; select bank0
  5121  0062  00DE               	movwf	??_RTXUpdateDisplay
  5122  0063  0021               	movlb	1	; select bank1
  5123  0064  085F               	movf	RTXUpdateDisplay@i^(0+128),w
  5124  0065  3EBC               	addlw	RTXUpdateDisplay@strText& (0+255)
  5125  0066  0086               	movwf	6
  5126  0067  0187               	clrf	7
  5127  0068  0020               	movlb	0	; select bank0
  5128  0069  085E               	movf	??_RTXUpdateDisplay,w
  5129  006A  0081               	movwf	1
  5130  006B  3001               	movlw	1
  5131  006C  00DE               	movwf	??_RTXUpdateDisplay
  5132  006D  085E               	movf	??_RTXUpdateDisplay,w
  5133  006E  0021               	movlb	1	; select bank1
  5134  006F  07DF               	addwf	RTXUpdateDisplay@i^(0+128),f
  5135  0070  3010               	movlw	16
  5136  0071  025F               	subwf	RTXUpdateDisplay@i^(0+128),w
  5137  0072  1C03               	skipc
  5138  0073  2860               	goto	l4788
  5139  0074                     l4794:	
  5140                           
  5141                           ;RTX.c: 131: if(val==UPD_DPY_PGM || val==UPD_DPY_PGMDONE || val==UPD_DPY_PGMRST)
  5142  0074  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5143  0075  3A03               	xorlw	3
  5144  0076  1903               	skipnz
  5145  0077  2880               	goto	l4800
  5146  0078  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5147  0079  3A04               	xorlw	4
  5148  007A  1903               	skipnz
  5149  007B  2880               	goto	l4800
  5150  007C  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5151  007D  3A05               	xorlw	5
  5152  007E  1D03               	skipz
  5153  007F  2954               	goto	l4826
  5154  0080                     l4800:	
  5155                           
  5156                           ;RTX.c: 132: {
  5157                           ;RTX.c: 133: strTitle[1]='P';
  5158  0080  3050               	movlw	80
  5159  0081  0020               	movlb	0	; select bank0
  5160  0082  00DE               	movwf	??_RTXUpdateDisplay
  5161  0083  085E               	movf	??_RTXUpdateDisplay,w
  5162  0084  0021               	movlb	1	; select bank1
  5163  0085  00CE               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+1)
  5164                           
  5165                           ;RTX.c: 134: strTitle[2]='r';
  5166  0086  3072               	movlw	114
  5167  0087  0020               	movlb	0	; select bank0
  5168  0088  00DE               	movwf	??_RTXUpdateDisplay
  5169  0089  085E               	movf	??_RTXUpdateDisplay,w
  5170  008A  0021               	movlb	1	; select bank1
  5171  008B  00CF               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+2)
  5172                           
  5173                           ;RTX.c: 135: strTitle[3]='o';
  5174  008C  306F               	movlw	111
  5175  008D  0020               	movlb	0	; select bank0
  5176  008E  00DE               	movwf	??_RTXUpdateDisplay
  5177  008F  085E               	movf	??_RTXUpdateDisplay,w
  5178  0090  0021               	movlb	1	; select bank1
  5179  0091  00D0               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+3)
  5180                           
  5181                           ;RTX.c: 136: strTitle[4]='g';
  5182  0092  3067               	movlw	103
  5183  0093  0020               	movlb	0	; select bank0
  5184  0094  00DE               	movwf	??_RTXUpdateDisplay
  5185  0095  085E               	movf	??_RTXUpdateDisplay,w
  5186  0096  0021               	movlb	1	; select bank1
  5187  0097  00D1               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+4)
  5188                           
  5189                           ;RTX.c: 137: strTitle[5]='r';
  5190  0098  3072               	movlw	114
  5191  0099  0020               	movlb	0	; select bank0
  5192  009A  00DE               	movwf	??_RTXUpdateDisplay
  5193  009B  085E               	movf	??_RTXUpdateDisplay,w
  5194  009C  0021               	movlb	1	; select bank1
  5195  009D  00D2               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+5)
  5196                           
  5197                           ;RTX.c: 138: strTitle[6]='a';
  5198  009E  3061               	movlw	97
  5199  009F  0020               	movlb	0	; select bank0
  5200  00A0  00DE               	movwf	??_RTXUpdateDisplay
  5201  00A1  085E               	movf	??_RTXUpdateDisplay,w
  5202  00A2  0021               	movlb	1	; select bank1
  5203  00A3  00D3               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+6)
  5204                           
  5205                           ;RTX.c: 139: strTitle[7]='m';
  5206  00A4  306D               	movlw	109
  5207  00A5  0020               	movlb	0	; select bank0
  5208  00A6  00DE               	movwf	??_RTXUpdateDisplay
  5209  00A7  085E               	movf	??_RTXUpdateDisplay,w
  5210  00A8  0021               	movlb	1	; select bank1
  5211  00A9  00D4               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+7)
  5212                           
  5213                           ;RTX.c: 140: strTitle[8]='m';
  5214  00AA  306D               	movlw	109
  5215  00AB  0020               	movlb	0	; select bank0
  5216  00AC  00DE               	movwf	??_RTXUpdateDisplay
  5217  00AD  085E               	movf	??_RTXUpdateDisplay,w
  5218  00AE  0021               	movlb	1	; select bank1
  5219  00AF  00D5               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+8)
  5220                           
  5221                           ;RTX.c: 141: strTitle[9]='a';
  5222  00B0  3061               	movlw	97
  5223  00B1  0020               	movlb	0	; select bank0
  5224  00B2  00DE               	movwf	??_RTXUpdateDisplay
  5225  00B3  085E               	movf	??_RTXUpdateDisplay,w
  5226  00B4  0021               	movlb	1	; select bank1
  5227  00B5  00D6               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+9)
  5228                           
  5229                           ;RTX.c: 142: strTitle[10]='z';
  5230  00B6  307A               	movlw	122
  5231  00B7  0020               	movlb	0	; select bank0
  5232  00B8  00DE               	movwf	??_RTXUpdateDisplay
  5233  00B9  085E               	movf	??_RTXUpdateDisplay,w
  5234  00BA  0021               	movlb	1	; select bank1
  5235  00BB  00D7               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+10)
  5236                           
  5237                           ;RTX.c: 143: strTitle[11]='i';
  5238  00BC  3069               	movlw	105
  5239  00BD  0020               	movlb	0	; select bank0
  5240  00BE  00DE               	movwf	??_RTXUpdateDisplay
  5241  00BF  085E               	movf	??_RTXUpdateDisplay,w
  5242  00C0  0021               	movlb	1	; select bank1
  5243  00C1  00D8               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+11)
  5244                           
  5245                           ;RTX.c: 144: strTitle[12]='o';
  5246  00C2  306F               	movlw	111
  5247  00C3  0020               	movlb	0	; select bank0
  5248  00C4  00DE               	movwf	??_RTXUpdateDisplay
  5249  00C5  085E               	movf	??_RTXUpdateDisplay,w
  5250  00C6  0021               	movlb	1	; select bank1
  5251  00C7  00D9               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+12)
  5252                           
  5253                           ;RTX.c: 145: strTitle[13]='n';
  5254  00C8  306E               	movlw	110
  5255  00C9  0020               	movlb	0	; select bank0
  5256  00CA  00DE               	movwf	??_RTXUpdateDisplay
  5257  00CB  085E               	movf	??_RTXUpdateDisplay,w
  5258  00CC  0021               	movlb	1	; select bank1
  5259  00CD  00DA               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+13)
  5260                           
  5261                           ;RTX.c: 146: strTitle[14]='e';
  5262  00CE  3065               	movlw	101
  5263  00CF  0020               	movlb	0	; select bank0
  5264  00D0  00DE               	movwf	??_RTXUpdateDisplay
  5265  00D1  085E               	movf	??_RTXUpdateDisplay,w
  5266  00D2  0021               	movlb	1	; select bank1
  5267  00D3  00DB               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+14)
  5268                           
  5269                           ;RTX.c: 147: if(val==UPD_DPY_PGMRST)
  5270  00D4  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5271  00D5  3A05               	xorlw	5
  5272  00D6  1D03               	skipz
  5273  00D7  28F7               	goto	l4804
  5274                           
  5275                           ;RTX.c: 148: {
  5276                           ;RTX.c: 149: strText[5]='R';
  5277  00D8  3052               	movlw	82
  5278  00D9  0020               	movlb	0	; select bank0
  5279  00DA  00DE               	movwf	??_RTXUpdateDisplay
  5280  00DB  085E               	movf	??_RTXUpdateDisplay,w
  5281  00DC  0021               	movlb	1	; select bank1
  5282  00DD  00C1               	movwf	(RTXUpdateDisplay@strText^(0+128)+5)
  5283                           
  5284                           ;RTX.c: 150: strText[6]='E';
  5285  00DE  3045               	movlw	69
  5286  00DF  0020               	movlb	0	; select bank0
  5287  00E0  00DE               	movwf	??_RTXUpdateDisplay
  5288  00E1  085E               	movf	??_RTXUpdateDisplay,w
  5289  00E2  0021               	movlb	1	; select bank1
  5290  00E3  00C2               	movwf	(RTXUpdateDisplay@strText^(0+128)+6)
  5291                           
  5292                           ;RTX.c: 151: strText[7]='S';
  5293  00E4  3053               	movlw	83
  5294  00E5  0020               	movlb	0	; select bank0
  5295  00E6  00DE               	movwf	??_RTXUpdateDisplay
  5296  00E7  085E               	movf	??_RTXUpdateDisplay,w
  5297  00E8  0021               	movlb	1	; select bank1
  5298  00E9  00C3               	movwf	(RTXUpdateDisplay@strText^(0+128)+7)
  5299                           
  5300                           ;RTX.c: 152: strText[8]='E';
  5301  00EA  3045               	movlw	69
  5302  00EB  0020               	movlb	0	; select bank0
  5303  00EC  00DE               	movwf	??_RTXUpdateDisplay
  5304  00ED  085E               	movf	??_RTXUpdateDisplay,w
  5305  00EE  0021               	movlb	1	; select bank1
  5306  00EF  00C4               	movwf	(RTXUpdateDisplay@strText^(0+128)+8)
  5307                           
  5308                           ;RTX.c: 153: strText[9]='T';
  5309  00F0  3054               	movlw	84
  5310  00F1  0020               	movlb	0	; select bank0
  5311  00F2  00DE               	movwf	??_RTXUpdateDisplay
  5312  00F3  085E               	movf	??_RTXUpdateDisplay,w
  5313  00F4  0021               	movlb	1	; select bank1
  5314  00F5  00C5               	movwf	(RTXUpdateDisplay@strText^(0+128)+9)
  5315                           
  5316                           ;RTX.c: 154: }
  5317  00F6  2A9D               	goto	l4856
  5318  00F7                     l4804:	
  5319                           
  5320                           ;RTX.c: 155: else
  5321                           ;RTX.c: 156: {
  5322                           ;RTX.c: 157: strText[5]='I';
  5323  00F7  3049               	movlw	73
  5324  00F8  0020               	movlb	0	; select bank0
  5325  00F9  00DE               	movwf	??_RTXUpdateDisplay
  5326  00FA  085E               	movf	??_RTXUpdateDisplay,w
  5327  00FB  0021               	movlb	1	; select bank1
  5328  00FC  00C1               	movwf	(RTXUpdateDisplay@strText^(0+128)+5)
  5329                           
  5330                           ;RTX.c: 158: strText[6]='D';
  5331  00FD  3044               	movlw	68
  5332  00FE  0020               	movlb	0	; select bank0
  5333  00FF  00DE               	movwf	??_RTXUpdateDisplay
  5334  0100  085E               	movf	??_RTXUpdateDisplay,w
  5335  0101  0021               	movlb	1	; select bank1
  5336  0102  00C2               	movwf	(RTXUpdateDisplay@strText^(0+128)+6)
  5337                           
  5338                           ;RTX.c: 159: strText[7]=':';
  5339  0103  303A               	movlw	58
  5340  0104  0020               	movlb	0	; select bank0
  5341  0105  00DE               	movwf	??_RTXUpdateDisplay
  5342  0106  085E               	movf	??_RTXUpdateDisplay,w
  5343  0107  0021               	movlb	1	; select bank1
  5344  0108  00C3               	movwf	(RTXUpdateDisplay@strText^(0+128)+7)
  5345                           
  5346                           ;RTX.c: 160: if(val==UPD_DPY_PGM)
  5347  0109  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5348  010A  3A03               	xorlw	3
  5349  010B  1D03               	skipz
  5350  010C  2920               	goto	l4808
  5351                           
  5352                           ;RTX.c: 161: {
  5353                           ;RTX.c: 162: strText[8]='?';
  5354  010D  303F               	movlw	63
  5355  010E  0020               	movlb	0	; select bank0
  5356  010F  00DE               	movwf	??_RTXUpdateDisplay
  5357  0110  085E               	movf	??_RTXUpdateDisplay,w
  5358  0111  0021               	movlb	1	; select bank1
  5359  0112  00C4               	movwf	(RTXUpdateDisplay@strText^(0+128)+8)
  5360                           
  5361                           ;RTX.c: 163: strText[9]='?';
  5362  0113  303F               	movlw	63
  5363  0114  0020               	movlb	0	; select bank0
  5364  0115  00DE               	movwf	??_RTXUpdateDisplay
  5365  0116  085E               	movf	??_RTXUpdateDisplay,w
  5366  0117  0021               	movlb	1	; select bank1
  5367  0118  00C5               	movwf	(RTXUpdateDisplay@strText^(0+128)+9)
  5368                           
  5369                           ;RTX.c: 164: strText[10]='?';
  5370  0119  303F               	movlw	63
  5371  011A  0020               	movlb	0	; select bank0
  5372  011B  00DE               	movwf	??_RTXUpdateDisplay
  5373  011C  085E               	movf	??_RTXUpdateDisplay,w
  5374  011D  0021               	movlb	1	; select bank1
  5375  011E  00C6               	movwf	(RTXUpdateDisplay@strText^(0+128)+10)
  5376                           
  5377                           ;RTX.c: 165: }
  5378  011F  2A9D               	goto	l4856
  5379  0120                     l4808:	
  5380                           
  5381                           ;RTX.c: 166: else
  5382                           ;RTX.c: 167: {
  5383                           ;RTX.c: 168: itoa(charIdSens,pgm_cfg.sensId,10);
  5384  0120  0022               	movlb	2	; select bank2
  5385  0121  0852               	movf	(_pgm_cfg^(0+256)+3),w
  5386  0122  0020               	movlb	0	; select bank0
  5387  0123  00DE               	movwf	??_RTXUpdateDisplay
  5388  0124  01DF               	clrf	??_RTXUpdateDisplay+1
  5389  0125  085E               	movf	??_RTXUpdateDisplay,w
  5390  0126  00A8               	movwf	?_itoa
  5391  0127  085F               	movf	??_RTXUpdateDisplay+1,w
  5392  0128  00A9               	movwf	?_itoa+1
  5393  0129  300A               	movlw	10
  5394  012A  00AA               	movwf	?_itoa+2
  5395  012B  3000               	movlw	0
  5396  012C  00AB               	movwf	?_itoa+3
  5397  012D  30B8               	movlw	RTXUpdateDisplay@charIdSens& (0+255)
  5398  012E  3188  2050  3180   	fcall	_itoa
  5399                           
  5400                           ;RTX.c: 169: for(i=0;i<4;i++)
  5401  0131  0021               	movlb	1	; select bank1
  5402  0132  01DF               	clrf	RTXUpdateDisplay@i^(0+128)
  5403  0133                     L2:	
  5404  0133  3004               	movlw	4
  5405  0134  025F               	subwf	RTXUpdateDisplay@i^(0+128),w
  5406  0135  1803               	btfsc	3,0
  5407  0136  2A9D               	goto	l4856
  5408                           
  5409                           ;RTX.c: 170: {
  5410                           ;RTX.c: 171: if(charIdSens[i]==0x00)
  5411  0137  085F               	movf	RTXUpdateDisplay@i^(0+128),w
  5412  0138  3EB8               	addlw	RTXUpdateDisplay@charIdSens& (0+255)
  5413  0139  0086               	movwf	6
  5414  013A  0187               	clrf	7
  5415  013B  0881               	movf	1,f
  5416  013C  1903               	btfsc	3,2
  5417  013D  2A9D               	goto	l4856
  5418                           
  5419                           ;RTX.c: 173: strText[8+i]=charIdSens[i];
  5420                           
  5421                           ;RTX.c: 172: break;
  5422  013E  085F               	movf	RTXUpdateDisplay@i^(0+128),w
  5423  013F  3EB8               	addlw	RTXUpdateDisplay@charIdSens& (0+255)
  5424  0140  0086               	movwf	6
  5425  0141  0187               	clrf	7
  5426  0142  0801               	movf	1,w
  5427  0143  0020               	movlb	0	; select bank0
  5428  0144  00DE               	movwf	??_RTXUpdateDisplay
  5429  0145  0021               	movlb	1	; select bank1
  5430  0146  085F               	movf	RTXUpdateDisplay@i^(0+128),w
  5431  0147  3E08               	addlw	8
  5432  0148  3EBC               	addlw	RTXUpdateDisplay@strText& (0+255)
  5433  0149  0086               	movwf	6
  5434  014A  0187               	clrf	7
  5435  014B  0020               	movlb	0	; select bank0
  5436  014C  085E               	movf	??_RTXUpdateDisplay,w
  5437  014D  0081               	movwf	1
  5438  014E  3001               	movlw	1
  5439  014F  00DE               	movwf	??_RTXUpdateDisplay
  5440  0150  085E               	movf	??_RTXUpdateDisplay,w
  5441  0151  0021               	movlb	1	; select bank1
  5442  0152  07DF               	addwf	RTXUpdateDisplay@i^(0+128),f
  5443  0153  2933               	goto	L2
  5444  0154                     l4826:	
  5445                           ;RTX.c: 174: }
  5446                           ;RTX.c: 175: }
  5447                           ;RTX.c: 176: }
  5448                           ;RTX.c: 177: }
  5449                           
  5450                           
  5451                           ;RTX.c: 178: else if(val==UPD_DPY_BATT)
  5452  0154  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5453  0155  3A02               	xorlw	2
  5454  0156  1D03               	skipz
  5455  0157  29BE               	goto	l4834
  5456                           
  5457                           ;RTX.c: 179: {
  5458                           ;RTX.c: 180: strTitle[3]='B';
  5459  0158  3042               	movlw	66
  5460  0159  0020               	movlb	0	; select bank0
  5461  015A  00DE               	movwf	??_RTXUpdateDisplay
  5462  015B  085E               	movf	??_RTXUpdateDisplay,w
  5463  015C  0021               	movlb	1	; select bank1
  5464  015D  00D0               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+3)
  5465                           
  5466                           ;RTX.c: 181: strTitle[4]='a';
  5467  015E  3061               	movlw	97
  5468  015F  0020               	movlb	0	; select bank0
  5469  0160  00DE               	movwf	??_RTXUpdateDisplay
  5470  0161  085E               	movf	??_RTXUpdateDisplay,w
  5471  0162  0021               	movlb	1	; select bank1
  5472  0163  00D1               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+4)
  5473                           
  5474                           ;RTX.c: 182: strTitle[5]='t';
  5475  0164  3074               	movlw	116
  5476  0165  0020               	movlb	0	; select bank0
  5477  0166  00DE               	movwf	??_RTXUpdateDisplay
  5478  0167  085E               	movf	??_RTXUpdateDisplay,w
  5479  0168  0021               	movlb	1	; select bank1
  5480  0169  00D2               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+5)
  5481                           
  5482                           ;RTX.c: 183: strTitle[6]='t';
  5483  016A  3074               	movlw	116
  5484  016B  0020               	movlb	0	; select bank0
  5485  016C  00DE               	movwf	??_RTXUpdateDisplay
  5486  016D  085E               	movf	??_RTXUpdateDisplay,w
  5487  016E  0021               	movlb	1	; select bank1
  5488  016F  00D3               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+6)
  5489                           
  5490                           ;RTX.c: 184: strTitle[7]='e';
  5491  0170  3065               	movlw	101
  5492  0171  0020               	movlb	0	; select bank0
  5493  0172  00DE               	movwf	??_RTXUpdateDisplay
  5494  0173  085E               	movf	??_RTXUpdateDisplay,w
  5495  0174  0021               	movlb	1	; select bank1
  5496  0175  00D4               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+7)
  5497                           
  5498                           ;RTX.c: 185: strTitle[8]='r';
  5499  0176  3072               	movlw	114
  5500  0177  0020               	movlb	0	; select bank0
  5501  0178  00DE               	movwf	??_RTXUpdateDisplay
  5502  0179  085E               	movf	??_RTXUpdateDisplay,w
  5503  017A  0021               	movlb	1	; select bank1
  5504  017B  00D5               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+8)
  5505                           
  5506                           ;RTX.c: 186: strTitle[9]='i';
  5507  017C  3069               	movlw	105
  5508  017D  0020               	movlb	0	; select bank0
  5509  017E  00DE               	movwf	??_RTXUpdateDisplay
  5510  017F  085E               	movf	??_RTXUpdateDisplay,w
  5511  0180  0021               	movlb	1	; select bank1
  5512  0181  00D6               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+9)
  5513                           
  5514                           ;RTX.c: 187: strTitle[10]='a';
  5515  0182  3061               	movlw	97
  5516  0183  0020               	movlb	0	; select bank0
  5517  0184  00DE               	movwf	??_RTXUpdateDisplay
  5518  0185  085E               	movf	??_RTXUpdateDisplay,w
  5519  0186  0021               	movlb	1	; select bank1
  5520  0187  00D7               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+10)
  5521                           
  5522                           ;RTX.c: 188: strTitle[11]=':';
  5523  0188  303A               	movlw	58
  5524  0189  0020               	movlb	0	; select bank0
  5525  018A  00DE               	movwf	??_RTXUpdateDisplay
  5526  018B  085E               	movf	??_RTXUpdateDisplay,w
  5527  018C  0021               	movlb	1	; select bank1
  5528  018D  00D8               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+11)
  5529                           
  5530                           ;RTX.c: 191: maxDigit=(16-1);
  5531  018E  300F               	movlw	15
  5532  018F  0020               	movlb	0	; select bank0
  5533  0190  00DE               	movwf	??_RTXUpdateDisplay
  5534  0191  085E               	movf	??_RTXUpdateDisplay,w
  5535  0192  0021               	movlb	1	; select bank1
  5536  0193  00CC               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  5537                           
  5538                           ;RTX.c: 192: curPos=RTXVisDec(batt,strText,maxDigit);
  5539  0194  0022               	movlb	2	; select bank2
  5540  0195  0820               	movf	_batt^(0+256),w
  5541  0196  0020               	movlb	0	; select bank0
  5542  0197  00D5               	movwf	?_RTXVisDec
  5543  0198  0022               	movlb	2	; select bank2
  5544  0199  0821               	movf	(_batt+1)^(0+256),w
  5545  019A  0020               	movlb	0	; select bank0
  5546  019B  00D6               	movwf	?_RTXVisDec+1
  5547  019C  0022               	movlb	2	; select bank2
  5548  019D  0822               	movf	(_batt+2)^(0+256),w
  5549  019E  0020               	movlb	0	; select bank0
  5550  019F  00D7               	movwf	?_RTXVisDec+2
  5551  01A0  30BC               	movlw	RTXUpdateDisplay@strText& (0+255)
  5552  01A1  00DE               	movwf	??_RTXUpdateDisplay
  5553  01A2  085E               	movf	??_RTXUpdateDisplay,w
  5554  01A3  00D8               	movwf	?_RTXVisDec+3
  5555  01A4  0021               	movlb	1	; select bank1
  5556  01A5  084C               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  5557  01A6  0020               	movlb	0	; select bank0
  5558  01A7  00DF               	movwf	??_RTXUpdateDisplay+1
  5559  01A8  085F               	movf	??_RTXUpdateDisplay+1,w
  5560  01A9  00D9               	movwf	?_RTXVisDec+4
  5561  01AA  3185  258B  3180   	fcall	_RTXVisDec
  5562  01AD  0020               	movlb	0	; select bank0
  5563  01AE  00E0               	movwf	??_RTXUpdateDisplay+2
  5564  01AF  0860               	movf	??_RTXUpdateDisplay+2,w
  5565  01B0  0021               	movlb	1	; select bank1
  5566  01B1  00DD               	movwf	RTXUpdateDisplay@curPos^(0+128)
  5567                           
  5568                           ;RTX.c: 194: strText[curPos]='V';
  5569  01B2  3056               	movlw	86
  5570  01B3  0020               	movlb	0	; select bank0
  5571  01B4  00DE               	movwf	??_RTXUpdateDisplay
  5572  01B5  0021               	movlb	1	; select bank1
  5573  01B6  085D               	movf	RTXUpdateDisplay@curPos^(0+128),w
  5574  01B7  3EBC               	addlw	RTXUpdateDisplay@strText& (0+255)
  5575  01B8  0086               	movwf	6
  5576  01B9  0187               	clrf	7
  5577  01BA  0020               	movlb	0	; select bank0
  5578  01BB  085E               	movf	??_RTXUpdateDisplay,w
  5579  01BC  0081               	movwf	1
  5580                           
  5581                           ;RTX.c: 195: }
  5582  01BD  2A9D               	goto	l4856
  5583  01BE                     l4834:	
  5584                           
  5585                           ;RTX.c: 196: else
  5586                           ;RTX.c: 197: {
  5587                           ;RTX.c: 198: strTitle[2]='T';
  5588  01BE  3054               	movlw	84
  5589  01BF  0020               	movlb	0	; select bank0
  5590  01C0  00DE               	movwf	??_RTXUpdateDisplay
  5591  01C1  085E               	movf	??_RTXUpdateDisplay,w
  5592  01C2  0021               	movlb	1	; select bank1
  5593  01C3  00CF               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+2)
  5594                           
  5595                           ;RTX.c: 199: strTitle[3]='e';
  5596  01C4  3065               	movlw	101
  5597  01C5  0020               	movlb	0	; select bank0
  5598  01C6  00DE               	movwf	??_RTXUpdateDisplay
  5599  01C7  085E               	movf	??_RTXUpdateDisplay,w
  5600  01C8  0021               	movlb	1	; select bank1
  5601  01C9  00D0               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+3)
  5602                           
  5603                           ;RTX.c: 200: strTitle[4]='m';
  5604  01CA  306D               	movlw	109
  5605  01CB  0020               	movlb	0	; select bank0
  5606  01CC  00DE               	movwf	??_RTXUpdateDisplay
  5607  01CD  085E               	movf	??_RTXUpdateDisplay,w
  5608  01CE  0021               	movlb	1	; select bank1
  5609  01CF  00D1               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+4)
  5610                           
  5611                           ;RTX.c: 201: strTitle[5]='p';
  5612  01D0  3070               	movlw	112
  5613  01D1  0020               	movlb	0	; select bank0
  5614  01D2  00DE               	movwf	??_RTXUpdateDisplay
  5615  01D3  085E               	movf	??_RTXUpdateDisplay,w
  5616  01D4  0021               	movlb	1	; select bank1
  5617  01D5  00D2               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+5)
  5618                           
  5619                           ;RTX.c: 202: strTitle[6]='e';
  5620  01D6  3065               	movlw	101
  5621  01D7  0020               	movlb	0	; select bank0
  5622  01D8  00DE               	movwf	??_RTXUpdateDisplay
  5623  01D9  085E               	movf	??_RTXUpdateDisplay,w
  5624  01DA  0021               	movlb	1	; select bank1
  5625  01DB  00D3               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+6)
  5626                           
  5627                           ;RTX.c: 203: strTitle[7]='r';
  5628  01DC  3072               	movlw	114
  5629  01DD  0020               	movlb	0	; select bank0
  5630  01DE  00DE               	movwf	??_RTXUpdateDisplay
  5631  01DF  085E               	movf	??_RTXUpdateDisplay,w
  5632  01E0  0021               	movlb	1	; select bank1
  5633  01E1  00D4               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+7)
  5634                           
  5635                           ;RTX.c: 204: strTitle[8]='a';
  5636  01E2  3061               	movlw	97
  5637  01E3  0020               	movlb	0	; select bank0
  5638  01E4  00DE               	movwf	??_RTXUpdateDisplay
  5639  01E5  085E               	movf	??_RTXUpdateDisplay,w
  5640  01E6  0021               	movlb	1	; select bank1
  5641  01E7  00D5               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+8)
  5642                           
  5643                           ;RTX.c: 205: strTitle[9]='t';
  5644  01E8  3074               	movlw	116
  5645  01E9  0020               	movlb	0	; select bank0
  5646  01EA  00DE               	movwf	??_RTXUpdateDisplay
  5647  01EB  085E               	movf	??_RTXUpdateDisplay,w
  5648  01EC  0021               	movlb	1	; select bank1
  5649  01ED  00D6               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+9)
  5650                           
  5651                           ;RTX.c: 206: strTitle[10]='u';
  5652  01EE  3075               	movlw	117
  5653  01EF  0020               	movlb	0	; select bank0
  5654  01F0  00DE               	movwf	??_RTXUpdateDisplay
  5655  01F1  085E               	movf	??_RTXUpdateDisplay,w
  5656  01F2  0021               	movlb	1	; select bank1
  5657  01F3  00D7               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+10)
  5658                           
  5659                           ;RTX.c: 207: strTitle[11]='r';
  5660  01F4  3072               	movlw	114
  5661  01F5  0020               	movlb	0	; select bank0
  5662  01F6  00DE               	movwf	??_RTXUpdateDisplay
  5663  01F7  085E               	movf	??_RTXUpdateDisplay,w
  5664  01F8  0021               	movlb	1	; select bank1
  5665  01F9  00D8               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+11)
  5666                           
  5667                           ;RTX.c: 208: strTitle[12]='a';
  5668  01FA  3061               	movlw	97
  5669  01FB  0020               	movlb	0	; select bank0
  5670  01FC  00DE               	movwf	??_RTXUpdateDisplay
  5671  01FD  085E               	movf	??_RTXUpdateDisplay,w
  5672  01FE  0021               	movlb	1	; select bank1
  5673  01FF  00D9               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+12)
  5674                           
  5675                           ;RTX.c: 209: strTitle[13]=':';
  5676  0200  303A               	movlw	58
  5677  0201  0020               	movlb	0	; select bank0
  5678  0202  00DE               	movwf	??_RTXUpdateDisplay
  5679  0203  085E               	movf	??_RTXUpdateDisplay,w
  5680  0204  0021               	movlb	1	; select bank1
  5681  0205  00DA               	movwf	(RTXUpdateDisplay@strTitle^(0+128)+13)
  5682                           
  5683                           ;RTX.c: 211: if(val==UPD_DPY_TEMP)
  5684  0206  085E               	movf	RTXUpdateDisplay@val^(0+128),w
  5685  0207  3A01               	xorlw	1
  5686  0208  1D03               	skipz
  5687  0209  2A70               	goto	l4852
  5688                           
  5689                           ;RTX.c: 212: {
  5690                           ;RTX.c: 214: maxDigit=(16-2);
  5691  020A  300E               	movlw	14
  5692  020B  0020               	movlb	0	; select bank0
  5693  020C  00DE               	movwf	??_RTXUpdateDisplay
  5694  020D  085E               	movf	??_RTXUpdateDisplay,w
  5695  020E  0021               	movlb	1	; select bank1
  5696  020F  00CC               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  5697                           
  5698                           ;RTX.c: 215: if(batt<2.5)
  5699  0210  0022               	movlb	2	; select bank2
  5700  0211  0820               	movf	_batt^(0+256),w
  5701  0212  00F1               	movwf	?___ftge
  5702  0213  0821               	movf	(_batt+1)^(0+256),w
  5703  0214  00F2               	movwf	?___ftge+1
  5704  0215  0822               	movf	(_batt+2)^(0+256),w
  5705  0216  00F3               	movwf	?___ftge+2
  5706  0217  3000               	movlw	0
  5707  0218  00F4               	movwf	?___ftge+3
  5708  0219  3020               	movlw	32
  5709  021A  00F5               	movwf	?___ftge+4
  5710  021B  3040               	movlw	64
  5711  021C  00F6               	movwf	?___ftge+5
  5712  021D  318A  2277  3180   	fcall	___ftge
  5713  0220  1803               	btfsc	3,0
  5714  0221  2A28               	goto	l4842
  5715                           
  5716                           ;RTX.c: 216: maxDigit=(16-3);
  5717  0222  300D               	movlw	13
  5718  0223  0020               	movlb	0	; select bank0
  5719  0224  00DE               	movwf	??_RTXUpdateDisplay
  5720  0225  085E               	movf	??_RTXUpdateDisplay,w
  5721  0226  0021               	movlb	1	; select bank1
  5722  0227  00CC               	movwf	RTXUpdateDisplay@maxDigit^(0+128)
  5723  0228                     l4842:	
  5724                           
  5725                           ;RTX.c: 218: curPos=RTXVisDec(temp,strText,maxDigit);
  5726  0228  0022               	movlb	2	; select bank2
  5727  0229  0823               	movf	_temp^(0+256),w
  5728  022A  0020               	movlb	0	; select bank0
  5729  022B  00D5               	movwf	?_RTXVisDec
  5730  022C  0022               	movlb	2	; select bank2
  5731  022D  0824               	movf	(_temp+1)^(0+256),w
  5732  022E  0020               	movlb	0	; select bank0
  5733  022F  00D6               	movwf	?_RTXVisDec+1
  5734  0230  0022               	movlb	2	; select bank2
  5735  0231  0825               	movf	(_temp+2)^(0+256),w
  5736  0232  0020               	movlb	0	; select bank0
  5737  0233  00D7               	movwf	?_RTXVisDec+2
  5738  0234  30BC               	movlw	RTXUpdateDisplay@strText& (0+255)
  5739  0235  00DE               	movwf	??_RTXUpdateDisplay
  5740  0236  085E               	movf	??_RTXUpdateDisplay,w
  5741  0237  00D8               	movwf	?_RTXVisDec+3
  5742  0238  0021               	movlb	1	; select bank1
  5743  0239  084C               	movf	RTXUpdateDisplay@maxDigit^(0+128),w
  5744  023A  0020               	movlb	0	; select bank0
  5745  023B  00DF               	movwf	??_RTXUpdateDisplay+1
  5746  023C  085F               	movf	??_RTXUpdateDisplay+1,w
  5747  023D  00D9               	movwf	?_RTXVisDec+4
  5748  023E  3185  258B  3180   	fcall	_RTXVisDec
  5749  0241  0020               	movlb	0	; select bank0
  5750  0242  00E0               	movwf	??_RTXUpdateDisplay+2
  5751  0243  0860               	movf	??_RTXUpdateDisplay+2,w
  5752  0244  0021               	movlb	1	; select bank1
  5753  0245  00DD               	movwf	RTXUpdateDisplay@curPos^(0+128)
  5754                           
  5755                           ;RTX.c: 221: strText[curPos]=0b11011111;
  5756  0246  30DF               	movlw	223
  5757  0247  0020               	movlb	0	; select bank0
  5758  0248  00DE               	movwf	??_RTXUpdateDisplay
  5759  0249  0021               	movlb	1	; select bank1
  5760  024A  085D               	movf	RTXUpdateDisplay@curPos^(0+128),w
  5761  024B  3EBC               	addlw	RTXUpdateDisplay@strText& (0+255)
  5762  024C  0086               	movwf	6
  5763  024D  0187               	clrf	7
  5764  024E  0020               	movlb	0	; select bank0
  5765  024F  085E               	movf	??_RTXUpdateDisplay,w
  5766  0250  0081               	movwf	1
  5767                           
  5768                           ;RTX.c: 222: strText[curPos+1]='C';
  5769  0251  3043               	movlw	67
  5770  0252  00DE               	movwf	??_RTXUpdateDisplay
  5771  0253  0021               	movlb	1	; select bank1
  5772  0254  0A5D               	incf	RTXUpdateDisplay@curPos^(0+128),w
  5773  0255  3EBC               	addlw	RTXUpdateDisplay@strText& (0+255)
  5774  0256  0086               	movwf	6
  5775  0257  0187               	clrf	7
  5776  0258  0020               	movlb	0	; select bank0
  5777  0259  085E               	movf	??_RTXUpdateDisplay,w
  5778  025A  0081               	movwf	1
  5779                           
  5780                           ;RTX.c: 223: if(batt<2.5)
  5781  025B  0022               	movlb	2	; select bank2
  5782  025C  0820               	movf	_batt^(0+256),w
  5783  025D  00F1               	movwf	?___ftge
  5784  025E  0821               	movf	(_batt+1)^(0+256),w
  5785  025F  00F2               	movwf	?___ftge+1
  5786  0260  0822               	movf	(_batt+2)^(0+256),w
  5787  0261  00F3               	movwf	?___ftge+2
  5788  0262  3000               	movlw	0
  5789  0263  00F4               	movwf	?___ftge+3
  5790  0264  3020               	movlw	32
  5791  0265  00F5               	movwf	?___ftge+4
  5792  0266  3040               	movlw	64
  5793  0267  00F6               	movwf	?___ftge+5
  5794  0268  318A  2277  3180   	fcall	___ftge
  5795  026B  1803               	btfsc	3,0
  5796  026C  2A9D               	goto	l4856
  5797                           
  5798                           ;RTX.c: 224: strText[sizeof(strText)/sizeof(char)-1]=0x00;
  5799  026D  0021               	movlb	1	; select bank1
  5800  026E  01CB               	clrf	(RTXUpdateDisplay@strText^(0+128)+15)
  5801                           
  5802                           ;RTX.c: 225: }
  5803  026F  2A9D               	goto	l4856
  5804  0270                     l4852:	
  5805                           
  5806                           ;RTX.c: 226: else if(val==UPD_DPY_RST)
  5807  0270  08DE               	movf	RTXUpdateDisplay@val^(0+128),f
  5808  0271  1D03               	skipz
  5809  0272  2A9D               	goto	l4856
  5810                           
  5811                           ;RTX.c: 227: {
  5812                           ;RTX.c: 228: strText[5]='?';
  5813  0273  303F               	movlw	63
  5814  0274  0020               	movlb	0	; select bank0
  5815  0275  00DE               	movwf	??_RTXUpdateDisplay
  5816  0276  085E               	movf	??_RTXUpdateDisplay,w
  5817  0277  0021               	movlb	1	; select bank1
  5818  0278  00C1               	movwf	(RTXUpdateDisplay@strText^(0+128)+5)
  5819                           
  5820                           ;RTX.c: 229: strText[6]='?';
  5821  0279  303F               	movlw	63
  5822  027A  0020               	movlb	0	; select bank0
  5823  027B  00DE               	movwf	??_RTXUpdateDisplay
  5824  027C  085E               	movf	??_RTXUpdateDisplay,w
  5825  027D  0021               	movlb	1	; select bank1
  5826  027E  00C2               	movwf	(RTXUpdateDisplay@strText^(0+128)+6)
  5827                           
  5828                           ;RTX.c: 230: strText[7]='.';
  5829  027F  302E               	movlw	46
  5830  0280  0020               	movlb	0	; select bank0
  5831  0281  00DE               	movwf	??_RTXUpdateDisplay
  5832  0282  085E               	movf	??_RTXUpdateDisplay,w
  5833  0283  0021               	movlb	1	; select bank1
  5834  0284  00C3               	movwf	(RTXUpdateDisplay@strText^(0+128)+7)
  5835                           
  5836                           ;RTX.c: 231: strText[8]='?';
  5837  0285  303F               	movlw	63
  5838  0286  0020               	movlb	0	; select bank0
  5839  0287  00DE               	movwf	??_RTXUpdateDisplay
  5840  0288  085E               	movf	??_RTXUpdateDisplay,w
  5841  0289  0021               	movlb	1	; select bank1
  5842  028A  00C4               	movwf	(RTXUpdateDisplay@strText^(0+128)+8)
  5843                           
  5844                           ;RTX.c: 232: strText[9]='?';
  5845  028B  303F               	movlw	63
  5846  028C  0020               	movlb	0	; select bank0
  5847  028D  00DE               	movwf	??_RTXUpdateDisplay
  5848  028E  085E               	movf	??_RTXUpdateDisplay,w
  5849  028F  0021               	movlb	1	; select bank1
  5850  0290  00C5               	movwf	(RTXUpdateDisplay@strText^(0+128)+9)
  5851                           
  5852                           ;RTX.c: 233: strText[10]=0b11011111;
  5853  0291  30DF               	movlw	223
  5854  0292  0020               	movlb	0	; select bank0
  5855  0293  00DE               	movwf	??_RTXUpdateDisplay
  5856  0294  085E               	movf	??_RTXUpdateDisplay,w
  5857  0295  0021               	movlb	1	; select bank1
  5858  0296  00C6               	movwf	(RTXUpdateDisplay@strText^(0+128)+10)
  5859                           
  5860                           ;RTX.c: 234: strText[11]='C';
  5861  0297  3043               	movlw	67
  5862  0298  0020               	movlb	0	; select bank0
  5863  0299  00DE               	movwf	??_RTXUpdateDisplay
  5864  029A  085E               	movf	??_RTXUpdateDisplay,w
  5865  029B  0021               	movlb	1	; select bank1
  5866  029C  00C7               	movwf	(RTXUpdateDisplay@strText^(0+128)+11)
  5867  029D                     l4856:	
  5868                           
  5869                           ;RTX.c: 235: }
  5870                           ;RTX.c: 236: }
  5871                           ;RTX.c: 237: DPYSendStr(0,0,strTitle,sizeof(strTitle)/sizeof(char));
  5872  029D  0020               	movlb	0	; select bank0
  5873  029E  01A0               	clrf	?_DPYSendStr
  5874  029F  30CD               	movlw	RTXUpdateDisplay@strTitle& (0+255)
  5875  02A0  00DE               	movwf	??_RTXUpdateDisplay
  5876  02A1  085E               	movf	??_RTXUpdateDisplay,w
  5877  02A2  00A1               	movwf	?_DPYSendStr+1
  5878  02A3  3010               	movlw	16
  5879  02A4  00DF               	movwf	??_RTXUpdateDisplay+1
  5880  02A5  085F               	movf	??_RTXUpdateDisplay+1,w
  5881  02A6  00A2               	movwf	?_DPYSendStr+2
  5882  02A7  3000               	movlw	0
  5883  02A8  318B  2373  3180   	fcall	_DPYSendStr
  5884                           
  5885                           ;RTX.c: 238: DPYSendStr(1,0,strText,sizeof(strText)/sizeof(char));
  5886  02AB  0020               	movlb	0	; select bank0
  5887  02AC  01A0               	clrf	?_DPYSendStr
  5888  02AD  30BC               	movlw	RTXUpdateDisplay@strText& (0+255)
  5889  02AE  00DE               	movwf	??_RTXUpdateDisplay
  5890  02AF  085E               	movf	??_RTXUpdateDisplay,w
  5891  02B0  00A1               	movwf	?_DPYSendStr+1
  5892  02B1  3010               	movlw	16
  5893  02B2  00DF               	movwf	??_RTXUpdateDisplay+1
  5894  02B3  085F               	movf	??_RTXUpdateDisplay+1,w
  5895  02B4  00A2               	movwf	?_DPYSendStr+2
  5896  02B5  3001               	movlw	1
  5897  02B6  318B  2373         	fcall	_DPYSendStr
  5898  02B8  0008               	return
  5899  02B9                     __end_of_RTXUpdateDisplay:	
  5900                           
  5901                           	psect	text23
  5902  058B                     __ptext23:	
  5903 ;; *************** function _RTXVisDec *****************
  5904 ;; Defined at:
  5905 ;;		line 242 in file "RTX.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  val             3   53[BANK0 ] float 
  5908 ;;  buff            1   56[BANK0 ] PTR unsigned char 
  5909 ;;		 -> RTXUpdateDisplay@strText(16), 
  5910 ;;  maxDigit        1   57[BANK0 ] unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  strTmp         16    0[BANK1 ] unsigned char [16]
  5913 ;;  status          2   16[BANK1 ] int 
  5914 ;;  i               1   23[BANK1 ] unsigned char 
  5915 ;;  j               1   22[BANK1 ] unsigned char 
  5916 ;;  p               1   21[BANK1 ] PTR unsigned char 
  5917 ;;		 -> ftoa@buf(17), 
  5918 ;;  offset          1   20[BANK1 ] unsigned char 
  5919 ;;  isDec           1   19[BANK1 ] unsigned char 
  5920 ;;  posDec          1   18[BANK1 ] unsigned char 
  5921 ;; Return value:  Size  Location     Type
  5922 ;;                  1    wreg      unsigned char 
  5923 ;; Registers used:
  5924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5930 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Totals:         0       9      24       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;Total ram usage:       33 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    6
  5937 ;; This function calls:
  5938 ;;		_ftoa
  5939 ;;		___awdiv
  5940 ;; This function is called by:
  5941 ;;		_RTXUpdateDisplay
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function _RTXVisDec
  5947  058B                     _RTXVisDec:	
  5948                           
  5949                           ;RTX.c: 243: char *p;
  5950                           ;RTX.c: 244: unsigned char strTmp[16],isDec,posDec,i,j,offset;
  5951                           ;RTX.c: 245: int status;
  5952                           ;RTX.c: 247: p=ftoa(val,(&(status)));
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in _RTXVisDec: [allreg]
  5956  058B  0020               	movlb	0	; select bank0
  5957  058C  0855               	movf	RTXVisDec@val,w
  5958  058D  00C7               	movwf	?_ftoa
  5959  058E  0856               	movf	RTXVisDec@val+1,w
  5960  058F  00C8               	movwf	?_ftoa+1
  5961  0590  0857               	movf	RTXVisDec@val+2,w
  5962  0591  00C9               	movwf	?_ftoa+2
  5963  0592  30B0               	movlw	RTXVisDec@status& (0+255)
  5964  0593  00DA               	movwf	??_RTXVisDec
  5965  0594  085A               	movf	??_RTXVisDec,w
  5966  0595  00CA               	movwf	?_ftoa+3
  5967  0596  318E  26B5  3185   	fcall	_ftoa
  5968  0599  0020               	movlb	0	; select bank0
  5969  059A  00DB               	movwf	??_RTXVisDec+1
  5970  059B  085B               	movf	??_RTXVisDec+1,w
  5971  059C  0021               	movlb	1	; select bank1
  5972  059D  00B5               	movwf	RTXVisDec@p^(0+128)
  5973                           
  5974                           ;RTX.c: 249: isDec=0;
  5975  059E  01B3               	clrf	RTXVisDec@isDec^(0+128)
  5976                           
  5977                           ;RTX.c: 250: for(i=0;i<sizeof(strTmp)/sizeof(char);i++)
  5978  059F  01B7               	clrf	RTXVisDec@i^(0+128)
  5979  05A0  3010               	movlw	16
  5980  05A1  0237               	subwf	RTXVisDec@i^(0+128),w
  5981  05A2  1803               	btfsc	3,0
  5982  05A3  2E03               	goto	l5060
  5983  05A4                     l5040:	
  5984                           
  5985                           ;RTX.c: 251: {
  5986                           ;RTX.c: 253: if((*(p+i))=='.')
  5987  05A4  0837               	movf	RTXVisDec@i^(0+128),w
  5988  05A5  0735               	addwf	RTXVisDec@p^(0+128),w
  5989  05A6  0020               	movlb	0	; select bank0
  5990  05A7  00DA               	movwf	??_RTXVisDec
  5991  05A8  085A               	movf	??_RTXVisDec,w
  5992  05A9  0086               	movwf	6
  5993  05AA  3001               	movlw	1	; select bank2/3
  5994  05AB  0087               	movwf	7
  5995  05AC  0801               	movf	1,w
  5996  05AD  3A2E               	xorlw	46
  5997  05AE  1D03               	skipz
  5998  05AF  2DB9               	goto	l499
  5999                           
  6000                           ;RTX.c: 254: {
  6001                           ;RTX.c: 255: isDec=1;
  6002  05B0  0021               	movlb	1	; select bank1
  6003  05B1  01B3               	clrf	RTXVisDec@isDec^(0+128)
  6004  05B2  0AB3               	incf	RTXVisDec@isDec^(0+128),f
  6005                           
  6006                           ;RTX.c: 256: posDec=i;
  6007  05B3  0837               	movf	RTXVisDec@i^(0+128),w
  6008  05B4  0020               	movlb	0	; select bank0
  6009  05B5  00DA               	movwf	??_RTXVisDec
  6010  05B6  085A               	movf	??_RTXVisDec,w
  6011  05B7  0021               	movlb	1	; select bank1
  6012  05B8  00B2               	movwf	RTXVisDec@posDec^(0+128)
  6013  05B9                     l499:	
  6014                           
  6015                           ;RTX.c: 257: }
  6016                           ;RTX.c: 259: if(isDec)
  6017  05B9  0021               	movlb	1	; select bank1
  6018  05BA  0833               	movf	RTXVisDec@isDec^(0+128),w
  6019  05BB  1903               	btfsc	3,2
  6020  05BC  2DDB               	goto	l5050
  6021                           
  6022                           ;RTX.c: 260: {
  6023                           ;RTX.c: 261: if((i-posDec)>2)
  6024  05BD  0832               	movf	RTXVisDec@posDec^(0+128),w
  6025  05BE  0020               	movlb	0	; select bank0
  6026  05BF  00DA               	movwf	??_RTXVisDec
  6027  05C0  01DB               	clrf	??_RTXVisDec+1
  6028  05C1  09DA               	comf	??_RTXVisDec,f
  6029  05C2  09DB               	comf	??_RTXVisDec+1,f
  6030  05C3  0ADA               	incf	??_RTXVisDec,f
  6031  05C4  1903               	skipnz
  6032  05C5  0ADB               	incf	??_RTXVisDec+1,f
  6033  05C6  0021               	movlb	1	; select bank1
  6034  05C7  0837               	movf	RTXVisDec@i^(0+128),w
  6035  05C8  0020               	movlb	0	; select bank0
  6036  05C9  075A               	addwf	??_RTXVisDec,w
  6037  05CA  00DC               	movwf	??_RTXVisDec+2
  6038  05CB  085B               	movf	??_RTXVisDec+1,w
  6039  05CC  1803               	skipnc
  6040  05CD  0A5B               	incf	??_RTXVisDec+1,w
  6041  05CE  00DD               	movwf	??_RTXVisDec+3
  6042  05CF  085D               	movf	??_RTXVisDec+3,w
  6043  05D0  3A80               	xorlw	128
  6044  05D1  00FF               	movwf	127
  6045  05D2  3080               	movlw	128
  6046  05D3  027F               	subwf	127,w
  6047  05D4  1D03               	skipz
  6048  05D5  2DD8               	goto	u5315
  6049  05D6  3003               	movlw	3
  6050  05D7  025C               	subwf	??_RTXVisDec+2,w
  6051  05D8                     u5315:	
  6052  05D8  1803               	btfsc	3,0
  6053  05D9  2E03               	goto	l5060
  6054                           
  6055                           ;RTX.c: 262: break;
  6056  05DA  0021               	movlb	1	; select bank1
  6057  05DB                     l5050:	
  6058                           
  6059                           ;RTX.c: 263: }
  6060                           ;RTX.c: 265: if((*(p+i))==0x00)
  6061  05DB  0021               	movlb	1	; select bank1
  6062  05DC  0837               	movf	RTXVisDec@i^(0+128),w
  6063  05DD  0735               	addwf	RTXVisDec@p^(0+128),w
  6064  05DE  0020               	movlb	0	; select bank0
  6065  05DF  00DA               	movwf	??_RTXVisDec
  6066  05E0  085A               	movf	??_RTXVisDec,w
  6067  05E1  0086               	movwf	6
  6068  05E2  3001               	movlw	1	; select bank2/3
  6069  05E3  0087               	movwf	7
  6070  05E4  0881               	movf	1,f
  6071  05E5  1903               	btfsc	3,2
  6072  05E6  2E03               	goto	l5060
  6073                           
  6074                           ;RTX.c: 268: strTmp[i]=(*(p+i));
  6075                           
  6076                           ;RTX.c: 266: break;
  6077  05E7  0021               	movlb	1	; select bank1
  6078  05E8  0837               	movf	RTXVisDec@i^(0+128),w
  6079  05E9  0735               	addwf	RTXVisDec@p^(0+128),w
  6080  05EA  0020               	movlb	0	; select bank0
  6081  05EB  00DA               	movwf	??_RTXVisDec
  6082  05EC  085A               	movf	??_RTXVisDec,w
  6083  05ED  0086               	movwf	6
  6084  05EE  3001               	movlw	1	; select bank2/3
  6085  05EF  0087               	movwf	7
  6086  05F0  0801               	movf	1,w
  6087  05F1  00DB               	movwf	??_RTXVisDec+1
  6088  05F2  0021               	movlb	1	; select bank1
  6089  05F3  0837               	movf	RTXVisDec@i^(0+128),w
  6090  05F4  3EA0               	addlw	RTXVisDec@strTmp& (0+255)
  6091  05F5  0086               	movwf	6
  6092  05F6  0187               	clrf	7
  6093  05F7  0020               	movlb	0	; select bank0
  6094  05F8  085B               	movf	??_RTXVisDec+1,w
  6095  05F9  0081               	movwf	1
  6096  05FA  3001               	movlw	1
  6097  05FB  00DA               	movwf	??_RTXVisDec
  6098  05FC  085A               	movf	??_RTXVisDec,w
  6099  05FD  0021               	movlb	1	; select bank1
  6100  05FE  07B7               	addwf	RTXVisDec@i^(0+128),f
  6101  05FF  3010               	movlw	16
  6102  0600  0237               	subwf	RTXVisDec@i^(0+128),w
  6103  0601  1C03               	skipc
  6104  0602  2DA4               	goto	l5040
  6105  0603                     l5060:	
  6106                           
  6107                           ;RTX.c: 269: }
  6108                           ;RTX.c: 272: if(i>=maxDigit)
  6109  0603  0020               	movlb	0	; select bank0
  6110  0604  0859               	movf	RTXVisDec@maxDigit,w
  6111  0605  0021               	movlb	1	; select bank1
  6112  0606  0237               	subwf	RTXVisDec@i^(0+128),w
  6113  0607  1C03               	skipc
  6114  0608  2E10               	goto	l5064
  6115                           
  6116                           ;RTX.c: 273: i=maxDigit-1;
  6117  0609  0020               	movlb	0	; select bank0
  6118  060A  0859               	movf	RTXVisDec@maxDigit,w
  6119  060B  3EFF               	addlw	255
  6120  060C  00DA               	movwf	??_RTXVisDec
  6121  060D  085A               	movf	??_RTXVisDec,w
  6122  060E  0021               	movlb	1	; select bank1
  6123  060F  00B7               	movwf	RTXVisDec@i^(0+128)
  6124  0610                     l5064:	
  6125                           
  6126                           ;RTX.c: 276: offset=(maxDigit-i)/2;
  6127  0610  3002               	movlw	2
  6128  0611  00F1               	movwf	?___awdiv
  6129  0612  3000               	movlw	0
  6130  0613  00F2               	movwf	?___awdiv+1
  6131  0614  0837               	movf	RTXVisDec@i^(0+128),w
  6132  0615  0020               	movlb	0	; select bank0
  6133  0616  00DA               	movwf	??_RTXVisDec
  6134  0617  01DB               	clrf	??_RTXVisDec+1
  6135  0618  09DA               	comf	??_RTXVisDec,f
  6136  0619  09DB               	comf	??_RTXVisDec+1,f
  6137  061A  0ADA               	incf	??_RTXVisDec,f
  6138  061B  1903               	skipnz
  6139  061C  0ADB               	incf	??_RTXVisDec+1,f
  6140  061D  0859               	movf	RTXVisDec@maxDigit,w
  6141  061E  075A               	addwf	??_RTXVisDec,w
  6142  061F  00F3               	movwf	?___awdiv+2
  6143  0620  085B               	movf	??_RTXVisDec+1,w
  6144  0621  1803               	skipnc
  6145  0622  0A5B               	incf	??_RTXVisDec+1,w
  6146  0623  00F4               	movwf	?___awdiv+3
  6147  0624  318C  245A  3185   	fcall	___awdiv
  6148  0627  0871               	movf	?___awdiv,w
  6149  0628  0020               	movlb	0	; select bank0
  6150  0629  00DC               	movwf	??_RTXVisDec+2
  6151  062A  085C               	movf	??_RTXVisDec+2,w
  6152  062B  0021               	movlb	1	; select bank1
  6153  062C  00B4               	movwf	RTXVisDec@offset^(0+128)
  6154                           
  6155                           ;RTX.c: 277: for(j=0;j<i;j++)
  6156  062D  01B6               	clrf	RTXVisDec@j^(0+128)
  6157  062E                     l5072:	
  6158  062E  0837               	movf	RTXVisDec@i^(0+128),w
  6159  062F  0236               	subwf	RTXVisDec@j^(0+128),w
  6160  0630  1803               	btfsc	3,0
  6161  0631  2E4E               	goto	l5074
  6162                           
  6163                           ;RTX.c: 278: (*(buff+j+offset))=strTmp[j];
  6164  0632  0836               	movf	RTXVisDec@j^(0+128),w
  6165  0633  3EA0               	addlw	RTXVisDec@strTmp& (0+255)
  6166  0634  0086               	movwf	6
  6167  0635  0187               	clrf	7
  6168  0636  0801               	movf	1,w
  6169  0637  0020               	movlb	0	; select bank0
  6170  0638  00DA               	movwf	??_RTXVisDec
  6171  0639  0021               	movlb	1	; select bank1
  6172  063A  0834               	movf	RTXVisDec@offset^(0+128),w
  6173  063B  0020               	movlb	0	; select bank0
  6174  063C  0758               	addwf	RTXVisDec@buff,w
  6175  063D  00DB               	movwf	??_RTXVisDec+1
  6176  063E  0021               	movlb	1	; select bank1
  6177  063F  0836               	movf	RTXVisDec@j^(0+128),w
  6178  0640  0020               	movlb	0	; select bank0
  6179  0641  075B               	addwf	??_RTXVisDec+1,w
  6180  0642  00DC               	movwf	??_RTXVisDec+2
  6181  0643  085C               	movf	??_RTXVisDec+2,w
  6182  0644  0086               	movwf	6
  6183  0645  0187               	clrf	7
  6184  0646  085A               	movf	??_RTXVisDec,w
  6185  0647  0081               	movwf	1
  6186  0648  3001               	movlw	1
  6187  0649  00DA               	movwf	??_RTXVisDec
  6188  064A  085A               	movf	??_RTXVisDec,w
  6189  064B  0021               	movlb	1	; select bank1
  6190  064C  07B6               	addwf	RTXVisDec@j^(0+128),f
  6191  064D  2E2E               	goto	l5072
  6192  064E                     l5074:	
  6193                           
  6194                           ;RTX.c: 280: return (j+offset);
  6195  064E  0836               	movf	RTXVisDec@j^(0+128),w
  6196  064F  0734               	addwf	RTXVisDec@offset^(0+128),w
  6197  0650  0008               	return
  6198  0651                     __end_of_RTXVisDec:	
  6199                           
  6200                           	psect	text24
  6201  0C5A                     __ptext24:	
  6202 ;; *************** function ___awdiv *****************
  6203 ;; Defined at:
  6204 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awdiv.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;  divisor         2    1[COMMON] int 
  6207 ;;  dividend        2    3[COMMON] int 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  quotient        2    8[COMMON] int 
  6210 ;;  sign            1    7[COMMON] unsigned char 
  6211 ;;  counter         1    6[COMMON] unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  2    1[COMMON] int 
  6214 ;; Registers used:
  6215 ;;		wreg, status,2, status,0
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6221 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6222 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6223 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;Total ram usage:        9 bytes
  6226 ;; Hardware stack levels used:    1
  6227 ;; Hardware stack levels required when called:    2
  6228 ;; This function calls:
  6229 ;;		Nothing
  6230 ;; This function is called by:
  6231 ;;		_RTXVisDec
  6232 ;; This function uses a non-reentrant model
  6233 ;;
  6234                           
  6235                           
  6236                           ;psect for function ___awdiv
  6237  0C5A                     ___awdiv:	
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6241  0C5A  01F7               	clrf	___awdiv@sign
  6242  0C5B  1FF2               	btfss	___awdiv@divisor+1,7
  6243  0C5C  2C64               	goto	l4080
  6244  0C5D  09F1               	comf	___awdiv@divisor,f
  6245  0C5E  09F2               	comf	___awdiv@divisor+1,f
  6246  0C5F  0AF1               	incf	___awdiv@divisor,f
  6247  0C60  1903               	skipnz
  6248  0C61  0AF2               	incf	___awdiv@divisor+1,f
  6249  0C62  01F7               	clrf	___awdiv@sign
  6250  0C63  0AF7               	incf	___awdiv@sign,f
  6251  0C64                     l4080:	
  6252  0C64  1FF4               	btfss	___awdiv@dividend+1,7
  6253  0C65  2C6F               	goto	l4086
  6254  0C66  09F3               	comf	___awdiv@dividend,f
  6255  0C67  09F4               	comf	___awdiv@dividend+1,f
  6256  0C68  0AF3               	incf	___awdiv@dividend,f
  6257  0C69  1903               	skipnz
  6258  0C6A  0AF4               	incf	___awdiv@dividend+1,f
  6259  0C6B  3001               	movlw	1
  6260  0C6C  00F5               	movwf	??___awdiv
  6261  0C6D  0875               	movf	??___awdiv,w
  6262  0C6E  06F7               	xorwf	___awdiv@sign,f
  6263  0C6F                     l4086:	
  6264  0C6F  01F8               	clrf	___awdiv@quotient
  6265  0C70  01F9               	clrf	___awdiv@quotient+1
  6266  0C71  0872               	movf	___awdiv@divisor+1,w
  6267  0C72  0471               	iorwf	___awdiv@divisor,w
  6268  0C73  1903               	skipnz
  6269  0C74  2C9E               	goto	l4108
  6270  0C75  01F6               	clrf	___awdiv@counter
  6271  0C76  0AF6               	incf	___awdiv@counter,f
  6272  0C77                     l4096:	
  6273  0C77  1BF2               	btfsc	___awdiv@divisor+1,7
  6274  0C78  2C83               	goto	l4098
  6275  0C79  3001               	movlw	1
  6276  0C7A                     u3755:	
  6277  0C7A  35F1               	lslf	___awdiv@divisor,f
  6278  0C7B  0DF2               	rlf	___awdiv@divisor+1,f
  6279  0C7C  0B89               	decfsz	9,f
  6280  0C7D  2C7A               	goto	u3755
  6281  0C7E  3001               	movlw	1
  6282  0C7F  00F5               	movwf	??___awdiv
  6283  0C80  0875               	movf	??___awdiv,w
  6284  0C81  07F6               	addwf	___awdiv@counter,f
  6285  0C82  2C77               	goto	l4096
  6286  0C83                     l4098:	
  6287  0C83  3001               	movlw	1
  6288  0C84                     u3775:	
  6289  0C84  35F8               	lslf	___awdiv@quotient,f
  6290  0C85  0DF9               	rlf	___awdiv@quotient+1,f
  6291  0C86  0B89               	decfsz	9,f
  6292  0C87  2C84               	goto	u3775
  6293  0C88  0872               	movf	___awdiv@divisor+1,w
  6294  0C89  0274               	subwf	___awdiv@dividend+1,w
  6295  0C8A  1D03               	skipz
  6296  0C8B  2C8E               	goto	u3785
  6297  0C8C  0871               	movf	___awdiv@divisor,w
  6298  0C8D  0273               	subwf	___awdiv@dividend,w
  6299  0C8E                     u3785:	
  6300  0C8E  1C03               	skipc
  6301  0C8F  2C95               	goto	l4104
  6302  0C90  0871               	movf	___awdiv@divisor,w
  6303  0C91  02F3               	subwf	___awdiv@dividend,f
  6304  0C92  0872               	movf	___awdiv@divisor+1,w
  6305  0C93  3BF4               	subwfb	___awdiv@dividend+1,f
  6306  0C94  1478               	bsf	___awdiv@quotient,0
  6307  0C95                     l4104:	
  6308  0C95  3001               	movlw	1
  6309  0C96                     u3795:	
  6310  0C96  36F2               	lsrf	___awdiv@divisor+1,f
  6311  0C97  0CF1               	rrf	___awdiv@divisor,f
  6312  0C98  0B89               	decfsz	9,f
  6313  0C99  2C96               	goto	u3795
  6314  0C9A  3001               	movlw	1
  6315  0C9B  02F6               	subwf	___awdiv@counter,f
  6316  0C9C  1D03               	btfss	3,2
  6317  0C9D  2C83               	goto	l4098
  6318  0C9E                     l4108:	
  6319  0C9E  0877               	movf	___awdiv@sign,w
  6320  0C9F  1903               	btfsc	3,2
  6321  0CA0  2CA6               	goto	l4112
  6322  0CA1  09F8               	comf	___awdiv@quotient,f
  6323  0CA2  09F9               	comf	___awdiv@quotient+1,f
  6324  0CA3  0AF8               	incf	___awdiv@quotient,f
  6325  0CA4  1903               	skipnz
  6326  0CA5  0AF9               	incf	___awdiv@quotient+1,f
  6327  0CA6                     l4112:	
  6328  0CA6  0879               	movf	___awdiv@quotient+1,w
  6329  0CA7  01F2               	clrf	?___awdiv+1
  6330  0CA8  07F2               	addwf	?___awdiv+1,f
  6331  0CA9  0878               	movf	___awdiv@quotient,w
  6332  0CAA  01F1               	clrf	?___awdiv
  6333  0CAB  07F1               	addwf	?___awdiv,f
  6334  0CAC  0008               	return
  6335  0CAD                     __end_of___awdiv:	
  6336                           
  6337                           	psect	text25
  6338  0EB5                     __ptext25:	
  6339 ;; *************** function _ftoa *****************
  6340 ;; Defined at:
  6341 ;;		line 7 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftoa.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  f               3   39[BANK0 ] float 
  6344 ;;  status          1   42[BANK0 ] PTR int 
  6345 ;;		 -> RTXVisDec@status(2), 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  l               4   48[BANK0 ] unsigned long 
  6348 ;;  rem             4   44[BANK0 ] unsigned long 
  6349 ;;  cp              1   52[BANK0 ] PTR unsigned char 
  6350 ;;		 -> ftoa@buf(17), 
  6351 ;; Return value:  Size  Location     Type
  6352 ;;                  1    wreg      PTR unsigned char 
  6353 ;; Registers used:
  6354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6355 ;; Tracked objects:
  6356 ;;		On entry : 0/0
  6357 ;;		On exit  : 0/0
  6358 ;;		Unchanged: 0/0
  6359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6360 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;Total ram usage:       14 bytes
  6365 ;; Hardware stack levels used:    1
  6366 ;; Hardware stack levels required when called:    5
  6367 ;; This function calls:
  6368 ;;		_sprintf
  6369 ;;		___ftge
  6370 ;;		___ftmul
  6371 ;;		___ftneg
  6372 ;;		___ftsub
  6373 ;;		___fttol
  6374 ;;		___lltoft
  6375 ;; This function is called by:
  6376 ;;		_RTXVisDec
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           
  6381                           ;psect for function _ftoa
  6382  0EB5                     _ftoa:	
  6383                           
  6384                           ;incstack = 0
  6385                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6386  0EB5  302C               	movlw	ftoa@buf& (0+255)
  6387  0EB6  0020               	movlb	0	; select bank0
  6388  0EB7  00CB               	movwf	??_ftoa
  6389  0EB8  084B               	movf	??_ftoa,w
  6390  0EB9  00D4               	movwf	ftoa@cp
  6391  0EBA  0847               	movf	ftoa@f,w
  6392  0EBB  00F1               	movwf	?___ftge
  6393  0EBC  0848               	movf	ftoa@f+1,w
  6394  0EBD  00F2               	movwf	?___ftge+1
  6395  0EBE  0849               	movf	ftoa@f+2,w
  6396  0EBF  00F3               	movwf	?___ftge+2
  6397  0EC0  3000               	movlw	0
  6398  0EC1  00F4               	movwf	?___ftge+3
  6399  0EC2  3000               	movlw	0
  6400  0EC3  00F5               	movwf	?___ftge+4
  6401  0EC4  3000               	movlw	0
  6402  0EC5  00F6               	movwf	?___ftge+5
  6403  0EC6  318A  2277  318E   	fcall	___ftge
  6404  0EC9  1803               	btfsc	3,0
  6405  0ECA  2EE8               	goto	l5088
  6406  0ECB  302D               	movlw	45
  6407  0ECC  0020               	movlb	0	; select bank0
  6408  0ECD  00CB               	movwf	??_ftoa
  6409  0ECE  0854               	movf	ftoa@cp,w
  6410  0ECF  0086               	movwf	6
  6411  0ED0  3001               	movlw	1	; select bank2/3
  6412  0ED1  0087               	movwf	7
  6413  0ED2  084B               	movf	??_ftoa,w
  6414  0ED3  0081               	movwf	1
  6415  0ED4  3001               	movlw	1
  6416  0ED5  00CB               	movwf	??_ftoa
  6417  0ED6  084B               	movf	??_ftoa,w
  6418  0ED7  07D4               	addwf	ftoa@cp,f
  6419  0ED8  0847               	movf	ftoa@f,w
  6420  0ED9  00F1               	movwf	?___ftneg
  6421  0EDA  0848               	movf	ftoa@f+1,w
  6422  0EDB  00F2               	movwf	?___ftneg+1
  6423  0EDC  0849               	movf	ftoa@f+2,w
  6424  0EDD  00F3               	movwf	?___ftneg+2
  6425  0EDE  3194  24B6  318E   	fcall	___ftneg
  6426  0EE1  0871               	movf	?___ftneg,w
  6427  0EE2  0020               	movlb	0	; select bank0
  6428  0EE3  00C7               	movwf	ftoa@f
  6429  0EE4  0872               	movf	?___ftneg+1,w
  6430  0EE5  00C8               	movwf	ftoa@f+1
  6431  0EE6  0873               	movf	?___ftneg+2,w
  6432  0EE7  00C9               	movwf	ftoa@f+2
  6433  0EE8                     l5088:	
  6434  0EE8  0020               	movlb	0	; select bank0
  6435  0EE9  0847               	movf	ftoa@f,w
  6436  0EEA  00B0               	movwf	?___fttol
  6437  0EEB  0848               	movf	ftoa@f+1,w
  6438  0EEC  00B1               	movwf	?___fttol+1
  6439  0EED  0849               	movf	ftoa@f+2,w
  6440  0EEE  00B2               	movwf	?___fttol+2
  6441  0EEF  318E  262E  318E   	fcall	___fttol
  6442  0EF2  0020               	movlb	0	; select bank0
  6443  0EF3  0833               	movf	?___fttol+3,w
  6444  0EF4  00D3               	movwf	ftoa@l+3
  6445  0EF5  0832               	movf	?___fttol+2,w
  6446  0EF6  00D2               	movwf	ftoa@l+2
  6447  0EF7  0831               	movf	?___fttol+1,w
  6448  0EF8  00D1               	movwf	ftoa@l+1
  6449  0EF9  0830               	movf	?___fttol,w
  6450  0EFA  00D0               	movwf	ftoa@l
  6451  0EFB  0853               	movf	ftoa@l+3,w
  6452  0EFC  00A3               	movwf	?___lltoft+3
  6453  0EFD  0852               	movf	ftoa@l+2,w
  6454  0EFE  00A2               	movwf	?___lltoft+2
  6455  0EFF  0851               	movf	ftoa@l+1,w
  6456  0F00  00A1               	movwf	?___lltoft+1
  6457  0F01  0850               	movf	ftoa@l,w
  6458  0F02  00A0               	movwf	?___lltoft
  6459  0F03  3188  20CA  318E   	fcall	___lltoft
  6460  0F06  0020               	movlb	0	; select bank0
  6461  0F07  0820               	movf	?___lltoft,w
  6462  0F08  00AA               	movwf	?___ftsub
  6463  0F09  0821               	movf	?___lltoft+1,w
  6464  0F0A  00AB               	movwf	?___ftsub+1
  6465  0F0B  0822               	movf	?___lltoft+2,w
  6466  0F0C  00AC               	movwf	?___ftsub+2
  6467  0F0D  0847               	movf	ftoa@f,w
  6468  0F0E  00AD               	movwf	?___ftsub+3
  6469  0F0F  0848               	movf	ftoa@f+1,w
  6470  0F10  00AE               	movwf	?___ftsub+4
  6471  0F11  0849               	movf	ftoa@f+2,w
  6472  0F12  00AF               	movwf	?___ftsub+5
  6473  0F13  3196  2603  318E   	fcall	___ftsub
  6474  0F16  0020               	movlb	0	; select bank0
  6475  0F17  082A               	movf	?___ftsub,w
  6476  0F18  00C7               	movwf	ftoa@f
  6477  0F19  082B               	movf	?___ftsub+1,w
  6478  0F1A  00C8               	movwf	ftoa@f+1
  6479  0F1B  082C               	movf	?___ftsub+2,w
  6480  0F1C  00C9               	movwf	ftoa@f+2
  6481  0F1D  0847               	movf	ftoa@f,w
  6482  0F1E  00A3               	movwf	?___ftmul+3
  6483  0F1F  0848               	movf	ftoa@f+1,w
  6484  0F20  00A4               	movwf	?___ftmul+4
  6485  0F21  0849               	movf	ftoa@f+2,w
  6486  0F22  00A5               	movwf	?___ftmul+5
  6487  0F23  3024               	movlw	36
  6488  0F24  00A0               	movwf	?___ftmul
  6489  0F25  3074               	movlw	116
  6490  0F26  00A1               	movwf	?___ftmul+1
  6491  0F27  3049               	movlw	73
  6492  0F28  00A2               	movwf	?___ftmul+2
  6493  0F29  3187  2710  318E   	fcall	___ftmul
  6494  0F2C  0020               	movlb	0	; select bank0
  6495  0F2D  0820               	movf	?___ftmul,w
  6496  0F2E  00B0               	movwf	?___fttol
  6497  0F2F  0821               	movf	?___ftmul+1,w
  6498  0F30  00B1               	movwf	?___fttol+1
  6499  0F31  0822               	movf	?___ftmul+2,w
  6500  0F32  00B2               	movwf	?___fttol+2
  6501  0F33  318E  262E  318E   	fcall	___fttol
  6502  0F36  0020               	movlb	0	; select bank0
  6503  0F37  0833               	movf	?___fttol+3,w
  6504  0F38  00CF               	movwf	ftoa@rem+3
  6505  0F39  0832               	movf	?___fttol+2,w
  6506  0F3A  00CE               	movwf	ftoa@rem+2
  6507  0F3B  0831               	movf	?___fttol+1,w
  6508  0F3C  00CD               	movwf	ftoa@rem+1
  6509  0F3D  0830               	movf	?___fttol,w
  6510  0F3E  00CC               	movwf	ftoa@rem
  6511  0F3F  302E               	movlw	(STR_1| (0+32768))& (0+255)
  6512  0F40  00CB               	movwf	??_ftoa
  6513  0F41  084B               	movf	??_ftoa,w
  6514  0F42  00AD               	movwf	?_sprintf
  6515  0F43  0853               	movf	ftoa@l+3,w
  6516  0F44  00B1               	movwf	?_sprintf+4
  6517  0F45  0852               	movf	ftoa@l+2,w
  6518  0F46  00B0               	movwf	?_sprintf+3
  6519  0F47  0851               	movf	ftoa@l+1,w
  6520  0F48  00AF               	movwf	?_sprintf+2
  6521  0F49  0850               	movf	ftoa@l,w
  6522  0F4A  00AE               	movwf	?_sprintf+1
  6523  0F4B  084F               	movf	ftoa@rem+3,w
  6524  0F4C  00B5               	movwf	?_sprintf+8
  6525  0F4D  084E               	movf	ftoa@rem+2,w
  6526  0F4E  00B4               	movwf	?_sprintf+7
  6527  0F4F  084D               	movf	ftoa@rem+1,w
  6528  0F50  00B3               	movwf	?_sprintf+6
  6529  0F51  084C               	movf	ftoa@rem,w
  6530  0F52  00B2               	movwf	?_sprintf+5
  6531  0F53  0854               	movf	ftoa@cp,w
  6532  0F54  3182  22B9         	fcall	_sprintf
  6533  0F56  302C               	movlw	ftoa@buf& (0+255)
  6534  0F57  0008               	return
  6535  0F58                     __end_of_ftoa:	
  6536                           
  6537                           	psect	text26
  6538  08CA                     __ptext26:	
  6539 ;; *************** function ___lltoft *****************
  6540 ;; Defined at:
  6541 ;;		line 36 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lltoft.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  c               4    0[BANK0 ] unsigned long 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  exp             1   10[COMMON] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  3    0[BANK0 ] float 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6555 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;Total ram usage:        6 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    3
  6562 ;; This function calls:
  6563 ;;		___ftpack
  6564 ;; This function is called by:
  6565 ;;		_ftoa
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function ___lltoft
  6571  08CA                     ___lltoft:	
  6572                           
  6573                           ;incstack = 0
  6574                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6575  08CA  308E               	movlw	142
  6576  08CB  00F9               	movwf	??___lltoft
  6577  08CC  0879               	movf	??___lltoft,w
  6578  08CD  00FA               	movwf	___lltoft@exp
  6579  08CE                     l5400:	
  6580  08CE  30FF               	movlw	255
  6581  08CF  0020               	movlb	0	; select bank0
  6582  08D0  0523               	andwf	___lltoft@c+3,w
  6583  08D1  1903               	btfsc	3,2
  6584  08D2  28E0               	goto	l5402
  6585  08D3  3001               	movlw	1
  6586  08D4                     u5985:	
  6587  08D4  0020               	movlb	0	; select bank0
  6588  08D5  36A3               	lsrf	___lltoft@c+3,f
  6589  08D6  0CA2               	rrf	___lltoft@c+2,f
  6590  08D7  0CA1               	rrf	___lltoft@c+1,f
  6591  08D8  0CA0               	rrf	___lltoft@c,f
  6592  08D9  0B89               	decfsz	9,f
  6593  08DA  28D4               	goto	u5985
  6594  08DB  3001               	movlw	1
  6595  08DC  00F9               	movwf	??___lltoft
  6596  08DD  0879               	movf	??___lltoft,w
  6597  08DE  07FA               	addwf	___lltoft@exp,f
  6598  08DF  28CE               	goto	l5400
  6599  08E0                     l5402:	
  6600  08E0  0820               	movf	___lltoft@c,w
  6601  08E1  00F1               	movwf	?___ftpack
  6602  08E2  0821               	movf	___lltoft@c+1,w
  6603  08E3  00F2               	movwf	?___ftpack+1
  6604  08E4  0822               	movf	___lltoft@c+2,w
  6605  08E5  00F3               	movwf	?___ftpack+2
  6606  08E6  087A               	movf	___lltoft@exp,w
  6607  08E7  00F9               	movwf	??___lltoft
  6608  08E8  0879               	movf	??___lltoft,w
  6609  08E9  00F4               	movwf	?___ftpack+3
  6610  08EA  01F5               	clrf	?___ftpack+4
  6611  08EB  318D  255A         	fcall	___ftpack
  6612  08ED  0871               	movf	?___ftpack,w
  6613  08EE  0020               	movlb	0	; select bank0
  6614  08EF  00A0               	movwf	?___lltoft
  6615  08F0  0872               	movf	?___ftpack+1,w
  6616  08F1  00A1               	movwf	?___lltoft+1
  6617  08F2  0873               	movf	?___ftpack+2,w
  6618  08F3  00A2               	movwf	?___lltoft+2
  6619  08F4  0008               	return
  6620  08F5                     __end_of___lltoft:	
  6621                           
  6622                           	psect	text27
  6623  0E2E                     __ptext27:	
  6624 ;; *************** function ___fttol *****************
  6625 ;; Defined at:
  6626 ;;		line 45 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\fttol.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  f1              3   16[BANK0 ] float 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  lval            4   25[BANK0 ] unsigned long 
  6631 ;;  exp1            1   29[BANK0 ] unsigned char 
  6632 ;;  sign1           1   24[BANK0 ] unsigned char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  4   16[BANK0 ] long 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6642 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6645 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;Total ram usage:       14 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    2
  6649 ;; This function calls:
  6650 ;;		Nothing
  6651 ;; This function is called by:
  6652 ;;		_ftoa
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           
  6657                           ;psect for function ___fttol
  6658  0E2E                     ___fttol:	
  6659                           
  6660                           ;incstack = 0
  6661                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6662  0E2E  0020               	movlb	0	; select bank0
  6663  0E2F  0830               	movf	___fttol@f1,w
  6664  0E30  00B4               	movwf	??___fttol
  6665  0E31  0831               	movf	___fttol@f1+1,w
  6666  0E32  00B5               	movwf	??___fttol+1
  6667  0E33  0832               	movf	___fttol@f1+2,w
  6668  0E34  00B6               	movwf	??___fttol+2
  6669  0E35  1003               	clrc
  6670  0E36  0D35               	rlf	??___fttol+1,w
  6671  0E37  0D36               	rlf	??___fttol+2,w
  6672  0E38  00B7               	movwf	??___fttol+3
  6673  0E39  0837               	movf	??___fttol+3,w
  6674  0E3A  00BD               	movwf	___fttol@exp1
  6675  0E3B  08BD               	movf	___fttol@exp1,f
  6676  0E3C  1D03               	skipz
  6677  0E3D  2E47               	goto	l4278
  6678  0E3E  3000               	movlw	0
  6679  0E3F  00B3               	movwf	?___fttol+3
  6680  0E40  3000               	movlw	0
  6681  0E41  00B2               	movwf	?___fttol+2
  6682  0E42  3000               	movlw	0
  6683  0E43  00B1               	movwf	?___fttol+1
  6684  0E44  3000               	movlw	0
  6685  0E45  00B0               	movwf	?___fttol
  6686  0E46  0008               	return
  6687  0E47                     l4278:	
  6688  0E47  0830               	movf	___fttol@f1,w
  6689  0E48  00B4               	movwf	??___fttol
  6690  0E49  0831               	movf	___fttol@f1+1,w
  6691  0E4A  00B5               	movwf	??___fttol+1
  6692  0E4B  0832               	movf	___fttol@f1+2,w
  6693  0E4C  00B6               	movwf	??___fttol+2
  6694  0E4D  3017               	movlw	23
  6695  0E4E                     u4225:	
  6696  0E4E  36B6               	lsrf	??___fttol+2,f
  6697  0E4F  0CB5               	rrf	??___fttol+1,f
  6698  0E50  0CB4               	rrf	??___fttol,f
  6699  0E51  0B89               	decfsz	9,f
  6700  0E52  2E4E               	goto	u4225
  6701  0E53  0834               	movf	??___fttol,w
  6702  0E54  00B7               	movwf	??___fttol+3
  6703  0E55  0837               	movf	??___fttol+3,w
  6704  0E56  00B8               	movwf	___fttol@sign1
  6705  0E57  17B1               	bsf	___fttol@f1+1,7
  6706  0E58  30FF               	movlw	255
  6707  0E59  05B0               	andwf	___fttol@f1,f
  6708  0E5A  30FF               	movlw	255
  6709  0E5B  05B1               	andwf	___fttol@f1+1,f
  6710  0E5C  3000               	movlw	0
  6711  0E5D  05B2               	andwf	___fttol@f1+2,f
  6712  0E5E  0830               	movf	___fttol@f1,w
  6713  0E5F  00B9               	movwf	___fttol@lval
  6714  0E60  0831               	movf	___fttol@f1+1,w
  6715  0E61  00BA               	movwf	___fttol@lval+1
  6716  0E62  0832               	movf	___fttol@f1+2,w
  6717  0E63  00BB               	movwf	___fttol@lval+2
  6718  0E64  01BC               	clrf	___fttol@lval+3
  6719  0E65  308E               	movlw	142
  6720  0E66  02BD               	subwf	___fttol@exp1,f
  6721  0E67  1FBD               	btfss	___fttol@exp1,7
  6722  0E68  2E85               	goto	l4298
  6723  0E69  083D               	movf	___fttol@exp1,w
  6724  0E6A  3A80               	xorlw	128
  6725  0E6B  3E8F               	addlw	143
  6726  0E6C  1803               	skipnc
  6727  0E6D  2E77               	goto	l4296
  6728  0E6E  3000               	movlw	0
  6729  0E6F  00B3               	movwf	?___fttol+3
  6730  0E70  3000               	movlw	0
  6731  0E71  00B2               	movwf	?___fttol+2
  6732  0E72  3000               	movlw	0
  6733  0E73  00B1               	movwf	?___fttol+1
  6734  0E74  3000               	movlw	0
  6735  0E75  00B0               	movwf	?___fttol
  6736  0E76  0008               	return
  6737  0E77                     l4296:	
  6738  0E77  3001               	movlw	1
  6739  0E78                     u4255:	
  6740  0E78  36BC               	lsrf	___fttol@lval+3,f
  6741  0E79  0CBB               	rrf	___fttol@lval+2,f
  6742  0E7A  0CBA               	rrf	___fttol@lval+1,f
  6743  0E7B  0CB9               	rrf	___fttol@lval,f
  6744  0E7C  0B89               	decfsz	9,f
  6745  0E7D  2E78               	goto	u4255
  6746  0E7E  3001               	movlw	1
  6747  0E7F  00B4               	movwf	??___fttol
  6748  0E80  0834               	movf	??___fttol,w
  6749  0E81  07BD               	addwf	___fttol@exp1,f
  6750  0E82  1903               	btfsc	3,2
  6751  0E83  2E9E               	goto	l4308
  6752  0E84  2E77               	goto	l4296
  6753  0E85                     l4298:	
  6754  0E85  3018               	movlw	24
  6755  0E86  023D               	subwf	___fttol@exp1,w
  6756  0E87  1C03               	skipc
  6757  0E88  2E9B               	goto	l4306
  6758  0E89  3000               	movlw	0
  6759  0E8A  00B3               	movwf	?___fttol+3
  6760  0E8B  3000               	movlw	0
  6761  0E8C  00B2               	movwf	?___fttol+2
  6762  0E8D  3000               	movlw	0
  6763  0E8E  00B1               	movwf	?___fttol+1
  6764  0E8F  3000               	movlw	0
  6765  0E90  00B0               	movwf	?___fttol
  6766  0E91  0008               	return
  6767  0E92                     l4304:	
  6768  0E92  3001               	movlw	1
  6769  0E93                     u4285:	
  6770  0E93  35B9               	lslf	___fttol@lval,f
  6771  0E94  0DBA               	rlf	___fttol@lval+1,f
  6772  0E95  0DBB               	rlf	___fttol@lval+2,f
  6773  0E96  0DBC               	rlf	___fttol@lval+3,f
  6774  0E97  0B89               	decfsz	9,f
  6775  0E98  2E93               	goto	u4285
  6776  0E99  3001               	movlw	1
  6777  0E9A  02BD               	subwf	___fttol@exp1,f
  6778  0E9B                     l4306:	
  6779  0E9B  08BD               	movf	___fttol@exp1,f
  6780  0E9C  1D03               	skipz
  6781  0E9D  2E92               	goto	l4304
  6782  0E9E                     l4308:	
  6783  0E9E  0838               	movf	___fttol@sign1,w
  6784  0E9F  1903               	btfsc	3,2
  6785  0EA0  2EAC               	goto	l4312
  6786  0EA1  09B9               	comf	___fttol@lval,f
  6787  0EA2  09BA               	comf	___fttol@lval+1,f
  6788  0EA3  09BB               	comf	___fttol@lval+2,f
  6789  0EA4  09BC               	comf	___fttol@lval+3,f
  6790  0EA5  0AB9               	incf	___fttol@lval,f
  6791  0EA6  1903               	skipnz
  6792  0EA7  0ABA               	incf	___fttol@lval+1,f
  6793  0EA8  1903               	skipnz
  6794  0EA9  0ABB               	incf	___fttol@lval+2,f
  6795  0EAA  1903               	skipnz
  6796  0EAB  0ABC               	incf	___fttol@lval+3,f
  6797  0EAC                     l4312:	
  6798  0EAC  083C               	movf	___fttol@lval+3,w
  6799  0EAD  00B3               	movwf	?___fttol+3
  6800  0EAE  083B               	movf	___fttol@lval+2,w
  6801  0EAF  00B2               	movwf	?___fttol+2
  6802  0EB0  083A               	movf	___fttol@lval+1,w
  6803  0EB1  00B1               	movwf	?___fttol+1
  6804  0EB2  0839               	movf	___fttol@lval,w
  6805  0EB3  00B0               	movwf	?___fttol
  6806  0EB4  0008               	return
  6807  0EB5                     __end_of___fttol:	
  6808                           
  6809                           	psect	text28
  6810  1603                     __ptext28:	
  6811 ;; *************** function ___ftsub *****************
  6812 ;; Defined at:
  6813 ;;		line 17 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftsub.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;  f2              3   10[BANK0 ] float 
  6816 ;;  f1              3   13[BANK0 ] float 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  3   10[BANK0 ] float 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0, pclath, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6828 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6831 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;Total ram usage:        6 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    4
  6835 ;; This function calls:
  6836 ;;		___ftadd
  6837 ;; This function is called by:
  6838 ;;		_ftoa
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           
  6843                           ;psect for function ___ftsub
  6844  1603                     ___ftsub:	
  6845                           
  6846                           ;incstack = 0
  6847                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6848  1603  3080               	movlw	128
  6849  1604  0020               	movlb	0	; select bank0
  6850  1605  06AC               	xorwf	___ftsub@f2+2,f
  6851  1606  082D               	movf	___ftsub@f1,w
  6852  1607  00A0               	movwf	?___ftadd
  6853  1608  082E               	movf	___ftsub@f1+1,w
  6854  1609  00A1               	movwf	?___ftadd+1
  6855  160A  082F               	movf	___ftsub@f1+2,w
  6856  160B  00A2               	movwf	?___ftadd+2
  6857  160C  082A               	movf	___ftsub@f2,w
  6858  160D  00A3               	movwf	?___ftadd+3
  6859  160E  082B               	movf	___ftsub@f2+1,w
  6860  160F  00A4               	movwf	?___ftadd+4
  6861  1610  082C               	movf	___ftsub@f2+2,w
  6862  1611  00A5               	movwf	?___ftadd+5
  6863  1612  3184  2495         	fcall	___ftadd
  6864  1614  0020               	movlb	0	; select bank0
  6865  1615  0820               	movf	?___ftadd,w
  6866  1616  00AA               	movwf	?___ftsub
  6867  1617  0821               	movf	?___ftadd+1,w
  6868  1618  00AB               	movwf	?___ftsub+1
  6869  1619  0822               	movf	?___ftadd+2,w
  6870  161A  00AC               	movwf	?___ftsub+2
  6871  161B  0008               	return
  6872  161C                     __end_of___ftsub:	
  6873                           
  6874                           	psect	text29
  6875  0495                     __ptext29:	
  6876 ;; *************** function ___ftadd *****************
  6877 ;; Defined at:
  6878 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  f1              3    0[BANK0 ] float 
  6881 ;;  f2              3    3[BANK0 ] float 
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  exp1            1   11[COMMON] unsigned char 
  6884 ;;  exp2            1   10[COMMON] unsigned char 
  6885 ;;  sign            1    9[COMMON] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  3    0[BANK0 ] float 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, pclath, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6895 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;Total ram usage:       13 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    3
  6902 ;; This function calls:
  6903 ;;		___ftpack
  6904 ;; This function is called by:
  6905 ;;		___ftsub
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function ___ftadd
  6911  0495                     ___ftadd:	
  6912                           
  6913                           ;incstack = 0
  6914                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  6915  0495  0020               	movlb	0	; select bank0
  6916  0496  0820               	movf	___ftadd@f1,w
  6917  0497  00A6               	movwf	??___ftadd
  6918  0498  0821               	movf	___ftadd@f1+1,w
  6919  0499  00A7               	movwf	??___ftadd+1
  6920  049A  0822               	movf	___ftadd@f1+2,w
  6921  049B  00A8               	movwf	??___ftadd+2
  6922  049C  1003               	clrc
  6923  049D  0D27               	rlf	??___ftadd+1,w
  6924  049E  0D28               	rlf	??___ftadd+2,w
  6925  049F  00A9               	movwf	??___ftadd+3
  6926  04A0  0829               	movf	??___ftadd+3,w
  6927  04A1  00FB               	movwf	___ftadd@exp1
  6928  04A2  0823               	movf	___ftadd@f2,w
  6929  04A3  00A6               	movwf	??___ftadd
  6930  04A4  0824               	movf	___ftadd@f2+1,w
  6931  04A5  00A7               	movwf	??___ftadd+1
  6932  04A6  0825               	movf	___ftadd@f2+2,w
  6933  04A7  00A8               	movwf	??___ftadd+2
  6934  04A8  1003               	clrc
  6935  04A9  0D27               	rlf	??___ftadd+1,w
  6936  04AA  0D28               	rlf	??___ftadd+2,w
  6937  04AB  00A9               	movwf	??___ftadd+3
  6938  04AC  0829               	movf	??___ftadd+3,w
  6939  04AD  00FA               	movwf	___ftadd@exp2
  6940  04AE  087B               	movf	___ftadd@exp1,w
  6941  04AF  1903               	btfsc	3,2
  6942  04B0  2CBD               	goto	l5246
  6943  04B1  087A               	movf	___ftadd@exp2,w
  6944  04B2  027B               	subwf	___ftadd@exp1,w
  6945  04B3  1803               	skipnc
  6946  04B4  2CC4               	goto	l5250
  6947  04B5  037B               	decf	___ftadd@exp1,w
  6948  04B6  3AFF               	xorlw	255
  6949  04B7  077A               	addwf	___ftadd@exp2,w
  6950  04B8  00A6               	movwf	??___ftadd
  6951  04B9  3019               	movlw	25
  6952  04BA  0226               	subwf	??___ftadd,w
  6953  04BB  1C03               	skipc
  6954  04BC  2CC4               	goto	l5250
  6955  04BD                     l5246:	
  6956  04BD  0823               	movf	___ftadd@f2,w
  6957  04BE  00A0               	movwf	?___ftadd
  6958  04BF  0824               	movf	___ftadd@f2+1,w
  6959  04C0  00A1               	movwf	?___ftadd+1
  6960  04C1  0825               	movf	___ftadd@f2+2,w
  6961  04C2  00A2               	movwf	?___ftadd+2
  6962  04C3  0008               	return
  6963  04C4                     l5250:	
  6964  04C4  087A               	movf	___ftadd@exp2,w
  6965  04C5  1903               	btfsc	3,2
  6966  04C6  0008               	return
  6967  04C7  087B               	movf	___ftadd@exp1,w
  6968  04C8  027A               	subwf	___ftadd@exp2,w
  6969  04C9  1803               	skipnc
  6970  04CA  2CD3               	goto	l5256
  6971  04CB  037A               	decf	___ftadd@exp2,w
  6972  04CC  3AFF               	xorlw	255
  6973  04CD  077B               	addwf	___ftadd@exp1,w
  6974  04CE  00A6               	movwf	??___ftadd
  6975  04CF  3019               	movlw	25
  6976  04D0  0226               	subwf	??___ftadd,w
  6977  04D1  1803               	btfsc	3,0
  6978  04D2  0008               	return
  6979  04D3                     l5256:	
  6980  04D3  3006               	movlw	6
  6981  04D4  00A6               	movwf	??___ftadd
  6982  04D5  0826               	movf	??___ftadd,w
  6983  04D6  00F9               	movwf	___ftadd@sign
  6984  04D7  1BA2               	btfsc	___ftadd@f1+2,7
  6985  04D8  17F9               	bsf	___ftadd@sign,7
  6986  04D9  1BA5               	btfsc	___ftadd@f2+2,7
  6987  04DA  1779               	bsf	___ftadd@sign,6
  6988  04DB  17A1               	bsf	___ftadd@f1+1,7
  6989  04DC  30FF               	movlw	255
  6990  04DD  05A0               	andwf	___ftadd@f1,f
  6991  04DE  30FF               	movlw	255
  6992  04DF  05A1               	andwf	___ftadd@f1+1,f
  6993  04E0  3000               	movlw	0
  6994  04E1  05A2               	andwf	___ftadd@f1+2,f
  6995  04E2  17A4               	bsf	___ftadd@f2+1,7
  6996  04E3  30FF               	movlw	255
  6997  04E4  05A3               	andwf	___ftadd@f2,f
  6998  04E5  30FF               	movlw	255
  6999  04E6  05A4               	andwf	___ftadd@f2+1,f
  7000  04E7  3000               	movlw	0
  7001  04E8  05A5               	andwf	___ftadd@f2+2,f
  7002  04E9  087A               	movf	___ftadd@exp2,w
  7003  04EA  027B               	subwf	___ftadd@exp1,w
  7004  04EB  1803               	skipnc
  7005  04EC  2D0F               	goto	l5278
  7006  04ED                     l5268:	
  7007  04ED  3001               	movlw	1
  7008  04EE                     u5695:	
  7009  04EE  35A3               	lslf	___ftadd@f2,f
  7010  04EF  0DA4               	rlf	___ftadd@f2+1,f
  7011  04F0  0DA5               	rlf	___ftadd@f2+2,f
  7012  04F1  0B89               	decfsz	9,f
  7013  04F2  2CEE               	goto	u5695
  7014  04F3  3001               	movlw	1
  7015  04F4  02FA               	subwf	___ftadd@exp2,f
  7016  04F5  087A               	movf	___ftadd@exp2,w
  7017  04F6  067B               	xorwf	___ftadd@exp1,w
  7018  04F7  1903               	skipnz
  7019  04F8  2D0A               	goto	l5276
  7020  04F9  3001               	movlw	1
  7021  04FA  02F9               	subwf	___ftadd@sign,f
  7022  04FB  0879               	movf	___ftadd@sign,w
  7023  04FC  3907               	andlw	7
  7024  04FD  1903               	btfsc	3,2
  7025  04FE  2D0A               	goto	l5276
  7026  04FF  2CED               	goto	l5268
  7027  0500                     l5274:	
  7028  0500  3001               	movlw	1
  7029  0501                     u5725:	
  7030  0501  36A2               	lsrf	___ftadd@f1+2,f
  7031  0502  0CA1               	rrf	___ftadd@f1+1,f
  7032  0503  0CA0               	rrf	___ftadd@f1,f
  7033  0504  0B89               	decfsz	9,f
  7034  0505  2D01               	goto	u5725
  7035  0506  3001               	movlw	1
  7036  0507  00A6               	movwf	??___ftadd
  7037  0508  0826               	movf	??___ftadd,w
  7038  0509  07FB               	addwf	___ftadd@exp1,f
  7039  050A                     l5276:	
  7040  050A  087B               	movf	___ftadd@exp1,w
  7041  050B  067A               	xorwf	___ftadd@exp2,w
  7042  050C  1903               	btfsc	3,2
  7043  050D  2D34               	goto	l926
  7044  050E  2D00               	goto	l5274
  7045  050F                     l5278:	
  7046  050F  087B               	movf	___ftadd@exp1,w
  7047  0510  027A               	subwf	___ftadd@exp2,w
  7048  0511  1803               	skipnc
  7049  0512  2D34               	goto	l926
  7050  0513                     l5280:	
  7051  0513  3001               	movlw	1
  7052  0514                     u5755:	
  7053  0514  35A0               	lslf	___ftadd@f1,f
  7054  0515  0DA1               	rlf	___ftadd@f1+1,f
  7055  0516  0DA2               	rlf	___ftadd@f1+2,f
  7056  0517  0B89               	decfsz	9,f
  7057  0518  2D14               	goto	u5755
  7058  0519  3001               	movlw	1
  7059  051A  02FB               	subwf	___ftadd@exp1,f
  7060  051B  087A               	movf	___ftadd@exp2,w
  7061  051C  067B               	xorwf	___ftadd@exp1,w
  7062  051D  1903               	skipnz
  7063  051E  2D30               	goto	l5288
  7064  051F  3001               	movlw	1
  7065  0520  02F9               	subwf	___ftadd@sign,f
  7066  0521  0879               	movf	___ftadd@sign,w
  7067  0522  3907               	andlw	7
  7068  0523  1903               	btfsc	3,2
  7069  0524  2D30               	goto	l5288
  7070  0525  2D13               	goto	l5280
  7071  0526                     l5286:	
  7072  0526  3001               	movlw	1
  7073  0527                     u5785:	
  7074  0527  36A5               	lsrf	___ftadd@f2+2,f
  7075  0528  0CA4               	rrf	___ftadd@f2+1,f
  7076  0529  0CA3               	rrf	___ftadd@f2,f
  7077  052A  0B89               	decfsz	9,f
  7078  052B  2D27               	goto	u5785
  7079  052C  3001               	movlw	1
  7080  052D  00A6               	movwf	??___ftadd
  7081  052E  0826               	movf	??___ftadd,w
  7082  052F  07FA               	addwf	___ftadd@exp2,f
  7083  0530                     l5288:	
  7084  0530  087B               	movf	___ftadd@exp1,w
  7085  0531  067A               	xorwf	___ftadd@exp2,w
  7086  0532  1D03               	skipz
  7087  0533  2D26               	goto	l5286
  7088  0534                     l926:	
  7089  0534  1FF9               	btfss	___ftadd@sign,7
  7090  0535  2D46               	goto	l5292
  7091  0536  30FF               	movlw	255
  7092  0537  06A0               	xorwf	___ftadd@f1,f
  7093  0538  30FF               	movlw	255
  7094  0539  06A1               	xorwf	___ftadd@f1+1,f
  7095  053A  30FF               	movlw	255
  7096  053B  06A2               	xorwf	___ftadd@f1+2,f
  7097  053C  3001               	movlw	1
  7098  053D  07A0               	addwf	___ftadd@f1,f
  7099  053E  3000               	movlw	0
  7100  053F  1803               	skipnc
  7101  0540  3001               	movlw	1
  7102  0541  07A1               	addwf	___ftadd@f1+1,f
  7103  0542  3000               	movlw	0
  7104  0543  1803               	skipnc
  7105  0544  3001               	movlw	1
  7106  0545  07A2               	addwf	___ftadd@f1+2,f
  7107  0546                     l5292:	
  7108  0546  1F79               	btfss	___ftadd@sign,6
  7109  0547  2D58               	goto	l5296
  7110  0548  30FF               	movlw	255
  7111  0549  06A3               	xorwf	___ftadd@f2,f
  7112  054A  30FF               	movlw	255
  7113  054B  06A4               	xorwf	___ftadd@f2+1,f
  7114  054C  30FF               	movlw	255
  7115  054D  06A5               	xorwf	___ftadd@f2+2,f
  7116  054E  3001               	movlw	1
  7117  054F  07A3               	addwf	___ftadd@f2,f
  7118  0550  3000               	movlw	0
  7119  0551  1803               	skipnc
  7120  0552  3001               	movlw	1
  7121  0553  07A4               	addwf	___ftadd@f2+1,f
  7122  0554  3000               	movlw	0
  7123  0555  1803               	skipnc
  7124  0556  3001               	movlw	1
  7125  0557  07A5               	addwf	___ftadd@f2+2,f
  7126  0558                     l5296:	
  7127  0558  01F9               	clrf	___ftadd@sign
  7128  0559  0820               	movf	___ftadd@f1,w
  7129  055A  07A3               	addwf	___ftadd@f2,f
  7130  055B  0821               	movf	___ftadd@f1+1,w
  7131  055C  3DA4               	addwfc	___ftadd@f2+1,f
  7132  055D  0822               	movf	___ftadd@f1+2,w
  7133  055E  3DA5               	addwfc	___ftadd@f2+2,f
  7134  055F  1FA5               	btfss	___ftadd@f2+2,7
  7135  0560  2D73               	goto	l5306
  7136  0561  30FF               	movlw	255
  7137  0562  06A3               	xorwf	___ftadd@f2,f
  7138  0563  30FF               	movlw	255
  7139  0564  06A4               	xorwf	___ftadd@f2+1,f
  7140  0565  30FF               	movlw	255
  7141  0566  06A5               	xorwf	___ftadd@f2+2,f
  7142  0567  3001               	movlw	1
  7143  0568  07A3               	addwf	___ftadd@f2,f
  7144  0569  3000               	movlw	0
  7145  056A  1803               	skipnc
  7146  056B  3001               	movlw	1
  7147  056C  07A4               	addwf	___ftadd@f2+1,f
  7148  056D  3000               	movlw	0
  7149  056E  1803               	skipnc
  7150  056F  3001               	movlw	1
  7151  0570  07A5               	addwf	___ftadd@f2+2,f
  7152  0571  01F9               	clrf	___ftadd@sign
  7153  0572  0AF9               	incf	___ftadd@sign,f
  7154  0573                     l5306:	
  7155  0573  0823               	movf	___ftadd@f2,w
  7156  0574  00F1               	movwf	?___ftpack
  7157  0575  0824               	movf	___ftadd@f2+1,w
  7158  0576  00F2               	movwf	?___ftpack+1
  7159  0577  0825               	movf	___ftadd@f2+2,w
  7160  0578  00F3               	movwf	?___ftpack+2
  7161  0579  087B               	movf	___ftadd@exp1,w
  7162  057A  00A6               	movwf	??___ftadd
  7163  057B  0826               	movf	??___ftadd,w
  7164  057C  00F4               	movwf	?___ftpack+3
  7165  057D  0879               	movf	___ftadd@sign,w
  7166  057E  00A7               	movwf	??___ftadd+1
  7167  057F  0827               	movf	??___ftadd+1,w
  7168  0580  00F5               	movwf	?___ftpack+4
  7169  0581  318D  255A         	fcall	___ftpack
  7170  0583  0871               	movf	?___ftpack,w
  7171  0584  0020               	movlb	0	; select bank0
  7172  0585  00A0               	movwf	?___ftadd
  7173  0586  0872               	movf	?___ftpack+1,w
  7174  0587  00A1               	movwf	?___ftadd+1
  7175  0588  0873               	movf	?___ftpack+2,w
  7176  0589  00A2               	movwf	?___ftadd+2
  7177  058A  0008               	return
  7178  058B                     __end_of___ftadd:	
  7179                           
  7180                           	psect	text30
  7181  14B6                     __ptext30:	
  7182 ;; *************** function ___ftneg *****************
  7183 ;; Defined at:
  7184 ;;		line 16 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftneg.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  f1              3    1[COMMON] float 
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;		None
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  3    1[COMMON] float 
  7191 ;; Registers used:
  7192 ;;		wreg
  7193 ;; Tracked objects:
  7194 ;;		On entry : 0/0
  7195 ;;		On exit  : 0/0
  7196 ;;		Unchanged: 0/0
  7197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7198 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7201 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7202 ;;Total ram usage:        3 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    2
  7205 ;; This function calls:
  7206 ;;		Nothing
  7207 ;; This function is called by:
  7208 ;;		_ftoa
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           
  7213                           ;psect for function ___ftneg
  7214  14B6                     ___ftneg:	
  7215                           
  7216                           ;incstack = 0
  7217                           ; Regs used in ___ftneg: [wreg]
  7218  14B6  0873               	movf	___ftneg@f1+2,w
  7219  14B7  0472               	iorwf	___ftneg@f1+1,w
  7220  14B8  0471               	iorwf	___ftneg@f1,w
  7221  14B9  1903               	skipnz
  7222  14BA  0008               	return
  7223  14BB  3080               	movlw	128
  7224  14BC  06F3               	xorwf	___ftneg@f1+2,f
  7225  14BD  0008               	return
  7226  14BE                     __end_of___ftneg:	
  7227                           
  7228                           	psect	text31
  7229  0710                     __ptext31:	
  7230 ;; *************** function ___ftmul *****************
  7231 ;; Defined at:
  7232 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  f1              3    0[BANK0 ] float 
  7235 ;;  f2              3    3[BANK0 ] float 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  7238 ;;  sign            1   15[BANK0 ] unsigned char 
  7239 ;;  cntr            1   14[BANK0 ] unsigned char 
  7240 ;;  exp             1   10[BANK0 ] unsigned char 
  7241 ;; Return value:  Size  Location     Type
  7242 ;;                  3    0[BANK0 ] float 
  7243 ;; Registers used:
  7244 ;;		wreg, status,2, status,0, pclath, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7250 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;Total ram usage:       16 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    3
  7257 ;; This function calls:
  7258 ;;		___ftpack
  7259 ;; This function is called by:
  7260 ;;		_ftoa
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function ___ftmul
  7266  0710                     ___ftmul:	
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7270  0710  0020               	movlb	0	; select bank0
  7271  0711  0820               	movf	___ftmul@f1,w
  7272  0712  00A6               	movwf	??___ftmul
  7273  0713  0821               	movf	___ftmul@f1+1,w
  7274  0714  00A7               	movwf	??___ftmul+1
  7275  0715  0822               	movf	___ftmul@f1+2,w
  7276  0716  00A8               	movwf	??___ftmul+2
  7277  0717  1003               	clrc
  7278  0718  0D27               	rlf	??___ftmul+1,w
  7279  0719  0D28               	rlf	??___ftmul+2,w
  7280  071A  00A9               	movwf	??___ftmul+3
  7281  071B  0829               	movf	??___ftmul+3,w
  7282  071C  00AA               	movwf	___ftmul@exp
  7283  071D  08AA               	movf	___ftmul@exp,f
  7284  071E  1D03               	skipz
  7285  071F  2F27               	goto	l5316
  7286  0720  3000               	movlw	0
  7287  0721  00A0               	movwf	?___ftmul
  7288  0722  3000               	movlw	0
  7289  0723  00A1               	movwf	?___ftmul+1
  7290  0724  3000               	movlw	0
  7291  0725  00A2               	movwf	?___ftmul+2
  7292  0726  0008               	return
  7293  0727                     l5316:	
  7294  0727  0823               	movf	___ftmul@f2,w
  7295  0728  00A6               	movwf	??___ftmul
  7296  0729  0824               	movf	___ftmul@f2+1,w
  7297  072A  00A7               	movwf	??___ftmul+1
  7298  072B  0825               	movf	___ftmul@f2+2,w
  7299  072C  00A8               	movwf	??___ftmul+2
  7300  072D  1003               	clrc
  7301  072E  0D27               	rlf	??___ftmul+1,w
  7302  072F  0D28               	rlf	??___ftmul+2,w
  7303  0730  00A9               	movwf	??___ftmul+3
  7304  0731  0829               	movf	??___ftmul+3,w
  7305  0732  00AF               	movwf	___ftmul@sign
  7306  0733  08AF               	movf	___ftmul@sign,f
  7307  0734  1D03               	skipz
  7308  0735  2F3D               	goto	l5322
  7309  0736  3000               	movlw	0
  7310  0737  00A0               	movwf	?___ftmul
  7311  0738  3000               	movlw	0
  7312  0739  00A1               	movwf	?___ftmul+1
  7313  073A  3000               	movlw	0
  7314  073B  00A2               	movwf	?___ftmul+2
  7315  073C  0008               	return
  7316  073D                     l5322:	
  7317  073D  082F               	movf	___ftmul@sign,w
  7318  073E  3E7B               	addlw	123
  7319  073F  00A6               	movwf	??___ftmul
  7320  0740  0826               	movf	??___ftmul,w
  7321  0741  07AA               	addwf	___ftmul@exp,f
  7322  0742  0820               	movf	___ftmul@f1,w
  7323  0743  00A6               	movwf	??___ftmul
  7324  0744  0821               	movf	___ftmul@f1+1,w
  7325  0745  00A7               	movwf	??___ftmul+1
  7326  0746  0822               	movf	___ftmul@f1+2,w
  7327  0747  00A8               	movwf	??___ftmul+2
  7328  0748  3010               	movlw	16
  7329  0749                     u5855:	
  7330  0749  36A8               	lsrf	??___ftmul+2,f
  7331  074A  0CA7               	rrf	??___ftmul+1,f
  7332  074B  0CA6               	rrf	??___ftmul,f
  7333  074C  0B89               	decfsz	9,f
  7334  074D  2F49               	goto	u5855
  7335  074E  0826               	movf	??___ftmul,w
  7336  074F  00A9               	movwf	??___ftmul+3
  7337  0750  0829               	movf	??___ftmul+3,w
  7338  0751  00AF               	movwf	___ftmul@sign
  7339  0752  0823               	movf	___ftmul@f2,w
  7340  0753  00A6               	movwf	??___ftmul
  7341  0754  0824               	movf	___ftmul@f2+1,w
  7342  0755  00A7               	movwf	??___ftmul+1
  7343  0756  0825               	movf	___ftmul@f2+2,w
  7344  0757  00A8               	movwf	??___ftmul+2
  7345  0758  3010               	movlw	16
  7346  0759                     u5865:	
  7347  0759  36A8               	lsrf	??___ftmul+2,f
  7348  075A  0CA7               	rrf	??___ftmul+1,f
  7349  075B  0CA6               	rrf	??___ftmul,f
  7350  075C  0B89               	decfsz	9,f
  7351  075D  2F59               	goto	u5865
  7352  075E  0826               	movf	??___ftmul,w
  7353  075F  00A9               	movwf	??___ftmul+3
  7354  0760  0829               	movf	??___ftmul+3,w
  7355  0761  06AF               	xorwf	___ftmul@sign,f
  7356  0762  3080               	movlw	128
  7357  0763  00A6               	movwf	??___ftmul
  7358  0764  0826               	movf	??___ftmul,w
  7359  0765  05AF               	andwf	___ftmul@sign,f
  7360  0766  17A1               	bsf	___ftmul@f1+1,7
  7361  0767  17A4               	bsf	___ftmul@f2+1,7
  7362  0768  30FF               	movlw	255
  7363  0769  05A3               	andwf	___ftmul@f2,f
  7364  076A  30FF               	movlw	255
  7365  076B  05A4               	andwf	___ftmul@f2+1,f
  7366  076C  3000               	movlw	0
  7367  076D  05A5               	andwf	___ftmul@f2+2,f
  7368  076E  3000               	movlw	0
  7369  076F  00AB               	movwf	___ftmul@f3_as_product
  7370  0770  3000               	movlw	0
  7371  0771  00AC               	movwf	___ftmul@f3_as_product+1
  7372  0772  3000               	movlw	0
  7373  0773  00AD               	movwf	___ftmul@f3_as_product+2
  7374  0774  3007               	movlw	7
  7375  0775  00A6               	movwf	??___ftmul
  7376  0776  0826               	movf	??___ftmul,w
  7377  0777  00AE               	movwf	___ftmul@cntr
  7378  0778                     l5334:	
  7379  0778  1C20               	btfss	___ftmul@f1,0
  7380  0779  2F80               	goto	l5338
  7381  077A  0823               	movf	___ftmul@f2,w
  7382  077B  07AB               	addwf	___ftmul@f3_as_product,f
  7383  077C  0824               	movf	___ftmul@f2+1,w
  7384  077D  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  7385  077E  0825               	movf	___ftmul@f2+2,w
  7386  077F  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  7387  0780                     l5338:	
  7388  0780  3001               	movlw	1
  7389  0781                     u5885:	
  7390  0781  36A2               	lsrf	___ftmul@f1+2,f
  7391  0782  0CA1               	rrf	___ftmul@f1+1,f
  7392  0783  0CA0               	rrf	___ftmul@f1,f
  7393  0784  0B89               	decfsz	9,f
  7394  0785  2F81               	goto	u5885
  7395  0786  3001               	movlw	1
  7396  0787                     u5895:	
  7397  0787  35A3               	lslf	___ftmul@f2,f
  7398  0788  0DA4               	rlf	___ftmul@f2+1,f
  7399  0789  0DA5               	rlf	___ftmul@f2+2,f
  7400  078A  0B89               	decfsz	9,f
  7401  078B  2F87               	goto	u5895
  7402  078C  3001               	movlw	1
  7403  078D  02AE               	subwf	___ftmul@cntr,f
  7404  078E  1D03               	btfss	3,2
  7405  078F  2F78               	goto	l5334
  7406  0790  3009               	movlw	9
  7407  0791  00A6               	movwf	??___ftmul
  7408  0792  0826               	movf	??___ftmul,w
  7409  0793  00AE               	movwf	___ftmul@cntr
  7410  0794                     l5346:	
  7411  0794  1C20               	btfss	___ftmul@f1,0
  7412  0795  2F9C               	goto	l5350
  7413  0796  0823               	movf	___ftmul@f2,w
  7414  0797  07AB               	addwf	___ftmul@f3_as_product,f
  7415  0798  0824               	movf	___ftmul@f2+1,w
  7416  0799  3DAC               	addwfc	___ftmul@f3_as_product+1,f
  7417  079A  0825               	movf	___ftmul@f2+2,w
  7418  079B  3DAD               	addwfc	___ftmul@f3_as_product+2,f
  7419  079C                     l5350:	
  7420  079C  3001               	movlw	1
  7421  079D                     u5925:	
  7422  079D  36A2               	lsrf	___ftmul@f1+2,f
  7423  079E  0CA1               	rrf	___ftmul@f1+1,f
  7424  079F  0CA0               	rrf	___ftmul@f1,f
  7425  07A0  0B89               	decfsz	9,f
  7426  07A1  2F9D               	goto	u5925
  7427  07A2  3001               	movlw	1
  7428  07A3                     u5935:	
  7429  07A3  36AD               	lsrf	___ftmul@f3_as_product+2,f
  7430  07A4  0CAC               	rrf	___ftmul@f3_as_product+1,f
  7431  07A5  0CAB               	rrf	___ftmul@f3_as_product,f
  7432  07A6  0B89               	decfsz	9,f
  7433  07A7  2FA3               	goto	u5935
  7434  07A8  3001               	movlw	1
  7435  07A9  02AE               	subwf	___ftmul@cntr,f
  7436  07AA  1D03               	btfss	3,2
  7437  07AB  2F94               	goto	l5346
  7438  07AC  082B               	movf	___ftmul@f3_as_product,w
  7439  07AD  00F1               	movwf	?___ftpack
  7440  07AE  082C               	movf	___ftmul@f3_as_product+1,w
  7441  07AF  00F2               	movwf	?___ftpack+1
  7442  07B0  082D               	movf	___ftmul@f3_as_product+2,w
  7443  07B1  00F3               	movwf	?___ftpack+2
  7444  07B2  082A               	movf	___ftmul@exp,w
  7445  07B3  00A6               	movwf	??___ftmul
  7446  07B4  0826               	movf	??___ftmul,w
  7447  07B5  00F4               	movwf	?___ftpack+3
  7448  07B6  082F               	movf	___ftmul@sign,w
  7449  07B7  00A7               	movwf	??___ftmul+1
  7450  07B8  0827               	movf	??___ftmul+1,w
  7451  07B9  00F5               	movwf	?___ftpack+4
  7452  07BA  318D  255A         	fcall	___ftpack
  7453  07BC  0871               	movf	?___ftpack,w
  7454  07BD  0020               	movlb	0	; select bank0
  7455  07BE  00A0               	movwf	?___ftmul
  7456  07BF  0872               	movf	?___ftpack+1,w
  7457  07C0  00A1               	movwf	?___ftmul+1
  7458  07C1  0873               	movf	?___ftpack+2,w
  7459  07C2  00A2               	movwf	?___ftmul+2
  7460  07C3  0008               	return
  7461  07C4                     __end_of___ftmul:	
  7462                           
  7463                           	psect	text32
  7464  0D5A                     __ptext32:	
  7465 ;; *************** function ___ftpack *****************
  7466 ;; Defined at:
  7467 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;  arg             3    1[COMMON] unsigned um
  7470 ;;  exp             1    4[COMMON] unsigned char 
  7471 ;;  sign            1    5[COMMON] unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  3    1[COMMON] float 
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        8 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    2
  7490 ;; This function calls:
  7491 ;;		Nothing
  7492 ;; This function is called by:
  7493 ;;		___ftadd
  7494 ;;		___ftmul
  7495 ;;		___lltoft
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499                           
  7500                           ;psect for function ___ftpack
  7501  0D5A                     ___ftpack:	
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7505  0D5A  0874               	movf	___ftpack@exp,w
  7506  0D5B  1903               	btfsc	3,2
  7507  0D5C  2D62               	goto	l5212
  7508  0D5D  0873               	movf	___ftpack@arg+2,w
  7509  0D5E  0472               	iorwf	___ftpack@arg+1,w
  7510  0D5F  0471               	iorwf	___ftpack@arg,w
  7511  0D60  1D03               	skipz
  7512  0D61  2D73               	goto	l5218
  7513  0D62                     l5212:	
  7514  0D62  3000               	movlw	0
  7515  0D63  00F1               	movwf	?___ftpack
  7516  0D64  3000               	movlw	0
  7517  0D65  00F2               	movwf	?___ftpack+1
  7518  0D66  3000               	movlw	0
  7519  0D67  00F3               	movwf	?___ftpack+2
  7520  0D68  0008               	return
  7521  0D69                     l5216:	
  7522  0D69  3001               	movlw	1
  7523  0D6A  00F6               	movwf	??___ftpack
  7524  0D6B  0876               	movf	??___ftpack,w
  7525  0D6C  07F4               	addwf	___ftpack@exp,f
  7526  0D6D  3001               	movlw	1
  7527  0D6E                     u5515:	
  7528  0D6E  36F3               	lsrf	___ftpack@arg+2,f
  7529  0D6F  0CF2               	rrf	___ftpack@arg+1,f
  7530  0D70  0CF1               	rrf	___ftpack@arg,f
  7531  0D71  0B89               	decfsz	9,f
  7532  0D72  2D6E               	goto	u5515
  7533  0D73                     l5218:	
  7534  0D73  30FE               	movlw	254
  7535  0D74  0573               	andwf	___ftpack@arg+2,w
  7536  0D75  1903               	btfsc	3,2
  7537  0D76  2D8C               	goto	l897
  7538  0D77  2D69               	goto	l5216
  7539  0D78                     l5220:	
  7540  0D78  3001               	movlw	1
  7541  0D79  00F6               	movwf	??___ftpack
  7542  0D7A  0876               	movf	??___ftpack,w
  7543  0D7B  07F4               	addwf	___ftpack@exp,f
  7544  0D7C  3001               	movlw	1
  7545  0D7D  07F1               	addwf	___ftpack@arg,f
  7546  0D7E  3000               	movlw	0
  7547  0D7F  1803               	skipnc
  7548  0D80  3001               	movlw	1
  7549  0D81  07F2               	addwf	___ftpack@arg+1,f
  7550  0D82  3000               	movlw	0
  7551  0D83  1803               	skipnc
  7552  0D84  3001               	movlw	1
  7553  0D85  07F3               	addwf	___ftpack@arg+2,f
  7554  0D86  3001               	movlw	1
  7555  0D87                     u5535:	
  7556  0D87  36F3               	lsrf	___ftpack@arg+2,f
  7557  0D88  0CF2               	rrf	___ftpack@arg+1,f
  7558  0D89  0CF1               	rrf	___ftpack@arg,f
  7559  0D8A  0B89               	decfsz	9,f
  7560  0D8B  2D87               	goto	u5535
  7561  0D8C                     l897:	
  7562  0D8C  30FF               	movlw	255
  7563  0D8D  0573               	andwf	___ftpack@arg+2,w
  7564  0D8E  1903               	btfsc	3,2
  7565  0D8F  2D99               	goto	l5228
  7566  0D90  2D78               	goto	l5220
  7567  0D91                     l5226:	
  7568  0D91  3001               	movlw	1
  7569  0D92  02F4               	subwf	___ftpack@exp,f
  7570  0D93  3001               	movlw	1
  7571  0D94                     u5555:	
  7572  0D94  35F1               	lslf	___ftpack@arg,f
  7573  0D95  0DF2               	rlf	___ftpack@arg+1,f
  7574  0D96  0DF3               	rlf	___ftpack@arg+2,f
  7575  0D97  0B89               	decfsz	9,f
  7576  0D98  2D94               	goto	u5555
  7577  0D99                     l5228:	
  7578  0D99  1FF2               	btfss	___ftpack@arg+1,7
  7579  0D9A  2D91               	goto	l5226
  7580  0D9B  1874               	btfsc	___ftpack@exp,0
  7581  0D9C  2DA3               	goto	l903
  7582  0D9D  30FF               	movlw	255
  7583  0D9E  05F1               	andwf	___ftpack@arg,f
  7584  0D9F  307F               	movlw	127
  7585  0DA0  05F2               	andwf	___ftpack@arg+1,f
  7586  0DA1  30FF               	movlw	255
  7587  0DA2  05F3               	andwf	___ftpack@arg+2,f
  7588  0DA3                     l903:	
  7589  0DA3  1003               	clrc
  7590  0DA4  0CF4               	rrf	___ftpack@exp,f
  7591  0DA5  0874               	movf	___ftpack@exp,w
  7592  0DA6  00F6               	movwf	??___ftpack
  7593  0DA7  01F7               	clrf	??___ftpack+1
  7594  0DA8  01F8               	clrf	??___ftpack+2
  7595  0DA9  3010               	movlw	16
  7596  0DAA                     u5585:	
  7597  0DAA  35F6               	lslf	??___ftpack,f
  7598  0DAB  0DF7               	rlf	??___ftpack+1,f
  7599  0DAC  0DF8               	rlf	??___ftpack+2,f
  7600  0DAD  0B89               	decfsz	9,f
  7601  0DAE  2DAA               	goto	u5585
  7602  0DAF  0876               	movf	??___ftpack,w
  7603  0DB0  04F1               	iorwf	___ftpack@arg,f
  7604  0DB1  0877               	movf	??___ftpack+1,w
  7605  0DB2  04F2               	iorwf	___ftpack@arg+1,f
  7606  0DB3  0878               	movf	??___ftpack+2,w
  7607  0DB4  04F3               	iorwf	___ftpack@arg+2,f
  7608  0DB5  0875               	movf	___ftpack@sign,w
  7609  0DB6  1903               	btfsc	3,2
  7610  0DB7  0008               	return
  7611  0DB8  17F3               	bsf	___ftpack@arg+2,7
  7612  0DB9  0008               	return
  7613  0DBA                     __end_of___ftpack:	
  7614                           
  7615                           	psect	text33
  7616  0A77                     __ptext33:	
  7617 ;; *************** function ___ftge *****************
  7618 ;; Defined at:
  7619 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftge.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;  ff1             3    1[COMMON] float 
  7622 ;;  ff2             3    4[COMMON] float 
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;		None
  7625 ;; Return value:  Size  Location     Type
  7626 ;;		None               void
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, status,0
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7634 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;Total ram usage:        9 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    2
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_RTXUpdateDisplay
  7645 ;;		_ftoa
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           
  7650                           ;psect for function ___ftge
  7651  0A77                     ___ftge:	
  7652                           
  7653                           ;incstack = 0
  7654                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7655  0A77  1FF3               	btfss	___ftge@ff1+2,7
  7656  0A78  2A8D               	goto	l4192
  7657  0A79  0971               	comf	___ftge@ff1,w
  7658  0A7A  00F7               	movwf	??___ftge
  7659  0A7B  0972               	comf	___ftge@ff1+1,w
  7660  0A7C  00F8               	movwf	??___ftge+1
  7661  0A7D  0973               	comf	___ftge@ff1+2,w
  7662  0A7E  00F9               	movwf	??___ftge+2
  7663  0A7F  0AF7               	incf	??___ftge,f
  7664  0A80  1903               	skipnz
  7665  0A81  0AF8               	incf	??___ftge+1,f
  7666  0A82  1903               	skipnz
  7667  0A83  0AF9               	incf	??___ftge+2,f
  7668  0A84  3000               	movlw	0
  7669  0A85  0777               	addwf	??___ftge,w
  7670  0A86  00F1               	movwf	___ftge@ff1
  7671  0A87  3000               	movlw	0
  7672  0A88  3D78               	addwfc	??___ftge+1,w
  7673  0A89  00F2               	movwf	___ftge@ff1+1
  7674  0A8A  3080               	movlw	128
  7675  0A8B  3D79               	addwfc	??___ftge+2,w
  7676  0A8C  00F3               	movwf	___ftge@ff1+2
  7677  0A8D                     l4192:	
  7678  0A8D  1FF6               	btfss	___ftge@ff2+2,7
  7679  0A8E  2AA3               	goto	l4196
  7680  0A8F  0974               	comf	___ftge@ff2,w
  7681  0A90  00F7               	movwf	??___ftge
  7682  0A91  0975               	comf	___ftge@ff2+1,w
  7683  0A92  00F8               	movwf	??___ftge+1
  7684  0A93  0976               	comf	___ftge@ff2+2,w
  7685  0A94  00F9               	movwf	??___ftge+2
  7686  0A95  0AF7               	incf	??___ftge,f
  7687  0A96  1903               	skipnz
  7688  0A97  0AF8               	incf	??___ftge+1,f
  7689  0A98  1903               	skipnz
  7690  0A99  0AF9               	incf	??___ftge+2,f
  7691  0A9A  3000               	movlw	0
  7692  0A9B  0777               	addwf	??___ftge,w
  7693  0A9C  00F4               	movwf	___ftge@ff2
  7694  0A9D  3000               	movlw	0
  7695  0A9E  3D78               	addwfc	??___ftge+1,w
  7696  0A9F  00F5               	movwf	___ftge@ff2+1
  7697  0AA0  3080               	movlw	128
  7698  0AA1  3D79               	addwfc	??___ftge+2,w
  7699  0AA2  00F6               	movwf	___ftge@ff2+2
  7700  0AA3                     l4196:	
  7701  0AA3  3080               	movlw	128
  7702  0AA4  06F3               	xorwf	___ftge@ff1+2,f
  7703  0AA5  3080               	movlw	128
  7704  0AA6  06F6               	xorwf	___ftge@ff2+2,f
  7705  0AA7  0876               	movf	___ftge@ff2+2,w
  7706  0AA8  0273               	subwf	___ftge@ff1+2,w
  7707  0AA9  1D03               	skipz
  7708  0AAA  0008               	return
  7709  0AAB  0875               	movf	___ftge@ff2+1,w
  7710  0AAC  0272               	subwf	___ftge@ff1+1,w
  7711  0AAD  1D03               	skipz
  7712  0AAE  0008               	return
  7713  0AAF  0874               	movf	___ftge@ff2,w
  7714  0AB0  0271               	subwf	___ftge@ff1,w
  7715  0AB1  0008               	return
  7716  0AB2                     __end_of___ftge:	
  7717                           
  7718                           	psect	text34
  7719  02B9                     __ptext34:	
  7720 ;; *************** function _sprintf *****************
  7721 ;; Defined at:
  7722 ;;		line 493 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\doprnt.c"
  7723 ;; Parameters:    Size  Location     Type
  7724 ;;  sp              1    wreg     PTR unsigned char 
  7725 ;;		 -> ftoa@buf(17), 
  7726 ;;  f               1   13[BANK0 ] PTR const unsigned char 
  7727 ;;		 -> STR_1(11), 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  sp              1   33[BANK0 ] PTR unsigned char 
  7730 ;;		 -> ftoa@buf(17), 
  7731 ;;  _val            4   29[BANK0 ] struct .
  7732 ;;  prec            2   36[BANK0 ] int 
  7733 ;;  width           2   34[BANK0 ] int 
  7734 ;;  c               1   38[BANK0 ] char 
  7735 ;;  ap              1   28[BANK0 ] PTR void [1]
  7736 ;;		 -> ?_sprintf(2), 
  7737 ;;  flag            1   27[BANK0 ] unsigned char 
  7738 ;; Return value:  Size  Location     Type
  7739 ;;                  2   13[BANK0 ] int 
  7740 ;; Registers used:
  7741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7747 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;Total ram usage:       26 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    3
  7754 ;; This function calls:
  7755 ;;		_isdigit
  7756 ;;		___lldiv
  7757 ;;		___llmod
  7758 ;;		___wmul
  7759 ;; This function is called by:
  7760 ;;		_ftoa
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _sprintf
  7766  02B9                     _sprintf:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7770                           ;sprintf@sp stored from wreg
  7771  02B9  0020               	movlb	0	; select bank0
  7772  02BA  00C1               	movwf	sprintf@sp
  7773                           
  7774                           ;doprnt.c: 494: va_list ap;
  7775                           ;doprnt.c: 499: signed char c;
  7776                           ;doprnt.c: 501: int width;
  7777                           ;doprnt.c: 504: int prec;
  7778                           ;doprnt.c: 508: unsigned char flag;
  7779                           ;doprnt.c: 527: union {
  7780                           ;doprnt.c: 528: unsigned long _val;
  7781                           ;doprnt.c: 529: struct {
  7782                           ;doprnt.c: 530: const char * _cp;
  7783                           ;doprnt.c: 531: unsigned _len;
  7784                           ;doprnt.c: 532: } _str;
  7785                           ;doprnt.c: 533: } _val;
  7786                           ;doprnt.c: 542: *ap = __va_start();
  7787  02BB  302E               	movlw	(?_sprintf+1)& (0+255)
  7788  02BC  00B6               	movwf	??_sprintf
  7789  02BD  0836               	movf	??_sprintf,w
  7790  02BE  00BC               	movwf	sprintf@ap
  7791  02BF                     l4024:	
  7792                           ;doprnt.c: 545: while(c = *f++) {
  7793                           
  7794  02BF  082D               	movf	sprintf@f,w
  7795  02C0  0AAD               	incf	sprintf@f,f
  7796  02C1  3188               	movlp	high __stringtab
  7797  02C2  000A               	callw
  7798  02C3  3182               	pagesel	$	;select current page
  7799  02C4  00B6               	movwf	??_sprintf
  7800  02C5  0836               	movf	??_sprintf,w
  7801  02C6  00C6               	movwf	sprintf@c
  7802  02C7  08C6               	movf	sprintf@c,f
  7803  02C8  1903               	btfsc	3,2
  7804  02C9  2C8F               	goto	l4026
  7805                           
  7806                           ;doprnt.c: 547: if(c != '%')
  7807  02CA  0846               	movf	sprintf@c,w
  7808  02CB  3A25               	xorlw	37
  7809  02CC  1903               	skipnz
  7810  02CD  2ADB               	goto	l3934
  7811                           
  7812                           ;doprnt.c: 549: {
  7813                           ;doprnt.c: 550: ((*sp++ = (c)));
  7814  02CE  0846               	movf	sprintf@c,w
  7815  02CF  00B6               	movwf	??_sprintf
  7816  02D0  0841               	movf	sprintf@sp,w
  7817  02D1  0086               	movwf	6
  7818  02D2  3001               	movlw	1	; select bank2/3
  7819  02D3  0087               	movwf	7
  7820  02D4  0836               	movf	??_sprintf,w
  7821  02D5  0081               	movwf	1
  7822  02D6  3001               	movlw	1
  7823  02D7  00B6               	movwf	??_sprintf
  7824  02D8  0836               	movf	??_sprintf,w
  7825  02D9  07C1               	addwf	sprintf@sp,f
  7826                           
  7827                           ;doprnt.c: 551: continue;
  7828  02DA  2ABF               	goto	l4024
  7829  02DB                     l3934:	
  7830                           
  7831                           ;doprnt.c: 552: }
  7832                           ;doprnt.c: 555: width = 0;
  7833  02DB  01C2               	clrf	sprintf@width
  7834  02DC  01C3               	clrf	sprintf@width+1
  7835                           
  7836                           ;doprnt.c: 557: flag = 0;
  7837  02DD  01BB               	clrf	sprintf@flag
  7838                           
  7839                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  7840  02DE  082D               	movf	sprintf@f,w
  7841  02DF  3188               	movlp	high __stringtab
  7842  02E0  000A               	callw
  7843  02E1  3182               	pagesel	$	;select current page
  7844  02E2  3194  24E8  3182   	fcall	_isdigit
  7845  02E5  1C03               	btfss	3,0
  7846  02E6  2B1A               	goto	l3948
  7847                           
  7848                           ;doprnt.c: 607: width = 0;
  7849  02E7  0020               	movlb	0	; select bank0
  7850  02E8  01C2               	clrf	sprintf@width
  7851  02E9  01C3               	clrf	sprintf@width+1
  7852  02EA                     l3940:	
  7853                           ;doprnt.c: 608: do {
  7854                           
  7855                           
  7856                           ;doprnt.c: 609: width *= 10;
  7857  02EA  300A               	movlw	10
  7858  02EB  00F1               	movwf	?___wmul
  7859  02EC  3000               	movlw	0
  7860  02ED  00F2               	movwf	?___wmul+1
  7861  02EE  0020               	movlb	0	; select bank0
  7862  02EF  0843               	movf	sprintf@width+1,w
  7863  02F0  01F4               	clrf	?___wmul+3
  7864  02F1  07F4               	addwf	?___wmul+3,f
  7865  02F2  0842               	movf	sprintf@width,w
  7866  02F3  01F3               	clrf	?___wmul+2
  7867  02F4  07F3               	addwf	?___wmul+2,f
  7868  02F5  3196  268B  3182   	fcall	___wmul
  7869  02F8  0872               	movf	?___wmul+1,w
  7870  02F9  0020               	movlb	0	; select bank0
  7871  02FA  01C3               	clrf	sprintf@width+1
  7872  02FB  07C3               	addwf	sprintf@width+1,f
  7873  02FC  0871               	movf	?___wmul,w
  7874  02FD  01C2               	clrf	sprintf@width
  7875  02FE  07C2               	addwf	sprintf@width,f
  7876                           
  7877                           ;doprnt.c: 610: width += *f++ - '0';
  7878  02FF  082D               	movf	sprintf@f,w
  7879  0300  3188               	movlp	high __stringtab
  7880  0301  000A               	callw
  7881  0302  3182               	pagesel	$	;select current page
  7882  0303  3ED0               	addlw	208
  7883  0304  00B6               	movwf	??_sprintf
  7884  0305  30FF               	movlw	255
  7885  0306  1803               	skipnc
  7886  0307  3000               	movlw	0
  7887  0308  00B7               	movwf	??_sprintf+1
  7888  0309  0836               	movf	??_sprintf,w
  7889  030A  07C2               	addwf	sprintf@width,f
  7890  030B  0837               	movf	??_sprintf+1,w
  7891  030C  3DC3               	addwfc	sprintf@width+1,f
  7892  030D  3001               	movlw	1
  7893  030E  00B6               	movwf	??_sprintf
  7894  030F  0836               	movf	??_sprintf,w
  7895  0310  07AD               	addwf	sprintf@f,f
  7896                           
  7897                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  7898  0311  082D               	movf	sprintf@f,w
  7899  0312  3188               	movlp	high __stringtab
  7900  0313  000A               	callw
  7901  0314  3182               	pagesel	$	;select current page
  7902  0315  3194  24E8  3182   	fcall	_isdigit
  7903  0318  1803               	btfsc	3,0
  7904  0319  2AEA               	goto	l3940
  7905  031A                     l3948:	
  7906                           
  7907                           ;doprnt.c: 617: }
  7908                           ;doprnt.c: 620: if(*f == '.') {
  7909  031A  0020               	movlb	0	; select bank0
  7910  031B  082D               	movf	sprintf@f,w
  7911  031C  3188               	movlp	high __stringtab
  7912  031D  000A               	callw
  7913  031E  3182               	pagesel	$	;select current page
  7914  031F  3A2E               	xorlw	46
  7915  0320  1D03               	skipz
  7916  0321  2B57               	goto	l3960
  7917                           
  7918                           ;doprnt.c: 622: f++;
  7919  0322  3001               	movlw	1
  7920  0323  00B6               	movwf	??_sprintf
  7921  0324  0836               	movf	??_sprintf,w
  7922  0325  07AD               	addwf	sprintf@f,f
  7923                           
  7924                           ;doprnt.c: 629: {
  7925                           ;doprnt.c: 630: prec = 0;
  7926  0326  01C4               	clrf	sprintf@prec
  7927  0327  01C5               	clrf	sprintf@prec+1
  7928  0328                     l3958:	
  7929                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  7930                           
  7931  0328  082D               	movf	sprintf@f,w
  7932  0329  3188               	movlp	high __stringtab
  7933  032A  000A               	callw
  7934  032B  3182               	pagesel	$	;select current page
  7935  032C  3194  24E8  3182   	fcall	_isdigit
  7936  032F  1C03               	btfss	3,0
  7937  0330  2B62               	goto	l3966
  7938                           
  7939                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  7940  0331  0020               	movlb	0	; select bank0
  7941  0332  082D               	movf	sprintf@f,w
  7942  0333  3188               	movlp	high __stringtab
  7943  0334  000A               	callw
  7944  0335  3182               	pagesel	$	;select current page
  7945  0336  00B6               	movwf	??_sprintf
  7946  0337  01B7               	clrf	??_sprintf+1
  7947  0338  0845               	movf	sprintf@prec+1,w
  7948  0339  01F2               	clrf	?___wmul+1
  7949  033A  07F2               	addwf	?___wmul+1,f
  7950  033B  0844               	movf	sprintf@prec,w
  7951  033C  01F1               	clrf	?___wmul
  7952  033D  07F1               	addwf	?___wmul,f
  7953  033E  300A               	movlw	10
  7954  033F  00F3               	movwf	?___wmul+2
  7955  0340  3000               	movlw	0
  7956  0341  00F4               	movwf	?___wmul+3
  7957  0342  3196  268B  3182   	fcall	___wmul
  7958  0345  0020               	movlb	0	; select bank0
  7959  0346  0836               	movf	??_sprintf,w
  7960  0347  0771               	addwf	?___wmul,w
  7961  0348  00B8               	movwf	??_sprintf+2
  7962  0349  0837               	movf	??_sprintf+1,w
  7963  034A  3D72               	addwfc	?___wmul+1,w
  7964  034B  00B9               	movwf	??_sprintf+3
  7965  034C  0838               	movf	??_sprintf+2,w
  7966  034D  3ED0               	addlw	208
  7967  034E  00C4               	movwf	sprintf@prec
  7968  034F  30FF               	movlw	255
  7969  0350  3D39               	addwfc	??_sprintf+3,w
  7970  0351  00C5               	movwf	sprintf@prec+1
  7971  0352  3001               	movlw	1
  7972  0353  00B6               	movwf	??_sprintf
  7973  0354  0836               	movf	??_sprintf,w
  7974  0355  07AD               	addwf	sprintf@f,f
  7975  0356  2B28               	goto	l3958
  7976  0357                     l3960:	
  7977                           ;doprnt.c: 633: }
  7978                           ;doprnt.c: 634: } else {
  7979                           
  7980                           
  7981                           ;doprnt.c: 635: prec = 0;
  7982  0357  0020               	movlb	0	; select bank0
  7983  0358  01C4               	clrf	sprintf@prec
  7984  0359  01C5               	clrf	sprintf@prec+1
  7985                           
  7986                           ;doprnt.c: 644: switch(c = *f++) {
  7987                           
  7988                           ;doprnt.c: 639: }
  7989                           ;doprnt.c: 642: loop:
  7990  035A  2B62               	goto	l3966
  7991  035B                     l728:	
  7992                           ;doprnt.c: 650: case 'l':
  7993                           
  7994                           ;doprnt.c: 647: goto alldone;
  7995                           
  7996                           ;doprnt.c: 646: case 0:
  7997                           
  7998                           
  7999                           ;doprnt.c: 652: flag |= 0x10;
  8000  035B  163B               	bsf	sprintf@flag,4
  8001                           
  8002                           ;doprnt.c: 653: goto loop;
  8003  035C  2B62               	goto	l3966
  8004  035D                     l3962:	
  8005                           ;doprnt.c: 826: case 'u':
  8006                           
  8007                           ;doprnt.c: 822: continue;
  8008                           
  8009                           ;doprnt.c: 811: default:
  8010                           
  8011                           
  8012                           ;doprnt.c: 827: flag |= 0xC0;
  8013  035D  30C0               	movlw	192
  8014  035E  00B6               	movwf	??_sprintf
  8015  035F  0836               	movf	??_sprintf,w
  8016  0360  04BB               	iorwf	sprintf@flag,f
  8017                           
  8018                           ;doprnt.c: 831: }
  8019                           
  8020                           ;doprnt.c: 828: break;
  8021  0361  2B73               	goto	l731
  8022  0362                     l3966:	
  8023  0362  0020               	movlb	0	; select bank0
  8024  0363  082D               	movf	sprintf@f,w
  8025  0364  0AAD               	incf	sprintf@f,f
  8026  0365  3188               	movlp	high __stringtab
  8027  0366  000A               	callw
  8028  0367  3182               	pagesel	$	;select current page
  8029  0368  00C6               	movwf	sprintf@c
  8030                           
  8031                           ; Switch size 1, requested type "space"
  8032                           ; Number of cases is 3, Range of values is 0 to 117
  8033                           ; switch strategies available:
  8034                           ; Name         Instructions Cycles
  8035                           ; simple_byte           10     6 (average)
  8036                           ; direct_byte          242     6 (fixed)
  8037                           ; jumptable            260     6 (fixed)
  8038                           ;	Chosen strategy is simple_byte
  8039  0369  3A00               	xorlw	0	; case 0
  8040  036A  1903               	skipnz
  8041  036B  2C8F               	goto	l4026
  8042  036C  3A6C               	xorlw	108	; case 108
  8043  036D  1903               	skipnz
  8044  036E  2B5B               	goto	l728
  8045  036F  3A19               	xorlw	25	; case 117
  8046  0370  1903               	skipnz
  8047  0371  2B5D               	goto	l3962
  8048  0372  2ABF               	goto	l4024
  8049  0373                     l731:	
  8050                           
  8051                           ;doprnt.c: 1280: {
  8052                           ;doprnt.c: 1288: if(flag & 0x10)
  8053  0373  1E3B               	btfss	sprintf@flag,4
  8054  0374  2B82               	goto	l3972
  8055                           
  8056                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
  8057  0375  083C               	movf	sprintf@ap,w
  8058  0376  0086               	movwf	6
  8059  0377  0187               	clrf	7
  8060  0378  3F40               	moviw [0]fsr1
  8061  0379  00BD               	movwf	sprintf@_val
  8062  037A  3F41               	moviw [1]fsr1
  8063  037B  00BE               	movwf	sprintf@_val+1
  8064  037C  3F42               	moviw [2]fsr1
  8065  037D  00BF               	movwf	sprintf@_val+2
  8066  037E  3F43               	moviw [3]fsr1
  8067  037F  00C0               	movwf	sprintf@_val+3
  8068  0380  3004               	movlw	4
  8069  0381  2B90               	goto	L4
  8070  0382                     l3972:	
  8071                           
  8072                           ;doprnt.c: 1290: else
  8073                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8074  0382  083C               	movf	sprintf@ap,w
  8075  0383  0086               	movwf	6
  8076  0384  0187               	clrf	7
  8077  0385  3F40               	moviw [0]fsr1
  8078  0386  00B6               	movwf	??_sprintf
  8079  0387  3F41               	moviw [1]fsr1
  8080  0388  00B7               	movwf	??_sprintf+1
  8081  0389  0836               	movf	??_sprintf,w
  8082  038A  00BD               	movwf	sprintf@_val
  8083  038B  0837               	movf	??_sprintf+1,w
  8084  038C  00BE               	movwf	sprintf@_val+1
  8085  038D  01BF               	clrf	sprintf@_val+2
  8086  038E  01C0               	clrf	sprintf@_val+3
  8087  038F  3002               	movlw	2
  8088  0390                     L4:	
  8089  0390  00B6               	movwf	??_sprintf
  8090  0391  0836               	movf	??_sprintf,w
  8091  0392  07BC               	addwf	sprintf@ap,f
  8092                           
  8093                           ;doprnt.c: 1294: }
  8094                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  8095  0393  0845               	movf	sprintf@prec+1,w
  8096  0394  0444               	iorwf	sprintf@prec,w
  8097  0395  1D03               	skipz
  8098  0396  2BA1               	goto	l3982
  8099  0397  0840               	movf	sprintf@_val+3,w
  8100  0398  043F               	iorwf	sprintf@_val+2,w
  8101  0399  043E               	iorwf	sprintf@_val+1,w
  8102  039A  043D               	iorwf	sprintf@_val,w
  8103  039B  1D03               	skipz
  8104  039C  2BA1               	goto	l3982
  8105                           
  8106                           ;doprnt.c: 1298: prec++;
  8107  039D  3001               	movlw	1
  8108  039E  07C4               	addwf	sprintf@prec,f
  8109  039F  3000               	movlw	0
  8110  03A0  3DC5               	addwfc	sprintf@prec+1,f
  8111  03A1                     l3982:	
  8112                           
  8113                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8114  03A1  01C6               	clrf	sprintf@c
  8115  03A2  0AC6               	incf	sprintf@c,f
  8116  03A3  0846               	movf	sprintf@c,w
  8117  03A4  3A0A               	xorlw	10
  8118  03A5  1903               	btfsc	3,2
  8119  03A6  2BD6               	goto	l3994
  8120  03A7                     l3986:	
  8121                           
  8122                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  8123  03A7  3001               	movlw	low (_dpowers| (0+32768))
  8124  03A8  0084               	movwf	4
  8125  03A9  3088               	movlw	high (_dpowers| (0+32768))
  8126  03AA  0085               	movwf	5
  8127  03AB  0846               	movf	sprintf@c,w
  8128  03AC  00B6               	movwf	??_sprintf
  8129  03AD  3001               	movlw	1
  8130  03AE                     u3485:	
  8131  03AE  35B6               	lslf	??_sprintf,f
  8132  03AF  3EFF               	addlw	-1
  8133  03B0  1D03               	skipz
  8134  03B1  2BAE               	goto	u3485
  8135  03B2  3536               	lslf	??_sprintf,w
  8136  03B3  0784               	addwf	4,f
  8137  03B4  1803               	skipnc
  8138  03B5  0A85               	incf	5,f
  8139  03B6  3F00               	moviw [0]fsr0
  8140  03B7  00B7               	movwf	??_sprintf+1
  8141  03B8  3F01               	moviw [1]fsr0
  8142  03B9  00B8               	movwf	??_sprintf+2
  8143  03BA  3F02               	moviw [2]fsr0
  8144  03BB  00B9               	movwf	??_sprintf+3
  8145  03BC  3F03               	moviw [3]fsr0
  8146  03BD  00BA               	movwf	??_sprintf+4
  8147  03BE  083A               	movf	??_sprintf+4,w
  8148  03BF  0240               	subwf	sprintf@_val+3,w
  8149  03C0  1D03               	skipz
  8150  03C1  2BCC               	goto	u3495
  8151  03C2  0839               	movf	??_sprintf+3,w
  8152  03C3  023F               	subwf	sprintf@_val+2,w
  8153  03C4  1D03               	skipz
  8154  03C5  2BCC               	goto	u3495
  8155  03C6  0838               	movf	??_sprintf+2,w
  8156  03C7  023E               	subwf	sprintf@_val+1,w
  8157  03C8  1D03               	skipz
  8158  03C9  2BCC               	goto	u3495
  8159  03CA  0837               	movf	??_sprintf+1,w
  8160  03CB  023D               	subwf	sprintf@_val,w
  8161  03CC                     u3495:	
  8162  03CC  1C03               	btfss	3,0
  8163  03CD  2BD6               	goto	l3994
  8164                           
  8165                           ;doprnt.c: 1314: break;
  8166  03CE  3001               	movlw	1
  8167  03CF  00B6               	movwf	??_sprintf
  8168  03D0  0836               	movf	??_sprintf,w
  8169  03D1  07C6               	addwf	sprintf@c,f
  8170  03D2  0846               	movf	sprintf@c,w
  8171  03D3  3A0A               	xorlw	10
  8172  03D4  1D03               	skipz
  8173  03D5  2BA7               	goto	l3986
  8174  03D6                     l3994:	
  8175                           
  8176                           ;doprnt.c: 1346: if(c < prec)
  8177  03D6  0846               	movf	sprintf@c,w
  8178  03D7  00B6               	movwf	??_sprintf
  8179  03D8  01B7               	clrf	??_sprintf+1
  8180  03D9  1BB6               	btfsc	??_sprintf,7
  8181  03DA  03B7               	decf	??_sprintf+1,f
  8182  03DB  0837               	movf	??_sprintf+1,w
  8183  03DC  3A80               	xorlw	128
  8184  03DD  00B8               	movwf	??_sprintf+2
  8185  03DE  0845               	movf	sprintf@prec+1,w
  8186  03DF  3A80               	xorlw	128
  8187  03E0  0238               	subwf	??_sprintf+2,w
  8188  03E1  1D03               	skipz
  8189  03E2  2BE5               	goto	u3515
  8190  03E3  0844               	movf	sprintf@prec,w
  8191  03E4  0236               	subwf	??_sprintf,w
  8192  03E5                     u3515:	
  8193  03E5  1803               	skipnc
  8194  03E6  2BED               	goto	l3998
  8195                           
  8196                           ;doprnt.c: 1347: c = prec;
  8197  03E7  0020               	movlb	0	; select bank0
  8198  03E8  0844               	movf	sprintf@prec,w
  8199  03E9  00B6               	movwf	??_sprintf
  8200  03EA  0836               	movf	??_sprintf,w
  8201  03EB  00C6               	movwf	sprintf@c
  8202  03EC  2C05               	goto	l4002
  8203  03ED                     l3998:	
  8204                           
  8205                           ;doprnt.c: 1348: else if(prec < c)
  8206  03ED  0020               	movlb	0	; select bank0
  8207  03EE  0846               	movf	sprintf@c,w
  8208  03EF  00B6               	movwf	??_sprintf
  8209  03F0  01B7               	clrf	??_sprintf+1
  8210  03F1  1BB6               	btfsc	??_sprintf,7
  8211  03F2  03B7               	decf	??_sprintf+1,f
  8212  03F3  0845               	movf	sprintf@prec+1,w
  8213  03F4  3A80               	xorlw	128
  8214  03F5  00B8               	movwf	??_sprintf+2
  8215  03F6  0837               	movf	??_sprintf+1,w
  8216  03F7  3A80               	xorlw	128
  8217  03F8  0238               	subwf	??_sprintf+2,w
  8218  03F9  1D03               	skipz
  8219  03FA  2BFD               	goto	u3525
  8220  03FB  0836               	movf	??_sprintf,w
  8221  03FC  0244               	subwf	sprintf@prec,w
  8222  03FD                     u3525:	
  8223  03FD  1803               	skipnc
  8224  03FE  2C05               	goto	l4002
  8225                           
  8226                           ;doprnt.c: 1349: prec = c;
  8227  03FF  0020               	movlb	0	; select bank0
  8228  0400  0846               	movf	sprintf@c,w
  8229  0401  00C4               	movwf	sprintf@prec
  8230  0402  01C5               	clrf	sprintf@prec+1
  8231  0403  1BC4               	btfsc	sprintf@prec,7
  8232  0404  03C5               	decf	sprintf@prec+1,f
  8233  0405                     l4002:	
  8234                           
  8235                           ;doprnt.c: 1388: if(width > c)
  8236  0405  0020               	movlb	0	; select bank0
  8237  0406  0846               	movf	sprintf@c,w
  8238  0407  00B6               	movwf	??_sprintf
  8239  0408  01B7               	clrf	??_sprintf+1
  8240  0409  1BB6               	btfsc	??_sprintf,7
  8241  040A  03B7               	decf	??_sprintf+1,f
  8242  040B  0837               	movf	??_sprintf+1,w
  8243  040C  3A80               	xorlw	128
  8244  040D  00B8               	movwf	??_sprintf+2
  8245  040E  0843               	movf	sprintf@width+1,w
  8246  040F  3A80               	xorlw	128
  8247  0410  0238               	subwf	??_sprintf+2,w
  8248  0411  1D03               	skipz
  8249  0412  2C15               	goto	u3535
  8250  0413  0842               	movf	sprintf@width,w
  8251  0414  0236               	subwf	??_sprintf,w
  8252  0415                     u3535:	
  8253  0415  1803               	skipnc
  8254  0416  2C22               	goto	l4006
  8255                           
  8256                           ;doprnt.c: 1389: width -= c;
  8257  0417  0020               	movlb	0	; select bank0
  8258  0418  0846               	movf	sprintf@c,w
  8259  0419  00B6               	movwf	??_sprintf
  8260  041A  01B7               	clrf	??_sprintf+1
  8261  041B  1BB6               	btfsc	??_sprintf,7
  8262  041C  03B7               	decf	??_sprintf+1,f
  8263  041D  0836               	movf	??_sprintf,w
  8264  041E  02C2               	subwf	sprintf@width,f
  8265  041F  0837               	movf	??_sprintf+1,w
  8266  0420  3BC3               	subwfb	sprintf@width+1,f
  8267  0421  2C25               	goto	l4008
  8268  0422                     l4006:	
  8269                           
  8270                           ;doprnt.c: 1390: else
  8271                           ;doprnt.c: 1391: width = 0;
  8272  0422  0020               	movlb	0	; select bank0
  8273  0423  01C2               	clrf	sprintf@width
  8274  0424  01C3               	clrf	sprintf@width+1
  8275  0425                     l4008:	
  8276                           
  8277                           ;doprnt.c: 1429: {
  8278                           ;doprnt.c: 1431: if(width
  8279                           ;doprnt.c: 1435: )
  8280  0425  0843               	movf	sprintf@width+1,w
  8281  0426  0442               	iorwf	sprintf@width,w
  8282  0427  1903               	skipnz
  8283  0428  2C82               	goto	l4022
  8284                           
  8285                           ;doprnt.c: 1437: ((*sp++ = (' ')));
  8286                           
  8287                           ;doprnt.c: 1436: do
  8288  0429  3020               	movlw	32
  8289  042A  00B6               	movwf	??_sprintf
  8290  042B  0841               	movf	sprintf@sp,w
  8291  042C  0086               	movwf	6
  8292  042D  3001               	movlw	1	; select bank2/3
  8293  042E  0087               	movwf	7
  8294  042F  0836               	movf	??_sprintf,w
  8295  0430  0081               	movwf	1
  8296  0431  3001               	movlw	1
  8297  0432  00B6               	movwf	??_sprintf
  8298  0433  0836               	movf	??_sprintf,w
  8299  0434  07C1               	addwf	sprintf@sp,f
  8300                           
  8301                           ;doprnt.c: 1438: while(--width);
  8302  0435  30FF               	movlw	255
  8303  0436  07C2               	addwf	sprintf@width,f
  8304  0437  30FF               	movlw	255
  8305  0438  3DC3               	addwfc	sprintf@width+1,f
  8306  0439  2C25               	goto	l4008
  8307  043A                     l4016:	
  8308                           ;doprnt.c: 1476: }
  8309                           ;doprnt.c: 1481: while(prec--) {
  8310                           
  8311                           
  8312                           ;doprnt.c: 1485: {
  8313                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  8314  043A  3000               	movlw	0
  8315  043B  00A8               	movwf	?___llmod+3
  8316  043C  3000               	movlw	0
  8317  043D  00A7               	movwf	?___llmod+2
  8318  043E  3000               	movlw	0
  8319  043F  00A6               	movwf	?___llmod+1
  8320  0440  300A               	movlw	10
  8321  0441  00A5               	movwf	?___llmod
  8322  0442  3001               	movlw	low (_dpowers| (0+32768))
  8323  0443  0084               	movwf	4
  8324  0444  3088               	movlw	high (_dpowers| (0+32768))
  8325  0445  0085               	movwf	5
  8326  0446  0844               	movf	sprintf@prec,w
  8327  0447  00B6               	movwf	??_sprintf
  8328  0448  3001               	movlw	1
  8329  0449                     u3565:	
  8330  0449  35B6               	lslf	??_sprintf,f
  8331  044A  3EFF               	addlw	-1
  8332  044B  1D03               	skipz
  8333  044C  2C49               	goto	u3565
  8334  044D  3536               	lslf	??_sprintf,w
  8335  044E  0784               	addwf	4,f
  8336  044F  1803               	skipnc
  8337  0450  0A85               	incf	5,f
  8338  0451  3F00               	moviw [0]fsr0
  8339  0452  00F1               	movwf	?___lldiv
  8340  0453  3F01               	moviw [1]fsr0
  8341  0454  00F2               	movwf	?___lldiv+1
  8342  0455  3F02               	moviw [2]fsr0
  8343  0456  00F3               	movwf	?___lldiv+2
  8344  0457  3F03               	moviw [3]fsr0
  8345  0458  00F4               	movwf	?___lldiv+3
  8346  0459  0840               	movf	sprintf@_val+3,w
  8347  045A  00F8               	movwf	?___lldiv+7
  8348  045B  083F               	movf	sprintf@_val+2,w
  8349  045C  00F7               	movwf	?___lldiv+6
  8350  045D  083E               	movf	sprintf@_val+1,w
  8351  045E  00F6               	movwf	?___lldiv+5
  8352  045F  083D               	movf	sprintf@_val,w
  8353  0460  00F5               	movwf	?___lldiv+4
  8354  0461  318C  2407  3182   	fcall	___lldiv
  8355  0464  0874               	movf	?___lldiv+3,w
  8356  0465  0020               	movlb	0	; select bank0
  8357  0466  00AC               	movwf	?___llmod+7
  8358  0467  0873               	movf	?___lldiv+2,w
  8359  0468  00AB               	movwf	?___llmod+6
  8360  0469  0872               	movf	?___lldiv+1,w
  8361  046A  00AA               	movwf	?___llmod+5
  8362  046B  0871               	movf	?___lldiv,w
  8363  046C  00A9               	movwf	?___llmod+4
  8364  046D  318B  2330  3182   	fcall	___llmod
  8365  0470  0020               	movlb	0	; select bank0
  8366  0471  0825               	movf	?___llmod,w
  8367  0472  3E30               	addlw	48
  8368  0473  00B7               	movwf	??_sprintf+1
  8369  0474  0837               	movf	??_sprintf+1,w
  8370  0475  00C6               	movwf	sprintf@c
  8371                           
  8372                           ;doprnt.c: 1530: }
  8373                           ;doprnt.c: 1531: ((*sp++ = (c)));
  8374  0476  0846               	movf	sprintf@c,w
  8375  0477  00B6               	movwf	??_sprintf
  8376  0478  0841               	movf	sprintf@sp,w
  8377  0479  0086               	movwf	6
  8378  047A  3001               	movlw	1	; select bank2/3
  8379  047B  0087               	movwf	7
  8380  047C  0836               	movf	??_sprintf,w
  8381  047D  0081               	movwf	1
  8382  047E  3001               	movlw	1
  8383  047F  00B6               	movwf	??_sprintf
  8384  0480  0836               	movf	??_sprintf,w
  8385  0481  07C1               	addwf	sprintf@sp,f
  8386  0482                     l4022:	
  8387  0482  30FF               	movlw	255
  8388  0483  07C4               	addwf	sprintf@prec,f
  8389  0484  30FF               	movlw	255
  8390  0485  3DC5               	addwfc	sprintf@prec+1,f
  8391  0486  30FF               	movlw	255
  8392  0487  0645               	xorwf	sprintf@prec+1,w
  8393  0488  1D03               	skipz
  8394  0489  2C8C               	goto	u3575
  8395  048A  30FF               	movlw	255
  8396  048B  0644               	xorwf	sprintf@prec,w
  8397  048C                     u3575:	
  8398  048C  1903               	btfsc	3,2
  8399  048D  2ABF               	goto	l4024
  8400  048E  2C3A               	goto	l4016
  8401  048F                     l4026:	
  8402                           ;doprnt.c: 1532: }
  8403                           ;doprnt.c: 1540: }
  8404                           ;doprnt.c: 1542: alldone:
  8405                           
  8406                           
  8407                           ;doprnt.c: 1545: *sp = 0;
  8408  048F  0841               	movf	sprintf@sp,w
  8409  0490  0086               	movwf	6
  8410  0491  3001               	movlw	1	; select bank2/3
  8411  0492  0087               	movwf	7
  8412  0493  0181               	clrf	1
  8413  0494  0008               	return
  8414  0495                     __end_of_sprintf:	
  8415                           ;doprnt.c: 1547: return 0;
  8416                           ;	Return value of _sprintf is never used
  8417                           
  8418                           
  8419                           	psect	text35
  8420  168B                     __ptext35:	
  8421 ;; *************** function ___wmul *****************
  8422 ;; Defined at:
  8423 ;;		line 3 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\wmul.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;  multiplier      2    1[COMMON] unsigned int 
  8426 ;;  multiplicand    2    3[COMMON] unsigned int 
  8427 ;; Auto vars:     Size  Location     Type
  8428 ;;  product         2    5[COMMON] unsigned int 
  8429 ;; Return value:  Size  Location     Type
  8430 ;;                  2    1[COMMON] unsigned int 
  8431 ;; Registers used:
  8432 ;;		wreg, status,2, status,0
  8433 ;; Tracked objects:
  8434 ;;		On entry : 0/0
  8435 ;;		On exit  : 0/0
  8436 ;;		Unchanged: 0/0
  8437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8442 ;;Total ram usage:        6 bytes
  8443 ;; Hardware stack levels used:    1
  8444 ;; Hardware stack levels required when called:    2
  8445 ;; This function calls:
  8446 ;;		Nothing
  8447 ;; This function is called by:
  8448 ;;		_sprintf
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           
  8453                           ;psect for function ___wmul
  8454  168B                     ___wmul:	
  8455                           
  8456                           ;incstack = 0
  8457                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8458  168B  01F5               	clrf	___wmul@product
  8459  168C  01F6               	clrf	___wmul@product+1
  8460  168D                     l4450:	
  8461  168D  1C71               	btfss	___wmul@multiplier,0
  8462  168E  2E93               	goto	l1130
  8463  168F  0873               	movf	___wmul@multiplicand,w
  8464  1690  07F5               	addwf	___wmul@product,f
  8465  1691  0874               	movf	___wmul@multiplicand+1,w
  8466  1692  3DF6               	addwfc	___wmul@product+1,f
  8467  1693                     l1130:	
  8468  1693  3001               	movlw	1
  8469  1694                     u4635:	
  8470  1694  35F3               	lslf	___wmul@multiplicand,f
  8471  1695  0DF4               	rlf	___wmul@multiplicand+1,f
  8472  1696  0B89               	decfsz	9,f
  8473  1697  2E94               	goto	u4635
  8474  1698  3001               	movlw	1
  8475  1699                     u4645:	
  8476  1699  36F2               	lsrf	___wmul@multiplier+1,f
  8477  169A  0CF1               	rrf	___wmul@multiplier,f
  8478  169B  0B89               	decfsz	9,f
  8479  169C  2E99               	goto	u4645
  8480  169D  0872               	movf	___wmul@multiplier+1,w
  8481  169E  0471               	iorwf	___wmul@multiplier,w
  8482  169F  1D03               	skipz
  8483  16A0  2E8D               	goto	l4450
  8484  16A1  0876               	movf	___wmul@product+1,w
  8485  16A2  01F2               	clrf	?___wmul+1
  8486  16A3  07F2               	addwf	?___wmul+1,f
  8487  16A4  0875               	movf	___wmul@product,w
  8488  16A5  01F1               	clrf	?___wmul
  8489  16A6  07F1               	addwf	?___wmul,f
  8490  16A7  0008               	return
  8491  16A8                     __end_of___wmul:	
  8492                           
  8493                           	psect	text36
  8494  0B30                     __ptext36:	
  8495 ;; *************** function ___llmod *****************
  8496 ;; Defined at:
  8497 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\llmod.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;  divisor         4    5[BANK0 ] unsigned long 
  8500 ;;  dividend        4    9[BANK0 ] unsigned long 
  8501 ;; Auto vars:     Size  Location     Type
  8502 ;;  counter         1   11[COMMON] unsigned char 
  8503 ;; Return value:  Size  Location     Type
  8504 ;;                  4    5[BANK0 ] unsigned long 
  8505 ;; Registers used:
  8506 ;;		wreg, status,2, status,0
  8507 ;; Tracked objects:
  8508 ;;		On entry : 0/0
  8509 ;;		On exit  : 0/0
  8510 ;;		Unchanged: 0/0
  8511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8512 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;Total ram usage:       10 bytes
  8517 ;; Hardware stack levels used:    1
  8518 ;; Hardware stack levels required when called:    2
  8519 ;; This function calls:
  8520 ;;		Nothing
  8521 ;; This function is called by:
  8522 ;;		_sprintf
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function ___llmod
  8528  0B30                     ___llmod:	
  8529                           
  8530                           ;incstack = 0
  8531                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  8532  0B30  0020               	movlb	0	; select bank0
  8533  0B31  0828               	movf	___llmod@divisor+3,w
  8534  0B32  0427               	iorwf	___llmod@divisor+2,w
  8535  0B33  0426               	iorwf	___llmod@divisor+1,w
  8536  0B34  0425               	iorwf	___llmod@divisor,w
  8537  0B35  1903               	skipnz
  8538  0B36  2B6A               	goto	l4386
  8539  0B37  01FB               	clrf	___llmod@counter
  8540  0B38  0AFB               	incf	___llmod@counter,f
  8541  0B39                     l4376:	
  8542  0B39  1BA8               	btfsc	___llmod@divisor+3,7
  8543  0B3A  2B47               	goto	l4378
  8544  0B3B  3001               	movlw	1
  8545  0B3C                     u4425:	
  8546  0B3C  35A5               	lslf	___llmod@divisor,f
  8547  0B3D  0DA6               	rlf	___llmod@divisor+1,f
  8548  0B3E  0DA7               	rlf	___llmod@divisor+2,f
  8549  0B3F  0DA8               	rlf	___llmod@divisor+3,f
  8550  0B40  0B89               	decfsz	9,f
  8551  0B41  2B3C               	goto	u4425
  8552  0B42  3001               	movlw	1
  8553  0B43  00FA               	movwf	??___llmod
  8554  0B44  087A               	movf	??___llmod,w
  8555  0B45  07FB               	addwf	___llmod@counter,f
  8556  0B46  2B39               	goto	l4376
  8557  0B47                     l4378:	
  8558  0B47  0828               	movf	___llmod@divisor+3,w
  8559  0B48  022C               	subwf	___llmod@dividend+3,w
  8560  0B49  1D03               	skipz
  8561  0B4A  2B55               	goto	u4445
  8562  0B4B  0827               	movf	___llmod@divisor+2,w
  8563  0B4C  022B               	subwf	___llmod@dividend+2,w
  8564  0B4D  1D03               	skipz
  8565  0B4E  2B55               	goto	u4445
  8566  0B4F  0826               	movf	___llmod@divisor+1,w
  8567  0B50  022A               	subwf	___llmod@dividend+1,w
  8568  0B51  1D03               	skipz
  8569  0B52  2B55               	goto	u4445
  8570  0B53  0825               	movf	___llmod@divisor,w
  8571  0B54  0229               	subwf	___llmod@dividend,w
  8572  0B55                     u4445:	
  8573  0B55  1C03               	skipc
  8574  0B56  2B5F               	goto	l4382
  8575  0B57  0825               	movf	___llmod@divisor,w
  8576  0B58  02A9               	subwf	___llmod@dividend,f
  8577  0B59  0826               	movf	___llmod@divisor+1,w
  8578  0B5A  3BAA               	subwfb	___llmod@dividend+1,f
  8579  0B5B  0827               	movf	___llmod@divisor+2,w
  8580  0B5C  3BAB               	subwfb	___llmod@dividend+2,f
  8581  0B5D  0828               	movf	___llmod@divisor+3,w
  8582  0B5E  3BAC               	subwfb	___llmod@dividend+3,f
  8583  0B5F                     l4382:	
  8584  0B5F  3001               	movlw	1
  8585  0B60                     u4455:	
  8586  0B60  36A8               	lsrf	___llmod@divisor+3,f
  8587  0B61  0CA7               	rrf	___llmod@divisor+2,f
  8588  0B62  0CA6               	rrf	___llmod@divisor+1,f
  8589  0B63  0CA5               	rrf	___llmod@divisor,f
  8590  0B64  0B89               	decfsz	9,f
  8591  0B65  2B60               	goto	u4455
  8592  0B66  3001               	movlw	1
  8593  0B67  02FB               	subwf	___llmod@counter,f
  8594  0B68  1D03               	btfss	3,2
  8595  0B69  2B47               	goto	l4378
  8596  0B6A                     l4386:	
  8597  0B6A  082C               	movf	___llmod@dividend+3,w
  8598  0B6B  00A8               	movwf	?___llmod+3
  8599  0B6C  082B               	movf	___llmod@dividend+2,w
  8600  0B6D  00A7               	movwf	?___llmod+2
  8601  0B6E  082A               	movf	___llmod@dividend+1,w
  8602  0B6F  00A6               	movwf	?___llmod+1
  8603  0B70  0829               	movf	___llmod@dividend,w
  8604  0B71  00A5               	movwf	?___llmod
  8605  0B72  0008               	return
  8606  0B73                     __end_of___llmod:	
  8607                           
  8608                           	psect	text37
  8609  0C07                     __ptext37:	
  8610 ;; *************** function ___lldiv *****************
  8611 ;; Defined at:
  8612 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lldiv.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;  divisor         4    1[COMMON] unsigned long 
  8615 ;;  dividend        4    5[COMMON] unsigned long 
  8616 ;; Auto vars:     Size  Location     Type
  8617 ;;  quotient        4    0[BANK0 ] unsigned long 
  8618 ;;  counter         1    4[BANK0 ] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  4    1[COMMON] unsigned long 
  8621 ;; Registers used:
  8622 ;;		wreg, status,2, status,0
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:       14 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    2
  8635 ;; This function calls:
  8636 ;;		Nothing
  8637 ;; This function is called by:
  8638 ;;		_sprintf
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           
  8643                           ;psect for function ___lldiv
  8644  0C07                     ___lldiv:	
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8648  0C07  3000               	movlw	0
  8649  0C08  0020               	movlb	0	; select bank0
  8650  0C09  00A3               	movwf	___lldiv@quotient+3
  8651  0C0A  3000               	movlw	0
  8652  0C0B  00A2               	movwf	___lldiv@quotient+2
  8653  0C0C  3000               	movlw	0
  8654  0C0D  00A1               	movwf	___lldiv@quotient+1
  8655  0C0E  3000               	movlw	0
  8656  0C0F  00A0               	movwf	___lldiv@quotient
  8657  0C10  0874               	movf	___lldiv@divisor+3,w
  8658  0C11  0473               	iorwf	___lldiv@divisor+2,w
  8659  0C12  0472               	iorwf	___lldiv@divisor+1,w
  8660  0C13  0471               	iorwf	___lldiv@divisor,w
  8661  0C14  1903               	skipnz
  8662  0C15  2C51               	goto	l4366
  8663  0C16  01A4               	clrf	___lldiv@counter
  8664  0C17  0AA4               	incf	___lldiv@counter,f
  8665  0C18                     l4352:	
  8666  0C18  1BF4               	btfsc	___lldiv@divisor+3,7
  8667  0C19  2C26               	goto	l4354
  8668  0C1A  3001               	movlw	1
  8669  0C1B                     u4355:	
  8670  0C1B  35F1               	lslf	___lldiv@divisor,f
  8671  0C1C  0DF2               	rlf	___lldiv@divisor+1,f
  8672  0C1D  0DF3               	rlf	___lldiv@divisor+2,f
  8673  0C1E  0DF4               	rlf	___lldiv@divisor+3,f
  8674  0C1F  0B89               	decfsz	9,f
  8675  0C20  2C1B               	goto	u4355
  8676  0C21  3001               	movlw	1
  8677  0C22  00F9               	movwf	??___lldiv
  8678  0C23  0879               	movf	??___lldiv,w
  8679  0C24  07A4               	addwf	___lldiv@counter,f
  8680  0C25  2C18               	goto	l4352
  8681  0C26                     l4354:	
  8682  0C26  3001               	movlw	1
  8683  0C27                     u4375:	
  8684  0C27  35A0               	lslf	___lldiv@quotient,f
  8685  0C28  0DA1               	rlf	___lldiv@quotient+1,f
  8686  0C29  0DA2               	rlf	___lldiv@quotient+2,f
  8687  0C2A  0DA3               	rlf	___lldiv@quotient+3,f
  8688  0C2B  0B89               	decfsz	9,f
  8689  0C2C  2C27               	goto	u4375
  8690  0C2D  0874               	movf	___lldiv@divisor+3,w
  8691  0C2E  0278               	subwf	___lldiv@dividend+3,w
  8692  0C2F  1D03               	skipz
  8693  0C30  2C3B               	goto	u4385
  8694  0C31  0873               	movf	___lldiv@divisor+2,w
  8695  0C32  0277               	subwf	___lldiv@dividend+2,w
  8696  0C33  1D03               	skipz
  8697  0C34  2C3B               	goto	u4385
  8698  0C35  0872               	movf	___lldiv@divisor+1,w
  8699  0C36  0276               	subwf	___lldiv@dividend+1,w
  8700  0C37  1D03               	skipz
  8701  0C38  2C3B               	goto	u4385
  8702  0C39  0871               	movf	___lldiv@divisor,w
  8703  0C3A  0275               	subwf	___lldiv@dividend,w
  8704  0C3B                     u4385:	
  8705  0C3B  1C03               	skipc
  8706  0C3C  2C46               	goto	l4362
  8707  0C3D  0871               	movf	___lldiv@divisor,w
  8708  0C3E  02F5               	subwf	___lldiv@dividend,f
  8709  0C3F  0872               	movf	___lldiv@divisor+1,w
  8710  0C40  3BF6               	subwfb	___lldiv@dividend+1,f
  8711  0C41  0873               	movf	___lldiv@divisor+2,w
  8712  0C42  3BF7               	subwfb	___lldiv@dividend+2,f
  8713  0C43  0874               	movf	___lldiv@divisor+3,w
  8714  0C44  3BF8               	subwfb	___lldiv@dividend+3,f
  8715  0C45  1420               	bsf	___lldiv@quotient,0
  8716  0C46                     l4362:	
  8717  0C46  3001               	movlw	1
  8718  0C47                     u4395:	
  8719  0C47  36F4               	lsrf	___lldiv@divisor+3,f
  8720  0C48  0CF3               	rrf	___lldiv@divisor+2,f
  8721  0C49  0CF2               	rrf	___lldiv@divisor+1,f
  8722  0C4A  0CF1               	rrf	___lldiv@divisor,f
  8723  0C4B  0B89               	decfsz	9,f
  8724  0C4C  2C47               	goto	u4395
  8725  0C4D  3001               	movlw	1
  8726  0C4E  02A4               	subwf	___lldiv@counter,f
  8727  0C4F  1D03               	btfss	3,2
  8728  0C50  2C26               	goto	l4354
  8729  0C51                     l4366:	
  8730  0C51  0823               	movf	___lldiv@quotient+3,w
  8731  0C52  00F4               	movwf	?___lldiv+3
  8732  0C53  0822               	movf	___lldiv@quotient+2,w
  8733  0C54  00F3               	movwf	?___lldiv+2
  8734  0C55  0821               	movf	___lldiv@quotient+1,w
  8735  0C56  00F2               	movwf	?___lldiv+1
  8736  0C57  0820               	movf	___lldiv@quotient,w
  8737  0C58  00F1               	movwf	?___lldiv
  8738  0C59  0008               	return
  8739  0C5A                     __end_of___lldiv:	
  8740                           
  8741                           	psect	text38
  8742  14E8                     __ptext38:	
  8743 ;; *************** function _isdigit *****************
  8744 ;; Defined at:
  8745 ;;		line 13 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\isdigit.c"
  8746 ;; Parameters:    Size  Location     Type
  8747 ;;  c               1    wreg     unsigned char 
  8748 ;; Auto vars:     Size  Location     Type
  8749 ;;  c               1    2[COMMON] unsigned char 
  8750 ;; Return value:  Size  Location     Type
  8751 ;;		None               void
  8752 ;; Registers used:
  8753 ;;		wreg, status,2, status,0
  8754 ;; Tracked objects:
  8755 ;;		On entry : 0/0
  8756 ;;		On exit  : 0/0
  8757 ;;		Unchanged: 0/0
  8758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;Total ram usage:        2 bytes
  8764 ;; Hardware stack levels used:    1
  8765 ;; Hardware stack levels required when called:    2
  8766 ;; This function calls:
  8767 ;;		Nothing
  8768 ;; This function is called by:
  8769 ;;		_sprintf
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           
  8774                           ;psect for function _isdigit
  8775  14E8                     _isdigit:	
  8776                           
  8777                           ;incstack = 0
  8778                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  8779                           ;isdigit@c stored from wreg
  8780  14E8  00F2               	movwf	isdigit@c
  8781  14E9  01F1               	clrf	_isdigit$1094
  8782  14EA  303A               	movlw	58
  8783  14EB  0272               	subwf	isdigit@c,w
  8784  14EC  1803               	skipnc
  8785  14ED  2CF4               	goto	l4038
  8786  14EE  3030               	movlw	48
  8787  14EF  0272               	subwf	isdigit@c,w
  8788  14F0  1C03               	skipc
  8789  14F1  2CF4               	goto	l4038
  8790  14F2  01F1               	clrf	_isdigit$1094
  8791  14F3  0AF1               	incf	_isdigit$1094,f
  8792  14F4                     l4038:	
  8793  14F4  0C71               	rrf	_isdigit$1094,w
  8794  14F5  0008               	return
  8795  14F6                     __end_of_isdigit:	
  8796                           
  8797                           	psect	text39
  8798  0850                     __ptext39:	
  8799 ;; *************** function _itoa *****************
  8800 ;; Defined at:
  8801 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\itoa.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;  buf             1    wreg     PTR unsigned char 
  8804 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  8805 ;;  val             2    8[BANK0 ] int 
  8806 ;;  base            2   10[BANK0 ] int 
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  buf             1   13[BANK0 ] PTR unsigned char 
  8809 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  8810 ;;  cp              1   12[BANK0 ] PTR unsigned char 
  8811 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      PTR unsigned char 
  8814 ;; Registers used:
  8815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8821 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;Total ram usage:        7 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:    4
  8828 ;; This function calls:
  8829 ;;		_utoa
  8830 ;; This function is called by:
  8831 ;;		_RTXUpdateDisplay
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _itoa
  8837  0850                     _itoa:	
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8841                           ;itoa@buf stored from wreg
  8842  0850  0020               	movlb	0	; select bank0
  8843  0851  00AD               	movwf	itoa@buf
  8844  0852  082D               	movf	itoa@buf,w
  8845  0853  00FA               	movwf	??_itoa
  8846  0854  087A               	movf	??_itoa,w
  8847  0855  00AC               	movwf	itoa@cp
  8848  0856  1FA9               	btfss	itoa@val+1,7
  8849  0857  2868               	goto	l5026
  8850  0858  302D               	movlw	45
  8851  0859  00FA               	movwf	??_itoa
  8852  085A  082D               	movf	itoa@buf,w
  8853  085B  0086               	movwf	6
  8854  085C  0187               	clrf	7
  8855  085D  087A               	movf	??_itoa,w
  8856  085E  0081               	movwf	1
  8857  085F  3001               	movlw	1
  8858  0860  00FA               	movwf	??_itoa
  8859  0861  087A               	movf	??_itoa,w
  8860  0862  07AD               	addwf	itoa@buf,f
  8861  0863  09A8               	comf	itoa@val,f
  8862  0864  09A9               	comf	itoa@val+1,f
  8863  0865  0AA8               	incf	itoa@val,f
  8864  0866  1903               	skipnz
  8865  0867  0AA9               	incf	itoa@val+1,f
  8866  0868                     l5026:	
  8867  0868  0829               	movf	itoa@val+1,w
  8868  0869  01A1               	clrf	?_utoa+1
  8869  086A  07A1               	addwf	?_utoa+1,f
  8870  086B  0828               	movf	itoa@val,w
  8871  086C  01A0               	clrf	?_utoa
  8872  086D  07A0               	addwf	?_utoa,f
  8873  086E  082B               	movf	itoa@base+1,w
  8874  086F  01A3               	clrf	?_utoa+3
  8875  0870  07A3               	addwf	?_utoa+3,f
  8876  0871  082A               	movf	itoa@base,w
  8877  0872  01A2               	clrf	?_utoa+2
  8878  0873  07A2               	addwf	?_utoa+2,f
  8879  0874  082D               	movf	itoa@buf,w
  8880  0875  318D  25BA         	fcall	_utoa
  8881  0877  0008               	return
  8882  0878                     __end_of_itoa:	
  8883                           ;	Return value of _itoa is never used
  8884                           
  8885                           
  8886                           	psect	text40
  8887  0DBA                     __ptext40:	
  8888 ;; *************** function _utoa *****************
  8889 ;; Defined at:
  8890 ;;		line 18 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\itoa.c"
  8891 ;; Parameters:    Size  Location     Type
  8892 ;;  buf             1    wreg     PTR unsigned char 
  8893 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  8894 ;;  val             2    0[BANK0 ] unsigned int 
  8895 ;;  base            2    2[BANK0 ] int 
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  8898 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  8899 ;;  v               2    4[BANK0 ] unsigned int 
  8900 ;;  c               1    6[BANK0 ] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      PTR unsigned char 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        9 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    3
  8917 ;; This function calls:
  8918 ;;		___lwdiv
  8919 ;;		___lwmod
  8920 ;; This function is called by:
  8921 ;;		_itoa
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           
  8926                           ;psect for function _utoa
  8927  0DBA                     _utoa:	
  8928                           
  8929                           ;incstack = 0
  8930                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8931                           ;utoa@buf stored from wreg
  8932  0DBA  0020               	movlb	0	; select bank0
  8933  0DBB  00A7               	movwf	utoa@buf
  8934  0DBC  0821               	movf	utoa@val+1,w
  8935  0DBD  01A5               	clrf	utoa@v+1
  8936  0DBE  07A5               	addwf	utoa@v+1,f
  8937  0DBF  0820               	movf	utoa@val,w
  8938  0DC0  01A4               	clrf	utoa@v
  8939  0DC1  07A4               	addwf	utoa@v,f
  8940  0DC2                     l5368:	
  8941  0DC2  0823               	movf	utoa@base+1,w
  8942  0DC3  01F2               	clrf	?___lwdiv+1
  8943  0DC4  07F2               	addwf	?___lwdiv+1,f
  8944  0DC5  0822               	movf	utoa@base,w
  8945  0DC6  01F1               	clrf	?___lwdiv
  8946  0DC7  07F1               	addwf	?___lwdiv,f
  8947  0DC8  0825               	movf	utoa@v+1,w
  8948  0DC9  01F4               	clrf	?___lwdiv+3
  8949  0DCA  07F4               	addwf	?___lwdiv+3,f
  8950  0DCB  0824               	movf	utoa@v,w
  8951  0DCC  01F3               	clrf	?___lwdiv+2
  8952  0DCD  07F3               	addwf	?___lwdiv+2,f
  8953  0DCE  318A  2241  318D   	fcall	___lwdiv
  8954  0DD1  0872               	movf	?___lwdiv+1,w
  8955  0DD2  0020               	movlb	0	; select bank0
  8956  0DD3  01A5               	clrf	utoa@v+1
  8957  0DD4  07A5               	addwf	utoa@v+1,f
  8958  0DD5  0871               	movf	?___lwdiv,w
  8959  0DD6  01A4               	clrf	utoa@v
  8960  0DD7  07A4               	addwf	utoa@v,f
  8961  0DD8  3001               	movlw	1
  8962  0DD9  00F9               	movwf	??_utoa
  8963  0DDA  0879               	movf	??_utoa,w
  8964  0DDB  07A7               	addwf	utoa@buf,f
  8965  0DDC  0825               	movf	utoa@v+1,w
  8966  0DDD  0424               	iorwf	utoa@v,w
  8967  0DDE  1D03               	skipz
  8968  0DDF  2DC2               	goto	l5368
  8969  0DE0  0827               	movf	utoa@buf,w
  8970  0DE1  0086               	movwf	6
  8971  0DE2  0187               	clrf	7
  8972  0DE3  0181               	clrf	1
  8973  0DE4  3001               	movlw	1
  8974  0DE5  02A7               	subwf	utoa@buf,f
  8975  0DE6                     l5378:	
  8976  0DE6  0823               	movf	utoa@base+1,w
  8977  0DE7  01F2               	clrf	?___lwmod+1
  8978  0DE8  07F2               	addwf	?___lwmod+1,f
  8979  0DE9  0822               	movf	utoa@base,w
  8980  0DEA  01F1               	clrf	?___lwmod
  8981  0DEB  07F1               	addwf	?___lwmod,f
  8982  0DEC  0821               	movf	utoa@val+1,w
  8983  0DED  01F4               	clrf	?___lwmod+3
  8984  0DEE  07F4               	addwf	?___lwmod+3,f
  8985  0DEF  0820               	movf	utoa@val,w
  8986  0DF0  01F3               	clrf	?___lwmod+2
  8987  0DF1  07F3               	addwf	?___lwmod+2,f
  8988  0DF2  3189  214D  318D   	fcall	___lwmod
  8989  0DF5  0871               	movf	?___lwmod,w
  8990  0DF6  00F9               	movwf	??_utoa
  8991  0DF7  0879               	movf	??_utoa,w
  8992  0DF8  0020               	movlb	0	; select bank0
  8993  0DF9  00A6               	movwf	utoa@c
  8994  0DFA  0823               	movf	utoa@base+1,w
  8995  0DFB  01F2               	clrf	?___lwdiv+1
  8996  0DFC  07F2               	addwf	?___lwdiv+1,f
  8997  0DFD  0822               	movf	utoa@base,w
  8998  0DFE  01F1               	clrf	?___lwdiv
  8999  0DFF  07F1               	addwf	?___lwdiv,f
  9000  0E00  0821               	movf	utoa@val+1,w
  9001  0E01  01F4               	clrf	?___lwdiv+3
  9002  0E02  07F4               	addwf	?___lwdiv+3,f
  9003  0E03  0820               	movf	utoa@val,w
  9004  0E04  01F3               	clrf	?___lwdiv+2
  9005  0E05  07F3               	addwf	?___lwdiv+2,f
  9006  0E06  318A  2241  318D   	fcall	___lwdiv
  9007  0E09  0872               	movf	?___lwdiv+1,w
  9008  0E0A  0020               	movlb	0	; select bank0
  9009  0E0B  01A1               	clrf	utoa@val+1
  9010  0E0C  07A1               	addwf	utoa@val+1,f
  9011  0E0D  0871               	movf	?___lwdiv,w
  9012  0E0E  01A0               	clrf	utoa@val
  9013  0E0F  07A0               	addwf	utoa@val,f
  9014  0E10  300A               	movlw	10
  9015  0E11  0226               	subwf	utoa@c,w
  9016  0E12  1C03               	skipc
  9017  0E13  2E18               	goto	l1013
  9018  0E14  3007               	movlw	7
  9019  0E15  00F9               	movwf	??_utoa
  9020  0E16  0879               	movf	??_utoa,w
  9021  0E17  07A6               	addwf	utoa@c,f
  9022  0E18                     l1013:	
  9023  0E18  3030               	movlw	48
  9024  0E19  00F9               	movwf	??_utoa
  9025  0E1A  0879               	movf	??_utoa,w
  9026  0E1B  07A6               	addwf	utoa@c,f
  9027  0E1C  0826               	movf	utoa@c,w
  9028  0E1D  00F9               	movwf	??_utoa
  9029  0E1E  0827               	movf	utoa@buf,w
  9030  0E1F  0086               	movwf	6
  9031  0E20  0187               	clrf	7
  9032  0E21  0879               	movf	??_utoa,w
  9033  0E22  0081               	movwf	1
  9034  0E23  3001               	movlw	1
  9035  0E24  02A7               	subwf	utoa@buf,f
  9036  0E25  0821               	movf	utoa@val+1,w
  9037  0E26  0420               	iorwf	utoa@val,w
  9038  0E27  1D03               	skipz
  9039  0E28  2DE6               	goto	l5378
  9040                           
  9041                           ;	Return value of _utoa is never used
  9042  0E29  3001               	movlw	1
  9043  0E2A  00F9               	movwf	??_utoa
  9044  0E2B  0879               	movf	??_utoa,w
  9045  0E2C  07A7               	addwf	utoa@buf,f
  9046  0E2D  0008               	return
  9047  0E2E                     __end_of_utoa:	
  9048                           
  9049                           	psect	text41
  9050  094D                     __ptext41:	
  9051 ;; *************** function ___lwmod *****************
  9052 ;; Defined at:
  9053 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwmod.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;  divisor         2    1[COMMON] unsigned int 
  9056 ;;  dividend        2    3[COMMON] unsigned int 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  counter         1    6[COMMON] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  2    1[COMMON] unsigned int 
  9061 ;; Registers used:
  9062 ;;		wreg, status,2, status,0
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;Total ram usage:        6 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    2
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_utoa
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function ___lwmod
  9084  094D                     ___lwmod:	
  9085                           
  9086                           ;incstack = 0
  9087                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9088  094D  0872               	movf	___lwmod@divisor+1,w
  9089  094E  0471               	iorwf	___lwmod@divisor,w
  9090  094F  1903               	skipnz
  9091  0950  2974               	goto	l4444
  9092  0951  01F6               	clrf	___lwmod@counter
  9093  0952  0AF6               	incf	___lwmod@counter,f
  9094  0953                     l4434:	
  9095  0953  1BF2               	btfsc	___lwmod@divisor+1,7
  9096  0954  295F               	goto	l4436
  9097  0955  3001               	movlw	1
  9098  0956                     u4575:	
  9099  0956  35F1               	lslf	___lwmod@divisor,f
  9100  0957  0DF2               	rlf	___lwmod@divisor+1,f
  9101  0958  0B89               	decfsz	9,f
  9102  0959  2956               	goto	u4575
  9103  095A  3001               	movlw	1
  9104  095B  00F5               	movwf	??___lwmod
  9105  095C  0875               	movf	??___lwmod,w
  9106  095D  07F6               	addwf	___lwmod@counter,f
  9107  095E  2953               	goto	l4434
  9108  095F                     l4436:	
  9109  095F  0872               	movf	___lwmod@divisor+1,w
  9110  0960  0274               	subwf	___lwmod@dividend+1,w
  9111  0961  1D03               	skipz
  9112  0962  2965               	goto	u4595
  9113  0963  0871               	movf	___lwmod@divisor,w
  9114  0964  0273               	subwf	___lwmod@dividend,w
  9115  0965                     u4595:	
  9116  0965  1C03               	skipc
  9117  0966  296B               	goto	l4440
  9118  0967  0871               	movf	___lwmod@divisor,w
  9119  0968  02F3               	subwf	___lwmod@dividend,f
  9120  0969  0872               	movf	___lwmod@divisor+1,w
  9121  096A  3BF4               	subwfb	___lwmod@dividend+1,f
  9122  096B                     l4440:	
  9123  096B  3001               	movlw	1
  9124  096C                     u4605:	
  9125  096C  36F2               	lsrf	___lwmod@divisor+1,f
  9126  096D  0CF1               	rrf	___lwmod@divisor,f
  9127  096E  0B89               	decfsz	9,f
  9128  096F  296C               	goto	u4605
  9129  0970  3001               	movlw	1
  9130  0971  02F6               	subwf	___lwmod@counter,f
  9131  0972  1D03               	btfss	3,2
  9132  0973  295F               	goto	l4436
  9133  0974                     l4444:	
  9134  0974  0874               	movf	___lwmod@dividend+1,w
  9135  0975  01F2               	clrf	?___lwmod+1
  9136  0976  07F2               	addwf	?___lwmod+1,f
  9137  0977  0873               	movf	___lwmod@dividend,w
  9138  0978  01F1               	clrf	?___lwmod
  9139  0979  07F1               	addwf	?___lwmod,f
  9140  097A  0008               	return
  9141  097B                     __end_of___lwmod:	
  9142                           
  9143                           	psect	text42
  9144  0A41                     __ptext42:	
  9145 ;; *************** function ___lwdiv *****************
  9146 ;; Defined at:
  9147 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  divisor         2    1[COMMON] unsigned int 
  9150 ;;  dividend        2    3[COMMON] unsigned int 
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;  quotient        2    6[COMMON] unsigned int 
  9153 ;;  counter         1    8[COMMON] unsigned char 
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  2    1[COMMON] unsigned int 
  9156 ;; Registers used:
  9157 ;;		wreg, status,2, status,0
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9163 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;Total ram usage:        8 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; Hardware stack levels required when called:    2
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_utoa
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function ___lwdiv
  9179  0A41                     ___lwdiv:	
  9180                           
  9181                           ;incstack = 0
  9182                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9183  0A41  01F6               	clrf	___lwdiv@quotient
  9184  0A42  01F7               	clrf	___lwdiv@quotient+1
  9185  0A43  0872               	movf	___lwdiv@divisor+1,w
  9186  0A44  0471               	iorwf	___lwdiv@divisor,w
  9187  0A45  1903               	skipnz
  9188  0A46  2A70               	goto	l4422
  9189  0A47  01F8               	clrf	___lwdiv@counter
  9190  0A48  0AF8               	incf	___lwdiv@counter,f
  9191  0A49                     l4410:	
  9192  0A49  1BF2               	btfsc	___lwdiv@divisor+1,7
  9193  0A4A  2A55               	goto	l4412
  9194  0A4B  3001               	movlw	1
  9195  0A4C                     u4505:	
  9196  0A4C  35F1               	lslf	___lwdiv@divisor,f
  9197  0A4D  0DF2               	rlf	___lwdiv@divisor+1,f
  9198  0A4E  0B89               	decfsz	9,f
  9199  0A4F  2A4C               	goto	u4505
  9200  0A50  3001               	movlw	1
  9201  0A51  00F5               	movwf	??___lwdiv
  9202  0A52  0875               	movf	??___lwdiv,w
  9203  0A53  07F8               	addwf	___lwdiv@counter,f
  9204  0A54  2A49               	goto	l4410
  9205  0A55                     l4412:	
  9206  0A55  3001               	movlw	1
  9207  0A56                     u4525:	
  9208  0A56  35F6               	lslf	___lwdiv@quotient,f
  9209  0A57  0DF7               	rlf	___lwdiv@quotient+1,f
  9210  0A58  0B89               	decfsz	9,f
  9211  0A59  2A56               	goto	u4525
  9212  0A5A  0872               	movf	___lwdiv@divisor+1,w
  9213  0A5B  0274               	subwf	___lwdiv@dividend+1,w
  9214  0A5C  1D03               	skipz
  9215  0A5D  2A60               	goto	u4535
  9216  0A5E  0871               	movf	___lwdiv@divisor,w
  9217  0A5F  0273               	subwf	___lwdiv@dividend,w
  9218  0A60                     u4535:	
  9219  0A60  1C03               	skipc
  9220  0A61  2A67               	goto	l4418
  9221  0A62  0871               	movf	___lwdiv@divisor,w
  9222  0A63  02F3               	subwf	___lwdiv@dividend,f
  9223  0A64  0872               	movf	___lwdiv@divisor+1,w
  9224  0A65  3BF4               	subwfb	___lwdiv@dividend+1,f
  9225  0A66  1476               	bsf	___lwdiv@quotient,0
  9226  0A67                     l4418:	
  9227  0A67  3001               	movlw	1
  9228  0A68                     u4545:	
  9229  0A68  36F2               	lsrf	___lwdiv@divisor+1,f
  9230  0A69  0CF1               	rrf	___lwdiv@divisor,f
  9231  0A6A  0B89               	decfsz	9,f
  9232  0A6B  2A68               	goto	u4545
  9233  0A6C  3001               	movlw	1
  9234  0A6D  02F8               	subwf	___lwdiv@counter,f
  9235  0A6E  1D03               	btfss	3,2
  9236  0A6F  2A55               	goto	l4412
  9237  0A70                     l4422:	
  9238  0A70  0877               	movf	___lwdiv@quotient+1,w
  9239  0A71  01F2               	clrf	?___lwdiv+1
  9240  0A72  07F2               	addwf	?___lwdiv+1,f
  9241  0A73  0876               	movf	___lwdiv@quotient,w
  9242  0A74  01F1               	clrf	?___lwdiv
  9243  0A75  07F1               	addwf	?___lwdiv,f
  9244  0A76  0008               	return
  9245  0A77                     __end_of___lwdiv:	
  9246                           
  9247                           	psect	text43
  9248  0B73                     __ptext43:	
  9249 ;; *************** function _DPYSendStr *****************
  9250 ;; Defined at:
  9251 ;;		line 136 in file "DPY.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;  row             1    wreg     unsigned char 
  9254 ;;  col             1    0[BANK0 ] unsigned char 
  9255 ;;  data            1    1[BANK0 ] PTR unsigned char 
  9256 ;;		 -> RTXUpdateDisplay@strText(16), RTXUpdateDisplay@strTitle(16), 
  9257 ;;  len             1    2[BANK0 ] unsigned char 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  row             1    5[BANK0 ] unsigned char 
  9260 ;;  i               1    4[BANK0 ] unsigned char 
  9261 ;; Return value:  Size  Location     Type
  9262 ;;		None               void
  9263 ;; Registers used:
  9264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        6 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:    5
  9277 ;; This function calls:
  9278 ;;		_DPYSetCur
  9279 ;;		_DPYSendChar
  9280 ;;		_DPYIsBusy
  9281 ;; This function is called by:
  9282 ;;		_RTXUpdateDisplay
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           
  9287                           ;psect for function _DPYSendStr
  9288  0B73                     _DPYSendStr:	
  9289                           
  9290                           ;incstack = 0
  9291                           ; Regs used in _DPYSendStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9292                           ;DPYSendStr@row stored from wreg
  9293  0B73  0020               	movlb	0	; select bank0
  9294  0B74  00A5               	movwf	DPYSendStr@row
  9295                           
  9296                           ;DPY.c: 137: unsigned char i;
  9297                           ;DPY.c: 140: DPYSetCur(row,col);
  9298  0B75  0820               	movf	DPYSendStr@col,w
  9299  0B76  00A3               	movwf	??_DPYSendStr
  9300  0B77  0823               	movf	??_DPYSendStr,w
  9301  0B78  00F8               	movwf	?_DPYSetCur
  9302  0B79  0825               	movf	DPYSendStr@row,w
  9303  0B7A  3195  25BD  318B   	fcall	_DPYSetCur
  9304                           
  9305                           ;DPY.c: 142: for(i=0;i<len;i++)
  9306  0B7D  0020               	movlb	0	; select bank0
  9307  0B7E  01A4               	clrf	DPYSendStr@i
  9308  0B7F                     l4690:	
  9309  0B7F  0822               	movf	DPYSendStr@len,w
  9310  0B80  0224               	subwf	DPYSendStr@i,w
  9311  0B81  1803               	btfsc	3,0
  9312  0B82  0008               	return
  9313                           
  9314                           ;DPY.c: 143: {
  9315                           ;DPY.c: 145: DPYSendChar((*(data+i)));
  9316  0B83  0824               	movf	DPYSendStr@i,w
  9317  0B84  0721               	addwf	DPYSendStr@data,w
  9318  0B85  00A3               	movwf	??_DPYSendStr
  9319  0B86  0823               	movf	??_DPYSendStr,w
  9320  0B87  0086               	movwf	6
  9321  0B88  0187               	clrf	7
  9322  0B89  0801               	movf	1,w
  9323  0B8A  3194  24BE  318B   	fcall	_DPYSendChar
  9324  0B8D                     l4670:	
  9325                           ;DPY.c: 146: while(DPYIsBusy())
  9326                           
  9327  0B8D  318A  22F0  318B   	fcall	_DPYIsBusy
  9328  0B90  3800               	iorlw	0
  9329  0B91  1903               	btfsc	3,2
  9330  0B92  2B95               	goto	l4672
  9331                           
  9332                           ;DPY.c: 147: _nop();
  9333  0B93  0000               	nop
  9334  0B94  2B8D               	goto	l4670
  9335  0B95                     l4672:	
  9336                           
  9337                           ;DPY.c: 150: col++;
  9338  0B95  3001               	movlw	1
  9339  0B96  0020               	movlb	0	; select bank0
  9340  0B97  00A3               	movwf	??_DPYSendStr
  9341  0B98  0823               	movf	??_DPYSendStr,w
  9342  0B99  07A0               	addwf	DPYSendStr@col,f
  9343                           
  9344                           ;DPY.c: 151: if(col==16)
  9345  0B9A  0820               	movf	DPYSendStr@col,w
  9346  0B9B  3A10               	xorlw	16
  9347  0B9C  1D03               	skipz
  9348  0B9D  2BA4               	goto	l4682
  9349                           
  9350                           ;DPY.c: 152: {
  9351                           ;DPY.c: 153: col=0;
  9352  0B9E  01A0               	clrf	DPYSendStr@col
  9353                           
  9354                           ;DPY.c: 154: row++;
  9355  0B9F  3001               	movlw	1
  9356  0BA0  00A3               	movwf	??_DPYSendStr
  9357  0BA1  0823               	movf	??_DPYSendStr,w
  9358  0BA2  07A5               	addwf	DPYSendStr@row,f
  9359  0BA3  2BAB               	goto	L5
  9360  0BA4                     l4682:	
  9361                           ;DPY.c: 156: }
  9362                           
  9363                           ;DPY.c: 155: DPYSetCur(row,col);
  9364                           
  9365                           
  9366                           ;DPY.c: 157: else if(col==32)
  9367  0BA4  0020               	movlb	0	; select bank0
  9368  0BA5  0820               	movf	DPYSendStr@col,w
  9369  0BA6  3A20               	xorlw	32
  9370  0BA7  1D03               	skipz
  9371  0BA8  2BB3               	goto	l4688
  9372                           
  9373                           ;DPY.c: 158: {
  9374                           ;DPY.c: 159: col=0;
  9375  0BA9  01A0               	clrf	DPYSendStr@col
  9376                           
  9377                           ;DPY.c: 160: row=0;
  9378  0BAA  01A5               	clrf	DPYSendStr@row
  9379  0BAB                     L5:	
  9380                           
  9381                           ;DPY.c: 161: DPYSetCur(row,col);
  9382  0BAB  0820               	movf	DPYSendStr@col,w
  9383  0BAC  00A3               	movwf	??_DPYSendStr
  9384  0BAD  0823               	movf	??_DPYSendStr,w
  9385  0BAE  00F8               	movwf	?_DPYSetCur
  9386  0BAF  0825               	movf	DPYSendStr@row,w
  9387  0BB0  3195  25BD  318B   	fcall	_DPYSetCur
  9388  0BB3                     l4688:	
  9389  0BB3  3001               	movlw	1
  9390  0BB4  0020               	movlb	0	; select bank0
  9391  0BB5  00A3               	movwf	??_DPYSendStr
  9392  0BB6  0823               	movf	??_DPYSendStr,w
  9393  0BB7  07A4               	addwf	DPYSendStr@i,f
  9394  0BB8  2B7F               	goto	l4690
  9395  0BB9                     __end_of_DPYSendStr:	
  9396                           
  9397                           	psect	text44
  9398  0AF0                     __ptext44:	
  9399 ;; *************** function _DPYIsBusy *****************
  9400 ;; Defined at:
  9401 ;;		line 312 in file "DPY.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;  bf              1    6[COMMON] enum E1832
  9406 ;; Return value:  Size  Location     Type
  9407 ;;                  1    wreg      enum E1832
  9408 ;; Registers used:
  9409 ;;		wreg, status,2, status,0, pclath, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        2 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    3
  9422 ;; This function calls:
  9423 ;;		_DLYDelay_us
  9424 ;; This function is called by:
  9425 ;;		_DPYSendStr
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _DPYIsBusy
  9431  0AF0                     _DPYIsBusy:	
  9432                           
  9433                           ;DPY.c: 313: te_DPY_BF bf;
  9434                           ;DPY.c: 316: TRISA|=0b00001111;
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _DPYIsBusy: [wreg+status,2+status,0+pclath+cstack]
  9438  0AF0  300F               	movlw	15
  9439  0AF1  00F5               	movwf	??_DPYIsBusy
  9440  0AF2  0875               	movf	??_DPYIsBusy,w
  9441  0AF3  0021               	movlb	1	; select bank1
  9442  0AF4  048C               	iorwf	12,f	;volatile
  9443                           
  9444                           ;DPY.c: 319: LATAbits.LATA4=0;
  9445  0AF5  0022               	movlb	2	; select bank2
  9446  0AF6  120C               	bcf	12,4	;volatile
  9447                           
  9448                           ;DPY.c: 322: LATAbits.LATA6=0;
  9449  0AF7  130C               	bcf	12,6	;volatile
  9450                           
  9451                           ;DPY.c: 325: LATAbits.LATA7=1;
  9452  0AF8  178C               	bsf	12,7	;volatile
  9453                           
  9454                           ;DPY.c: 328: DLYDelay_us(100);
  9455  0AF9  3064               	movlw	100
  9456  0AFA  00F1               	movwf	?_DLYDelay_us
  9457  0AFB  3000               	movlw	0
  9458  0AFC  00F2               	movwf	?_DLYDelay_us+1
  9459  0AFD  3195  2514  318A   	fcall	_DLYDelay_us
  9460                           
  9461                           ;DPY.c: 331: LATAbits.LATA4=1;
  9462  0B00  0022               	movlb	2	; select bank2
  9463  0B01  160C               	bsf	12,4	;volatile
  9464                           
  9465                           ;DPY.c: 333: bf=BF_NOTBUSY;
  9466  0B02  01F6               	clrf	DPYIsBusy@bf
  9467                           
  9468                           ;DPY.c: 334: if(PORTAbits.RA0)
  9469  0B03  0020               	movlb	0	; select bank0
  9470  0B04  1C0C               	btfss	12,0	;volatile
  9471  0B05  2B08               	goto	l4710
  9472                           
  9473                           ;DPY.c: 335: bf=BF_BUSY;
  9474  0B06  01F6               	clrf	DPYIsBusy@bf
  9475  0B07  0AF6               	incf	DPYIsBusy@bf,f
  9476  0B08                     l4710:	
  9477                           
  9478                           ;DPY.c: 337: DLYDelay_us(100);
  9479  0B08  3064               	movlw	100
  9480  0B09  00F1               	movwf	?_DLYDelay_us
  9481  0B0A  3000               	movlw	0
  9482  0B0B  00F2               	movwf	?_DLYDelay_us+1
  9483  0B0C  3195  2514  318A   	fcall	_DLYDelay_us
  9484                           
  9485                           ;DPY.c: 339: LATAbits.LATA4=0;
  9486  0B0F  0022               	movlb	2	; select bank2
  9487  0B10  120C               	bcf	12,4	;volatile
  9488                           
  9489                           ;DPY.c: 341: DLYDelay_us(100);
  9490  0B11  3064               	movlw	100
  9491  0B12  00F1               	movwf	?_DLYDelay_us
  9492  0B13  3000               	movlw	0
  9493  0B14  00F2               	movwf	?_DLYDelay_us+1
  9494  0B15  3195  2514  318A   	fcall	_DLYDelay_us
  9495                           
  9496                           ;DPY.c: 343: LATAbits.LATA4=1;
  9497  0B18  0022               	movlb	2	; select bank2
  9498  0B19  160C               	bsf	12,4	;volatile
  9499                           
  9500                           ;DPY.c: 345: DLYDelay_us(100);
  9501  0B1A  3064               	movlw	100
  9502  0B1B  00F1               	movwf	?_DLYDelay_us
  9503  0B1C  3000               	movlw	0
  9504  0B1D  00F2               	movwf	?_DLYDelay_us+1
  9505  0B1E  3195  2514  318A   	fcall	_DLYDelay_us
  9506                           
  9507                           ;DPY.c: 347: LATAbits.LATA4=0;
  9508  0B21  0022               	movlb	2	; select bank2
  9509  0B22  120C               	bcf	12,4	;volatile
  9510                           
  9511                           ;DPY.c: 349: DLYDelay_us(100);
  9512  0B23  3064               	movlw	100
  9513  0B24  00F1               	movwf	?_DLYDelay_us
  9514  0B25  3000               	movlw	0
  9515  0B26  00F2               	movwf	?_DLYDelay_us+1
  9516  0B27  3195  2514         	fcall	_DLYDelay_us
  9517                           
  9518                           ;DPY.c: 352: TRISA&=0b11110000;
  9519  0B29  30F0               	movlw	240
  9520  0B2A  00F5               	movwf	??_DPYIsBusy
  9521  0B2B  0875               	movf	??_DPYIsBusy,w
  9522  0B2C  0021               	movlb	1	; select bank1
  9523  0B2D  058C               	andwf	12,f	;volatile
  9524                           
  9525                           ;DPY.c: 354: return bf;
  9526  0B2E  0876               	movf	DPYIsBusy@bf,w
  9527  0B2F  0008               	return
  9528  0B30                     __end_of_DPYIsBusy:	
  9529                           
  9530                           	psect	text45
  9531  14BE                     __ptext45:	
  9532 ;; *************** function _DPYSendChar *****************
  9533 ;; Defined at:
  9534 ;;		line 130 in file "DPY.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;  c               1    wreg     unsigned char 
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;  c               1    9[COMMON] unsigned char 
  9539 ;; Return value:  Size  Location     Type
  9540 ;;		None               void
  9541 ;; Registers used:
  9542 ;;		wreg, status,2, status,0, pclath, cstack
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;Total ram usage:        2 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    4
  9555 ;; This function calls:
  9556 ;;		_DPYWriteByte
  9557 ;; This function is called by:
  9558 ;;		_DPYSendStr
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           
  9563                           ;psect for function _DPYSendChar
  9564  14BE                     _DPYSendChar:	
  9565                           
  9566                           ;incstack = 0
  9567                           ; Regs used in _DPYSendChar: [wreg+status,2+status,0+pclath+cstack]
  9568                           ;DPYSendChar@c stored from wreg
  9569  14BE  00F9               	movwf	DPYSendChar@c
  9570                           
  9571                           ;DPY.c: 132: DPYWriteByte(RS_DATA,c);
  9572  14BF  0879               	movf	DPYSendChar@c,w
  9573  14C0  00F8               	movwf	??_DPYSendChar
  9574  14C1  0878               	movf	??_DPYSendChar,w
  9575  14C2  00F5               	movwf	?_DPYWriteByte
  9576  14C3  3001               	movlw	1
  9577  14C4  318C  24AD         	fcall	_DPYWriteByte
  9578  14C6  0008               	return
  9579  14C7                     __end_of_DPYSendChar:	
  9580                           
  9581                           	psect	text46
  9582  15BD                     __ptext46:	
  9583 ;; *************** function _DPYSetCur *****************
  9584 ;; Defined at:
  9585 ;;		line 116 in file "DPY.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  row             1    wreg     unsigned char 
  9588 ;;  col             1    8[COMMON] unsigned char 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;  row             1   10[COMMON] unsigned char 
  9591 ;;  addr            1   11[COMMON] unsigned char 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;		None               void
  9594 ;; Registers used:
  9595 ;;		wreg, status,2, status,0, pclath, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;Total ram usage:        4 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    4
  9608 ;; This function calls:
  9609 ;;		_DPYWriteByte
  9610 ;; This function is called by:
  9611 ;;		_DPYSendStr
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _DPYSetCur
  9617  15BD                     _DPYSetCur:	
  9618                           
  9619                           ;incstack = 0
  9620                           ; Regs used in _DPYSetCur: [wreg+status,2+status,0+pclath+cstack]
  9621                           ;DPYSetCur@row stored from wreg
  9622  15BD  00FA               	movwf	DPYSetCur@row
  9623                           
  9624                           ;DPY.c: 117: unsigned char addr;
  9625                           ;DPY.c: 120: addr=col;
  9626  15BE  0878               	movf	DPYSetCur@col,w
  9627  15BF  00F9               	movwf	??_DPYSetCur
  9628  15C0  0879               	movf	??_DPYSetCur,w
  9629  15C1  00FB               	movwf	DPYSetCur@addr
  9630                           
  9631                           ;DPY.c: 122: if(row==1)
  9632  15C2  087A               	movf	DPYSetCur@row,w
  9633  15C3  3A01               	xorlw	1
  9634  15C4  1D03               	skipz
  9635  15C5  2DCA               	goto	l4660
  9636                           
  9637                           ;DPY.c: 123: addr+=0x40;
  9638  15C6  3040               	movlw	64
  9639  15C7  00F9               	movwf	??_DPYSetCur
  9640  15C8  0879               	movf	??_DPYSetCur,w
  9641  15C9  07FB               	addwf	DPYSetCur@addr,f
  9642  15CA                     l4660:	
  9643                           
  9644                           ;DPY.c: 126: DPYWriteByte(RS_ISTRUCTION,(addr|0b10000000));
  9645  15CA  087B               	movf	DPYSetCur@addr,w
  9646  15CB  3880               	iorlw	128
  9647  15CC  00F9               	movwf	??_DPYSetCur
  9648  15CD  0879               	movf	??_DPYSetCur,w
  9649  15CE  00F5               	movwf	?_DPYWriteByte
  9650  15CF  3000               	movlw	0
  9651  15D0  318C  24AD         	fcall	_DPYWriteByte
  9652  15D2  0008               	return
  9653  15D3                     __end_of_DPYSetCur:	
  9654                           
  9655                           	psect	text47
  9656  161C                     __ptext47:	
  9657 ;; *************** function _PGMInit *****************
  9658 ;; Defined at:
  9659 ;;		line 26 in file "PGM.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  state           1    wreg     unsigned char 
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;  state           1   70[BANK0 ] unsigned char 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;		None               void
  9666 ;; Registers used:
  9667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;Total ram usage:        1 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:    6
  9680 ;; This function calls:
  9681 ;;		_PGMReadNvm
  9682 ;;		_PGMCheckNvm
  9683 ;; This function is called by:
  9684 ;;		_main
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           
  9689                           ;psect for function _PGMInit
  9690  161C                     _PGMInit:	
  9691                           
  9692                           ;incstack = 0
  9693                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9694                           ;PGMInit@state stored from wreg
  9695  161C  0020               	movlb	0	; select bank0
  9696  161D  00E6               	movwf	PGMInit@state
  9697                           
  9698                           ;PGM.c: 27: switch(state)
  9699  161E  2E2D               	goto	l4736
  9700  161F                     l4726:	
  9701                           ;PGM.c: 28: {
  9702                           ;PGM.c: 29: case 0:
  9703                           
  9704                           
  9705                           ;PGM.c: 31: T1CON=0b00000001;
  9706  161F  3001               	movlw	1
  9707  1620  0098               	movwf	24	;volatile
  9708                           
  9709                           ;PGM.c: 32: break;
  9710  1621  0008               	return
  9711  1622                     l4728:	
  9712                           ;PGM.c: 33: case 1:
  9713                           
  9714                           
  9715                           ;PGM.c: 35: tmrPgm=0;
  9716  1622  0022               	movlb	2	; select bank2
  9717  1623  01AA               	clrf	_tmrPgm^(0+256)
  9718  1624  01AB               	clrf	(_tmrPgm+1)^(0+256)
  9719                           
  9720                           ;PGM.c: 36: pgm_flg.val=0;
  9721  1625  0021               	movlb	1	; select bank1
  9722  1626  01E2               	clrf	_pgm_flg^(0+128)
  9723                           
  9724                           ;PGM.c: 37: PGMReadNvm();
  9725  1627  3195  255B  3196   	fcall	_PGMReadNvm
  9726                           
  9727                           ;PGM.c: 38: PGMCheckNvm();
  9728  162A  3194  24DC         	fcall	_PGMCheckNvm
  9729                           
  9730                           ;PGM.c: 43: }
  9731                           
  9732                           ;PGM.c: 39: break;
  9733  162C  0008               	return
  9734  162D                     l4736:	
  9735  162D  0020               	movlb	0	; select bank0
  9736  162E  0866               	movf	PGMInit@state,w
  9737                           
  9738                           ; Switch size 1, requested type "space"
  9739                           ; Number of cases is 2, Range of values is 0 to 1
  9740                           ; switch strategies available:
  9741                           ; Name         Instructions Cycles
  9742                           ; simple_byte            7     4 (average)
  9743                           ; direct_byte           10     6 (fixed)
  9744                           ; jumptable            260     6 (fixed)
  9745                           ;	Chosen strategy is simple_byte
  9746  162F  3A00               	xorlw	0	; case 0
  9747  1630  1903               	skipnz
  9748  1631  2E1F               	goto	l4726
  9749  1632  3A01               	xorlw	1	; case 1
  9750  1633  1903               	skipnz
  9751  1634  2E22               	goto	l4728
  9752  1635  2E36               	goto	l355
  9753  1636                     l355:	
  9754  1636  0008               	return
  9755  1637                     __end_of_PGMInit:	
  9756                           
  9757                           	psect	text48
  9758  14DC                     __ptext48:	
  9759 ;; *************** function _PGMCheckNvm *****************
  9760 ;; Defined at:
  9761 ;;		line 68 in file "PGM.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;		None
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;		None
  9766 ;; Return value:  Size  Location     Type
  9767 ;;		None               void
  9768 ;; Registers used:
  9769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;Total ram usage:        0 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    5
  9782 ;; This function calls:
  9783 ;;		_PGMNvmReset
  9784 ;; This function is called by:
  9785 ;;		_PGMInit
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           
  9790                           ;psect for function _PGMCheckNvm
  9791  14DC                     _PGMCheckNvm:	
  9792                           
  9793                           ;PGM.c: 69: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  9794                           
  9795                           ;incstack = 0
  9796                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9797  14DC  0022               	movlb	2	; select bank2
  9798  14DD  084F               	movf	_pgm_cfg^(0+256),w
  9799  14DE  3AC5               	xorlw	197
  9800  14DF  1D03               	skipz
  9801  14E0  2CE5               	goto	l4742
  9802  14E1  0850               	movf	(_pgm_cfg^(0+256)+1),w
  9803  14E2  3A5C               	xorlw	92
  9804  14E3  1903               	skipnz
  9805  14E4  0008               	return
  9806  14E5                     l4742:	
  9807                           
  9808                           ;PGM.c: 70: PGMNvmReset();
  9809  14E5  3195  2581         	fcall	_PGMNvmReset
  9810  14E7  0008               	return
  9811  14E8                     __end_of_PGMCheckNvm:	
  9812                           
  9813                           	psect	text49
  9814  1581                     __ptext49:	
  9815 ;; *************** function _PGMNvmReset *****************
  9816 ;; Defined at:
  9817 ;;		line 74 in file "PGM.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;		None
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;		None
  9822 ;; Return value:  Size  Location     Type
  9823 ;;		None               void
  9824 ;; Registers used:
  9825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;Total ram usage:        1 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    4
  9838 ;; This function calls:
  9839 ;;		_PGMWriteNvm
  9840 ;; This function is called by:
  9841 ;;		_PGMCheckNvm
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           
  9846                           ;psect for function _PGMNvmReset
  9847  1581                     _PGMNvmReset:	
  9848                           
  9849                           ;PGM.c: 76: pgm_cfg.valChk1=0xC5;
  9850                           
  9851                           ;incstack = 0
  9852                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9853  1581  30C5               	movlw	197
  9854  1582  0020               	movlb	0	; select bank0
  9855  1583  00E5               	movwf	??_PGMNvmReset
  9856  1584  0865               	movf	??_PGMNvmReset,w
  9857  1585  0022               	movlb	2	; select bank2
  9858  1586  00CF               	movwf	_pgm_cfg^(0+256)
  9859                           
  9860                           ;PGM.c: 77: pgm_cfg.valChk2=0x5C;
  9861  1587  305C               	movlw	92
  9862  1588  0020               	movlb	0	; select bank0
  9863  1589  00E5               	movwf	??_PGMNvmReset
  9864  158A  0865               	movf	??_PGMNvmReset,w
  9865  158B  0022               	movlb	2	; select bank2
  9866  158C  00D0               	movwf	(_pgm_cfg^(0+256)+1)
  9867                           
  9868                           ;PGM.c: 78: pgm_cfg.menu=0x00;
  9869  158D  01D1               	clrf	(_pgm_cfg^(0+256)+2)
  9870                           
  9871                           ;PGM.c: 79: pgm_cfg.sensId=0x00;
  9872  158E  01D2               	clrf	(_pgm_cfg^(0+256)+3)
  9873                           
  9874                           ;PGM.c: 80: pgm_cfg.baseId=0x00;
  9875  158F  01D3               	clrf	(_pgm_cfg^(0+256)+4)
  9876                           
  9877                           ;PGM.c: 82: PGMWriteNvm();
  9878  1590  3195  256E         	fcall	_PGMWriteNvm
  9879  1592  0001               	reset	;# 
  9880  1593  0008               	return
  9881  1594                     __end_of_PGMNvmReset:	
  9882                           
  9883                           	psect	text50
  9884  156E                     __ptext50:	
  9885 ;; *************** function _PGMWriteNvm *****************
  9886 ;; Defined at:
  9887 ;;		line 63 in file "PGM.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;		None
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;		None
  9892 ;; Return value:  Size  Location     Type
  9893 ;;		None               void
  9894 ;; Registers used:
  9895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9896 ;; Tracked objects:
  9897 ;;		On entry : 0/0
  9898 ;;		On exit  : 0/0
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;Total ram usage:        4 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:    3
  9908 ;; This function calls:
  9909 ;;		_NVMWrite
  9910 ;; This function is called by:
  9911 ;;		_PGMNvmReset
  9912 ;;		_PGMSelLong
  9913 ;;		_RTXReadPkt
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           
  9918                           ;psect for function _PGMWriteNvm
  9919  156E                     _PGMWriteNvm:	
  9920                           
  9921                           ;PGM.c: 64: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  9922                           
  9923                           ;incstack = 0
  9924                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9925  156E  3029               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9926  156F  00F8               	movwf	??_PGMWriteNvm
  9927  1570  3088               	movlw	(high __stringtab)| (0+128)
  9928  1571  00F9               	movwf	??_PGMWriteNvm+1
  9929  1572  0878               	movf	??_PGMWriteNvm,w
  9930  1573  00F1               	movwf	?_NVMWrite
  9931  1574  0879               	movf	??_PGMWriteNvm+1,w
  9932  1575  00F2               	movwf	?_NVMWrite+1
  9933  1576  304F               	movlw	_pgm_cfg& (0+255)
  9934  1577  00FA               	movwf	??_PGMWriteNvm+2
  9935  1578  087A               	movf	??_PGMWriteNvm+2,w
  9936  1579  00F3               	movwf	?_NVMWrite+2
  9937  157A  3005               	movlw	5
  9938  157B  00FB               	movwf	??_PGMWriteNvm+3
  9939  157C  087B               	movf	??_PGMWriteNvm+3,w
  9940  157D  00F4               	movwf	?_NVMWrite+3
  9941  157E  3186  2651         	fcall	_NVMWrite
  9942  1580  0008               	return
  9943  1581                     __end_of_PGMWriteNvm:	
  9944                           
  9945                           	psect	text51
  9946  0651                     __ptext51:	
  9947 ;; *************** function _NVMWrite *****************
  9948 ;; Defined at:
  9949 ;;		line 39 in file "NVM.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;  addr            2    1[COMMON] unsigned short 
  9952 ;;  source          1    3[COMMON] PTR unsigned char 
  9953 ;;		 -> pgm_cfg(5), 
  9954 ;;  len             1    4[COMMON] unsigned char 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  9957 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  9958 ;;  j               1   68[BANK0 ] unsigned char 
  9959 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  9960 ;;  i               1   66[BANK0 ] unsigned char 
  9961 ;; Return value:  Size  Location     Type
  9962 ;;		None               void
  9963 ;; Registers used:
  9964 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9970 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;Total ram usage:       76 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    2
  9977 ;; This function calls:
  9978 ;;		Nothing
  9979 ;; This function is called by:
  9980 ;;		_PGMWriteNvm
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           
  9985                           ;psect for function _NVMWrite
  9986  0651                     _NVMWrite:	
  9987                           
  9988                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  9989                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  9990                           ;NVM.c: 43: INTCONbits.GIE=0;
  9991                           
  9992                           ;incstack = 0
  9993                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  9994  0651  138B               	bcf	11,7	;volatile
  9995                           
  9996                           ;NVM.c: 44: PMCON1bits.WREN=1;
  9997  0652  0023               	movlb	3	; select bank3
  9998  0653  1515               	bsf	21,2	;volatile
  9999                           
 10000                           ;NVM.c: 45: PMCON1bits.CFGS=0;
 10001  0654  1315               	bcf	21,6	;volatile
 10002                           
 10003                           ;NVM.c: 48: i=0;
 10004  0655  0020               	movlb	0	; select bank0
 10005  0656  01E2               	clrf	NVMWrite@i
 10006                           
 10007                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
 10008  0657  30E0               	movlw	224
 10009  0658  0571               	andwf	NVMWrite@addr,w
 10010  0659  00E0               	movwf	NVMWrite@rowAddr
 10011  065A  30FF               	movlw	255
 10012  065B  0572               	andwf	NVMWrite@addr+1,w
 10013  065C  00E1               	movwf	NVMWrite@rowAddr+1
 10014                           
 10015                           ;NVM.c: 51: latchAddr=(addr&0x001F);
 10016  065D  0871               	movf	NVMWrite@addr,w
 10017  065E  391F               	andlw	31
 10018  065F  00F5               	movwf	??_NVMWrite
 10019  0660  0875               	movf	??_NVMWrite,w
 10020  0661  00E3               	movwf	NVMWrite@latchAddr
 10021  0662                     l166:	
 10022                           ;NVM.c: 52: while(i<len)
 10023                           
 10024  0662  0874               	movf	NVMWrite@len,w
 10025  0663  0262               	subwf	NVMWrite@i,w
 10026  0664  1803               	btfsc	3,0
 10027  0665  2F0C               	goto	l186
 10028  0666  0064               	clrwdt	;# 
 10029                           
 10030                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
 10031  0667  0020               	movlb	0	; select bank0
 10032  0668  01E4               	clrf	NVMWrite@j
 10033  0669  3020               	movlw	32
 10034  066A  0264               	subwf	NVMWrite@j,w
 10035  066B  1803               	btfsc	3,0
 10036  066C  2E91               	goto	l169
 10037  066D                     l168:	
 10038  066D  0064               	clrwdt	;# 
 10039                           
 10040                           ;NVM.c: 60: PMADR=(rowAddr+j);
 10041  066E  0020               	movlb	0	; select bank0
 10042  066F  0864               	movf	NVMWrite@j,w
 10043  0670  0760               	addwf	NVMWrite@rowAddr,w
 10044  0671  00F5               	movwf	??_NVMWrite
 10045  0672  0861               	movf	NVMWrite@rowAddr+1,w
 10046  0673  1803               	skipnc
 10047  0674  0A61               	incf	NVMWrite@rowAddr+1,w
 10048  0675  00F6               	movwf	??_NVMWrite+1
 10049  0676  0875               	movf	??_NVMWrite,w
 10050  0677  0023               	movlb	3	; select bank3
 10051  0678  0091               	movwf	17	;volatile
 10052  0679  0876               	movf	??_NVMWrite+1,w
 10053  067A  0092               	movwf	18	;volatile
 10054                           
 10055                           ;NVM.c: 61: PMCON1bits.RD=1;
 10056  067B  1415               	bsf	21,0	;volatile
 10057  067C                     l170:	
 10058                           ;NVM.c: 62: while(PMCON1bits.RD);
 10059                           
 10060  067C  1815               	btfsc	21,0	;volatile
 10061  067D  2E7C               	goto	l170
 10062                           
 10063                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
 10064  067E  0020               	movlb	0	; select bank0
 10065  067F  3564               	lslf	NVMWrite@j,w
 10066  0680  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
 10067  0681  0086               	movwf	6
 10068  0682  0187               	clrf	7
 10069  0683  0023               	movlb	3	; select bank3
 10070  0684  0813               	movf	19,w	;volatile
 10071  0685  3FC0               	movwi [0]fsr1
 10072  0686  0814               	movf	20,w	;volatile
 10073  0687  3FC1               	movwi [1]fsr1
 10074  0688  3001               	movlw	1
 10075  0689  00F5               	movwf	??_NVMWrite
 10076  068A  0875               	movf	??_NVMWrite,w
 10077  068B  0020               	movlb	0	; select bank0
 10078  068C  07E4               	addwf	NVMWrite@j,f
 10079  068D  3020               	movlw	32
 10080  068E  0264               	subwf	NVMWrite@j,w
 10081  068F  1C03               	skipc
 10082  0690  2E6D               	goto	l168
 10083  0691                     l169:	
 10084                           
 10085                           ;NVM.c: 64: }
 10086                           ;NVM.c: 67: PMCON1bits.FREE=1;
 10087  0691  0023               	movlb	3	; select bank3
 10088  0692  1615               	bsf	21,4	;volatile
 10089                           
 10090                           ;NVM.c: 68: PMADR=rowAddr;
 10091  0693  0020               	movlb	0	; select bank0
 10092  0694  0861               	movf	NVMWrite@rowAddr+1,w
 10093  0695  0023               	movlb	3	; select bank3
 10094  0696  0192               	clrf	18	;volatile
 10095  0697  0792               	addwf	18,f	;volatile
 10096  0698  0020               	movlb	0	; select bank0
 10097  0699  0860               	movf	NVMWrite@rowAddr,w
 10098  069A  0023               	movlb	3	; select bank3
 10099  069B  0191               	clrf	17	;volatile
 10100  069C  0791               	addwf	17,f	;volatile
 10101                           
 10102                           ;NVM.c: 69: PMCON2=0x55;
 10103  069D  3055               	movlw	85
 10104  069E  0096               	movwf	22	;volatile
 10105                           
 10106                           ;NVM.c: 70: PMCON2=0xAA;
 10107  069F  30AA               	movlw	170
 10108  06A0  0096               	movwf	22	;volatile
 10109                           
 10110                           ;NVM.c: 71: PMCON1bits.WR=1;
 10111  06A1  1495               	bsf	21,1	;volatile
 10112  06A2                     l173:	
 10113                           ;NVM.c: 72: while(PMCON1bits.WR);
 10114                           
 10115  06A2  1895               	btfsc	21,1	;volatile
 10116  06A3  2EA2               	goto	l173
 10117                           
 10118                           ;NVM.c: 73: _nop();
 10119  06A4  0000               	nop
 10120                           
 10121                           ;NVM.c: 74: _nop();
 10122  06A5  0000               	nop
 10123                           
 10124                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
 10125  06A6  3020               	movlw	32
 10126  06A7  0020               	movlb	0	; select bank0
 10127  06A8  0263               	subwf	NVMWrite@latchAddr,w
 10128  06A9  1803               	btfsc	3,0
 10129  06AA  2ECF               	goto	l3184
 10130  06AB                     l176:	
 10131  06AB  0064               	clrwdt	;# 
 10132                           
 10133                           ;NVM.c: 81: if(i>=len)
 10134  06AC  0874               	movf	NVMWrite@len,w
 10135  06AD  0020               	movlb	0	; select bank0
 10136  06AE  0262               	subwf	NVMWrite@i,w
 10137  06AF  1803               	btfsc	3,0
 10138  06B0  2ECF               	goto	l3184
 10139                           
 10140                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
 10141                           
 10142                           ;NVM.c: 82: break;
 10143  06B1  0862               	movf	NVMWrite@i,w
 10144  06B2  0773               	addwf	NVMWrite@source,w
 10145  06B3  00F5               	movwf	??_NVMWrite
 10146  06B4  0875               	movf	??_NVMWrite,w
 10147  06B5  0086               	movwf	6
 10148  06B6  3001               	movlw	1	; select bank2/3
 10149  06B7  0087               	movwf	7
 10150  06B8  0801               	movf	1,w
 10151  06B9  00F6               	movwf	??_NVMWrite+1
 10152  06BA  01F7               	clrf	??_NVMWrite+2
 10153  06BB  3563               	lslf	NVMWrite@latchAddr,w
 10154  06BC  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
 10155  06BD  0086               	movwf	6
 10156  06BE  0187               	clrf	7
 10157  06BF  0876               	movf	??_NVMWrite+1,w
 10158  06C0  3FC0               	movwi [0]fsr1
 10159  06C1  0877               	movf	??_NVMWrite+2,w
 10160  06C2  3FC1               	movwi [1]fsr1
 10161                           
 10162                           ;NVM.c: 85: i++;
 10163  06C3  3001               	movlw	1
 10164  06C4  00F5               	movwf	??_NVMWrite
 10165  06C5  0875               	movf	??_NVMWrite,w
 10166  06C6  07E2               	addwf	NVMWrite@i,f
 10167  06C7  3001               	movlw	1
 10168  06C8  00F5               	movwf	??_NVMWrite
 10169  06C9  0875               	movf	??_NVMWrite,w
 10170  06CA  07E3               	addwf	NVMWrite@latchAddr,f
 10171  06CB  3020               	movlw	32
 10172  06CC  0263               	subwf	NVMWrite@latchAddr,w
 10173  06CD  1C03               	skipc
 10174  06CE  2EAB               	goto	l176
 10175  06CF                     l3184:	
 10176                           
 10177                           ;NVM.c: 86: }
 10178                           ;NVM.c: 88: latchAddr=0;
 10179  06CF  01E3               	clrf	NVMWrite@latchAddr
 10180                           
 10181                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
 10182  06D0  01E4               	clrf	NVMWrite@j
 10183  06D1  3020               	movlw	32
 10184  06D2  0264               	subwf	NVMWrite@j,w
 10185  06D3  1803               	btfsc	3,0
 10186  06D4  2F07               	goto	l3206
 10187  06D5                     l3190:	
 10188                           
 10189                           ;NVM.c: 92: {
 10190                           ;NVM.c: 94: PMADR=(rowAddr+j);
 10191  06D5  0864               	movf	NVMWrite@j,w
 10192  06D6  0760               	addwf	NVMWrite@rowAddr,w
 10193  06D7  00F5               	movwf	??_NVMWrite
 10194  06D8  0861               	movf	NVMWrite@rowAddr+1,w
 10195  06D9  1803               	skipnc
 10196  06DA  0A61               	incf	NVMWrite@rowAddr+1,w
 10197  06DB  00F6               	movwf	??_NVMWrite+1
 10198  06DC  0875               	movf	??_NVMWrite,w
 10199  06DD  0023               	movlb	3	; select bank3
 10200  06DE  0091               	movwf	17	;volatile
 10201  06DF  0876               	movf	??_NVMWrite+1,w
 10202  06E0  0092               	movwf	18	;volatile
 10203                           
 10204                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
 10205  06E1  0020               	movlb	0	; select bank0
 10206  06E2  3564               	lslf	NVMWrite@j,w
 10207  06E3  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
 10208  06E4  0086               	movwf	6
 10209  06E5  0187               	clrf	7
 10210  06E6  3F40               	moviw [0]fsr1
 10211  06E7  0023               	movlb	3	; select bank3
 10212  06E8  0093               	movwf	19	;volatile
 10213  06E9  3F41               	moviw [1]fsr1
 10214  06EA  0094               	movwf	20	;volatile
 10215                           
 10216                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
 10217  06EB  0020               	movlb	0	; select bank0
 10218  06EC  0864               	movf	NVMWrite@j,w
 10219  06ED  3A1F               	xorlw	31
 10220  06EE  1D03               	skipz
 10221  06EF  2EF3               	goto	l181
 10222                           
 10223                           ;NVM.c: 98: PMCON1bits.LWLO=0;
 10224  06F0  0023               	movlb	3	; select bank3
 10225  06F1  1295               	bcf	21,5	;volatile
 10226  06F2  2EF5               	goto	l3198
 10227  06F3                     l181:	
 10228                           
 10229                           ;NVM.c: 99: else
 10230                           ;NVM.c: 100: PMCON1bits.LWLO=1;
 10231  06F3  0023               	movlb	3	; select bank3
 10232  06F4  1695               	bsf	21,5	;volatile
 10233  06F5                     l3198:	
 10234                           
 10235                           ;NVM.c: 101: PMCON2=0x55;
 10236  06F5  3055               	movlw	85
 10237  06F6  0096               	movwf	22	;volatile
 10238                           
 10239                           ;NVM.c: 102: PMCON2=0xAA;
 10240  06F7  30AA               	movlw	170
 10241  06F8  0096               	movwf	22	;volatile
 10242                           
 10243                           ;NVM.c: 103: PMCON1bits.WR=1;
 10244  06F9  1495               	bsf	21,1	;volatile
 10245  06FA                     l183:	
 10246                           ;NVM.c: 104: while(PMCON1bits.WR);
 10247                           
 10248  06FA  1895               	btfsc	21,1	;volatile
 10249  06FB  2EFA               	goto	l183
 10250                           
 10251                           ;NVM.c: 105: _nop();
 10252  06FC  0000               	nop
 10253                           
 10254                           ;NVM.c: 106: _nop();
 10255  06FD  0000               	nop
 10256  06FE  3001               	movlw	1
 10257  06FF  00F5               	movwf	??_NVMWrite
 10258  0700  0875               	movf	??_NVMWrite,w
 10259  0701  0020               	movlb	0	; select bank0
 10260  0702  07E4               	addwf	NVMWrite@j,f
 10261  0703  3020               	movlw	32
 10262  0704  0264               	subwf	NVMWrite@j,w
 10263  0705  1C03               	skipc
 10264  0706  2ED5               	goto	l3190
 10265  0707                     l3206:	
 10266                           
 10267                           ;NVM.c: 107: }
 10268                           ;NVM.c: 109: rowAddr+=0x0020;
 10269  0707  3020               	movlw	32
 10270  0708  07E0               	addwf	NVMWrite@rowAddr,f
 10271  0709  3000               	movlw	0
 10272  070A  3DE1               	addwfc	NVMWrite@rowAddr+1,f
 10273  070B  2E62               	goto	l166
 10274  070C                     l186:	
 10275                           
 10276                           ;NVM.c: 110: }
 10277                           ;NVM.c: 112: INTCONbits.GIE=1;
 10278  070C  178B               	bsf	11,7	;volatile
 10279                           
 10280                           ;NVM.c: 113: PMCON1bits.WREN=0;
 10281  070D  0023               	movlb	3	; select bank3
 10282  070E  1115               	bcf	21,2	;volatile
 10283  070F  0008               	return
 10284  0710                     __end_of_NVMWrite:	
 10285                           
 10286                           	psect	text52
 10287  155B                     __ptext52:	
 10288 ;; *************** function _PGMReadNvm *****************
 10289 ;; Defined at:
 10290 ;;		line 58 in file "PGM.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;		None
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;		None
 10295 ;; Return value:  Size  Location     Type
 10296 ;;		None               void
 10297 ;; Registers used:
 10298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;Total ram usage:        4 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    3
 10311 ;; This function calls:
 10312 ;;		_NVMRead
 10313 ;; This function is called by:
 10314 ;;		_PGMInit
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           
 10319                           ;psect for function _PGMReadNvm
 10320  155B                     _PGMReadNvm:	
 10321                           
 10322                           ;PGM.c: 59: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10326  155B  3029               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
 10327  155C  00F8               	movwf	??_PGMReadNvm
 10328  155D  3088               	movlw	(high __stringtab)| (0+128)
 10329  155E  00F9               	movwf	??_PGMReadNvm+1
 10330  155F  0878               	movf	??_PGMReadNvm,w
 10331  1560  00F1               	movwf	?_NVMRead
 10332  1561  0879               	movf	??_PGMReadNvm+1,w
 10333  1562  00F2               	movwf	?_NVMRead+1
 10334  1563  304F               	movlw	_pgm_cfg& (0+255)
 10335  1564  00FA               	movwf	??_PGMReadNvm+2
 10336  1565  087A               	movf	??_PGMReadNvm+2,w
 10337  1566  00F3               	movwf	?_NVMRead+2
 10338  1567  3005               	movlw	5
 10339  1568  00FB               	movwf	??_PGMReadNvm+3
 10340  1569  087B               	movf	??_PGMReadNvm+3,w
 10341  156A  00F4               	movwf	?_NVMRead+3
 10342  156B  3197  27D9         	fcall	_NVMRead
 10343  156D  0008               	return
 10344  156E                     __end_of_PGMReadNvm:	
 10345                           
 10346                           	psect	text53
 10347  17D9                     __ptext53:	
 10348 ;; *************** function _NVMRead *****************
 10349 ;; Defined at:
 10350 ;;		line 24 in file "NVM.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;  addr            2    1[COMMON] unsigned short 
 10353 ;;  dest            1    3[COMMON] PTR unsigned char 
 10354 ;;		 -> pgm_cfg(5), 
 10355 ;;  len             1    4[COMMON] unsigned char 
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  i               1    7[COMMON] unsigned char 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;		None               void
 10360 ;; Registers used:
 10361 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10367 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;Total ram usage:        7 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    2
 10374 ;; This function calls:
 10375 ;;		Nothing
 10376 ;; This function is called by:
 10377 ;;		_PGMReadNvm
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           
 10382                           ;psect for function _NVMRead
 10383  17D9                     _NVMRead:	
 10384                           
 10385                           ;NVM.c: 25: unsigned char i;
 10386                           ;NVM.c: 27: PMCON1bits.CFGS=0;
 10387                           
 10388                           ;incstack = 0
 10389                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
 10390  17D9  0023               	movlb	3	; select bank3
 10391  17DA  1315               	bcf	21,6	;volatile
 10392                           
 10393                           ;NVM.c: 28: for(i=0;i<len;i++)
 10394  17DB  01F7               	clrf	NVMRead@i
 10395  17DC                     l3136:	
 10396  17DC  0874               	movf	NVMRead@len,w
 10397  17DD  0277               	subwf	NVMRead@i,w
 10398  17DE  1803               	btfsc	3,0
 10399  17DF  0008               	return
 10400  17E0  0064               	clrwdt	;# 
 10401                           
 10402                           ;NVM.c: 31: PMADR=(addr+i);
 10403  17E1  0877               	movf	NVMRead@i,w
 10404  17E2  0771               	addwf	NVMRead@addr,w
 10405  17E3  00F5               	movwf	??_NVMRead
 10406  17E4  0872               	movf	NVMRead@addr+1,w
 10407  17E5  1803               	skipnc
 10408  17E6  0A72               	incf	NVMRead@addr+1,w
 10409  17E7  00F6               	movwf	??_NVMRead+1
 10410  17E8  0875               	movf	??_NVMRead,w
 10411  17E9  0023               	movlb	3	; select bank3
 10412  17EA  0091               	movwf	17	;volatile
 10413  17EB  0876               	movf	??_NVMRead+1,w
 10414  17EC  0092               	movwf	18	;volatile
 10415                           
 10416                           ;NVM.c: 32: PMCON1bits.RD=1;
 10417  17ED  1415               	bsf	21,0	;volatile
 10418  17EE                     l159:	
 10419                           ;NVM.c: 33: while(PMCON1bits.RD);
 10420                           
 10421  17EE  1815               	btfsc	21,0	;volatile
 10422  17EF  2FEE               	goto	l159
 10423                           
 10424                           ;NVM.c: 34: (*(dest+i))=PMDAT;
 10425  17F0  0813               	movf	19,w	;volatile
 10426  17F1  00F5               	movwf	??_NVMRead
 10427  17F2  0877               	movf	NVMRead@i,w
 10428  17F3  0773               	addwf	NVMRead@dest,w
 10429  17F4  00F6               	movwf	??_NVMRead+1
 10430  17F5  0876               	movf	??_NVMRead+1,w
 10431  17F6  0086               	movwf	6
 10432  17F7  3001               	movlw	1	; select bank2/3
 10433  17F8  0087               	movwf	7
 10434  17F9  0875               	movf	??_NVMRead,w
 10435  17FA  0081               	movwf	1
 10436  17FB  3001               	movlw	1
 10437  17FC  00F5               	movwf	??_NVMRead
 10438  17FD  0875               	movf	??_NVMRead,w
 10439  17FE  07F7               	addwf	NVMRead@i,f
 10440  17FF  2FDC               	goto	l3136
 10441  1800                     __end_of_NVMRead:	
 10442                           
 10443                           	psect	text54
 10444  1548                     __ptext54:	
 10445 ;; *************** function _DPYInit *****************
 10446 ;; Defined at:
 10447 ;;		line 47 in file "DPY.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;  sta             1    wreg     unsigned char 
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  sta             1    4[BANK0 ] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;		None               void
 10454 ;; Registers used:
 10455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : 0/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;Total ram usage:        1 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    6
 10468 ;; This function calls:
 10469 ;;		_DPYInitDisplay
 10470 ;; This function is called by:
 10471 ;;		_main
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           
 10476                           ;psect for function _DPYInit
 10477  1548                     _DPYInit:	
 10478                           
 10479                           ;incstack = 0
 10480                           ; Regs used in _DPYInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10481                           ;DPYInit@sta stored from wreg
 10482  1548  0020               	movlb	0	; select bank0
 10483  1549  00A4               	movwf	DPYInit@sta
 10484                           
 10485                           ;DPY.c: 48: switch(sta)
 10486  154A  2D4E               	goto	l4582
 10487  154B                     l4578:	
 10488                           ;DPY.c: 56: case 2:
 10489                           
 10490                           ;DPY.c: 55: break;
 10491                           
 10492                           ;DPY.c: 53: case 1:
 10493                           
 10494                           ;DPY.c: 52: break;
 10495                           
 10496                           ;DPY.c: 49: {
 10497                           ;DPY.c: 50: case 0:
 10498                           
 10499                           
 10500                           ;DPY.c: 58: DPYInitDisplay();
 10501  154B  318A  22B2         	fcall	_DPYInitDisplay
 10502                           
 10503                           ;DPY.c: 60: }
 10504                           
 10505                           ;DPY.c: 59: break;
 10506  154D  0008               	return
 10507  154E                     l4582:	
 10508  154E  0020               	movlb	0	; select bank0
 10509  154F  0824               	movf	DPYInit@sta,w
 10510                           
 10511                           ; Switch size 1, requested type "space"
 10512                           ; Number of cases is 3, Range of values is 0 to 2
 10513                           ; switch strategies available:
 10514                           ; Name         Instructions Cycles
 10515                           ; simple_byte           10     6 (average)
 10516                           ; direct_byte           12     6 (fixed)
 10517                           ; jumptable            260     6 (fixed)
 10518                           ;	Chosen strategy is simple_byte
 10519  1550  3A00               	xorlw	0	; case 0
 10520  1551  1903               	skipnz
 10521  1552  2D5A               	goto	l261
 10522  1553  3A01               	xorlw	1	; case 1
 10523  1554  1903               	skipnz
 10524  1555  2D5A               	goto	l261
 10525  1556  3A03               	xorlw	3	; case 2
 10526  1557  1903               	skipnz
 10527  1558  2D4B               	goto	l4578
 10528  1559  2D5A               	goto	l261
 10529  155A                     l261:	
 10530  155A  0008               	return
 10531  155B                     __end_of_DPYInit:	
 10532                           
 10533                           	psect	text55
 10534  0AB2                     __ptext55:	
 10535 ;; *************** function _DPYInitDisplay *****************
 10536 ;; Defined at:
 10537 ;;		line 64 in file "DPY.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;  tmp             1    3[BANK0 ] unsigned char 
 10542 ;; Return value:  Size  Location     Type
 10543 ;;		None               void
 10544 ;; Registers used:
 10545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10546 ;; Tracked objects:
 10547 ;;		On entry : 0/0
 10548 ;;		On exit  : 0/0
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;Total ram usage:        2 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    5
 10558 ;; This function calls:
 10559 ;;		_DLYDelay_ms
 10560 ;;		_DPYWriteNibble
 10561 ;;		_DPYWriteByte
 10562 ;;		_DPYDrawChar
 10563 ;; This function is called by:
 10564 ;;		_DPYInit
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function _DPYInitDisplay
 10570  0AB2                     _DPYInitDisplay:	
 10571                           
 10572                           ;DPY.c: 65: unsigned char tmp;
 10573                           ;DPY.c: 67: DLYDelay_ms(15);
 10574                           
 10575                           ;incstack = 0
 10576                           ; Regs used in _DPYInitDisplay: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10577  0AB2  300F               	movlw	15
 10578  0AB3  00F1               	movwf	?_DLYDelay_ms
 10579  0AB4  3000               	movlw	0
 10580  0AB5  00F2               	movwf	?_DLYDelay_ms+1
 10581  0AB6  3195  25EA  318A   	fcall	_DLYDelay_ms
 10582                           
 10583                           ;DPY.c: 68: LATAbits.LATA6=0;
 10584  0AB9  0022               	movlb	2	; select bank2
 10585  0ABA  130C               	bcf	12,6	;volatile
 10586                           
 10587                           ;DPY.c: 69: LATAbits.LATA7=0;
 10588  0ABB  138C               	bcf	12,7	;volatile
 10589                           
 10590                           ;DPY.c: 72: DPYWriteNibble(RS_ISTRUCTION,0b00000010);
 10591  0ABC  3002               	movlw	2
 10592  0ABD  00FB               	movwf	??_DPYInitDisplay
 10593  0ABE  087B               	movf	??_DPYInitDisplay,w
 10594  0ABF  00F5               	movwf	?_DPYWriteNibble
 10595  0AC0  3000               	movlw	0
 10596  0AC1  3189  21DC  318A   	fcall	_DPYWriteNibble
 10597                           
 10598                           ;DPY.c: 75: tmp=0b00100000;
 10599  0AC4  3020               	movlw	32
 10600  0AC5  00FB               	movwf	??_DPYInitDisplay
 10601  0AC6  087B               	movf	??_DPYInitDisplay,w
 10602  0AC7  0020               	movlb	0	; select bank0
 10603  0AC8  00A3               	movwf	DPYInitDisplay@tmp
 10604                           
 10605                           ;DPY.c: 80: tmp|=0b00001000;
 10606  0AC9  15A3               	bsf	DPYInitDisplay@tmp,3
 10607                           
 10608                           ;DPY.c: 88: DPYWriteByte(RS_ISTRUCTION,tmp);
 10609  0ACA  0823               	movf	DPYInitDisplay@tmp,w
 10610  0ACB  00FB               	movwf	??_DPYInitDisplay
 10611  0ACC  087B               	movf	??_DPYInitDisplay,w
 10612  0ACD  00F5               	movwf	?_DPYWriteByte
 10613  0ACE  3000               	movlw	0
 10614  0ACF  318C  24AD  318A   	fcall	_DPYWriteByte
 10615                           
 10616                           ;DPY.c: 91: DPYWriteByte(RS_ISTRUCTION,0b00001110);
 10617  0AD2  300E               	movlw	14
 10618  0AD3  00FB               	movwf	??_DPYInitDisplay
 10619  0AD4  087B               	movf	??_DPYInitDisplay,w
 10620  0AD5  00F5               	movwf	?_DPYWriteByte
 10621  0AD6  3000               	movlw	0
 10622  0AD7  318C  24AD  318A   	fcall	_DPYWriteByte
 10623                           
 10624                           ;DPY.c: 94: DPYWriteByte(RS_ISTRUCTION,0b00000110);
 10625  0ADA  3006               	movlw	6
 10626  0ADB  00FB               	movwf	??_DPYInitDisplay
 10627  0ADC  087B               	movf	??_DPYInitDisplay,w
 10628  0ADD  00F5               	movwf	?_DPYWriteByte
 10629  0ADE  3000               	movlw	0
 10630  0ADF  318C  24AD  318A   	fcall	_DPYWriteByte
 10631                           
 10632                           ;DPY.c: 97: DPYWriteByte(RS_ISTRUCTION,0b00000001);
 10633  0AE2  01F5               	clrf	?_DPYWriteByte
 10634  0AE3  0AF5               	incf	?_DPYWriteByte,f
 10635  0AE4  3000               	movlw	0
 10636  0AE5  318C  24AD  318A   	fcall	_DPYWriteByte
 10637                           
 10638                           ;DPY.c: 100: DPYDrawChar(0x00,picBatt);
 10639  0AE8  3054               	movlw	_picBatt& (0+255)
 10640  0AE9  00FB               	movwf	??_DPYInitDisplay
 10641  0AEA  087B               	movf	??_DPYInitDisplay,w
 10642  0AEB  00F8               	movwf	?_DPYDrawChar
 10643  0AEC  3000               	movlw	0
 10644  0AED  3188  20F5         	fcall	_DPYDrawChar
 10645  0AEF  0008               	return
 10646  0AF0                     __end_of_DPYInitDisplay:	
 10647                           
 10648                           	psect	text56
 10649  08F5                     __ptext56:	
 10650 ;; *************** function _DPYDrawChar *****************
 10651 ;; Defined at:
 10652 ;;		line 104 in file "DPY.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;  addr            1    wreg     unsigned char 
 10655 ;;  p               1    8[COMMON] PTR unsigned char 
 10656 ;;		 -> picBatt(9), 
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;  addr            1    0[BANK0 ] unsigned char 
 10659 ;;  i               1    2[BANK0 ] unsigned char 
 10660 ;;  tmpAddr         1    1[BANK0 ] unsigned char 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;		None               void
 10663 ;; Registers used:
 10664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10670 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;Total ram usage:        6 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    4
 10677 ;; This function calls:
 10678 ;;		_DPYWriteByte
 10679 ;; This function is called by:
 10680 ;;		_DPYInitDisplay
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           
 10685                           ;psect for function _DPYDrawChar
 10686  08F5                     _DPYDrawChar:	
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _DPYDrawChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10690                           ;DPYDrawChar@addr stored from wreg
 10691  08F5  0020               	movlb	0	; select bank0
 10692  08F6  00A0               	movwf	DPYDrawChar@addr
 10693                           
 10694                           ;DPY.c: 105: unsigned char i,tmpAddr;
 10695                           ;DPY.c: 107: for(i=0;i<9;i++)
 10696  08F7  01A2               	clrf	DPYDrawChar@i
 10697  08F8                     L6:	
 10698  08F8  3009               	movlw	9
 10699  08F9  0222               	subwf	DPYDrawChar@i,w
 10700  08FA  1803               	btfsc	3,0
 10701  08FB  0008               	return
 10702                           
 10703                           ;DPY.c: 108: {
 10704                           ;DPY.c: 109: tmpAddr=(((i+addr)&0b00111111)|0b01000000);
 10705  08FC  0822               	movf	DPYDrawChar@i,w
 10706  08FD  0720               	addwf	DPYDrawChar@addr,w
 10707  08FE  393F               	andlw	63
 10708  08FF  3840               	iorlw	64
 10709  0900  00F9               	movwf	??_DPYDrawChar
 10710  0901  0879               	movf	??_DPYDrawChar,w
 10711  0902  00A1               	movwf	DPYDrawChar@tmpAddr
 10712                           
 10713                           ;DPY.c: 110: DPYWriteByte(RS_ISTRUCTION,tmpAddr);
 10714  0903  0821               	movf	DPYDrawChar@tmpAddr,w
 10715  0904  00F9               	movwf	??_DPYDrawChar
 10716  0905  0879               	movf	??_DPYDrawChar,w
 10717  0906  00F5               	movwf	?_DPYWriteByte
 10718  0907  3000               	movlw	0
 10719  0908  318C  24AD  3188   	fcall	_DPYWriteByte
 10720                           
 10721                           ;DPY.c: 111: DPYWriteByte(RS_DATA,(*(p+i)));
 10722  090B  0020               	movlb	0	; select bank0
 10723  090C  0822               	movf	DPYDrawChar@i,w
 10724  090D  0778               	addwf	DPYDrawChar@p,w
 10725  090E  00F9               	movwf	??_DPYDrawChar
 10726  090F  0879               	movf	??_DPYDrawChar,w
 10727  0910  0086               	movwf	6
 10728  0911  3001               	movlw	1	; select bank2/3
 10729  0912  0087               	movwf	7
 10730  0913  0801               	movf	1,w
 10731  0914  00FA               	movwf	??_DPYDrawChar+1
 10732  0915  087A               	movf	??_DPYDrawChar+1,w
 10733  0916  00F5               	movwf	?_DPYWriteByte
 10734  0917  3001               	movlw	1
 10735  0918  318C  24AD  3188   	fcall	_DPYWriteByte
 10736  091B  3001               	movlw	1
 10737  091C  00F9               	movwf	??_DPYDrawChar
 10738  091D  0879               	movf	??_DPYDrawChar,w
 10739  091E  0020               	movlb	0	; select bank0
 10740  091F  07A2               	addwf	DPYDrawChar@i,f
 10741  0920  28F8               	goto	L6
 10742  0921                     __end_of_DPYDrawChar:	
 10743                           
 10744                           	psect	text57
 10745  0CAD                     __ptext57:	
 10746 ;; *************** function _DPYWriteByte *****************
 10747 ;; Defined at:
 10748 ;;		line 200 in file "DPY.c"
 10749 ;; Parameters:    Size  Location     Type
 10750 ;;  rs              1    wreg     enum E1828
 10751 ;;  val             1    5[COMMON] unsigned char 
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  rs              1    7[COMMON] enum E1828
 10754 ;; Return value:  Size  Location     Type
 10755 ;;		None               void
 10756 ;; Registers used:
 10757 ;;		wreg, status,2, status,0, pclath, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        3 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    3
 10770 ;; This function calls:
 10771 ;;		_OUTSetHTCDataNibble
 10772 ;;		_DLYDelay_us
 10773 ;; This function is called by:
 10774 ;;		_DPYInitDisplay
 10775 ;;		_DPYDrawChar
 10776 ;;		_DPYSetCur
 10777 ;;		_DPYSendChar
 10778 ;; This function uses a non-reentrant model
 10779 ;;
 10780                           
 10781                           
 10782                           ;psect for function _DPYWriteByte
 10783  0CAD                     _DPYWriteByte:	
 10784                           
 10785                           ;incstack = 0
 10786                           ; Regs used in _DPYWriteByte: [wreg+status,2+status,0+pclath+cstack]
 10787                           ;DPYWriteByte@rs stored from wreg
 10788  0CAD  00F7               	movwf	DPYWriteByte@rs
 10789                           
 10790                           ;DPY.c: 202: LATAbits.LATA4=0;
 10791  0CAE  0022               	movlb	2	; select bank2
 10792  0CAF  120C               	bcf	12,4	;volatile
 10793                           
 10794                           ;DPY.c: 205: if(rs==RS_ISTRUCTION)
 10795  0CB0  08F7               	movf	DPYWriteByte@rs,f
 10796  0CB1  1D03               	skipz
 10797  0CB2  2CB5               	goto	l4626
 10798                           
 10799                           ;DPY.c: 206: LATAbits.LATA6=0;
 10800  0CB3  130C               	bcf	12,6	;volatile
 10801  0CB4  2CB9               	goto	l298
 10802  0CB5                     l4626:	
 10803                           
 10804                           ;DPY.c: 207: else if(rs==RS_DATA)
 10805  0CB5  0877               	movf	DPYWriteByte@rs,w
 10806  0CB6  3A01               	xorlw	1
 10807  0CB7  1903               	btfsc	3,2
 10808                           
 10809                           ;DPY.c: 208: LATAbits.LATA6=1;
 10810  0CB8  170C               	bsf	12,6	;volatile
 10811  0CB9                     l298:	
 10812                           
 10813                           ;DPY.c: 211: LATAbits.LATA7=0;
 10814  0CB9  138C               	bcf	12,7	;volatile
 10815                           
 10816                           ;DPY.c: 214: DLYDelay_us(100);
 10817  0CBA  3064               	movlw	100
 10818  0CBB  00F1               	movwf	?_DLYDelay_us
 10819  0CBC  3000               	movlw	0
 10820  0CBD  00F2               	movwf	?_DLYDelay_us+1
 10821  0CBE  3195  2514  318C   	fcall	_DLYDelay_us
 10822                           
 10823                           ;DPY.c: 217: LATAbits.LATA4=1;
 10824  0CC1  0022               	movlb	2	; select bank2
 10825  0CC2  160C               	bsf	12,4	;volatile
 10826                           
 10827                           ;DPY.c: 219: DLYDelay_us(100);
 10828  0CC3  3064               	movlw	100
 10829  0CC4  00F1               	movwf	?_DLYDelay_us
 10830  0CC5  3000               	movlw	0
 10831  0CC6  00F2               	movwf	?_DLYDelay_us+1
 10832  0CC7  3195  2514  318C   	fcall	_DLYDelay_us
 10833                           
 10834                           ;DPY.c: 221: OUTSetHTCDataNibble((val>>4)&0b00001111);
 10835  0CCA  0875               	movf	DPYWriteByte@val,w
 10836  0CCB  00F6               	movwf	??_DPYWriteByte
 10837  0CCC  3004               	movlw	4
 10838  0CCD                     u4815:	
 10839  0CCD  36F6               	lsrf	??_DPYWriteByte,f
 10840  0CCE  0B89               	decfsz	9,f
 10841  0CCF  2CCD               	goto	u4815
 10842  0CD0  0876               	movf	??_DPYWriteByte,w
 10843  0CD1  390F               	andlw	15
 10844  0CD2  3196  2652  318C   	fcall	_OUTSetHTCDataNibble
 10845                           
 10846                           ;DPY.c: 223: DLYDelay_us(100);
 10847  0CD5  3064               	movlw	100
 10848  0CD6  00F1               	movwf	?_DLYDelay_us
 10849  0CD7  3000               	movlw	0
 10850  0CD8  00F2               	movwf	?_DLYDelay_us+1
 10851  0CD9  3195  2514  318C   	fcall	_DLYDelay_us
 10852                           
 10853                           ;DPY.c: 225: LATAbits.LATA4=0;
 10854  0CDC  0022               	movlb	2	; select bank2
 10855  0CDD  120C               	bcf	12,4	;volatile
 10856                           
 10857                           ;DPY.c: 227: DLYDelay_us(100);
 10858  0CDE  3064               	movlw	100
 10859  0CDF  00F1               	movwf	?_DLYDelay_us
 10860  0CE0  3000               	movlw	0
 10861  0CE1  00F2               	movwf	?_DLYDelay_us+1
 10862  0CE2  3195  2514  318C   	fcall	_DLYDelay_us
 10863                           
 10864                           ;DPY.c: 229: LATAbits.LATA4=1;
 10865  0CE5  0022               	movlb	2	; select bank2
 10866  0CE6  160C               	bsf	12,4	;volatile
 10867                           
 10868                           ;DPY.c: 231: DLYDelay_us(100);
 10869  0CE7  3064               	movlw	100
 10870  0CE8  00F1               	movwf	?_DLYDelay_us
 10871  0CE9  3000               	movlw	0
 10872  0CEA  00F2               	movwf	?_DLYDelay_us+1
 10873  0CEB  3195  2514  318C   	fcall	_DLYDelay_us
 10874                           
 10875                           ;DPY.c: 233: OUTSetHTCDataNibble(val&0b00001111);
 10876  0CEE  0875               	movf	DPYWriteByte@val,w
 10877  0CEF  390F               	andlw	15
 10878  0CF0  3196  2652  318C   	fcall	_OUTSetHTCDataNibble
 10879                           
 10880                           ;DPY.c: 235: DLYDelay_us(100);
 10881  0CF3  3064               	movlw	100
 10882  0CF4  00F1               	movwf	?_DLYDelay_us
 10883  0CF5  3000               	movlw	0
 10884  0CF6  00F2               	movwf	?_DLYDelay_us+1
 10885  0CF7  3195  2514  318C   	fcall	_DLYDelay_us
 10886                           
 10887                           ;DPY.c: 237: LATAbits.LATA4=0;
 10888  0CFA  0022               	movlb	2	; select bank2
 10889  0CFB  120C               	bcf	12,4	;volatile
 10890                           
 10891                           ;DPY.c: 239: DLYDelay_us(100);
 10892  0CFC  3064               	movlw	100
 10893  0CFD  00F1               	movwf	?_DLYDelay_us
 10894  0CFE  3000               	movlw	0
 10895  0CFF  00F2               	movwf	?_DLYDelay_us+1
 10896  0D00  3195  2514         	fcall	_DLYDelay_us
 10897  0D02  0008               	return
 10898  0D03                     __end_of_DPYWriteByte:	
 10899                           
 10900                           	psect	text58
 10901  09DC                     __ptext58:	
 10902 ;; *************** function _DPYWriteNibble *****************
 10903 ;; Defined at:
 10904 ;;		line 167 in file "DPY.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;  rs              1    wreg     enum E1828
 10907 ;;  val             1    5[COMMON] unsigned char 
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;  rs              1    6[COMMON] enum E1828
 10910 ;; Return value:  Size  Location     Type
 10911 ;;		None               void
 10912 ;; Registers used:
 10913 ;;		wreg, status,2, status,0, pclath, cstack
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10919 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;Total ram usage:        2 bytes
 10924 ;; Hardware stack levels used:    1
 10925 ;; Hardware stack levels required when called:    3
 10926 ;; This function calls:
 10927 ;;		_OUTSetHTCDataNibble
 10928 ;;		_DLYDelay_us
 10929 ;; This function is called by:
 10930 ;;		_DPYInitDisplay
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function _DPYWriteNibble
 10936  09DC                     _DPYWriteNibble:	
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in _DPYWriteNibble: [wreg+status,2+status,0+pclath+cstack]
 10940                           ;DPYWriteNibble@rs stored from wreg
 10941  09DC  00F6               	movwf	DPYWriteNibble@rs
 10942                           
 10943                           ;DPY.c: 171: LATAbits.LATA4=0;
 10944  09DD  0022               	movlb	2	; select bank2
 10945  09DE  120C               	bcf	12,4	;volatile
 10946                           
 10947                           ;DPY.c: 174: if(rs==RS_ISTRUCTION)
 10948  09DF  08F6               	movf	DPYWriteNibble@rs,f
 10949  09E0  1D03               	skipz
 10950  09E1  29E4               	goto	l4610
 10951                           
 10952                           ;DPY.c: 175: LATAbits.LATA6=0;
 10953  09E2  130C               	bcf	12,6	;volatile
 10954  09E3  29E8               	goto	l292
 10955  09E4                     l4610:	
 10956                           
 10957                           ;DPY.c: 176: else if(rs==RS_DATA)
 10958  09E4  0876               	movf	DPYWriteNibble@rs,w
 10959  09E5  3A01               	xorlw	1
 10960  09E6  1903               	btfsc	3,2
 10961                           
 10962                           ;DPY.c: 177: LATAbits.LATA6=1;
 10963  09E7  170C               	bsf	12,6	;volatile
 10964  09E8                     l292:	
 10965                           
 10966                           ;DPY.c: 180: LATAbits.LATA7=0;
 10967  09E8  138C               	bcf	12,7	;volatile
 10968                           
 10969                           ;DPY.c: 183: DLYDelay_us(100);
 10970  09E9  3064               	movlw	100
 10971  09EA  00F1               	movwf	?_DLYDelay_us
 10972  09EB  3000               	movlw	0
 10973  09EC  00F2               	movwf	?_DLYDelay_us+1
 10974  09ED  3195  2514  3189   	fcall	_DLYDelay_us
 10975                           
 10976                           ;DPY.c: 186: LATAbits.LATA4=1;
 10977  09F0  0022               	movlb	2	; select bank2
 10978  09F1  160C               	bsf	12,4	;volatile
 10979                           
 10980                           ;DPY.c: 188: DLYDelay_us(100);
 10981  09F2  3064               	movlw	100
 10982  09F3  00F1               	movwf	?_DLYDelay_us
 10983  09F4  3000               	movlw	0
 10984  09F5  00F2               	movwf	?_DLYDelay_us+1
 10985  09F6  3195  2514  3189   	fcall	_DLYDelay_us
 10986                           
 10987                           ;DPY.c: 190: OUTSetHTCDataNibble(val&0x0F);
 10988  09F9  0875               	movf	DPYWriteNibble@val,w
 10989  09FA  390F               	andlw	15
 10990  09FB  3196  2652  3189   	fcall	_OUTSetHTCDataNibble
 10991                           
 10992                           ;DPY.c: 192: DLYDelay_us(100);
 10993  09FE  3064               	movlw	100
 10994  09FF  00F1               	movwf	?_DLYDelay_us
 10995  0A00  3000               	movlw	0
 10996  0A01  00F2               	movwf	?_DLYDelay_us+1
 10997  0A02  3195  2514  3189   	fcall	_DLYDelay_us
 10998                           
 10999                           ;DPY.c: 194: LATAbits.LATA4=0;
 11000  0A05  0022               	movlb	2	; select bank2
 11001  0A06  120C               	bcf	12,4	;volatile
 11002                           
 11003                           ;DPY.c: 196: DLYDelay_us(100);
 11004  0A07  3064               	movlw	100
 11005  0A08  00F1               	movwf	?_DLYDelay_us
 11006  0A09  3000               	movlw	0
 11007  0A0A  00F2               	movwf	?_DLYDelay_us+1
 11008  0A0B  3195  2514         	fcall	_DLYDelay_us
 11009  0A0D  0008               	return
 11010  0A0E                     __end_of_DPYWriteNibble:	
 11011                           
 11012                           	psect	text59
 11013  1514                     __ptext59:	
 11014 ;; *************** function _DLYDelay_us *****************
 11015 ;; Defined at:
 11016 ;;		line 7 in file "DLY.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;  val             2    1[COMMON] unsigned short 
 11019 ;; Auto vars:     Size  Location     Type
 11020 ;;  i               2    3[COMMON] unsigned short 
 11021 ;; Return value:  Size  Location     Type
 11022 ;;		None               void
 11023 ;; Registers used:
 11024 ;;		wreg, status,2
 11025 ;; Tracked objects:
 11026 ;;		On entry : 0/0
 11027 ;;		On exit  : 0/0
 11028 ;;		Unchanged: 0/0
 11029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11030 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;Total ram usage:        4 bytes
 11035 ;; Hardware stack levels used:    1
 11036 ;; Hardware stack levels required when called:    2
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		_DPYWriteNibble
 11041 ;;		_DPYWriteByte
 11042 ;;		_DPYIsBusy
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _DLYDelay_us
 11048  1514                     _DLYDelay_us:	
 11049                           
 11050                           ;DLY.c: 8: unsigned short i;
 11051                           ;DLY.c: 10: for(i=0;i<val;i++)
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _DLYDelay_us: [wreg+status,2]
 11055  1514  01F3               	clrf	DLYDelay_us@i
 11056  1515  01F4               	clrf	DLYDelay_us@i+1
 11057  1516                     l88:	
 11058  1516  0872               	movf	DLYDelay_us@val+1,w
 11059  1517  0274               	subwf	DLYDelay_us@i+1,w
 11060  1518  1D03               	skipz
 11061  1519  2D1C               	goto	u4755
 11062  151A  0871               	movf	DLYDelay_us@val,w
 11063  151B  0273               	subwf	DLYDelay_us@i,w
 11064  151C                     u4755:	
 11065  151C  1803               	btfsc	3,0
 11066  151D  0008               	return
 11067  151E  0064               	clrwdt	;# 
 11068                           
 11069                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000000.0)));
 11070  151F  2D20               	nop2	;2 cycle nop
 11071  1520  3001               	movlw	1
 11072  1521  07F3               	addwf	DLYDelay_us@i,f
 11073  1522  3000               	movlw	0
 11074  1523  3DF4               	addwfc	DLYDelay_us@i+1,f
 11075  1524  2D16               	goto	l88
 11076  1525                     __end_of_DLYDelay_us:	
 11077                           
 11078                           	psect	text60
 11079  1652                     __ptext60:	
 11080 ;; *************** function _OUTSetHTCDataNibble *****************
 11081 ;; Defined at:
 11082 ;;		line 24 in file "OUT.c"
 11083 ;; Parameters:    Size  Location     Type
 11084 ;;  val             1    wreg     unsigned char 
 11085 ;; Auto vars:     Size  Location     Type
 11086 ;;  val             1    2[COMMON] unsigned char 
 11087 ;;  dataToSet       1    3[COMMON] unsigned char 
 11088 ;; Return value:  Size  Location     Type
 11089 ;;		None               void
 11090 ;; Registers used:
 11091 ;;		wreg, status,2, status,0
 11092 ;; Tracked objects:
 11093 ;;		On entry : 0/0
 11094 ;;		On exit  : 0/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;Total ram usage:        3 bytes
 11102 ;; Hardware stack levels used:    1
 11103 ;; Hardware stack levels required when called:    2
 11104 ;; This function calls:
 11105 ;;		Nothing
 11106 ;; This function is called by:
 11107 ;;		_DPYWriteNibble
 11108 ;;		_DPYWriteByte
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           
 11113                           ;psect for function _OUTSetHTCDataNibble
 11114  1652                     _OUTSetHTCDataNibble:	
 11115                           
 11116                           ;incstack = 0
 11117                           ; Regs used in _OUTSetHTCDataNibble: [wreg+status,2+status,0]
 11118                           ;OUTSetHTCDataNibble@val stored from wreg
 11119  1652  00F2               	movwf	OUTSetHTCDataNibble@val
 11120                           
 11121                           ;OUT.c: 25: unsigned char dataToSet=0;
 11122  1653  01F3               	clrf	OUTSetHTCDataNibble@dataToSet
 11123                           
 11124                           ;OUT.c: 27: if(val&0b00000001)
 11125  1654  1872               	btfsc	OUTSetHTCDataNibble@val,0
 11126                           
 11127                           ;OUT.c: 28: dataToSet|=0b00001000;
 11128  1655  15F3               	bsf	OUTSetHTCDataNibble@dataToSet,3
 11129                           
 11130                           ;OUT.c: 29: if(val&0b00000010)
 11131  1656  18F2               	btfsc	OUTSetHTCDataNibble@val,1
 11132                           
 11133                           ;OUT.c: 30: dataToSet|=0b00000100;
 11134  1657  1573               	bsf	OUTSetHTCDataNibble@dataToSet,2
 11135                           
 11136                           ;OUT.c: 31: if(val&0b00000100)
 11137  1658  1972               	btfsc	OUTSetHTCDataNibble@val,2
 11138                           
 11139                           ;OUT.c: 32: dataToSet|=0b00000010;
 11140  1659  14F3               	bsf	OUTSetHTCDataNibble@dataToSet,1
 11141                           
 11142                           ;OUT.c: 33: if(val&0b00001000)
 11143  165A  19F2               	btfsc	OUTSetHTCDataNibble@val,3
 11144                           
 11145                           ;OUT.c: 34: dataToSet|=0b00000001;
 11146  165B  1473               	bsf	OUTSetHTCDataNibble@dataToSet,0
 11147                           
 11148                           ;OUT.c: 36: dataToSet&=0b00001111;
 11149  165C  300F               	movlw	15
 11150  165D  00F1               	movwf	??_OUTSetHTCDataNibble
 11151  165E  0871               	movf	??_OUTSetHTCDataNibble,w
 11152  165F  05F3               	andwf	OUTSetHTCDataNibble@dataToSet,f
 11153                           
 11154                           ;OUT.c: 37: LATA|=dataToSet;
 11155  1660  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 11156  1661  00F1               	movwf	??_OUTSetHTCDataNibble
 11157  1662  0871               	movf	??_OUTSetHTCDataNibble,w
 11158  1663  0022               	movlb	2	; select bank2
 11159  1664  048C               	iorwf	12,f	;volatile
 11160                           
 11161                           ;OUT.c: 38: dataToSet|=0b11110000;
 11162  1665  30F0               	movlw	240
 11163  1666  00F1               	movwf	??_OUTSetHTCDataNibble
 11164  1667  0871               	movf	??_OUTSetHTCDataNibble,w
 11165  1668  04F3               	iorwf	OUTSetHTCDataNibble@dataToSet,f
 11166                           
 11167                           ;OUT.c: 39: LATA&=dataToSet;
 11168  1669  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 11169  166A  00F1               	movwf	??_OUTSetHTCDataNibble
 11170  166B  0871               	movf	??_OUTSetHTCDataNibble,w
 11171  166C  058C               	andwf	12,f	;volatile
 11172  166D  0008               	return
 11173  166E                     __end_of_OUTSetHTCDataNibble:	
 11174                           
 11175                           	psect	text61
 11176  15EA                     __ptext61:	
 11177 ;; *************** function _DLYDelay_ms *****************
 11178 ;; Defined at:
 11179 ;;		line 18 in file "DLY.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  val             2    1[COMMON] unsigned short 
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;  i               2    5[COMMON] unsigned short 
 11184 ;; Return value:  Size  Location     Type
 11185 ;;		None               void
 11186 ;; Registers used:
 11187 ;;		wreg, status,2
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;Total ram usage:        6 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    2
 11200 ;; This function calls:
 11201 ;;		Nothing
 11202 ;; This function is called by:
 11203 ;;		_DPYInitDisplay
 11204 ;;		_PGMSelLong
 11205 ;;		_RTXReadPkt
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           
 11210                           ;psect for function _DLYDelay_ms
 11211  15EA                     _DLYDelay_ms:	
 11212                           
 11213                           ;DLY.c: 19: unsigned short i;
 11214                           ;DLY.c: 21: for(i=0;i<val;i++)
 11215                           
 11216                           ;incstack = 0
 11217                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
 11218  15EA  01F5               	clrf	DLYDelay_ms@i
 11219  15EB  01F6               	clrf	DLYDelay_ms@i+1
 11220  15EC                     l94:	
 11221  15EC  0872               	movf	DLYDelay_ms@val+1,w
 11222  15ED  0276               	subwf	DLYDelay_ms@i+1,w
 11223  15EE  1D03               	skipz
 11224  15EF  2DF2               	goto	u4765
 11225  15F0  0871               	movf	DLYDelay_ms@val,w
 11226  15F1  0275               	subwf	DLYDelay_ms@i,w
 11227  15F2                     u4765:	
 11228  15F2  1803               	btfsc	3,0
 11229  15F3  0008               	return
 11230  15F4  0064               	clrwdt	;# 
 11231                           
 11232                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
 11233  15F5  3003               	movlw	3
 11234  15F6  00F4               	movwf	??_DLYDelay_ms+1
 11235  15F7  3097               	movlw	151
 11236  15F8  00F3               	movwf	??_DLYDelay_ms
 11237  15F9                     u6247:	
 11238  15F9  0BF3               	decfsz	??_DLYDelay_ms,f
 11239  15FA  2DF9               	goto	u6247
 11240  15FB  0BF4               	decfsz	??_DLYDelay_ms+1,f
 11241  15FC  2DF9               	goto	u6247
 11242  15FD  2DFE               	nop2
 11243  15FE  3001               	movlw	1
 11244  15FF  07F5               	addwf	DLYDelay_ms@i,f
 11245  1600  3000               	movlw	0
 11246  1601  3DF6               	addwfc	DLYDelay_ms@i+1,f
 11247  1602  2DEC               	goto	l94
 11248  1603                     __end_of_DLYDelay_ms:	
 11249                           
 11250                           	psect	text62
 11251  178D                     __ptext62:	
 11252 ;; *************** function _DINTask *****************
 11253 ;; Defined at:
 11254 ;;		line 80 in file "DIN.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;		None
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;		None
 11259 ;; Return value:  Size  Location     Type
 11260 ;;		None               void
 11261 ;; Registers used:
 11262 ;;		wreg, status,2, status,0
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;Total ram usage:        1 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    2
 11275 ;; This function calls:
 11276 ;;		Nothing
 11277 ;; This function is called by:
 11278 ;;		_main
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           
 11283                           ;psect for function _DINTask
 11284  178D                     _DINTask:	
 11285                           
 11286                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
 11287                           
 11288                           ;incstack = 0
 11289                           ; Regs used in _DINTask: [wreg+status,2+status,0]
 11290  178D  0021               	movlb	1	; select bank1
 11291  178E  01ED               	clrf	_u_in_sta_tmpTask^(0+128)
 11292                           
 11293                           ;DIN.c: 82: if(!PORTBbits.RB2)
 11294  178F  0020               	movlb	0	; select bank0
 11295  1790  190D               	btfsc	13,2	;volatile
 11296  1791  2F94               	goto	l3242
 11297                           
 11298                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
 11299  1792  0021               	movlb	1	; select bank1
 11300  1793  146D               	bsf	_u_in_sta_tmpTask^(0+128),0
 11301  1794                     l3242:	
 11302                           
 11303                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
 11304  1794  0021               	movlb	1	; select bank1
 11305  1795  086D               	movf	_u_in_sta_tmpTask^(0+128),w
 11306  1796  3901               	andlw	1
 11307  1797  00F1               	movwf	??_DINTask
 11308  1798  0020               	movlb	0	; select bank0
 11309  1799  086E               	movf	_u_in_sta_currTask,w
 11310  179A  3901               	andlw	1
 11311  179B  0671               	xorwf	??_DINTask,w
 11312  179C  1903               	skipnz
 11313  179D  2FA7               	goto	l3250
 11314                           
 11315                           ;DIN.c: 87: {
 11316                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
 11317  179E  106E               	bcf	_u_in_sta_currTask,0
 11318  179F  0021               	movlb	1	; select bank1
 11319  17A0  1C6D               	btfss	_u_in_sta_tmpTask^(0+128),0
 11320  17A1  2FA4               	goto	l3246
 11321  17A2  0020               	movlb	0	; select bank0
 11322  17A3  146E               	bsf	_u_in_sta_currTask,0
 11323  17A4                     l3246:	
 11324                           
 11325                           ;DIN.c: 89: tmrDbncSel=0;
 11326  17A4  0021               	movlb	1	; select bank1
 11327  17A5  01E6               	clrf	_tmrDbncSel^(0+128)
 11328                           
 11329                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
 11330  17A6  1469               	bsf	_u_flg_din^(0+128),0
 11331  17A7                     l3250:	
 11332                           
 11333                           ;DIN.c: 91: }
 11334                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
 11335  17A7  0020               	movlb	0	; select bank0
 11336  17A8  1C6E               	btfss	_u_in_sta_currTask,0
 11337  17A9  2FAD               	goto	l3254
 11338                           
 11339                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
 11340  17AA  0021               	movlb	1	; select bank1
 11341  17AB  14E9               	bsf	_u_flg_din^(0+128),1
 11342  17AC  0008               	return
 11343  17AD                     l3254:	
 11344                           
 11345                           ;DIN.c: 96: else
 11346                           ;DIN.c: 97: {
 11347                           ;DIN.c: 98: tmrLongSel=0;
 11348  17AD  0022               	movlb	2	; select bank2
 11349  17AE  01A8               	clrf	_tmrLongSel^(0+256)
 11350  17AF  01A9               	clrf	(_tmrLongSel+1)^(0+256)
 11351                           
 11352                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
 11353  17B0  0021               	movlb	1	; select bank1
 11354  17B1  10E9               	bcf	_u_flg_din^(0+128),1
 11355  17B2  0008               	return
 11356  17B3                     __end_of_DINTask:	
 11357                           
 11358                           	psect	text63
 11359  1536                     __ptext63:	
 11360 ;; *************** function _DINInit *****************
 11361 ;; Defined at:
 11362 ;;		line 25 in file "DIN.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;  sta             1    wreg     unsigned char 
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;  sta             1    1[COMMON] unsigned char 
 11367 ;; Return value:  Size  Location     Type
 11368 ;;		None               void
 11369 ;; Registers used:
 11370 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;Total ram usage:        1 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; Hardware stack levels required when called:    2
 11383 ;; This function calls:
 11384 ;;		Nothing
 11385 ;; This function is called by:
 11386 ;;		_main
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           
 11391                           ;psect for function _DINInit
 11392  1536                     _DINInit:	
 11393                           
 11394                           ;incstack = 0
 11395                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
 11396                           ;DINInit@sta stored from wreg
 11397  1536  00F1               	movwf	DINInit@sta
 11398                           
 11399                           ;DIN.c: 26: switch(sta)
 11400  1537  2D42               	goto	l3214
 11401  1538                     l3210:	
 11402                           ;DIN.c: 27: {
 11403                           ;DIN.c: 31: case 1:
 11404                           
 11405                           
 11406                           ;DIN.c: 33: u_flg_din.val=0;
 11407  1538  0021               	movlb	1	; select bank1
 11408  1539  01E9               	clrf	_u_flg_din^(0+128)
 11409                           
 11410                           ;DIN.c: 34: u_in_sta_currTask.val=0;
 11411  153A  0020               	movlb	0	; select bank0
 11412  153B  01EE               	clrf	_u_in_sta_currTask
 11413                           
 11414                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
 11415  153C  0021               	movlb	1	; select bank1
 11416  153D  01ED               	clrf	_u_in_sta_tmpTask^(0+128)
 11417                           
 11418                           ;DIN.c: 36: u_in_ev_up.val=0;
 11419  153E  01EC               	clrf	_u_in_ev_up^(0+128)
 11420                           
 11421                           ;DIN.c: 37: u_in_ev_down.val=0;
 11422  153F  01EA               	clrf	_u_in_ev_down^(0+128)
 11423                           
 11424                           ;DIN.c: 38: u_in_ev_long.val=0;
 11425  1540  01EB               	clrf	_u_in_ev_long^(0+128)
 11426                           
 11427                           ;DIN.c: 43: }
 11428                           
 11429                           ;DIN.c: 39: break;
 11430  1541  0008               	return
 11431  1542                     l3214:	
 11432  1542  0871               	movf	DINInit@sta,w
 11433                           
 11434                           ; Switch size 1, requested type "space"
 11435                           ; Number of cases is 1, Range of values is 1 to 1
 11436                           ; switch strategies available:
 11437                           ; Name         Instructions Cycles
 11438                           ; simple_byte            4     3 (average)
 11439                           ; direct_byte           11     9 (fixed)
 11440                           ; jumptable            263     9 (fixed)
 11441                           ;	Chosen strategy is simple_byte
 11442  1543  3A01               	xorlw	1	; case 1
 11443  1544  1903               	skipnz
 11444  1545  2D38               	goto	l3210
 11445  1546  2D47               	goto	l211
 11446  1547                     l211:	
 11447  1547  0008               	return
 11448  1548                     __end_of_DINInit:	
 11449                           
 11450                           	psect	text64
 11451  14D1                     __ptext64:	
 11452 ;; *************** function _NVMInit *****************
 11453 ;; Defined at:
 11454 ;;		line 7 in file "NVM.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;  sta             1    wreg     unsigned char 
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  sta             1    1[COMMON] unsigned char 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;		None               void
 11461 ;; Registers used:
 11462 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        1 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    2
 11475 ;; This function calls:
 11476 ;;		Nothing
 11477 ;; This function is called by:
 11478 ;;		_main
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           
 11483                           ;psect for function _NVMInit
 11484  14D1                     _NVMInit:	
 11485                           
 11486                           ;incstack = 0
 11487                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
 11488                           ;NVMInit@sta stored from wreg
 11489  14D1  00F1               	movwf	NVMInit@sta
 11490                           
 11491                           ;NVM.c: 8: switch(sta)
 11492  14D2  2CD6               	goto	l3122
 11493  14D3                     l3118:	
 11494                           ;NVM.c: 9: {
 11495                           ;NVM.c: 10: case 0:
 11496                           
 11497                           
 11498                           ;NVM.c: 12: PMCON1=0b00000000;
 11499  14D3  0023               	movlb	3	; select bank3
 11500  14D4  0195               	clrf	21	;volatile
 11501                           
 11502                           ;NVM.c: 20: }
 11503                           
 11504                           ;NVM.c: 13: break;
 11505  14D5  0008               	return
 11506  14D6                     l3122:	
 11507  14D6  0871               	movf	NVMInit@sta,w
 11508                           
 11509                           ; Switch size 1, requested type "space"
 11510                           ; Number of cases is 1, Range of values is 0 to 0
 11511                           ; switch strategies available:
 11512                           ; Name         Instructions Cycles
 11513                           ; simple_byte            4     3 (average)
 11514                           ; direct_byte            8     6 (fixed)
 11515                           ; jumptable            260     6 (fixed)
 11516                           ;	Chosen strategy is simple_byte
 11517  14D7  3A00               	xorlw	0	; case 0
 11518  14D8  1903               	skipnz
 11519  14D9  2CD3               	goto	l3118
 11520  14DA  2CDB               	goto	l154
 11521  14DB                     l154:	
 11522  14DB  0008               	return
 11523  14DC                     __end_of_NVMInit:	
 11524                           
 11525                           	psect	text65
 11526  09AA                     __ptext65:	
 11527 ;; *************** function _CC1Init *****************
 11528 ;; Defined at:
 11529 ;;		line 77 in file "CC1.c"
 11530 ;; Parameters:    Size  Location     Type
 11531 ;;  state           1    wreg     unsigned char 
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;  state           1    2[BANK0 ] unsigned char 
 11534 ;; Return value:  Size  Location     Type
 11535 ;;		None               void
 11536 ;; Registers used:
 11537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11546 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;Total ram usage:        3 bytes
 11548 ;; Hardware stack levels used:    1
 11549 ;; Hardware stack levels required when called:    4
 11550 ;; This function calls:
 11551 ;;		_CC1Strobe
 11552 ;;		_CC1Write
 11553 ;; This function is called by:
 11554 ;;		_main
 11555 ;; This function uses a non-reentrant model
 11556 ;;
 11557                           
 11558                           
 11559                           ;psect for function _CC1Init
 11560  09AA                     _CC1Init:	
 11561                           
 11562                           ;incstack = 0
 11563                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11564                           ;CC1Init@state stored from wreg
 11565  09AA  0020               	movlb	0	; select bank0
 11566  09AB  00A2               	movwf	CC1Init@state
 11567                           
 11568                           ;CC1.c: 79: switch(state)
 11569  09AC  29CF               	goto	l5414
 11570  09AD                     l5408:	
 11571                           ;CC1.c: 80: {
 11572                           ;CC1.c: 81: case 0:
 11573                           
 11574                           
 11575                           ;CC1.c: 83: IOCBP=0b00000000; IOCBN=0b00000000;
 11576  09AD  0027               	movlb	7	; select bank7
 11577  09AE  0194               	clrf	20	;volatile
 11578  09AF  0195               	clrf	21	;volatile
 11579                           
 11580                           ;CC1.c: 87: break;
 11581                           
 11582                           ;CC1.c: 85: case 1:
 11583                           
 11584                           ;CC1.c: 84: break;
 11585  09B0  0008               	return
 11586  09B1                     l5410:	
 11587                           ;CC1.c: 88: case 2:
 11588                           
 11589                           
 11590                           ;CC1.c: 90: CC1Strobe(SRES);
 11591  09B1  3030               	movlw	48
 11592  09B2  3195  2594  3189   	fcall	_CC1Strobe
 11593                           
 11594                           ;CC1.c: 91: CC1Write(0x00,cc1InitVal,0x2E);
 11595  09B5  30A0               	movlw	_cc1InitVal& (0+255)
 11596  09B6  0020               	movlb	0	; select bank0
 11597  09B7  00A0               	movwf	??_CC1Init
 11598  09B8  0820               	movf	??_CC1Init,w
 11599  09B9  00F7               	movwf	?_CC1Write
 11600  09BA  302E               	movlw	46
 11601  09BB  00A1               	movwf	??_CC1Init+1
 11602  09BC  0821               	movf	??_CC1Init+1,w
 11603  09BD  00F8               	movwf	?_CC1Write+1
 11604  09BE  3000               	movlw	0
 11605  09BF  3196  26C6  3189   	fcall	_CC1Write
 11606                           
 11607                           ;CC1.c: 92: CC1Write(0x3E,cc1PaTable,8);
 11608  09C2  305D               	movlw	_cc1PaTable& (0+255)
 11609  09C3  0020               	movlb	0	; select bank0
 11610  09C4  00A0               	movwf	??_CC1Init
 11611  09C5  0820               	movf	??_CC1Init,w
 11612  09C6  00F7               	movwf	?_CC1Write
 11613  09C7  3008               	movlw	8
 11614  09C8  00A1               	movwf	??_CC1Init+1
 11615  09C9  0821               	movf	??_CC1Init+1,w
 11616  09CA  00F8               	movwf	?_CC1Write+1
 11617  09CB  303E               	movlw	62
 11618  09CC  3196  26C6         	fcall	_CC1Write
 11619                           
 11620                           ;CC1.c: 94: }
 11621                           
 11622                           ;CC1.c: 93: break;
 11623  09CE  0008               	return
 11624  09CF                     l5414:	
 11625  09CF  0020               	movlb	0	; select bank0
 11626  09D0  0822               	movf	CC1Init@state,w
 11627                           
 11628                           ; Switch size 1, requested type "space"
 11629                           ; Number of cases is 3, Range of values is 0 to 2
 11630                           ; switch strategies available:
 11631                           ; Name         Instructions Cycles
 11632                           ; simple_byte           10     6 (average)
 11633                           ; direct_byte           12     6 (fixed)
 11634                           ; jumptable            260     6 (fixed)
 11635                           ;	Chosen strategy is simple_byte
 11636  09D1  3A00               	xorlw	0	; case 0
 11637  09D2  1903               	skipnz
 11638  09D3  29AD               	goto	l5408
 11639  09D4  3A01               	xorlw	1	; case 1
 11640  09D5  1903               	skipnz
 11641  09D6  29DB               	goto	l125
 11642  09D7  3A03               	xorlw	3	; case 2
 11643  09D8  1903               	skipnz
 11644  09D9  29B1               	goto	l5410
 11645  09DA  29DB               	goto	l125
 11646  09DB                     l125:	
 11647  09DB  0008               	return
 11648  09DC                     __end_of_CC1Init:	
 11649                           
 11650                           	psect	text66
 11651  16C6                     __ptext66:	
 11652 ;; *************** function _CC1Write *****************
 11653 ;; Defined at:
 11654 ;;		line 131 in file "CC1.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;  addr            1    wreg     unsigned char 
 11657 ;;  src             1    7[COMMON] PTR unsigned char 
 11658 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
 11659 ;;  len             1    8[COMMON] unsigned char 
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;  addr            1   10[COMMON] unsigned char 
 11662 ;;  cc1Addr         1   11[COMMON] unsigned char 
 11663 ;; Return value:  Size  Location     Type
 11664 ;;		None               void
 11665 ;; Registers used:
 11666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11672 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;Total ram usage:        5 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    3
 11679 ;; This function calls:
 11680 ;;		_SPIWrite
 11681 ;; This function is called by:
 11682 ;;		_CC1Init
 11683 ;;		_RTXSndPkt
 11684 ;; This function uses a non-reentrant model
 11685 ;;
 11686                           
 11687                           
 11688                           ;psect for function _CC1Write
 11689  16C6                     _CC1Write:	
 11690                           
 11691                           ;incstack = 0
 11692                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11693                           ;CC1Write@addr stored from wreg
 11694  16C6  00FA               	movwf	CC1Write@addr
 11695                           
 11696                           ;CC1.c: 132: unsigned char cc1Addr;
 11697                           ;CC1.c: 135: LATAbits.LATA5=0;
 11698  16C7  0022               	movlb	2	; select bank2
 11699  16C8  128C               	bcf	12,5	;volatile
 11700                           
 11701                           ;CC1.c: 138: cc1Addr=((addr&0b00111111)|0b01000000);
 11702  16C9  087A               	movf	CC1Write@addr,w
 11703  16CA  393F               	andlw	63
 11704  16CB  3840               	iorlw	64
 11705  16CC  00F9               	movwf	??_CC1Write
 11706  16CD  0879               	movf	??_CC1Write,w
 11707  16CE  00FB               	movwf	CC1Write@cc1Addr
 11708                           
 11709                           ;CC1.c: 139: SPIWrite((&(cc1Addr)),1);
 11710  16CF  307B               	movlw	low CC1Write@cc1Addr
 11711  16D0  00F1               	movwf	?_SPIWrite
 11712  16D1  3000               	movlw	high CC1Write@cc1Addr
 11713  16D2  00F2               	movwf	?_SPIWrite+1
 11714  16D3  01F3               	clrf	?_SPIWrite+2
 11715  16D4  0AF3               	incf	?_SPIWrite+2,f
 11716  16D5  3196  266E  3196   	fcall	_SPIWrite
 11717                           
 11718                           ;CC1.c: 142: SPIWrite(src,len);
 11719  16D8  0877               	movf	CC1Write@src,w
 11720  16D9  00F1               	movwf	?_SPIWrite
 11721  16DA  3001               	movlw	1
 11722  16DB  00F2               	movwf	?_SPIWrite+1
 11723  16DC  0878               	movf	CC1Write@len,w
 11724  16DD  00F9               	movwf	??_CC1Write
 11725  16DE  0879               	movf	??_CC1Write,w
 11726  16DF  00F3               	movwf	?_SPIWrite+2
 11727  16E0  3196  266E         	fcall	_SPIWrite
 11728                           
 11729                           ;CC1.c: 145: LATAbits.LATA5=1;
 11730  16E2  0022               	movlb	2	; select bank2
 11731  16E3  168C               	bsf	12,5	;volatile
 11732  16E4  0008               	return
 11733  16E5                     __end_of_CC1Write:	
 11734                           
 11735                           	psect	text67
 11736  1594                     __ptext67:	
 11737 ;; *************** function _CC1Strobe *****************
 11738 ;; Defined at:
 11739 ;;		line 98 in file "CC1.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;  e_stb           1    wreg     enum E1827
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;  e_stb           1    8[COMMON] enum E1827
 11744 ;;  cc1Stb          1    9[COMMON] unsigned char 
 11745 ;;  i               1    0        unsigned char 
 11746 ;; Return value:  Size  Location     Type
 11747 ;;		None               void
 11748 ;; Registers used:
 11749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;Total ram usage:        3 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; Hardware stack levels required when called:    3
 11762 ;; This function calls:
 11763 ;;		_SPIWrite
 11764 ;; This function is called by:
 11765 ;;		_CC1Init
 11766 ;;		_RTXInit
 11767 ;;		_RTXTick
 11768 ;;		_RTXSup
 11769 ;;		_RTXSndPkt
 11770 ;; This function uses a non-reentrant model
 11771 ;;
 11772                           
 11773                           
 11774                           ;psect for function _CC1Strobe
 11775  1594                     _CC1Strobe:	
 11776                           
 11777                           ;incstack = 0
 11778                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11779                           ;CC1Strobe@e_stb stored from wreg
 11780  1594  00F8               	movwf	CC1Strobe@e_stb
 11781                           
 11782                           ;CC1.c: 99: unsigned char cc1Stb,i;
 11783                           ;CC1.c: 102: LATAbits.LATA5=0;
 11784  1595  0022               	movlb	2	; select bank2
 11785  1596  128C               	bcf	12,5	;volatile
 11786                           
 11787                           ;CC1.c: 105: cc1Stb=((e_stb&0b00111111)|0b10000000);
 11788  1597  0878               	movf	CC1Strobe@e_stb,w
 11789  1598  393F               	andlw	63
 11790  1599  3880               	iorlw	128
 11791  159A  00F7               	movwf	??_CC1Strobe
 11792  159B  0877               	movf	??_CC1Strobe,w
 11793  159C  00F9               	movwf	CC1Strobe@cc1Stb
 11794                           
 11795                           ;CC1.c: 106: SPIWrite((&(cc1Stb)),1);
 11796  159D  3079               	movlw	low CC1Strobe@cc1Stb
 11797  159E  00F1               	movwf	?_SPIWrite
 11798  159F  3000               	movlw	high CC1Strobe@cc1Stb
 11799  15A0  00F2               	movwf	?_SPIWrite+1
 11800  15A1  01F3               	clrf	?_SPIWrite+2
 11801  15A2  0AF3               	incf	?_SPIWrite+2,f
 11802  15A3  3196  266E         	fcall	_SPIWrite
 11803                           
 11804                           ;CC1.c: 109: LATAbits.LATA5=1;
 11805  15A5  0022               	movlb	2	; select bank2
 11806  15A6  168C               	bsf	12,5	;volatile
 11807  15A7  0008               	return
 11808  15A8                     __end_of_CC1Strobe:	
 11809                           
 11810                           	psect	text68
 11811  166E                     __ptext68:	
 11812 ;; *************** function _SPIWrite *****************
 11813 ;; Defined at:
 11814 ;;		line 40 in file "SPI.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
 11817 ;;		 -> pktTx(9), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
 11818 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
 11819 ;;  len             1    3[COMMON] unsigned char 
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  i               1    6[COMMON] unsigned char 
 11822 ;; Return value:  Size  Location     Type
 11823 ;;		None               void
 11824 ;; Registers used:
 11825 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11826 ;; Tracked objects:
 11827 ;;		On entry : 0/0
 11828 ;;		On exit  : 0/0
 11829 ;;		Unchanged: 0/0
 11830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;Total ram usage:        6 bytes
 11836 ;; Hardware stack levels used:    1
 11837 ;; Hardware stack levels required when called:    2
 11838 ;; This function calls:
 11839 ;;		Nothing
 11840 ;; This function is called by:
 11841 ;;		_CC1Strobe
 11842 ;;		_CC1Read
 11843 ;;		_CC1Write
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           
 11848                           ;psect for function _SPIWrite
 11849  166E                     _SPIWrite:	
 11850                           
 11851                           ;SPI.c: 41: unsigned char i;
 11852                           ;SPI.c: 43: for(i=0;i<len;i++)
 11853                           
 11854                           ;incstack = 0
 11855                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 11856  166E  01F6               	clrf	SPIWrite@i
 11857  166F                     l4528:	
 11858  166F  0873               	movf	SPIWrite@len,w
 11859  1670  0276               	subwf	SPIWrite@i,w
 11860  1671  1803               	btfsc	3,0
 11861  1672  0008               	return
 11862                           
 11863                           ;SPI.c: 44: {
 11864                           ;SPI.c: 45: PIR1bits.SSPIF=0;
 11865  1673  0020               	movlb	0	; select bank0
 11866  1674  1191               	bcf	17,3	;volatile
 11867                           
 11868                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
 11869  1675  0876               	movf	SPIWrite@i,w
 11870  1676  00F4               	movwf	??_SPIWrite
 11871  1677  01F5               	clrf	??_SPIWrite+1
 11872  1678  0874               	movf	??_SPIWrite,w
 11873  1679  0771               	addwf	SPIWrite@srcPtr,w
 11874  167A  0086               	movwf	6
 11875  167B  0875               	movf	??_SPIWrite+1,w
 11876  167C  3D72               	addwfc	SPIWrite@srcPtr+1,w
 11877  167D  0087               	movwf	7
 11878  167E  0801               	movf	1,w
 11879  167F  0024               	movlb	4	; select bank4
 11880  1680  0091               	movwf	17	;volatile
 11881  1681                     l79:	
 11882                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
 11883                           
 11884  1681  0020               	movlb	0	; select bank0
 11885  1682  1991               	btfsc	17,3	;volatile
 11886  1683  2E86               	goto	l4526
 11887                           
 11888                           ;SPI.c: 48: _nop();
 11889  1684  0000               	nop
 11890  1685  2E81               	goto	l79
 11891  1686                     l4526:	
 11892  1686  3001               	movlw	1
 11893  1687  00F4               	movwf	??_SPIWrite
 11894  1688  0874               	movf	??_SPIWrite,w
 11895  1689  07F6               	addwf	SPIWrite@i,f
 11896  168A  2E6F               	goto	l4528
 11897  168B                     __end_of_SPIWrite:	
 11898                           
 11899                           	psect	text69
 11900  16A8                     __ptext69:	
 11901 ;; *************** function _SPIInit *****************
 11902 ;; Defined at:
 11903 ;;		line 9 in file "SPI.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;  state           1    wreg     unsigned char 
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;  state           1    2[COMMON] unsigned char 
 11908 ;; Return value:  Size  Location     Type
 11909 ;;		None               void
 11910 ;; Registers used:
 11911 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;Total ram usage:        2 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    2
 11924 ;; This function calls:
 11925 ;;		Nothing
 11926 ;; This function is called by:
 11927 ;;		_main
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           
 11932                           ;psect for function _SPIInit
 11933  16A8                     _SPIInit:	
 11934                           
 11935                           ;incstack = 0
 11936                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
 11937                           ;SPIInit@state stored from wreg
 11938  16A8  00F2               	movwf	SPIInit@state
 11939                           
 11940                           ;SPI.c: 10: switch(state)
 11941  16A9  2EBA               	goto	l3050
 11942  16AA                     l61:	
 11943                           ;SPI.c: 11: {
 11944                           ;SPI.c: 12: case 0:
 11945                           
 11946                           
 11947                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
 11948  16AA  0021               	movlb	1	; select bank1
 11949  16AB  160E               	bsf	14,4	;volatile
 11950  16AC  30D7               	movlw	215
 11951  16AD  00F1               	movwf	??_SPIInit
 11952  16AE  0871               	movf	??_SPIInit,w
 11953  16AF  058E               	andwf	14,f	;volatile
 11954  16B0  0024               	movlb	4	; select bank4
 11955  16B1  1295               	bcf	21,5	;volatile
 11956  16B2  0191               	clrf	17	;volatile
 11957  16B3  3001               	movlw	1
 11958  16B4  0095               	movwf	21	;volatile
 11959  16B5  0196               	clrf	22	;volatile
 11960  16B6  3040               	movlw	64
 11961  16B7  0094               	movwf	20	;volatile
 11962  16B8  1695               	bsf	21,5	;volatile
 11963                           
 11964                           ;SPI.c: 22: }
 11965                           
 11966                           ;SPI.c: 21: break;
 11967                           
 11968                           ;SPI.c: 19: case 2:
 11969                           
 11970                           ;SPI.c: 18: break;
 11971                           
 11972                           ;SPI.c: 16: case 1:
 11973                           
 11974                           ;SPI.c: 15: break;
 11975  16B9  0008               	return
 11976  16BA                     l3050:	
 11977  16BA  0872               	movf	SPIInit@state,w
 11978                           
 11979                           ; Switch size 1, requested type "space"
 11980                           ; Number of cases is 3, Range of values is 0 to 2
 11981                           ; switch strategies available:
 11982                           ; Name         Instructions Cycles
 11983                           ; simple_byte           10     6 (average)
 11984                           ; direct_byte           12     6 (fixed)
 11985                           ; jumptable            260     6 (fixed)
 11986                           ;	Chosen strategy is simple_byte
 11987  16BB  3A00               	xorlw	0	; case 0
 11988  16BC  1903               	skipnz
 11989  16BD  2EAA               	goto	l61
 11990  16BE  3A01               	xorlw	1	; case 1
 11991  16BF  1903               	skipnz
 11992  16C0  2EC5               	goto	l65
 11993  16C1  3A03               	xorlw	3	; case 2
 11994  16C2  1903               	skipnz
 11995  16C3  2EC5               	goto	l65
 11996  16C4  2EC5               	goto	l65
 11997  16C5                     l65:	
 11998  16C5  0008               	return
 11999  16C6                     __end_of_SPIInit:	
 12000                           
 12001                           	psect	text70
 12002  0839                     __ptext70:	
 12003 ;; *************** function _OUTInit *****************
 12004 ;; Defined at:
 12005 ;;		line 7 in file "OUT.c"
 12006 ;; Parameters:    Size  Location     Type
 12007 ;;  sta             1    wreg     unsigned char 
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;  sta             1    2[COMMON] unsigned char 
 12010 ;; Return value:  Size  Location     Type
 12011 ;;		None               void
 12012 ;; Registers used:
 12013 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;Total ram usage:        2 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:    2
 12026 ;; This function calls:
 12027 ;;		Nothing
 12028 ;; This function is called by:
 12029 ;;		_main
 12030 ;; This function uses a non-reentrant model
 12031 ;;
 12032                           
 12033                           
 12034                           ;psect for function _OUTInit
 12035  0839                     _OUTInit:	
 12036                           
 12037                           ;incstack = 0
 12038                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 12039                           ;OUTInit@sta stored from wreg
 12040  0839  00F2               	movwf	OUTInit@sta
 12041                           
 12042                           ;OUT.c: 8: switch(sta)
 12043  083A  284A               	goto	l3010
 12044  083B                     l3002:	
 12045                           ;OUT.c: 9: {
 12046                           ;OUT.c: 10: case 0:
 12047                           
 12048                           
 12049                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00000111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00000000; ANSELC&=0b00000000;
 12050  083B  0021               	movlb	1	; select bank1
 12051  083C  018C               	clrf	12	;volatile
 12052  083D  3007               	movlw	7
 12053  083E  00F1               	movwf	??_OUTInit
 12054  083F  0871               	movf	??_OUTInit,w
 12055  0840  058D               	andwf	13,f	;volatile
 12056  0841  3010               	movlw	16
 12057  0842  00F1               	movwf	??_OUTInit
 12058  0843  0871               	movf	??_OUTInit,w
 12059  0844  058E               	andwf	14,f	;volatile
 12060  0845  0023               	movlb	3	; select bank3
 12061  0846  018C               	clrf	12	;volatile
 12062  0847  018D               	clrf	13	;volatile
 12063  0848  018E               	clrf	14	;volatile
 12064                           
 12065                           ;OUT.c: 20: }
 12066                           
 12067                           ;OUT.c: 13: break;
 12068  0849  0008               	return
 12069  084A                     l3010:	
 12070  084A  0872               	movf	OUTInit@sta,w
 12071                           
 12072                           ; Switch size 1, requested type "space"
 12073                           ; Number of cases is 1, Range of values is 0 to 0
 12074                           ; switch strategies available:
 12075                           ; Name         Instructions Cycles
 12076                           ; simple_byte            4     3 (average)
 12077                           ; direct_byte            8     6 (fixed)
 12078                           ; jumptable            260     6 (fixed)
 12079                           ;	Chosen strategy is simple_byte
 12080  084B  3A00               	xorlw	0	; case 0
 12081  084C  1903               	skipnz
 12082  084D  283B               	goto	l3002
 12083  084E  284F               	goto	l34
 12084  084F                     l34:	
 12085  084F  0008               	return
 12086  0850                     __end_of_OUTInit:	
 12087                           
 12088                           	psect	text71
 12089  15D3                     __ptext71:	
 12090 ;; *************** function _INInit *****************
 12091 ;; Defined at:
 12092 ;;		line 7 in file "IN.c"
 12093 ;; Parameters:    Size  Location     Type
 12094 ;;  sta             1    wreg     unsigned char 
 12095 ;; Auto vars:     Size  Location     Type
 12096 ;;  sta             1    2[COMMON] unsigned char 
 12097 ;; Return value:  Size  Location     Type
 12098 ;;		None               void
 12099 ;; Registers used:
 12100 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12101 ;; Tracked objects:
 12102 ;;		On entry : 0/0
 12103 ;;		On exit  : 0/0
 12104 ;;		Unchanged: 0/0
 12105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12109 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;Total ram usage:        2 bytes
 12111 ;; Hardware stack levels used:    1
 12112 ;; Hardware stack levels required when called:    2
 12113 ;; This function calls:
 12114 ;;		Nothing
 12115 ;; This function is called by:
 12116 ;;		_main
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _INInit
 12122  15D3                     _INInit:	
 12123                           
 12124                           ;incstack = 0
 12125                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 12126                           ;INInit@sta stored from wreg
 12127  15D3  00F2               	movwf	INInit@sta
 12128                           
 12129                           ;IN.c: 8: switch(sta)
 12130  15D4  2DE4               	goto	l2998
 12131  15D5                     l2990:	
 12132                           ;IN.c: 9: {
 12133                           ;IN.c: 10: case 0:
 12134                           
 12135                           
 12136                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELB&=0b11111000; WPUB=0b00000111;
 12137  15D5  3007               	movlw	7
 12138  15D6  00F1               	movwf	??_INInit
 12139  15D7  0871               	movf	??_INInit,w
 12140  15D8  0021               	movlb	1	; select bank1
 12141  15D9  048D               	iorwf	13,f	;volatile
 12142  15DA  160E               	bsf	14,4	;volatile
 12143  15DB  30F8               	movlw	248
 12144  15DC  00F1               	movwf	??_INInit
 12145  15DD  0871               	movf	??_INInit,w
 12146  15DE  0023               	movlb	3	; select bank3
 12147  15DF  058D               	andwf	13,f	;volatile
 12148  15E0  3007               	movlw	7
 12149  15E1  0024               	movlb	4	; select bank4
 12150  15E2  008D               	movwf	13	;volatile
 12151                           
 12152                           ;IN.c: 20: }
 12153                           
 12154                           ;IN.c: 13: break;
 12155  15E3  0008               	return
 12156  15E4                     l2998:	
 12157  15E4  0872               	movf	INInit@sta,w
 12158                           
 12159                           ; Switch size 1, requested type "space"
 12160                           ; Number of cases is 1, Range of values is 0 to 0
 12161                           ; switch strategies available:
 12162                           ; Name         Instructions Cycles
 12163                           ; simple_byte            4     3 (average)
 12164                           ; direct_byte            8     6 (fixed)
 12165                           ; jumptable            260     6 (fixed)
 12166                           ;	Chosen strategy is simple_byte
 12167  15E5  3A00               	xorlw	0	; case 0
 12168  15E6  1903               	skipnz
 12169  15E7  2DD5               	goto	l2990
 12170  15E8  2DE9               	goto	l14
 12171  15E9                     l14:	
 12172  15E9  0008               	return
 12173  15EA                     __end_of_INInit:	
 12174                           
 12175                           	psect	intentry
 12176  0004                     __pintentry:	
 12177 ;; *************** function _INTIsr *****************
 12178 ;; Defined at:
 12179 ;;		line 38 in file "Base.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;		None
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;		None
 12184 ;; Return value:  Size  Location     Type
 12185 ;;		None               void
 12186 ;; Registers used:
 12187 ;;		wreg, status,2, status,0, pclath, cstack
 12188 ;; Tracked objects:
 12189 ;;		On entry : 0/0
 12190 ;;		On exit  : 0/0
 12191 ;;		Unchanged: 0/0
 12192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;Total ram usage:        1 bytes
 12198 ;; Hardware stack levels used:    1
 12199 ;; Hardware stack levels required when called:    1
 12200 ;; This function calls:
 12201 ;;		_SYSInt
 12202 ;; This function is called by:
 12203 ;;		Interrupt level 1
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207  0004                     _INTIsr:	
 12208                           
 12209                           ;incstack = 0
 12210                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 12211  0004  3180               	pagesel	$
 12212  0005  0020               	movlb	0	; select bank0
 12213  0006  087F               	movf	127,w
 12214  0007  00F0               	movwf	??_INTIsr
 12215                           
 12216                           ;Base.c: 40: if(INTCONbits.T0IF==1)
 12217  0008  1D0B               	btfss	11,2	;volatile
 12218  0009  280D               	goto	i1l694
 12219                           
 12220                           ;Base.c: 41: {
 12221                           ;Base.c: 43: INTCONbits.T0IF=0;
 12222  000A  110B               	bcf	11,2	;volatile
 12223                           
 12224                           ;Base.c: 46: SYSInt();
 12225  000B  3194  2498         	fcall	_SYSInt
 12226  000D                     i1l694:	
 12227  000D  0870               	movf	??_INTIsr,w
 12228  000E  0020               	movlb	0	; select bank0
 12229  000F  00FF               	movwf	127
 12230  0010  0009               	retfie
 12231  0011                     __end_of_INTIsr:	
 12232                           
 12233                           	psect	text73
 12234  1498                     __ptext73:	
 12235 ;; *************** function _SYSInt *****************
 12236 ;; Defined at:
 12237 ;;		line 33 in file "SYS.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;		None
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;		None
 12242 ;; Return value:  Size  Location     Type
 12243 ;;		None               void
 12244 ;; Registers used:
 12245 ;;		wreg
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        0 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; This function calls:
 12258 ;;		Nothing
 12259 ;; This function is called by:
 12260 ;;		_INTIsr
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           
 12265                           ;psect for function _SYSInt
 12266  1498                     _SYSInt:	
 12267                           
 12268                           ;SYS.c: 35: u_SYS_STA.TICK=1;
 12269                           
 12270                           ;incstack = 0
 12271                           ; Regs used in _SYSInt: [wreg]
 12272  1498  0021               	movlb	1	; select bank1
 12273  1499  1468               	bsf	_u_SYS_STA^(0+128),0
 12274                           
 12275                           ;SYS.c: 38: TMR0=255-156;
 12276  149A  3063               	movlw	99
 12277  149B  0020               	movlb	0	; select bank0
 12278  149C  0095               	movwf	21	;volatile
 12279  149D  0008               	return
 12280  149E                     __end_of_SYSInt:	
 12281  007E                     btemp	set	126	;btemp
 12282  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    45
    Data        64
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     78      80
    BANK1            80     64      79
    BANK2            80      0      69
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?_utoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    ?___ftsub	float  size(1) Largest target is 0

    ?___lltoft	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 3
		 -> RTXReadPkt@valBatt(BANK0[3]), RTXReadPkt@valTemp(BANK0[3]), 

    ?___ftneg	float  size(1) Largest target is 3
		 -> RTXReadPkt@valBatt(BANK0[3]), RTXReadPkt@valTemp(BANK0[3]), 

    ?___ftmul	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 3
		 -> RTXReadPkt@valBatt(BANK0[3]), RTXReadPkt@valTemp(BANK0[3]), 

    ?___ftpack	float  size(1) Largest target is 3
		 -> RTXReadPkt@valBatt(BANK0[3]), RTXReadPkt@valTemp(BANK0[3]), 

    ?___lldiv	unsigned long  size(1) Largest target is 0

    ?___llmod	unsigned long  size(1) Largest target is 3
		 -> RTXReadPkt@valBatt(BANK0[3]), RTXReadPkt@valTemp(BANK0[3]), 

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> RTXVisDec@status(BANK1[2]), 

    ?_ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ?_itoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    ?_sprintf	int  size(1) Largest target is 3
		 -> RTXReadPkt@valBatt(BANK0[3]), RTXReadPkt@valTemp(BANK0[3]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S956$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK2[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK2[9]), 

    RTXVisDec@buff	PTR unsigned char  size(1) Largest target is 16
		 -> RTXUpdateDisplay@strText(BANK1[16]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    RTXVisDec@p	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK2[17]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    DPYSendStr@data	PTR unsigned char  size(1) Largest target is 16
		 -> RTXUpdateDisplay@strText(BANK1[16]), RTXUpdateDisplay@strTitle(BANK1[16]), 

    DPYDrawChar@p	PTR unsigned char  size(1) Largest target is 9
		 -> picBatt(BANK2[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK2[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK2[5]), 

    CC1Write@src	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK2[9]), cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    CC1Read@dst	PTR unsigned char  size(2) Largest target is 9
		 -> pktRx(BANK2[9]), numTxByte(BANK1[1]), numRxByte(BANK0[1]), sta(COMMON[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK2[9]), CC1Write@cc1Addr(COMMON[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(2) Largest target is 9
		 -> pktRx(BANK2[9]), numTxByte(BANK1[1]), numRxByte(BANK0[1]), sta(COMMON[1]), 


Critical Paths under _main in COMMON

    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_PGMWriteNvm
    _RTXReadPkt->_RTXRcvPkt
    _RTXSndPkt->_CC1Write
    _RTXRcvPkt->_CC1Read
    _RTXSup->_CC1Read
    _CC1Read->_SPIRead
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _sprintf->___llmod
    ___llmod->___lldiv
    _itoa->_utoa
    _utoa->___lwdiv
    _DPYSendStr->_DPYSetCur
    _DPYIsBusy->_DLYDelay_us
    _DPYSendChar->_DPYWriteByte
    _DPYSetCur->_DPYWriteByte
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar
    _DPYDrawChar->_DPYWriteByte
    _DPYWriteByte->_DLYDelay_us
    _DPYWriteNibble->_DLYDelay_us
    _CC1Init->_CC1Write
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelLong
    _RTXPgmOn->_RTXSendPgm
    _RTXSelDown->_RTXUpdateDisplay
    _RTXTick->_RTXUpdateDisplay
    _RTXSendPgm->_RTXSndPkt
    _PGMSelDown->_RTXUpdateDisplay
    _PGMPgmOff->_RTXUpdateDisplay
    _RTXTask->_RTXReadPkt
    _RTXSendRData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _RTXSup->_CC1Read
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_RTXVisDec
    _RTXVisDec->_ftoa
    _ftoa->_sprintf
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _sprintf->___llmod
    ___llmod->___lldiv
    _itoa->_utoa
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXSelDown->_RTXUpdateDisplay
    _RTXTick->_RTXUpdateDisplay
    _PGMSelLong->_RTXUpdateDisplay
    _PGMSelDown->_RTXUpdateDisplay
    _PGMPgmOff->_RTXUpdateDisplay
    _RTXReadPkt->_RTXUpdateDisplay
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_RTXVisDec

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  130734
                                             76 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _CC1Init
                            _NVMInit
                            _DINInit
                            _DINTask
                            _DPYInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   99658
                            _DINTick
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                          _RTXPgmOff
                            _RTXTick
                         _RTXSelDown
                           _RTXPgmOn
 ---------------------------------------------------------------------------------
 (2) _RTXPgmOn                                             0     0      0     932
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (2) _RTXSelDown                                           0     0      0   12044
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   13762
                          _CC1Strobe
                   _RTXUpdateDisplay
                             _RTXSup
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0     932
                                              9 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0   24744
                                             69 BANK0      1     1      0
                        _DLYDelay_ms
                          _PGMPgmOff
                        _PGMWriteNvm
                   _RTXUpdateDisplay
                          _RTXPgmOff
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           0     0      0   24088
                          _PGMPgmOff
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0   12044
                          _PGMPgmOff
 ---------------------------------------------------------------------------------
 (3) _PGMPgmOff                                            0     0      0   12044
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   15374
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           7     7      0   15374
                                             69 BANK0      7     7      0
                        _DLYDelay_ms
                            _CC1Read
                        _PGMWriteNvm
                   _RTXUpdateDisplay
                          _RTXPgmOff
                             _RTXSup
                          _RTXRcvPkt
                       _RTXSendRData
 ---------------------------------------------------------------------------------
 (3) _RTXSendRData                                         1     1      0     932
                                              9 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            4     3      1     932
                                              5 BANK0      4     3      1
                          _CC1Strobe
                           _CC1Write
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            3     2      1     452
                                             11 COMMON     1     0      1
                                              5 BANK0      2     2      0
                            _CC1Read
 ---------------------------------------------------------------------------------
 (3) _RTXSup                                               0     0      0     588
                          _CC1Strobe
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              6     3      3     390
                                             10 COMMON     1     1      0
                                              0 BANK0      5     2      3
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              9     6      3     130
                                              1 COMMON     9     6      3
 ---------------------------------------------------------------------------------
 (2) _RTXPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0   12273
                                             65 BANK0      1     1      0
                          _CC1Strobe
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _RTXUpdateDisplay                                    43    43      0   12044
                                             62 BANK0      3     3      0
                                             24 BANK1     40    40      0
                         _DPYSendStr
                               _itoa
                          _RTXVisDec
                             ___ftge
 ---------------------------------------------------------------------------------
 (4) _RTXVisDec                                           33    28      5    6238
                                             53 BANK0      9     4      5
                                              0 BANK1     24    24      0
                               _ftoa
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     300
                                              1 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (5) _ftoa                                                14    10      4    4969
                                             39 BANK0     14    10      4
                            _sprintf
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4     414
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     252
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    1602
                                             10 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    1537
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3      45
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6     800
                                              0 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     136
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             26    17      9    1392
                                             13 BANK0     26    17      9
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4      92
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___llmod                                             10     2      8     159
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             14     6      8     162
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 7     3      4     994
                                             10 COMMON     1     1      0
                                              8 BANK0      6     2      4
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     5      4     761
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              6     2      4     159
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     162
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _DPYSendStr                                           6     3      3    1426
                                              0 BANK0      6     3      3
                          _DPYSetCur
                        _DPYSendChar
                          _DPYIsBusy
 ---------------------------------------------------------------------------------
 (5) _DPYIsBusy                                            2     2      0     105
                                              5 COMMON     2     2      0
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (5) _DPYSendChar                                          2     2      0     430
                                              8 COMMON     2     2      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYSetCur                                            4     3      1     498
                                              8 COMMON     4     3      1
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DPYInit                                              1     1      0    1528
                                              4 BANK0      1     1      0
                     _DPYInitDisplay
 ---------------------------------------------------------------------------------
 (2) _DPYInitDisplay                                       2     2      0    1497
                                             11 COMMON     1     1      0
                                              3 BANK0      1     1      0
                        _DLYDelay_ms
                     _DPYWriteNibble
                       _DPYWriteByte
                        _DPYDrawChar
 ---------------------------------------------------------------------------------
 (3) _DPYDrawChar                                          6     5      1     625
                                              8 COMMON     3     2      1
                                              0 BANK0      3     3      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (6) _DPYWriteByte                                         3     2      1     399
                                              5 COMMON     3     2      1
                _OUTSetHTCDataNibble
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (3) _DPYWriteNibble                                       2     1      1     368
                                              5 COMMON     2     1      1
                _OUTSetHTCDataNibble
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (6) _DLYDelay_us                                          4     2      2      68
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (7) _OUTSetHTCDataNibble                                  3     3      0     207
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC1Init                                              3     3      0     500
                                              0 BANK0      3     3      0
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             5     3      2     260
                                              7 COMMON     5     3      2
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _NVMInit
   _DINInit
   _DINTask
   _DPYInit
     _DPYInitDisplay
       _DLYDelay_ms
       _DPYWriteNibble
         _OUTSetHTCDataNibble
         _DLYDelay_us
       _DPYWriteByte
         _OUTSetHTCDataNibble
         _DLYDelay_us
       _DPYDrawChar
         _DPYWriteByte
           _OUTSetHTCDataNibble
           _DLYDelay_us
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXUpdateDisplay
       _DPYSendStr
         _DPYSetCur
           _DPYWriteByte
             _OUTSetHTCDataNibble
             _DLYDelay_us
         _DPYSendChar
           _DPYWriteByte
             _OUTSetHTCDataNibble
             _DLYDelay_us
         _DPYIsBusy
           _DLYDelay_us
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _RTXVisDec
         _ftoa
           _sprintf
             _isdigit
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
         ___awdiv
       ___ftge
   _RTXTask
     _RTXReadPkt
       _DLYDelay_ms
       _CC1Read
         _SPIRead
         _SPIWrite
       _PGMWriteNvm
         _NVMWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _RTXVisDec
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
         ___ftge
       _RTXPgmOff
       _RTXSup
         _CC1Strobe
           _SPIWrite
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRData
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
   _SYSInit
   _SYSTask
     _DINTick
     _PGMTick
       _PGMPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYSetCur
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYIsBusy
               _DLYDelay_us
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _RTXVisDec
             _ftoa
               _sprintf
                 _isdigit
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
                 ___wmul
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
             ___awdiv
           ___ftge
     _PGMPgmOff
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _RTXVisDec
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
         ___ftge
     _PGMSelDown
       _PGMPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYSetCur
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYIsBusy
               _DLYDelay_us
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _RTXVisDec
             _ftoa
               _sprintf
                 _isdigit
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
                 ___wmul
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
             ___awdiv
           ___ftge
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _RTXVisDec
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
         ___ftge
     _PGMSelLong
       _DLYDelay_ms
       _PGMPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYSetCur
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _OUTSetHTCDataNibble
                 _DLYDelay_us
             _DPYIsBusy
               _DLYDelay_us
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _RTXVisDec
             _ftoa
               _sprintf
                 _isdigit
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
                 ___wmul
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___ftsub
                 ___ftadd
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
             ___awdiv
           ___ftge
       _PGMWriteNvm
         _NVMWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _RTXVisDec
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
         ___ftge
       _RTXPgmOff
     _RTXPgmOff
     _RTXTick
       _CC1Strobe
         _SPIWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _RTXVisDec
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
         ___ftge
       _RTXSup
         _CC1Strobe
           _SPIWrite
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
     _RTXSelDown
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYSetCur
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _OUTSetHTCDataNibble
               _DLYDelay_us
           _DPYIsBusy
             _DLYDelay_us
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _RTXVisDec
           _ftoa
             _sprintf
               _isdigit
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
           ___awdiv
         ___ftge
     _RTXPgmOn
       _RTXSendPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     120      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Nov 10 16:49:11 2014

          __size_of_CC1Strobe 0014                    __CFG_CP$ON 0000                            l14 15E9  
                          l34 084F                            l61 16AA                            l70 17BD  
                          l65 16C5                            l94 15EC                            l79 1681  
                          l88 1516                  ___awdiv@sign 0077           ___wmul@multiplicand 0073  
                ?_DLYDelay_ms 0071                  ?_DLYDelay_us 0071                  ___ftadd@exp1 007B  
                ___ftadd@exp2 007A                  ___ftadd@sign 0079                           l211 1547  
                         l125 09DB                           l214 088D                           l216 088B  
                         l154 14DB                           l170 067C                           l261 155A  
                         l181 06F3                           l173 06A2                           l166 0662  
                         l159 17EE                           l183 06FA                           l176 06AB  
                         l168 066D                           l169 0691                           l186 070C  
                         l355 1636                           l515 094C                           l292 09E8  
                         l524 0D05                           l382 15B2                           l624 1768  
                         l457 08C9                           l298 0CB9                           l731 0373  
                         l903 0DA3                           l728 035B                           l499 05B9  
                         l926 0534                           l697 0BBF                           l698 0BFB  
                         l699 0BFC                           l897 0D8C               __end_of_CC1Init 09DC  
             __end_of_CC1Read 178D                           _sta 007C                  __CFG_BORV$LO 0000  
                         wreg 0009                    _RTXReadPkt 0F58               __end_of_DINInit 1548  
          DPYDrawChar@tmpAddr 0021               __end_of_DINTask 17B3               __end_of_DINTick 08A0  
                  _RTXSelDown 1637                  __CFG_LVP$OFF 0000                    _RTXSendPgm 16E5  
                 ?_DPYSendStr 0020                          l1013 0E18                          l1130 1693  
                        l3002 083B                          l3010 084A                          l3050 16BA  
                        l3122 14D6                          l3210 1538                          l4002 0405  
                        l3118 14D3                          l3214 1542                          l3206 0707  
                        l4022 0482                          l4006 0422                          l3136 17DC  
                        l4016 043A                          l4008 0425                          l4024 02BF  
                        l4112 0CA6                          l4104 0C95                          l3250 17A7  
                        l3242 1794                          l4026 048F                          l4108 0C9E  
                        l3254 17AD                          l3246 17A4                          l3190 06D5  
                        l4038 14F4                          l3184 06CF                          l4312 0EAC  
                        l4304 0E92                          l4080 0C64                          l5040 05A4  
             __end_of_DPYInit 155B                          l4410 0A49                          l5026 0868  
                        l4306 0E9B                          l5050 05DB                          l4412 0A55  
                        l5220 0D78                          l5212 0D62                          l4308 0E9E  
                        l5060 0603                          l5108 1648                          l3198 06F5  
                        l4422 0A70                          l4086 0C6F                          l4440 096B  
                        l4352 0C18                          l4192 0A8D                          l5216 0D69  
                        l5400 08CE                          l4096 0C77                          l5072 062E  
                        l5064 0610                          l4520 17B4                          l5410 09B1  
                        l4610 09E4                          l4418 0A67                          l4434 0953  
                        l4362 0C46                          l4354 0C26                          l4450 168D  
                        l5226 0D91                          l5218 0D73                          l5322 073D  
                        l5306 0573                          l5250 04C4                          l5402 08E0  
                        l4098 0C83                          l5074 064E                          l4436 095F  
                        l4444 0974                          l4196 0AA3                          l5228 0D99  
                        l5316 0727                          l4516 17C2                          l5500 0F9F  
                        l4526 1686                          l5414 09CF                          l4710 0B08  
                        l4366 0C51                          l4382 0B5F                          l5350 079C  
                        l5334 0778                          l5246 04BD                          l4278 0E47  
                        l5430 07E1                          l4528 166F                          l5408 09AD  
                        l4376 0B39                          l5280 0513                          l5256 04D3  
                        l4296 0E77                          l5088 0EE8                          l4800 0080  
                        l5520 0F63                          l4626 0CB5                          l4378 0B47  
                        l4386 0B6A                          l5346 0794                          l5338 0780  
                        l5274 0500                          l4298 0E85                          l5514 0FED  
                        l3834 1748                          l4660 15CA                          l3940 02EA  
                        l5292 0546                          l5276 050A                          l5268 04ED  
                        l4804 00F7                          l5516 0FF1                          l3852 1760  
                        l2990 15D5                          l4582 154E                          l4742 14E5  
                        l4726 161F                          l4670 0B8D                          l3934 02DB  
                        l5286 0526                          l5278 050F                          l5438 07EE  
                        l4728 1622                          l4736 162D                          l4672 0B95  
                        l5368 0DC2                          l3960 0357                          l5296 0558  
                        l5288 0530                          l4808 0120                          l5528 0D20  
                        l3848 175D                          l5560 0A1B                          l4578 154B  
                        l4682 0BA4                          l4690 0B7F                          l5378 0DE6  
                        l3962 035D                          l4842 0228                          l4834 01BE  
                        l4826 0154                          l4930 092D                          l3972 0382  
                        l3948 031A                          l4852 0270                          l4932 0931  
                        l5572 0A2C                          l2998 15E4                          l3982 03A1  
                        l3966 0362                          l3958 0328                          l4782 005B  
                        l4934 0939                          l5566 0A25                          l4688 0BB3  
                        l4856 029D                          l4776 0047                          l5584 0A3A  
                        l3994 03D6                          l3986 03A7                          l4794 0074  
                        l4890 08AD                          l4938 0941                          l5578 0A33  
                        l4788 0060                          l3998 03ED                          l4888 08A3  
                        l4896 08BD                          STR_1 082E                  __CFG_WDTE$ON 0000  
           NVMWrite@bufTmpRow 0020                          _LATA 010C                          _PIE1 0091  
                        _PIE2 0092                          u4225 0E4E                          u3515 03E5  
                        u3525 03FD                          u3535 0415                          u4255 0E78  
                        u4505 0A4C                          u4425 0B3C                          u4355 0C1B  
                        u5315 05D8                          u4525 0A56                          u4605 096C  
                        u4445 0B55                          u3565 0449                          u3485 03AE  
                        u4285 0E93                          u4535 0A60                          u4375 0C27  
                        u4455 0B60                          u3575 048C                          u3495 03CC  
                        u4545 0A68                          u4385 0C3B                          u4395 0C47  
                        u4635 1694                          u5515 0D6E                          u3755 0C7A  
                        u4645 1699                          u6247 15F9                          u4815 0CCD  
                        u4575 0956                          u5535 0D87                          u3775 0C84  
                        u3785 0C8E                          _PIR1 0011                          _PIR2 0012  
                        u4755 151C                          u4595 0965                          u5555 0D94  
                        u3795 0C96                          u4765 15F2                          u5725 0501  
                        u5585 0DAA                          u5755 0514                          u5925 079D  
                        u5935 07A3                          u5855 0749                          u5695 04EE  
                        u5865 0759                          u5785 0527                          u5885 0781  
                        u5895 0787                          u5985 08D4                          _TMR0 0015  
                        _WPUB 020D               __end_of_PGMInit 1637               __end_of_PGMTick 1514  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _batt 0120  
                        _main 0BB9              __end_of_CC1Write 16E5                          _ftoa 0EB5  
                ___ftpack@arg 0071               __end_of_NVMInit 14DC               __end_of_NVMRead 1800  
                        _itoa 0850                  ___ftpack@exp 0074                          _temp 0123  
             __end_of_SPIInit 16C6               __end_of_SPIRead 17D9                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
                        _utoa 0DBA               __end_of_OUTInit 0850                  ?_DPYDrawChar 0078  
               __CFG_BOREN$ON 0000                          start 0011               __end_of_RTXInit 08CA  
           NVMWrite@latchAddr 0063               __end_of_RTXTask 14AA               __end_of_RTXTick 07FF  
               __CFG_IESO$OFF 0000               __end_of_SYSInit 1769               __end_of_SYSTask 0A41  
          __size_of_DPYIsBusy 0040                  ___ftmul@cntr 002E                  ___ftmul@sign 002F  
          __size_of_DPYSetCur 0016                   ?_PGMReadNvm 0070                 __CFG_LPBOR$ON 0000  
                 ?_PGMSelDown 0070                  ___fttol@exp1 003D                   ?_PGMSelLong 0070  
            ??_DPYWriteNibble 0076                  ?_DPYSendChar 0070                  ___fttol@lval 0039  
                SPIInit@state 0072                         ?_main 0070                         ?_ftoa 0047  
                       ?_itoa 0028               __end_of___awdiv 0CAD               __end_of___ftadd 058B  
             __end_of___ftneg 14BE               __end_of___lldiv 0C5A                         ?_utoa 0020  
             __end_of___ftmul 07C4               ___awdiv@divisor 0071                         _T1CON 0018  
             __end_of___llmod 0B73               __end_of___ftsub 161C               __end_of___fttol 0EB5  
          __size_of_PGMPgmOff 000A                         _IOCBN 0395                         _IOCBP 0394  
             __end_of___lwdiv 0A77               __end_of___lwmod 097B                         i1l694 000D  
             ___awdiv@counter 0076                         _PMADR 0191                         _PMDAT 0193  
                       _TMR1H 0017                         _TMR1L 0016                         _TRISA 008C  
                       _TRISB 008D                         _TRISC 008E                 __CFG_PWRTE$ON 0000  
                ___lltoft@exp 007A                   _sys_pgm_sta 00E5         __size_of_RTXSendRData 0022  
             __end_of_dpowers 0829             __end_of_CC1Strobe 15A8               __end_of_isdigit 14F6  
                       _pktRx 013D                         _pktTx 0146                 ___ftpack@sign 0075  
                       main@i 006D                         ftoa@f 0047              __end_of_NVMWrite 0710  
                       ftoa@l 0050              __end_of_SPIWrite 168B                         utoa@c 0026  
            __end_of_RTXPgmOn 1498                         utoa@v 0024                         status 0003  
                       wtemp0 007E               __end_of_sprintf 0495                  ?_PGMCheckNvm 0070  
              __CFG_MCLRE$OFF 0000               __initialization 0013    RTXUpdateDisplay@charIdSens 00B8  
                DLYDelay_ms@i 0075                  DLYDelay_us@i 0073            __size_of_RTXPgmOff 0006  
                __end_of_main 0C07                  __end_of_ftoa 0F58            __size_of_RTXRcvPkt 000E  
                __end_of_itoa 0878            __size_of_RTXSndPkt 0057                  __end_of_utoa 0E2E  
          __size_of_RTXVisDec 00C6                     ??_CC1Init 0020                     ??_CC1Read 007A  
         __size_of_DPYSendStr 0046                CC1Strobe@e_stb 0078             RTXUpdateDisplay@i 00DF  
                 DPYIsBusy@bf 0076                        ??_main 006C                    _cc1PaTable 015D  
                      ??_ftoa 004B                 ___fttol@sign1 0038                        ??_itoa 007A  
                _RTXSendRData 1724                        ??_utoa 0079                  CC1Init@state 0022  
                   ??_DINInit 0071                  NVMWrite@addr 0071                     ??_DINTask 0071  
                   ??_DINTick 0071                    _cc1InitVal 01A0                  ?_PGMNvmReset 0070  
                   ??_DPYInit 007C                     ??_PGMInit 007C                     ??_PGMTick 007C  
                 ?_RTXReadPkt 0070             __end_of_DPYIsBusy 0B30                   ?_RTXSelDown 0070  
               SPIRead@dstPtr 0071                   ?_RTXSendPgm 0070                     ??_NVMInit 0071  
                   ??_NVMRead 0075             __end_of_DPYSetCur 15D3              ___llmod@dividend 0029  
                   ??_SPIInit 0071                     ??_SPIRead 0074              ___awdiv@dividend 0073  
                   ??_OUTInit 0071                        _ANSELA 018C                        _ANSELB 018D  
                      _ANSELC 018E              __end_of___ftpack 0DBA           __size_of_PGMReadNvm 0013  
            __end_of___lltoft 08F5                     ??_RTXInit 007C                  ?_PGMWriteNvm 0070  
         __size_of_PGMSelDown 0015                     ??_RTXTask 007C                     ??_RTXTick 007C  
         __size_of_PGMSelLong 0020                        _INTCON 000B        OUTSetHTCDataNibble@val 0072  
         _OUTSetHTCDataNibble 1652                     ??_SYSInit 0071                        _PMCON1 0195  
                      _PMCON2 0196                     ??_SYSTask 007C                        _INTIsr 0004  
                      _OSCCON 0099                        _INInit 15D3                        _WDTCON 0097  
                      _SSPBUF 0211                        _RTXSup 0921             __end_of_PGMPgmOff 14D1  
                      _SYSInt 1498      __end_of_RTXUpdateDisplay 02B9                   DPYSendStr@i 0024  
                      ___ftge 0A77             RTXVisDec@maxDigit 0059                 ?_DPYWriteByte 0075  
                      ___wmul 168B                     ??___awdiv 0075                     ??___ftadd 0026  
              __CFG_STVREN$ON 0000                     ??___ftneg 0074                     ??___lldiv 0079  
                   ??___ftmul 0026                     ??___llmod 007A                     ??___ftsub 007C  
                   ??___fttol 0034                     ??___lwdiv 0075                     ??___lwmod 0075  
        ?_OUTSetHTCDataNibble 0070       __size_of_DPYInitDisplay 003E              ___awdiv@quotient 0078  
                      _tmrPgm 012A                        ftoa@cp 0054         ___ftmul@f3_as_product 002B  
        __size_of_DLYDelay_ms 0019                        itoa@cp 002C          __size_of_DLYDelay_us 0011  
                   ?_CC1Write 0077                     ??_isdigit 0071             __end_of_RTXPgmOff 14A4  
           __end_of_RTXRcvPkt 1504                     ??_sprintf 0036             __end_of_RTXSndPkt 0D5A  
           __end_of_RTXVisDec 0651       __end_of__initialization 003D                    ___ftadd@f1 0020  
                  ___ftadd@f2 0023                    ___ftge@ff1 0071                    ___ftge@ff2 0074  
    RTXUpdateDisplay@maxDigit 00CC                    ___ftneg@f1 0071                    ___ftmul@f1 0020  
                  ___ftmul@f2 0023          __size_of_DPYDrawChar 002C                    ___ftsub@f1 002D  
                  ___ftsub@f2 002A                    ___fttol@f1 0030                __pcstackCOMMON 0070  
              ??_DPYWriteByte 0076                  __pidataBANK2 1525                  __pidataBANK3 097B  
         __size_of_RTXReadPkt 00A8                    ___lltoft@c 0020           __size_of_RTXSelDown 001B  
             NVMWrite@rowAddr 0060           __size_of_RTXSendPgm 001F         ??_OUTSetHTCDataNibble 0071  
                   ?_NVMWrite 0071               CC1Strobe@cc1Stb 0079          __size_of_DPYSendChar 0009  
                   ?_SPIWrite 0071                    CC1Read@len 0022                    CC1Read@dst 0020  
    RTXUpdateDisplay@strTitle 00CD                     ?_RTXPgmOn 0070                    ??_CC1Write 0079  
                CC1Write@addr 007A             RTXReadPkt@valBatt 0069                  DPYDrawChar@i 0022  
                DPYDrawChar@p 0078             RTXReadPkt@valTemp 0066                  ??_DPYSendStr 0023  
                sprintf@width 0042                    __pbssBANK0 006E                    __pbssBANK1 00E0  
                  __pbssBANK2 0120                       ?_INTIsr 0070                       ?_INInit 0070  
             __CFG_VCAPEN$OFF 0000                       ?_RTXSup 0070                       ?_SYSInt 0070  
                   INInit@sta 0072          __size_of_PGMCheckNvm 000C                    __pmaintext 0BB9  
                     ?___ftge 0071                  ??_PGMReadNvm 0078               CC1Write@cc1Addr 007B  
                     ?___wmul 0071                  ??_PGMSelDown 007C                  ??_PGMSelLong 0065  
                  __pintentry 0004                       _CC1Init 09AA                       _CC1Read 1769  
          __end_of_DPYSendStr 0BB9             _u_in_sta_currTask 006E                     ?___ftpack 0071  
                  ??_NVMWrite 0075                     ?___lltoft 0020                    ??_SPIWrite 0074  
                     _DINInit 1536                       _DINTick 0878                       _DINTask 178D  
                  ??_RTXPgmOn 007C                       _DPYInit 1548                       _PGMInit 161C  
                     _PGMTick 1504          __size_of_PGMNvmReset 0013                       _SSPCON1 0215  
                     _SSPCON2 0216                       _NVMInit 14D1                       _NVMRead 17D9  
                     _SPIInit 16A8                       _SPIRead 17B3                       _SSPSTAT 0214  
                     _OUTInit 0839                  DPYSendChar@c 0079               DPYDrawChar@addr 0020  
                  __stringtab 0800                       _RTXInit 08A0                  DPYSetCur@col 0078  
                     _RTXTick 07C4                       _RTXTask 14A4                  DPYSetCur@row 007A  
          __end_of_PGMReadNvm 156E                       _SYSInit 1746                       _SYSTask 0A0E  
          __end_of_PGMSelDown 15BD            __end_of_PGMSelLong 1724                     _CC1Strobe 1594  
             __size_of_INTIsr 000D               __size_of_INInit 0017          __size_of_PGMWriteNvm 0013  
             __size_of_RTXSup 002C               __size_of_SYSInt 0006                     NVMWrite@i 0062  
                   NVMWrite@j 0064                     SPIWrite@i 0076               __size_of___ftge 003B  
                     ___awdiv 0C5A                       ___ftadd 0495                  RTXInit@state 0061  
                     ___ftneg 14B6                       ___lldiv 0C07               __size_of___wmul 001D  
                     ___ftmul 0710                       ___llmod 0B30                       ___ftsub 1603  
                     ___fttol 0E2E                       ___lwdiv 0A41                       ___lwmod 094D  
              _DPYInitDisplay 0AB2                    ??___ftpack 0076                    ??___lltoft 0079  
                     __ptext1 0A0E                       __ptext2 1493                       __ptext3 1637  
                     __ptext4 07C4                       __ptext5 16E5                       __ptext6 1704  
                     __ptext7 15A8                       __ptext8 1504                       __ptext9 14C7  
                     _picBatt 0154                       _dpowers 0801                       _isdigit 14E8  
                     _pgm_cfg 014F                       _pgm_flg 00E2                  ??_RTXReadPkt 0065  
                ??_RTXSelDown 007C                  ??_RTXSendPgm 0029          __end_of_DPYWriteByte 0D03  
                     _sprintf 02B9                       clrloop0 14B1                       _rtx_flg 00E3  
OUTSetHTCDataNibble@dataToSet 0073                  RTXRcvPkt@len 007B                  RTXRcvPkt@dst 0026  
        end_of_initialization 003D                       ftoa@buf 012C                    _u_in_ev_up 00EC  
                     ftoa@rem 004C                     _DPYIsBusy 0AF0                    ?_CC1Strobe 0070  
                     itoa@buf 002D                       init_ram 14AA                       itoa@val 0028  
                   _DPYSetCur 15BD                       initloop 14AB                  RTXSndPkt@len 0025  
                RTXSndPkt@src 0028               ___lldiv@divisor 0071             ?_RTXUpdateDisplay 0070  
             ___lldiv@counter 0024            ??_RTXUpdateDisplay 005E                     _PGMPgmOff 14C7  
      __end_of_DPYInitDisplay 0AF0                    _tmrDbncSel 00E6                  RTXVisDec@val 0055  
          __end_of_RTXReadPkt 1000                       utoa@buf 0027                       utoa@val 0020  
          __end_of_RTXSelDown 1652                    DINInit@sta 0071            __end_of_RTXSendPgm 1704  
                   _PORTAbits 000C                     _PORTBbits 000D             DPYWriteNibble@val 0075  
                  _tmrLongSel 0128                    _tmrVisBatt 00E0              __CFG_FOSC$INTOSC 0000  
     __size_of_DPYWriteNibble 0032             __size_of_CC1Write 001F                   NVMRead@addr 0071  
                 NVMRead@dest 0073                    ?_DPYIsBusy 0070                     _RTXPgmOff 149E  
                   _RTXRcvPkt 14F6                    ?_DPYSetCur 0078                     _RTXSndPkt 0D03  
                   _RTXVisDec 058B                __end_of_INTIsr 0011                __end_of_INInit 15EA  
              __end_of_RTXSup 094D                __end_of_SYSInt 149E                _tmrCalibration 0126  
                 ___ftmul@exp 002A                    ?_PGMPgmOff 0070               ?_DPYInitDisplay 0070  
              DLYDelay_ms@val 0071                DLYDelay_us@val 0071                __end_of___ftge 0AB2  
              __end_of___wmul 16A8                 ??_DLYDelay_ms 0073                 ??_DLYDelay_us 0073  
              DPYSendStr@data 0021                  SYSInit@state 0072             __size_of_NVMWrite 00BF  
           __size_of_SPIWrite 001D           start_initialization 0013             __size_of_RTXPgmOn 0005  
                  ftoa@status 004A                   CC1Read@addr 0023                   NVMWrite@len 0074  
                    ??_INTIsr 0070                      ??_INInit 0071                   ??_CC1Strobe 0077  
                  ?_RTXPgmOff 0070                    DPYInit@sta 0024                    ?_RTXRcvPkt 007B  
                  ?_RTXSndPkt 0025                    ?_RTXVisDec 0055                 ??_DPYDrawChar 0079  
             ___llmod@divisor 0025               ___llmod@counter 007B                      ??_RTXSup 007B  
                    ??_SYSInt 0070                CC1Read@cc1Addr 0024   __end_of_OUTSetHTCDataNibble 166E  
         RTXUpdateDisplay@val 00DE                      ??___ftge 0077                      ??___wmul 0075  
               ??_DPYSendChar 0078                      ?_CC1Init 0070                      ?_CC1Read 0020  
                 __pdataBANK2 0154                   __pdataBANK3 01A0                   SPIWrite@len 0073  
                    ?_DINInit 0070                      ?_DINTask 0070                      ?_DINTick 0070  
       __size_of_DPYWriteByte 0056             __size_of___ftpack 0060             __size_of___lltoft 002B  
                 __pbssCOMMON 007C                      ?_DPYInit 0070                 __pcstackBANK0 0020  
               __pcstackBANK1 00A0           __end_of_DLYDelay_ms 1603           __end_of_DLYDelay_us 1525  
                   _s_CC1_FLG 00E4                      ?_PGMInit 0070                      ?_PGMTick 0070  
         __end_of__stringdata 0839                  _isdigit$1094 0071                      ?_NVMInit 0070  
                    ?_NVMRead 0071                      ?_SPIInit 0070                      ?_SPIRead 0071  
              NVMWrite@source 0073                      ?_OUTInit 0070                  PGMInit@state 0066  
     RTXUpdateDisplay@strText 00BC                      ?_RTXInit 0070                      ?_RTXTask 0070  
                    ?_RTXTick 0070                   ??_DPYIsBusy 0075                   CC1Write@len 0078  
                    ?_SYSInit 0070                   CC1Write@src 0077                      ?_SYSTask 0070  
                 sprintf@_val 003D                   sprintf@flag 003B                   ??_DPYSetCur 0079  
               ??_PGMCheckNvm 007C                   sprintf@prec 0044              ___lwdiv@dividend 0073  
                 ??_PGMPgmOff 007C           __end_of_DPYDrawChar 0921                      ?___awdiv 0071  
                    ?___ftadd 0020                  _DPYWriteByte 0CAD                      ?___ftneg 0071  
                    ?___lldiv 0071                      ?___ftmul 0020                      ?___llmod 0025  
                    ?___ftsub 002A                      ?___fttol 0030                      ?___lwdiv 0071  
                    ?___lwmod 0071                     _u_SYS_STA 00E8                     __pstrings 0800  
            _u_in_sta_tmpTask 00ED                 ?_RTXSendRData 0070                      NVMRead@i 0077  
               ??_PGMNvmReset 0065                      SPIRead@i 0079                      _CC1Write 16C6  
         __end_of_DPYSendChar 14C7                      ?_isdigit 0070                _DPYWriteNibble 09DC  
            ___lwdiv@quotient 0076                      ?_sprintf 002D                 ??_PGMWriteNvm 0078  
                 ??_RTXPgmOff 0071                     _u_flg_din 00E9                   ??_RTXRcvPkt 0025  
                 ??_RTXSndPkt 0026                ___wmul@product 0075                      _LATAbits 010C  
                 ??_RTXVisDec 005A                     clear_ram0 14B0                     _numRxByte 006F  
                    _PIR1bits 0011                     _numTxByte 00EE           __end_of_PGMCheckNvm 14E8  
            DPYWriteNibble@rs 0076                     _tmrRcvPkt 00E7                ??_RTXSendRData 0029  
            __size_of_CC1Init 0032              __size_of_CC1Read 0024                   _DLYDelay_ms 15EA  
                 _DLYDelay_us 1514                      _NVMWrite 0651                   __stringdata 082E  
                    _SPIWrite 166E             ___wmul@multiplier 0071                    NVMInit@sta 0071  
                  NVMRead@len 0074        __end_of_DPYWriteNibble 0A0E     __size_of_RTXUpdateDisplay 0279  
               DPYSetCur@addr 007B                      _RTXPgmOn 1493              __size_of_DINInit 0012  
            __size_of_DINTask 0026              __size_of_DINTick 0028              __size_of_DPYInit 0013  
                  SPIRead@len 0073              __size_of_PGMInit 001B              __size_of_PGMTick 0010  
         __end_of_PGMNvmReset 1594                 DPYSendStr@col 0020                 DPYSendStr@len 0022  
            __size_of_NVMInit 000B                 DPYSendStr@row 0025              __size_of_NVMRead 0027  
            __size_of_SPIInit 001E              __size_of_SPIRead 0026                  _u_in_ev_down 00EA  
                _u_in_ev_long 00EB              __size_of_OUTInit 0017              __size_of_RTXInit 002A  
            __size_of_RTXTask 0006              __size_of_RTXTick 003B              __size_of_SYSInit 0023  
            __size_of_SYSTask 0033              ??_DPYInitDisplay 007B                   _DPYDrawChar 08F5  
                  OUTInit@sta 0072           __end_of_PGMWriteNvm 1581               RTXVisDec@offset 00B4  
             RTXVisDec@posDec 00B2               RTXVisDec@strTmp 00A0               RTXVisDec@status 00B0  
                 _DPYSendChar 14BE              __size_of___awdiv 0053              __size_of___ftadd 00F6  
            __size_of___ftneg 0008              __size_of___lldiv 0053              __size_of___ftmul 00B4  
            __size_of___llmod 0043              __size_of___ftsub 0019              __size_of___fttol 0087  
            __size_of___lwdiv 0036        RTXUpdateDisplay@curPos 00DD              __size_of___lwmod 002E  
                    ___ftpack 0D5A            __end_of__stringtab 0801                      ___lltoft 08CA  
             ?_DPYWriteNibble 0075              __size_of_isdigit 000E               ___lwdiv@divisor 0071  
             ___lwdiv@counter 0078                      __ptext10 0878                      __ptext11 1746  
                    __ptext20 149E                      __ptext12 14A4                      __ptext21 08A0  
                    __ptext13 0F58                      __ptext30 14B6                      __ptext22 0040  
                    __ptext14 1724                      __ptext31 0710                      __ptext23 058B  
                    __ptext15 0D03                      __ptext40 0DBA                      __ptext32 0D5A  
                    __ptext24 0C5A                      __ptext16 14F6                      __ptext41 094D  
                    __ptext33 0A77                      __ptext25 0EB5                      __ptext17 0921  
                    __ptext50 156E                      __ptext42 0A41                      __ptext34 02B9  
                    __ptext26 08CA                      __ptext18 1769                      __ptext51 0651  
                    __ptext43 0B73                      __ptext35 168B                      __ptext27 0E2E  
                    __ptext19 17B3                      __ptext60 1652                      __ptext52 155B  
                    __ptext44 0AF0                      __ptext36 0B30                      __ptext28 1603  
                    __ptext61 15EA                      __ptext53 17D9                      __ptext45 14BE  
                    __ptext37 0C07                      __ptext29 0495                      __ptext70 0839  
                    __ptext62 178D                      __ptext54 1548                      __ptext46 15BD  
                    __ptext38 14E8                      __ptext71 15D3                      __ptext63 1536  
                    __ptext55 0AB2                      __ptext47 161C                      __ptext39 0850  
                    __ptext64 14D1                      __ptext56 08F5                      __ptext48 14DC  
                    __ptext73 1498                      __ptext65 09AA                      __ptext57 0CAD  
                    __ptext49 1581                      __ptext66 16C6                      __ptext58 09DC  
                    __ptext67 1594                      __ptext59 1514                      __ptext68 166E  
                    __ptext69 16A8              __size_of_sprintf 01DC           __end_of_nvm_pgm_cfg 082E  
               __size_of_main 004E                 __size_of_ftoa 00A3                 __size_of_itoa 0028  
                 _PGMCheckNvm 14DC                 __size_of_utoa 0074                    RTXVisDec@i 00B7  
                  RTXVisDec@j 00B6                    RTXVisDec@p 00B5               DPYWriteByte@val 0075  
                 _PGMNvmReset 1581                    _INTCONbits 000B                RTXVisDec@isDec 00B3  
                    itoa@base 002A                      isdigit@c 0072             DPYInitDisplay@tmp 0023  
                  _DPYSendStr 0B73                SPIWrite@srcPtr 0071                      intlevel1 0000  
                   sprintf@ap 003C                     sprintf@sp 0041                   _PGMWriteNvm 156E  
                  _PMCON1bits 0195          __end_of_RTXSendRData 1746              ___lwmod@dividend 0073  
            ___lldiv@dividend 0075             __CFG_CLKOUTEN$OFF 0000                DPYWriteByte@rs 0077  
                  _PGMReadNvm 155B                    _PGMSelDown 15A8                    _PGMSelLong 1704  
__size_of_OUTSetHTCDataNibble 001C                 RTXVisDec@buff 0058                      utoa@base 0022  
                  _OPTION_REG 0095                      sprintf@c 0046                      sprintf@f 002D  
            _RTXUpdateDisplay 0040              ___lldiv@quotient 0020               ___lwmod@divisor 0071  
             ___lwmod@counter 0076                   _nvm_pgm_cfg 0829                    _SSPCONbits 0215  
