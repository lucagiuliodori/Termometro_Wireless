

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Nov 15 14:09:06 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	functab,global,reloc=256,class=CODE,delta=2
    86                           	dabs	1,0x7E,2
    87  0000                     	;# 
    88  0001                     	;# 
    89  0002                     	;# 
    90  0003                     	;# 
    91  0004                     	;# 
    92  0005                     	;# 
    93  0006                     	;# 
    94  0007                     	;# 
    95  0008                     	;# 
    96  0009                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000D                     	;# 
   101  000E                     	;# 
   102  0010                     	;# 
   103  0011                     	;# 
   104  0012                     	;# 
   105  0015                     	;# 
   106  0016                     	;# 
   107  0016                     	;# 
   108  0017                     	;# 
   109  0018                     	;# 
   110  0019                     	;# 
   111  001A                     	;# 
   112  001B                     	;# 
   113  001C                     	;# 
   114  008C                     	;# 
   115  008D                     	;# 
   116  008E                     	;# 
   117  0090                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  010C                     	;# 
   131  010D                     	;# 
   132  010E                     	;# 
   133  0116                     	;# 
   134  0117                     	;# 
   135  011D                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0194                     	;# 
   145  0195                     	;# 
   146  0196                     	;# 
   147  0197                     	;# 
   148  0199                     	;# 
   149  019A                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019D                     	;# 
   157  019E                     	;# 
   158  019F                     	;# 
   159  020D                     	;# 
   160  0210                     	;# 
   161  0211                     	;# 
   162  0211                     	;# 
   163  0212                     	;# 
   164  0212                     	;# 
   165  0213                     	;# 
   166  0213                     	;# 
   167  0214                     	;# 
   168  0214                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0216                     	;# 
   173  0216                     	;# 
   174  0217                     	;# 
   175  0217                     	;# 
   176  0291                     	;# 
   177  0291                     	;# 
   178  0292                     	;# 
   179  0293                     	;# 
   180  0298                     	;# 
   181  0298                     	;# 
   182  0299                     	;# 
   183  029A                     	;# 
   184  0394                     	;# 
   185  0395                     	;# 
   186  0396                     	;# 
   187  0FE4                     	;# 
   188  0FE5                     	;# 
   189  0FE6                     	;# 
   190  0FE7                     	;# 
   191  0FE8                     	;# 
   192  0FE9                     	;# 
   193  0FEA                     	;# 
   194  0FEB                     	;# 
   195  0FED                     	;# 
   196  0FEE                     	;# 
   197  0FEF                     	;# 
   198  0000                     	;# 
   199  0001                     	;# 
   200  0002                     	;# 
   201  0003                     	;# 
   202  0004                     	;# 
   203  0005                     	;# 
   204  0006                     	;# 
   205  0007                     	;# 
   206  0008                     	;# 
   207  0009                     	;# 
   208  000A                     	;# 
   209  000B                     	;# 
   210  000C                     	;# 
   211  000D                     	;# 
   212  000E                     	;# 
   213  0010                     	;# 
   214  0011                     	;# 
   215  0012                     	;# 
   216  0015                     	;# 
   217  0016                     	;# 
   218  0016                     	;# 
   219  0017                     	;# 
   220  0018                     	;# 
   221  0019                     	;# 
   222  001A                     	;# 
   223  001B                     	;# 
   224  001C                     	;# 
   225  008C                     	;# 
   226  008D                     	;# 
   227  008E                     	;# 
   228  0090                     	;# 
   229  0091                     	;# 
   230  0092                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0099                     	;# 
   235  009A                     	;# 
   236  009B                     	;# 
   237  009B                     	;# 
   238  009C                     	;# 
   239  009D                     	;# 
   240  009E                     	;# 
   241  010C                     	;# 
   242  010D                     	;# 
   243  010E                     	;# 
   244  0116                     	;# 
   245  0117                     	;# 
   246  011D                     	;# 
   247  018C                     	;# 
   248  018D                     	;# 
   249  018E                     	;# 
   250  0191                     	;# 
   251  0191                     	;# 
   252  0192                     	;# 
   253  0193                     	;# 
   254  0193                     	;# 
   255  0194                     	;# 
   256  0195                     	;# 
   257  0196                     	;# 
   258  0197                     	;# 
   259  0199                     	;# 
   260  019A                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019B                     	;# 
   265  019C                     	;# 
   266  019C                     	;# 
   267  019D                     	;# 
   268  019E                     	;# 
   269  019F                     	;# 
   270  020D                     	;# 
   271  0210                     	;# 
   272  0211                     	;# 
   273  0211                     	;# 
   274  0212                     	;# 
   275  0212                     	;# 
   276  0213                     	;# 
   277  0213                     	;# 
   278  0214                     	;# 
   279  0214                     	;# 
   280  0215                     	;# 
   281  0215                     	;# 
   282  0215                     	;# 
   283  0216                     	;# 
   284  0216                     	;# 
   285  0217                     	;# 
   286  0217                     	;# 
   287  0291                     	;# 
   288  0291                     	;# 
   289  0292                     	;# 
   290  0293                     	;# 
   291  0298                     	;# 
   292  0298                     	;# 
   293  0299                     	;# 
   294  029A                     	;# 
   295  0394                     	;# 
   296  0395                     	;# 
   297  0396                     	;# 
   298  0FE4                     	;# 
   299  0FE5                     	;# 
   300  0FE6                     	;# 
   301  0FE7                     	;# 
   302  0FE8                     	;# 
   303  0FE9                     	;# 
   304  0FEA                     	;# 
   305  0FEB                     	;# 
   306  0FED                     	;# 
   307  0FEE                     	;# 
   308  0FEF                     	;# 
   309  0000                     	;# 
   310  0001                     	;# 
   311  0002                     	;# 
   312  0003                     	;# 
   313  0004                     	;# 
   314  0005                     	;# 
   315  0006                     	;# 
   316  0007                     	;# 
   317  0008                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000D                     	;# 
   323  000E                     	;# 
   324  0010                     	;# 
   325  0011                     	;# 
   326  0012                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0016                     	;# 
   330  0017                     	;# 
   331  0018                     	;# 
   332  0019                     	;# 
   333  001A                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  008C                     	;# 
   337  008D                     	;# 
   338  008E                     	;# 
   339  0090                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0095                     	;# 
   343  0096                     	;# 
   344  0097                     	;# 
   345  0099                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009B                     	;# 
   349  009C                     	;# 
   350  009D                     	;# 
   351  009E                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  0116                     	;# 
   356  0117                     	;# 
   357  011D                     	;# 
   358  018C                     	;# 
   359  018D                     	;# 
   360  018E                     	;# 
   361  0191                     	;# 
   362  0191                     	;# 
   363  0192                     	;# 
   364  0193                     	;# 
   365  0193                     	;# 
   366  0194                     	;# 
   367  0195                     	;# 
   368  0196                     	;# 
   369  0197                     	;# 
   370  0199                     	;# 
   371  019A                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019C                     	;# 
   378  019D                     	;# 
   379  019E                     	;# 
   380  019F                     	;# 
   381  020D                     	;# 
   382  0210                     	;# 
   383  0211                     	;# 
   384  0211                     	;# 
   385  0212                     	;# 
   386  0212                     	;# 
   387  0213                     	;# 
   388  0213                     	;# 
   389  0214                     	;# 
   390  0214                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0215                     	;# 
   394  0216                     	;# 
   395  0216                     	;# 
   396  0217                     	;# 
   397  0217                     	;# 
   398  0291                     	;# 
   399  0291                     	;# 
   400  0292                     	;# 
   401  0293                     	;# 
   402  0298                     	;# 
   403  0298                     	;# 
   404  0299                     	;# 
   405  029A                     	;# 
   406  0394                     	;# 
   407  0395                     	;# 
   408  0396                     	;# 
   409  0FE4                     	;# 
   410  0FE5                     	;# 
   411  0FE6                     	;# 
   412  0FE7                     	;# 
   413  0FE8                     	;# 
   414  0FE9                     	;# 
   415  0FEA                     	;# 
   416  0FEB                     	;# 
   417  0FED                     	;# 
   418  0FEE                     	;# 
   419  0FEF                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0015                     	;# 
   439  0016                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001C                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0090                     	;# 
   451  0091                     	;# 
   452  0092                     	;# 
   453  0095                     	;# 
   454  0096                     	;# 
   455  0097                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009C                     	;# 
   461  009D                     	;# 
   462  009E                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  010E                     	;# 
   466  0116                     	;# 
   467  0117                     	;# 
   468  011D                     	;# 
   469  018C                     	;# 
   470  018D                     	;# 
   471  018E                     	;# 
   472  0191                     	;# 
   473  0191                     	;# 
   474  0192                     	;# 
   475  0193                     	;# 
   476  0193                     	;# 
   477  0194                     	;# 
   478  0195                     	;# 
   479  0196                     	;# 
   480  0197                     	;# 
   481  0199                     	;# 
   482  019A                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019B                     	;# 
   487  019C                     	;# 
   488  019C                     	;# 
   489  019D                     	;# 
   490  019E                     	;# 
   491  019F                     	;# 
   492  020D                     	;# 
   493  0210                     	;# 
   494  0211                     	;# 
   495  0211                     	;# 
   496  0212                     	;# 
   497  0212                     	;# 
   498  0213                     	;# 
   499  0213                     	;# 
   500  0214                     	;# 
   501  0214                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0215                     	;# 
   505  0216                     	;# 
   506  0216                     	;# 
   507  0217                     	;# 
   508  0217                     	;# 
   509  0291                     	;# 
   510  0291                     	;# 
   511  0292                     	;# 
   512  0293                     	;# 
   513  0298                     	;# 
   514  0298                     	;# 
   515  0299                     	;# 
   516  029A                     	;# 
   517  0394                     	;# 
   518  0395                     	;# 
   519  0396                     	;# 
   520  0FE4                     	;# 
   521  0FE5                     	;# 
   522  0FE6                     	;# 
   523  0FE7                     	;# 
   524  0FE8                     	;# 
   525  0FE9                     	;# 
   526  0FEA                     	;# 
   527  0FEB                     	;# 
   528  0FED                     	;# 
   529  0FEE                     	;# 
   530  0FEF                     	;# 
   531  0000                     	;# 
   532  0001                     	;# 
   533  0002                     	;# 
   534  0003                     	;# 
   535  0004                     	;# 
   536  0005                     	;# 
   537  0006                     	;# 
   538  0007                     	;# 
   539  0008                     	;# 
   540  0009                     	;# 
   541  000A                     	;# 
   542  000B                     	;# 
   543  000C                     	;# 
   544  000D                     	;# 
   545  000E                     	;# 
   546  0010                     	;# 
   547  0011                     	;# 
   548  0012                     	;# 
   549  0015                     	;# 
   550  0016                     	;# 
   551  0016                     	;# 
   552  0017                     	;# 
   553  0018                     	;# 
   554  0019                     	;# 
   555  001A                     	;# 
   556  001B                     	;# 
   557  001C                     	;# 
   558  008C                     	;# 
   559  008D                     	;# 
   560  008E                     	;# 
   561  0090                     	;# 
   562  0091                     	;# 
   563  0092                     	;# 
   564  0095                     	;# 
   565  0096                     	;# 
   566  0097                     	;# 
   567  0099                     	;# 
   568  009A                     	;# 
   569  009B                     	;# 
   570  009B                     	;# 
   571  009C                     	;# 
   572  009D                     	;# 
   573  009E                     	;# 
   574  010C                     	;# 
   575  010D                     	;# 
   576  010E                     	;# 
   577  0116                     	;# 
   578  0117                     	;# 
   579  011D                     	;# 
   580  018C                     	;# 
   581  018D                     	;# 
   582  018E                     	;# 
   583  0191                     	;# 
   584  0191                     	;# 
   585  0192                     	;# 
   586  0193                     	;# 
   587  0193                     	;# 
   588  0194                     	;# 
   589  0195                     	;# 
   590  0196                     	;# 
   591  0197                     	;# 
   592  0199                     	;# 
   593  019A                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  019C                     	;# 
   600  019D                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  020D                     	;# 
   604  0210                     	;# 
   605  0211                     	;# 
   606  0211                     	;# 
   607  0212                     	;# 
   608  0212                     	;# 
   609  0213                     	;# 
   610  0213                     	;# 
   611  0214                     	;# 
   612  0214                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0215                     	;# 
   616  0216                     	;# 
   617  0216                     	;# 
   618  0217                     	;# 
   619  0217                     	;# 
   620  0291                     	;# 
   621  0291                     	;# 
   622  0292                     	;# 
   623  0293                     	;# 
   624  0298                     	;# 
   625  0298                     	;# 
   626  0299                     	;# 
   627  029A                     	;# 
   628  0394                     	;# 
   629  0395                     	;# 
   630  0396                     	;# 
   631  0FE4                     	;# 
   632  0FE5                     	;# 
   633  0FE6                     	;# 
   634  0FE7                     	;# 
   635  0FE8                     	;# 
   636  0FE9                     	;# 
   637  0FEA                     	;# 
   638  0FEB                     	;# 
   639  0FED                     	;# 
   640  0FEE                     	;# 
   641  0FEF                     	;# 
   642  0000                     	;# 
   643  0001                     	;# 
   644  0002                     	;# 
   645  0003                     	;# 
   646  0004                     	;# 
   647  0005                     	;# 
   648  0006                     	;# 
   649  0007                     	;# 
   650  0008                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  0010                     	;# 
   658  0011                     	;# 
   659  0012                     	;# 
   660  0015                     	;# 
   661  0016                     	;# 
   662  0016                     	;# 
   663  0017                     	;# 
   664  0018                     	;# 
   665  0019                     	;# 
   666  001A                     	;# 
   667  001B                     	;# 
   668  001C                     	;# 
   669  008C                     	;# 
   670  008D                     	;# 
   671  008E                     	;# 
   672  0090                     	;# 
   673  0091                     	;# 
   674  0092                     	;# 
   675  0095                     	;# 
   676  0096                     	;# 
   677  0097                     	;# 
   678  0099                     	;# 
   679  009A                     	;# 
   680  009B                     	;# 
   681  009B                     	;# 
   682  009C                     	;# 
   683  009D                     	;# 
   684  009E                     	;# 
   685  010C                     	;# 
   686  010D                     	;# 
   687  010E                     	;# 
   688  0116                     	;# 
   689  0117                     	;# 
   690  011D                     	;# 
   691  018C                     	;# 
   692  018D                     	;# 
   693  018E                     	;# 
   694  0191                     	;# 
   695  0191                     	;# 
   696  0192                     	;# 
   697  0193                     	;# 
   698  0193                     	;# 
   699  0194                     	;# 
   700  0195                     	;# 
   701  0196                     	;# 
   702  0197                     	;# 
   703  0199                     	;# 
   704  019A                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019D                     	;# 
   712  019E                     	;# 
   713  019F                     	;# 
   714  020D                     	;# 
   715  0210                     	;# 
   716  0211                     	;# 
   717  0211                     	;# 
   718  0212                     	;# 
   719  0212                     	;# 
   720  0213                     	;# 
   721  0213                     	;# 
   722  0214                     	;# 
   723  0214                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0215                     	;# 
   727  0216                     	;# 
   728  0216                     	;# 
   729  0217                     	;# 
   730  0217                     	;# 
   731  0291                     	;# 
   732  0291                     	;# 
   733  0292                     	;# 
   734  0293                     	;# 
   735  0298                     	;# 
   736  0298                     	;# 
   737  0299                     	;# 
   738  029A                     	;# 
   739  0394                     	;# 
   740  0395                     	;# 
   741  0396                     	;# 
   742  0FE4                     	;# 
   743  0FE5                     	;# 
   744  0FE6                     	;# 
   745  0FE7                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEF                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  000E                     	;# 
   768  0010                     	;# 
   769  0011                     	;# 
   770  0012                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  008D                     	;# 
   782  008E                     	;# 
   783  0090                     	;# 
   784  0091                     	;# 
   785  0092                     	;# 
   786  0095                     	;# 
   787  0096                     	;# 
   788  0097                     	;# 
   789  0099                     	;# 
   790  009A                     	;# 
   791  009B                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  010C                     	;# 
   797  010D                     	;# 
   798  010E                     	;# 
   799  0116                     	;# 
   800  0117                     	;# 
   801  011D                     	;# 
   802  018C                     	;# 
   803  018D                     	;# 
   804  018E                     	;# 
   805  0191                     	;# 
   806  0191                     	;# 
   807  0192                     	;# 
   808  0193                     	;# 
   809  0193                     	;# 
   810  0194                     	;# 
   811  0195                     	;# 
   812  0196                     	;# 
   813  0197                     	;# 
   814  0199                     	;# 
   815  019A                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019B                     	;# 
   820  019C                     	;# 
   821  019C                     	;# 
   822  019D                     	;# 
   823  019E                     	;# 
   824  019F                     	;# 
   825  020D                     	;# 
   826  0210                     	;# 
   827  0211                     	;# 
   828  0211                     	;# 
   829  0212                     	;# 
   830  0212                     	;# 
   831  0213                     	;# 
   832  0213                     	;# 
   833  0214                     	;# 
   834  0214                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0215                     	;# 
   838  0216                     	;# 
   839  0216                     	;# 
   840  0217                     	;# 
   841  0217                     	;# 
   842  0291                     	;# 
   843  0291                     	;# 
   844  0292                     	;# 
   845  0293                     	;# 
   846  0298                     	;# 
   847  0298                     	;# 
   848  0299                     	;# 
   849  029A                     	;# 
   850  0394                     	;# 
   851  0395                     	;# 
   852  0396                     	;# 
   853  0FE4                     	;# 
   854  0FE5                     	;# 
   855  0FE6                     	;# 
   856  0FE7                     	;# 
   857  0FE8                     	;# 
   858  0FE9                     	;# 
   859  0FEA                     	;# 
   860  0FEB                     	;# 
   861  0FED                     	;# 
   862  0FEE                     	;# 
   863  0FEF                     	;# 
   864  0000                     	;# 
   865  0001                     	;# 
   866  0002                     	;# 
   867  0003                     	;# 
   868  0004                     	;# 
   869  0005                     	;# 
   870  0006                     	;# 
   871  0007                     	;# 
   872  0008                     	;# 
   873  0009                     	;# 
   874  000A                     	;# 
   875  000B                     	;# 
   876  000C                     	;# 
   877  000D                     	;# 
   878  000E                     	;# 
   879  0010                     	;# 
   880  0011                     	;# 
   881  0012                     	;# 
   882  0015                     	;# 
   883  0016                     	;# 
   884  0016                     	;# 
   885  0017                     	;# 
   886  0018                     	;# 
   887  0019                     	;# 
   888  001A                     	;# 
   889  001B                     	;# 
   890  001C                     	;# 
   891  008C                     	;# 
   892  008D                     	;# 
   893  008E                     	;# 
   894  0090                     	;# 
   895  0091                     	;# 
   896  0092                     	;# 
   897  0095                     	;# 
   898  0096                     	;# 
   899  0097                     	;# 
   900  0099                     	;# 
   901  009A                     	;# 
   902  009B                     	;# 
   903  009B                     	;# 
   904  009C                     	;# 
   905  009D                     	;# 
   906  009E                     	;# 
   907  010C                     	;# 
   908  010D                     	;# 
   909  010E                     	;# 
   910  0116                     	;# 
   911  0117                     	;# 
   912  011D                     	;# 
   913  018C                     	;# 
   914  018D                     	;# 
   915  018E                     	;# 
   916  0191                     	;# 
   917  0191                     	;# 
   918  0192                     	;# 
   919  0193                     	;# 
   920  0193                     	;# 
   921  0194                     	;# 
   922  0195                     	;# 
   923  0196                     	;# 
   924  0197                     	;# 
   925  0199                     	;# 
   926  019A                     	;# 
   927  019B                     	;# 
   928  019B                     	;# 
   929  019B                     	;# 
   930  019B                     	;# 
   931  019C                     	;# 
   932  019C                     	;# 
   933  019D                     	;# 
   934  019E                     	;# 
   935  019F                     	;# 
   936  020D                     	;# 
   937  0210                     	;# 
   938  0211                     	;# 
   939  0211                     	;# 
   940  0212                     	;# 
   941  0212                     	;# 
   942  0213                     	;# 
   943  0213                     	;# 
   944  0214                     	;# 
   945  0214                     	;# 
   946  0215                     	;# 
   947  0215                     	;# 
   948  0215                     	;# 
   949  0216                     	;# 
   950  0216                     	;# 
   951  0217                     	;# 
   952  0217                     	;# 
   953  0291                     	;# 
   954  0291                     	;# 
   955  0292                     	;# 
   956  0293                     	;# 
   957  0298                     	;# 
   958  0298                     	;# 
   959  0299                     	;# 
   960  029A                     	;# 
   961  0394                     	;# 
   962  0395                     	;# 
   963  0396                     	;# 
   964  0FE4                     	;# 
   965  0FE5                     	;# 
   966  0FE6                     	;# 
   967  0FE7                     	;# 
   968  0FE8                     	;# 
   969  0FE9                     	;# 
   970  0FEA                     	;# 
   971  0FEB                     	;# 
   972  0FED                     	;# 
   973  0FEE                     	;# 
   974  0FEF                     	;# 
   975  0000                     	;# 
   976  0001                     	;# 
   977  0002                     	;# 
   978  0003                     	;# 
   979  0004                     	;# 
   980  0005                     	;# 
   981  0006                     	;# 
   982  0007                     	;# 
   983  0008                     	;# 
   984  0009                     	;# 
   985  000A                     	;# 
   986  000B                     	;# 
   987  000C                     	;# 
   988  000D                     	;# 
   989  000E                     	;# 
   990  0010                     	;# 
   991  0011                     	;# 
   992  0012                     	;# 
   993  0015                     	;# 
   994  0016                     	;# 
   995  0016                     	;# 
   996  0017                     	;# 
   997  0018                     	;# 
   998  0019                     	;# 
   999  001A                     	;# 
  1000  001B                     	;# 
  1001  001C                     	;# 
  1002  008C                     	;# 
  1003  008D                     	;# 
  1004  008E                     	;# 
  1005  0090                     	;# 
  1006  0091                     	;# 
  1007  0092                     	;# 
  1008  0095                     	;# 
  1009  0096                     	;# 
  1010  0097                     	;# 
  1011  0099                     	;# 
  1012  009A                     	;# 
  1013  009B                     	;# 
  1014  009B                     	;# 
  1015  009C                     	;# 
  1016  009D                     	;# 
  1017  009E                     	;# 
  1018  010C                     	;# 
  1019  010D                     	;# 
  1020  010E                     	;# 
  1021  0116                     	;# 
  1022  0117                     	;# 
  1023  011D                     	;# 
  1024  018C                     	;# 
  1025  018D                     	;# 
  1026  018E                     	;# 
  1027  0191                     	;# 
  1028  0191                     	;# 
  1029  0192                     	;# 
  1030  0193                     	;# 
  1031  0193                     	;# 
  1032  0194                     	;# 
  1033  0195                     	;# 
  1034  0196                     	;# 
  1035  0197                     	;# 
  1036  0199                     	;# 
  1037  019A                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019C                     	;# 
  1044  019D                     	;# 
  1045  019E                     	;# 
  1046  019F                     	;# 
  1047  020D                     	;# 
  1048  0210                     	;# 
  1049  0211                     	;# 
  1050  0211                     	;# 
  1051  0212                     	;# 
  1052  0212                     	;# 
  1053  0213                     	;# 
  1054  0213                     	;# 
  1055  0214                     	;# 
  1056  0214                     	;# 
  1057  0215                     	;# 
  1058  0215                     	;# 
  1059  0215                     	;# 
  1060  0216                     	;# 
  1061  0216                     	;# 
  1062  0217                     	;# 
  1063  0217                     	;# 
  1064  0291                     	;# 
  1065  0291                     	;# 
  1066  0292                     	;# 
  1067  0293                     	;# 
  1068  0298                     	;# 
  1069  0298                     	;# 
  1070  0299                     	;# 
  1071  029A                     	;# 
  1072  0394                     	;# 
  1073  0395                     	;# 
  1074  0396                     	;# 
  1075  0FE4                     	;# 
  1076  0FE5                     	;# 
  1077  0FE6                     	;# 
  1078  0FE7                     	;# 
  1079  0FE8                     	;# 
  1080  0FE9                     	;# 
  1081  0FEA                     	;# 
  1082  0FEB                     	;# 
  1083  0FED                     	;# 
  1084  0FEE                     	;# 
  1085  0FEF                     	;# 
  1086  0000                     	;# 
  1087  0001                     	;# 
  1088  0002                     	;# 
  1089  0003                     	;# 
  1090  0004                     	;# 
  1091  0005                     	;# 
  1092  0006                     	;# 
  1093  0007                     	;# 
  1094  0008                     	;# 
  1095  0009                     	;# 
  1096  000A                     	;# 
  1097  000B                     	;# 
  1098  000C                     	;# 
  1099  000D                     	;# 
  1100  000E                     	;# 
  1101  0010                     	;# 
  1102  0011                     	;# 
  1103  0012                     	;# 
  1104  0015                     	;# 
  1105  0016                     	;# 
  1106  0016                     	;# 
  1107  0017                     	;# 
  1108  0018                     	;# 
  1109  0019                     	;# 
  1110  001A                     	;# 
  1111  001B                     	;# 
  1112  001C                     	;# 
  1113  008C                     	;# 
  1114  008D                     	;# 
  1115  008E                     	;# 
  1116  0090                     	;# 
  1117  0091                     	;# 
  1118  0092                     	;# 
  1119  0095                     	;# 
  1120  0096                     	;# 
  1121  0097                     	;# 
  1122  0099                     	;# 
  1123  009A                     	;# 
  1124  009B                     	;# 
  1125  009B                     	;# 
  1126  009C                     	;# 
  1127  009D                     	;# 
  1128  009E                     	;# 
  1129  010C                     	;# 
  1130  010D                     	;# 
  1131  010E                     	;# 
  1132  0116                     	;# 
  1133  0117                     	;# 
  1134  011D                     	;# 
  1135  018C                     	;# 
  1136  018D                     	;# 
  1137  018E                     	;# 
  1138  0191                     	;# 
  1139  0191                     	;# 
  1140  0192                     	;# 
  1141  0193                     	;# 
  1142  0193                     	;# 
  1143  0194                     	;# 
  1144  0195                     	;# 
  1145  0196                     	;# 
  1146  0197                     	;# 
  1147  0199                     	;# 
  1148  019A                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019B                     	;# 
  1153  019C                     	;# 
  1154  019C                     	;# 
  1155  019D                     	;# 
  1156  019E                     	;# 
  1157  019F                     	;# 
  1158  020D                     	;# 
  1159  0210                     	;# 
  1160  0211                     	;# 
  1161  0211                     	;# 
  1162  0212                     	;# 
  1163  0212                     	;# 
  1164  0213                     	;# 
  1165  0213                     	;# 
  1166  0214                     	;# 
  1167  0214                     	;# 
  1168  0215                     	;# 
  1169  0215                     	;# 
  1170  0215                     	;# 
  1171  0216                     	;# 
  1172  0216                     	;# 
  1173  0217                     	;# 
  1174  0217                     	;# 
  1175  0291                     	;# 
  1176  0291                     	;# 
  1177  0292                     	;# 
  1178  0293                     	;# 
  1179  0298                     	;# 
  1180  0298                     	;# 
  1181  0299                     	;# 
  1182  029A                     	;# 
  1183  0394                     	;# 
  1184  0395                     	;# 
  1185  0396                     	;# 
  1186  0FE4                     	;# 
  1187  0FE5                     	;# 
  1188  0FE6                     	;# 
  1189  0FE7                     	;# 
  1190  0FE8                     	;# 
  1191  0FE9                     	;# 
  1192  0FEA                     	;# 
  1193  0FEB                     	;# 
  1194  0FED                     	;# 
  1195  0FEE                     	;# 
  1196  0FEF                     	;# 
  1197  0000                     	;# 
  1198  0001                     	;# 
  1199  0002                     	;# 
  1200  0003                     	;# 
  1201  0004                     	;# 
  1202  0005                     	;# 
  1203  0006                     	;# 
  1204  0007                     	;# 
  1205  0008                     	;# 
  1206  0009                     	;# 
  1207  000A                     	;# 
  1208  000B                     	;# 
  1209  000C                     	;# 
  1210  000D                     	;# 
  1211  000E                     	;# 
  1212  0010                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0015                     	;# 
  1216  0016                     	;# 
  1217  0016                     	;# 
  1218  0017                     	;# 
  1219  0018                     	;# 
  1220  0019                     	;# 
  1221  001A                     	;# 
  1222  001B                     	;# 
  1223  001C                     	;# 
  1224  008C                     	;# 
  1225  008D                     	;# 
  1226  008E                     	;# 
  1227  0090                     	;# 
  1228  0091                     	;# 
  1229  0092                     	;# 
  1230  0095                     	;# 
  1231  0096                     	;# 
  1232  0097                     	;# 
  1233  0099                     	;# 
  1234  009A                     	;# 
  1235  009B                     	;# 
  1236  009B                     	;# 
  1237  009C                     	;# 
  1238  009D                     	;# 
  1239  009E                     	;# 
  1240  010C                     	;# 
  1241  010D                     	;# 
  1242  010E                     	;# 
  1243  0116                     	;# 
  1244  0117                     	;# 
  1245  011D                     	;# 
  1246  018C                     	;# 
  1247  018D                     	;# 
  1248  018E                     	;# 
  1249  0191                     	;# 
  1250  0191                     	;# 
  1251  0192                     	;# 
  1252  0193                     	;# 
  1253  0193                     	;# 
  1254  0194                     	;# 
  1255  0195                     	;# 
  1256  0196                     	;# 
  1257  0197                     	;# 
  1258  0199                     	;# 
  1259  019A                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019B                     	;# 
  1264  019C                     	;# 
  1265  019C                     	;# 
  1266  019D                     	;# 
  1267  019E                     	;# 
  1268  019F                     	;# 
  1269  020D                     	;# 
  1270  0210                     	;# 
  1271  0211                     	;# 
  1272  0211                     	;# 
  1273  0212                     	;# 
  1274  0212                     	;# 
  1275  0213                     	;# 
  1276  0213                     	;# 
  1277  0214                     	;# 
  1278  0214                     	;# 
  1279  0215                     	;# 
  1280  0215                     	;# 
  1281  0215                     	;# 
  1282  0216                     	;# 
  1283  0216                     	;# 
  1284  0217                     	;# 
  1285  0217                     	;# 
  1286  0291                     	;# 
  1287  0291                     	;# 
  1288  0292                     	;# 
  1289  0293                     	;# 
  1290  0298                     	;# 
  1291  0298                     	;# 
  1292  0299                     	;# 
  1293  029A                     	;# 
  1294  0394                     	;# 
  1295  0395                     	;# 
  1296  0396                     	;# 
  1297  0FE4                     	;# 
  1298  0FE5                     	;# 
  1299  0FE6                     	;# 
  1300  0FE7                     	;# 
  1301  0FE8                     	;# 
  1302  0FE9                     	;# 
  1303  0FEA                     	;# 
  1304  0FEB                     	;# 
  1305  0FED                     	;# 
  1306  0FEE                     	;# 
  1307  0FEF                     	;# 
  1308  0000                     	;# 
  1309  0001                     	;# 
  1310  0002                     	;# 
  1311  0003                     	;# 
  1312  0004                     	;# 
  1313  0005                     	;# 
  1314  0006                     	;# 
  1315  0007                     	;# 
  1316  0008                     	;# 
  1317  0009                     	;# 
  1318  000A                     	;# 
  1319  000B                     	;# 
  1320  000C                     	;# 
  1321  000D                     	;# 
  1322  000E                     	;# 
  1323  0010                     	;# 
  1324  0011                     	;# 
  1325  0012                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0090                     	;# 
  1339  0091                     	;# 
  1340  0092                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  010C                     	;# 
  1352  010D                     	;# 
  1353  010E                     	;# 
  1354  0116                     	;# 
  1355  0117                     	;# 
  1356  011D                     	;# 
  1357  018C                     	;# 
  1358  018D                     	;# 
  1359  018E                     	;# 
  1360  0191                     	;# 
  1361  0191                     	;# 
  1362  0192                     	;# 
  1363  0193                     	;# 
  1364  0193                     	;# 
  1365  0194                     	;# 
  1366  0195                     	;# 
  1367  0196                     	;# 
  1368  0197                     	;# 
  1369  0199                     	;# 
  1370  019A                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019B                     	;# 
  1374  019B                     	;# 
  1375  019C                     	;# 
  1376  019C                     	;# 
  1377  019D                     	;# 
  1378  019E                     	;# 
  1379  019F                     	;# 
  1380  020D                     	;# 
  1381  0210                     	;# 
  1382  0211                     	;# 
  1383  0211                     	;# 
  1384  0212                     	;# 
  1385  0212                     	;# 
  1386  0213                     	;# 
  1387  0213                     	;# 
  1388  0214                     	;# 
  1389  0214                     	;# 
  1390  0215                     	;# 
  1391  0215                     	;# 
  1392  0215                     	;# 
  1393  0216                     	;# 
  1394  0216                     	;# 
  1395  0217                     	;# 
  1396  0217                     	;# 
  1397  0291                     	;# 
  1398  0291                     	;# 
  1399  0292                     	;# 
  1400  0293                     	;# 
  1401  0298                     	;# 
  1402  0298                     	;# 
  1403  0299                     	;# 
  1404  029A                     	;# 
  1405  0394                     	;# 
  1406  0395                     	;# 
  1407  0396                     	;# 
  1408  0FE4                     	;# 
  1409  0FE5                     	;# 
  1410  0FE6                     	;# 
  1411  0FE7                     	;# 
  1412  0FE8                     	;# 
  1413  0FE9                     	;# 
  1414  0FEA                     	;# 
  1415  0FEB                     	;# 
  1416  0FED                     	;# 
  1417  0FEE                     	;# 
  1418  0FEF                     	;# 
  1419  0000                     	;# 
  1420  0001                     	;# 
  1421  0002                     	;# 
  1422  0003                     	;# 
  1423  0004                     	;# 
  1424  0005                     	;# 
  1425  0006                     	;# 
  1426  0007                     	;# 
  1427  0008                     	;# 
  1428  0009                     	;# 
  1429  000A                     	;# 
  1430  000B                     	;# 
  1431  000C                     	;# 
  1432  000D                     	;# 
  1433  000E                     	;# 
  1434  0010                     	;# 
  1435  0011                     	;# 
  1436  0012                     	;# 
  1437  0015                     	;# 
  1438  0016                     	;# 
  1439  0016                     	;# 
  1440  0017                     	;# 
  1441  0018                     	;# 
  1442  0019                     	;# 
  1443  001A                     	;# 
  1444  001B                     	;# 
  1445  001C                     	;# 
  1446  008C                     	;# 
  1447  008D                     	;# 
  1448  008E                     	;# 
  1449  0090                     	;# 
  1450  0091                     	;# 
  1451  0092                     	;# 
  1452  0095                     	;# 
  1453  0096                     	;# 
  1454  0097                     	;# 
  1455  0099                     	;# 
  1456  009A                     	;# 
  1457  009B                     	;# 
  1458  009B                     	;# 
  1459  009C                     	;# 
  1460  009D                     	;# 
  1461  009E                     	;# 
  1462  010C                     	;# 
  1463  010D                     	;# 
  1464  010E                     	;# 
  1465  0116                     	;# 
  1466  0117                     	;# 
  1467  011D                     	;# 
  1468  018C                     	;# 
  1469  018D                     	;# 
  1470  018E                     	;# 
  1471  0191                     	;# 
  1472  0191                     	;# 
  1473  0192                     	;# 
  1474  0193                     	;# 
  1475  0193                     	;# 
  1476  0194                     	;# 
  1477  0195                     	;# 
  1478  0196                     	;# 
  1479  0197                     	;# 
  1480  0199                     	;# 
  1481  019A                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019B                     	;# 
  1485  019B                     	;# 
  1486  019C                     	;# 
  1487  019C                     	;# 
  1488  019D                     	;# 
  1489  019E                     	;# 
  1490  019F                     	;# 
  1491  020D                     	;# 
  1492  0210                     	;# 
  1493  0211                     	;# 
  1494  0211                     	;# 
  1495  0212                     	;# 
  1496  0212                     	;# 
  1497  0213                     	;# 
  1498  0213                     	;# 
  1499  0214                     	;# 
  1500  0214                     	;# 
  1501  0215                     	;# 
  1502  0215                     	;# 
  1503  0215                     	;# 
  1504  0216                     	;# 
  1505  0216                     	;# 
  1506  0217                     	;# 
  1507  0217                     	;# 
  1508  0291                     	;# 
  1509  0291                     	;# 
  1510  0292                     	;# 
  1511  0293                     	;# 
  1512  0298                     	;# 
  1513  0298                     	;# 
  1514  0299                     	;# 
  1515  029A                     	;# 
  1516  0394                     	;# 
  1517  0395                     	;# 
  1518  0396                     	;# 
  1519  0FE4                     	;# 
  1520  0FE5                     	;# 
  1521  0FE6                     	;# 
  1522  0FE7                     	;# 
  1523  0FE8                     	;# 
  1524  0FE9                     	;# 
  1525  0FEA                     	;# 
  1526  0FEB                     	;# 
  1527  0FED                     	;# 
  1528  0FEE                     	;# 
  1529  0FEF                     	;# 
  1530  0000                     	;# 
  1531  0001                     	;# 
  1532  0002                     	;# 
  1533  0003                     	;# 
  1534  0004                     	;# 
  1535  0005                     	;# 
  1536  0006                     	;# 
  1537  0007                     	;# 
  1538  0008                     	;# 
  1539  0009                     	;# 
  1540  000A                     	;# 
  1541  000B                     	;# 
  1542  000C                     	;# 
  1543  000D                     	;# 
  1544  000E                     	;# 
  1545  0010                     	;# 
  1546  0011                     	;# 
  1547  0012                     	;# 
  1548  0015                     	;# 
  1549  0016                     	;# 
  1550  0016                     	;# 
  1551  0017                     	;# 
  1552  0018                     	;# 
  1553  0019                     	;# 
  1554  001A                     	;# 
  1555  001B                     	;# 
  1556  001C                     	;# 
  1557  008C                     	;# 
  1558  008D                     	;# 
  1559  008E                     	;# 
  1560  0090                     	;# 
  1561  0091                     	;# 
  1562  0092                     	;# 
  1563  0095                     	;# 
  1564  0096                     	;# 
  1565  0097                     	;# 
  1566  0099                     	;# 
  1567  009A                     	;# 
  1568  009B                     	;# 
  1569  009B                     	;# 
  1570  009C                     	;# 
  1571  009D                     	;# 
  1572  009E                     	;# 
  1573  010C                     	;# 
  1574  010D                     	;# 
  1575  010E                     	;# 
  1576  0116                     	;# 
  1577  0117                     	;# 
  1578  011D                     	;# 
  1579  018C                     	;# 
  1580  018D                     	;# 
  1581  018E                     	;# 
  1582  0191                     	;# 
  1583  0191                     	;# 
  1584  0192                     	;# 
  1585  0193                     	;# 
  1586  0193                     	;# 
  1587  0194                     	;# 
  1588  0195                     	;# 
  1589  0196                     	;# 
  1590  0197                     	;# 
  1591  0199                     	;# 
  1592  019A                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019B                     	;# 
  1596  019B                     	;# 
  1597  019C                     	;# 
  1598  019C                     	;# 
  1599  019D                     	;# 
  1600  019E                     	;# 
  1601  019F                     	;# 
  1602  020D                     	;# 
  1603  0210                     	;# 
  1604  0211                     	;# 
  1605  0211                     	;# 
  1606  0212                     	;# 
  1607  0212                     	;# 
  1608  0213                     	;# 
  1609  0213                     	;# 
  1610  0214                     	;# 
  1611  0214                     	;# 
  1612  0215                     	;# 
  1613  0215                     	;# 
  1614  0215                     	;# 
  1615  0216                     	;# 
  1616  0216                     	;# 
  1617  0217                     	;# 
  1618  0217                     	;# 
  1619  0291                     	;# 
  1620  0291                     	;# 
  1621  0292                     	;# 
  1622  0293                     	;# 
  1623  0298                     	;# 
  1624  0298                     	;# 
  1625  0299                     	;# 
  1626  029A                     	;# 
  1627  0394                     	;# 
  1628  0395                     	;# 
  1629  0396                     	;# 
  1630  0FE4                     	;# 
  1631  0FE5                     	;# 
  1632  0FE6                     	;# 
  1633  0FE7                     	;# 
  1634  0FE8                     	;# 
  1635  0FE9                     	;# 
  1636  0FEA                     	;# 
  1637  0FEB                     	;# 
  1638  0FED                     	;# 
  1639  0FEE                     	;# 
  1640  0FEF                     	;# 
  1641                           
  1642                           	psect	idataBANK1
  1643  1706                     __pidataBANK1:	
  1644                           
  1645                           ;initializer for _cc1PaTable
  1646  1706  3403               	retlw	3
  1647  1707  340F               	retlw	15
  1648  1708  341E               	retlw	30
  1649  1709  3427               	retlw	39
  1650  170A  3450               	retlw	80
  1651  170B  3481               	retlw	129
  1652  170C  34CB               	retlw	203
  1653  170D  34C2               	retlw	194
  1654                           
  1655                           	psect	idataBANK2
  1656  0AFD                     __pidataBANK2:	
  1657                           
  1658                           ;initializer for _cc1InitVal
  1659  0AFD  3447               	retlw	71
  1660  0AFE  3446               	retlw	70
  1661  0AFF  344E               	retlw	78
  1662  0B00  340B               	retlw	11
  1663  0B01  34D3               	retlw	211
  1664  0B02  3491               	retlw	145
  1665  0B03  3409               	retlw	9
  1666  0B04  3408               	retlw	8
  1667  0B05  3404               	retlw	4
  1668  0B06  3400               	retlw	0
  1669  0B07  3400               	retlw	0
  1670  0B08  3406               	retlw	6
  1671  0B09  3400               	retlw	0
  1672  0B0A  3421               	retlw	33
  1673  0B0B  3463               	retlw	99
  1674  0B0C  3491               	retlw	145
  1675  0B0D  34CA               	retlw	202
  1676  0B0E  3483               	retlw	131
  1677  0B0F  3402               	retlw	2
  1678  0B10  3402               	retlw	2
  1679  0B11  343B               	retlw	59
  1680  0B12  3434               	retlw	52
  1681  0B13  3407               	retlw	7
  1682  0B14  343F               	retlw	63
  1683  0B15  3408               	retlw	8
  1684  0B16  3416               	retlw	22
  1685  0B17  346C               	retlw	108
  1686  0B18  3403               	retlw	3
  1687  0B19  3440               	retlw	64
  1688  0B1A  3491               	retlw	145
  1689  0B1B  3487               	retlw	135
  1690  0B1C  346B               	retlw	107
  1691  0B1D  34FB               	retlw	251
  1692  0B1E  3456               	retlw	86
  1693  0B1F  3416               	retlw	22
  1694  0B20  34E9               	retlw	233
  1695  0B21  342A               	retlw	42
  1696  0B22  3400               	retlw	0
  1697  0B23  341F               	retlw	31
  1698  0B24  3441               	retlw	65
  1699  0B25  3400               	retlw	0
  1700  0B26  3459               	retlw	89
  1701  0B27  347F               	retlw	127
  1702  0B28  343F               	retlw	63
  1703  0B29  3481               	retlw	129
  1704  0B2A  3435               	retlw	53
  1705  0B2B  3409               	retlw	9
  1706                           
  1707                           	psect	strings
  1708  0800                     __pstrings:	
  1709  0800                     __stringtab:	
  1710  0800  3400               	retlw	0
  1711  0801                     __end_of__stringtab:	
  1712  0801                     exp@coeff:	
  1713  0801  3400               	retlw	0
  1714  0802  3480               	retlw	128
  1715  0803  343F               	retlw	63
  1716  0804  3472               	retlw	114
  1717  0805  3431               	retlw	49
  1718  0806  343F               	retlw	63
  1719  0807  34FE               	retlw	254
  1720  0808  3475               	retlw	117
  1721  0809  343E               	retlw	62
  1722  080A  3458               	retlw	88
  1723  080B  3463               	retlw	99
  1724  080C  343D               	retlw	61
  1725  080D  3495               	retlw	149
  1726  080E  341D               	retlw	29
  1727  080F  343C               	retlw	60
  1728  0810  34C5               	retlw	197
  1729  0811  34AE               	retlw	174
  1730  0812  343A               	retlw	58
  1731  0813  3479               	retlw	121
  1732  0814  3421               	retlw	33
  1733  0815  3439               	retlw	57
  1734  0816  3494               	retlw	148
  1735  0817  3480               	retlw	128
  1736  0818  3437               	retlw	55
  1737  0819  3493               	retlw	147
  1738  081A  34A7               	retlw	167
  1739  081B  3435               	retlw	53
  1740  081C  3456               	retlw	86
  1741  081D  3415               	retlw	21
  1742  081E  3434               	retlw	52
  1743  081F                     __end_ofexp@coeff:	
  1744  081F                     log@coeff:	
  1745  081F  3400               	retlw	0
  1746  0820  3400               	retlw	0
  1747  0821  3400               	retlw	0
  1748  0822  3400               	retlw	0
  1749  0823  3480               	retlw	128
  1750  0824  343F               	retlw	63
  1751  0825  34F0               	retlw	240
  1752  0826  34FF               	retlw	255
  1753  0827  34BE               	retlw	190
  1754  0828  34E2               	retlw	226
  1755  0829  34A9               	retlw	169
  1756  082A  343E               	retlw	62
  1757  082B  3483               	retlw	131
  1758  082C  3476               	retlw	118
  1759  082D  34BE               	retlw	190
  1760  082E  34AE               	retlw	174
  1761  082F  342B               	retlw	43
  1762  0830  343E               	retlw	62
  1763  0831  343C               	retlw	60
  1764  0832  34C3               	retlw	195
  1765  0833  34BD               	retlw	189
  1766  0834  34D2               	retlw	210
  1767  0835  3413               	retlw	19
  1768  0836  343D               	retlw	61
  1769  0837  3478               	retlw	120
  1770  0838  34D3               	retlw	211
  1771  0839  34BB               	retlw	187
  1772  083A                     __end_oflog@coeff:	
  1773  083A                     _nvm_pgm_cfg:	
  1774  083A  345C               	retlw	92
  1775  083B  34C5               	retlw	197
  1776  083C  3400               	retlw	0
  1777  083D  3400               	retlw	0
  1778  083E  3400               	retlw	0
  1779  083F                     __end_of_nvm_pgm_cfg:	
  1780  000B                     _INTCON	set	11
  1781  000B                     _INTCONbits	set	11
  1782  0011                     _PIR1	set	17
  1783  0011                     _PIR1bits	set	17
  1784  0012                     _PIR2	set	18
  1785  000D                     _PORTB	set	13
  1786  000D                     _PORTBbits	set	13
  1787  000E                     _PORTC	set	14
  1788  0018                     _T1CON	set	24
  1789  0015                     _TMR0	set	21
  1790  0017                     _TMR1H	set	23
  1791  0016                     _TMR1L	set	22
  1792  009D                     _ADCON0	set	157
  1793  009D                     _ADCON0bits	set	157
  1794  009E                     _ADCON1	set	158
  1795  009C                     _ADRESH	set	156
  1796  0095                     _OPTION_REG	set	149
  1797  0099                     _OSCCON	set	153
  1798  0091                     _PIE1	set	145
  1799  0092                     _PIE2	set	146
  1800  008C                     _TRISA	set	140
  1801  008D                     _TRISB	set	141
  1802  008E                     _TRISC	set	142
  1803  0097                     _WDTCON	set	151
  1804  0117                     _FVRCON	set	279
  1805  010C                     _LATAbits	set	268
  1806  010D                     _LATBbits	set	269
  1807  010E                     _LATCbits	set	270
  1808  0191                     _PMADR	set	401
  1809  0193                     _PMDAT	set	403
  1810  018C                     _ANSELA	set	396
  1811  018D                     _ANSELB	set	397
  1812  018E                     _ANSELC	set	398
  1813  0195                     _PMCON1	set	405
  1814  0195                     _PMCON1bits	set	405
  1815  0196                     _PMCON2	set	406
  1816  0211                     _SSPBUF	set	529
  1817  0215                     _SSPCON1	set	533
  1818  0216                     _SSPCON2	set	534
  1819  0215                     _SSPCONbits	set	533
  1820  0214                     _SSPSTAT	set	532
  1821  020D                     _WPUB	set	525
  1822  0396                     _IOCBFbits	set	918
  1823  0395                     _IOCBN	set	917
  1824  0394                     _IOCBP	set	916
  1825                           
  1826                           ; #config settings
  1827  0000                     
  1828                           	psect	cinit
  1829  0016                     start_initialization:	
  1830  0016                     __initialization:	
  1831                           
  1832                           ; Clear objects allocated to COMMON
  1833  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1834                           
  1835                           ; Clear objects allocated to BANK0
  1836  0017  3069               	movlw	low __pbssBANK0
  1837  0018  0084               	movwf	4
  1838  0019  3000               	movlw	high __pbssBANK0
  1839  001A  0085               	movwf	5
  1840  001B  3007               	movlw	7
  1841  001C  3196  26F0  3180   	fcall	clear_ram0
  1842                           
  1843                           ; Clear objects allocated to BANK1
  1844  001F  30A0               	movlw	low __pbssBANK1
  1845  0020  0084               	movwf	4
  1846  0021  3000               	movlw	high __pbssBANK1
  1847  0022  0085               	movwf	5
  1848  0023  302F               	movlw	47
  1849  0024  3196  26F0  3180   	fcall	clear_ram0
  1850                           
  1851                           ; Initialize objects allocated to BANK1
  1852  0027  3006               	movlw	low __pidataBANK1
  1853  0028  0084               	movwf	4
  1854  0029  3097               	movlw	(high __pidataBANK1)| (0+128)
  1855  002A  0085               	movwf	5
  1856  002B  30E3               	movlw	low __pdataBANK1
  1857  002C  0086               	movwf	6
  1858  002D  3000               	movlw	high __pdataBANK1
  1859  002E  0087               	movwf	7
  1860  002F  3008               	movlw	8
  1861  0030  3196  26EA  3180   	fcall	init_ram
  1862                           
  1863                           ; Initialize objects allocated to BANK2
  1864  0033  30FD               	movlw	low __pidataBANK2
  1865  0034  0084               	movwf	4
  1866  0035  308A               	movlw	(high __pidataBANK2)| (0+128)
  1867  0036  0085               	movwf	5
  1868  0037  3020               	movlw	low __pdataBANK2
  1869  0038  0086               	movwf	6
  1870  0039  3001               	movlw	high __pdataBANK2
  1871  003A  0087               	movwf	7
  1872  003B  302F               	movlw	47
  1873  003C  3196  26EA         	fcall	init_ram
  1874  003E                     end_of_initialization:	
  1875                           ;End of C runtime variable initialization code
  1876                           
  1877  003E                     __end_of__initialization:	
  1878  003E  0020               	movlb	0
  1879  003F  318C  2C5E         	ljmp	_main	;jump to C main() function
  1880                           
  1881                           	psect	bssCOMMON
  1882  007C                     __pbssCOMMON:	
  1883  007C                     _u_in_sta_currTask:	
  1884  007C                     	ds	1
  1885                           
  1886                           	psect	bssBANK0
  1887  0069                     __pbssBANK0:	
  1888  0069                     _cntSndData:	
  1889  0069                     	ds	1
  1890  006A                     _pgm_flg:	
  1891  006A                     	ds	1
  1892  006B                     _tmrDbncSel:	
  1893  006B                     	ds	1
  1894  006C                     _tmrPgm:	
  1895  006C                     	ds	1
  1896  006D                     _tmrRcvPkt:	
  1897  006D                     	ds	1
  1898  006E                     _u_flg_din:	
  1899  006E                     	ds	1
  1900  006F                     _u_in_sta_tmpTask:	
  1901  006F                     	ds	1
  1902                           
  1903                           	psect	bssBANK1
  1904  00A0                     __pbssBANK1:	
  1905  00A0                     _Rinf:	
  1906  00A0                     	ds	3
  1907  00A3                     _battV:	
  1908  00A3                     	ds	3
  1909  00A6                     _tempC:	
  1910  00A6                     	ds	3
  1911  00A9                     _errno:	
  1912  00A9                     	ds	2
  1913  00AB                     _tmrLongSel:	
  1914  00AB                     	ds	2
  1915  00AD                     _adc_ch:	
  1916  00AD                     	ds	1
  1917  00AE                     _batt:	
  1918  00AE                     	ds	1
  1919  00AF                     _flg_slp:	
  1920  00AF                     	ds	1
  1921  00B0                     _rtx_flg:	
  1922  00B0                     	ds	1
  1923  00B1                     _s_CC1_FLG:	
  1924  00B1                     	ds	1
  1925  00B2                     _sys_pgm_sta:	
  1926  00B2                     	ds	1
  1927  00B3                     _temp:	
  1928  00B3                     	ds	1
  1929  00B4                     _u_SYS_STA:	
  1930  00B4                     	ds	1
  1931  00B5                     _u_in_ev_down:	
  1932  00B5                     	ds	1
  1933  00B6                     _u_in_ev_long:	
  1934  00B6                     	ds	1
  1935  00B7                     _u_in_ev_up:	
  1936  00B7                     	ds	1
  1937  00B8                     _pktRx:	
  1938  00B8                     	ds	9
  1939  00C1                     _pktTx:	
  1940  00C1                     	ds	9
  1941  00CA                     _pgm_cfg:	
  1942  00CA                     	ds	5
  1943                           
  1944                           	psect	dataBANK1
  1945  00E3                     __pdataBANK1:	
  1946  00E3                     _cc1PaTable:	
  1947  00E3                     	ds	8
  1948                           
  1949                           	psect	dataBANK2
  1950  0120                     __pdataBANK2:	
  1951  0120                     _cc1InitVal:	
  1952  0120                     	ds	47
  1953                           
  1954                           	psect	clrtext
  1955  16F0                     clear_ram0:	
  1956                           ;	Called with FSR0 containing the base address, and
  1957                           ;	WREG with the size to clear
  1958                           
  1959  16F0  0064               	clrwdt	;clear the watchdog before getting into this loop
  1960  16F1                     clrloop0:	
  1961  16F1  0180               	clrf	0	;clear RAM location pointed to by FSR
  1962  16F2  3101               	addfsr 0,1
  1963  16F3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1964  16F4  2EF1               	goto	clrloop0	;have we reached the end yet?
  1965  16F5  3400               	retlw	0	;all done for this memory range, return
  1966                           
  1967                           	psect	inittext
  1968  16EA                     init_ram:	
  1969  16EA  00FE               	movwf	126
  1970  16EB                     initloop:	
  1971  16EB  0012               	moviw fsr0++
  1972  16EC  001E               	movwi fsr1++
  1973  16ED  0BFE               	decfsz	126,f
  1974  16EE  2EEB               	goto	initloop
  1975  16EF  3400               	retlw	0
  1976                           
  1977                           	psect	cstackBANK1
  1978  00CF                     __pcstackBANK1:	
  1979  00CF                     ADCConv@Rntc:	
  1980                           
  1981                           ; 3 bytes @ 0x0
  1982  00CF                     	ds	3
  1983  00D2                     _ADCConv$1529:	
  1984                           
  1985                           ; 3 bytes @ 0x3
  1986  00D2                     	ds	3
  1987  00D5                     _ADCConv$1530:	
  1988                           
  1989                           ; 3 bytes @ 0x6
  1990  00D5                     	ds	3
  1991  00D8                     _ADCConv$1531:	
  1992                           
  1993                           ; 3 bytes @ 0x9
  1994  00D8                     	ds	3
  1995  00DB                     ADCConv@sumBatt:	
  1996                           
  1997                           ; 2 bytes @ 0xC
  1998  00DB                     	ds	2
  1999  00DD                     ADCConv@sumTemp:	
  2000                           
  2001                           ; 2 bytes @ 0xE
  2002  00DD                     	ds	2
  2003  00DF                     ADCConv@tempV:	
  2004                           
  2005                           ; 3 bytes @ 0x10
  2006  00DF                     	ds	3
  2007  00E2                     ADCConv@cntSum:	
  2008                           
  2009                           ; 1 bytes @ 0x13
  2010  00E2                     	ds	1
  2011                           
  2012                           	psect	cstackCOMMON
  2013  0070                     __pcstackCOMMON:	
  2014  0070                     ?_CC1Strobe:	
  2015  0070                     ?_CC1LoadREG:	
  2016                           ; 0 bytes @ 0x0
  2017                           
  2018  0070                     ?_PGMReadNvm:	
  2019                           ; 0 bytes @ 0x0
  2020                           
  2021  0070                     ?_PGMCheckNvm:	
  2022                           ; 0 bytes @ 0x0
  2023                           
  2024  0070                     ?_PGMNvmReset:	
  2025                           ; 0 bytes @ 0x0
  2026                           
  2027  0070                     ?_RTXStartSendData:	
  2028                           ; 0 bytes @ 0x0
  2029                           
  2030  0070                     ?_RTXSendData:	
  2031                           ; 0 bytes @ 0x0
  2032                           
  2033  0070                     ?_RTXReadPkt:	
  2034                           ; 0 bytes @ 0x0
  2035                           
  2036  0070                     ?_RTXSendRPgm:	
  2037                           ; 0 bytes @ 0x0
  2038                           
  2039  0070                     ?_INInit:	
  2040                           ; 0 bytes @ 0x0
  2041                           
  2042  0070                     ?_OUTInit:	
  2043                           ; 0 bytes @ 0x0
  2044                           
  2045  0070                     ?_SPIInit:	
  2046                           ; 0 bytes @ 0x0
  2047                           
  2048  0070                     ?_ADCInit:	
  2049                           ; 0 bytes @ 0x0
  2050                           
  2051  0070                     ?_ADCConv:	
  2052                           ; 0 bytes @ 0x0
  2053                           
  2054  0070                     ?_CC1Init:	
  2055                           ; 0 bytes @ 0x0
  2056                           
  2057  0070                     ?_CC1Sleep:	
  2058                           ; 0 bytes @ 0x0
  2059                           
  2060  0070                     ?_LEDInit:	
  2061                           ; 0 bytes @ 0x0
  2062                           
  2063  0070                     ?_LEDNormalFlash:	
  2064                           ; 0 bytes @ 0x0
  2065                           
  2066  0070                     ?_LEDFastFlash:	
  2067                           ; 0 bytes @ 0x0
  2068                           
  2069  0070                     ?_NVMInit:	
  2070                           ; 0 bytes @ 0x0
  2071                           
  2072  0070                     ?_DINInit:	
  2073                           ; 0 bytes @ 0x0
  2074                           
  2075  0070                     ?_DINTick:	
  2076                           ; 0 bytes @ 0x0
  2077                           
  2078  0070                     ?_DINTask:	
  2079                           ; 0 bytes @ 0x0
  2080                           
  2081  0070                     ?_SLPSleep:	
  2082                           ; 0 bytes @ 0x0
  2083                           
  2084  0070                     ?_PGMInit:	
  2085                           ; 0 bytes @ 0x0
  2086                           
  2087  0070                     ?_PGMTick:	
  2088                           ; 0 bytes @ 0x0
  2089                           
  2090  0070                     ?_PGMWriteNvm:	
  2091                           ; 0 bytes @ 0x0
  2092                           
  2093  0070                     ?_PGMPgmOff:	
  2094                           ; 0 bytes @ 0x0
  2095                           
  2096  0070                     ?_PGMSelDown:	
  2097                           ; 0 bytes @ 0x0
  2098                           
  2099  0070                     ?_PGMSelLong:	
  2100                           ; 0 bytes @ 0x0
  2101                           
  2102  0070                     ?_RTXInit:	
  2103                           ; 0 bytes @ 0x0
  2104                           
  2105  0070                     ?_RTXTick:	
  2106                           ; 0 bytes @ 0x0
  2107                           
  2108  0070                     ?_RTXTask:	
  2109                           ; 0 bytes @ 0x0
  2110                           
  2111  0070                     ?_RTXAwake:	
  2112                           ; 0 bytes @ 0x0
  2113                           
  2114  0070                     ?_SYSInit:	
  2115                           ; 0 bytes @ 0x0
  2116                           
  2117  0070                     ?_SYSInt:	
  2118                           ; 0 bytes @ 0x0
  2119                           
  2120  0070                     ??_SYSInt:	
  2121                           ; 0 bytes @ 0x0
  2122                           
  2123  0070                     ?_SYSTask:	
  2124                           ; 0 bytes @ 0x0
  2125                           
  2126  0070                     ?_INTIsr:	
  2127                           ; 0 bytes @ 0x0
  2128                           
  2129  0070                     ??_INTIsr:	
  2130                           ; 0 bytes @ 0x0
  2131                           
  2132  0070                     ?_main:	
  2133                           ; 0 bytes @ 0x0
  2134                           
  2135                           
  2136                           ; 0 bytes @ 0x0
  2137  0070                     	ds	1
  2138  0071                     ??_INInit:	
  2139  0071                     ??_OUTInit:	
  2140                           ; 0 bytes @ 0x1
  2141                           
  2142  0071                     ??_SPIInit:	
  2143                           ; 0 bytes @ 0x1
  2144                           
  2145  0071                     ?_SPIRead:	
  2146                           ; 0 bytes @ 0x1
  2147                           
  2148  0071                     ?_SPIWrite:	
  2149                           ; 0 bytes @ 0x1
  2150                           
  2151  0071                     ??_ADCInit:	
  2152                           ; 0 bytes @ 0x1
  2153                           
  2154  0071                     ?_DLYDelay_ms:	
  2155                           ; 0 bytes @ 0x1
  2156                           
  2157  0071                     ??_LEDInit:	
  2158                           ; 0 bytes @ 0x1
  2159                           
  2160  0071                     ??_NVMInit:	
  2161                           ; 0 bytes @ 0x1
  2162                           
  2163  0071                     ?_NVMRead:	
  2164                           ; 0 bytes @ 0x1
  2165                           
  2166  0071                     ?_NVMWrite:	
  2167                           ; 0 bytes @ 0x1
  2168                           
  2169  0071                     ??_DINInit:	
  2170                           ; 0 bytes @ 0x1
  2171                           
  2172  0071                     ??_DINTick:	
  2173                           ; 0 bytes @ 0x1
  2174                           
  2175  0071                     ??_DINTask:	
  2176                           ; 0 bytes @ 0x1
  2177                           
  2178  0071                     ??_PGMTick:	
  2179                           ; 0 bytes @ 0x1
  2180                           
  2181  0071                     ??_PGMPgmOff:	
  2182                           ; 0 bytes @ 0x1
  2183                           
  2184  0071                     ??_SYSInit:	
  2185                           ; 0 bytes @ 0x1
  2186                           
  2187  0071                     ?___ftge:	
  2188                           ; 0 bytes @ 0x1
  2189                           
  2190  0071                     ?___bmul:	
  2191                           ; 1 bit 
  2192                           
  2193  0071                     ?___lwdiv:	
  2194                           ; 1 bytes @ 0x1
  2195                           
  2196  0071                     ?___ftpack:	
  2197                           ; 2 bytes @ 0x1
  2198                           
  2199  0071                     ?_frexp:	
  2200                           ; 3 bytes @ 0x1
  2201                           
  2202  0071                     ?___ftneg:	
  2203                           ; 3 bytes @ 0x1
  2204                           
  2205  0071                     ?___fttol:	
  2206                           ; 3 bytes @ 0x1
  2207                           
  2208  0071                     SPIRead@len:	
  2209                           ; 4 bytes @ 0x1
  2210                           
  2211  0071                     LEDInit@sta:	
  2212                           ; 1 bytes @ 0x1
  2213                           
  2214  0071                     NVMInit@sta:	
  2215                           ; 1 bytes @ 0x1
  2216                           
  2217  0071                     DINInit@sta:	
  2218                           ; 1 bytes @ 0x1
  2219                           
  2220  0071                     ___bmul@multiplicand:	
  2221                           ; 1 bytes @ 0x1
  2222                           
  2223  0071                     SPIWrite@srcPtr:	
  2224                           ; 1 bytes @ 0x1
  2225                           
  2226  0071                     DLYDelay_ms@val:	
  2227                           ; 2 bytes @ 0x1
  2228                           
  2229  0071                     NVMRead@addr:	
  2230                           ; 2 bytes @ 0x1
  2231                           
  2232  0071                     NVMWrite@addr:	
  2233                           ; 2 bytes @ 0x1
  2234                           
  2235  0071                     ___lwdiv@divisor:	
  2236                           ; 2 bytes @ 0x1
  2237                           
  2238  0071                     ___ftpack@arg:	
  2239                           ; 2 bytes @ 0x1
  2240                           
  2241  0071                     frexp@value:	
  2242                           ; 3 bytes @ 0x1
  2243                           
  2244  0071                     ___ftge@ff1:	
  2245                           ; 3 bytes @ 0x1
  2246                           
  2247  0071                     ___ftneg@f1:	
  2248                           ; 3 bytes @ 0x1
  2249                           
  2250  0071                     ___fttol@f1:	
  2251                           ; 3 bytes @ 0x1
  2252                           
  2253                           
  2254                           ; 3 bytes @ 0x1
  2255  0071                     	ds	1
  2256  0072                     ??_SPIRead:	
  2257  0072                     ??___bmul:	
  2258                           ; 0 bytes @ 0x2
  2259                           
  2260  0072                     INInit@sta:	
  2261                           ; 0 bytes @ 0x2
  2262                           
  2263  0072                     OUTInit@sta:	
  2264                           ; 1 bytes @ 0x2
  2265                           
  2266  0072                     SPIInit@state:	
  2267                           ; 1 bytes @ 0x2
  2268                           
  2269  0072                     ADCInit@state:	
  2270                           ; 1 bytes @ 0x2
  2271                           
  2272  0072                     SYSInit@state:	
  2273                           ; 1 bytes @ 0x2
  2274                           
  2275                           
  2276                           ; 1 bytes @ 0x2
  2277  0072                     	ds	1
  2278  0073                     ??_DLYDelay_ms:	
  2279  0073                     SPIWrite@len:	
  2280                           ; 0 bytes @ 0x3
  2281                           
  2282  0073                     NVMRead@dest:	
  2283                           ; 1 bytes @ 0x3
  2284                           
  2285  0073                     NVMWrite@source:	
  2286                           ; 1 bytes @ 0x3
  2287                           
  2288  0073                     ___bmul@product:	
  2289                           ; 1 bytes @ 0x3
  2290                           
  2291  0073                     ___lwdiv@dividend:	
  2292                           ; 1 bytes @ 0x3
  2293                           
  2294                           
  2295                           ; 2 bytes @ 0x3
  2296  0073                     	ds	1
  2297  0074                     ??_SPIWrite:	
  2298  0074                     ??___ftneg:	
  2299                           ; 0 bytes @ 0x4
  2300                           
  2301  0074                     SPIRead@dstPtr:	
  2302                           ; 0 bytes @ 0x4
  2303                           
  2304  0074                     NVMRead@len:	
  2305                           ; 1 bytes @ 0x4
  2306                           
  2307  0074                     NVMWrite@len:	
  2308                           ; 1 bytes @ 0x4
  2309                           
  2310  0074                     ___bmul@multiplier:	
  2311                           ; 1 bytes @ 0x4
  2312                           
  2313  0074                     ___ftpack@exp:	
  2314                           ; 1 bytes @ 0x4
  2315                           
  2316  0074                     frexp@eptr:	
  2317                           ; 1 bytes @ 0x4
  2318                           
  2319  0074                     ___ftge@ff2:	
  2320                           ; 1 bytes @ 0x4
  2321                           
  2322                           
  2323                           ; 3 bytes @ 0x4
  2324  0074                     	ds	1
  2325  0075                     ??_frexp:	
  2326  0075                     ??_NVMRead:	
  2327                           ; 0 bytes @ 0x5
  2328                           
  2329  0075                     ??_NVMWrite:	
  2330                           ; 0 bytes @ 0x5
  2331                           
  2332  0075                     ??___fttol:	
  2333                           ; 0 bytes @ 0x5
  2334                           
  2335  0075                     ??___lwdiv:	
  2336                           ; 0 bytes @ 0x5
  2337                           
  2338  0075                     SPIRead@i:	
  2339                           ; 0 bytes @ 0x5
  2340                           
  2341  0075                     ___ftpack@sign:	
  2342                           ; 1 bytes @ 0x5
  2343                           
  2344  0075                     DLYDelay_ms@i:	
  2345                           ; 1 bytes @ 0x5
  2346                           
  2347                           
  2348                           ; 2 bytes @ 0x5
  2349  0075                     	ds	1
  2350  0076                     ??___ftpack:	
  2351  0076                     SPIWrite@i:	
  2352                           ; 0 bytes @ 0x6
  2353                           
  2354  0076                     ___lwdiv@quotient:	
  2355                           ; 1 bytes @ 0x6
  2356                           
  2357                           
  2358                           ; 2 bytes @ 0x6
  2359  0076                     	ds	1
  2360  0077                     ??_CC1Strobe:	
  2361  0077                     ?_CC1Read:	
  2362                           ; 0 bytes @ 0x7
  2363                           
  2364  0077                     ?_CC1Write:	
  2365                           ; 0 bytes @ 0x7
  2366                           
  2367  0077                     ??_LEDNormalFlash:	
  2368                           ; 0 bytes @ 0x7
  2369                           
  2370  0077                     ??_LEDFastFlash:	
  2371                           ; 0 bytes @ 0x7
  2372                           
  2373  0077                     ??___ftge:	
  2374                           ; 0 bytes @ 0x7
  2375                           
  2376  0077                     CC1Read@dst:	
  2377                           ; 0 bytes @ 0x7
  2378                           
  2379  0077                     NVMRead@i:	
  2380                           ; 1 bytes @ 0x7
  2381                           
  2382  0077                     CC1Write@src:	
  2383                           ; 1 bytes @ 0x7
  2384                           
  2385                           
  2386                           ; 2 bytes @ 0x7
  2387  0077                     	ds	1
  2388  0078                     ??_PGMReadNvm:	
  2389  0078                     ??_PGMWriteNvm:	
  2390                           ; 0 bytes @ 0x8
  2391                           
  2392  0078                     CC1Strobe@e_stb:	
  2393                           ; 0 bytes @ 0x8
  2394                           
  2395  0078                     CC1Read@len:	
  2396                           ; 1 bytes @ 0x8
  2397                           
  2398  0078                     LEDNormalFlash@num:	
  2399                           ; 1 bytes @ 0x8
  2400                           
  2401  0078                     LEDFastFlash@num:	
  2402                           ; 1 bytes @ 0x8
  2403                           
  2404  0078                     ___lwdiv@counter:	
  2405                           ; 1 bytes @ 0x8
  2406                           
  2407                           
  2408                           ; 1 bytes @ 0x8
  2409  0078                     	ds	1
  2410  0079                     ??_CC1Read:	
  2411  0079                     ??___altoft:	
  2412                           ; 0 bytes @ 0x9
  2413                           
  2414  0079                     ?___awtoft:	
  2415                           ; 0 bytes @ 0x9
  2416                           
  2417  0079                     CC1Strobe@cc1Stb:	
  2418                           ; 3 bytes @ 0x9
  2419                           
  2420  0079                     CC1Write@len:	
  2421                           ; 1 bytes @ 0x9
  2422                           
  2423  0079                     LEDNormalFlash@i:	
  2424                           ; 1 bytes @ 0x9
  2425                           
  2426  0079                     LEDFastFlash@i:	
  2427                           ; 1 bytes @ 0x9
  2428                           
  2429  0079                     ___awtoft@c:	
  2430                           ; 1 bytes @ 0x9
  2431                           
  2432                           
  2433                           ; 2 bytes @ 0x9
  2434  0079                     	ds	1
  2435  007A                     ??_CC1Write:	
  2436  007A                     ??_CC1Sleep:	
  2437                           ; 0 bytes @ 0xA
  2438                           
  2439  007A                     ??_SLPSleep:	
  2440                           ; 0 bytes @ 0xA
  2441                           
  2442  007A                     CC1Read@addr:	
  2443                           ; 0 bytes @ 0xA
  2444                           
  2445                           
  2446                           ; 1 bytes @ 0xA
  2447  007A                     	ds	1
  2448  007B                     ??_CC1LoadREG:	
  2449  007B                     CC1Read@cc1Addr:	
  2450                           ; 0 bytes @ 0xB
  2451                           
  2452                           
  2453                           ; 1 bytes @ 0xB
  2454  007B                     	ds	1
  2455  007C                     ??_PGMCheckNvm:	
  2456  007C                     ??_RTXStartSendData:	
  2457                           ; 0 bytes @ 0xC
  2458                           
  2459  007C                     ??_ADCGetTempCCal:	
  2460                           ; 0 bytes @ 0xC
  2461                           
  2462  007C                     ??_CC1Init:	
  2463                           ; 0 bytes @ 0xC
  2464                           
  2465  007C                     ??_PGMInit:	
  2466                           ; 0 bytes @ 0xC
  2467                           
  2468  007C                     ??_PGMSelLong:	
  2469                           ; 0 bytes @ 0xC
  2470                           
  2471  007C                     ??_RTXInit:	
  2472                           ; 0 bytes @ 0xC
  2473                           
  2474  007C                     ??_RTXTick:	
  2475                           ; 0 bytes @ 0xC
  2476                           
  2477  007C                     ??_RTXTask:	
  2478                           ; 0 bytes @ 0xC
  2479                           
  2480  007C                     ??_RTXAwake:	
  2481                           ; 0 bytes @ 0xC
  2482                           
  2483  007C                     ??_SYSTask:	
  2484                           ; 0 bytes @ 0xC
  2485                           
  2486  007C                     ??___ftsub:	
  2487                           ; 0 bytes @ 0xC
  2488                           
  2489                           
  2490                           	psect	cstackBANK0
  2491  0020                     __pcstackBANK0:	
  2492                           ; 0 bytes @ 0xC
  2493                           
  2494  0020                     ?_RTXRcvPkt:	
  2495  0020                     ??___awtoft:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0020                     CC1Write@addr:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0020                     SLPSleep@IOCBNTmp:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0020                     RTXRcvPkt@len:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0020                     ___fttol@sign1:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0020                     NVMWrite@bufTmpRow:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513                           
  2514                           ; 64 bytes @ 0x0
  2515  0020                     	ds	1
  2516  0021                     ??_RTXRcvPkt:	
  2517  0021                     CC1Write@cc1Addr:	
  2518                           ; 0 bytes @ 0x1
  2519                           
  2520  0021                     SLPSleep@INTCONTmp:	
  2521                           ; 1 bytes @ 0x1
  2522                           
  2523  0021                     ___fttol@lval:	
  2524                           ; 1 bytes @ 0x1
  2525                           
  2526                           
  2527                           ; 4 bytes @ 0x1
  2528  0021                     	ds	1
  2529  0022                     ?_RTXSndPkt:	
  2530  0022                     CC1Init@state:	
  2531                           ; 0 bytes @ 0x2
  2532                           
  2533  0022                     SLPSleep@WPUBTmp:	
  2534                           ; 1 bytes @ 0x2
  2535                           
  2536  0022                     RTXSndPkt@len:	
  2537                           ; 1 bytes @ 0x2
  2538                           
  2539  0022                     ___awtoft@sign:	
  2540                           ; 1 bytes @ 0x2
  2541                           
  2542                           
  2543                           ; 1 bytes @ 0x2
  2544  0022                     	ds	1
  2545  0023                     ??_RTXSndPkt:	
  2546  0023                     ?___ftmul:	
  2547                           ; 0 bytes @ 0x3
  2548                           
  2549  0023                     SLPSleep@WDTCONTmp:	
  2550                           ; 3 bytes @ 0x3
  2551                           
  2552  0023                     RTXRcvPkt@dst:	
  2553                           ; 1 bytes @ 0x3
  2554                           
  2555  0023                     ___ftmul@f1:	
  2556                           ; 1 bytes @ 0x3
  2557                           
  2558                           
  2559                           ; 3 bytes @ 0x3
  2560  0023                     	ds	1
  2561  0024                     SLPSleep@OPTION_REGTmp:	
  2562  0024                     RTXSndPkt@src:	
  2563                           ; 1 bytes @ 0x4
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x4
  2567  0024                     	ds	1
  2568  0025                     SLPSleep@FVRCONTmp:	
  2569  0025                     RTXSndPkt@numRxByte:	
  2570                           ; 1 bytes @ 0x5
  2571                           
  2572  0025                     ___fttol@exp1:	
  2573                           ; 1 bytes @ 0x5
  2574                           
  2575                           
  2576                           ; 1 bytes @ 0x5
  2577  0025                     	ds	1
  2578  0026                     ?___altoft:	
  2579  0026                     SLPSleep@ADCON0Tmp:	
  2580                           ; 3 bytes @ 0x6
  2581                           
  2582  0026                     RTXSndPkt@numTxByte:	
  2583                           ; 1 bytes @ 0x6
  2584                           
  2585  0026                     ___ftmul@f2:	
  2586                           ; 1 bytes @ 0x6
  2587                           
  2588  0026                     ___altoft@c:	
  2589                           ; 3 bytes @ 0x6
  2590                           
  2591                           
  2592                           ; 4 bytes @ 0x6
  2593  0026                     	ds	1
  2594  0027                     SLPSleep@TESTBATTtmp:	
  2595  0027                     RTXSndPkt@sta:	
  2596                           ; 1 bytes @ 0x7
  2597                           
  2598                           
  2599                           ; 1 bytes @ 0x7
  2600  0027                     	ds	1
  2601  0028                     ??_RTXSendRPgm:	
  2602                           
  2603                           ; 0 bytes @ 0x8
  2604  0028                     	ds	1
  2605  0029                     ??___ftmul:	
  2606                           
  2607                           ; 0 bytes @ 0x9
  2608  0029                     	ds	1
  2609  002A                     ___altoft@exp:	
  2610                           
  2611                           ; 1 bytes @ 0xA
  2612  002A                     	ds	1
  2613  002B                     ___altoft@sign:	
  2614                           
  2615                           ; 1 bytes @ 0xB
  2616  002B                     	ds	2
  2617  002D                     ___ftmul@exp:	
  2618                           
  2619                           ; 1 bytes @ 0xD
  2620  002D                     	ds	1
  2621  002E                     ___ftmul@f3_as_product:	
  2622                           
  2623                           ; 3 bytes @ 0xE
  2624  002E                     	ds	3
  2625  0031                     ___ftmul@cntr:	
  2626                           
  2627                           ; 1 bytes @ 0x11
  2628  0031                     	ds	1
  2629  0032                     ___ftmul@sign:	
  2630                           
  2631                           ; 1 bytes @ 0x12
  2632  0032                     	ds	1
  2633  0033                     ?___ftadd:	
  2634  0033                     ___ftadd@f1:	
  2635                           ; 3 bytes @ 0x13
  2636                           
  2637                           
  2638                           ; 3 bytes @ 0x13
  2639  0033                     	ds	3
  2640  0036                     ___ftadd@f2:	
  2641                           
  2642                           ; 3 bytes @ 0x16
  2643  0036                     	ds	3
  2644  0039                     ??___ftadd:	
  2645                           
  2646                           ; 0 bytes @ 0x19
  2647  0039                     	ds	4
  2648  003D                     ___ftadd@sign:	
  2649                           
  2650                           ; 1 bytes @ 0x1D
  2651  003D                     	ds	1
  2652  003E                     ___ftadd@exp2:	
  2653                           
  2654                           ; 1 bytes @ 0x1E
  2655  003E                     	ds	1
  2656  003F                     ___ftadd@exp1:	
  2657                           
  2658                           ; 1 bytes @ 0x1F
  2659  003F                     	ds	1
  2660  0040                     ?_floor:	
  2661  0040                     ?_eval_poly:	
  2662                           ; 3 bytes @ 0x20
  2663                           
  2664  0040                     ?_ADCGetTempCCal:	
  2665                           ; 3 bytes @ 0x20
  2666                           
  2667  0040                     ?___ftdiv:	
  2668                           ; 3 bytes @ 0x20
  2669                           
  2670  0040                     ?___ftsub:	
  2671                           ; 3 bytes @ 0x20
  2672                           
  2673  0040                     floor@x:	
  2674                           ; 3 bytes @ 0x20
  2675                           
  2676  0040                     ___ftdiv@f2:	
  2677                           ; 3 bytes @ 0x20
  2678                           
  2679  0040                     ___ftsub@f2:	
  2680                           ; 3 bytes @ 0x20
  2681                           
  2682  0040                     eval_poly@x:	
  2683                           ; 3 bytes @ 0x20
  2684                           
  2685                           
  2686                           ; 3 bytes @ 0x20
  2687  0040                     	ds	3
  2688  0043                     ??_RTXSendData:	
  2689  0043                     ??_floor:	
  2690                           ; 0 bytes @ 0x23
  2691                           
  2692  0043                     eval_poly@d:	
  2693                           ; 0 bytes @ 0x23
  2694                           
  2695  0043                     ___ftdiv@f1:	
  2696                           ; 1 bytes @ 0x23
  2697                           
  2698  0043                     ___ftsub@f1:	
  2699                           ; 3 bytes @ 0x23
  2700                           
  2701                           
  2702                           ; 3 bytes @ 0x23
  2703  0043                     	ds	1
  2704  0044                     eval_poly@n:	
  2705  0044                     RTXSendData@valTemp:	
  2706                           ; 2 bytes @ 0x24
  2707                           
  2708  0044                     floor@i:	
  2709                           ; 3 bytes @ 0x24
  2710                           
  2711                           
  2712                           ; 3 bytes @ 0x24
  2713  0044                     	ds	2
  2714  0046                     ??_eval_poly:	
  2715  0046                     ??___ftdiv:	
  2716                           ; 0 bytes @ 0x26
  2717                           
  2718                           
  2719                           ; 0 bytes @ 0x26
  2720  0046                     	ds	1
  2721  0047                     floor@expon:	
  2722  0047                     RTXSendData@valBatt:	
  2723                           ; 2 bytes @ 0x27
  2724                           
  2725  0047                     eval_poly@res:	
  2726                           ; 3 bytes @ 0x27
  2727                           
  2728                           
  2729                           ; 3 bytes @ 0x27
  2730  0047                     	ds	3
  2731  004A                     ?_ldexp:	
  2732  004A                     ___ftdiv@cntr:	
  2733                           ; 3 bytes @ 0x2A
  2734                           
  2735  004A                     ldexp@value:	
  2736                           ; 1 bytes @ 0x2A
  2737                           
  2738                           
  2739                           ; 3 bytes @ 0x2A
  2740  004A                     	ds	1
  2741  004B                     ___ftdiv@f3:	
  2742                           
  2743                           ; 3 bytes @ 0x2B
  2744  004B                     	ds	2
  2745  004D                     ldexp@newexp:	
  2746                           
  2747                           ; 2 bytes @ 0x2D
  2748  004D                     	ds	1
  2749  004E                     ___ftdiv@exp:	
  2750                           
  2751                           ; 1 bytes @ 0x2E
  2752  004E                     	ds	1
  2753  004F                     ??_ldexp:	
  2754  004F                     ___ftdiv@sign:	
  2755                           ; 0 bytes @ 0x2F
  2756                           
  2757                           
  2758                           ; 1 bytes @ 0x2F
  2759  004F                     	ds	1
  2760  0050                     ?_log:	
  2761  0050                     log@x:	
  2762                           ; 3 bytes @ 0x30
  2763                           
  2764                           
  2765                           ; 3 bytes @ 0x30
  2766  0050                     	ds	1
  2767  0051                     _ldexp$1133:	
  2768                           
  2769                           ; 3 bytes @ 0x31
  2770  0051                     	ds	2
  2771  0053                     ??_log:	
  2772                           
  2773                           ; 0 bytes @ 0x33
  2774  0053                     	ds	1
  2775  0054                     ?_exp:	
  2776  0054                     log@exponent:	
  2777                           ; 3 bytes @ 0x34
  2778                           
  2779  0054                     exp@x:	
  2780                           ; 2 bytes @ 0x34
  2781                           
  2782                           
  2783                           ; 3 bytes @ 0x34
  2784  0054                     	ds	3
  2785  0057                     ??_exp:	
  2786                           
  2787                           ; 0 bytes @ 0x37
  2788  0057                     	ds	1
  2789  0058                     _exp$1532:	
  2790                           
  2791                           ; 3 bytes @ 0x38
  2792  0058                     	ds	3
  2793  005B                     _exp$1092:	
  2794                           
  2795                           ; 3 bytes @ 0x3B
  2796  005B                     	ds	3
  2797  005E                     exp@exponent:	
  2798                           
  2799                           ; 2 bytes @ 0x3E
  2800  005E                     	ds	2
  2801  0060                     exp@sign:	
  2802  0060                     NVMWrite@rowAddr:	
  2803                           ; 1 bytes @ 0x40
  2804                           
  2805                           
  2806                           ; 2 bytes @ 0x40
  2807  0060                     	ds	1
  2808  0061                     ??_ADCConv:	
  2809                           
  2810                           ; 0 bytes @ 0x41
  2811  0061                     	ds	1
  2812  0062                     NVMWrite@i:	
  2813                           
  2814                           ; 1 bytes @ 0x42
  2815  0062                     	ds	1
  2816  0063                     NVMWrite@latchAddr:	
  2817  0063                     RTXInit@state:	
  2818                           ; 1 bytes @ 0x43
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x43
  2822  0063                     	ds	1
  2823  0064                     NVMWrite@j:	
  2824                           
  2825                           ; 1 bytes @ 0x44
  2826  0064                     	ds	1
  2827  0065                     ??_PGMNvmReset:	
  2828  0065                     ??_RTXReadPkt:	
  2829                           ; 0 bytes @ 0x45
  2830                           
  2831  0065                     ??_PGMSelDown:	
  2832                           ; 0 bytes @ 0x45
  2833                           
  2834                           
  2835                           ; 0 bytes @ 0x45
  2836  0065                     	ds	1
  2837  0066                     PGMInit@state:	
  2838  0066                     RTXReadPkt@numRxByte:	
  2839                           ; 1 bytes @ 0x46
  2840                           
  2841                           
  2842                           ; 1 bytes @ 0x46
  2843  0066                     	ds	1
  2844  0067                     ??_main:	
  2845                           
  2846                           ; 0 bytes @ 0x47
  2847  0067                     	ds	1
  2848  0068                     main@i:	
  2849                           
  2850                           ; 1 bytes @ 0x48
  2851  0068                     	ds	1
  2852                           
  2853                           	psect	maintext
  2854  0C5E                     __pmaintext:	
  2855 ;;
  2856 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2857 ;;
  2858 ;; *************** function _main *****************
  2859 ;; Defined at:
  2860 ;;		line 55 in file "Sensore.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;  i               1   72[BANK0 ] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 17F/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2878 ;;Total ram usage:        2 bytes
  2879 ;; Hardware stack levels required when called:   11
  2880 ;; This function calls:
  2881 ;;		_INInit
  2882 ;;		_OUTInit
  2883 ;;		_SPIInit
  2884 ;;		_ADCInit
  2885 ;;		_CC1Init
  2886 ;;		_LEDInit
  2887 ;;		_NVMInit
  2888 ;;		_DINInit
  2889 ;;		_DINTask
  2890 ;;		_PGMInit
  2891 ;;		_RTXInit
  2892 ;;		_RTXTask
  2893 ;;		_SYSInit
  2894 ;;		_SYSTask
  2895 ;; This function is called by:
  2896 ;;		Startup code after reset
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           
  2901                           ;psect for function _main
  2902  0C5E                     _main:	
  2903                           
  2904                           ;Sensore.c: 56: unsigned char i;
  2905                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _main: [allreg]
  2909  0C5E  0020               	movlb	0	; select bank0
  2910  0C5F  01E8               	clrf	main@i
  2911  0C60  3003               	movlw	3
  2912  0C61  0268               	subwf	main@i,w
  2913  0C62  1803               	btfsc	3,0
  2914  0C63  2CA5               	goto	l693
  2915  0C64                     l692:	
  2916  0C64  0064               	clrwdt	;# 
  2917                           
  2918                           ;Sensore.c: 63: SYSInit(i);
  2919  0C65  0020               	movlb	0	; select bank0
  2920  0C66  0868               	movf	main@i,w
  2921  0C67  318A  2286  318C   	fcall	_SYSInit
  2922                           
  2923                           ;Sensore.c: 64: INInit(i);
  2924  0C6A  0020               	movlb	0	; select bank0
  2925  0C6B  0868               	movf	main@i,w
  2926  0C6C  3197  27E9  318C   	fcall	_INInit
  2927                           
  2928                           ;Sensore.c: 65: OUTInit(i);
  2929  0C6F  0020               	movlb	0	; select bank0
  2930  0C70  0868               	movf	main@i,w
  2931  0C71  318A  2218  318C   	fcall	_OUTInit
  2932                           
  2933                           ;Sensore.c: 66: DINInit(i);
  2934  0C74  0020               	movlb	0	; select bank0
  2935  0C75  0868               	movf	main@i,w
  2936  0C76  3197  2767  318C   	fcall	_DINInit
  2937                           
  2938                           ;Sensore.c: 67: LEDInit(i);
  2939  0C79  0020               	movlb	0	; select bank0
  2940  0C7A  0868               	movf	main@i,w
  2941  0C7B  3197  2717  318C   	fcall	_LEDInit
  2942                           
  2943                           ;Sensore.c: 68: SPIInit(i);
  2944  0C7E  0020               	movlb	0	; select bank0
  2945  0C7F  0868               	movf	main@i,w
  2946  0C80  3189  2138  318C   	fcall	_SPIInit
  2947                           
  2948                           ;Sensore.c: 69: CC1Init(i);
  2949  0C83  0020               	movlb	0	; select bank0
  2950  0C84  0868               	movf	main@i,w
  2951  0C85  3188  20C7  318C   	fcall	_CC1Init
  2952                           
  2953                           ;Sensore.c: 70: NVMInit(i);
  2954  0C88  0020               	movlb	0	; select bank0
  2955  0C89  0868               	movf	main@i,w
  2956  0C8A  3197  2722  318C   	fcall	_NVMInit
  2957                           
  2958                           ;Sensore.c: 71: RTXInit(i);
  2959  0C8D  0020               	movlb	0	; select bank0
  2960  0C8E  0868               	movf	main@i,w
  2961  0C8F  318A  223C  318C   	fcall	_RTXInit
  2962                           
  2963                           ;Sensore.c: 72: PGMInit(i);
  2964  0C92  0020               	movlb	0	; select bank0
  2965  0C93  0868               	movf	main@i,w
  2966  0C94  3188  204B  318C   	fcall	_PGMInit
  2967                           
  2968                           ;Sensore.c: 73: ADCInit(i);
  2969  0C97  0020               	movlb	0	; select bank0
  2970  0C98  0868               	movf	main@i,w
  2971  0C99  318A  22D3  318C   	fcall	_ADCInit
  2972  0C9C  3001               	movlw	1
  2973  0C9D  0020               	movlb	0	; select bank0
  2974  0C9E  00E7               	movwf	??_main
  2975  0C9F  0867               	movf	??_main,w
  2976  0CA0  07E8               	addwf	main@i,f
  2977  0CA1  3003               	movlw	3
  2978  0CA2  0268               	subwf	main@i,w
  2979  0CA3  1C03               	skipc
  2980  0CA4  2C64               	goto	l692
  2981  0CA5                     l693:	
  2982                           
  2983                           ;Sensore.c: 74: }
  2984                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2985  0CA5  178B               	bsf	11,7	;volatile
  2986  0CA6                     l694:	
  2987                           ;Sensore.c: 80: while(1)
  2988                           
  2989  0CA6  0064               	clrwdt	;# 
  2990                           
  2991                           ;Sensore.c: 84: SYSTask();
  2992  0CA7  318B  232C  318C   	fcall	_SYSTask
  2993                           
  2994                           ;Sensore.c: 85: DINTask();
  2995  0CAA  3188  20FE  318C   	fcall	_DINTask
  2996                           
  2997                           ;Sensore.c: 86: RTXTask();
  2998  0CAD  3196  26E4  318C   	fcall	_RTXTask
  2999  0CB0  2CA6               	goto	l694
  3000  0CB1                     __end_of_main:	
  3001                           
  3002                           	psect	text1
  3003  0B2C                     __ptext1:	
  3004 ;; *************** function _SYSTask *****************
  3005 ;; Defined at:
  3006 ;;		line 45 in file "SYS.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;		None               void
  3013 ;; Registers used:
  3014 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3024 ;;Total ram usage:        0 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:   10
  3027 ;; This function calls:
  3028 ;;		_DINTick
  3029 ;;		_SLPSleep
  3030 ;;		_PGMTick
  3031 ;;		_PGMPgmOff
  3032 ;;		_PGMSelDown
  3033 ;;		_PGMSelLong
  3034 ;;		_RTXTick
  3035 ;;		_RTXAwake
  3036 ;; This function is called by:
  3037 ;;		_main
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           
  3042                           ;psect for function _SYSTask
  3043  0B2C                     _SYSTask:	
  3044                           
  3045                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  3046                           
  3047                           ;incstack = 0
  3048                           ; Regs used in _SYSTask: [allreg]
  3049  0B2C  0021               	movlb	1	; select bank1
  3050  0B2D  1C34               	btfss	_u_SYS_STA^(0+128),0
  3051  0B2E  2B39               	goto	l5202
  3052                           
  3053                           ;SYS.c: 48: {
  3054                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  3055  0B2F  1034               	bcf	_u_SYS_STA^(0+128),0
  3056                           
  3057                           ;SYS.c: 53: RTXTick();
  3058  0B30  3197  272D  318B   	fcall	_RTXTick
  3059                           
  3060                           ;SYS.c: 54: DINTick();
  3061  0B33  318A  22AC  318B   	fcall	_DINTick
  3062                           
  3063                           ;SYS.c: 55: PGMTick();
  3064  0B36  3197  2757  318B   	fcall	_PGMTick
  3065  0B39                     l5202:	
  3066                           
  3067                           ;SYS.c: 56: }
  3068                           ;SYS.c: 58: if(u_in_ev_down.sel)
  3069  0B39  0021               	movlb	1	; select bank1
  3070  0B3A  1C35               	btfss	_u_in_ev_down^(0+128),0
  3071  0B3B  2B40               	goto	l5208
  3072                           
  3073                           ;SYS.c: 59: {
  3074                           ;SYS.c: 61: u_in_ev_down.sel=0;
  3075  0B3C  1035               	bcf	_u_in_ev_down^(0+128),0
  3076                           
  3077                           ;SYS.c: 62: PGMSelDown();
  3078  0B3D  3197  27C2  318B   	fcall	_PGMSelDown
  3079  0B40                     l5208:	
  3080                           
  3081                           ;SYS.c: 63: }
  3082                           ;SYS.c: 64: if(u_in_ev_long.sel)
  3083  0B40  0021               	movlb	1	; select bank1
  3084  0B41  1C36               	btfss	_u_in_ev_long^(0+128),0
  3085  0B42  2B47               	goto	l5214
  3086                           
  3087                           ;SYS.c: 65: {
  3088                           ;SYS.c: 67: u_in_ev_long.sel=0;
  3089  0B43  1036               	bcf	_u_in_ev_long^(0+128),0
  3090                           
  3091                           ;SYS.c: 68: PGMSelLong();
  3092  0B44  3197  270E  318B   	fcall	_PGMSelLong
  3093  0B47                     l5214:	
  3094                           
  3095                           ;SYS.c: 69: }
  3096                           ;SYS.c: 72: if(flg_slp.goSleep)
  3097  0B47  0021               	movlb	1	; select bank1
  3098  0B48  1C2F               	btfss	_flg_slp^(0+128),0
  3099  0B49  2B51               	goto	l5220
  3100                           
  3101                           ;SYS.c: 73: {
  3102                           ;SYS.c: 75: flg_slp.goSleep=0;
  3103  0B4A  102F               	bcf	_flg_slp^(0+128),0
  3104                           
  3105                           ;SYS.c: 77: if(!(!PORTBbits.RB2))
  3106  0B4B  0020               	movlb	0	; select bank0
  3107  0B4C  1D0D               	btfss	13,2	;volatile
  3108  0B4D  2B51               	goto	l5220
  3109                           
  3110                           ;SYS.c: 78: SLPSleep();
  3111  0B4E  318E  261A  318B   	fcall	_SLPSleep
  3112  0B51                     l5220:	
  3113                           
  3114                           ;SYS.c: 79: }
  3115                           ;SYS.c: 82: if(rtx_flg.pgmDone)
  3116  0B51  0021               	movlb	1	; select bank1
  3117  0B52  1C30               	btfss	_rtx_flg^(0+128),0
  3118  0B53  2B58               	goto	l5226
  3119                           
  3120                           ;SYS.c: 83: {
  3121                           ;SYS.c: 85: rtx_flg.pgmDone=0;
  3122  0B54  1030               	bcf	_rtx_flg^(0+128),0
  3123                           
  3124                           ;SYS.c: 87: PGMPgmOff();
  3125  0B55  3196  26DA  318B   	fcall	_PGMPgmOff
  3126  0B58                     l5226:	
  3127                           
  3128                           ;SYS.c: 88: }
  3129                           ;SYS.c: 91: if(flg_slp.exitSleep)
  3130  0B58  0021               	movlb	1	; select bank1
  3131  0B59  1CAF               	btfss	_flg_slp^(0+128),1
  3132  0B5A  0008               	return
  3133                           
  3134                           ;SYS.c: 92: {
  3135                           ;SYS.c: 94: flg_slp.exitSleep=0;
  3136  0B5B  10AF               	bcf	_flg_slp^(0+128),1
  3137                           
  3138                           ;SYS.c: 96: RTXAwake();
  3139  0B5C  3188  20AD         	fcall	_RTXAwake
  3140  0B5E  0008               	return
  3141  0B5F                     __end_of_SYSTask:	
  3142                           
  3143                           	psect	text2
  3144  08AD                     __ptext2:	
  3145 ;; *************** function _RTXAwake *****************
  3146 ;; Defined at:
  3147 ;;		line 90 in file "RTX.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;		None
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;		None               void
  3154 ;; Registers used:
  3155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3165 ;;Total ram usage:        0 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    9
  3168 ;; This function calls:
  3169 ;;		_DLYDelay_ms
  3170 ;;		_CC1Init
  3171 ;;		_RTXInit
  3172 ;; This function is called by:
  3173 ;;		_SYSTask
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           
  3178                           ;psect for function _RTXAwake
  3179  08AD                     _RTXAwake:	
  3180                           
  3181                           ;RTX.c: 92: LATAbits.LATA5=0;
  3182                           
  3183                           ;incstack = 0
  3184                           ; Regs used in _RTXAwake: [allreg]
  3185  08AD  0022               	movlb	2	; select bank2
  3186  08AE  128C               	bcf	12,5	;volatile
  3187                           
  3188                           ;RTX.c: 93: DLYDelay_ms(1);
  3189  08AF  3001               	movlw	1
  3190  08B0  00F1               	movwf	?_DLYDelay_ms
  3191  08B1  3000               	movlw	0
  3192  08B2  00F2               	movwf	?_DLYDelay_ms+1
  3193  08B3  3188  207B  3188   	fcall	_DLYDelay_ms
  3194                           
  3195                           ;RTX.c: 94: LATAbits.LATA5=1;
  3196  08B6  0022               	movlb	2	; select bank2
  3197  08B7  168C               	bsf	12,5	;volatile
  3198                           
  3199                           ;RTX.c: 95: DLYDelay_ms(1);
  3200  08B8  3001               	movlw	1
  3201  08B9  00F1               	movwf	?_DLYDelay_ms
  3202  08BA  3000               	movlw	0
  3203  08BB  00F2               	movwf	?_DLYDelay_ms+1
  3204  08BC  3188  207B  3188   	fcall	_DLYDelay_ms
  3205                           
  3206                           ;RTX.c: 98: CC1Init(2);
  3207  08BF  3002               	movlw	2
  3208  08C0  3188  20C7  3188   	fcall	_CC1Init
  3209                           
  3210                           ;RTX.c: 101: RTXInit(2);
  3211  08C3  3002               	movlw	2
  3212  08C4  318A  223C         	fcall	_RTXInit
  3213  08C6  0008               	return
  3214  08C7                     __end_of_RTXAwake:	
  3215                           
  3216                           	psect	text3
  3217  0A3C                     __ptext3:	
  3218 ;; *************** function _RTXInit *****************
  3219 ;; Defined at:
  3220 ;;		line 49 in file "RTX.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;  state           1    wreg     unsigned char 
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;  state           1   67[BANK0 ] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;		None               void
  3227 ;; Registers used:
  3228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3237 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3238 ;;Total ram usage:        1 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    8
  3241 ;; This function calls:
  3242 ;;		_CC1Strobe
  3243 ;;		_RTXStartSendData
  3244 ;; This function is called by:
  3245 ;;		_RTXAwake
  3246 ;;		_main
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           
  3251                           ;psect for function _RTXInit
  3252  0A3C                     _RTXInit:	
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _RTXInit: [allreg]
  3256                           ;RTXInit@state stored from wreg
  3257  0A3C  0020               	movlb	0	; select bank0
  3258  0A3D  00E3               	movwf	RTXInit@state
  3259                           
  3260                           ;RTX.c: 50: switch(state)
  3261  0A3E  2A53               	goto	l5054
  3262  0A3F                     l5046:	
  3263                           ;RTX.c: 55: case 1:
  3264                           
  3265                           ;RTX.c: 54: break;
  3266                           
  3267                           ;RTX.c: 51: {
  3268                           ;RTX.c: 52: case 0:
  3269                           
  3270                           
  3271                           ;RTX.c: 57: tmrRcvPkt=0;
  3272  0A3F  01ED               	clrf	_tmrRcvPkt
  3273                           
  3274                           ;RTX.c: 58: cntSndData=0;
  3275  0A40  01E9               	clrf	_cntSndData
  3276                           
  3277                           ;RTX.c: 59: rtx_flg.val=0;
  3278  0A41  0021               	movlb	1	; select bank1
  3279  0A42  01B0               	clrf	_rtx_flg^(0+128)
  3280                           
  3281                           ;RTX.c: 60: break;
  3282  0A43  0008               	return
  3283  0A44                     l5048:	
  3284                           ;RTX.c: 61: case 2:
  3285                           
  3286                           
  3287                           ;RTX.c: 63: CC1Strobe(SIDLE);
  3288  0A44  3036               	movlw	54
  3289  0A45  3197  27D5  318A   	fcall	_CC1Strobe
  3290                           
  3291                           ;RTX.c: 64: CC1Strobe(SCAL);
  3292  0A48  3033               	movlw	51
  3293  0A49  3197  27D5  318A   	fcall	_CC1Strobe
  3294                           
  3295                           ;RTX.c: 65: CC1Strobe(SRX);
  3296  0A4C  3034               	movlw	52
  3297  0A4D  3197  27D5  318A   	fcall	_CC1Strobe
  3298                           
  3299                           ;RTX.c: 66: RTXStartSendData();
  3300  0A50  3197  2748         	fcall	_RTXStartSendData
  3301                           
  3302                           ;RTX.c: 68: }
  3303                           
  3304                           ;RTX.c: 67: break;
  3305  0A52  0008               	return
  3306  0A53                     l5054:	
  3307  0A53  0020               	movlb	0	; select bank0
  3308  0A54  0863               	movf	RTXInit@state,w
  3309                           
  3310                           ; Switch size 1, requested type "space"
  3311                           ; Number of cases is 3, Range of values is 0 to 2
  3312                           ; switch strategies available:
  3313                           ; Name         Instructions Cycles
  3314                           ; simple_byte           10     6 (average)
  3315                           ; direct_byte           12     6 (fixed)
  3316                           ; jumptable            260     6 (fixed)
  3317                           ;	Chosen strategy is simple_byte
  3318  0A55  3A00               	xorlw	0	; case 0
  3319  0A56  1903               	skipnz
  3320  0A57  2A5F               	goto	l484
  3321  0A58  3A01               	xorlw	1	; case 1
  3322  0A59  1903               	skipnz
  3323  0A5A  2A3F               	goto	l5046
  3324  0A5B  3A03               	xorlw	3	; case 2
  3325  0A5C  1903               	skipnz
  3326  0A5D  2A44               	goto	l5048
  3327  0A5E  2A5F               	goto	l484
  3328  0A5F                     l484:	
  3329  0A5F  0008               	return
  3330  0A60                     __end_of_RTXInit:	
  3331                           
  3332                           	psect	text4
  3333  08C7                     __ptext4:	
  3334 ;; *************** function _CC1Init *****************
  3335 ;; Defined at:
  3336 ;;		line 75 in file "CC1.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  state           1    wreg     unsigned char 
  3339 ;; Auto vars:     Size  Location     Type
  3340 ;;  state           1    2[BANK0 ] unsigned char 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;		None               void
  3343 ;; Registers used:
  3344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3354 ;;Total ram usage:        1 bytes
  3355 ;; Hardware stack levels used:    1
  3356 ;; Hardware stack levels required when called:    5
  3357 ;; This function calls:
  3358 ;;		_DLYDelay_ms
  3359 ;;		_CC1Strobe
  3360 ;;		_CC1LoadREG
  3361 ;; This function is called by:
  3362 ;;		_RTXAwake
  3363 ;;		_main
  3364 ;; This function uses a non-reentrant model
  3365 ;;
  3366                           
  3367                           
  3368                           ;psect for function _CC1Init
  3369  08C7                     _CC1Init:	
  3370                           
  3371                           ;incstack = 0
  3372                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3373                           ;CC1Init@state stored from wreg
  3374  08C7  0020               	movlb	0	; select bank0
  3375  08C8  00A2               	movwf	CC1Init@state
  3376                           
  3377                           ;CC1.c: 76: switch(state)
  3378  08C9  28D8               	goto	l4894
  3379  08CA                     l4886:	
  3380                           ;CC1.c: 84: case 2:
  3381                           
  3382                           ;CC1.c: 83: break;
  3383                           
  3384                           ;CC1.c: 77: {
  3385                           ;CC1.c: 81: case 1:
  3386                           
  3387                           
  3388                           ;CC1.c: 86: CC1Strobe(SRES);
  3389  08CA  3030               	movlw	48
  3390  08CB  3197  27D5  3188   	fcall	_CC1Strobe
  3391                           
  3392                           ;CC1.c: 87: DLYDelay_ms(5);
  3393  08CE  3005               	movlw	5
  3394  08CF  00F1               	movwf	?_DLYDelay_ms
  3395  08D0  3000               	movlw	0
  3396  08D1  00F2               	movwf	?_DLYDelay_ms+1
  3397  08D2  3188  207B  3188   	fcall	_DLYDelay_ms
  3398                           
  3399                           ;CC1.c: 88: CC1LoadREG();
  3400  08D5  3188  2063         	fcall	_CC1LoadREG
  3401                           
  3402                           ;CC1.c: 90: }
  3403                           
  3404                           ;CC1.c: 89: break;
  3405  08D7  0008               	return
  3406  08D8                     l4894:	
  3407  08D8  0020               	movlb	0	; select bank0
  3408  08D9  0822               	movf	CC1Init@state,w
  3409                           
  3410                           ; Switch size 1, requested type "space"
  3411                           ; Number of cases is 2, Range of values is 1 to 2
  3412                           ; switch strategies available:
  3413                           ; Name         Instructions Cycles
  3414                           ; simple_byte            7     4 (average)
  3415                           ; direct_byte           13     9 (fixed)
  3416                           ; jumptable            263     9 (fixed)
  3417                           ;	Chosen strategy is simple_byte
  3418  08DA  3A01               	xorlw	1	; case 1
  3419  08DB  1903               	skipnz
  3420  08DC  28E1               	goto	l181
  3421  08DD  3A03               	xorlw	3	; case 2
  3422  08DE  1903               	skipnz
  3423  08DF  28CA               	goto	l4886
  3424  08E0  28E1               	goto	l181
  3425  08E1                     l181:	
  3426  08E1  0008               	return
  3427  08E2                     __end_of_CC1Init:	
  3428                           
  3429                           	psect	text5
  3430  0863                     __ptext5:	
  3431 ;; *************** function _CC1LoadREG *****************
  3432 ;; Defined at:
  3433 ;;		line 156 in file "CC1.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;		None               void
  3440 ;; Registers used:
  3441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3449 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3450 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;Total ram usage:        1 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    4
  3454 ;; This function calls:
  3455 ;;		_CC1Write
  3456 ;; This function is called by:
  3457 ;;		_CC1Init
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           
  3462                           ;psect for function _CC1LoadREG
  3463  0863                     _CC1LoadREG:	
  3464                           
  3465                           ;CC1.c: 157: CC1Write(0x00,cc1InitVal,0x2E);
  3466                           
  3467                           ;incstack = 0
  3468                           ; Regs used in _CC1LoadREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3469  0863  3020               	movlw	low _cc1InitVal
  3470  0864  00F7               	movwf	?_CC1Write
  3471  0865  3001               	movlw	high _cc1InitVal
  3472  0866  00F8               	movwf	?_CC1Write+1
  3473  0867  302E               	movlw	46
  3474  0868  00FB               	movwf	??_CC1LoadREG
  3475  0869  087B               	movf	??_CC1LoadREG,w
  3476  086A  00F9               	movwf	?_CC1Write+2
  3477  086B  3000               	movlw	0
  3478  086C  3189  21F5  3188   	fcall	_CC1Write
  3479                           
  3480                           ;CC1.c: 158: CC1Write(0x3E,cc1PaTable,8);
  3481  086F  30E3               	movlw	low _cc1PaTable
  3482  0870  00F7               	movwf	?_CC1Write
  3483  0871  3000               	movlw	high _cc1PaTable
  3484  0872  00F8               	movwf	?_CC1Write+1
  3485  0873  3008               	movlw	8
  3486  0874  00FB               	movwf	??_CC1LoadREG
  3487  0875  087B               	movf	??_CC1LoadREG,w
  3488  0876  00F9               	movwf	?_CC1Write+2
  3489  0877  303E               	movlw	62
  3490  0878  3189  21F5         	fcall	_CC1Write
  3491  087A  0008               	return
  3492  087B                     __end_of_CC1LoadREG:	
  3493                           
  3494                           	psect	text6
  3495  172D                     __ptext6:	
  3496 ;; *************** function _RTXTick *****************
  3497 ;; Defined at:
  3498 ;;		line 72 in file "RTX.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;		None               void
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3516 ;;Total ram usage:        0 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    6
  3519 ;; This function calls:
  3520 ;;		_RTXSendData
  3521 ;; This function is called by:
  3522 ;;		_SYSTask
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           
  3527                           ;psect for function _RTXTick
  3528  172D                     _RTXTick:	
  3529                           
  3530                           ;RTX.c: 74: if(tmrRcvPkt)
  3531                           
  3532                           ;incstack = 0
  3533                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3534  172D  0020               	movlb	0	; select bank0
  3535  172E  086D               	movf	_tmrRcvPkt,w
  3536  172F  1903               	btfsc	3,2
  3537  1730  0008               	return
  3538                           
  3539                           ;RTX.c: 75: {
  3540                           ;RTX.c: 76: tmrRcvPkt--;
  3541  1731  3001               	movlw	1
  3542  1732  02ED               	subwf	_tmrRcvPkt,f
  3543                           
  3544                           ;RTX.c: 77: if(!(tmrRcvPkt))
  3545  1733  08ED               	movf	_tmrRcvPkt,f
  3546  1734  1D03               	skipz
  3547  1735  0008               	return
  3548                           
  3549                           ;RTX.c: 78: RTXSendData();
  3550  1736  318E  2684         	fcall	_RTXSendData
  3551  1738  0020               	movlb	0	; select bank0
  3552  1739  0008               	return
  3553  173A                     __end_of_RTXTick:	
  3554                           
  3555                           	psect	text7
  3556  170E                     __ptext7:	
  3557 ;; *************** function _PGMSelLong *****************
  3558 ;; Defined at:
  3559 ;;		line 116 in file "PGM.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;		None
  3564 ;; Return value:  Size  Location     Type
  3565 ;;		None               void
  3566 ;; Registers used:
  3567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3577 ;;Total ram usage:        0 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    4
  3580 ;; This function calls:
  3581 ;;		_LEDNormalFlash
  3582 ;;		_PGMWriteNvm
  3583 ;; This function is called by:
  3584 ;;		_SYSTask
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function _PGMSelLong
  3590  170E                     _PGMSelLong:	
  3591                           
  3592                           ;PGM.c: 118: pgm_cfg.menu=0;
  3593                           
  3594                           ;incstack = 0
  3595                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3596  170E  0021               	movlb	1	; select bank1
  3597  170F  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  3598                           
  3599                           ;PGM.c: 120: PGMWriteNvm();
  3600  1710  3197  279C  3197   	fcall	_PGMWriteNvm
  3601                           
  3602                           ;PGM.c: 122: LEDNormalFlash(3);
  3603  1713  3003               	movlw	3
  3604  1714  3189  2156         	fcall	_LEDNormalFlash
  3605  1716  0008               	return
  3606  1717                     __end_of_PGMSelLong:	
  3607                           
  3608                           	psect	text8
  3609  17C2                     __ptext8:	
  3610 ;; *************** function _PGMSelDown *****************
  3611 ;; Defined at:
  3612 ;;		line 102 in file "PGM.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;		None
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;		None
  3617 ;; Return value:  Size  Location     Type
  3618 ;;		None               void
  3619 ;; Registers used:
  3620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3621 ;; Tracked objects:
  3622 ;;		On entry : 0/0
  3623 ;;		On exit  : 0/0
  3624 ;;		Unchanged: 0/0
  3625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3628 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3629 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3630 ;;Total ram usage:        1 bytes
  3631 ;; Hardware stack levels used:    1
  3632 ;; Hardware stack levels required when called:    4
  3633 ;; This function calls:
  3634 ;;		_PGMWriteNvm
  3635 ;; This function is called by:
  3636 ;;		_SYSTask
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           
  3641                           ;psect for function _PGMSelDown
  3642  17C2                     _PGMSelDown:	
  3643                           
  3644                           ;PGM.c: 104: pgm_flg.pgmonoff=1;
  3645                           
  3646                           ;incstack = 0
  3647                           ; Regs used in _PGMSelDown: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3648  17C2  0020               	movlb	0	; select bank0
  3649  17C3  146A               	bsf	_pgm_flg,0
  3650                           
  3651                           ;PGM.c: 106: LATCbits.LATC7=0;
  3652  17C4  0022               	movlb	2	; select bank2
  3653  17C5  138E               	bcf	14,7	;volatile
  3654                           
  3655                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  3656  17C6  0020               	movlb	0	; select bank0
  3657  17C7  0816               	movf	22,w	;volatile
  3658  17C8  0617               	xorwf	23,w	;volatile
  3659  17C9  00E5               	movwf	??_PGMSelDown
  3660  17CA  0865               	movf	??_PGMSelDown,w
  3661  17CB  0021               	movlb	1	; select bank1
  3662  17CC  00CD               	movwf	(_pgm_cfg^(0+128)+3)
  3663                           
  3664                           ;PGM.c: 110: PGMWriteNvm();
  3665  17CD  3197  279C         	fcall	_PGMWriteNvm
  3666                           
  3667                           ;PGM.c: 112: tmrPgm=100;
  3668  17CF  3064               	movlw	100
  3669  17D0  0020               	movlb	0	; select bank0
  3670  17D1  00E5               	movwf	??_PGMSelDown
  3671  17D2  0865               	movf	??_PGMSelDown,w
  3672  17D3  00EC               	movwf	_tmrPgm
  3673  17D4  0008               	return
  3674  17D5                     __end_of_PGMSelDown:	
  3675                           
  3676                           	psect	text9
  3677  16DA                     __ptext9:	
  3678 ;; *************** function _PGMPgmOff *****************
  3679 ;; Defined at:
  3680 ;;		line 94 in file "PGM.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;		None               void
  3687 ;; Registers used:
  3688 ;;		status,2
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    2
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_SYSTask
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _PGMPgmOff
  3710  16DA                     _PGMPgmOff:	
  3711                           
  3712                           ;PGM.c: 96: tmrPgm=0;
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _PGMPgmOff: [status,2]
  3716  16DA  0020               	movlb	0	; select bank0
  3717  16DB  01EC               	clrf	_tmrPgm
  3718                           
  3719                           ;PGM.c: 98: pgm_flg.pgmonoff=0;
  3720  16DC  106A               	bcf	_pgm_flg,0
  3721  16DD  0008               	return
  3722  16DE                     __end_of_PGMPgmOff:	
  3723                           
  3724                           	psect	text10
  3725  1757                     __ptext10:	
  3726 ;; *************** function _PGMTick *****************
  3727 ;; Defined at:
  3728 ;;		line 46 in file "PGM.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;		None
  3733 ;; Return value:  Size  Location     Type
  3734 ;;		None               void
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, status,0
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3746 ;;Total ram usage:        0 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    2
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_SYSTask
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _PGMTick
  3758  1757                     _PGMTick:	
  3759                           
  3760                           ;PGM.c: 48: if(tmrPgm)
  3761                           
  3762                           ;incstack = 0
  3763                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3764  1757  0020               	movlb	0	; select bank0
  3765  1758  086C               	movf	_tmrPgm,w
  3766  1759  1903               	btfsc	3,2
  3767  175A  0008               	return
  3768                           
  3769                           ;PGM.c: 49: {
  3770                           ;PGM.c: 50: tmrPgm--;
  3771  175B  3001               	movlw	1
  3772  175C  02EC               	subwf	_tmrPgm,f
  3773                           
  3774                           ;PGM.c: 51: if(!(tmrPgm))
  3775  175D  08EC               	movf	_tmrPgm,f
  3776  175E  1D03               	skipz
  3777  175F  0008               	return
  3778                           
  3779                           ;PGM.c: 52: {
  3780                           ;PGM.c: 54: pgm_flg.pgmonoff=0;
  3781  1760  106A               	bcf	_pgm_flg,0
  3782                           
  3783                           ;PGM.c: 56: LATCbits.LATC7=1;
  3784  1761  0022               	movlb	2	; select bank2
  3785  1762  178E               	bsf	14,7	;volatile
  3786                           
  3787                           ;PGM.c: 58: flg_slp.goSleep=1;
  3788  1763  0021               	movlb	1	; select bank1
  3789  1764  142F               	bsf	_flg_slp^(0+128),0
  3790  1765  0020               	movlb	0	; select bank0
  3791  1766  0008               	return
  3792  1767                     __end_of_PGMTick:	
  3793                           
  3794                           	psect	text11
  3795  0E1A                     __ptext11:	
  3796 ;; *************** function _SLPSleep *****************
  3797 ;; Defined at:
  3798 ;;		line 7 in file "SLP.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;		None
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  3803 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  3804 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  3805 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  3806 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  3807 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  3808 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  3809 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;		None               void
  3812 ;; Registers used:
  3813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3820 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3822 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;Total ram usage:        9 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    5
  3826 ;; This function calls:
  3827 ;;		_CC1Sleep
  3828 ;; This function is called by:
  3829 ;;		_SYSTask
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           
  3834                           ;psect for function _SLPSleep
  3835  0E1A                     _SLPSleep:	
  3836                           
  3837                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  3838                           ;SLP.c: 10: CC1Sleep();
  3839                           
  3840                           ;incstack = 0
  3841                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3842  0E1A  3196  26FE  318E   	fcall	_CC1Sleep
  3843                           
  3844                           ;SLP.c: 12: WPUBTmp=WPUB;
  3845  0E1D  0024               	movlb	4	; select bank4
  3846  0E1E  080D               	movf	13,w	;volatile
  3847  0E1F  00FA               	movwf	??_SLPSleep
  3848  0E20  087A               	movf	??_SLPSleep,w
  3849  0E21  0020               	movlb	0	; select bank0
  3850  0E22  00A2               	movwf	SLPSleep@WPUBTmp
  3851                           
  3852                           ;SLP.c: 13: WPUB=0b00000100;
  3853  0E23  3004               	movlw	4
  3854  0E24  0024               	movlb	4	; select bank4
  3855  0E25  008D               	movwf	13	;volatile
  3856                           
  3857                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3858  0E26  0021               	movlb	1	; select bank1
  3859  0E27  081D               	movf	29,w	;volatile
  3860  0E28  00FA               	movwf	??_SLPSleep
  3861  0E29  087A               	movf	??_SLPSleep,w
  3862  0E2A  0020               	movlb	0	; select bank0
  3863  0E2B  00A6               	movwf	SLPSleep@ADCON0Tmp
  3864                           
  3865                           ;SLP.c: 16: ADCON0=0b00000000;
  3866  0E2C  0021               	movlb	1	; select bank1
  3867  0E2D  019D               	clrf	29	;volatile
  3868                           
  3869                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3870  0E2E  0022               	movlb	2	; select bank2
  3871  0E2F  0817               	movf	23,w	;volatile
  3872  0E30  00FA               	movwf	??_SLPSleep
  3873  0E31  087A               	movf	??_SLPSleep,w
  3874  0E32  0020               	movlb	0	; select bank0
  3875  0E33  00A5               	movwf	SLPSleep@FVRCONTmp
  3876                           
  3877                           ;SLP.c: 19: FVRCON=0b00000000;
  3878  0E34  0022               	movlb	2	; select bank2
  3879  0E35  0197               	clrf	23	;volatile
  3880                           
  3881                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3882  0E36  0027               	movlb	7	; select bank7
  3883  0E37  0815               	movf	21,w	;volatile
  3884  0E38  00FA               	movwf	??_SLPSleep
  3885  0E39  087A               	movf	??_SLPSleep,w
  3886  0E3A  0020               	movlb	0	; select bank0
  3887  0E3B  00A0               	movwf	SLPSleep@IOCBNTmp
  3888                           
  3889                           ;SLP.c: 22: INTCONTmp=INTCON;
  3890  0E3C  080B               	movf	11,w	;volatile
  3891  0E3D  00FA               	movwf	??_SLPSleep
  3892  0E3E  087A               	movf	??_SLPSleep,w
  3893  0E3F  00A1               	movwf	SLPSleep@INTCONTmp
  3894                           
  3895                           ;SLP.c: 23: INTCON=0b10001000;
  3896  0E40  3088               	movlw	136
  3897  0E41  008B               	movwf	11	;volatile
  3898                           
  3899                           ;SLP.c: 24: IOCBN=0b00000100;
  3900  0E42  3004               	movlw	4
  3901  0E43  0027               	movlb	7	; select bank7
  3902  0E44  0095               	movwf	21	;volatile
  3903                           
  3904                           ;SLP.c: 26: TESTBATTtmp=0;
  3905  0E45  0020               	movlb	0	; select bank0
  3906  0E46  01A7               	clrf	SLPSleep@TESTBATTtmp
  3907                           
  3908                           ;SLP.c: 27: if(LATBbits.LATB5)
  3909  0E47  0022               	movlb	2	; select bank2
  3910  0E48  1E8D               	btfss	13,5	;volatile
  3911  0E49  2E4D               	goto	l4990
  3912                           
  3913                           ;SLP.c: 28: TESTBATTtmp=1;
  3914  0E4A  0020               	movlb	0	; select bank0
  3915  0E4B  01A7               	clrf	SLPSleep@TESTBATTtmp
  3916  0E4C  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3917  0E4D                     l4990:	
  3918                           
  3919                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3920  0E4D  0021               	movlb	1	; select bank1
  3921  0E4E  0817               	movf	23,w	;volatile
  3922  0E4F  00FA               	movwf	??_SLPSleep
  3923  0E50  087A               	movf	??_SLPSleep,w
  3924  0E51  0020               	movlb	0	; select bank0
  3925  0E52  00A3               	movwf	SLPSleep@WDTCONTmp
  3926                           
  3927                           ;SLP.c: 31: WDTCON=0b00011011;
  3928  0E53  301B               	movlw	27
  3929  0E54  0021               	movlb	1	; select bank1
  3930  0E55  0097               	movwf	23	;volatile
  3931                           
  3932                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3933  0E56  0815               	movf	21,w	;volatile
  3934  0E57  00FA               	movwf	??_SLPSleep
  3935  0E58  087A               	movf	??_SLPSleep,w
  3936  0E59  0020               	movlb	0	; select bank0
  3937  0E5A  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3938                           
  3939                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3940  0E5B  300A               	movlw	10
  3941  0E5C  0021               	movlb	1	; select bank1
  3942  0E5D  0095               	movwf	21	;volatile
  3943  0E5E  0064               	clrwdt	;# 
  3944  0E5F  0063               	sleep	;# 
  3945                           
  3946                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3947  0E60  0020               	movlb	0	; select bank0
  3948  0E61  0820               	movf	SLPSleep@IOCBNTmp,w
  3949  0E62  0027               	movlb	7	; select bank7
  3950  0E63  0095               	movwf	21	;volatile
  3951                           
  3952                           ;SLP.c: 40: INTCON=INTCONTmp;
  3953  0E64  0020               	movlb	0	; select bank0
  3954  0E65  0821               	movf	SLPSleep@INTCONTmp,w
  3955  0E66  008B               	movwf	11	;volatile
  3956                           
  3957                           ;SLP.c: 41: WPUB=WPUBTmp;
  3958  0E67  0822               	movf	SLPSleep@WPUBTmp,w
  3959  0E68  0024               	movlb	4	; select bank4
  3960  0E69  008D               	movwf	13	;volatile
  3961                           
  3962                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3963  0E6A  0020               	movlb	0	; select bank0
  3964  0E6B  0826               	movf	SLPSleep@ADCON0Tmp,w
  3965  0E6C  0021               	movlb	1	; select bank1
  3966  0E6D  009D               	movwf	29	;volatile
  3967                           
  3968                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3969  0E6E  0020               	movlb	0	; select bank0
  3970  0E6F  0825               	movf	SLPSleep@FVRCONTmp,w
  3971  0E70  0022               	movlb	2	; select bank2
  3972  0E71  0097               	movwf	23	;volatile
  3973                           
  3974                           ;SLP.c: 44: LATBbits.LATB5=0;
  3975  0E72  128D               	bcf	13,5	;volatile
  3976                           
  3977                           ;SLP.c: 45: if(TESTBATTtmp)
  3978  0E73  0020               	movlb	0	; select bank0
  3979  0E74  0827               	movf	SLPSleep@TESTBATTtmp,w
  3980  0E75  1903               	btfsc	3,2
  3981  0E76  2E7A               	goto	l4996
  3982                           
  3983                           ;SLP.c: 46: LATBbits.LATB5=1;
  3984  0E77  0022               	movlb	2	; select bank2
  3985  0E78  168D               	bsf	13,5	;volatile
  3986  0E79  0020               	movlb	0	; select bank0
  3987  0E7A                     l4996:	
  3988                           
  3989                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3990  0E7A  0020               	movlb	0	; select bank0
  3991  0E7B  0823               	movf	SLPSleep@WDTCONTmp,w
  3992  0E7C  0021               	movlb	1	; select bank1
  3993  0E7D  0097               	movwf	23	;volatile
  3994                           
  3995                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3996  0E7E  0020               	movlb	0	; select bank0
  3997  0E7F  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3998  0E80  0021               	movlb	1	; select bank1
  3999  0E81  0095               	movwf	21	;volatile
  4000                           
  4001                           ;SLP.c: 50: flg_slp.exitSleep=1;
  4002  0E82  14AF               	bsf	_flg_slp^(0+128),1
  4003  0E83  0008               	return
  4004  0E84                     __end_of_SLPSleep:	
  4005                           
  4006                           	psect	text12
  4007  16FE                     __ptext12:	
  4008 ;; *************** function _CC1Sleep *****************
  4009 ;; Defined at:
  4010 ;;		line 145 in file "CC1.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;		None               void
  4017 ;; Registers used:
  4018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;Total ram usage:        0 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    4
  4031 ;; This function calls:
  4032 ;;		_CC1Strobe
  4033 ;; This function is called by:
  4034 ;;		_SLPSleep
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _CC1Sleep
  4040  16FE                     _CC1Sleep:	
  4041                           
  4042                           ;CC1.c: 147: LATAbits.LATA5=0;
  4043                           
  4044                           ;incstack = 0
  4045                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4046  16FE  0022               	movlb	2	; select bank2
  4047  16FF  128C               	bcf	12,5	;volatile
  4048                           
  4049                           ;CC1.c: 149: CC1Strobe(SWOR);
  4050  1700  3038               	movlw	56
  4051  1701  3197  27D5         	fcall	_CC1Strobe
  4052                           
  4053                           ;CC1.c: 151: LATAbits.LATA5=1;
  4054  1703  0022               	movlb	2	; select bank2
  4055  1704  168C               	bsf	12,5	;volatile
  4056  1705  0008               	return
  4057  1706                     __end_of_CC1Sleep:	
  4058                           
  4059                           	psect	text13
  4060  0AAC                     __ptext13:	
  4061 ;; *************** function _DINTick *****************
  4062 ;; Defined at:
  4063 ;;		line 47 in file "DIN.c"
  4064 ;; Parameters:    Size  Location     Type
  4065 ;;		None
  4066 ;; Auto vars:     Size  Location     Type
  4067 ;;		None
  4068 ;; Return value:  Size  Location     Type
  4069 ;;		None               void
  4070 ;; Registers used:
  4071 ;;		wreg, status,2, status,0
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4080 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;Total ram usage:        1 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    2
  4084 ;; This function calls:
  4085 ;;		Nothing
  4086 ;; This function is called by:
  4087 ;;		_SYSTask
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           
  4092                           ;psect for function _DINTick
  4093  0AAC                     _DINTick:	
  4094                           
  4095                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  4099  0AAC  0020               	movlb	0	; select bank0
  4100  0AAD  1C6E               	btfss	_u_flg_din,0
  4101  0AAE  2AC0               	goto	l304
  4102                           
  4103                           ;DIN.c: 51: {
  4104                           ;DIN.c: 52: tmrDbncSel++;
  4105  0AAF  3001               	movlw	1
  4106  0AB0  00F1               	movwf	??_DINTick
  4107  0AB1  0871               	movf	??_DINTick,w
  4108  0AB2  07EB               	addwf	_tmrDbncSel,f
  4109                           
  4110                           ;DIN.c: 53: if(tmrDbncSel>5)
  4111  0AB3  3006               	movlw	6
  4112  0AB4  026B               	subwf	_tmrDbncSel,w
  4113  0AB5  1C03               	skipc
  4114  0AB6  2AC0               	goto	l304
  4115                           
  4116                           ;DIN.c: 54: {
  4117                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  4118  0AB7  106E               	bcf	_u_flg_din,0
  4119                           
  4120                           ;DIN.c: 56: tmrDbncSel=0;
  4121  0AB8  01EB               	clrf	_tmrDbncSel
  4122                           
  4123                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  4124  0AB9  1C7C               	btfss	_u_in_sta_currTask,0
  4125  0ABA  2ABE               	goto	l306
  4126                           
  4127                           ;DIN.c: 59: u_in_ev_down.sel=1;
  4128  0ABB  0021               	movlb	1	; select bank1
  4129  0ABC  1435               	bsf	_u_in_ev_down^(0+128),0
  4130  0ABD  2AC0               	goto	l304
  4131  0ABE                     l306:	
  4132                           
  4133                           ;DIN.c: 60: else
  4134                           ;DIN.c: 61: u_in_ev_up.sel=1;
  4135  0ABE  0021               	movlb	1	; select bank1
  4136  0ABF  1437               	bsf	_u_in_ev_up^(0+128),0
  4137  0AC0                     l304:	
  4138                           
  4139                           ;DIN.c: 62: }
  4140                           ;DIN.c: 63: }
  4141                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  4142  0AC0  0020               	movlb	0	; select bank0
  4143  0AC1  1CEE               	btfss	_u_flg_din,1
  4144  0AC2  0008               	return
  4145                           
  4146                           ;DIN.c: 67: {
  4147                           ;DIN.c: 68: tmrLongSel++;
  4148  0AC3  3001               	movlw	1
  4149  0AC4  0021               	movlb	1	; select bank1
  4150  0AC5  07AB               	addwf	_tmrLongSel^(0+128),f
  4151  0AC6  3000               	movlw	0
  4152  0AC7  3DAC               	addwfc	(_tmrLongSel+1)^(0+128),f
  4153                           
  4154                           ;DIN.c: 69: if(tmrLongSel>200)
  4155  0AC8  3000               	movlw	0
  4156  0AC9  022C               	subwf	(_tmrLongSel+1)^(0+128),w
  4157  0ACA  30C9               	movlw	201
  4158  0ACB  1903               	skipnz
  4159  0ACC  022B               	subwf	_tmrLongSel^(0+128),w
  4160  0ACD  1C03               	skipc
  4161  0ACE  0008               	return
  4162                           
  4163                           ;DIN.c: 70: {
  4164                           ;DIN.c: 72: tmrLongSel=0;
  4165  0ACF  01AB               	clrf	_tmrLongSel^(0+128)
  4166  0AD0  01AC               	clrf	(_tmrLongSel+1)^(0+128)
  4167                           
  4168                           ;DIN.c: 74: u_in_ev_long.sel=1;
  4169  0AD1  1436               	bsf	_u_in_ev_long^(0+128),0
  4170  0AD2  0008               	return
  4171  0AD3                     __end_of_DINTick:	
  4172                           
  4173                           	psect	text14
  4174  0A86                     __ptext14:	
  4175 ;; *************** function _SYSInit *****************
  4176 ;; Defined at:
  4177 ;;		line 18 in file "SYS.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  state           1    wreg     unsigned char 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  state           1    2[COMMON] unsigned char 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;Total ram usage:        2 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    2
  4198 ;; This function calls:
  4199 ;;		Nothing
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           
  4206                           ;psect for function _SYSInit
  4207  0A86                     _SYSInit:	
  4208                           
  4209                           ;incstack = 0
  4210                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  4211                           ;SYSInit@state stored from wreg
  4212  0A86  00F2               	movwf	SYSInit@state
  4213                           
  4214                           ;SYS.c: 19: switch(state)
  4215  0A87  2AA3               	goto	l4096
  4216  0A88                     l4074:	
  4217                           ;SYS.c: 20: {
  4218                           ;SYS.c: 21: case 0:
  4219                           
  4220                           
  4221                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  4222  0A88  3006               	movlw	6
  4223  0A89  0021               	movlb	1	; select bank1
  4224  0A8A  0095               	movwf	21	;volatile
  4225  0A8B  3073               	movlw	115
  4226  0A8C  0099               	movwf	25	;volatile
  4227  0A8D  3009               	movlw	9
  4228  0A8E  0097               	movwf	23	;volatile
  4229  0A8F  0027               	movlb	7	; select bank7
  4230  0A90  0194               	clrf	20	;volatile
  4231  0A91  0195               	clrf	21	;volatile
  4232  0A92  3063               	movlw	99
  4233  0A93  0020               	movlb	0	; select bank0
  4234  0A94  0095               	movwf	21	;volatile
  4235  0A95  168B               	bsf	11,5	;volatile
  4236  0A96  30FB               	movlw	251
  4237  0A97  00F1               	movwf	??_SYSInit
  4238  0A98  0871               	movf	??_SYSInit,w
  4239  0A99  058B               	andwf	11,f	;volatile
  4240  0A9A  0191               	clrf	17	;volatile
  4241  0A9B  0192               	clrf	18	;volatile
  4242  0A9C  0021               	movlb	1	; select bank1
  4243  0A9D  0191               	clrf	17	;volatile
  4244  0A9E  0192               	clrf	18	;volatile
  4245                           
  4246                           ;SYS.c: 24: break;
  4247  0A9F  0008               	return
  4248  0AA0                     l4092:	
  4249                           ;SYS.c: 25: case 1:
  4250                           
  4251                           
  4252                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  4253  0AA0  0021               	movlb	1	; select bank1
  4254  0AA1  01B4               	clrf	_u_SYS_STA^(0+128)
  4255                           
  4256                           ;SYS.c: 32: }
  4257                           
  4258                           ;SYS.c: 28: break;
  4259  0AA2  0008               	return
  4260  0AA3                     l4096:	
  4261  0AA3  0872               	movf	SYSInit@state,w
  4262                           
  4263                           ; Switch size 1, requested type "space"
  4264                           ; Number of cases is 2, Range of values is 0 to 1
  4265                           ; switch strategies available:
  4266                           ; Name         Instructions Cycles
  4267                           ; simple_byte            7     4 (average)
  4268                           ; direct_byte           10     6 (fixed)
  4269                           ; jumptable            260     6 (fixed)
  4270                           ;	Chosen strategy is simple_byte
  4271  0AA4  3A00               	xorlw	0	; case 0
  4272  0AA5  1903               	skipnz
  4273  0AA6  2A88               	goto	l4074
  4274  0AA7  3A01               	xorlw	1	; case 1
  4275  0AA8  1903               	skipnz
  4276  0AA9  2AA0               	goto	l4092
  4277  0AAA  2AAB               	goto	l609
  4278  0AAB                     l609:	
  4279  0AAB  0008               	return
  4280  0AAC                     __end_of_SYSInit:	
  4281                           
  4282                           	psect	text15
  4283  16E4                     __ptext15:	
  4284 ;; *************** function _RTXTask *****************
  4285 ;; Defined at:
  4286 ;;		line 83 in file "RTX.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    9
  4307 ;; This function calls:
  4308 ;;		_RTXReadPkt
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _RTXTask
  4316  16E4                     _RTXTask:	
  4317                           
  4318                           ;RTX.c: 85: if(!(PORTBbits.RB0))
  4319                           
  4320                           ;incstack = 0
  4321                           ; Regs used in _RTXTask: [allreg]
  4322  16E4  0020               	movlb	0	; select bank0
  4323  16E5  180D               	btfsc	13,0	;volatile
  4324  16E6  0008               	return
  4325                           
  4326                           ;RTX.c: 86: RTXReadPkt();
  4327  16E7  318C  24B1         	fcall	_RTXReadPkt
  4328  16E9  0008               	return
  4329  16EA                     __end_of_RTXTask:	
  4330                           
  4331                           	psect	text16
  4332  0CB1                     __ptext16:	
  4333 ;; *************** function _RTXReadPkt *****************
  4334 ;; Defined at:
  4335 ;;		line 135 in file "RTX.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;		None               void
  4342 ;; Registers used:
  4343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;Total ram usage:        2 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    8
  4356 ;; This function calls:
  4357 ;;		_CC1Strobe
  4358 ;;		_CC1Read
  4359 ;;		_LEDNormalFlash
  4360 ;;		_PGMWriteNvm
  4361 ;;		_RTXStartSendData
  4362 ;;		_RTXRcvPkt
  4363 ;;		_RTXSendRPgm
  4364 ;; This function is called by:
  4365 ;;		_RTXTask
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           
  4370                           ;psect for function _RTXReadPkt
  4371  0CB1                     _RTXReadPkt:	
  4372                           
  4373                           ;RTX.c: 136: unsigned char numRxByte;
  4374                           ;RTX.c: 139: CC1Read(0x3B,(&(numRxByte)),1);
  4375                           
  4376                           ;incstack = 0
  4377                           ; Regs used in _RTXReadPkt: [allreg]
  4378  0CB1  3066               	movlw	RTXReadPkt@numRxByte& (0+255)
  4379  0CB2  0020               	movlb	0	; select bank0
  4380  0CB3  00E5               	movwf	??_RTXReadPkt
  4381  0CB4  0865               	movf	??_RTXReadPkt,w
  4382  0CB5  00F7               	movwf	?_CC1Read
  4383  0CB6  01F8               	clrf	?_CC1Read+1
  4384  0CB7  0AF8               	incf	?_CC1Read+1,f
  4385  0CB8  303B               	movlw	59
  4386  0CB9  3188  20E2  318C   	fcall	_CC1Read
  4387                           
  4388                           ;RTX.c: 140: while(numRxByte>=0x09)
  4389  0CBC  3009               	movlw	9
  4390  0CBD  0020               	movlb	0	; select bank0
  4391  0CBE  0266               	subwf	RTXReadPkt@numRxByte,w
  4392  0CBF  1C03               	btfss	3,0
  4393  0CC0  0008               	return
  4394  0CC1  0064               	clrwdt	;# 
  4395                           
  4396                           ;RTX.c: 144: RTXRcvPkt(pktRx,0x09);
  4397  0CC2  3009               	movlw	9
  4398  0CC3  0020               	movlb	0	; select bank0
  4399  0CC4  00E5               	movwf	??_RTXReadPkt
  4400  0CC5  0865               	movf	??_RTXReadPkt,w
  4401  0CC6  00A0               	movwf	?_RTXRcvPkt
  4402  0CC7  30B8               	movlw	_pktRx& (0+255)
  4403  0CC8  3197  273A  318C   	fcall	_RTXRcvPkt
  4404                           
  4405                           ;RTX.c: 146: if(pgm_flg.pgmonoff)
  4406  0CCB  0020               	movlb	0	; select bank0
  4407  0CCC  1C6A               	btfss	_pgm_flg,0
  4408  0CCD  2CF0               	goto	l5140
  4409                           
  4410                           ;RTX.c: 147: {
  4411                           ;RTX.c: 148: if(pktRx[0]==0x00)
  4412  0CCE  0021               	movlb	1	; select bank1
  4413  0CCF  08B8               	movf	_pktRx^(0+128),f
  4414  0CD0  1D03               	skipz
  4415  0CD1  2CB1               	goto	_RTXReadPkt
  4416                           
  4417                           ;RTX.c: 149: {
  4418                           ;RTX.c: 151: if(pktRx[2]==PGM)
  4419  0CD2  083A               	movf	(_pktRx^(0+128)+2),w
  4420  0CD3  3A01               	xorlw	1
  4421  0CD4  1D03               	skipz
  4422  0CD5  2CB1               	goto	_RTXReadPkt
  4423                           
  4424                           ;RTX.c: 152: {
  4425                           ;RTX.c: 154: pgm_cfg.baseId=pktRx[1];
  4426  0CD6  0839               	movf	(_pktRx^(0+128)+1),w
  4427  0CD7  0020               	movlb	0	; select bank0
  4428  0CD8  00E5               	movwf	??_RTXReadPkt
  4429  0CD9  0865               	movf	??_RTXReadPkt,w
  4430  0CDA  0021               	movlb	1	; select bank1
  4431  0CDB  00CE               	movwf	(_pgm_cfg^(0+128)+4)
  4432                           
  4433                           ;RTX.c: 156: pgm_cfg.menu=1;
  4434  0CDC  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  4435  0CDD  0ACC               	incf	(_pgm_cfg^(0+128)+2),f
  4436                           
  4437                           ;RTX.c: 157: PGMWriteNvm();
  4438  0CDE  3197  279C  318C   	fcall	_PGMWriteNvm
  4439                           
  4440                           ;RTX.c: 159: RTXSendRPgm();
  4441  0CE1  3189  21D3  318C   	fcall	_RTXSendRPgm
  4442                           
  4443                           ;RTX.c: 161: rtx_flg.pgmDone=1;
  4444  0CE4  0021               	movlb	1	; select bank1
  4445  0CE5  1430               	bsf	_rtx_flg^(0+128),0
  4446                           
  4447                           ;RTX.c: 163: tmrRcvPkt=0;
  4448  0CE6  0020               	movlb	0	; select bank0
  4449  0CE7  01ED               	clrf	_tmrRcvPkt
  4450                           
  4451                           ;RTX.c: 165: RTXStartSendData();
  4452  0CE8  3197  2748  318C   	fcall	_RTXStartSendData
  4453                           
  4454                           ;RTX.c: 167: LEDNormalFlash(3);
  4455  0CEB  3003               	movlw	3
  4456  0CEC  3189  2156  318C   	fcall	_LEDNormalFlash
  4457                           
  4458                           ;RTX.c: 168: }
  4459                           ;RTX.c: 169: }
  4460                           ;RTX.c: 170: }
  4461  0CEF  2CB1               	goto	_RTXReadPkt
  4462  0CF0                     l5140:	
  4463                           
  4464                           ;RTX.c: 171: else
  4465                           ;RTX.c: 172: {
  4466                           ;RTX.c: 173: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  4467  0CF0  0021               	movlb	1	; select bank1
  4468  0CF1  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4469  0CF2  0638               	xorwf	_pktRx^(0+128),w
  4470  0CF3  1D03               	skipz
  4471  0CF4  2CB1               	goto	_RTXReadPkt
  4472  0CF5  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4473  0CF6  0639               	xorwf	(_pktRx^(0+128)+1),w
  4474  0CF7  1D03               	skipz
  4475  0CF8  2CB1               	goto	_RTXReadPkt
  4476                           
  4477                           ;RTX.c: 174: {
  4478                           ;RTX.c: 176: if(pktRx[2]==rDAT)
  4479  0CF9  083A               	movf	(_pktRx^(0+128)+2),w
  4480  0CFA  3A80               	xorlw	128
  4481  0CFB  1D03               	skipz
  4482  0CFC  2CB1               	goto	_RTXReadPkt
  4483                           
  4484                           ;RTX.c: 177: {
  4485                           ;RTX.c: 179: CC1Strobe(SIDLE);
  4486  0CFD  3036               	movlw	54
  4487  0CFE  3197  27D5  318C   	fcall	_CC1Strobe
  4488                           
  4489                           ;RTX.c: 181: tmrRcvPkt=0;
  4490  0D01  0020               	movlb	0	; select bank0
  4491  0D02  01ED               	clrf	_tmrRcvPkt
  4492                           
  4493                           ;RTX.c: 183: cntSndData=0;
  4494  0D03  01E9               	clrf	_cntSndData
  4495                           
  4496                           ;RTX.c: 185: flg_slp.goSleep=1;
  4497  0D04  0021               	movlb	1	; select bank1
  4498  0D05  142F               	bsf	_flg_slp^(0+128),0
  4499  0D06  2CB1               	goto	_RTXReadPkt
  4500  0D07                     __end_of_RTXReadPkt:	
  4501                           ;RTX.c: 186: }
  4502                           ;RTX.c: 187: }
  4503                           ;RTX.c: 188: }
  4504                           ;RTX.c: 190: CC1Read(0x3B,(&(numRxByte)),1);
  4505                           
  4506                           
  4507                           	psect	text17
  4508  09D3                     __ptext17:	
  4509 ;; *************** function _RTXSendRPgm *****************
  4510 ;; Defined at:
  4511 ;;		line 256 in file "RTX.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;		None               void
  4518 ;; Registers used:
  4519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;Total ram usage:        1 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    5
  4532 ;; This function calls:
  4533 ;;		_RTXSndPkt
  4534 ;; This function is called by:
  4535 ;;		_RTXReadPkt
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           
  4540                           ;psect for function _RTXSendRPgm
  4541  09D3                     _RTXSendRPgm:	
  4542                           
  4543                           ;RTX.c: 258: pktTx[0]=pgm_cfg.baseId;
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4547  09D3  0021               	movlb	1	; select bank1
  4548  09D4  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4549  09D5  0020               	movlb	0	; select bank0
  4550  09D6  00A8               	movwf	??_RTXSendRPgm
  4551  09D7  0828               	movf	??_RTXSendRPgm,w
  4552  09D8  0021               	movlb	1	; select bank1
  4553  09D9  00C1               	movwf	_pktTx^(0+128)
  4554                           
  4555                           ;RTX.c: 259: pktTx[1]=pgm_cfg.sensId;
  4556  09DA  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4557  09DB  0020               	movlb	0	; select bank0
  4558  09DC  00A8               	movwf	??_RTXSendRPgm
  4559  09DD  0828               	movf	??_RTXSendRPgm,w
  4560  09DE  0021               	movlb	1	; select bank1
  4561  09DF  00C2               	movwf	(_pktTx^(0+128)+1)
  4562                           
  4563                           ;RTX.c: 260: pktTx[2]=rPGM;
  4564  09E0  3081               	movlw	129
  4565  09E1  0020               	movlb	0	; select bank0
  4566  09E2  00A8               	movwf	??_RTXSendRPgm
  4567  09E3  0828               	movf	??_RTXSendRPgm,w
  4568  09E4  0021               	movlb	1	; select bank1
  4569  09E5  00C3               	movwf	(_pktTx^(0+128)+2)
  4570                           
  4571                           ;RTX.c: 261: pktTx[3]=0x00;
  4572  09E6  01C4               	clrf	(_pktTx^(0+128)+3)
  4573                           
  4574                           ;RTX.c: 262: pktTx[4]=0x00;
  4575  09E7  01C5               	clrf	(_pktTx^(0+128)+4)
  4576                           
  4577                           ;RTX.c: 263: pktTx[5]=0x00;
  4578  09E8  01C6               	clrf	(_pktTx^(0+128)+5)
  4579                           
  4580                           ;RTX.c: 264: pktTx[6]=0x00;
  4581  09E9  01C7               	clrf	(_pktTx^(0+128)+6)
  4582                           
  4583                           ;RTX.c: 265: pktTx[7]=0x00;
  4584  09EA  01C8               	clrf	(_pktTx^(0+128)+7)
  4585                           
  4586                           ;RTX.c: 266: pktTx[8]=0x00;
  4587  09EB  01C9               	clrf	(_pktTx^(0+128)+8)
  4588                           
  4589                           ;RTX.c: 269: RTXSndPkt(pktTx,0x09);
  4590  09EC  3009               	movlw	9
  4591  09ED  0020               	movlb	0	; select bank0
  4592  09EE  00A8               	movwf	??_RTXSendRPgm
  4593  09EF  0828               	movf	??_RTXSendRPgm,w
  4594  09F0  00A2               	movwf	?_RTXSndPkt
  4595  09F1  30C1               	movlw	_pktTx& (0+255)
  4596  09F2  318D  2507         	fcall	_RTXSndPkt
  4597  09F4  0008               	return
  4598  09F5                     __end_of_RTXSendRPgm:	
  4599                           
  4600                           	psect	text18
  4601  173A                     __ptext18:	
  4602 ;; *************** function _RTXRcvPkt *****************
  4603 ;; Defined at:
  4604 ;;		line 129 in file "RTX.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  dst             1    wreg     PTR unsigned char 
  4607 ;;		 -> pktRx(9), 
  4608 ;;  len             1    0[BANK0 ] unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  4611 ;;		 -> pktRx(9), 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;		None               void
  4614 ;; Registers used:
  4615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4621 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;Total ram usage:        4 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    4
  4628 ;; This function calls:
  4629 ;;		_CC1Read
  4630 ;; This function is called by:
  4631 ;;		_RTXReadPkt
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           
  4636                           ;psect for function _RTXRcvPkt
  4637  173A                     _RTXRcvPkt:	
  4638                           
  4639                           ;incstack = 0
  4640                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4641                           ;RTXRcvPkt@dst stored from wreg
  4642  173A  0020               	movlb	0	; select bank0
  4643  173B  00A3               	movwf	RTXRcvPkt@dst
  4644                           
  4645                           ;RTX.c: 131: CC1Read(0x3F,dst,len);
  4646  173C  0823               	movf	RTXRcvPkt@dst,w
  4647  173D  00A1               	movwf	??_RTXRcvPkt
  4648  173E  0821               	movf	??_RTXRcvPkt,w
  4649  173F  00F7               	movwf	?_CC1Read
  4650  1740  0820               	movf	RTXRcvPkt@len,w
  4651  1741  00A2               	movwf	??_RTXRcvPkt+1
  4652  1742  0822               	movf	??_RTXRcvPkt+1,w
  4653  1743  00F8               	movwf	?_CC1Read+1
  4654  1744  303F               	movlw	63
  4655  1745  3188  20E2         	fcall	_CC1Read
  4656  1747  0008               	return
  4657  1748                     __end_of_RTXRcvPkt:	
  4658                           
  4659                           	psect	text19
  4660  1748                     __ptext19:	
  4661 ;; *************** function _RTXStartSendData *****************
  4662 ;; Defined at:
  4663 ;;		line 195 in file "RTX.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;		None
  4668 ;; Return value:  Size  Location     Type
  4669 ;;		None               void
  4670 ;; Registers used:
  4671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;Total ram usage:        0 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    7
  4684 ;; This function calls:
  4685 ;;		_ADCConv
  4686 ;;		_DLYDelay_ms
  4687 ;;		_RTXSendData
  4688 ;; This function is called by:
  4689 ;;		_RTXInit
  4690 ;;		_RTXReadPkt
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           
  4695                           ;psect for function _RTXStartSendData
  4696  1748                     _RTXStartSendData:	
  4697                           
  4698                           ;RTX.c: 197: DLYDelay_ms(100);
  4699                           
  4700                           ;incstack = 0
  4701                           ; Regs used in _RTXStartSendData: [allreg]
  4702  1748  3064               	movlw	100
  4703  1749  00F1               	movwf	?_DLYDelay_ms
  4704  174A  3000               	movlw	0
  4705  174B  00F2               	movwf	?_DLYDelay_ms+1
  4706  174C  3188  207B  3197   	fcall	_DLYDelay_ms
  4707                           
  4708                           ;RTX.c: 199: ADCConv();
  4709  174F  3181  2107  3197   	fcall	_ADCConv
  4710                           
  4711                           ;RTX.c: 201: cntSndData=0;
  4712  1752  0020               	movlb	0	; select bank0
  4713  1753  01E9               	clrf	_cntSndData
  4714                           
  4715                           ;RTX.c: 202: RTXSendData();
  4716  1754  318E  2684         	fcall	_RTXSendData
  4717  1756  0008               	return
  4718  1757                     __end_of_RTXStartSendData:	
  4719                           
  4720                           	psect	text20
  4721  0E84                     __ptext20:	
  4722 ;; *************** function _RTXSendData *****************
  4723 ;; Defined at:
  4724 ;;		line 206 in file "RTX.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;		None
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  valBatt         3   39[BANK0 ] struct _RTX_DATA
  4729 ;;  valTemp         3   36[BANK0 ] struct _RTX_DATA
  4730 ;; Return value:  Size  Location     Type
  4731 ;;		None               void
  4732 ;; Registers used:
  4733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;Total ram usage:        7 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    5
  4746 ;; This function calls:
  4747 ;;		_ADCGetTempCCal
  4748 ;;		_LEDFastFlash
  4749 ;;		_RTXSndPkt
  4750 ;; This function is called by:
  4751 ;;		_RTXTick
  4752 ;;		_RTXStartSendData
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           
  4757                           ;psect for function _RTXSendData
  4758  0E84                     _RTXSendData:	
  4759                           
  4760                           ;RTX.c: 207: tu_RTX_DATA valTemp,valBatt;
  4761                           ;RTX.c: 209: if(pgm_flg.pgmonoff)
  4762                           
  4763                           ;incstack = 0
  4764                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4765  0E84  0020               	movlb	0	; select bank0
  4766  0E85  1C6A               	btfss	_pgm_flg,0
  4767  0E86  2E8D               	goto	l5078
  4768                           
  4769                           ;RTX.c: 210: {
  4770                           ;RTX.c: 212: cntSndData=0;
  4771  0E87  01E9               	clrf	_cntSndData
  4772                           
  4773                           ;RTX.c: 214: tmrRcvPkt=100;
  4774  0E88  3064               	movlw	100
  4775  0E89  00C3               	movwf	??_RTXSendData
  4776  0E8A  0843               	movf	??_RTXSendData,w
  4777  0E8B  00ED               	movwf	_tmrRcvPkt
  4778                           
  4779                           ;RTX.c: 215: }
  4780  0E8C  0008               	return
  4781  0E8D                     l5078:	
  4782                           
  4783                           ;RTX.c: 216: else
  4784                           ;RTX.c: 217: {
  4785                           ;RTX.c: 219: if(cntSndData<5)
  4786  0E8D  3005               	movlw	5
  4787  0E8E  0269               	subwf	_cntSndData,w
  4788  0E8F  1803               	skipnc
  4789  0E90  2EF1               	goto	l526
  4790                           
  4791                           ;RTX.c: 220: {
  4792                           ;RTX.c: 222: if(pgm_cfg.menu)
  4793  0E91  0021               	movlb	1	; select bank1
  4794  0E92  084C               	movf	(_pgm_cfg^(0+128)+2),w
  4795  0E93  1903               	btfsc	3,2
  4796  0E94  2EEB               	goto	l5108
  4797                           
  4798                           ;RTX.c: 223: {
  4799                           ;RTX.c: 225: pktTx[0]=pgm_cfg.baseId;
  4800  0E95  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4801  0E96  0020               	movlb	0	; select bank0
  4802  0E97  00C3               	movwf	??_RTXSendData
  4803  0E98  0843               	movf	??_RTXSendData,w
  4804  0E99  0021               	movlb	1	; select bank1
  4805  0E9A  00C1               	movwf	_pktTx^(0+128)
  4806                           
  4807                           ;RTX.c: 226: pktTx[1]=pgm_cfg.sensId;
  4808  0E9B  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4809  0E9C  0020               	movlb	0	; select bank0
  4810  0E9D  00C3               	movwf	??_RTXSendData
  4811  0E9E  0843               	movf	??_RTXSendData,w
  4812  0E9F  0021               	movlb	1	; select bank1
  4813  0EA0  00C2               	movwf	(_pktTx^(0+128)+1)
  4814                           
  4815                           ;RTX.c: 227: pktTx[2]=DAT;
  4816  0EA1  01C3               	clrf	(_pktTx^(0+128)+2)
  4817                           
  4818                           ;RTX.c: 228: valTemp.val=ADCGetTempCCal();
  4819  0EA2  318C  2412  318E   	fcall	_ADCGetTempCCal
  4820  0EA5  0020               	movlb	0	; select bank0
  4821  0EA6  0840               	movf	?_ADCGetTempCCal,w
  4822  0EA7  00C4               	movwf	RTXSendData@valTemp
  4823  0EA8  0841               	movf	?_ADCGetTempCCal+1,w
  4824  0EA9  00C5               	movwf	RTXSendData@valTemp+1
  4825  0EAA  0842               	movf	?_ADCGetTempCCal+2,w
  4826  0EAB  00C6               	movwf	RTXSendData@valTemp+2
  4827                           
  4828                           ;RTX.c: 229: pktTx[3]=valTemp.val_byte[0];
  4829  0EAC  0844               	movf	RTXSendData@valTemp,w
  4830  0EAD  00C3               	movwf	??_RTXSendData
  4831  0EAE  0843               	movf	??_RTXSendData,w
  4832  0EAF  0021               	movlb	1	; select bank1
  4833  0EB0  00C4               	movwf	(_pktTx^(0+128)+3)
  4834                           
  4835                           ;RTX.c: 230: pktTx[4]=valTemp.val_byte[1];
  4836  0EB1  0020               	movlb	0	; select bank0
  4837  0EB2  0845               	movf	RTXSendData@valTemp+1,w
  4838  0EB3  00C3               	movwf	??_RTXSendData
  4839  0EB4  0843               	movf	??_RTXSendData,w
  4840  0EB5  0021               	movlb	1	; select bank1
  4841  0EB6  00C5               	movwf	(_pktTx^(0+128)+4)
  4842                           
  4843                           ;RTX.c: 231: pktTx[5]=valTemp.val_byte[2];
  4844  0EB7  0020               	movlb	0	; select bank0
  4845  0EB8  0846               	movf	RTXSendData@valTemp+2,w
  4846  0EB9  00C3               	movwf	??_RTXSendData
  4847  0EBA  0843               	movf	??_RTXSendData,w
  4848  0EBB  0021               	movlb	1	; select bank1
  4849  0EBC  00C6               	movwf	(_pktTx^(0+128)+5)
  4850                           
  4851                           ;RTX.c: 232: valBatt.val=battV;
  4852  0EBD  0823               	movf	_battV^(0+128),w
  4853  0EBE  0020               	movlb	0	; select bank0
  4854  0EBF  00C7               	movwf	RTXSendData@valBatt
  4855  0EC0  0021               	movlb	1	; select bank1
  4856  0EC1  0824               	movf	(_battV+1)^(0+128),w
  4857  0EC2  0020               	movlb	0	; select bank0
  4858  0EC3  00C8               	movwf	RTXSendData@valBatt+1
  4859  0EC4  0021               	movlb	1	; select bank1
  4860  0EC5  0825               	movf	(_battV+2)^(0+128),w
  4861  0EC6  0020               	movlb	0	; select bank0
  4862  0EC7  00C9               	movwf	RTXSendData@valBatt+2
  4863                           
  4864                           ;RTX.c: 233: pktTx[6]=valBatt.val_byte[0];
  4865  0EC8  0847               	movf	RTXSendData@valBatt,w
  4866  0EC9  00C3               	movwf	??_RTXSendData
  4867  0ECA  0843               	movf	??_RTXSendData,w
  4868  0ECB  0021               	movlb	1	; select bank1
  4869  0ECC  00C7               	movwf	(_pktTx^(0+128)+6)
  4870                           
  4871                           ;RTX.c: 234: pktTx[7]=valBatt.val_byte[1];
  4872  0ECD  0020               	movlb	0	; select bank0
  4873  0ECE  0848               	movf	RTXSendData@valBatt+1,w
  4874  0ECF  00C3               	movwf	??_RTXSendData
  4875  0ED0  0843               	movf	??_RTXSendData,w
  4876  0ED1  0021               	movlb	1	; select bank1
  4877  0ED2  00C8               	movwf	(_pktTx^(0+128)+7)
  4878                           
  4879                           ;RTX.c: 235: pktTx[8]=valBatt.val_byte[2];
  4880  0ED3  0020               	movlb	0	; select bank0
  4881  0ED4  0849               	movf	RTXSendData@valBatt+2,w
  4882  0ED5  00C3               	movwf	??_RTXSendData
  4883  0ED6  0843               	movf	??_RTXSendData,w
  4884  0ED7  0021               	movlb	1	; select bank1
  4885  0ED8  00C9               	movwf	(_pktTx^(0+128)+8)
  4886                           
  4887                           ;RTX.c: 238: RTXSndPkt(pktTx,0x09);
  4888  0ED9  3009               	movlw	9
  4889  0EDA  0020               	movlb	0	; select bank0
  4890  0EDB  00C3               	movwf	??_RTXSendData
  4891  0EDC  0843               	movf	??_RTXSendData,w
  4892  0EDD  00A2               	movwf	?_RTXSndPkt
  4893  0EDE  30C1               	movlw	_pktTx& (0+255)
  4894  0EDF  318D  2507  318E   	fcall	_RTXSndPkt
  4895                           
  4896                           ;RTX.c: 241: cntSndData++;
  4897  0EE2  3001               	movlw	1
  4898  0EE3  0020               	movlb	0	; select bank0
  4899  0EE4  00C3               	movwf	??_RTXSendData
  4900  0EE5  0843               	movf	??_RTXSendData,w
  4901  0EE6  07E9               	addwf	_cntSndData,f
  4902                           
  4903                           ;RTX.c: 244: LEDFastFlash(1);
  4904  0EE7  3001               	movlw	1
  4905  0EE8  3189  2174         	fcall	_LEDFastFlash
  4906  0EEA  0021               	movlb	1	; select bank1
  4907  0EEB                     l5108:	
  4908                           
  4909                           ;RTX.c: 245: }
  4910                           ;RTX.c: 248: tmrRcvPkt=100;
  4911  0EEB  3064               	movlw	100
  4912  0EEC  0020               	movlb	0	; select bank0
  4913  0EED  00C3               	movwf	??_RTXSendData
  4914  0EEE  0843               	movf	??_RTXSendData,w
  4915  0EEF  00ED               	movwf	_tmrRcvPkt
  4916                           
  4917                           ;RTX.c: 249: }
  4918  0EF0  0008               	return
  4919  0EF1                     l526:	
  4920                           
  4921                           ;RTX.c: 250: else
  4922                           ;RTX.c: 251: flg_slp.goSleep=1;
  4923  0EF1  0021               	movlb	1	; select bank1
  4924  0EF2  142F               	bsf	_flg_slp^(0+128),0
  4925  0EF3  0008               	return
  4926  0EF4                     __end_of_RTXSendData:	
  4927                           
  4928                           	psect	text21
  4929  0D07                     __ptext21:	
  4930 ;; *************** function _RTXSndPkt *****************
  4931 ;; Defined at:
  4932 ;;		line 105 in file "RTX.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;  src             1    wreg     PTR unsigned char 
  4935 ;;		 -> pktTx(9), 
  4936 ;;  len             1    2[BANK0 ] unsigned char 
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  src             1    4[BANK0 ] PTR unsigned char 
  4939 ;;		 -> pktTx(9), 
  4940 ;;  sta             1    7[BANK0 ] unsigned char 
  4941 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4942 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;		None               void
  4945 ;; Registers used:
  4946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;Total ram usage:        6 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    4
  4959 ;; This function calls:
  4960 ;;		_CC1Strobe
  4961 ;;		_CC1Read
  4962 ;;		_CC1Write
  4963 ;; This function is called by:
  4964 ;;		_RTXSendData
  4965 ;;		_RTXSendRPgm
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           
  4970                           ;psect for function _RTXSndPkt
  4971  0D07                     _RTXSndPkt:	
  4972                           
  4973                           ;incstack = 0
  4974                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4975                           ;RTXSndPkt@src stored from wreg
  4976  0D07  0020               	movlb	0	; select bank0
  4977  0D08  00A4               	movwf	RTXSndPkt@src
  4978  0D09                     l499:	
  4979                           ;RTX.c: 106: unsigned char sta,numRxByte,numTxByte;
  4980                           ;RTX.c: 109: do
  4981                           
  4982  0D09  0064               	clrwdt	;# 
  4983                           
  4984                           ;RTX.c: 112: CC1Read(0x35,(&(sta)),1);
  4985  0D0A  3027               	movlw	RTXSndPkt@sta& (0+255)
  4986  0D0B  0020               	movlb	0	; select bank0
  4987  0D0C  00A3               	movwf	??_RTXSndPkt
  4988  0D0D  0823               	movf	??_RTXSndPkt,w
  4989  0D0E  00F7               	movwf	?_CC1Read
  4990  0D0F  01F8               	clrf	?_CC1Read+1
  4991  0D10  0AF8               	incf	?_CC1Read+1,f
  4992  0D11  3035               	movlw	53
  4993  0D12  3188  20E2  318D   	fcall	_CC1Read
  4994                           
  4995                           ;RTX.c: 113: }
  4996                           ;RTX.c: 114: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4997  0D15  301F               	movlw	31
  4998  0D16  0020               	movlb	0	; select bank0
  4999  0D17  0527               	andwf	RTXSndPkt@sta,w
  5000  0D18  00A3               	movwf	??_RTXSndPkt
  5001  0D19  0823               	movf	??_RTXSndPkt,w
  5002  0D1A  3A0D               	xorlw	13
  5003  0D1B  1903               	skipnz
  5004  0D1C  2D24               	goto	l5172
  5005  0D1D  301F               	movlw	31
  5006  0D1E  0527               	andwf	RTXSndPkt@sta,w
  5007  0D1F  00A3               	movwf	??_RTXSndPkt
  5008  0D20  0823               	movf	??_RTXSndPkt,w
  5009  0D21  3A01               	xorlw	1
  5010  0D22  1D03               	skipz
  5011  0D23  2D09               	goto	l499
  5012  0D24                     l5172:	
  5013                           
  5014                           ;RTX.c: 116: CC1Strobe(SIDLE);
  5015  0D24  3036               	movlw	54
  5016  0D25  3197  27D5  318D   	fcall	_CC1Strobe
  5017                           
  5018                           ;RTX.c: 117: CC1Read(0x3B,(&(numRxByte)),1);
  5019  0D28  3025               	movlw	RTXSndPkt@numRxByte& (0+255)
  5020  0D29  0020               	movlb	0	; select bank0
  5021  0D2A  00A3               	movwf	??_RTXSndPkt
  5022  0D2B  0823               	movf	??_RTXSndPkt,w
  5023  0D2C  00F7               	movwf	?_CC1Read
  5024  0D2D  01F8               	clrf	?_CC1Read+1
  5025  0D2E  0AF8               	incf	?_CC1Read+1,f
  5026  0D2F  303B               	movlw	59
  5027  0D30  3188  20E2  318D   	fcall	_CC1Read
  5028                           
  5029                           ;RTX.c: 118: CC1Read(0x3A,(&(numTxByte)),1);
  5030  0D33  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  5031  0D34  0020               	movlb	0	; select bank0
  5032  0D35  00A3               	movwf	??_RTXSndPkt
  5033  0D36  0823               	movf	??_RTXSndPkt,w
  5034  0D37  00F7               	movwf	?_CC1Read
  5035  0D38  01F8               	clrf	?_CC1Read+1
  5036  0D39  0AF8               	incf	?_CC1Read+1,f
  5037  0D3A  303A               	movlw	58
  5038  0D3B  3188  20E2  318D   	fcall	_CC1Read
  5039                           
  5040                           ;RTX.c: 120: CC1Strobe(SFTX);
  5041  0D3E  303B               	movlw	59
  5042  0D3F  3197  27D5  318D   	fcall	_CC1Strobe
  5043                           
  5044                           ;RTX.c: 121: CC1Read(0x3A,(&(numTxByte)),1);
  5045  0D42  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  5046  0D43  0020               	movlb	0	; select bank0
  5047  0D44  00A3               	movwf	??_RTXSndPkt
  5048  0D45  0823               	movf	??_RTXSndPkt,w
  5049  0D46  00F7               	movwf	?_CC1Read
  5050  0D47  01F8               	clrf	?_CC1Read+1
  5051  0D48  0AF8               	incf	?_CC1Read+1,f
  5052  0D49  303A               	movlw	58
  5053  0D4A  3188  20E2  318D   	fcall	_CC1Read
  5054                           
  5055                           ;RTX.c: 123: CC1Write(0x3F,src,len);
  5056  0D4D  0020               	movlb	0	; select bank0
  5057  0D4E  0824               	movf	RTXSndPkt@src,w
  5058  0D4F  00F7               	movwf	?_CC1Write
  5059  0D50  3000               	movlw	0
  5060  0D51  00F8               	movwf	?_CC1Write+1
  5061  0D52  0822               	movf	RTXSndPkt@len,w
  5062  0D53  00A3               	movwf	??_RTXSndPkt
  5063  0D54  0823               	movf	??_RTXSndPkt,w
  5064  0D55  00F9               	movwf	?_CC1Write+2
  5065  0D56  303F               	movlw	63
  5066  0D57  3189  21F5  318D   	fcall	_CC1Write
  5067                           
  5068                           ;RTX.c: 125: CC1Strobe(STX);
  5069  0D5A  3035               	movlw	53
  5070  0D5B  3197  27D5         	fcall	_CC1Strobe
  5071  0D5D  0008               	return
  5072  0D5E                     __end_of_RTXSndPkt:	
  5073                           
  5074                           	psect	text22
  5075  09F5                     __ptext22:	
  5076 ;; *************** function _CC1Write *****************
  5077 ;; Defined at:
  5078 ;;		line 127 in file "CC1.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;  addr            1    wreg     unsigned char 
  5081 ;;  src             2    7[COMMON] PTR unsigned char 
  5082 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
  5083 ;;  len             1    9[COMMON] unsigned char 
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;  addr            1    0[BANK0 ] unsigned char 
  5086 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;		None               void
  5089 ;; Registers used:
  5090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;Total ram usage:        6 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    3
  5103 ;; This function calls:
  5104 ;;		_SPIWrite
  5105 ;; This function is called by:
  5106 ;;		_CC1LoadREG
  5107 ;;		_RTXSndPkt
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           
  5112                           ;psect for function _CC1Write
  5113  09F5                     _CC1Write:	
  5114                           
  5115                           ;incstack = 0
  5116                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5117                           ;CC1Write@addr stored from wreg
  5118  09F5  0020               	movlb	0	; select bank0
  5119  09F6  00A0               	movwf	CC1Write@addr
  5120                           
  5121                           ;CC1.c: 128: unsigned char cc1Addr;
  5122                           ;CC1.c: 131: LATAbits.LATA5=0;
  5123  09F7  0022               	movlb	2	; select bank2
  5124  09F8  128C               	bcf	12,5	;volatile
  5125                           
  5126                           ;CC1.c: 134: cc1Addr=((addr&0b00111111)|0b01000000);
  5127  09F9  0020               	movlb	0	; select bank0
  5128  09FA  0820               	movf	CC1Write@addr,w
  5129  09FB  393F               	andlw	63
  5130  09FC  3840               	iorlw	64
  5131  09FD  00FA               	movwf	??_CC1Write
  5132  09FE  087A               	movf	??_CC1Write,w
  5133  09FF  00A1               	movwf	CC1Write@cc1Addr
  5134                           
  5135                           ;CC1.c: 135: SPIWrite((&(cc1Addr)),1);
  5136  0A00  3021               	movlw	low CC1Write@cc1Addr
  5137  0A01  00F1               	movwf	?_SPIWrite
  5138  0A02  3000               	movlw	high CC1Write@cc1Addr
  5139  0A03  00F2               	movwf	?_SPIWrite+1
  5140  0A04  01F3               	clrf	?_SPIWrite+2
  5141  0A05  0AF3               	incf	?_SPIWrite+2,f
  5142  0A06  3189  211B  3189   	fcall	_SPIWrite
  5143                           
  5144                           ;CC1.c: 138: SPIWrite(src,len);
  5145  0A09  0878               	movf	CC1Write@src+1,w
  5146  0A0A  01F2               	clrf	?_SPIWrite+1
  5147  0A0B  07F2               	addwf	?_SPIWrite+1,f
  5148  0A0C  0877               	movf	CC1Write@src,w
  5149  0A0D  01F1               	clrf	?_SPIWrite
  5150  0A0E  07F1               	addwf	?_SPIWrite,f
  5151  0A0F  0879               	movf	CC1Write@len,w
  5152  0A10  00FA               	movwf	??_CC1Write
  5153  0A11  087A               	movf	??_CC1Write,w
  5154  0A12  00F3               	movwf	?_SPIWrite+2
  5155  0A13  3189  211B         	fcall	_SPIWrite
  5156                           
  5157                           ;CC1.c: 141: LATAbits.LATA5=1;
  5158  0A15  0022               	movlb	2	; select bank2
  5159  0A16  168C               	bsf	12,5	;volatile
  5160  0A17  0008               	return
  5161  0A18                     __end_of_CC1Write:	
  5162                           
  5163                           	psect	text23
  5164  08E2                     __ptext23:	
  5165 ;; *************** function _CC1Read *****************
  5166 ;; Defined at:
  5167 ;;		line 109 in file "CC1.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  addr            1    wreg     unsigned char 
  5170 ;;  dst             1    7[COMMON] PTR unsigned char 
  5171 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5172 ;;		 -> RTXSndPkt@sta(1), 
  5173 ;;  len             1    8[COMMON] unsigned char 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  addr            1   10[COMMON] unsigned char 
  5176 ;;  cc1Addr         1   11[COMMON] unsigned char 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;		None               void
  5179 ;; Registers used:
  5180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;Total ram usage:        5 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    3
  5193 ;; This function calls:
  5194 ;;		_SPIRead
  5195 ;;		_SPIWrite
  5196 ;; This function is called by:
  5197 ;;		_RTXSndPkt
  5198 ;;		_RTXRcvPkt
  5199 ;;		_RTXReadPkt
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _CC1Read
  5205  08E2                     _CC1Read:	
  5206                           
  5207                           ;incstack = 0
  5208                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5209                           ;CC1Read@addr stored from wreg
  5210  08E2  00FA               	movwf	CC1Read@addr
  5211                           
  5212                           ;CC1.c: 110: unsigned char cc1Addr;
  5213                           ;CC1.c: 113: LATAbits.LATA5=0;
  5214  08E3  0022               	movlb	2	; select bank2
  5215  08E4  128C               	bcf	12,5	;volatile
  5216                           
  5217                           ;CC1.c: 116: cc1Addr=((addr&0b00111111)|0b11000000);
  5218  08E5  087A               	movf	CC1Read@addr,w
  5219  08E6  393F               	andlw	63
  5220  08E7  38C0               	iorlw	192
  5221  08E8  00F9               	movwf	??_CC1Read
  5222  08E9  0879               	movf	??_CC1Read,w
  5223  08EA  00FB               	movwf	CC1Read@cc1Addr
  5224                           
  5225                           ;CC1.c: 117: SPIWrite((&(cc1Addr)),1);
  5226  08EB  307B               	movlw	low CC1Read@cc1Addr
  5227  08EC  00F1               	movwf	?_SPIWrite
  5228  08ED  3000               	movlw	high CC1Read@cc1Addr
  5229  08EE  00F2               	movwf	?_SPIWrite+1
  5230  08EF  01F3               	clrf	?_SPIWrite+2
  5231  08F0  0AF3               	incf	?_SPIWrite+2,f
  5232  08F1  3189  211B  3188   	fcall	_SPIWrite
  5233                           
  5234                           ;CC1.c: 120: SPIRead(dst,len);
  5235  08F4  0878               	movf	CC1Read@len,w
  5236  08F5  00F9               	movwf	??_CC1Read
  5237  08F6  0879               	movf	??_CC1Read,w
  5238  08F7  00F1               	movwf	?_SPIRead
  5239  08F8  0877               	movf	CC1Read@dst,w
  5240  08F9  3189  2192         	fcall	_SPIRead
  5241                           
  5242                           ;CC1.c: 123: LATAbits.LATA5=1;
  5243  08FB  0022               	movlb	2	; select bank2
  5244  08FC  168C               	bsf	12,5	;volatile
  5245  08FD  0008               	return
  5246  08FE                     __end_of_CC1Read:	
  5247                           
  5248                           	psect	text24
  5249  0992                     __ptext24:	
  5250 ;; *************** function _SPIRead *****************
  5251 ;; Defined at:
  5252 ;;		line 26 in file "SPI.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  dstPtr          1    wreg     PTR unsigned char 
  5255 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5256 ;;		 -> RTXSndPkt@sta(1), 
  5257 ;;  len             1    1[COMMON] unsigned char 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  5260 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5261 ;;		 -> RTXSndPkt@sta(1), 
  5262 ;;  i               1    5[COMMON] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5272 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;Total ram usage:        5 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; Hardware stack levels required when called:    2
  5279 ;; This function calls:
  5280 ;;		Nothing
  5281 ;; This function is called by:
  5282 ;;		_CC1Read
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           
  5287                           ;psect for function _SPIRead
  5288  0992                     _SPIRead:	
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5292                           ;SPIRead@dstPtr stored from wreg
  5293  0992  00F4               	movwf	SPIRead@dstPtr
  5294                           
  5295                           ;SPI.c: 27: unsigned char i;
  5296                           ;SPI.c: 29: for(i=0;i<len;i++)
  5297  0993  01F5               	clrf	SPIRead@i
  5298  0994                     l4718:	
  5299  0994  0871               	movf	SPIRead@len,w
  5300  0995  0275               	subwf	SPIRead@i,w
  5301  0996  1803               	btfsc	3,0
  5302  0997  0008               	return
  5303                           
  5304                           ;SPI.c: 30: {
  5305                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5306  0998  0020               	movlb	0	; select bank0
  5307  0999  1191               	bcf	17,3	;volatile
  5308                           
  5309                           ;SPI.c: 32: SSPBUF=0xFF;
  5310  099A  30FF               	movlw	255
  5311  099B  0024               	movlb	4	; select bank4
  5312  099C  0091               	movwf	17	;volatile
  5313  099D                     l65:	
  5314                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5315                           
  5316  099D  0020               	movlb	0	; select bank0
  5317  099E  1991               	btfsc	17,3	;volatile
  5318  099F  29A2               	goto	l4714
  5319                           
  5320                           ;SPI.c: 34: _nop();
  5321  09A0  0000               	nop
  5322  09A1  299D               	goto	l65
  5323  09A2                     l4714:	
  5324                           
  5325                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5326  09A2  0024               	movlb	4	; select bank4
  5327  09A3  0811               	movf	17,w	;volatile
  5328  09A4  00F2               	movwf	??_SPIRead
  5329  09A5  0875               	movf	SPIRead@i,w
  5330  09A6  0774               	addwf	SPIRead@dstPtr,w
  5331  09A7  00F3               	movwf	??_SPIRead+1
  5332  09A8  0873               	movf	??_SPIRead+1,w
  5333  09A9  0086               	movwf	6
  5334  09AA  0187               	clrf	7
  5335  09AB  0872               	movf	??_SPIRead,w
  5336  09AC  0081               	movwf	1
  5337  09AD  3001               	movlw	1
  5338  09AE  00F2               	movwf	??_SPIRead
  5339  09AF  0872               	movf	??_SPIRead,w
  5340  09B0  07F5               	addwf	SPIRead@i,f
  5341  09B1  2994               	goto	l4718
  5342  09B2                     __end_of_SPIRead:	
  5343                           
  5344                           	psect	text25
  5345  17D5                     __ptext25:	
  5346 ;; *************** function _CC1Strobe *****************
  5347 ;; Defined at:
  5348 ;;		line 94 in file "CC1.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  e_stb           1    wreg     enum E1829
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  e_stb           1    8[COMMON] enum E1829
  5353 ;;  cc1Stb          1    9[COMMON] unsigned char 
  5354 ;;  i               1    0        unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;		None               void
  5357 ;; Registers used:
  5358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;Total ram usage:        3 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    3
  5371 ;; This function calls:
  5372 ;;		_SPIWrite
  5373 ;; This function is called by:
  5374 ;;		_CC1Init
  5375 ;;		_CC1Sleep
  5376 ;;		_RTXInit
  5377 ;;		_RTXSndPkt
  5378 ;;		_RTXReadPkt
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _CC1Strobe
  5384  17D5                     _CC1Strobe:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5388                           ;CC1Strobe@e_stb stored from wreg
  5389  17D5  00F8               	movwf	CC1Strobe@e_stb
  5390                           
  5391                           ;CC1.c: 95: unsigned char cc1Stb,i;
  5392                           ;CC1.c: 98: LATAbits.LATA5=0;
  5393  17D6  0022               	movlb	2	; select bank2
  5394  17D7  128C               	bcf	12,5	;volatile
  5395                           
  5396                           ;CC1.c: 101: cc1Stb=((e_stb&0b00111111)|0b10000000);
  5397  17D8  0878               	movf	CC1Strobe@e_stb,w
  5398  17D9  393F               	andlw	63
  5399  17DA  3880               	iorlw	128
  5400  17DB  00F7               	movwf	??_CC1Strobe
  5401  17DC  0877               	movf	??_CC1Strobe,w
  5402  17DD  00F9               	movwf	CC1Strobe@cc1Stb
  5403                           
  5404                           ;CC1.c: 102: SPIWrite((&(cc1Stb)),1);
  5405  17DE  3079               	movlw	low CC1Strobe@cc1Stb
  5406  17DF  00F1               	movwf	?_SPIWrite
  5407  17E0  3000               	movlw	high CC1Strobe@cc1Stb
  5408  17E1  00F2               	movwf	?_SPIWrite+1
  5409  17E2  01F3               	clrf	?_SPIWrite+2
  5410  17E3  0AF3               	incf	?_SPIWrite+2,f
  5411  17E4  3189  211B         	fcall	_SPIWrite
  5412                           
  5413                           ;CC1.c: 105: LATAbits.LATA5=1;
  5414  17E6  0022               	movlb	2	; select bank2
  5415  17E7  168C               	bsf	12,5	;volatile
  5416  17E8  0008               	return
  5417  17E9                     __end_of_CC1Strobe:	
  5418                           
  5419                           	psect	text26
  5420  091B                     __ptext26:	
  5421 ;; *************** function _SPIWrite *****************
  5422 ;; Defined at:
  5423 ;;		line 40 in file "SPI.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  5426 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), CC1Write@cc1Addr(1), 
  5427 ;;		 -> CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  5428 ;;  len             1    3[COMMON] unsigned char 
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;  i               1    6[COMMON] unsigned char 
  5431 ;; Return value:  Size  Location     Type
  5432 ;;		None               void
  5433 ;; Registers used:
  5434 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5440 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;Total ram usage:        6 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:    2
  5447 ;; This function calls:
  5448 ;;		Nothing
  5449 ;; This function is called by:
  5450 ;;		_CC1Strobe
  5451 ;;		_CC1Read
  5452 ;;		_CC1Write
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           
  5457                           ;psect for function _SPIWrite
  5458  091B                     _SPIWrite:	
  5459                           
  5460                           ;SPI.c: 41: unsigned char i;
  5461                           ;SPI.c: 43: for(i=0;i<len;i++)
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  5465  091B  01F6               	clrf	SPIWrite@i
  5466  091C                     l4726:	
  5467  091C  0873               	movf	SPIWrite@len,w
  5468  091D  0276               	subwf	SPIWrite@i,w
  5469  091E  1803               	btfsc	3,0
  5470  091F  0008               	return
  5471                           
  5472                           ;SPI.c: 44: {
  5473                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  5474  0920  0020               	movlb	0	; select bank0
  5475  0921  1191               	bcf	17,3	;volatile
  5476                           
  5477                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  5478  0922  0876               	movf	SPIWrite@i,w
  5479  0923  00F4               	movwf	??_SPIWrite
  5480  0924  01F5               	clrf	??_SPIWrite+1
  5481  0925  0874               	movf	??_SPIWrite,w
  5482  0926  0771               	addwf	SPIWrite@srcPtr,w
  5483  0927  0086               	movwf	6
  5484  0928  0875               	movf	??_SPIWrite+1,w
  5485  0929  3D72               	addwfc	SPIWrite@srcPtr+1,w
  5486  092A  0087               	movwf	7
  5487  092B  0801               	movf	1,w
  5488  092C  0024               	movlb	4	; select bank4
  5489  092D  0091               	movwf	17	;volatile
  5490  092E                     l74:	
  5491                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  5492                           
  5493  092E  0020               	movlb	0	; select bank0
  5494  092F  1991               	btfsc	17,3	;volatile
  5495  0930  2933               	goto	l4724
  5496                           
  5497                           ;SPI.c: 48: _nop();
  5498  0931  0000               	nop
  5499  0932  292E               	goto	l74
  5500  0933                     l4724:	
  5501  0933  3001               	movlw	1
  5502  0934  00F4               	movwf	??_SPIWrite
  5503  0935  0874               	movf	??_SPIWrite,w
  5504  0936  07F6               	addwf	SPIWrite@i,f
  5505  0937  291C               	goto	l4726
  5506  0938                     __end_of_SPIWrite:	
  5507                           
  5508                           	psect	text27
  5509  0974                     __ptext27:	
  5510 ;; *************** function _LEDFastFlash *****************
  5511 ;; Defined at:
  5512 ;;		line 39 in file "LED.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  num             1    wreg     unsigned char 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  num             1    8[COMMON] unsigned char 
  5517 ;;  i               1    9[COMMON] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;Total ram usage:        3 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    3
  5534 ;; This function calls:
  5535 ;;		_DLYDelay_ms
  5536 ;; This function is called by:
  5537 ;;		_RTXSendData
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function _LEDFastFlash
  5543  0974                     _LEDFastFlash:	
  5544                           
  5545                           ;incstack = 0
  5546                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  5547                           ;LEDFastFlash@num stored from wreg
  5548  0974  00F8               	movwf	LEDFastFlash@num
  5549                           
  5550                           ;LED.c: 40: unsigned char i;
  5551                           ;LED.c: 42: for(i=0;i<num;i++)
  5552  0975  01F9               	clrf	LEDFastFlash@i
  5553  0976                     l4950:	
  5554  0976  0878               	movf	LEDFastFlash@num,w
  5555  0977  0279               	subwf	LEDFastFlash@i,w
  5556  0978  1803               	btfsc	3,0
  5557  0979  0008               	return
  5558  097A  0064               	clrwdt	;# 
  5559                           
  5560                           ;LED.c: 45: LATCbits.LATC7=0;
  5561  097B  0022               	movlb	2	; select bank2
  5562  097C  138E               	bcf	14,7	;volatile
  5563                           
  5564                           ;LED.c: 46: DLYDelay_ms(5);
  5565  097D  3005               	movlw	5
  5566  097E  00F1               	movwf	?_DLYDelay_ms
  5567  097F  3000               	movlw	0
  5568  0980  00F2               	movwf	?_DLYDelay_ms+1
  5569  0981  3188  207B  3189   	fcall	_DLYDelay_ms
  5570                           
  5571                           ;LED.c: 47: LATCbits.LATC7=1;
  5572  0984  0022               	movlb	2	; select bank2
  5573  0985  178E               	bsf	14,7	;volatile
  5574                           
  5575                           ;LED.c: 48: DLYDelay_ms(5);
  5576  0986  3005               	movlw	5
  5577  0987  00F1               	movwf	?_DLYDelay_ms
  5578  0988  3000               	movlw	0
  5579  0989  00F2               	movwf	?_DLYDelay_ms+1
  5580  098A  3188  207B  3189   	fcall	_DLYDelay_ms
  5581  098D  3001               	movlw	1
  5582  098E  00F7               	movwf	??_LEDFastFlash
  5583  098F  0877               	movf	??_LEDFastFlash,w
  5584  0990  07F9               	addwf	LEDFastFlash@i,f
  5585  0991  2976               	goto	l4950
  5586  0992                     __end_of_LEDFastFlash:	
  5587                           
  5588                           	psect	text28
  5589  0C12                     __ptext28:	
  5590 ;; *************** function _ADCGetTempCCal *****************
  5591 ;; Defined at:
  5592 ;;		line 155 in file "ADC.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;                  3   32[BANK0 ] float 
  5599 ;; Registers used:
  5600 ;;		wreg, status,2, status,0, pclath, cstack
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5606 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5609 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5610 ;;Total ram usage:        3 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    4
  5613 ;; This function calls:
  5614 ;;		___ftadd
  5615 ;;		___ftge
  5616 ;; This function is called by:
  5617 ;;		_RTXSendData
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _ADCGetTempCCal
  5623  0C12                     _ADCGetTempCCal:	
  5624                           
  5625                           ;ADC.c: 156: if(battV>=3)
  5626                           
  5627                           ;incstack = 0
  5628                           ; Regs used in _ADCGetTempCCal: [wreg+status,2+status,0+pclath+cstack]
  5629  0C12  0021               	movlb	1	; select bank1
  5630  0C13  0823               	movf	_battV^(0+128),w
  5631  0C14  00F1               	movwf	?___ftge
  5632  0C15  0824               	movf	(_battV+1)^(0+128),w
  5633  0C16  00F2               	movwf	?___ftge+1
  5634  0C17  0825               	movf	(_battV+2)^(0+128),w
  5635  0C18  00F3               	movwf	?___ftge+2
  5636  0C19  3000               	movlw	0
  5637  0C1A  00F4               	movwf	?___ftge+3
  5638  0C1B  3040               	movlw	64
  5639  0C1C  00F5               	movwf	?___ftge+4
  5640  0C1D  3040               	movlw	64
  5641  0C1E  00F6               	movwf	?___ftge+5
  5642  0C1F  318B  239A  318C   	fcall	___ftge
  5643  0C22  1C03               	btfss	3,0
  5644  0C23  2C41               	goto	l4876
  5645                           
  5646                           ;ADC.c: 157: return (tempC+-108);
  5647  0C24  3000               	movlw	0
  5648  0C25  0020               	movlb	0	; select bank0
  5649  0C26  00B3               	movwf	?___ftadd
  5650  0C27  30D8               	movlw	216
  5651  0C28  00B4               	movwf	?___ftadd+1
  5652  0C29  30C2               	movlw	194
  5653  0C2A  00B5               	movwf	?___ftadd+2
  5654  0C2B  0021               	movlb	1	; select bank1
  5655  0C2C  0826               	movf	_tempC^(0+128),w
  5656  0C2D  0020               	movlb	0	; select bank0
  5657  0C2E  00B6               	movwf	?___ftadd+3
  5658  0C2F  0021               	movlb	1	; select bank1
  5659  0C30  0827               	movf	(_tempC+1)^(0+128),w
  5660  0C31  0020               	movlb	0	; select bank0
  5661  0C32  00B7               	movwf	?___ftadd+4
  5662  0C33  0021               	movlb	1	; select bank1
  5663  0C34  0828               	movf	(_tempC+2)^(0+128),w
  5664  0C35  0020               	movlb	0	; select bank0
  5665  0C36  00B8               	movwf	?___ftadd+5
  5666  0C37  3184  243D         	fcall	___ftadd
  5667  0C39  0020               	movlb	0	; select bank0
  5668  0C3A  0833               	movf	?___ftadd,w
  5669  0C3B  00C0               	movwf	?_ADCGetTempCCal
  5670  0C3C  0834               	movf	?___ftadd+1,w
  5671  0C3D  00C1               	movwf	?_ADCGetTempCCal+1
  5672  0C3E  0835               	movf	?___ftadd+2,w
  5673  0C3F  00C2               	movwf	?_ADCGetTempCCal+2
  5674  0C40  0008               	return
  5675  0C41                     l4876:	
  5676                           
  5677                           ;ADC.c: 158: else
  5678                           ;ADC.c: 159: return (tempC+-102);
  5679  0C41  3000               	movlw	0
  5680  0C42  0020               	movlb	0	; select bank0
  5681  0C43  00B3               	movwf	?___ftadd
  5682  0C44  30CC               	movlw	204
  5683  0C45  00B4               	movwf	?___ftadd+1
  5684  0C46  30C2               	movlw	194
  5685  0C47  00B5               	movwf	?___ftadd+2
  5686  0C48  0021               	movlb	1	; select bank1
  5687  0C49  0826               	movf	_tempC^(0+128),w
  5688  0C4A  0020               	movlb	0	; select bank0
  5689  0C4B  00B6               	movwf	?___ftadd+3
  5690  0C4C  0021               	movlb	1	; select bank1
  5691  0C4D  0827               	movf	(_tempC+1)^(0+128),w
  5692  0C4E  0020               	movlb	0	; select bank0
  5693  0C4F  00B7               	movwf	?___ftadd+4
  5694  0C50  0021               	movlb	1	; select bank1
  5695  0C51  0828               	movf	(_tempC+2)^(0+128),w
  5696  0C52  0020               	movlb	0	; select bank0
  5697  0C53  00B8               	movwf	?___ftadd+5
  5698  0C54  3184  243D         	fcall	___ftadd
  5699  0C56  0020               	movlb	0	; select bank0
  5700  0C57  0833               	movf	?___ftadd,w
  5701  0C58  00C0               	movwf	?_ADCGetTempCCal
  5702  0C59  0834               	movf	?___ftadd+1,w
  5703  0C5A  00C1               	movwf	?_ADCGetTempCCal+1
  5704  0C5B  0835               	movf	?___ftadd+2,w
  5705  0C5C  00C2               	movwf	?_ADCGetTempCCal+2
  5706  0C5D  0008               	return
  5707  0C5E                     __end_of_ADCGetTempCCal:	
  5708                           
  5709                           	psect	text29
  5710  0107                     __ptext29:	
  5711 ;; *************** function _ADCConv *****************
  5712 ;; Defined at:
  5713 ;;		line 58 in file "ADC.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;		None
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  tempV           3   16[BANK1 ] float 
  5718 ;;  Rntc            3    0[BANK1 ] float 
  5719 ;;  sumTemp         2   14[BANK1 ] unsigned short 
  5720 ;;  sumBatt         2   12[BANK1 ] unsigned short 
  5721 ;;  cntSum          1   19[BANK1 ] unsigned char 
  5722 ;; Return value:  Size  Location     Type
  5723 ;;		None               void
  5724 ;; Registers used:
  5725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5732 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5734 ;;      Totals:         0       2      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5735 ;;Total ram usage:       22 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    6
  5738 ;; This function calls:
  5739 ;;		_exp
  5740 ;;		_log
  5741 ;;		___awtoft
  5742 ;;		___ftadd
  5743 ;;		___ftdiv
  5744 ;;		___ftmul
  5745 ;;		___ftneg
  5746 ;;		___lwdiv
  5747 ;; This function is called by:
  5748 ;;		_RTXStartSendData
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           
  5753                           ;psect for function _ADCConv
  5754  0107                     _ADCConv:	
  5755                           
  5756                           ;ADC.c: 64: {
  5757                           ;ADC.c: 66: switch(adc_ch)
  5758                           
  5759                           ;incstack = 0
  5760                           ; Regs used in _ADCConv: [allreg]
  5761                           ;ADC.c: 59: float Rntc,tempV;
  5762                           ;ADC.c: 60: unsigned short sumBatt,sumTemp;
  5763                           ;ADC.c: 61: unsigned char cntSum;
  5764                           ;ADC.c: 63: while(1)
  5765  0107  2B00               	goto	l4786
  5766  0108                     l124:	
  5767                           ;ADC.c: 67: {
  5768                           ;ADC.c: 68: case ADC_CH_OFF:
  5769                           
  5770                           
  5771                           ;ADC.c: 70: LATBbits.LATB5=1;
  5772  0108  0022               	movlb	2	; select bank2
  5773  0109  168D               	bsf	13,5	;volatile
  5774                           
  5775                           ;ADC.c: 72: Rinf=22000*exp(-3600/(25+273.15));
  5776  010A  3031               	movlw	49
  5777  010B  0020               	movlb	0	; select bank0
  5778  010C  00D4               	movwf	?_exp
  5779  010D  3041               	movlw	65
  5780  010E  00D5               	movwf	?_exp+1
  5781  010F  30C1               	movlw	193
  5782  0110  00D6               	movwf	?_exp+2
  5783  0111  3183  2319  3181   	fcall	_exp
  5784  0114  0020               	movlb	0	; select bank0
  5785  0115  0854               	movf	?_exp,w
  5786  0116  0021               	movlb	1	; select bank1
  5787  0117  00D2               	movwf	_ADCConv$1529^(0+128)
  5788  0118  0020               	movlb	0	; select bank0
  5789  0119  0855               	movf	?_exp+1,w
  5790  011A  0021               	movlb	1	; select bank1
  5791  011B  00D3               	movwf	(_ADCConv$1529+1)^(0+128)
  5792  011C  0020               	movlb	0	; select bank0
  5793  011D  0856               	movf	?_exp+2,w
  5794  011E  0021               	movlb	1	; select bank1
  5795  011F  00D4               	movwf	(_ADCConv$1529+2)^(0+128)
  5796                           
  5797                           ;ADC.c: 72: Rinf=22000*exp(-3600/(25+273.15));
  5798  0120  30E0               	movlw	224
  5799  0121  0020               	movlb	0	; select bank0
  5800  0122  00A3               	movwf	?___ftmul
  5801  0123  30AB               	movlw	171
  5802  0124  00A4               	movwf	?___ftmul+1
  5803  0125  3046               	movlw	70
  5804  0126  00A5               	movwf	?___ftmul+2
  5805  0127  0021               	movlb	1	; select bank1
  5806  0128  0852               	movf	_ADCConv$1529^(0+128),w
  5807  0129  0020               	movlb	0	; select bank0
  5808  012A  00A6               	movwf	?___ftmul+3
  5809  012B  0021               	movlb	1	; select bank1
  5810  012C  0853               	movf	(_ADCConv$1529+1)^(0+128),w
  5811  012D  0020               	movlb	0	; select bank0
  5812  012E  00A7               	movwf	?___ftmul+4
  5813  012F  0021               	movlb	1	; select bank1
  5814  0130  0854               	movf	(_ADCConv$1529+2)^(0+128),w
  5815  0131  0020               	movlb	0	; select bank0
  5816  0132  00A8               	movwf	?___ftmul+5
  5817  0133  3185  25F1  3181   	fcall	___ftmul
  5818  0136  0020               	movlb	0	; select bank0
  5819  0137  0823               	movf	?___ftmul,w
  5820  0138  0021               	movlb	1	; select bank1
  5821  0139  00A0               	movwf	_Rinf^(0+128)
  5822  013A  0020               	movlb	0	; select bank0
  5823  013B  0824               	movf	?___ftmul+1,w
  5824  013C  0021               	movlb	1	; select bank1
  5825  013D  00A1               	movwf	(_Rinf+1)^(0+128)
  5826  013E  0020               	movlb	0	; select bank0
  5827  013F  0825               	movf	?___ftmul+2,w
  5828  0140  0021               	movlb	1	; select bank1
  5829  0141  00A2               	movwf	(_Rinf+2)^(0+128)
  5830                           
  5831                           ;ADC.c: 74: sumBatt=0;
  5832  0142  01DB               	clrf	ADCConv@sumBatt^(0+128)
  5833  0143  01DC               	clrf	(ADCConv@sumBatt+1)^(0+128)
  5834                           
  5835                           ;ADC.c: 76: cntSum=0;
  5836  0144  01E2               	clrf	ADCConv@cntSum^(0+128)
  5837                           
  5838                           ;ADC.c: 78: ADCON1=0b00000011;
  5839  0145  3003               	movlw	3
  5840  0146  009E               	movwf	30	;volatile
  5841                           
  5842                           ;ADC.c: 79: ADCON0=0b00101101;
  5843  0147  302D               	movlw	45
  5844  0148  009D               	movwf	29	;volatile
  5845                           
  5846                           ;ADC.c: 80: adc_ch=ADC_CH_BATT;
  5847  0149  01AD               	clrf	_adc_ch^(0+128)
  5848  014A  0AAD               	incf	_adc_ch^(0+128),f
  5849                           
  5850                           ;ADC.c: 81: break;
  5851  014B  2B0C               	goto	l4788
  5852  014C                     l4742:	
  5853                           ;ADC.c: 82: case ADC_CH_BATT:
  5854                           
  5855                           
  5856                           ;ADC.c: 84: if(cntSum==10)
  5857  014C  0862               	movf	ADCConv@cntSum^(0+128),w
  5858  014D  3A0A               	xorlw	10
  5859  014E  1D03               	skipz
  5860  014F  29D3               	goto	l4760
  5861                           
  5862                           ;ADC.c: 85: {
  5863                           ;ADC.c: 87: batt=sumBatt/10;
  5864  0150  300A               	movlw	10
  5865  0151  00F1               	movwf	?___lwdiv
  5866  0152  3000               	movlw	0
  5867  0153  00F2               	movwf	?___lwdiv+1
  5868  0154  085C               	movf	(ADCConv@sumBatt+1)^(0+128),w
  5869  0155  01F4               	clrf	?___lwdiv+3
  5870  0156  07F4               	addwf	?___lwdiv+3,f
  5871  0157  085B               	movf	ADCConv@sumBatt^(0+128),w
  5872  0158  01F3               	clrf	?___lwdiv+2
  5873  0159  07F3               	addwf	?___lwdiv+2,f
  5874  015A  3180  20C9  3181   	fcall	___lwdiv
  5875  015D  0871               	movf	?___lwdiv,w
  5876  015E  0020               	movlb	0	; select bank0
  5877  015F  00E1               	movwf	??_ADCConv
  5878  0160  0861               	movf	??_ADCConv,w
  5879  0161  0021               	movlb	1	; select bank1
  5880  0162  00AE               	movwf	_batt^(0+128)
  5881                           
  5882                           ;ADC.c: 93: battV=batt*4*1.024/1024*11;
  5883  0163  3000               	movlw	0
  5884  0164  0020               	movlb	0	; select bank0
  5885  0165  00C0               	movwf	?___ftdiv
  5886  0166  3080               	movlw	128
  5887  0167  00C1               	movwf	?___ftdiv+1
  5888  0168  3044               	movlw	68
  5889  0169  00C2               	movwf	?___ftdiv+2
  5890  016A  3012               	movlw	18
  5891  016B  00A3               	movwf	?___ftmul
  5892  016C  3083               	movlw	131
  5893  016D  00A4               	movwf	?___ftmul+1
  5894  016E  303F               	movlw	63
  5895  016F  00A5               	movwf	?___ftmul+2
  5896  0170  0021               	movlb	1	; select bank1
  5897  0171  082E               	movf	_batt^(0+128),w
  5898  0172  0020               	movlb	0	; select bank0
  5899  0173  00E1               	movwf	??_ADCConv
  5900  0174  01E2               	clrf	??_ADCConv+1
  5901  0175  35E1               	lslf	??_ADCConv,f
  5902  0176  0DE2               	rlf	??_ADCConv+1,f
  5903  0177  35E1               	lslf	??_ADCConv,f
  5904  0178  0DE2               	rlf	??_ADCConv+1,f
  5905  0179  0861               	movf	??_ADCConv,w
  5906  017A  00F9               	movwf	?___awtoft
  5907  017B  0862               	movf	??_ADCConv+1,w
  5908  017C  00FA               	movwf	?___awtoft+1
  5909  017D  3189  21B2  3181   	fcall	___awtoft
  5910  0180  0879               	movf	?___awtoft,w
  5911  0181  0020               	movlb	0	; select bank0
  5912  0182  00A6               	movwf	?___ftmul+3
  5913  0183  087A               	movf	?___awtoft+1,w
  5914  0184  00A7               	movwf	?___ftmul+4
  5915  0185  087B               	movf	?___awtoft+2,w
  5916  0186  00A8               	movwf	?___ftmul+5
  5917  0187  3185  25F1  3181   	fcall	___ftmul
  5918  018A  0020               	movlb	0	; select bank0
  5919  018B  0823               	movf	?___ftmul,w
  5920  018C  00C3               	movwf	?___ftdiv+3
  5921  018D  0824               	movf	?___ftmul+1,w
  5922  018E  00C4               	movwf	?___ftdiv+4
  5923  018F  0825               	movf	?___ftmul+2,w
  5924  0190  00C5               	movwf	?___ftdiv+5
  5925  0191  3187  2757  3181   	fcall	___ftdiv
  5926  0194  0020               	movlb	0	; select bank0
  5927  0195  0840               	movf	?___ftdiv,w
  5928  0196  0021               	movlb	1	; select bank1
  5929  0197  00D5               	movwf	_ADCConv$1530^(0+128)
  5930  0198  0020               	movlb	0	; select bank0
  5931  0199  0841               	movf	?___ftdiv+1,w
  5932  019A  0021               	movlb	1	; select bank1
  5933  019B  00D6               	movwf	(_ADCConv$1530+1)^(0+128)
  5934  019C  0020               	movlb	0	; select bank0
  5935  019D  0842               	movf	?___ftdiv+2,w
  5936  019E  0021               	movlb	1	; select bank1
  5937  019F  00D7               	movwf	(_ADCConv$1530+2)^(0+128)
  5938                           
  5939                           ;ADC.c: 93: battV=batt*4*1.024/1024*11;
  5940  01A0  3000               	movlw	0
  5941  01A1  0020               	movlb	0	; select bank0
  5942  01A2  00A3               	movwf	?___ftmul
  5943  01A3  3030               	movlw	48
  5944  01A4  00A4               	movwf	?___ftmul+1
  5945  01A5  3041               	movlw	65
  5946  01A6  00A5               	movwf	?___ftmul+2
  5947  01A7  0021               	movlb	1	; select bank1
  5948  01A8  0855               	movf	_ADCConv$1530^(0+128),w
  5949  01A9  0020               	movlb	0	; select bank0
  5950  01AA  00A6               	movwf	?___ftmul+3
  5951  01AB  0021               	movlb	1	; select bank1
  5952  01AC  0856               	movf	(_ADCConv$1530+1)^(0+128),w
  5953  01AD  0020               	movlb	0	; select bank0
  5954  01AE  00A7               	movwf	?___ftmul+4
  5955  01AF  0021               	movlb	1	; select bank1
  5956  01B0  0857               	movf	(_ADCConv$1530+2)^(0+128),w
  5957  01B1  0020               	movlb	0	; select bank0
  5958  01B2  00A8               	movwf	?___ftmul+5
  5959  01B3  3185  25F1  3181   	fcall	___ftmul
  5960  01B6  0020               	movlb	0	; select bank0
  5961  01B7  0823               	movf	?___ftmul,w
  5962  01B8  0021               	movlb	1	; select bank1
  5963  01B9  00A3               	movwf	_battV^(0+128)
  5964  01BA  0020               	movlb	0	; select bank0
  5965  01BB  0824               	movf	?___ftmul+1,w
  5966  01BC  0021               	movlb	1	; select bank1
  5967  01BD  00A4               	movwf	(_battV+1)^(0+128)
  5968  01BE  0020               	movlb	0	; select bank0
  5969  01BF  0825               	movf	?___ftmul+2,w
  5970  01C0  0021               	movlb	1	; select bank1
  5971  01C1  00A5               	movwf	(_battV+2)^(0+128)
  5972                           
  5973                           ;ADC.c: 95: sumTemp=0;
  5974  01C2  01DD               	clrf	ADCConv@sumTemp^(0+128)
  5975  01C3  01DE               	clrf	(ADCConv@sumTemp+1)^(0+128)
  5976                           
  5977                           ;ADC.c: 97: cntSum=0;
  5978  01C4  01E2               	clrf	ADCConv@cntSum^(0+128)
  5979                           
  5980                           ;ADC.c: 99: LATBbits.LATB5=0;
  5981  01C5  0022               	movlb	2	; select bank2
  5982  01C6  128D               	bcf	13,5	;volatile
  5983                           
  5984                           ;ADC.c: 100: LATCbits.LATC6=1;
  5985  01C7  170E               	bsf	14,6	;volatile
  5986                           
  5987                           ;ADC.c: 102: ADCON1=0b00000000;
  5988  01C8  0021               	movlb	1	; select bank1
  5989  01C9  019E               	clrf	30	;volatile
  5990                           
  5991                           ;ADC.c: 103: ADCON0=0b00100101;
  5992  01CA  3025               	movlw	37
  5993  01CB  009D               	movwf	29	;volatile
  5994                           
  5995                           ;ADC.c: 104: adc_ch=ADC_CH_TEMP;
  5996  01CC  3002               	movlw	2
  5997  01CD  0020               	movlb	0	; select bank0
  5998  01CE  00E1               	movwf	??_ADCConv
  5999  01CF  0861               	movf	??_ADCConv,w
  6000  01D0  0021               	movlb	1	; select bank1
  6001  01D1  00AD               	movwf	_adc_ch^(0+128)
  6002                           
  6003                           ;ADC.c: 105: }
  6004  01D2  2B0C               	goto	l4788
  6005  01D3                     l4760:	
  6006                           
  6007                           ;ADC.c: 106: else
  6008                           ;ADC.c: 107: {
  6009                           ;ADC.c: 109: sumBatt+=ADRESH;
  6010  01D3  081C               	movf	28,w	;volatile
  6011  01D4  0020               	movlb	0	; select bank0
  6012  01D5  00E1               	movwf	??_ADCConv
  6013  01D6  01E2               	clrf	??_ADCConv+1
  6014  01D7  0861               	movf	??_ADCConv,w
  6015  01D8  0021               	movlb	1	; select bank1
  6016  01D9  07DB               	addwf	ADCConv@sumBatt^(0+128),f
  6017  01DA  0020               	movlb	0	; select bank0
  6018  01DB  0862               	movf	??_ADCConv+1,w
  6019  01DC  0021               	movlb	1	; select bank1
  6020  01DD  3DDC               	addwfc	(ADCConv@sumBatt+1)^(0+128),f
  6021  01DE  2AF9               	goto	l4782
  6022  01DF                     l4764:	
  6023                           ;ADC.c: 114: case ADC_CH_TEMP:
  6024                           
  6025                           ;ADC.c: 112: }
  6026                           ;ADC.c: 113: break;
  6027                           
  6028                           ;ADC.c: 111: cntSum++;
  6029                           
  6030                           
  6031                           ;ADC.c: 116: if(cntSum==10)
  6032  01DF  0862               	movf	ADCConv@cntSum^(0+128),w
  6033  01E0  3A0A               	xorlw	10
  6034  01E1  1D03               	skipz
  6035  01E2  2AEE               	goto	l4780
  6036                           
  6037                           ;ADC.c: 117: {
  6038                           ;ADC.c: 119: temp=sumTemp/10;
  6039  01E3  300A               	movlw	10
  6040  01E4  00F1               	movwf	?___lwdiv
  6041  01E5  3000               	movlw	0
  6042  01E6  00F2               	movwf	?___lwdiv+1
  6043  01E7  085E               	movf	(ADCConv@sumTemp+1)^(0+128),w
  6044  01E8  01F4               	clrf	?___lwdiv+3
  6045  01E9  07F4               	addwf	?___lwdiv+3,f
  6046  01EA  085D               	movf	ADCConv@sumTemp^(0+128),w
  6047  01EB  01F3               	clrf	?___lwdiv+2
  6048  01EC  07F3               	addwf	?___lwdiv+2,f
  6049  01ED  3180  20C9  3181   	fcall	___lwdiv
  6050  01F0  0871               	movf	?___lwdiv,w
  6051  01F1  0020               	movlb	0	; select bank0
  6052  01F2  00E1               	movwf	??_ADCConv
  6053  01F3  0861               	movf	??_ADCConv,w
  6054  01F4  0021               	movlb	1	; select bank1
  6055  01F5  00B3               	movwf	_temp^(0+128)
  6056                           
  6057                           ;ADC.c: 124: tempV=temp*4*(battV/1024);
  6058  01F6  0823               	movf	_battV^(0+128),w
  6059  01F7  0020               	movlb	0	; select bank0
  6060  01F8  00C3               	movwf	?___ftdiv+3
  6061  01F9  0021               	movlb	1	; select bank1
  6062  01FA  0824               	movf	(_battV+1)^(0+128),w
  6063  01FB  0020               	movlb	0	; select bank0
  6064  01FC  00C4               	movwf	?___ftdiv+4
  6065  01FD  0021               	movlb	1	; select bank1
  6066  01FE  0825               	movf	(_battV+2)^(0+128),w
  6067  01FF  0020               	movlb	0	; select bank0
  6068  0200  00C5               	movwf	?___ftdiv+5
  6069  0201  3000               	movlw	0
  6070  0202  00C0               	movwf	?___ftdiv
  6071  0203  3080               	movlw	128
  6072  0204  00C1               	movwf	?___ftdiv+1
  6073  0205  3044               	movlw	68
  6074  0206  00C2               	movwf	?___ftdiv+2
  6075  0207  3187  2757  3181   	fcall	___ftdiv
  6076  020A  0020               	movlb	0	; select bank0
  6077  020B  0840               	movf	?___ftdiv,w
  6078  020C  00A3               	movwf	?___ftmul
  6079  020D  0841               	movf	?___ftdiv+1,w
  6080  020E  00A4               	movwf	?___ftmul+1
  6081  020F  0842               	movf	?___ftdiv+2,w
  6082  0210  00A5               	movwf	?___ftmul+2
  6083  0211  0021               	movlb	1	; select bank1
  6084  0212  0833               	movf	_temp^(0+128),w
  6085  0213  0020               	movlb	0	; select bank0
  6086  0214  00E1               	movwf	??_ADCConv
  6087  0215  01E2               	clrf	??_ADCConv+1
  6088  0216  35E1               	lslf	??_ADCConv,f
  6089  0217  0DE2               	rlf	??_ADCConv+1,f
  6090  0218  35E1               	lslf	??_ADCConv,f
  6091  0219  0DE2               	rlf	??_ADCConv+1,f
  6092  021A  0861               	movf	??_ADCConv,w
  6093  021B  00F9               	movwf	?___awtoft
  6094  021C  0862               	movf	??_ADCConv+1,w
  6095  021D  00FA               	movwf	?___awtoft+1
  6096  021E  3189  21B2  3181   	fcall	___awtoft
  6097  0221  0879               	movf	?___awtoft,w
  6098  0222  0020               	movlb	0	; select bank0
  6099  0223  00A6               	movwf	?___ftmul+3
  6100  0224  087A               	movf	?___awtoft+1,w
  6101  0225  00A7               	movwf	?___ftmul+4
  6102  0226  087B               	movf	?___awtoft+2,w
  6103  0227  00A8               	movwf	?___ftmul+5
  6104  0228  3185  25F1  3181   	fcall	___ftmul
  6105  022B  0020               	movlb	0	; select bank0
  6106  022C  0823               	movf	?___ftmul,w
  6107  022D  0021               	movlb	1	; select bank1
  6108  022E  00DF               	movwf	ADCConv@tempV^(0+128)
  6109  022F  0020               	movlb	0	; select bank0
  6110  0230  0824               	movf	?___ftmul+1,w
  6111  0231  0021               	movlb	1	; select bank1
  6112  0232  00E0               	movwf	(ADCConv@tempV+1)^(0+128)
  6113  0233  0020               	movlb	0	; select bank0
  6114  0234  0825               	movf	?___ftmul+2,w
  6115  0235  0021               	movlb	1	; select bank1
  6116  0236  00E1               	movwf	(ADCConv@tempV+2)^(0+128)
  6117                           
  6118                           ;ADC.c: 126: Rntc=10000*tempV/(battV-tempV);
  6119  0237  0823               	movf	_battV^(0+128),w
  6120  0238  0020               	movlb	0	; select bank0
  6121  0239  00B3               	movwf	?___ftadd
  6122  023A  0021               	movlb	1	; select bank1
  6123  023B  0824               	movf	(_battV+1)^(0+128),w
  6124  023C  0020               	movlb	0	; select bank0
  6125  023D  00B4               	movwf	?___ftadd+1
  6126  023E  0021               	movlb	1	; select bank1
  6127  023F  0825               	movf	(_battV+2)^(0+128),w
  6128  0240  0020               	movlb	0	; select bank0
  6129  0241  00B5               	movwf	?___ftadd+2
  6130  0242  0021               	movlb	1	; select bank1
  6131  0243  085F               	movf	ADCConv@tempV^(0+128),w
  6132  0244  00F1               	movwf	?___ftneg
  6133  0245  0860               	movf	(ADCConv@tempV+1)^(0+128),w
  6134  0246  00F2               	movwf	?___ftneg+1
  6135  0247  0861               	movf	(ADCConv@tempV+2)^(0+128),w
  6136  0248  00F3               	movwf	?___ftneg+2
  6137  0249  3196  26F6  3181   	fcall	___ftneg
  6138  024C  0871               	movf	?___ftneg,w
  6139  024D  0020               	movlb	0	; select bank0
  6140  024E  00B6               	movwf	?___ftadd+3
  6141  024F  0872               	movf	?___ftneg+1,w
  6142  0250  00B7               	movwf	?___ftadd+4
  6143  0251  0873               	movf	?___ftneg+2,w
  6144  0252  00B8               	movwf	?___ftadd+5
  6145  0253  3184  243D  3181   	fcall	___ftadd
  6146  0256  0020               	movlb	0	; select bank0
  6147  0257  0833               	movf	?___ftadd,w
  6148  0258  00C0               	movwf	?___ftdiv
  6149  0259  0834               	movf	?___ftadd+1,w
  6150  025A  00C1               	movwf	?___ftdiv+1
  6151  025B  0835               	movf	?___ftadd+2,w
  6152  025C  00C2               	movwf	?___ftdiv+2
  6153  025D  3040               	movlw	64
  6154  025E  00A3               	movwf	?___ftmul
  6155  025F  301C               	movlw	28
  6156  0260  00A4               	movwf	?___ftmul+1
  6157  0261  3046               	movlw	70
  6158  0262  00A5               	movwf	?___ftmul+2
  6159  0263  0021               	movlb	1	; select bank1
  6160  0264  085F               	movf	ADCConv@tempV^(0+128),w
  6161  0265  0020               	movlb	0	; select bank0
  6162  0266  00A6               	movwf	?___ftmul+3
  6163  0267  0021               	movlb	1	; select bank1
  6164  0268  0860               	movf	(ADCConv@tempV+1)^(0+128),w
  6165  0269  0020               	movlb	0	; select bank0
  6166  026A  00A7               	movwf	?___ftmul+4
  6167  026B  0021               	movlb	1	; select bank1
  6168  026C  0861               	movf	(ADCConv@tempV+2)^(0+128),w
  6169  026D  0020               	movlb	0	; select bank0
  6170  026E  00A8               	movwf	?___ftmul+5
  6171  026F  3185  25F1  3181   	fcall	___ftmul
  6172  0272  0020               	movlb	0	; select bank0
  6173  0273  0823               	movf	?___ftmul,w
  6174  0274  00C3               	movwf	?___ftdiv+3
  6175  0275  0824               	movf	?___ftmul+1,w
  6176  0276  00C4               	movwf	?___ftdiv+4
  6177  0277  0825               	movf	?___ftmul+2,w
  6178  0278  00C5               	movwf	?___ftdiv+5
  6179  0279  3187  2757  3181   	fcall	___ftdiv
  6180  027C  0020               	movlb	0	; select bank0
  6181  027D  0840               	movf	?___ftdiv,w
  6182  027E  0021               	movlb	1	; select bank1
  6183  027F  00CF               	movwf	ADCConv@Rntc^(0+128)
  6184  0280  0020               	movlb	0	; select bank0
  6185  0281  0841               	movf	?___ftdiv+1,w
  6186  0282  0021               	movlb	1	; select bank1
  6187  0283  00D0               	movwf	(ADCConv@Rntc+1)^(0+128)
  6188  0284  0020               	movlb	0	; select bank0
  6189  0285  0842               	movf	?___ftdiv+2,w
  6190  0286  0021               	movlb	1	; select bank1
  6191  0287  00D1               	movwf	(ADCConv@Rntc+2)^(0+128)
  6192                           
  6193                           ;ADC.c: 128: tempC=3600/log(Rntc/Rinf)-273.15;
  6194  0288  0820               	movf	_Rinf^(0+128),w
  6195  0289  0020               	movlb	0	; select bank0
  6196  028A  00C0               	movwf	?___ftdiv
  6197  028B  0021               	movlb	1	; select bank1
  6198  028C  0821               	movf	(_Rinf+1)^(0+128),w
  6199  028D  0020               	movlb	0	; select bank0
  6200  028E  00C1               	movwf	?___ftdiv+1
  6201  028F  0021               	movlb	1	; select bank1
  6202  0290  0822               	movf	(_Rinf+2)^(0+128),w
  6203  0291  0020               	movlb	0	; select bank0
  6204  0292  00C2               	movwf	?___ftdiv+2
  6205  0293  0021               	movlb	1	; select bank1
  6206  0294  084F               	movf	ADCConv@Rntc^(0+128),w
  6207  0295  0020               	movlb	0	; select bank0
  6208  0296  00C3               	movwf	?___ftdiv+3
  6209  0297  0021               	movlb	1	; select bank1
  6210  0298  0850               	movf	(ADCConv@Rntc+1)^(0+128),w
  6211  0299  0020               	movlb	0	; select bank0
  6212  029A  00C4               	movwf	?___ftdiv+4
  6213  029B  0021               	movlb	1	; select bank1
  6214  029C  0851               	movf	(ADCConv@Rntc+2)^(0+128),w
  6215  029D  0020               	movlb	0	; select bank0
  6216  029E  00C5               	movwf	?___ftdiv+5
  6217  029F  3187  2757  3181   	fcall	___ftdiv
  6218  02A2  0020               	movlb	0	; select bank0
  6219  02A3  0840               	movf	?___ftdiv,w
  6220  02A4  00D0               	movwf	?_log
  6221  02A5  0841               	movf	?___ftdiv+1,w
  6222  02A6  00D1               	movwf	?_log+1
  6223  02A7  0842               	movf	?___ftdiv+2,w
  6224  02A8  00D2               	movwf	?_log+2
  6225  02A9  3186  26A5  3181   	fcall	_log
  6226  02AC  0020               	movlb	0	; select bank0
  6227  02AD  0850               	movf	?_log,w
  6228  02AE  0021               	movlb	1	; select bank1
  6229  02AF  00D8               	movwf	_ADCConv$1531^(0+128)
  6230  02B0  0020               	movlb	0	; select bank0
  6231  02B1  0851               	movf	?_log+1,w
  6232  02B2  0021               	movlb	1	; select bank1
  6233  02B3  00D9               	movwf	(_ADCConv$1531+1)^(0+128)
  6234  02B4  0020               	movlb	0	; select bank0
  6235  02B5  0852               	movf	?_log+2,w
  6236  02B6  0021               	movlb	1	; select bank1
  6237  02B7  00DA               	movwf	(_ADCConv$1531+2)^(0+128)
  6238                           
  6239                           ;ADC.c: 128: tempC=3600/log(Rntc/Rinf)-273.15;
  6240  02B8  3093               	movlw	147
  6241  02B9  0020               	movlb	0	; select bank0
  6242  02BA  00B3               	movwf	?___ftadd
  6243  02BB  3088               	movlw	136
  6244  02BC  00B4               	movwf	?___ftadd+1
  6245  02BD  30C3               	movlw	195
  6246  02BE  00B5               	movwf	?___ftadd+2
  6247  02BF  0021               	movlb	1	; select bank1
  6248  02C0  0858               	movf	_ADCConv$1531^(0+128),w
  6249  02C1  0020               	movlb	0	; select bank0
  6250  02C2  00C0               	movwf	?___ftdiv
  6251  02C3  0021               	movlb	1	; select bank1
  6252  02C4  0859               	movf	(_ADCConv$1531+1)^(0+128),w
  6253  02C5  0020               	movlb	0	; select bank0
  6254  02C6  00C1               	movwf	?___ftdiv+1
  6255  02C7  0021               	movlb	1	; select bank1
  6256  02C8  085A               	movf	(_ADCConv$1531+2)^(0+128),w
  6257  02C9  0020               	movlb	0	; select bank0
  6258  02CA  00C2               	movwf	?___ftdiv+2
  6259  02CB  3000               	movlw	0
  6260  02CC  00C3               	movwf	?___ftdiv+3
  6261  02CD  3061               	movlw	97
  6262  02CE  00C4               	movwf	?___ftdiv+4
  6263  02CF  3045               	movlw	69
  6264  02D0  00C5               	movwf	?___ftdiv+5
  6265  02D1  3187  2757  3181   	fcall	___ftdiv
  6266  02D4  0020               	movlb	0	; select bank0
  6267  02D5  0840               	movf	?___ftdiv,w
  6268  02D6  00B6               	movwf	?___ftadd+3
  6269  02D7  0841               	movf	?___ftdiv+1,w
  6270  02D8  00B7               	movwf	?___ftadd+4
  6271  02D9  0842               	movf	?___ftdiv+2,w
  6272  02DA  00B8               	movwf	?___ftadd+5
  6273  02DB  3184  243D         	fcall	___ftadd
  6274  02DD  0020               	movlb	0	; select bank0
  6275  02DE  0833               	movf	?___ftadd,w
  6276  02DF  0021               	movlb	1	; select bank1
  6277  02E0  00A6               	movwf	_tempC^(0+128)
  6278  02E1  0020               	movlb	0	; select bank0
  6279  02E2  0834               	movf	?___ftadd+1,w
  6280  02E3  0021               	movlb	1	; select bank1
  6281  02E4  00A7               	movwf	(_tempC+1)^(0+128)
  6282  02E5  0020               	movlb	0	; select bank0
  6283  02E6  0835               	movf	?___ftadd+2,w
  6284  02E7  0021               	movlb	1	; select bank1
  6285  02E8  00A8               	movwf	(_tempC+2)^(0+128)
  6286                           
  6287                           ;ADC.c: 130: LATCbits.LATC6=0;
  6288  02E9  0022               	movlb	2	; select bank2
  6289  02EA  130E               	bcf	14,6	;volatile
  6290                           
  6291                           ;ADC.c: 132: adc_ch=ADC_CH_OFF;
  6292  02EB  0021               	movlb	1	; select bank1
  6293  02EC  01AD               	clrf	_adc_ch^(0+128)
  6294                           
  6295                           ;ADC.c: 133: return;
  6296  02ED  0008               	return
  6297  02EE                     l4780:	
  6298                           ;ADC.c: 134: }
  6299                           
  6300                           
  6301                           ;ADC.c: 135: else
  6302                           ;ADC.c: 136: {
  6303                           ;ADC.c: 138: sumTemp+=ADRESH;
  6304  02EE  081C               	movf	28,w	;volatile
  6305  02EF  0020               	movlb	0	; select bank0
  6306  02F0  00E1               	movwf	??_ADCConv
  6307  02F1  01E2               	clrf	??_ADCConv+1
  6308  02F2  0861               	movf	??_ADCConv,w
  6309  02F3  0021               	movlb	1	; select bank1
  6310  02F4  07DD               	addwf	ADCConv@sumTemp^(0+128),f
  6311  02F5  0020               	movlb	0	; select bank0
  6312  02F6  0862               	movf	??_ADCConv+1,w
  6313  02F7  0021               	movlb	1	; select bank1
  6314  02F8  3DDE               	addwfc	(ADCConv@sumTemp+1)^(0+128),f
  6315  02F9                     l4782:	
  6316                           
  6317                           ;ADC.c: 140: cntSum++;
  6318  02F9  3001               	movlw	1
  6319  02FA  0020               	movlb	0	; select bank0
  6320  02FB  00E1               	movwf	??_ADCConv
  6321  02FC  0861               	movf	??_ADCConv,w
  6322  02FD  0021               	movlb	1	; select bank1
  6323  02FE  07E2               	addwf	ADCConv@cntSum^(0+128),f
  6324                           
  6325                           ;ADC.c: 143: }
  6326                           
  6327                           ;ADC.c: 141: }
  6328                           ;ADC.c: 142: break;
  6329  02FF  2B0C               	goto	l4788
  6330  0300                     l4786:	
  6331  0300  0021               	movlb	1	; select bank1
  6332  0301  082D               	movf	_adc_ch^(0+128),w
  6333                           
  6334                           ; Switch size 1, requested type "space"
  6335                           ; Number of cases is 3, Range of values is 0 to 2
  6336                           ; switch strategies available:
  6337                           ; Name         Instructions Cycles
  6338                           ; simple_byte           10     6 (average)
  6339                           ; direct_byte           12     6 (fixed)
  6340                           ; jumptable            260     6 (fixed)
  6341                           ;	Chosen strategy is simple_byte
  6342  0302  3A00               	xorlw	0	; case 0
  6343  0303  1903               	skipnz
  6344  0304  2908               	goto	l124
  6345  0305  3A01               	xorlw	1	; case 1
  6346  0306  1903               	skipnz
  6347  0307  294C               	goto	l4742
  6348  0308  3A03               	xorlw	3	; case 2
  6349  0309  1903               	skipnz
  6350  030A  29DF               	goto	l4764
  6351  030B  2B0C               	goto	l4788
  6352  030C                     l4788:	
  6353                           
  6354                           ;ADC.c: 145: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6355  030C  3006               	movlw	6
  6356  030D  0020               	movlb	0	; select bank0
  6357  030E  00E1               	movwf	??_ADCConv
  6358  030F                     u4457:	
  6359  030F  0BE1               	decfsz	??_ADCConv,f
  6360  0310  2B0F               	goto	u4457
  6361  0311  0000               	nop
  6362                           
  6363                           ;ADC.c: 147: ADCON0bits.GO=1;
  6364  0312  0021               	movlb	1	; select bank1
  6365  0313  149D               	bsf	29,1	;volatile
  6366  0314                     l133:	
  6367                           ;ADC.c: 149: while(ADCON0bits.GO)
  6368                           
  6369  0314  0021               	movlb	1	; select bank1
  6370  0315  1C9D               	btfss	29,1	;volatile
  6371  0316  2B00               	goto	l4786
  6372  0317  0064               	clrwdt	;# 
  6373  0318  2B14               	goto	l133
  6374  0319                     __end_of_ADCConv:	
  6375                           
  6376                           	psect	text30
  6377  00C9                     __ptext30:	
  6378 ;; *************** function ___lwdiv *****************
  6379 ;; Defined at:
  6380 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  divisor         2    1[COMMON] unsigned int 
  6383 ;;  dividend        2    3[COMMON] unsigned int 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  quotient        2    6[COMMON] unsigned int 
  6386 ;;  counter         1    8[COMMON] unsigned char 
  6387 ;; Return value:  Size  Location     Type
  6388 ;;                  2    1[COMMON] unsigned int 
  6389 ;; Registers used:
  6390 ;;		wreg, status,2, status,0
  6391 ;; Tracked objects:
  6392 ;;		On entry : 0/0
  6393 ;;		On exit  : 0/0
  6394 ;;		Unchanged: 0/0
  6395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6396 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;Total ram usage:        8 bytes
  6401 ;; Hardware stack levels used:    1
  6402 ;; Hardware stack levels required when called:    2
  6403 ;; This function calls:
  6404 ;;		Nothing
  6405 ;; This function is called by:
  6406 ;;		_ADCConv
  6407 ;; This function uses a non-reentrant model
  6408 ;;
  6409                           
  6410                           
  6411                           ;psect for function ___lwdiv
  6412  00C9                     ___lwdiv:	
  6413                           
  6414                           ;incstack = 0
  6415                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6416  00C9  01F6               	clrf	___lwdiv@quotient
  6417  00CA  01F7               	clrf	___lwdiv@quotient+1
  6418  00CB  0872               	movf	___lwdiv@divisor+1,w
  6419  00CC  0471               	iorwf	___lwdiv@divisor,w
  6420  00CD  1903               	skipnz
  6421  00CE  28F8               	goto	l4608
  6422  00CF  01F8               	clrf	___lwdiv@counter
  6423  00D0  0AF8               	incf	___lwdiv@counter,f
  6424  00D1                     l4596:	
  6425  00D1  1BF2               	btfsc	___lwdiv@divisor+1,7
  6426  00D2  28DD               	goto	l4598
  6427  00D3  3001               	movlw	1
  6428  00D4                     u3265:	
  6429  00D4  35F1               	lslf	___lwdiv@divisor,f
  6430  00D5  0DF2               	rlf	___lwdiv@divisor+1,f
  6431  00D6  0B89               	decfsz	9,f
  6432  00D7  28D4               	goto	u3265
  6433  00D8  3001               	movlw	1
  6434  00D9  00F5               	movwf	??___lwdiv
  6435  00DA  0875               	movf	??___lwdiv,w
  6436  00DB  07F8               	addwf	___lwdiv@counter,f
  6437  00DC  28D1               	goto	l4596
  6438  00DD                     l4598:	
  6439  00DD  3001               	movlw	1
  6440  00DE                     u3285:	
  6441  00DE  35F6               	lslf	___lwdiv@quotient,f
  6442  00DF  0DF7               	rlf	___lwdiv@quotient+1,f
  6443  00E0  0B89               	decfsz	9,f
  6444  00E1  28DE               	goto	u3285
  6445  00E2  0872               	movf	___lwdiv@divisor+1,w
  6446  00E3  0274               	subwf	___lwdiv@dividend+1,w
  6447  00E4  1D03               	skipz
  6448  00E5  28E8               	goto	u3295
  6449  00E6  0871               	movf	___lwdiv@divisor,w
  6450  00E7  0273               	subwf	___lwdiv@dividend,w
  6451  00E8                     u3295:	
  6452  00E8  1C03               	skipc
  6453  00E9  28EF               	goto	l4604
  6454  00EA  0871               	movf	___lwdiv@divisor,w
  6455  00EB  02F3               	subwf	___lwdiv@dividend,f
  6456  00EC  0872               	movf	___lwdiv@divisor+1,w
  6457  00ED  3BF4               	subwfb	___lwdiv@dividend+1,f
  6458  00EE  1476               	bsf	___lwdiv@quotient,0
  6459  00EF                     l4604:	
  6460  00EF  3001               	movlw	1
  6461  00F0                     u3305:	
  6462  00F0  36F2               	lsrf	___lwdiv@divisor+1,f
  6463  00F1  0CF1               	rrf	___lwdiv@divisor,f
  6464  00F2  0B89               	decfsz	9,f
  6465  00F3  28F0               	goto	u3305
  6466  00F4  3001               	movlw	1
  6467  00F5  02F8               	subwf	___lwdiv@counter,f
  6468  00F6  1D03               	btfss	3,2
  6469  00F7  28DD               	goto	l4598
  6470  00F8                     l4608:	
  6471  00F8  0877               	movf	___lwdiv@quotient+1,w
  6472  00F9  01F2               	clrf	?___lwdiv+1
  6473  00FA  07F2               	addwf	?___lwdiv+1,f
  6474  00FB  0876               	movf	___lwdiv@quotient,w
  6475  00FC  01F1               	clrf	?___lwdiv
  6476  00FD  07F1               	addwf	?___lwdiv,f
  6477  00FE  0008               	return
  6478  00FF                     __end_of___lwdiv:	
  6479                           
  6480                           	psect	text31
  6481  06A5                     __ptext31:	
  6482 ;; *************** function _log *****************
  6483 ;; Defined at:
  6484 ;;		line 6 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\log.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;  x               3   48[BANK0 ] unsigned int 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  exponent        2   52[BANK0 ] int 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  3   48[BANK0 ] int 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6493 ;; Tracked objects:
  6494 ;;		On entry : 0/0
  6495 ;;		On exit  : 0/0
  6496 ;;		Unchanged: 0/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6498 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;Total ram usage:        6 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    5
  6505 ;; This function calls:
  6506 ;;		___awtoft
  6507 ;;		_eval_poly
  6508 ;;		_frexp
  6509 ;;		___ftadd
  6510 ;;		___ftge
  6511 ;;		___ftmul
  6512 ;; This function is called by:
  6513 ;;		_ADCConv
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function _log
  6519  06A5                     _log:	
  6520                           
  6521                           ;incstack = 0
  6522                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6523  06A5  0020               	movlb	0	; select bank0
  6524  06A6  0850               	movf	log@x,w
  6525  06A7  00F1               	movwf	?___ftge
  6526  06A8  0851               	movf	log@x+1,w
  6527  06A9  00F2               	movwf	?___ftge+1
  6528  06AA  0852               	movf	log@x+2,w
  6529  06AB  00F3               	movwf	?___ftge+2
  6530  06AC  3000               	movlw	0
  6531  06AD  00F4               	movwf	?___ftge+3
  6532  06AE  3000               	movlw	0
  6533  06AF  00F5               	movwf	?___ftge+4
  6534  06B0  3000               	movlw	0
  6535  06B1  00F6               	movwf	?___ftge+5
  6536  06B2  318B  239A  3186   	fcall	___ftge
  6537  06B5  1803               	btfsc	3,0
  6538  06B6  2EC4               	goto	l4852
  6539  06B7  3021               	movlw	33
  6540  06B8  0021               	movlb	1	; select bank1
  6541  06B9  00A9               	movwf	_errno^(0+128)
  6542  06BA  3000               	movlw	0
  6543  06BB  00AA               	movwf	(_errno^(0+128)+1)
  6544  06BC  3000               	movlw	0
  6545  06BD  0020               	movlb	0	; select bank0
  6546  06BE  00D0               	movwf	?_log
  6547  06BF  3000               	movlw	0
  6548  06C0  00D1               	movwf	?_log+1
  6549  06C1  3000               	movlw	0
  6550  06C2  00D2               	movwf	?_log+2
  6551  06C3  0008               	return
  6552  06C4                     l4852:	
  6553  06C4  0020               	movlb	0	; select bank0
  6554  06C5  0852               	movf	log@x+2,w
  6555  06C6  0451               	iorwf	log@x+1,w
  6556  06C7  0450               	iorwf	log@x,w
  6557  06C8  1D03               	skipz
  6558  06C9  2ED7               	goto	l4858
  6559  06CA  3022               	movlw	34
  6560  06CB  0021               	movlb	1	; select bank1
  6561  06CC  00A9               	movwf	_errno^(0+128)
  6562  06CD  3000               	movlw	0
  6563  06CE  00AA               	movwf	(_errno^(0+128)+1)
  6564  06CF  3000               	movlw	0
  6565  06D0  0020               	movlb	0	; select bank0
  6566  06D1  00D0               	movwf	?_log
  6567  06D2  3000               	movlw	0
  6568  06D3  00D1               	movwf	?_log+1
  6569  06D4  3000               	movlw	0
  6570  06D5  00D2               	movwf	?_log+2
  6571  06D6  0008               	return
  6572  06D7                     l4858:	
  6573  06D7  3000               	movlw	0
  6574  06D8  00B3               	movwf	?___ftadd
  6575  06D9  3080               	movlw	128
  6576  06DA  00B4               	movwf	?___ftadd+1
  6577  06DB  30BF               	movlw	191
  6578  06DC  00B5               	movwf	?___ftadd+2
  6579  06DD  3000               	movlw	0
  6580  06DE  00A3               	movwf	?___ftmul
  6581  06DF  3000               	movlw	0
  6582  06E0  00A4               	movwf	?___ftmul+1
  6583  06E1  3040               	movlw	64
  6584  06E2  00A5               	movwf	?___ftmul+2
  6585  06E3  3054               	movlw	log@exponent& (0+255)
  6586  06E4  00D3               	movwf	??_log
  6587  06E5  0853               	movf	??_log,w
  6588  06E6  00F4               	movwf	?_frexp+3
  6589  06E7  0850               	movf	log@x,w
  6590  06E8  00F1               	movwf	?_frexp
  6591  06E9  0851               	movf	log@x+1,w
  6592  06EA  00F2               	movwf	?_frexp+1
  6593  06EB  0852               	movf	log@x+2,w
  6594  06EC  00F3               	movwf	?_frexp+2
  6595  06ED  318B  235F  3186   	fcall	_frexp
  6596  06F0  0871               	movf	?_frexp,w
  6597  06F1  0020               	movlb	0	; select bank0
  6598  06F2  00A6               	movwf	?___ftmul+3
  6599  06F3  0872               	movf	?_frexp+1,w
  6600  06F4  00A7               	movwf	?___ftmul+4
  6601  06F5  0873               	movf	?_frexp+2,w
  6602  06F6  00A8               	movwf	?___ftmul+5
  6603  06F7  3185  25F1  3186   	fcall	___ftmul
  6604  06FA  0020               	movlb	0	; select bank0
  6605  06FB  0823               	movf	?___ftmul,w
  6606  06FC  00B6               	movwf	?___ftadd+3
  6607  06FD  0824               	movf	?___ftmul+1,w
  6608  06FE  00B7               	movwf	?___ftadd+4
  6609  06FF  0825               	movf	?___ftmul+2,w
  6610  0700  00B8               	movwf	?___ftadd+5
  6611  0701  3184  243D  3186   	fcall	___ftadd
  6612  0704  0020               	movlb	0	; select bank0
  6613  0705  0833               	movf	?___ftadd,w
  6614  0706  00D0               	movwf	log@x
  6615  0707  0834               	movf	?___ftadd+1,w
  6616  0708  00D1               	movwf	log@x+1
  6617  0709  0835               	movf	?___ftadd+2,w
  6618  070A  00D2               	movwf	log@x+2
  6619  070B  30FF               	movlw	255
  6620  070C  07D4               	addwf	log@exponent,f
  6621  070D  30FF               	movlw	255
  6622  070E  3DD5               	addwfc	log@exponent+1,f
  6623  070F  0850               	movf	log@x,w
  6624  0710  00C0               	movwf	?_eval_poly
  6625  0711  0851               	movf	log@x+1,w
  6626  0712  00C1               	movwf	?_eval_poly+1
  6627  0713  0852               	movf	log@x+2,w
  6628  0714  00C2               	movwf	?_eval_poly+2
  6629  0715  301F               	movlw	(log@coeff| (0+32768))& (0+255)
  6630  0716  00D3               	movwf	??_log
  6631  0717  0853               	movf	??_log,w
  6632  0718  00C3               	movwf	?_eval_poly+3
  6633  0719  3008               	movlw	8
  6634  071A  00C4               	movwf	?_eval_poly+4
  6635  071B  3000               	movlw	0
  6636  071C  00C5               	movwf	?_eval_poly+5
  6637  071D  318D  255E  3186   	fcall	_eval_poly
  6638  0720  0020               	movlb	0	; select bank0
  6639  0721  0840               	movf	?_eval_poly,w
  6640  0722  00D0               	movwf	log@x
  6641  0723  0841               	movf	?_eval_poly+1,w
  6642  0724  00D1               	movwf	log@x+1
  6643  0725  0842               	movf	?_eval_poly+2,w
  6644  0726  00D2               	movwf	log@x+2
  6645  0727  0850               	movf	log@x,w
  6646  0728  00B3               	movwf	?___ftadd
  6647  0729  0851               	movf	log@x+1,w
  6648  072A  00B4               	movwf	?___ftadd+1
  6649  072B  0852               	movf	log@x+2,w
  6650  072C  00B5               	movwf	?___ftadd+2
  6651  072D  3072               	movlw	114
  6652  072E  00A3               	movwf	?___ftmul
  6653  072F  3031               	movlw	49
  6654  0730  00A4               	movwf	?___ftmul+1
  6655  0731  303F               	movlw	63
  6656  0732  00A5               	movwf	?___ftmul+2
  6657  0733  0855               	movf	log@exponent+1,w
  6658  0734  01FA               	clrf	?___awtoft+1
  6659  0735  07FA               	addwf	?___awtoft+1,f
  6660  0736  0854               	movf	log@exponent,w
  6661  0737  01F9               	clrf	?___awtoft
  6662  0738  07F9               	addwf	?___awtoft,f
  6663  0739  3189  21B2  3186   	fcall	___awtoft
  6664  073C  0879               	movf	?___awtoft,w
  6665  073D  0020               	movlb	0	; select bank0
  6666  073E  00A6               	movwf	?___ftmul+3
  6667  073F  087A               	movf	?___awtoft+1,w
  6668  0740  00A7               	movwf	?___ftmul+4
  6669  0741  087B               	movf	?___awtoft+2,w
  6670  0742  00A8               	movwf	?___ftmul+5
  6671  0743  3185  25F1  3186   	fcall	___ftmul
  6672  0746  0020               	movlb	0	; select bank0
  6673  0747  0823               	movf	?___ftmul,w
  6674  0748  00B6               	movwf	?___ftadd+3
  6675  0749  0824               	movf	?___ftmul+1,w
  6676  074A  00B7               	movwf	?___ftadd+4
  6677  074B  0825               	movf	?___ftmul+2,w
  6678  074C  00B8               	movwf	?___ftadd+5
  6679  074D  3184  243D         	fcall	___ftadd
  6680  074F  0020               	movlb	0	; select bank0
  6681  0750  0833               	movf	?___ftadd,w
  6682  0751  00D0               	movwf	?_log
  6683  0752  0834               	movf	?___ftadd+1,w
  6684  0753  00D1               	movwf	?_log+1
  6685  0754  0835               	movf	?___ftadd+2,w
  6686  0755  00D2               	movwf	?_log+2
  6687  0756  0008               	return
  6688  0757                     __end_of_log:	
  6689                           
  6690                           	psect	text32
  6691  0319                     __ptext32:	
  6692 ;; *************** function _exp *****************
  6693 ;; Defined at:
  6694 ;;		line 13 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\exp.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  x               3   52[BANK0 ] int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  exponent        2   62[BANK0 ] int 
  6699 ;;  sign            1   64[BANK0 ] unsigned char 
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  3   52[BANK0 ] unsigned char 
  6702 ;; Registers used:
  6703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6709 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6710 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;Total ram usage:       13 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    5
  6716 ;; This function calls:
  6717 ;;		___awtoft
  6718 ;;		_floor
  6719 ;;		_eval_poly
  6720 ;;		_ldexp
  6721 ;;		___ftdiv
  6722 ;;		___ftge
  6723 ;;		___ftmul
  6724 ;;		___ftneg
  6725 ;;		___ftsub
  6726 ;;		___fttol
  6727 ;; This function is called by:
  6728 ;;		_ADCConv
  6729 ;; This function uses a non-reentrant model
  6730 ;;
  6731                           
  6732                           
  6733                           ;psect for function _exp
  6734  0319                     _exp:	
  6735                           
  6736                           ;incstack = 0
  6737                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  6738  0319  0020               	movlb	0	; select bank0
  6739  031A  0856               	movf	exp@x+2,w
  6740  031B  0455               	iorwf	exp@x+1,w
  6741  031C  0454               	iorwf	exp@x,w
  6742  031D  1D03               	skipz
  6743  031E  2B26               	goto	l4798
  6744  031F  3000               	movlw	0
  6745  0320  00D4               	movwf	?_exp
  6746  0321  3080               	movlw	128
  6747  0322  00D5               	movwf	?_exp+1
  6748  0323  303F               	movlw	63
  6749  0324  00D6               	movwf	?_exp+2
  6750  0325  0008               	return
  6751  0326                     l4798:	
  6752  0326  3072               	movlw	114
  6753  0327  00F1               	movwf	?___ftge
  6754  0328  3031               	movlw	49
  6755  0329  00F2               	movwf	?___ftge+1
  6756  032A  3044               	movlw	68
  6757  032B  00F3               	movwf	?___ftge+2
  6758  032C  0854               	movf	exp@x,w
  6759  032D  00F4               	movwf	?___ftge+3
  6760  032E  0855               	movf	exp@x+1,w
  6761  032F  00F5               	movwf	?___ftge+4
  6762  0330  0856               	movf	exp@x+2,w
  6763  0331  00F6               	movwf	?___ftge+5
  6764  0332  318B  239A  3183   	fcall	___ftge
  6765  0335  1803               	btfsc	3,0
  6766  0336  2B44               	goto	l4808
  6767  0337  3022               	movlw	34
  6768  0338  0021               	movlb	1	; select bank1
  6769  0339  00A9               	movwf	_errno^(0+128)
  6770  033A  3000               	movlw	0
  6771  033B  00AA               	movwf	(_errno^(0+128)+1)
  6772  033C  30FF               	movlw	255
  6773  033D  0020               	movlb	0	; select bank0
  6774  033E  00D4               	movwf	?_exp
  6775  033F  307F               	movlw	127
  6776  0340  00D5               	movwf	?_exp+1
  6777  0341  307F               	movlw	127
  6778  0342  00D6               	movwf	?_exp+2
  6779  0343  0008               	return
  6780  0344                     l4808:	
  6781  0344  0020               	movlb	0	; select bank0
  6782  0345  0854               	movf	exp@x,w
  6783  0346  00F1               	movwf	?___ftge
  6784  0347  0855               	movf	exp@x+1,w
  6785  0348  00F2               	movwf	?___ftge+1
  6786  0349  0856               	movf	exp@x+2,w
  6787  034A  00F3               	movwf	?___ftge+2
  6788  034B  3049               	movlw	73
  6789  034C  00F4               	movwf	?___ftge+3
  6790  034D  303A               	movlw	58
  6791  034E  00F5               	movwf	?___ftge+4
  6792  034F  30C4               	movlw	196
  6793  0350  00F6               	movwf	?___ftge+5
  6794  0351  318B  239A  3183   	fcall	___ftge
  6795  0354  1803               	btfsc	3,0
  6796  0355  2B63               	goto	l4814
  6797  0356  3022               	movlw	34
  6798  0357  0021               	movlb	1	; select bank1
  6799  0358  00A9               	movwf	_errno^(0+128)
  6800  0359  3000               	movlw	0
  6801  035A  00AA               	movwf	(_errno^(0+128)+1)
  6802  035B  3000               	movlw	0
  6803  035C  0020               	movlb	0	; select bank0
  6804  035D  00D4               	movwf	?_exp
  6805  035E  3000               	movlw	0
  6806  035F  00D5               	movwf	?_exp+1
  6807  0360  3000               	movlw	0
  6808  0361  00D6               	movwf	?_exp+2
  6809  0362  0008               	return
  6810  0363                     l4814:	
  6811  0363  0020               	movlb	0	; select bank0
  6812  0364  0854               	movf	exp@x,w
  6813  0365  00F1               	movwf	?___ftge
  6814  0366  0855               	movf	exp@x+1,w
  6815  0367  00F2               	movwf	?___ftge+1
  6816  0368  0856               	movf	exp@x+2,w
  6817  0369  00F3               	movwf	?___ftge+2
  6818  036A  3000               	movlw	0
  6819  036B  00F4               	movwf	?___ftge+3
  6820  036C  3000               	movlw	0
  6821  036D  00F5               	movwf	?___ftge+4
  6822  036E  3000               	movlw	0
  6823  036F  00F6               	movwf	?___ftge+5
  6824  0370  318B  239A  3183   	fcall	___ftge
  6825  0373  3000               	movlw	0
  6826  0374  1C03               	btfss	3,0
  6827  0375  3001               	movlw	1
  6828  0376  0020               	movlb	0	; select bank0
  6829  0377  00D7               	movwf	??_exp
  6830  0378  0857               	movf	??_exp,w
  6831  0379  00E0               	movwf	exp@sign
  6832  037A  0860               	movf	exp@sign,w
  6833  037B  1903               	btfsc	3,2
  6834  037C  2B8D               	goto	l4820
  6835  037D  0854               	movf	exp@x,w
  6836  037E  00F1               	movwf	?___ftneg
  6837  037F  0855               	movf	exp@x+1,w
  6838  0380  00F2               	movwf	?___ftneg+1
  6839  0381  0856               	movf	exp@x+2,w
  6840  0382  00F3               	movwf	?___ftneg+2
  6841  0383  3196  26F6  3183   	fcall	___ftneg
  6842  0386  0871               	movf	?___ftneg,w
  6843  0387  0020               	movlb	0	; select bank0
  6844  0388  00D4               	movwf	exp@x
  6845  0389  0872               	movf	?___ftneg+1,w
  6846  038A  00D5               	movwf	exp@x+1
  6847  038B  0873               	movf	?___ftneg+2,w
  6848  038C  00D6               	movwf	exp@x+2
  6849  038D                     l4820:	
  6850  038D  30AA               	movlw	170
  6851  038E  00A3               	movwf	?___ftmul
  6852  038F  30B8               	movlw	184
  6853  0390  00A4               	movwf	?___ftmul+1
  6854  0391  303F               	movlw	63
  6855  0392  00A5               	movwf	?___ftmul+2
  6856  0393  0854               	movf	exp@x,w
  6857  0394  00A6               	movwf	?___ftmul+3
  6858  0395  0855               	movf	exp@x+1,w
  6859  0396  00A7               	movwf	?___ftmul+4
  6860  0397  0856               	movf	exp@x+2,w
  6861  0398  00A8               	movwf	?___ftmul+5
  6862  0399  3185  25F1  3183   	fcall	___ftmul
  6863  039C  0020               	movlb	0	; select bank0
  6864  039D  0823               	movf	?___ftmul,w
  6865  039E  00D4               	movwf	exp@x
  6866  039F  0824               	movf	?___ftmul+1,w
  6867  03A0  00D5               	movwf	exp@x+1
  6868  03A1  0825               	movf	?___ftmul+2,w
  6869  03A2  00D6               	movwf	exp@x+2
  6870  03A3  0854               	movf	exp@x,w
  6871  03A4  00C0               	movwf	?_floor
  6872  03A5  0855               	movf	exp@x+1,w
  6873  03A6  00C1               	movwf	?_floor+1
  6874  03A7  0856               	movf	exp@x+2,w
  6875  03A8  00C2               	movwf	?_floor+2
  6876  03A9  318E  26F4  3183   	fcall	_floor
  6877  03AC  0020               	movlb	0	; select bank0
  6878  03AD  0840               	movf	?_floor,w
  6879  03AE  00D8               	movwf	_exp$1532
  6880  03AF  0841               	movf	?_floor+1,w
  6881  03B0  00D9               	movwf	_exp$1532+1
  6882  03B1  0842               	movf	?_floor+2,w
  6883  03B2  00DA               	movwf	_exp$1532+2
  6884  03B3  0858               	movf	_exp$1532,w
  6885  03B4  00F1               	movwf	?___fttol
  6886  03B5  0859               	movf	_exp$1532+1,w
  6887  03B6  00F2               	movwf	?___fttol+1
  6888  03B7  085A               	movf	_exp$1532+2,w
  6889  03B8  00F3               	movwf	?___fttol+2
  6890  03B9  318F  2779  3183   	fcall	___fttol
  6891  03BC  0872               	movf	?___fttol+1,w
  6892  03BD  0020               	movlb	0	; select bank0
  6893  03BE  01DF               	clrf	exp@exponent+1
  6894  03BF  07DF               	addwf	exp@exponent+1,f
  6895  03C0  0871               	movf	?___fttol,w
  6896  03C1  01DE               	clrf	exp@exponent
  6897  03C2  07DE               	addwf	exp@exponent,f
  6898  03C3  085F               	movf	exp@exponent+1,w
  6899  03C4  01FA               	clrf	?___awtoft+1
  6900  03C5  07FA               	addwf	?___awtoft+1,f
  6901  03C6  085E               	movf	exp@exponent,w
  6902  03C7  01F9               	clrf	?___awtoft
  6903  03C8  07F9               	addwf	?___awtoft,f
  6904  03C9  3189  21B2  3183   	fcall	___awtoft
  6905  03CC  0879               	movf	?___awtoft,w
  6906  03CD  0020               	movlb	0	; select bank0
  6907  03CE  00C0               	movwf	?___ftsub
  6908  03CF  087A               	movf	?___awtoft+1,w
  6909  03D0  00C1               	movwf	?___ftsub+1
  6910  03D1  087B               	movf	?___awtoft+2,w
  6911  03D2  00C2               	movwf	?___ftsub+2
  6912  03D3  0854               	movf	exp@x,w
  6913  03D4  00C3               	movwf	?___ftsub+3
  6914  03D5  0855               	movf	exp@x+1,w
  6915  03D6  00C4               	movwf	?___ftsub+4
  6916  03D7  0856               	movf	exp@x+2,w
  6917  03D8  00C5               	movwf	?___ftsub+5
  6918  03D9  3188  2094  3183   	fcall	___ftsub
  6919  03DC  0020               	movlb	0	; select bank0
  6920  03DD  0840               	movf	?___ftsub,w
  6921  03DE  00D4               	movwf	exp@x
  6922  03DF  0841               	movf	?___ftsub+1,w
  6923  03E0  00D5               	movwf	exp@x+1
  6924  03E1  0842               	movf	?___ftsub+2,w
  6925  03E2  00D6               	movwf	exp@x+2
  6926  03E3  0854               	movf	exp@x,w
  6927  03E4  00C0               	movwf	?_eval_poly
  6928  03E5  0855               	movf	exp@x+1,w
  6929  03E6  00C1               	movwf	?_eval_poly+1
  6930  03E7  0856               	movf	exp@x+2,w
  6931  03E8  00C2               	movwf	?_eval_poly+2
  6932  03E9  3001               	movlw	(exp@coeff| (0+32768))& (0+255)
  6933  03EA  00D7               	movwf	??_exp
  6934  03EB  0857               	movf	??_exp,w
  6935  03EC  00C3               	movwf	?_eval_poly+3
  6936  03ED  3009               	movlw	9
  6937  03EE  00C4               	movwf	?_eval_poly+4
  6938  03EF  3000               	movlw	0
  6939  03F0  00C5               	movwf	?_eval_poly+5
  6940  03F1  318D  255E  3183   	fcall	_eval_poly
  6941  03F4  0020               	movlb	0	; select bank0
  6942  03F5  0840               	movf	?_eval_poly,w
  6943  03F6  00CA               	movwf	?_ldexp
  6944  03F7  0841               	movf	?_eval_poly+1,w
  6945  03F8  00CB               	movwf	?_ldexp+1
  6946  03F9  0842               	movf	?_eval_poly+2,w
  6947  03FA  00CC               	movwf	?_ldexp+2
  6948  03FB  085F               	movf	exp@exponent+1,w
  6949  03FC  01CE               	clrf	?_ldexp+4
  6950  03FD  07CE               	addwf	?_ldexp+4,f
  6951  03FE  085E               	movf	exp@exponent,w
  6952  03FF  01CD               	clrf	?_ldexp+3
  6953  0400  07CD               	addwf	?_ldexp+3,f
  6954  0401  3180  2041  3183   	fcall	_ldexp
  6955  0404  0020               	movlb	0	; select bank0
  6956  0405  084A               	movf	?_ldexp,w
  6957  0406  00D4               	movwf	exp@x
  6958  0407  084B               	movf	?_ldexp+1,w
  6959  0408  00D5               	movwf	exp@x+1
  6960  0409  084C               	movf	?_ldexp+2,w
  6961  040A  00D6               	movwf	exp@x+2
  6962  040B  0860               	movf	exp@sign,w
  6963  040C  1903               	btfsc	3,2
  6964  040D  0008               	return
  6965  040E  30FF               	movlw	255
  6966  040F  00DB               	movwf	_exp$1092
  6967  0410  307F               	movlw	127
  6968  0411  00DC               	movwf	_exp$1092+1
  6969  0412  307F               	movlw	127
  6970  0413  00DD               	movwf	_exp$1092+2
  6971  0414  0856               	movf	exp@x+2,w
  6972  0415  065D               	xorwf	_exp$1092+2,w
  6973  0416  1D03               	skipz
  6974  0417  2C1E               	goto	u3465
  6975  0418  0855               	movf	exp@x+1,w
  6976  0419  065C               	xorwf	_exp$1092+1,w
  6977  041A  1D03               	skipz
  6978  041B  2C1E               	goto	u3465
  6979  041C  0854               	movf	exp@x,w
  6980  041D  065B               	xorwf	_exp$1092,w
  6981  041E                     u3465:	
  6982  041E  1D03               	skipz
  6983  041F  2C27               	goto	l4842
  6984  0420  3000               	movlw	0
  6985  0421  00D4               	movwf	?_exp
  6986  0422  3000               	movlw	0
  6987  0423  00D5               	movwf	?_exp+1
  6988  0424  3000               	movlw	0
  6989  0425  00D6               	movwf	?_exp+2
  6990  0426  0008               	return
  6991  0427                     l4842:	
  6992  0427  0854               	movf	exp@x,w
  6993  0428  00C0               	movwf	?___ftdiv
  6994  0429  0855               	movf	exp@x+1,w
  6995  042A  00C1               	movwf	?___ftdiv+1
  6996  042B  0856               	movf	exp@x+2,w
  6997  042C  00C2               	movwf	?___ftdiv+2
  6998  042D  3000               	movlw	0
  6999  042E  00C3               	movwf	?___ftdiv+3
  7000  042F  3080               	movlw	128
  7001  0430  00C4               	movwf	?___ftdiv+4
  7002  0431  303F               	movlw	63
  7003  0432  00C5               	movwf	?___ftdiv+5
  7004  0433  3187  2757         	fcall	___ftdiv
  7005  0435  0020               	movlb	0	; select bank0
  7006  0436  0840               	movf	?___ftdiv,w
  7007  0437  00D4               	movwf	?_exp
  7008  0438  0841               	movf	?___ftdiv+1,w
  7009  0439  00D5               	movwf	?_exp+1
  7010  043A  0842               	movf	?___ftdiv+2,w
  7011  043B  00D6               	movwf	?_exp+2
  7012  043C  0008               	return
  7013  043D                     __end_of_exp:	
  7014                           
  7015                           	psect	text33
  7016  0894                     __ptext33:	
  7017 ;; *************** function ___ftsub *****************
  7018 ;; Defined at:
  7019 ;;		line 17 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftsub.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  f2              3   32[BANK0 ] float 
  7022 ;;  f1              3   35[BANK0 ] float 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;		None
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  3   32[BANK0 ] float 
  7027 ;; Registers used:
  7028 ;;		wreg, status,2, status,0, pclath, cstack
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7034 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;Total ram usage:        6 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:    4
  7041 ;; This function calls:
  7042 ;;		___ftadd
  7043 ;; This function is called by:
  7044 ;;		_exp
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           
  7049                           ;psect for function ___ftsub
  7050  0894                     ___ftsub:	
  7051                           
  7052                           ;incstack = 0
  7053                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7054  0894  3080               	movlw	128
  7055  0895  0020               	movlb	0	; select bank0
  7056  0896  06C2               	xorwf	___ftsub@f2+2,f
  7057  0897  0843               	movf	___ftsub@f1,w
  7058  0898  00B3               	movwf	?___ftadd
  7059  0899  0844               	movf	___ftsub@f1+1,w
  7060  089A  00B4               	movwf	?___ftadd+1
  7061  089B  0845               	movf	___ftsub@f1+2,w
  7062  089C  00B5               	movwf	?___ftadd+2
  7063  089D  0840               	movf	___ftsub@f2,w
  7064  089E  00B6               	movwf	?___ftadd+3
  7065  089F  0841               	movf	___ftsub@f2+1,w
  7066  08A0  00B7               	movwf	?___ftadd+4
  7067  08A1  0842               	movf	___ftsub@f2+2,w
  7068  08A2  00B8               	movwf	?___ftadd+5
  7069  08A3  3184  243D         	fcall	___ftadd
  7070  08A5  0020               	movlb	0	; select bank0
  7071  08A6  0833               	movf	?___ftadd,w
  7072  08A7  00C0               	movwf	?___ftsub
  7073  08A8  0834               	movf	?___ftadd+1,w
  7074  08A9  00C1               	movwf	?___ftsub+1
  7075  08AA  0835               	movf	?___ftadd+2,w
  7076  08AB  00C2               	movwf	?___ftsub+2
  7077  08AC  0008               	return
  7078  08AD                     __end_of___ftsub:	
  7079                           
  7080                           	psect	text34
  7081  0041                     __ptext34:	
  7082 ;; *************** function _ldexp *****************
  7083 ;; Defined at:
  7084 ;;		line 278 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\frexp.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  value           3   42[BANK0 ] float 
  7087 ;;  newexp          2   45[BANK0 ] int 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  3   42[BANK0 ] int 
  7092 ;; Registers used:
  7093 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7099 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;Total ram usage:       10 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    3
  7106 ;; This function calls:
  7107 ;;		___ftge
  7108 ;;		___ftneg
  7109 ;; This function is called by:
  7110 ;;		_exp
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           
  7115                           ;psect for function _ldexp
  7116  0041                     _ldexp:	
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7120  0041  0020               	movlb	0	; select bank0
  7121  0042  084C               	movf	ldexp@value+2,w
  7122  0043  044B               	iorwf	ldexp@value+1,w
  7123  0044  044A               	iorwf	ldexp@value,w
  7124  0045  1D03               	skipz
  7125  0046  284E               	goto	l4284
  7126  0047  3000               	movlw	0
  7127  0048  00CA               	movwf	?_ldexp
  7128  0049  3000               	movlw	0
  7129  004A  00CB               	movwf	?_ldexp+1
  7130  004B  3000               	movlw	0
  7131  004C  00CC               	movwf	?_ldexp+2
  7132  004D  0008               	return
  7133  004E                     l4284:	
  7134  004E  084C               	movf	ldexp@value+2,w
  7135  004F  397F               	andlw	127
  7136  0050  00CF               	movwf	??_ldexp
  7137  0051  01D0               	clrf	??_ldexp+1
  7138  0052  35CF               	lslf	??_ldexp,f
  7139  0053  0DD0               	rlf	??_ldexp+1,f
  7140  0054  084F               	movf	??_ldexp,w
  7141  0055  07CD               	addwf	ldexp@newexp,f
  7142  0056  0850               	movf	??_ldexp+1,w
  7143  0057  3DCE               	addwfc	ldexp@newexp+1,f
  7144  0058  0D4B               	rlf	ldexp@value+1,w
  7145  0059  0D4B               	rlf	ldexp@value+1,w
  7146  005A  3901               	andlw	1
  7147  005B  00CF               	movwf	??_ldexp
  7148  005C  01D0               	clrf	??_ldexp+1
  7149  005D  084F               	movf	??_ldexp,w
  7150  005E  07CD               	addwf	ldexp@newexp,f
  7151  005F  0850               	movf	??_ldexp+1,w
  7152  0060  3DCE               	addwfc	ldexp@newexp+1,f
  7153  0061  1FCE               	btfss	ldexp@newexp+1,7
  7154  0062  2870               	goto	l4294
  7155  0063  3022               	movlw	34
  7156  0064  0021               	movlb	1	; select bank1
  7157  0065  00A9               	movwf	_errno^(0+128)
  7158  0066  3000               	movlw	0
  7159  0067  00AA               	movwf	(_errno^(0+128)+1)
  7160  0068  3000               	movlw	0
  7161  0069  0020               	movlb	0	; select bank0
  7162  006A  00CA               	movwf	?_ldexp
  7163  006B  3000               	movlw	0
  7164  006C  00CB               	movwf	?_ldexp+1
  7165  006D  3000               	movlw	0
  7166  006E  00CC               	movwf	?_ldexp+2
  7167  006F  0008               	return
  7168  0070                     l4294:	
  7169  0070  084E               	movf	ldexp@newexp+1,w
  7170  0071  3A80               	xorlw	128
  7171  0072  00FF               	movwf	127
  7172  0073  3081               	movlw	129
  7173  0074  027F               	subwf	127,w
  7174  0075  1D03               	skipz
  7175  0076  2879               	goto	u2655
  7176  0077  3000               	movlw	0
  7177  0078  024D               	subwf	ldexp@newexp,w
  7178  0079                     u2655:	
  7179  0079  1C03               	skipc
  7180  007A  28B1               	goto	l4318
  7181  007B  3022               	movlw	34
  7182  007C  0021               	movlb	1	; select bank1
  7183  007D  00A9               	movwf	_errno^(0+128)
  7184  007E  3000               	movlw	0
  7185  007F  00AA               	movwf	(_errno^(0+128)+1)
  7186  0080  0020               	movlb	0	; select bank0
  7187  0081  084A               	movf	ldexp@value,w
  7188  0082  00F1               	movwf	?___ftge
  7189  0083  084B               	movf	ldexp@value+1,w
  7190  0084  00F2               	movwf	?___ftge+1
  7191  0085  084C               	movf	ldexp@value+2,w
  7192  0086  00F3               	movwf	?___ftge+2
  7193  0087  3000               	movlw	0
  7194  0088  00F4               	movwf	?___ftge+3
  7195  0089  3000               	movlw	0
  7196  008A  00F5               	movwf	?___ftge+4
  7197  008B  3000               	movlw	0
  7198  008C  00F6               	movwf	?___ftge+5
  7199  008D  318B  239A  3180   	fcall	___ftge
  7200  0090  1803               	btfsc	3,0
  7201  0091  28A9               	goto	l4314
  7202  0092  30FF               	movlw	255
  7203  0093  0020               	movlb	0	; select bank0
  7204  0094  00D1               	movwf	_ldexp$1133
  7205  0095  307F               	movlw	127
  7206  0096  00D2               	movwf	_ldexp$1133+1
  7207  0097  307F               	movlw	127
  7208  0098  00D3               	movwf	_ldexp$1133+2
  7209  0099  0851               	movf	_ldexp$1133,w
  7210  009A  00F1               	movwf	?___ftneg
  7211  009B  0852               	movf	_ldexp$1133+1,w
  7212  009C  00F2               	movwf	?___ftneg+1
  7213  009D  0853               	movf	_ldexp$1133+2,w
  7214  009E  00F3               	movwf	?___ftneg+2
  7215  009F  3196  26F6         	fcall	___ftneg
  7216  00A1  0871               	movf	?___ftneg,w
  7217  00A2  0020               	movlb	0	; select bank0
  7218  00A3  00CA               	movwf	?_ldexp
  7219  00A4  0872               	movf	?___ftneg+1,w
  7220  00A5  00CB               	movwf	?_ldexp+1
  7221  00A6  0873               	movf	?___ftneg+2,w
  7222  00A7  00CC               	movwf	?_ldexp+2
  7223  00A8  0008               	return
  7224  00A9                     l4314:	
  7225  00A9  30FF               	movlw	255
  7226  00AA  0020               	movlb	0	; select bank0
  7227  00AB  00CA               	movwf	?_ldexp
  7228  00AC  307F               	movlw	127
  7229  00AD  00CB               	movwf	?_ldexp+1
  7230  00AE  307F               	movlw	127
  7231  00AF  00CC               	movwf	?_ldexp+2
  7232  00B0  0008               	return
  7233  00B1                     l4318:	
  7234  00B1  0020               	movlb	0	; select bank0
  7235  00B2  084E               	movf	ldexp@newexp+1,w
  7236  00B3  00D0               	movwf	??_ldexp+1
  7237  00B4  084D               	movf	ldexp@newexp,w
  7238  00B5  00CF               	movwf	??_ldexp
  7239  00B6  0D50               	rlf	??_ldexp+1,w
  7240  00B7  0CD0               	rrf	??_ldexp+1,f
  7241  00B8  0CCF               	rrf	??_ldexp,f
  7242  00B9  084C               	movf	ldexp@value+2,w
  7243  00BA  064F               	xorwf	??_ldexp,w
  7244  00BB  3980               	andlw	-128
  7245  00BC  064F               	xorwf	??_ldexp,w
  7246  00BD  00CC               	movwf	ldexp@value+2
  7247  00BE  084D               	movf	ldexp@newexp,w
  7248  00BF  3901               	andlw	1
  7249  00C0  00CF               	movwf	??_ldexp
  7250  00C1  0CCF               	rrf	??_ldexp,f
  7251  00C2  0CCF               	rrf	??_ldexp,f
  7252  00C3  084B               	movf	ldexp@value+1,w
  7253  00C4  064F               	xorwf	??_ldexp,w
  7254  00C5  397F               	andlw	-129
  7255  00C6  064F               	xorwf	??_ldexp,w
  7256  00C7  00CB               	movwf	ldexp@value+1
  7257  00C8  0008               	return
  7258  00C9                     __end_of_ldexp:	
  7259                           
  7260                           	psect	text35
  7261  16F6                     __ptext35:	
  7262 ;; *************** function ___ftneg *****************
  7263 ;; Defined at:
  7264 ;;		line 16 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftneg.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  f1              3    1[COMMON] float 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  3    1[COMMON] float 
  7271 ;; Registers used:
  7272 ;;		wreg
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7278 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;Total ram usage:        3 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    2
  7285 ;; This function calls:
  7286 ;;		Nothing
  7287 ;; This function is called by:
  7288 ;;		_ADCConv
  7289 ;;		_exp
  7290 ;;		_ldexp
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           
  7295                           ;psect for function ___ftneg
  7296  16F6                     ___ftneg:	
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in ___ftneg: [wreg]
  7300  16F6  0873               	movf	___ftneg@f1+2,w
  7301  16F7  0472               	iorwf	___ftneg@f1+1,w
  7302  16F8  0471               	iorwf	___ftneg@f1,w
  7303  16F9  1903               	skipnz
  7304  16FA  0008               	return
  7305  16FB  3080               	movlw	128
  7306  16FC  06F3               	xorwf	___ftneg@f1+2,f
  7307  16FD  0008               	return
  7308  16FE                     __end_of___ftneg:	
  7309                           
  7310                           	psect	text36
  7311  0D5E                     __ptext36:	
  7312 ;; *************** function _eval_poly *****************
  7313 ;; Defined at:
  7314 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  x               3   32[BANK0 ] float 
  7317 ;;  d               1   35[BANK0 ] PTR const 
  7318 ;;		 -> log@coeff(27), exp@coeff(30), 
  7319 ;;  n               2   36[BANK0 ] int 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;  res             3   39[BANK0 ] int 
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  3   32[BANK0 ] int 
  7324 ;; Registers used:
  7325 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7331 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;Total ram usage:       10 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    4
  7338 ;; This function calls:
  7339 ;;		___bmul
  7340 ;;		___ftadd
  7341 ;;		___ftmul
  7342 ;; This function is called by:
  7343 ;;		_exp
  7344 ;;		_log
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function _eval_poly
  7350  0D5E                     _eval_poly:	
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7354  0D5E  0020               	movlb	0	; select bank0
  7355  0D5F  0843               	movf	eval_poly@d,w
  7356  0D60  0084               	movwf	4
  7357  0D61  3088               	movlw	(high __stringtab)| (0+128)
  7358  0D62  0085               	movwf	5
  7359  0D63  3003               	movlw	3
  7360  0D64  00C6               	movwf	??_eval_poly
  7361  0D65  0846               	movf	??_eval_poly,w
  7362  0D66  00F1               	movwf	?___bmul
  7363  0D67  0844               	movf	eval_poly@n,w
  7364  0D68  3197  2778  318D   	fcall	___bmul
  7365  0D6B  0784               	addwf	4,f
  7366  0D6C  1803               	skipnc
  7367  0D6D  0A85               	incf	5,f
  7368  0D6E  3F00               	moviw [0]fsr0
  7369  0D6F  0020               	movlb	0	; select bank0
  7370  0D70  00C7               	movwf	eval_poly@res
  7371  0D71  3F01               	moviw [1]fsr0
  7372  0D72  00C8               	movwf	eval_poly@res+1
  7373  0D73  3F02               	moviw [2]fsr0
  7374  0D74                     L2:	
  7375  0D74  00C9               	movwf	eval_poly@res+2
  7376  0D75  0845               	movf	eval_poly@n+1,w
  7377  0D76  0444               	iorwf	eval_poly@n,w
  7378  0D77  1903               	btfsc	3,2
  7379  0D78  2DB3               	goto	l5352
  7380  0D79  0843               	movf	eval_poly@d,w
  7381  0D7A  0084               	movwf	4
  7382  0D7B  3088               	movlw	(high __stringtab)| (0+128)
  7383  0D7C  0085               	movwf	5
  7384  0D7D  3003               	movlw	3
  7385  0D7E  00C6               	movwf	??_eval_poly
  7386  0D7F  0846               	movf	??_eval_poly,w
  7387  0D80  00F1               	movwf	?___bmul
  7388  0D81  30FF               	movlw	255
  7389  0D82  07C4               	addwf	eval_poly@n,f
  7390  0D83  30FF               	movlw	255
  7391  0D84  3DC5               	addwfc	eval_poly@n+1,f
  7392  0D85  0844               	movf	eval_poly@n,w
  7393  0D86  3197  2778  318D   	fcall	___bmul
  7394  0D89  0784               	addwf	4,f
  7395  0D8A  1803               	skipnc
  7396  0D8B  0A85               	incf	5,f
  7397  0D8C  3F00               	moviw [0]fsr0
  7398  0D8D  0020               	movlb	0	; select bank0
  7399  0D8E  00B3               	movwf	?___ftadd
  7400  0D8F  3F01               	moviw [1]fsr0
  7401  0D90  00B4               	movwf	?___ftadd+1
  7402  0D91  3F02               	moviw [2]fsr0
  7403  0D92  00B5               	movwf	?___ftadd+2
  7404  0D93  0847               	movf	eval_poly@res,w
  7405  0D94  00A3               	movwf	?___ftmul
  7406  0D95  0848               	movf	eval_poly@res+1,w
  7407  0D96  00A4               	movwf	?___ftmul+1
  7408  0D97  0849               	movf	eval_poly@res+2,w
  7409  0D98  00A5               	movwf	?___ftmul+2
  7410  0D99  0840               	movf	eval_poly@x,w
  7411  0D9A  00A6               	movwf	?___ftmul+3
  7412  0D9B  0841               	movf	eval_poly@x+1,w
  7413  0D9C  00A7               	movwf	?___ftmul+4
  7414  0D9D  0842               	movf	eval_poly@x+2,w
  7415  0D9E  00A8               	movwf	?___ftmul+5
  7416  0D9F  3185  25F1  318D   	fcall	___ftmul
  7417  0DA2  0020               	movlb	0	; select bank0
  7418  0DA3  0823               	movf	?___ftmul,w
  7419  0DA4  00B6               	movwf	?___ftadd+3
  7420  0DA5  0824               	movf	?___ftmul+1,w
  7421  0DA6  00B7               	movwf	?___ftadd+4
  7422  0DA7  0825               	movf	?___ftmul+2,w
  7423  0DA8  00B8               	movwf	?___ftadd+5
  7424  0DA9  3184  243D  318D   	fcall	___ftadd
  7425  0DAC  0020               	movlb	0	; select bank0
  7426  0DAD  0833               	movf	?___ftadd,w
  7427  0DAE  00C7               	movwf	eval_poly@res
  7428  0DAF  0834               	movf	?___ftadd+1,w
  7429  0DB0  00C8               	movwf	eval_poly@res+1
  7430  0DB1  0835               	movf	?___ftadd+2,w
  7431  0DB2  2D74               	goto	L2
  7432  0DB3                     l5352:	
  7433  0DB3  0847               	movf	eval_poly@res,w
  7434  0DB4  00C0               	movwf	?_eval_poly
  7435  0DB5  0848               	movf	eval_poly@res+1,w
  7436  0DB6  00C1               	movwf	?_eval_poly+1
  7437  0DB7  0849               	movf	eval_poly@res+2,w
  7438  0DB8  00C2               	movwf	?_eval_poly+2
  7439  0DB9  0008               	return
  7440  0DBA                     __end_of_eval_poly:	
  7441                           
  7442                           	psect	text37
  7443  05F1                     __ptext37:	
  7444 ;; *************** function ___ftmul *****************
  7445 ;; Defined at:
  7446 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  f1              3    3[BANK0 ] float 
  7449 ;;  f2              3    6[BANK0 ] float 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;  f3_as_produc    3   14[BANK0 ] unsigned um
  7452 ;;  sign            1   18[BANK0 ] unsigned char 
  7453 ;;  cntr            1   17[BANK0 ] unsigned char 
  7454 ;;  exp             1   13[BANK0 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  3    3[BANK0 ] float 
  7457 ;; Registers used:
  7458 ;;		wreg, status,2, status,0, pclath, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:       16 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    3
  7471 ;; This function calls:
  7472 ;;		___ftpack
  7473 ;; This function is called by:
  7474 ;;		_ADCConv
  7475 ;;		_exp
  7476 ;;		_log
  7477 ;;		_eval_poly
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           
  7482                           ;psect for function ___ftmul
  7483  05F1                     ___ftmul:	
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7487  05F1  0020               	movlb	0	; select bank0
  7488  05F2  0823               	movf	___ftmul@f1,w
  7489  05F3  00A9               	movwf	??___ftmul
  7490  05F4  0824               	movf	___ftmul@f1+1,w
  7491  05F5  00AA               	movwf	??___ftmul+1
  7492  05F6  0825               	movf	___ftmul@f1+2,w
  7493  05F7  00AB               	movwf	??___ftmul+2
  7494  05F8  1003               	clrc
  7495  05F9  0D2A               	rlf	??___ftmul+1,w
  7496  05FA  0D2B               	rlf	??___ftmul+2,w
  7497  05FB  00AC               	movwf	??___ftmul+3
  7498  05FC  082C               	movf	??___ftmul+3,w
  7499  05FD  00AD               	movwf	___ftmul@exp
  7500  05FE  08AD               	movf	___ftmul@exp,f
  7501  05FF  1D03               	skipz
  7502  0600  2E08               	goto	l5476
  7503  0601  3000               	movlw	0
  7504  0602  00A3               	movwf	?___ftmul
  7505  0603  3000               	movlw	0
  7506  0604  00A4               	movwf	?___ftmul+1
  7507  0605  3000               	movlw	0
  7508  0606  00A5               	movwf	?___ftmul+2
  7509  0607  0008               	return
  7510  0608                     l5476:	
  7511  0608  0826               	movf	___ftmul@f2,w
  7512  0609  00A9               	movwf	??___ftmul
  7513  060A  0827               	movf	___ftmul@f2+1,w
  7514  060B  00AA               	movwf	??___ftmul+1
  7515  060C  0828               	movf	___ftmul@f2+2,w
  7516  060D  00AB               	movwf	??___ftmul+2
  7517  060E  1003               	clrc
  7518  060F  0D2A               	rlf	??___ftmul+1,w
  7519  0610  0D2B               	rlf	??___ftmul+2,w
  7520  0611  00AC               	movwf	??___ftmul+3
  7521  0612  082C               	movf	??___ftmul+3,w
  7522  0613  00B2               	movwf	___ftmul@sign
  7523  0614  08B2               	movf	___ftmul@sign,f
  7524  0615  1D03               	skipz
  7525  0616  2E1E               	goto	l5482
  7526  0617  3000               	movlw	0
  7527  0618  00A3               	movwf	?___ftmul
  7528  0619  3000               	movlw	0
  7529  061A  00A4               	movwf	?___ftmul+1
  7530  061B  3000               	movlw	0
  7531  061C  00A5               	movwf	?___ftmul+2
  7532  061D  0008               	return
  7533  061E                     l5482:	
  7534  061E  0832               	movf	___ftmul@sign,w
  7535  061F  3E7B               	addlw	123
  7536  0620  00A9               	movwf	??___ftmul
  7537  0621  0829               	movf	??___ftmul,w
  7538  0622  07AD               	addwf	___ftmul@exp,f
  7539  0623  0823               	movf	___ftmul@f1,w
  7540  0624  00A9               	movwf	??___ftmul
  7541  0625  0824               	movf	___ftmul@f1+1,w
  7542  0626  00AA               	movwf	??___ftmul+1
  7543  0627  0825               	movf	___ftmul@f1+2,w
  7544  0628  00AB               	movwf	??___ftmul+2
  7545  0629  3010               	movlw	16
  7546  062A                     u4355:	
  7547  062A  36AB               	lsrf	??___ftmul+2,f
  7548  062B  0CAA               	rrf	??___ftmul+1,f
  7549  062C  0CA9               	rrf	??___ftmul,f
  7550  062D  0B89               	decfsz	9,f
  7551  062E  2E2A               	goto	u4355
  7552  062F  0829               	movf	??___ftmul,w
  7553  0630  00AC               	movwf	??___ftmul+3
  7554  0631  082C               	movf	??___ftmul+3,w
  7555  0632  00B2               	movwf	___ftmul@sign
  7556  0633  0826               	movf	___ftmul@f2,w
  7557  0634  00A9               	movwf	??___ftmul
  7558  0635  0827               	movf	___ftmul@f2+1,w
  7559  0636  00AA               	movwf	??___ftmul+1
  7560  0637  0828               	movf	___ftmul@f2+2,w
  7561  0638  00AB               	movwf	??___ftmul+2
  7562  0639  3010               	movlw	16
  7563  063A                     u4365:	
  7564  063A  36AB               	lsrf	??___ftmul+2,f
  7565  063B  0CAA               	rrf	??___ftmul+1,f
  7566  063C  0CA9               	rrf	??___ftmul,f
  7567  063D  0B89               	decfsz	9,f
  7568  063E  2E3A               	goto	u4365
  7569  063F  0829               	movf	??___ftmul,w
  7570  0640  00AC               	movwf	??___ftmul+3
  7571  0641  082C               	movf	??___ftmul+3,w
  7572  0642  06B2               	xorwf	___ftmul@sign,f
  7573  0643  3080               	movlw	128
  7574  0644  00A9               	movwf	??___ftmul
  7575  0645  0829               	movf	??___ftmul,w
  7576  0646  05B2               	andwf	___ftmul@sign,f
  7577  0647  17A4               	bsf	___ftmul@f1+1,7
  7578  0648  17A7               	bsf	___ftmul@f2+1,7
  7579  0649  30FF               	movlw	255
  7580  064A  05A6               	andwf	___ftmul@f2,f
  7581  064B  30FF               	movlw	255
  7582  064C  05A7               	andwf	___ftmul@f2+1,f
  7583  064D  3000               	movlw	0
  7584  064E  05A8               	andwf	___ftmul@f2+2,f
  7585  064F  3000               	movlw	0
  7586  0650  00AE               	movwf	___ftmul@f3_as_product
  7587  0651  3000               	movlw	0
  7588  0652  00AF               	movwf	___ftmul@f3_as_product+1
  7589  0653  3000               	movlw	0
  7590  0654  00B0               	movwf	___ftmul@f3_as_product+2
  7591  0655  3007               	movlw	7
  7592  0656  00A9               	movwf	??___ftmul
  7593  0657  0829               	movf	??___ftmul,w
  7594  0658  00B1               	movwf	___ftmul@cntr
  7595  0659                     l5494:	
  7596  0659  1C23               	btfss	___ftmul@f1,0
  7597  065A  2E61               	goto	l5498
  7598  065B  0826               	movf	___ftmul@f2,w
  7599  065C  07AE               	addwf	___ftmul@f3_as_product,f
  7600  065D  0827               	movf	___ftmul@f2+1,w
  7601  065E  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  7602  065F  0828               	movf	___ftmul@f2+2,w
  7603  0660  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  7604  0661                     l5498:	
  7605  0661  3001               	movlw	1
  7606  0662                     u4385:	
  7607  0662  36A5               	lsrf	___ftmul@f1+2,f
  7608  0663  0CA4               	rrf	___ftmul@f1+1,f
  7609  0664  0CA3               	rrf	___ftmul@f1,f
  7610  0665  0B89               	decfsz	9,f
  7611  0666  2E62               	goto	u4385
  7612  0667  3001               	movlw	1
  7613  0668                     u4395:	
  7614  0668  35A6               	lslf	___ftmul@f2,f
  7615  0669  0DA7               	rlf	___ftmul@f2+1,f
  7616  066A  0DA8               	rlf	___ftmul@f2+2,f
  7617  066B  0B89               	decfsz	9,f
  7618  066C  2E68               	goto	u4395
  7619  066D  3001               	movlw	1
  7620  066E  02B1               	subwf	___ftmul@cntr,f
  7621  066F  1D03               	btfss	3,2
  7622  0670  2E59               	goto	l5494
  7623  0671  3009               	movlw	9
  7624  0672  00A9               	movwf	??___ftmul
  7625  0673  0829               	movf	??___ftmul,w
  7626  0674  00B1               	movwf	___ftmul@cntr
  7627  0675                     l5506:	
  7628  0675  1C23               	btfss	___ftmul@f1,0
  7629  0676  2E7D               	goto	l5510
  7630  0677  0826               	movf	___ftmul@f2,w
  7631  0678  07AE               	addwf	___ftmul@f3_as_product,f
  7632  0679  0827               	movf	___ftmul@f2+1,w
  7633  067A  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  7634  067B  0828               	movf	___ftmul@f2+2,w
  7635  067C  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  7636  067D                     l5510:	
  7637  067D  3001               	movlw	1
  7638  067E                     u4425:	
  7639  067E  36A5               	lsrf	___ftmul@f1+2,f
  7640  067F  0CA4               	rrf	___ftmul@f1+1,f
  7641  0680  0CA3               	rrf	___ftmul@f1,f
  7642  0681  0B89               	decfsz	9,f
  7643  0682  2E7E               	goto	u4425
  7644  0683  3001               	movlw	1
  7645  0684                     u4435:	
  7646  0684  36B0               	lsrf	___ftmul@f3_as_product+2,f
  7647  0685  0CAF               	rrf	___ftmul@f3_as_product+1,f
  7648  0686  0CAE               	rrf	___ftmul@f3_as_product,f
  7649  0687  0B89               	decfsz	9,f
  7650  0688  2E84               	goto	u4435
  7651  0689  3001               	movlw	1
  7652  068A  02B1               	subwf	___ftmul@cntr,f
  7653  068B  1D03               	btfss	3,2
  7654  068C  2E75               	goto	l5506
  7655  068D  082E               	movf	___ftmul@f3_as_product,w
  7656  068E  00F1               	movwf	?___ftpack
  7657  068F  082F               	movf	___ftmul@f3_as_product+1,w
  7658  0690  00F2               	movwf	?___ftpack+1
  7659  0691  0830               	movf	___ftmul@f3_as_product+2,w
  7660  0692  00F3               	movwf	?___ftpack+2
  7661  0693  082D               	movf	___ftmul@exp,w
  7662  0694  00A9               	movwf	??___ftmul
  7663  0695  0829               	movf	??___ftmul,w
  7664  0696  00F4               	movwf	?___ftpack+3
  7665  0697  0832               	movf	___ftmul@sign,w
  7666  0698  00AA               	movwf	??___ftmul+1
  7667  0699  082A               	movf	??___ftmul+1,w
  7668  069A  00F5               	movwf	?___ftpack+4
  7669  069B  318D  25BA         	fcall	___ftpack
  7670  069D  0871               	movf	?___ftpack,w
  7671  069E  0020               	movlb	0	; select bank0
  7672  069F  00A3               	movwf	?___ftmul
  7673  06A0  0872               	movf	?___ftpack+1,w
  7674  06A1  00A4               	movwf	?___ftmul+1
  7675  06A2  0873               	movf	?___ftpack+2,w
  7676  06A3  00A5               	movwf	?___ftmul+2
  7677  06A4  0008               	return
  7678  06A5                     __end_of___ftmul:	
  7679                           
  7680                           	psect	text38
  7681  1778                     __ptext38:	
  7682 ;; *************** function ___bmul *****************
  7683 ;; Defined at:
  7684 ;;		line 3 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\bmul.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  multiplier      1    wreg     unsigned char 
  7687 ;;  multiplicand    1    1[COMMON] unsigned char 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  multiplier      1    4[COMMON] unsigned char 
  7690 ;;  product         1    3[COMMON] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  1    wreg      unsigned char 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, status,0
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        4 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    2
  7707 ;; This function calls:
  7708 ;;		Nothing
  7709 ;; This function is called by:
  7710 ;;		_eval_poly
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function ___bmul
  7716  1778                     ___bmul:	
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7720                           ;___bmul@multiplier stored from wreg
  7721  1778  00F4               	movwf	___bmul@multiplier
  7722  1779  01F3               	clrf	___bmul@product
  7723  177A                     l4226:	
  7724  177A  1C74               	btfss	___bmul@multiplier,0
  7725  177B  2F80               	goto	l4230
  7726  177C  0871               	movf	___bmul@multiplicand,w
  7727  177D  00F2               	movwf	??___bmul
  7728  177E  0872               	movf	??___bmul,w
  7729  177F  07F3               	addwf	___bmul@product,f
  7730  1780                     l4230:	
  7731  1780  1003               	clrc
  7732  1781  0DF1               	rlf	___bmul@multiplicand,f
  7733  1782  1003               	clrc
  7734  1783  0CF4               	rrf	___bmul@multiplier,f
  7735  1784  08F4               	movf	___bmul@multiplier,f
  7736  1785  1D03               	skipz
  7737  1786  2F7A               	goto	l4226
  7738  1787  0873               	movf	___bmul@product,w
  7739  1788  0008               	return
  7740  1789                     __end_of___bmul:	
  7741                           
  7742                           	psect	text39
  7743  0EF4                     __ptext39:	
  7744 ;; *************** function _floor *****************
  7745 ;; Defined at:
  7746 ;;		line 14 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\floor.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  x               3   32[BANK0 ] unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  i               3   36[BANK0 ] unsigned char 
  7751 ;;  expon           2   39[BANK0 ] int 
  7752 ;; Return value:  Size  Location     Type
  7753 ;;                  3   32[BANK0 ] int 
  7754 ;; Registers used:
  7755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7756 ;; Tracked objects:
  7757 ;;		On entry : 0/0
  7758 ;;		On exit  : 0/0
  7759 ;;		Unchanged: 0/0
  7760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7761 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7762 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;Total ram usage:        9 bytes
  7766 ;; Hardware stack levels used:    1
  7767 ;; Hardware stack levels required when called:    4
  7768 ;; This function calls:
  7769 ;;		___altoft
  7770 ;;		_frexp
  7771 ;;		___ftadd
  7772 ;;		___ftge
  7773 ;;		___fttol
  7774 ;; This function is called by:
  7775 ;;		_exp
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           
  7780                           ;psect for function _floor
  7781  0EF4                     _floor:	
  7782                           
  7783                           ;incstack = 0
  7784                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7785  0EF4  0020               	movlb	0	; select bank0
  7786  0EF5  0840               	movf	floor@x,w
  7787  0EF6  00F1               	movwf	?_frexp
  7788  0EF7  0841               	movf	floor@x+1,w
  7789  0EF8  00F2               	movwf	?_frexp+1
  7790  0EF9  0842               	movf	floor@x+2,w
  7791  0EFA  00F3               	movwf	?_frexp+2
  7792  0EFB  3047               	movlw	floor@expon& (0+255)
  7793  0EFC  00C3               	movwf	??_floor
  7794  0EFD  0843               	movf	??_floor,w
  7795  0EFE  00F4               	movwf	?_frexp+3
  7796  0EFF  318B  235F  318E   	fcall	_frexp
  7797  0F02  0020               	movlb	0	; select bank0
  7798  0F03  1FC8               	btfss	floor@expon+1,7
  7799  0F04  2F26               	goto	l5332
  7800  0F05  0840               	movf	floor@x,w
  7801  0F06  00F1               	movwf	?___ftge
  7802  0F07  0841               	movf	floor@x+1,w
  7803  0F08  00F2               	movwf	?___ftge+1
  7804  0F09  0842               	movf	floor@x+2,w
  7805  0F0A  00F3               	movwf	?___ftge+2
  7806  0F0B  3000               	movlw	0
  7807  0F0C  00F4               	movwf	?___ftge+3
  7808  0F0D  3000               	movlw	0
  7809  0F0E  00F5               	movwf	?___ftge+4
  7810  0F0F  3000               	movlw	0
  7811  0F10  00F6               	movwf	?___ftge+5
  7812  0F11  318B  239A  318E   	fcall	___ftge
  7813  0F14  1803               	btfsc	3,0
  7814  0F15  2F1E               	goto	l5328
  7815  0F16  3000               	movlw	0
  7816  0F17  0020               	movlb	0	; select bank0
  7817  0F18  00C0               	movwf	?_floor
  7818  0F19  3080               	movlw	128
  7819  0F1A  00C1               	movwf	?_floor+1
  7820  0F1B  30BF               	movlw	191
  7821  0F1C  00C2               	movwf	?_floor+2
  7822  0F1D  0008               	return
  7823  0F1E                     l5328:	
  7824  0F1E  3000               	movlw	0
  7825  0F1F  0020               	movlb	0	; select bank0
  7826  0F20  00C0               	movwf	?_floor
  7827  0F21  3000               	movlw	0
  7828  0F22  00C1               	movwf	?_floor+1
  7829  0F23  3000               	movlw	0
  7830  0F24  00C2               	movwf	?_floor+2
  7831  0F25  0008               	return
  7832  0F26                     l5332:	
  7833  0F26  3000               	movlw	0
  7834  0F27  0248               	subwf	floor@expon+1,w
  7835  0F28  3015               	movlw	21
  7836  0F29  1903               	skipnz
  7837  0F2A  0247               	subwf	floor@expon,w
  7838  0F2B  1803               	btfsc	3,0
  7839  0F2C  0008               	return
  7840  0F2D  0840               	movf	floor@x,w
  7841  0F2E  00F1               	movwf	?___fttol
  7842  0F2F  0841               	movf	floor@x+1,w
  7843  0F30  00F2               	movwf	?___fttol+1
  7844  0F31  0842               	movf	floor@x+2,w
  7845  0F32  00F3               	movwf	?___fttol+2
  7846  0F33  318F  2779  318E   	fcall	___fttol
  7847  0F36  0874               	movf	?___fttol+3,w
  7848  0F37  0020               	movlb	0	; select bank0
  7849  0F38  00A9               	movwf	?___altoft+3
  7850  0F39  0873               	movf	?___fttol+2,w
  7851  0F3A  00A8               	movwf	?___altoft+2
  7852  0F3B  0872               	movf	?___fttol+1,w
  7853  0F3C  00A7               	movwf	?___altoft+1
  7854  0F3D  0871               	movf	?___fttol,w
  7855  0F3E  00A6               	movwf	?___altoft
  7856  0F3F  318B  23D5  318E   	fcall	___altoft
  7857  0F42  0020               	movlb	0	; select bank0
  7858  0F43  0826               	movf	?___altoft,w
  7859  0F44  00C4               	movwf	floor@i
  7860  0F45  0827               	movf	?___altoft+1,w
  7861  0F46  00C5               	movwf	floor@i+1
  7862  0F47  0828               	movf	?___altoft+2,w
  7863  0F48  00C6               	movwf	floor@i+2
  7864  0F49  0840               	movf	floor@x,w
  7865  0F4A  00F1               	movwf	?___ftge
  7866  0F4B  0841               	movf	floor@x+1,w
  7867  0F4C  00F2               	movwf	?___ftge+1
  7868  0F4D  0842               	movf	floor@x+2,w
  7869  0F4E  00F3               	movwf	?___ftge+2
  7870  0F4F  0844               	movf	floor@i,w
  7871  0F50  00F4               	movwf	?___ftge+3
  7872  0F51  0845               	movf	floor@i+1,w
  7873  0F52  00F5               	movwf	?___ftge+4
  7874  0F53  0846               	movf	floor@i+2,w
  7875  0F54  00F6               	movwf	?___ftge+5
  7876  0F55  318B  239A  318E   	fcall	___ftge
  7877  0F58  1803               	btfsc	3,0
  7878  0F59  2F71               	goto	l5342
  7879  0F5A  3000               	movlw	0
  7880  0F5B  0020               	movlb	0	; select bank0
  7881  0F5C  00B3               	movwf	?___ftadd
  7882  0F5D  3080               	movlw	128
  7883  0F5E  00B4               	movwf	?___ftadd+1
  7884  0F5F  30BF               	movlw	191
  7885  0F60  00B5               	movwf	?___ftadd+2
  7886  0F61  0844               	movf	floor@i,w
  7887  0F62  00B6               	movwf	?___ftadd+3
  7888  0F63  0845               	movf	floor@i+1,w
  7889  0F64  00B7               	movwf	?___ftadd+4
  7890  0F65  0846               	movf	floor@i+2,w
  7891  0F66  00B8               	movwf	?___ftadd+5
  7892  0F67  3184  243D         	fcall	___ftadd
  7893  0F69  0020               	movlb	0	; select bank0
  7894  0F6A  0833               	movf	?___ftadd,w
  7895  0F6B  00C0               	movwf	?_floor
  7896  0F6C  0834               	movf	?___ftadd+1,w
  7897  0F6D  00C1               	movwf	?_floor+1
  7898  0F6E  0835               	movf	?___ftadd+2,w
  7899  0F6F  00C2               	movwf	?_floor+2
  7900  0F70  0008               	return
  7901  0F71                     l5342:	
  7902  0F71  0020               	movlb	0	; select bank0
  7903  0F72  0844               	movf	floor@i,w
  7904  0F73  00C0               	movwf	?_floor
  7905  0F74  0845               	movf	floor@i+1,w
  7906  0F75  00C1               	movwf	?_floor+1
  7907  0F76  0846               	movf	floor@i+2,w
  7908  0F77  00C2               	movwf	?_floor+2
  7909  0F78  0008               	return
  7910  0F79                     __end_of_floor:	
  7911                           
  7912                           	psect	text40
  7913  0F79                     __ptext40:	
  7914 ;; *************** function ___fttol *****************
  7915 ;; Defined at:
  7916 ;;		line 45 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\fttol.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  f1              3    1[COMMON] float 
  7919 ;; Auto vars:     Size  Location     Type
  7920 ;;  lval            4    1[BANK0 ] unsigned long 
  7921 ;;  exp1            1    5[BANK0 ] unsigned char 
  7922 ;;  sign1           1    0[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  4    1[COMMON] long 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7932 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;Total ram usage:       14 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    2
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_exp
  7943 ;;		_floor
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           
  7948                           ;psect for function ___fttol
  7949  0F79                     ___fttol:	
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7953  0F79  0871               	movf	___fttol@f1,w
  7954  0F7A  00F5               	movwf	??___fttol
  7955  0F7B  0872               	movf	___fttol@f1+1,w
  7956  0F7C  00F6               	movwf	??___fttol+1
  7957  0F7D  0873               	movf	___fttol@f1+2,w
  7958  0F7E  00F7               	movwf	??___fttol+2
  7959  0F7F  1003               	clrc
  7960  0F80  0D76               	rlf	??___fttol+1,w
  7961  0F81  0D77               	rlf	??___fttol+2,w
  7962  0F82  00F8               	movwf	??___fttol+3
  7963  0F83  0878               	movf	??___fttol+3,w
  7964  0F84  0020               	movlb	0	; select bank0
  7965  0F85  00A5               	movwf	___fttol@exp1
  7966  0F86  08A5               	movf	___fttol@exp1,f
  7967  0F87  1D03               	skipz
  7968  0F88  2F92               	goto	l4548
  7969  0F89  3000               	movlw	0
  7970  0F8A  00F4               	movwf	?___fttol+3
  7971  0F8B  3000               	movlw	0
  7972  0F8C  00F3               	movwf	?___fttol+2
  7973  0F8D  3000               	movlw	0
  7974  0F8E  00F2               	movwf	?___fttol+1
  7975  0F8F  3000               	movlw	0
  7976  0F90  00F1               	movwf	?___fttol
  7977  0F91  0008               	return
  7978  0F92                     l4548:	
  7979  0F92  0871               	movf	___fttol@f1,w
  7980  0F93  00F5               	movwf	??___fttol
  7981  0F94  0872               	movf	___fttol@f1+1,w
  7982  0F95  00F6               	movwf	??___fttol+1
  7983  0F96  0873               	movf	___fttol@f1+2,w
  7984  0F97  00F7               	movwf	??___fttol+2
  7985  0F98  3017               	movlw	23
  7986  0F99                     u3165:	
  7987  0F99  36F7               	lsrf	??___fttol+2,f
  7988  0F9A  0CF6               	rrf	??___fttol+1,f
  7989  0F9B  0CF5               	rrf	??___fttol,f
  7990  0F9C  0B89               	decfsz	9,f
  7991  0F9D  2F99               	goto	u3165
  7992  0F9E  0875               	movf	??___fttol,w
  7993  0F9F  00F8               	movwf	??___fttol+3
  7994  0FA0  0878               	movf	??___fttol+3,w
  7995  0FA1  00A0               	movwf	___fttol@sign1
  7996  0FA2  17F2               	bsf	___fttol@f1+1,7
  7997  0FA3  30FF               	movlw	255
  7998  0FA4  05F1               	andwf	___fttol@f1,f
  7999  0FA5  30FF               	movlw	255
  8000  0FA6  05F2               	andwf	___fttol@f1+1,f
  8001  0FA7  3000               	movlw	0
  8002  0FA8  05F3               	andwf	___fttol@f1+2,f
  8003  0FA9  0871               	movf	___fttol@f1,w
  8004  0FAA  00A1               	movwf	___fttol@lval
  8005  0FAB  0872               	movf	___fttol@f1+1,w
  8006  0FAC  00A2               	movwf	___fttol@lval+1
  8007  0FAD  0873               	movf	___fttol@f1+2,w
  8008  0FAE  00A3               	movwf	___fttol@lval+2
  8009  0FAF  01A4               	clrf	___fttol@lval+3
  8010  0FB0  308E               	movlw	142
  8011  0FB1  02A5               	subwf	___fttol@exp1,f
  8012  0FB2  1FA5               	btfss	___fttol@exp1,7
  8013  0FB3  2FD0               	goto	l4568
  8014  0FB4  0825               	movf	___fttol@exp1,w
  8015  0FB5  3A80               	xorlw	128
  8016  0FB6  3E8F               	addlw	143
  8017  0FB7  1803               	skipnc
  8018  0FB8  2FC2               	goto	l4566
  8019  0FB9  3000               	movlw	0
  8020  0FBA  00F4               	movwf	?___fttol+3
  8021  0FBB  3000               	movlw	0
  8022  0FBC  00F3               	movwf	?___fttol+2
  8023  0FBD  3000               	movlw	0
  8024  0FBE  00F2               	movwf	?___fttol+1
  8025  0FBF  3000               	movlw	0
  8026  0FC0  00F1               	movwf	?___fttol
  8027  0FC1  0008               	return
  8028  0FC2                     l4566:	
  8029  0FC2  3001               	movlw	1
  8030  0FC3                     u3195:	
  8031  0FC3  36A4               	lsrf	___fttol@lval+3,f
  8032  0FC4  0CA3               	rrf	___fttol@lval+2,f
  8033  0FC5  0CA2               	rrf	___fttol@lval+1,f
  8034  0FC6  0CA1               	rrf	___fttol@lval,f
  8035  0FC7  0B89               	decfsz	9,f
  8036  0FC8  2FC3               	goto	u3195
  8037  0FC9  3001               	movlw	1
  8038  0FCA  00F5               	movwf	??___fttol
  8039  0FCB  0875               	movf	??___fttol,w
  8040  0FCC  07A5               	addwf	___fttol@exp1,f
  8041  0FCD  1903               	btfsc	3,2
  8042  0FCE  2FE9               	goto	l4578
  8043  0FCF  2FC2               	goto	l4566
  8044  0FD0                     l4568:	
  8045  0FD0  3018               	movlw	24
  8046  0FD1  0225               	subwf	___fttol@exp1,w
  8047  0FD2  1C03               	skipc
  8048  0FD3  2FE6               	goto	l4576
  8049  0FD4  3000               	movlw	0
  8050  0FD5  00F4               	movwf	?___fttol+3
  8051  0FD6  3000               	movlw	0
  8052  0FD7  00F3               	movwf	?___fttol+2
  8053  0FD8  3000               	movlw	0
  8054  0FD9  00F2               	movwf	?___fttol+1
  8055  0FDA  3000               	movlw	0
  8056  0FDB  00F1               	movwf	?___fttol
  8057  0FDC  0008               	return
  8058  0FDD                     l4574:	
  8059  0FDD  3001               	movlw	1
  8060  0FDE                     u3225:	
  8061  0FDE  35A1               	lslf	___fttol@lval,f
  8062  0FDF  0DA2               	rlf	___fttol@lval+1,f
  8063  0FE0  0DA3               	rlf	___fttol@lval+2,f
  8064  0FE1  0DA4               	rlf	___fttol@lval+3,f
  8065  0FE2  0B89               	decfsz	9,f
  8066  0FE3  2FDE               	goto	u3225
  8067  0FE4  3001               	movlw	1
  8068  0FE5  02A5               	subwf	___fttol@exp1,f
  8069  0FE6                     l4576:	
  8070  0FE6  08A5               	movf	___fttol@exp1,f
  8071  0FE7  1D03               	skipz
  8072  0FE8  2FDD               	goto	l4574
  8073  0FE9                     l4578:	
  8074  0FE9  0820               	movf	___fttol@sign1,w
  8075  0FEA  1903               	btfsc	3,2
  8076  0FEB  2FF7               	goto	l4582
  8077  0FEC  09A1               	comf	___fttol@lval,f
  8078  0FED  09A2               	comf	___fttol@lval+1,f
  8079  0FEE  09A3               	comf	___fttol@lval+2,f
  8080  0FEF  09A4               	comf	___fttol@lval+3,f
  8081  0FF0  0AA1               	incf	___fttol@lval,f
  8082  0FF1  1903               	skipnz
  8083  0FF2  0AA2               	incf	___fttol@lval+1,f
  8084  0FF3  1903               	skipnz
  8085  0FF4  0AA3               	incf	___fttol@lval+2,f
  8086  0FF5  1903               	skipnz
  8087  0FF6  0AA4               	incf	___fttol@lval+3,f
  8088  0FF7                     l4582:	
  8089  0FF7  0824               	movf	___fttol@lval+3,w
  8090  0FF8  00F4               	movwf	?___fttol+3
  8091  0FF9  0823               	movf	___fttol@lval+2,w
  8092  0FFA  00F3               	movwf	?___fttol+2
  8093  0FFB  0822               	movf	___fttol@lval+1,w
  8094  0FFC  00F2               	movwf	?___fttol+1
  8095  0FFD  0821               	movf	___fttol@lval,w
  8096  0FFE  00F1               	movwf	?___fttol
  8097  0FFF  0008               	return
  8098  1000                     __end_of___fttol:	
  8099                           
  8100                           	psect	text41
  8101  0B9A                     __ptext41:	
  8102 ;; *************** function ___ftge *****************
  8103 ;; Defined at:
  8104 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftge.c"
  8105 ;; Parameters:    Size  Location     Type
  8106 ;;  ff1             3    1[COMMON] float 
  8107 ;;  ff2             3    4[COMMON] float 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;		None               void
  8112 ;; Registers used:
  8113 ;;		wreg, status,2, status,0
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8119 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;Total ram usage:        9 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    2
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_ADCGetTempCCal
  8130 ;;		_exp
  8131 ;;		_floor
  8132 ;;		_ldexp
  8133 ;;		_log
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function ___ftge
  8139  0B9A                     ___ftge:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8143  0B9A  1FF3               	btfss	___ftge@ff1+2,7
  8144  0B9B  2BB0               	goto	l4462
  8145  0B9C  0971               	comf	___ftge@ff1,w
  8146  0B9D  00F7               	movwf	??___ftge
  8147  0B9E  0972               	comf	___ftge@ff1+1,w
  8148  0B9F  00F8               	movwf	??___ftge+1
  8149  0BA0  0973               	comf	___ftge@ff1+2,w
  8150  0BA1  00F9               	movwf	??___ftge+2
  8151  0BA2  0AF7               	incf	??___ftge,f
  8152  0BA3  1903               	skipnz
  8153  0BA4  0AF8               	incf	??___ftge+1,f
  8154  0BA5  1903               	skipnz
  8155  0BA6  0AF9               	incf	??___ftge+2,f
  8156  0BA7  3000               	movlw	0
  8157  0BA8  0777               	addwf	??___ftge,w
  8158  0BA9  00F1               	movwf	___ftge@ff1
  8159  0BAA  3000               	movlw	0
  8160  0BAB  3D78               	addwfc	??___ftge+1,w
  8161  0BAC  00F2               	movwf	___ftge@ff1+1
  8162  0BAD  3080               	movlw	128
  8163  0BAE  3D79               	addwfc	??___ftge+2,w
  8164  0BAF  00F3               	movwf	___ftge@ff1+2
  8165  0BB0                     l4462:	
  8166  0BB0  1FF6               	btfss	___ftge@ff2+2,7
  8167  0BB1  2BC6               	goto	l4466
  8168  0BB2  0974               	comf	___ftge@ff2,w
  8169  0BB3  00F7               	movwf	??___ftge
  8170  0BB4  0975               	comf	___ftge@ff2+1,w
  8171  0BB5  00F8               	movwf	??___ftge+1
  8172  0BB6  0976               	comf	___ftge@ff2+2,w
  8173  0BB7  00F9               	movwf	??___ftge+2
  8174  0BB8  0AF7               	incf	??___ftge,f
  8175  0BB9  1903               	skipnz
  8176  0BBA  0AF8               	incf	??___ftge+1,f
  8177  0BBB  1903               	skipnz
  8178  0BBC  0AF9               	incf	??___ftge+2,f
  8179  0BBD  3000               	movlw	0
  8180  0BBE  0777               	addwf	??___ftge,w
  8181  0BBF  00F4               	movwf	___ftge@ff2
  8182  0BC0  3000               	movlw	0
  8183  0BC1  3D78               	addwfc	??___ftge+1,w
  8184  0BC2  00F5               	movwf	___ftge@ff2+1
  8185  0BC3  3080               	movlw	128
  8186  0BC4  3D79               	addwfc	??___ftge+2,w
  8187  0BC5  00F6               	movwf	___ftge@ff2+2
  8188  0BC6                     l4466:	
  8189  0BC6  3080               	movlw	128
  8190  0BC7  06F3               	xorwf	___ftge@ff1+2,f
  8191  0BC8  3080               	movlw	128
  8192  0BC9  06F6               	xorwf	___ftge@ff2+2,f
  8193  0BCA  0876               	movf	___ftge@ff2+2,w
  8194  0BCB  0273               	subwf	___ftge@ff1+2,w
  8195  0BCC  1D03               	skipz
  8196  0BCD  0008               	return
  8197  0BCE  0875               	movf	___ftge@ff2+1,w
  8198  0BCF  0272               	subwf	___ftge@ff1+1,w
  8199  0BD0  1D03               	skipz
  8200  0BD1  0008               	return
  8201  0BD2  0874               	movf	___ftge@ff2,w
  8202  0BD3  0271               	subwf	___ftge@ff1,w
  8203  0BD4  0008               	return
  8204  0BD5                     __end_of___ftge:	
  8205                           
  8206                           	psect	text42
  8207  043D                     __ptext42:	
  8208 ;; *************** function ___ftadd *****************
  8209 ;; Defined at:
  8210 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;  f1              3   19[BANK0 ] float 
  8213 ;;  f2              3   22[BANK0 ] float 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  exp1            1   31[BANK0 ] unsigned char 
  8216 ;;  exp2            1   30[BANK0 ] unsigned char 
  8217 ;;  sign            1   29[BANK0 ] unsigned char 
  8218 ;; Return value:  Size  Location     Type
  8219 ;;                  3   19[BANK0 ] float 
  8220 ;; Registers used:
  8221 ;;		wreg, status,2, status,0, pclath, cstack
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8227 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;Total ram usage:       13 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; Hardware stack levels required when called:    3
  8234 ;; This function calls:
  8235 ;;		___ftpack
  8236 ;; This function is called by:
  8237 ;;		_ADCConv
  8238 ;;		_ADCGetTempCCal
  8239 ;;		_floor
  8240 ;;		___ftsub
  8241 ;;		_log
  8242 ;;		_eval_poly
  8243 ;; This function uses a non-reentrant model
  8244 ;;
  8245                           
  8246                           
  8247                           ;psect for function ___ftadd
  8248  043D                     ___ftadd:	
  8249                           
  8250                           ;incstack = 0
  8251                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8252  043D  0020               	movlb	0	; select bank0
  8253  043E  0833               	movf	___ftadd@f1,w
  8254  043F  00B9               	movwf	??___ftadd
  8255  0440  0834               	movf	___ftadd@f1+1,w
  8256  0441  00BA               	movwf	??___ftadd+1
  8257  0442  0835               	movf	___ftadd@f1+2,w
  8258  0443  00BB               	movwf	??___ftadd+2
  8259  0444  1003               	clrc
  8260  0445  0D3A               	rlf	??___ftadd+1,w
  8261  0446  0D3B               	rlf	??___ftadd+2,w
  8262  0447  00BC               	movwf	??___ftadd+3
  8263  0448  083C               	movf	??___ftadd+3,w
  8264  0449  00BF               	movwf	___ftadd@exp1
  8265  044A  0836               	movf	___ftadd@f2,w
  8266  044B  00B9               	movwf	??___ftadd
  8267  044C  0837               	movf	___ftadd@f2+1,w
  8268  044D  00BA               	movwf	??___ftadd+1
  8269  044E  0838               	movf	___ftadd@f2+2,w
  8270  044F  00BB               	movwf	??___ftadd+2
  8271  0450  1003               	clrc
  8272  0451  0D3A               	rlf	??___ftadd+1,w
  8273  0452  0D3B               	rlf	??___ftadd+2,w
  8274  0453  00BC               	movwf	??___ftadd+3
  8275  0454  083C               	movf	??___ftadd+3,w
  8276  0455  00BE               	movwf	___ftadd@exp2
  8277  0456  083F               	movf	___ftadd@exp1,w
  8278  0457  1903               	btfsc	3,2
  8279  0458  2C65               	goto	l5364
  8280  0459  083E               	movf	___ftadd@exp2,w
  8281  045A  023F               	subwf	___ftadd@exp1,w
  8282  045B  1803               	skipnc
  8283  045C  2C6C               	goto	l5368
  8284  045D  033F               	decf	___ftadd@exp1,w
  8285  045E  3AFF               	xorlw	255
  8286  045F  073E               	addwf	___ftadd@exp2,w
  8287  0460  00B9               	movwf	??___ftadd
  8288  0461  3019               	movlw	25
  8289  0462  0239               	subwf	??___ftadd,w
  8290  0463  1C03               	skipc
  8291  0464  2C6C               	goto	l5368
  8292  0465                     l5364:	
  8293  0465  0836               	movf	___ftadd@f2,w
  8294  0466  00B3               	movwf	?___ftadd
  8295  0467  0837               	movf	___ftadd@f2+1,w
  8296  0468  00B4               	movwf	?___ftadd+1
  8297  0469  0838               	movf	___ftadd@f2+2,w
  8298  046A  00B5               	movwf	?___ftadd+2
  8299  046B  0008               	return
  8300  046C                     l5368:	
  8301  046C  083E               	movf	___ftadd@exp2,w
  8302  046D  1903               	btfsc	3,2
  8303  046E  0008               	return
  8304  046F  083F               	movf	___ftadd@exp1,w
  8305  0470  023E               	subwf	___ftadd@exp2,w
  8306  0471  1803               	skipnc
  8307  0472  2C7B               	goto	l5374
  8308  0473  033E               	decf	___ftadd@exp2,w
  8309  0474  3AFF               	xorlw	255
  8310  0475  073F               	addwf	___ftadd@exp1,w
  8311  0476  00B9               	movwf	??___ftadd
  8312  0477  3019               	movlw	25
  8313  0478  0239               	subwf	??___ftadd,w
  8314  0479  1803               	btfsc	3,0
  8315  047A  0008               	return
  8316  047B                     l5374:	
  8317  047B  3006               	movlw	6
  8318  047C  00B9               	movwf	??___ftadd
  8319  047D  0839               	movf	??___ftadd,w
  8320  047E  00BD               	movwf	___ftadd@sign
  8321  047F  1BB5               	btfsc	___ftadd@f1+2,7
  8322  0480  17BD               	bsf	___ftadd@sign,7
  8323  0481  1BB8               	btfsc	___ftadd@f2+2,7
  8324  0482  173D               	bsf	___ftadd@sign,6
  8325  0483  17B4               	bsf	___ftadd@f1+1,7
  8326  0484  30FF               	movlw	255
  8327  0485  05B3               	andwf	___ftadd@f1,f
  8328  0486  30FF               	movlw	255
  8329  0487  05B4               	andwf	___ftadd@f1+1,f
  8330  0488  3000               	movlw	0
  8331  0489  05B5               	andwf	___ftadd@f1+2,f
  8332  048A  17B7               	bsf	___ftadd@f2+1,7
  8333  048B  30FF               	movlw	255
  8334  048C  05B6               	andwf	___ftadd@f2,f
  8335  048D  30FF               	movlw	255
  8336  048E  05B7               	andwf	___ftadd@f2+1,f
  8337  048F  3000               	movlw	0
  8338  0490  05B8               	andwf	___ftadd@f2+2,f
  8339  0491  083E               	movf	___ftadd@exp2,w
  8340  0492  023F               	subwf	___ftadd@exp1,w
  8341  0493  1803               	skipnc
  8342  0494  2CB7               	goto	l5396
  8343  0495                     l5386:	
  8344  0495  3001               	movlw	1
  8345  0496                     u4115:	
  8346  0496  35B6               	lslf	___ftadd@f2,f
  8347  0497  0DB7               	rlf	___ftadd@f2+1,f
  8348  0498  0DB8               	rlf	___ftadd@f2+2,f
  8349  0499  0B89               	decfsz	9,f
  8350  049A  2C96               	goto	u4115
  8351  049B  3001               	movlw	1
  8352  049C  02BE               	subwf	___ftadd@exp2,f
  8353  049D  083E               	movf	___ftadd@exp2,w
  8354  049E  063F               	xorwf	___ftadd@exp1,w
  8355  049F  1903               	skipnz
  8356  04A0  2CB2               	goto	l5394
  8357  04A1  3001               	movlw	1
  8358  04A2  02BD               	subwf	___ftadd@sign,f
  8359  04A3  083D               	movf	___ftadd@sign,w
  8360  04A4  3907               	andlw	7
  8361  04A5  1903               	btfsc	3,2
  8362  04A6  2CB2               	goto	l5394
  8363  04A7  2C95               	goto	l5386
  8364  04A8                     l5392:	
  8365  04A8  3001               	movlw	1
  8366  04A9                     u4145:	
  8367  04A9  36B5               	lsrf	___ftadd@f1+2,f
  8368  04AA  0CB4               	rrf	___ftadd@f1+1,f
  8369  04AB  0CB3               	rrf	___ftadd@f1,f
  8370  04AC  0B89               	decfsz	9,f
  8371  04AD  2CA9               	goto	u4145
  8372  04AE  3001               	movlw	1
  8373  04AF  00B9               	movwf	??___ftadd
  8374  04B0  0839               	movf	??___ftadd,w
  8375  04B1  07BF               	addwf	___ftadd@exp1,f
  8376  04B2                     l5394:	
  8377  04B2  083F               	movf	___ftadd@exp1,w
  8378  04B3  063E               	xorwf	___ftadd@exp2,w
  8379  04B4  1903               	btfsc	3,2
  8380  04B5  2CDC               	goto	l933
  8381  04B6  2CA8               	goto	l5392
  8382  04B7                     l5396:	
  8383  04B7  083F               	movf	___ftadd@exp1,w
  8384  04B8  023E               	subwf	___ftadd@exp2,w
  8385  04B9  1803               	skipnc
  8386  04BA  2CDC               	goto	l933
  8387  04BB                     l5398:	
  8388  04BB  3001               	movlw	1
  8389  04BC                     u4175:	
  8390  04BC  35B3               	lslf	___ftadd@f1,f
  8391  04BD  0DB4               	rlf	___ftadd@f1+1,f
  8392  04BE  0DB5               	rlf	___ftadd@f1+2,f
  8393  04BF  0B89               	decfsz	9,f
  8394  04C0  2CBC               	goto	u4175
  8395  04C1  3001               	movlw	1
  8396  04C2  02BF               	subwf	___ftadd@exp1,f
  8397  04C3  083E               	movf	___ftadd@exp2,w
  8398  04C4  063F               	xorwf	___ftadd@exp1,w
  8399  04C5  1903               	skipnz
  8400  04C6  2CD8               	goto	l5406
  8401  04C7  3001               	movlw	1
  8402  04C8  02BD               	subwf	___ftadd@sign,f
  8403  04C9  083D               	movf	___ftadd@sign,w
  8404  04CA  3907               	andlw	7
  8405  04CB  1903               	btfsc	3,2
  8406  04CC  2CD8               	goto	l5406
  8407  04CD  2CBB               	goto	l5398
  8408  04CE                     l5404:	
  8409  04CE  3001               	movlw	1
  8410  04CF                     u4205:	
  8411  04CF  36B8               	lsrf	___ftadd@f2+2,f
  8412  04D0  0CB7               	rrf	___ftadd@f2+1,f
  8413  04D1  0CB6               	rrf	___ftadd@f2,f
  8414  04D2  0B89               	decfsz	9,f
  8415  04D3  2CCF               	goto	u4205
  8416  04D4  3001               	movlw	1
  8417  04D5  00B9               	movwf	??___ftadd
  8418  04D6  0839               	movf	??___ftadd,w
  8419  04D7  07BE               	addwf	___ftadd@exp2,f
  8420  04D8                     l5406:	
  8421  04D8  083F               	movf	___ftadd@exp1,w
  8422  04D9  063E               	xorwf	___ftadd@exp2,w
  8423  04DA  1D03               	skipz
  8424  04DB  2CCE               	goto	l5404
  8425  04DC                     l933:	
  8426  04DC  1FBD               	btfss	___ftadd@sign,7
  8427  04DD  2CEE               	goto	l5410
  8428  04DE  30FF               	movlw	255
  8429  04DF  06B3               	xorwf	___ftadd@f1,f
  8430  04E0  30FF               	movlw	255
  8431  04E1  06B4               	xorwf	___ftadd@f1+1,f
  8432  04E2  30FF               	movlw	255
  8433  04E3  06B5               	xorwf	___ftadd@f1+2,f
  8434  04E4  3001               	movlw	1
  8435  04E5  07B3               	addwf	___ftadd@f1,f
  8436  04E6  3000               	movlw	0
  8437  04E7  1803               	skipnc
  8438  04E8  3001               	movlw	1
  8439  04E9  07B4               	addwf	___ftadd@f1+1,f
  8440  04EA  3000               	movlw	0
  8441  04EB  1803               	skipnc
  8442  04EC  3001               	movlw	1
  8443  04ED  07B5               	addwf	___ftadd@f1+2,f
  8444  04EE                     l5410:	
  8445  04EE  1F3D               	btfss	___ftadd@sign,6
  8446  04EF  2D00               	goto	l5414
  8447  04F0  30FF               	movlw	255
  8448  04F1  06B6               	xorwf	___ftadd@f2,f
  8449  04F2  30FF               	movlw	255
  8450  04F3  06B7               	xorwf	___ftadd@f2+1,f
  8451  04F4  30FF               	movlw	255
  8452  04F5  06B8               	xorwf	___ftadd@f2+2,f
  8453  04F6  3001               	movlw	1
  8454  04F7  07B6               	addwf	___ftadd@f2,f
  8455  04F8  3000               	movlw	0
  8456  04F9  1803               	skipnc
  8457  04FA  3001               	movlw	1
  8458  04FB  07B7               	addwf	___ftadd@f2+1,f
  8459  04FC  3000               	movlw	0
  8460  04FD  1803               	skipnc
  8461  04FE  3001               	movlw	1
  8462  04FF  07B8               	addwf	___ftadd@f2+2,f
  8463  0500                     l5414:	
  8464  0500  01BD               	clrf	___ftadd@sign
  8465  0501  0833               	movf	___ftadd@f1,w
  8466  0502  07B6               	addwf	___ftadd@f2,f
  8467  0503  0834               	movf	___ftadd@f1+1,w
  8468  0504  3DB7               	addwfc	___ftadd@f2+1,f
  8469  0505  0835               	movf	___ftadd@f1+2,w
  8470  0506  3DB8               	addwfc	___ftadd@f2+2,f
  8471  0507  1FB8               	btfss	___ftadd@f2+2,7
  8472  0508  2D1B               	goto	l5424
  8473  0509  30FF               	movlw	255
  8474  050A  06B6               	xorwf	___ftadd@f2,f
  8475  050B  30FF               	movlw	255
  8476  050C  06B7               	xorwf	___ftadd@f2+1,f
  8477  050D  30FF               	movlw	255
  8478  050E  06B8               	xorwf	___ftadd@f2+2,f
  8479  050F  3001               	movlw	1
  8480  0510  07B6               	addwf	___ftadd@f2,f
  8481  0511  3000               	movlw	0
  8482  0512  1803               	skipnc
  8483  0513  3001               	movlw	1
  8484  0514  07B7               	addwf	___ftadd@f2+1,f
  8485  0515  3000               	movlw	0
  8486  0516  1803               	skipnc
  8487  0517  3001               	movlw	1
  8488  0518  07B8               	addwf	___ftadd@f2+2,f
  8489  0519  01BD               	clrf	___ftadd@sign
  8490  051A  0ABD               	incf	___ftadd@sign,f
  8491  051B                     l5424:	
  8492  051B  0836               	movf	___ftadd@f2,w
  8493  051C  00F1               	movwf	?___ftpack
  8494  051D  0837               	movf	___ftadd@f2+1,w
  8495  051E  00F2               	movwf	?___ftpack+1
  8496  051F  0838               	movf	___ftadd@f2+2,w
  8497  0520  00F3               	movwf	?___ftpack+2
  8498  0521  083F               	movf	___ftadd@exp1,w
  8499  0522  00B9               	movwf	??___ftadd
  8500  0523  0839               	movf	??___ftadd,w
  8501  0524  00F4               	movwf	?___ftpack+3
  8502  0525  083D               	movf	___ftadd@sign,w
  8503  0526  00BA               	movwf	??___ftadd+1
  8504  0527  083A               	movf	??___ftadd+1,w
  8505  0528  00F5               	movwf	?___ftpack+4
  8506  0529  318D  25BA         	fcall	___ftpack
  8507  052B  0871               	movf	?___ftpack,w
  8508  052C  0020               	movlb	0	; select bank0
  8509  052D  00B3               	movwf	?___ftadd
  8510  052E  0872               	movf	?___ftpack+1,w
  8511  052F  00B4               	movwf	?___ftadd+1
  8512  0530  0873               	movf	?___ftpack+2,w
  8513  0531  00B5               	movwf	?___ftadd+2
  8514  0532  0008               	return
  8515  0533                     __end_of___ftadd:	
  8516                           
  8517                           	psect	text43
  8518  0BD5                     __ptext43:	
  8519 ;; *************** function ___altoft *****************
  8520 ;; Defined at:
  8521 ;;		line 43 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\altoft.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;  c               4    6[BANK0 ] long 
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  sign            1   11[BANK0 ] unsigned char 
  8526 ;;  exp             1   10[BANK0 ] unsigned char 
  8527 ;; Return value:  Size  Location     Type
  8528 ;;                  3    6[BANK0 ] float 
  8529 ;; Registers used:
  8530 ;;		wreg, status,2, status,0, pclath, cstack
  8531 ;; Tracked objects:
  8532 ;;		On entry : 0/0
  8533 ;;		On exit  : 0/0
  8534 ;;		Unchanged: 0/0
  8535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;Total ram usage:        8 bytes
  8541 ;; Hardware stack levels used:    1
  8542 ;; Hardware stack levels required when called:    3
  8543 ;; This function calls:
  8544 ;;		___ftpack
  8545 ;; This function is called by:
  8546 ;;		_floor
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           
  8551                           ;psect for function ___altoft
  8552  0BD5                     ___altoft:	
  8553                           
  8554                           ;incstack = 0
  8555                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  8556  0BD5  0020               	movlb	0	; select bank0
  8557  0BD6  01AB               	clrf	___altoft@sign
  8558  0BD7  308E               	movlw	142
  8559  0BD8  00F9               	movwf	??___altoft
  8560  0BD9  0879               	movf	??___altoft,w
  8561  0BDA  00AA               	movwf	___altoft@exp
  8562  0BDB  1FA9               	btfss	___altoft@c+3,7
  8563  0BDC  2BEA               	goto	l5300
  8564  0BDD  09A6               	comf	___altoft@c,f
  8565  0BDE  09A7               	comf	___altoft@c+1,f
  8566  0BDF  09A8               	comf	___altoft@c+2,f
  8567  0BE0  09A9               	comf	___altoft@c+3,f
  8568  0BE1  0AA6               	incf	___altoft@c,f
  8569  0BE2  1903               	skipnz
  8570  0BE3  0AA7               	incf	___altoft@c+1,f
  8571  0BE4  1903               	skipnz
  8572  0BE5  0AA8               	incf	___altoft@c+2,f
  8573  0BE6  1903               	skipnz
  8574  0BE7  0AA9               	incf	___altoft@c+3,f
  8575  0BE8  01AB               	clrf	___altoft@sign
  8576  0BE9  0AAB               	incf	___altoft@sign,f
  8577  0BEA                     l5300:	
  8578  0BEA  30FF               	movlw	255
  8579  0BEB  0529               	andwf	___altoft@c+3,w
  8580  0BEC  1903               	btfsc	3,2
  8581  0BED  2BFA               	goto	l5302
  8582  0BEE  3001               	movlw	1
  8583  0BEF                     u3945:	
  8584  0BEF  36A9               	lsrf	___altoft@c+3,f
  8585  0BF0  0CA8               	rrf	___altoft@c+2,f
  8586  0BF1  0CA7               	rrf	___altoft@c+1,f
  8587  0BF2  0CA6               	rrf	___altoft@c,f
  8588  0BF3  0B89               	decfsz	9,f
  8589  0BF4  2BEF               	goto	u3945
  8590  0BF5  3001               	movlw	1
  8591  0BF6  00F9               	movwf	??___altoft
  8592  0BF7  0879               	movf	??___altoft,w
  8593  0BF8  07AA               	addwf	___altoft@exp,f
  8594  0BF9  2BEA               	goto	l5300
  8595  0BFA                     l5302:	
  8596  0BFA  0826               	movf	___altoft@c,w
  8597  0BFB  00F1               	movwf	?___ftpack
  8598  0BFC  0827               	movf	___altoft@c+1,w
  8599  0BFD  00F2               	movwf	?___ftpack+1
  8600  0BFE  0828               	movf	___altoft@c+2,w
  8601  0BFF  00F3               	movwf	?___ftpack+2
  8602  0C00  082A               	movf	___altoft@exp,w
  8603  0C01  00F9               	movwf	??___altoft
  8604  0C02  0879               	movf	??___altoft,w
  8605  0C03  00F4               	movwf	?___ftpack+3
  8606  0C04  082B               	movf	___altoft@sign,w
  8607  0C05  00FA               	movwf	??___altoft+1
  8608  0C06  087A               	movf	??___altoft+1,w
  8609  0C07  00F5               	movwf	?___ftpack+4
  8610  0C08  318D  25BA         	fcall	___ftpack
  8611  0C0A  0871               	movf	?___ftpack,w
  8612  0C0B  0020               	movlb	0	; select bank0
  8613  0C0C  00A6               	movwf	?___altoft
  8614  0C0D  0872               	movf	?___ftpack+1,w
  8615  0C0E  00A7               	movwf	?___altoft+1
  8616  0C0F  0873               	movf	?___ftpack+2,w
  8617  0C10  00A8               	movwf	?___altoft+2
  8618  0C11  0008               	return
  8619  0C12                     __end_of___altoft:	
  8620                           
  8621                           	psect	text44
  8622  09B2                     __ptext44:	
  8623 ;; *************** function ___awtoft *****************
  8624 ;; Defined at:
  8625 ;;		line 33 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awtoft.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  c               2    9[COMMON] int 
  8628 ;; Auto vars:     Size  Location     Type
  8629 ;;  sign            1    2[BANK0 ] unsigned char 
  8630 ;; Return value:  Size  Location     Type
  8631 ;;                  3    9[COMMON] float 
  8632 ;; Registers used:
  8633 ;;		wreg, status,2, status,0, pclath, cstack
  8634 ;; Tracked objects:
  8635 ;;		On entry : 0/0
  8636 ;;		On exit  : 0/0
  8637 ;;		Unchanged: 0/0
  8638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8639 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;Total ram usage:        6 bytes
  8644 ;; Hardware stack levels used:    1
  8645 ;; Hardware stack levels required when called:    3
  8646 ;; This function calls:
  8647 ;;		___ftpack
  8648 ;; This function is called by:
  8649 ;;		_ADCConv
  8650 ;;		_exp
  8651 ;;		_log
  8652 ;; This function uses a non-reentrant model
  8653 ;;
  8654                           
  8655                           
  8656                           ;psect for function ___awtoft
  8657  09B2                     ___awtoft:	
  8658                           
  8659                           ;incstack = 0
  8660                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8661  09B2  0020               	movlb	0	; select bank0
  8662  09B3  01A2               	clrf	___awtoft@sign
  8663  09B4  1FFA               	btfss	___awtoft@c+1,7
  8664  09B5  29BD               	goto	l5314
  8665  09B6  09F9               	comf	___awtoft@c,f
  8666  09B7  09FA               	comf	___awtoft@c+1,f
  8667  09B8  0AF9               	incf	___awtoft@c,f
  8668  09B9  1903               	skipnz
  8669  09BA  0AFA               	incf	___awtoft@c+1,f
  8670  09BB  01A2               	clrf	___awtoft@sign
  8671  09BC  0AA2               	incf	___awtoft@sign,f
  8672  09BD                     l5314:	
  8673  09BD  0879               	movf	___awtoft@c,w
  8674  09BE  00F1               	movwf	?___ftpack
  8675  09BF  087A               	movf	___awtoft@c+1,w
  8676  09C0  00F2               	movwf	?___ftpack+1
  8677  09C1  01F3               	clrf	?___ftpack+2
  8678  09C2  308E               	movlw	142
  8679  09C3  00A0               	movwf	??___awtoft
  8680  09C4  0820               	movf	??___awtoft,w
  8681  09C5  00F4               	movwf	?___ftpack+3
  8682  09C6  0822               	movf	___awtoft@sign,w
  8683  09C7  00A1               	movwf	??___awtoft+1
  8684  09C8  0821               	movf	??___awtoft+1,w
  8685  09C9  00F5               	movwf	?___ftpack+4
  8686  09CA  318D  25BA         	fcall	___ftpack
  8687  09CC  0871               	movf	?___ftpack,w
  8688  09CD  00F9               	movwf	?___awtoft
  8689  09CE  0872               	movf	?___ftpack+1,w
  8690  09CF  00FA               	movwf	?___awtoft+1
  8691  09D0  0873               	movf	?___ftpack+2,w
  8692  09D1  00FB               	movwf	?___awtoft+2
  8693  09D2  0008               	return
  8694  09D3                     __end_of___awtoft:	
  8695                           
  8696                           	psect	text45
  8697  0956                     __ptext45:	
  8698 ;; *************** function _LEDNormalFlash *****************
  8699 ;; Defined at:
  8700 ;;		line 25 in file "LED.c"
  8701 ;; Parameters:    Size  Location     Type
  8702 ;;  num             1    wreg     unsigned char 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  num             1    8[COMMON] unsigned char 
  8705 ;;  i               1    9[COMMON] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, status,0, pclath, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;Total ram usage:        3 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    3
  8722 ;; This function calls:
  8723 ;;		_DLYDelay_ms
  8724 ;; This function is called by:
  8725 ;;		_PGMSelLong
  8726 ;;		_RTXReadPkt
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function _LEDNormalFlash
  8732  0956                     _LEDNormalFlash:	
  8733                           
  8734                           ;incstack = 0
  8735                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  8736                           ;LEDNormalFlash@num stored from wreg
  8737  0956  00F8               	movwf	LEDNormalFlash@num
  8738                           
  8739                           ;LED.c: 26: unsigned char i;
  8740                           ;LED.c: 28: for(i=0;i<num;i++)
  8741  0957  01F9               	clrf	LEDNormalFlash@i
  8742  0958                     l4940:	
  8743  0958  0878               	movf	LEDNormalFlash@num,w
  8744  0959  0279               	subwf	LEDNormalFlash@i,w
  8745  095A  1803               	btfsc	3,0
  8746  095B  0008               	return
  8747  095C  0064               	clrwdt	;# 
  8748                           
  8749                           ;LED.c: 31: LATCbits.LATC7=0;
  8750  095D  0022               	movlb	2	; select bank2
  8751  095E  138E               	bcf	14,7	;volatile
  8752                           
  8753                           ;LED.c: 32: DLYDelay_ms(200);
  8754  095F  30C8               	movlw	200
  8755  0960  00F1               	movwf	?_DLYDelay_ms
  8756  0961  3000               	movlw	0
  8757  0962  00F2               	movwf	?_DLYDelay_ms+1
  8758  0963  3188  207B  3189   	fcall	_DLYDelay_ms
  8759                           
  8760                           ;LED.c: 33: LATCbits.LATC7=1;
  8761  0966  0022               	movlb	2	; select bank2
  8762  0967  178E               	bsf	14,7	;volatile
  8763                           
  8764                           ;LED.c: 34: DLYDelay_ms(200);
  8765  0968  30C8               	movlw	200
  8766  0969  00F1               	movwf	?_DLYDelay_ms
  8767  096A  3000               	movlw	0
  8768  096B  00F2               	movwf	?_DLYDelay_ms+1
  8769  096C  3188  207B  3189   	fcall	_DLYDelay_ms
  8770  096F  3001               	movlw	1
  8771  0970  00F7               	movwf	??_LEDNormalFlash
  8772  0971  0877               	movf	??_LEDNormalFlash,w
  8773  0972  07F9               	addwf	LEDNormalFlash@i,f
  8774  0973  2958               	goto	l4940
  8775  0974                     __end_of_LEDNormalFlash:	
  8776                           
  8777                           	psect	text46
  8778  087B                     __ptext46:	
  8779 ;; *************** function _DLYDelay_ms *****************
  8780 ;; Defined at:
  8781 ;;		line 18 in file "DLY.c"
  8782 ;; Parameters:    Size  Location     Type
  8783 ;;  val             2    1[COMMON] unsigned short 
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;  i               2    5[COMMON] unsigned short 
  8786 ;; Return value:  Size  Location     Type
  8787 ;;		None               void
  8788 ;; Registers used:
  8789 ;;		wreg, status,2
  8790 ;; Tracked objects:
  8791 ;;		On entry : 0/0
  8792 ;;		On exit  : 0/0
  8793 ;;		Unchanged: 0/0
  8794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8795 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8799 ;;Total ram usage:        6 bytes
  8800 ;; Hardware stack levels used:    1
  8801 ;; Hardware stack levels required when called:    2
  8802 ;; This function calls:
  8803 ;;		Nothing
  8804 ;; This function is called by:
  8805 ;;		_CC1Init
  8806 ;;		_LEDNormalFlash
  8807 ;;		_LEDFastFlash
  8808 ;;		_RTXAwake
  8809 ;;		_RTXStartSendData
  8810 ;;		_LEDVFastFlash
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _DLYDelay_ms
  8816  087B                     _DLYDelay_ms:	
  8817                           
  8818                           ;DLY.c: 19: unsigned short i;
  8819                           ;DLY.c: 21: for(i=0;i<val;i++)
  8820                           
  8821                           ;incstack = 0
  8822                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  8823  087B  01F5               	clrf	DLYDelay_ms@i
  8824  087C  01F6               	clrf	DLYDelay_ms@i+1
  8825  087D                     l153:	
  8826  087D  0872               	movf	DLYDelay_ms@val+1,w
  8827  087E  0276               	subwf	DLYDelay_ms@i+1,w
  8828  087F  1D03               	skipz
  8829  0880  2883               	goto	u3505
  8830  0881  0871               	movf	DLYDelay_ms@val,w
  8831  0882  0275               	subwf	DLYDelay_ms@i,w
  8832  0883                     u3505:	
  8833  0883  1803               	btfsc	3,0
  8834  0884  0008               	return
  8835  0885  0064               	clrwdt	;# 
  8836                           
  8837                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  8838  0886  3003               	movlw	3
  8839  0887  00F4               	movwf	??_DLYDelay_ms+1
  8840  0888  3097               	movlw	151
  8841  0889  00F3               	movwf	??_DLYDelay_ms
  8842  088A                     u4467:	
  8843  088A  0BF3               	decfsz	??_DLYDelay_ms,f
  8844  088B  288A               	goto	u4467
  8845  088C  0BF4               	decfsz	??_DLYDelay_ms+1,f
  8846  088D  288A               	goto	u4467
  8847  088E  288F               	nop2
  8848  088F  3001               	movlw	1
  8849  0890  07F5               	addwf	DLYDelay_ms@i,f
  8850  0891  3000               	movlw	0
  8851  0892  3DF6               	addwfc	DLYDelay_ms@i+1,f
  8852  0893  287D               	goto	l153
  8853  0894                     __end_of_DLYDelay_ms:	
  8854                           
  8855                           	psect	text47
  8856  084B                     __ptext47:	
  8857 ;; *************** function _PGMInit *****************
  8858 ;; Defined at:
  8859 ;;		line 25 in file "PGM.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;  state           1    wreg     unsigned char 
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;  state           1   70[BANK0 ] unsigned char 
  8864 ;; Return value:  Size  Location     Type
  8865 ;;		None               void
  8866 ;; Registers used:
  8867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;Total ram usage:        1 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    6
  8880 ;; This function calls:
  8881 ;;		_PGMReadNvm
  8882 ;;		_PGMCheckNvm
  8883 ;; This function is called by:
  8884 ;;		_main
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           
  8889                           ;psect for function _PGMInit
  8890  084B                     _PGMInit:	
  8891                           
  8892                           ;incstack = 0
  8893                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8894                           ;PGMInit@state stored from wreg
  8895  084B  0020               	movlb	0	; select bank0
  8896  084C  00E6               	movwf	PGMInit@state
  8897                           
  8898                           ;PGM.c: 26: switch(state)
  8899  084D  2859               	goto	l5012
  8900  084E                     l5002:	
  8901                           ;PGM.c: 27: {
  8902                           ;PGM.c: 28: case 0:
  8903                           
  8904                           
  8905                           ;PGM.c: 30: T1CON=0b00000001;
  8906  084E  3001               	movlw	1
  8907  084F  0098               	movwf	24	;volatile
  8908                           
  8909                           ;PGM.c: 31: break;
  8910  0850  0008               	return
  8911  0851                     l5004:	
  8912                           ;PGM.c: 32: case 1:
  8913                           
  8914                           
  8915                           ;PGM.c: 34: tmrPgm=0;
  8916  0851  01EC               	clrf	_tmrPgm
  8917                           
  8918                           ;PGM.c: 35: pgm_flg.val=0;
  8919  0852  01EA               	clrf	_pgm_flg
  8920                           
  8921                           ;PGM.c: 36: PGMReadNvm();
  8922  0853  3197  2789  3188   	fcall	_PGMReadNvm
  8923                           
  8924                           ;PGM.c: 37: PGMCheckNvm();
  8925  0856  3188  203F         	fcall	_PGMCheckNvm
  8926                           
  8927                           ;PGM.c: 42: }
  8928                           
  8929                           ;PGM.c: 38: break;
  8930  0858  0008               	return
  8931  0859                     l5012:	
  8932  0859  0020               	movlb	0	; select bank0
  8933  085A  0866               	movf	PGMInit@state,w
  8934                           
  8935                           ; Switch size 1, requested type "space"
  8936                           ; Number of cases is 2, Range of values is 0 to 1
  8937                           ; switch strategies available:
  8938                           ; Name         Instructions Cycles
  8939                           ; simple_byte            7     4 (average)
  8940                           ; direct_byte           10     6 (fixed)
  8941                           ; jumptable            260     6 (fixed)
  8942                           ;	Chosen strategy is simple_byte
  8943  085B  3A00               	xorlw	0	; case 0
  8944  085C  1903               	skipnz
  8945  085D  284E               	goto	l5002
  8946  085E  3A01               	xorlw	1	; case 1
  8947  085F  1903               	skipnz
  8948  0860  2851               	goto	l5004
  8949  0861  2862               	goto	l387
  8950  0862                     l387:	
  8951  0862  0008               	return
  8952  0863                     __end_of_PGMInit:	
  8953                           
  8954                           	psect	text48
  8955  083F                     __ptext48:	
  8956 ;; *************** function _PGMCheckNvm *****************
  8957 ;; Defined at:
  8958 ;;		line 74 in file "PGM.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;		None
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;		None
  8963 ;; Return value:  Size  Location     Type
  8964 ;;		None               void
  8965 ;; Registers used:
  8966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;Total ram usage:        0 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    5
  8979 ;; This function calls:
  8980 ;;		_PGMNvmReset
  8981 ;; This function is called by:
  8982 ;;		_PGMInit
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function _PGMCheckNvm
  8988  083F                     _PGMCheckNvm:	
  8989                           
  8990                           ;PGM.c: 75: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  8991                           
  8992                           ;incstack = 0
  8993                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8994  083F  0021               	movlb	1	; select bank1
  8995  0840  084A               	movf	_pgm_cfg^(0+128),w
  8996  0841  3AC5               	xorlw	197
  8997  0842  1D03               	skipz
  8998  0843  2848               	goto	l5018
  8999  0844  084B               	movf	(_pgm_cfg^(0+128)+1),w
  9000  0845  3A5C               	xorlw	92
  9001  0846  1903               	skipnz
  9002  0847  0008               	return
  9003  0848                     l5018:	
  9004                           
  9005                           ;PGM.c: 76: PGMNvmReset();
  9006  0848  3197  27AF         	fcall	_PGMNvmReset
  9007  084A  0008               	return
  9008  084B                     __end_of_PGMCheckNvm:	
  9009                           
  9010                           	psect	text49
  9011  17AF                     __ptext49:	
  9012 ;; *************** function _PGMNvmReset *****************
  9013 ;; Defined at:
  9014 ;;		line 80 in file "PGM.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;		None
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;		None
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;Total ram usage:        1 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    4
  9035 ;; This function calls:
  9036 ;;		_PGMWriteNvm
  9037 ;; This function is called by:
  9038 ;;		_PGMCheckNvm
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           
  9043                           ;psect for function _PGMNvmReset
  9044  17AF                     _PGMNvmReset:	
  9045                           
  9046                           ;PGM.c: 82: pgm_cfg.valChk1=0xC5;
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9050  17AF  30C5               	movlw	197
  9051  17B0  0020               	movlb	0	; select bank0
  9052  17B1  00E5               	movwf	??_PGMNvmReset
  9053  17B2  0865               	movf	??_PGMNvmReset,w
  9054  17B3  0021               	movlb	1	; select bank1
  9055  17B4  00CA               	movwf	_pgm_cfg^(0+128)
  9056                           
  9057                           ;PGM.c: 83: pgm_cfg.valChk2=0x5C;
  9058  17B5  305C               	movlw	92
  9059  17B6  0020               	movlb	0	; select bank0
  9060  17B7  00E5               	movwf	??_PGMNvmReset
  9061  17B8  0865               	movf	??_PGMNvmReset,w
  9062  17B9  0021               	movlb	1	; select bank1
  9063  17BA  00CB               	movwf	(_pgm_cfg^(0+128)+1)
  9064                           
  9065                           ;PGM.c: 84: pgm_cfg.menu=0x00;
  9066  17BB  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  9067                           
  9068                           ;PGM.c: 85: pgm_cfg.sensId=0x00;
  9069  17BC  01CD               	clrf	(_pgm_cfg^(0+128)+3)
  9070                           
  9071                           ;PGM.c: 86: pgm_cfg.baseId=0x00;
  9072  17BD  01CE               	clrf	(_pgm_cfg^(0+128)+4)
  9073                           
  9074                           ;PGM.c: 88: PGMWriteNvm();
  9075  17BE  3197  279C         	fcall	_PGMWriteNvm
  9076  17C0  0001               	reset	;# 
  9077  17C1  0008               	return
  9078  17C2                     __end_of_PGMNvmReset:	
  9079                           
  9080                           	psect	text50
  9081  179C                     __ptext50:	
  9082 ;; *************** function _PGMWriteNvm *****************
  9083 ;; Defined at:
  9084 ;;		line 69 in file "PGM.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;		None
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;		None
  9089 ;; Return value:  Size  Location     Type
  9090 ;;		None               void
  9091 ;; Registers used:
  9092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9100 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9101 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;Total ram usage:        4 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    3
  9105 ;; This function calls:
  9106 ;;		_NVMWrite
  9107 ;; This function is called by:
  9108 ;;		_PGMNvmReset
  9109 ;;		_PGMSelDown
  9110 ;;		_PGMSelLong
  9111 ;;		_RTXReadPkt
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _PGMWriteNvm
  9117  179C                     _PGMWriteNvm:	
  9118                           
  9119                           ;PGM.c: 70: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  9120                           
  9121                           ;incstack = 0
  9122                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9123  179C  303A               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9124  179D  00F8               	movwf	??_PGMWriteNvm
  9125  179E  3088               	movlw	(high __stringtab)| (0+128)
  9126  179F  00F9               	movwf	??_PGMWriteNvm+1
  9127  17A0  0878               	movf	??_PGMWriteNvm,w
  9128  17A1  00F1               	movwf	?_NVMWrite
  9129  17A2  0879               	movf	??_PGMWriteNvm+1,w
  9130  17A3  00F2               	movwf	?_NVMWrite+1
  9131  17A4  30CA               	movlw	_pgm_cfg& (0+255)
  9132  17A5  00FA               	movwf	??_PGMWriteNvm+2
  9133  17A6  087A               	movf	??_PGMWriteNvm+2,w
  9134  17A7  00F3               	movwf	?_NVMWrite+2
  9135  17A8  3005               	movlw	5
  9136  17A9  00FB               	movwf	??_PGMWriteNvm+3
  9137  17AA  087B               	movf	??_PGMWriteNvm+3,w
  9138  17AB  00F4               	movwf	?_NVMWrite+3
  9139  17AC  3185  2533         	fcall	_NVMWrite
  9140  17AE  0008               	return
  9141  17AF                     __end_of_PGMWriteNvm:	
  9142                           
  9143                           	psect	text51
  9144  0533                     __ptext51:	
  9145 ;; *************** function _NVMWrite *****************
  9146 ;; Defined at:
  9147 ;;		line 39 in file "NVM.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  addr            2    1[COMMON] unsigned short 
  9150 ;;  source          1    3[COMMON] PTR unsigned char 
  9151 ;;		 -> pgm_cfg(5), 
  9152 ;;  len             1    4[COMMON] unsigned char 
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  9155 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  9156 ;;  j               1   68[BANK0 ] unsigned char 
  9157 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  9158 ;;  i               1   66[BANK0 ] unsigned char 
  9159 ;; Return value:  Size  Location     Type
  9160 ;;		None               void
  9161 ;; Registers used:
  9162 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9163 ;; Tracked objects:
  9164 ;;		On entry : 0/0
  9165 ;;		On exit  : 0/0
  9166 ;;		Unchanged: 0/0
  9167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9168 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9171 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;Total ram usage:       76 bytes
  9173 ;; Hardware stack levels used:    1
  9174 ;; Hardware stack levels required when called:    2
  9175 ;; This function calls:
  9176 ;;		Nothing
  9177 ;; This function is called by:
  9178 ;;		_PGMWriteNvm
  9179 ;; This function uses a non-reentrant model
  9180 ;;
  9181                           
  9182                           
  9183                           ;psect for function _NVMWrite
  9184  0533                     _NVMWrite:	
  9185                           
  9186                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  9187                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  9188                           ;NVM.c: 43: INTCONbits.GIE=0;
  9189                           
  9190                           ;incstack = 0
  9191                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  9192  0533  138B               	bcf	11,7	;volatile
  9193                           
  9194                           ;NVM.c: 44: PMCON1bits.WREN=1;
  9195  0534  0023               	movlb	3	; select bank3
  9196  0535  1515               	bsf	21,2	;volatile
  9197                           
  9198                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  9199  0536  1315               	bcf	21,6	;volatile
  9200                           
  9201                           ;NVM.c: 48: i=0;
  9202  0537  0020               	movlb	0	; select bank0
  9203  0538  01E2               	clrf	NVMWrite@i
  9204                           
  9205                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  9206  0539  30E0               	movlw	224
  9207  053A  0571               	andwf	NVMWrite@addr,w
  9208  053B  00E0               	movwf	NVMWrite@rowAddr
  9209  053C  30FF               	movlw	255
  9210  053D  0572               	andwf	NVMWrite@addr+1,w
  9211  053E  00E1               	movwf	NVMWrite@rowAddr+1
  9212                           
  9213                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  9214  053F  0871               	movf	NVMWrite@addr,w
  9215  0540  391F               	andlw	31
  9216  0541  00F5               	movwf	??_NVMWrite
  9217  0542  0875               	movf	??_NVMWrite,w
  9218  0543  00E3               	movwf	NVMWrite@latchAddr
  9219  0544                     l256:	
  9220                           ;NVM.c: 52: while(i<len)
  9221                           
  9222  0544  0874               	movf	NVMWrite@len,w
  9223  0545  0262               	subwf	NVMWrite@i,w
  9224  0546  1803               	btfsc	3,0
  9225  0547  2DED               	goto	l276
  9226  0548  0064               	clrwdt	;# 
  9227                           
  9228                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9229  0549  0020               	movlb	0	; select bank0
  9230  054A  01E4               	clrf	NVMWrite@j
  9231  054B  3020               	movlw	32
  9232  054C  0264               	subwf	NVMWrite@j,w
  9233  054D  1803               	btfsc	3,0
  9234  054E  2D73               	goto	l259
  9235  054F                     l258:	
  9236  054F  0064               	clrwdt	;# 
  9237                           
  9238                           ;NVM.c: 60: PMADR=(rowAddr+j);
  9239  0550  0020               	movlb	0	; select bank0
  9240  0551  0864               	movf	NVMWrite@j,w
  9241  0552  0760               	addwf	NVMWrite@rowAddr,w
  9242  0553  00F5               	movwf	??_NVMWrite
  9243  0554  0861               	movf	NVMWrite@rowAddr+1,w
  9244  0555  1803               	skipnc
  9245  0556  0A61               	incf	NVMWrite@rowAddr+1,w
  9246  0557  00F6               	movwf	??_NVMWrite+1
  9247  0558  0875               	movf	??_NVMWrite,w
  9248  0559  0023               	movlb	3	; select bank3
  9249  055A  0091               	movwf	17	;volatile
  9250  055B  0876               	movf	??_NVMWrite+1,w
  9251  055C  0092               	movwf	18	;volatile
  9252                           
  9253                           ;NVM.c: 61: PMCON1bits.RD=1;
  9254  055D  1415               	bsf	21,0	;volatile
  9255  055E                     l260:	
  9256                           ;NVM.c: 62: while(PMCON1bits.RD);
  9257                           
  9258  055E  1815               	btfsc	21,0	;volatile
  9259  055F  2D5E               	goto	l260
  9260                           
  9261                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  9262  0560  0020               	movlb	0	; select bank0
  9263  0561  3564               	lslf	NVMWrite@j,w
  9264  0562  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9265  0563  0086               	movwf	6
  9266  0564  0187               	clrf	7
  9267  0565  0023               	movlb	3	; select bank3
  9268  0566  0813               	movf	19,w	;volatile
  9269  0567  3FC0               	movwi [0]fsr1
  9270  0568  0814               	movf	20,w	;volatile
  9271  0569  3FC1               	movwi [1]fsr1
  9272  056A  3001               	movlw	1
  9273  056B  00F5               	movwf	??_NVMWrite
  9274  056C  0875               	movf	??_NVMWrite,w
  9275  056D  0020               	movlb	0	; select bank0
  9276  056E  07E4               	addwf	NVMWrite@j,f
  9277  056F  3020               	movlw	32
  9278  0570  0264               	subwf	NVMWrite@j,w
  9279  0571  1C03               	skipc
  9280  0572  2D4F               	goto	l258
  9281  0573                     l259:	
  9282                           
  9283                           ;NVM.c: 64: }
  9284                           ;NVM.c: 67: PMCON1bits.FREE=1;
  9285  0573  0023               	movlb	3	; select bank3
  9286  0574  1615               	bsf	21,4	;volatile
  9287                           
  9288                           ;NVM.c: 68: PMADR=rowAddr;
  9289  0575  0020               	movlb	0	; select bank0
  9290  0576  0861               	movf	NVMWrite@rowAddr+1,w
  9291  0577  0023               	movlb	3	; select bank3
  9292  0578  0192               	clrf	18	;volatile
  9293  0579  0792               	addwf	18,f	;volatile
  9294  057A  0020               	movlb	0	; select bank0
  9295  057B  0860               	movf	NVMWrite@rowAddr,w
  9296  057C  0023               	movlb	3	; select bank3
  9297  057D  0191               	clrf	17	;volatile
  9298  057E  0791               	addwf	17,f	;volatile
  9299                           
  9300                           ;NVM.c: 69: PMCON2=0x55;
  9301  057F  3055               	movlw	85
  9302  0580  0096               	movwf	22	;volatile
  9303                           
  9304                           ;NVM.c: 70: PMCON2=0xAA;
  9305  0581  30AA               	movlw	170
  9306  0582  0096               	movwf	22	;volatile
  9307                           
  9308                           ;NVM.c: 71: PMCON1bits.WR=1;
  9309  0583  1495               	bsf	21,1	;volatile
  9310  0584                     l263:	
  9311                           ;NVM.c: 72: while(PMCON1bits.WR);
  9312                           
  9313  0584  1895               	btfsc	21,1	;volatile
  9314  0585  2D84               	goto	l263
  9315                           
  9316                           ;NVM.c: 73: _nop();
  9317  0586  0000               	nop
  9318                           
  9319                           ;NVM.c: 74: _nop();
  9320  0587  0000               	nop
  9321                           
  9322                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  9323  0588  3020               	movlw	32
  9324  0589  0020               	movlb	0	; select bank0
  9325  058A  0263               	subwf	NVMWrite@latchAddr,w
  9326  058B  1803               	btfsc	3,0
  9327  058C  2DB0               	goto	l3752
  9328  058D                     l266:	
  9329  058D  0064               	clrwdt	;# 
  9330                           
  9331                           ;NVM.c: 81: if(i>=len)
  9332  058E  0874               	movf	NVMWrite@len,w
  9333  058F  0020               	movlb	0	; select bank0
  9334  0590  0262               	subwf	NVMWrite@i,w
  9335  0591  1803               	btfsc	3,0
  9336  0592  2DB0               	goto	l3752
  9337                           
  9338                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  9339                           
  9340                           ;NVM.c: 82: break;
  9341  0593  0862               	movf	NVMWrite@i,w
  9342  0594  0773               	addwf	NVMWrite@source,w
  9343  0595  00F5               	movwf	??_NVMWrite
  9344  0596  0875               	movf	??_NVMWrite,w
  9345  0597  0086               	movwf	6
  9346  0598  0187               	clrf	7
  9347  0599  0801               	movf	1,w
  9348  059A  00F6               	movwf	??_NVMWrite+1
  9349  059B  01F7               	clrf	??_NVMWrite+2
  9350  059C  3563               	lslf	NVMWrite@latchAddr,w
  9351  059D  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9352  059E  0086               	movwf	6
  9353  059F  0187               	clrf	7
  9354  05A0  0876               	movf	??_NVMWrite+1,w
  9355  05A1  3FC0               	movwi [0]fsr1
  9356  05A2  0877               	movf	??_NVMWrite+2,w
  9357  05A3  3FC1               	movwi [1]fsr1
  9358                           
  9359                           ;NVM.c: 85: i++;
  9360  05A4  3001               	movlw	1
  9361  05A5  00F5               	movwf	??_NVMWrite
  9362  05A6  0875               	movf	??_NVMWrite,w
  9363  05A7  07E2               	addwf	NVMWrite@i,f
  9364  05A8  3001               	movlw	1
  9365  05A9  00F5               	movwf	??_NVMWrite
  9366  05AA  0875               	movf	??_NVMWrite,w
  9367  05AB  07E3               	addwf	NVMWrite@latchAddr,f
  9368  05AC  3020               	movlw	32
  9369  05AD  0263               	subwf	NVMWrite@latchAddr,w
  9370  05AE  1C03               	skipc
  9371  05AF  2D8D               	goto	l266
  9372  05B0                     l3752:	
  9373                           
  9374                           ;NVM.c: 86: }
  9375                           ;NVM.c: 88: latchAddr=0;
  9376  05B0  01E3               	clrf	NVMWrite@latchAddr
  9377                           
  9378                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9379  05B1  01E4               	clrf	NVMWrite@j
  9380  05B2  3020               	movlw	32
  9381  05B3  0264               	subwf	NVMWrite@j,w
  9382  05B4  1803               	btfsc	3,0
  9383  05B5  2DE8               	goto	l3774
  9384  05B6                     l3758:	
  9385                           
  9386                           ;NVM.c: 92: {
  9387                           ;NVM.c: 94: PMADR=(rowAddr+j);
  9388  05B6  0864               	movf	NVMWrite@j,w
  9389  05B7  0760               	addwf	NVMWrite@rowAddr,w
  9390  05B8  00F5               	movwf	??_NVMWrite
  9391  05B9  0861               	movf	NVMWrite@rowAddr+1,w
  9392  05BA  1803               	skipnc
  9393  05BB  0A61               	incf	NVMWrite@rowAddr+1,w
  9394  05BC  00F6               	movwf	??_NVMWrite+1
  9395  05BD  0875               	movf	??_NVMWrite,w
  9396  05BE  0023               	movlb	3	; select bank3
  9397  05BF  0091               	movwf	17	;volatile
  9398  05C0  0876               	movf	??_NVMWrite+1,w
  9399  05C1  0092               	movwf	18	;volatile
  9400                           
  9401                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  9402  05C2  0020               	movlb	0	; select bank0
  9403  05C3  3564               	lslf	NVMWrite@j,w
  9404  05C4  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9405  05C5  0086               	movwf	6
  9406  05C6  0187               	clrf	7
  9407  05C7  3F40               	moviw [0]fsr1
  9408  05C8  0023               	movlb	3	; select bank3
  9409  05C9  0093               	movwf	19	;volatile
  9410  05CA  3F41               	moviw [1]fsr1
  9411  05CB  0094               	movwf	20	;volatile
  9412                           
  9413                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  9414  05CC  0020               	movlb	0	; select bank0
  9415  05CD  0864               	movf	NVMWrite@j,w
  9416  05CE  3A1F               	xorlw	31
  9417  05CF  1D03               	skipz
  9418  05D0  2DD4               	goto	l271
  9419                           
  9420                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  9421  05D1  0023               	movlb	3	; select bank3
  9422  05D2  1295               	bcf	21,5	;volatile
  9423  05D3  2DD6               	goto	l3766
  9424  05D4                     l271:	
  9425                           
  9426                           ;NVM.c: 99: else
  9427                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  9428  05D4  0023               	movlb	3	; select bank3
  9429  05D5  1695               	bsf	21,5	;volatile
  9430  05D6                     l3766:	
  9431                           
  9432                           ;NVM.c: 101: PMCON2=0x55;
  9433  05D6  3055               	movlw	85
  9434  05D7  0096               	movwf	22	;volatile
  9435                           
  9436                           ;NVM.c: 102: PMCON2=0xAA;
  9437  05D8  30AA               	movlw	170
  9438  05D9  0096               	movwf	22	;volatile
  9439                           
  9440                           ;NVM.c: 103: PMCON1bits.WR=1;
  9441  05DA  1495               	bsf	21,1	;volatile
  9442  05DB                     l273:	
  9443                           ;NVM.c: 104: while(PMCON1bits.WR);
  9444                           
  9445  05DB  1895               	btfsc	21,1	;volatile
  9446  05DC  2DDB               	goto	l273
  9447                           
  9448                           ;NVM.c: 105: _nop();
  9449  05DD  0000               	nop
  9450                           
  9451                           ;NVM.c: 106: _nop();
  9452  05DE  0000               	nop
  9453  05DF  3001               	movlw	1
  9454  05E0  00F5               	movwf	??_NVMWrite
  9455  05E1  0875               	movf	??_NVMWrite,w
  9456  05E2  0020               	movlb	0	; select bank0
  9457  05E3  07E4               	addwf	NVMWrite@j,f
  9458  05E4  3020               	movlw	32
  9459  05E5  0264               	subwf	NVMWrite@j,w
  9460  05E6  1C03               	skipc
  9461  05E7  2DB6               	goto	l3758
  9462  05E8                     l3774:	
  9463                           
  9464                           ;NVM.c: 107: }
  9465                           ;NVM.c: 109: rowAddr+=0x0020;
  9466  05E8  3020               	movlw	32
  9467  05E9  07E0               	addwf	NVMWrite@rowAddr,f
  9468  05EA  3000               	movlw	0
  9469  05EB  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  9470  05EC  2D44               	goto	l256
  9471  05ED                     l276:	
  9472                           
  9473                           ;NVM.c: 110: }
  9474                           ;NVM.c: 112: INTCONbits.GIE=1;
  9475  05ED  178B               	bsf	11,7	;volatile
  9476                           
  9477                           ;NVM.c: 113: PMCON1bits.WREN=0;
  9478  05EE  0023               	movlb	3	; select bank3
  9479  05EF  1115               	bcf	21,2	;volatile
  9480  05F0  0008               	return
  9481  05F1                     __end_of_NVMWrite:	
  9482                           
  9483                           	psect	text52
  9484  1789                     __ptext52:	
  9485 ;; *************** function _PGMReadNvm *****************
  9486 ;; Defined at:
  9487 ;;		line 64 in file "PGM.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;		None               void
  9494 ;; Registers used:
  9495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;Total ram usage:        4 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    3
  9508 ;; This function calls:
  9509 ;;		_NVMRead
  9510 ;; This function is called by:
  9511 ;;		_PGMInit
  9512 ;; This function uses a non-reentrant model
  9513 ;;
  9514                           
  9515                           
  9516                           ;psect for function _PGMReadNvm
  9517  1789                     _PGMReadNvm:	
  9518                           
  9519                           ;PGM.c: 65: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9523  1789  303A               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9524  178A  00F8               	movwf	??_PGMReadNvm
  9525  178B  3088               	movlw	(high __stringtab)| (0+128)
  9526  178C  00F9               	movwf	??_PGMReadNvm+1
  9527  178D  0878               	movf	??_PGMReadNvm,w
  9528  178E  00F1               	movwf	?_NVMRead
  9529  178F  0879               	movf	??_PGMReadNvm+1,w
  9530  1790  00F2               	movwf	?_NVMRead+1
  9531  1791  30CA               	movlw	_pgm_cfg& (0+255)
  9532  1792  00FA               	movwf	??_PGMReadNvm+2
  9533  1793  087A               	movf	??_PGMReadNvm+2,w
  9534  1794  00F3               	movwf	?_NVMRead+2
  9535  1795  3005               	movlw	5
  9536  1796  00FB               	movwf	??_PGMReadNvm+3
  9537  1797  087B               	movf	??_PGMReadNvm+3,w
  9538  1798  00F4               	movwf	?_NVMRead+3
  9539  1799  318A  2260         	fcall	_NVMRead
  9540  179B  0008               	return
  9541  179C                     __end_of_PGMReadNvm:	
  9542                           
  9543                           	psect	text53
  9544  0A60                     __ptext53:	
  9545 ;; *************** function _NVMRead *****************
  9546 ;; Defined at:
  9547 ;;		line 24 in file "NVM.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;  addr            2    1[COMMON] unsigned short 
  9550 ;;  dest            1    3[COMMON] PTR unsigned char 
  9551 ;;		 -> pgm_cfg(5), 
  9552 ;;  len             1    4[COMMON] unsigned char 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  i               1    7[COMMON] unsigned char 
  9555 ;; Return value:  Size  Location     Type
  9556 ;;		None               void
  9557 ;; Registers used:
  9558 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9559 ;; Tracked objects:
  9560 ;;		On entry : 0/0
  9561 ;;		On exit  : 0/0
  9562 ;;		Unchanged: 0/0
  9563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9564 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;Total ram usage:        7 bytes
  9569 ;; Hardware stack levels used:    1
  9570 ;; Hardware stack levels required when called:    2
  9571 ;; This function calls:
  9572 ;;		Nothing
  9573 ;; This function is called by:
  9574 ;;		_PGMReadNvm
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function _NVMRead
  9580  0A60                     _NVMRead:	
  9581                           
  9582                           ;NVM.c: 25: unsigned char i;
  9583                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  9584                           
  9585                           ;incstack = 0
  9586                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  9587  0A60  0023               	movlb	3	; select bank3
  9588  0A61  1315               	bcf	21,6	;volatile
  9589                           
  9590                           ;NVM.c: 28: for(i=0;i<len;i++)
  9591  0A62  01F7               	clrf	NVMRead@i
  9592  0A63                     l3704:	
  9593  0A63  0874               	movf	NVMRead@len,w
  9594  0A64  0277               	subwf	NVMRead@i,w
  9595  0A65  1803               	btfsc	3,0
  9596  0A66  0008               	return
  9597  0A67  0064               	clrwdt	;# 
  9598                           
  9599                           ;NVM.c: 31: PMADR=(addr+i);
  9600  0A68  0877               	movf	NVMRead@i,w
  9601  0A69  0771               	addwf	NVMRead@addr,w
  9602  0A6A  00F5               	movwf	??_NVMRead
  9603  0A6B  0872               	movf	NVMRead@addr+1,w
  9604  0A6C  1803               	skipnc
  9605  0A6D  0A72               	incf	NVMRead@addr+1,w
  9606  0A6E  00F6               	movwf	??_NVMRead+1
  9607  0A6F  0875               	movf	??_NVMRead,w
  9608  0A70  0023               	movlb	3	; select bank3
  9609  0A71  0091               	movwf	17	;volatile
  9610  0A72  0876               	movf	??_NVMRead+1,w
  9611  0A73  0092               	movwf	18	;volatile
  9612                           
  9613                           ;NVM.c: 32: PMCON1bits.RD=1;
  9614  0A74  1415               	bsf	21,0	;volatile
  9615  0A75                     l249:	
  9616                           ;NVM.c: 33: while(PMCON1bits.RD);
  9617                           
  9618  0A75  1815               	btfsc	21,0	;volatile
  9619  0A76  2A75               	goto	l249
  9620                           
  9621                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  9622  0A77  0813               	movf	19,w	;volatile
  9623  0A78  00F5               	movwf	??_NVMRead
  9624  0A79  0877               	movf	NVMRead@i,w
  9625  0A7A  0773               	addwf	NVMRead@dest,w
  9626  0A7B  00F6               	movwf	??_NVMRead+1
  9627  0A7C  0876               	movf	??_NVMRead+1,w
  9628  0A7D  0086               	movwf	6
  9629  0A7E  0187               	clrf	7
  9630  0A7F  0875               	movf	??_NVMRead,w
  9631  0A80  0081               	movwf	1
  9632  0A81  3001               	movlw	1
  9633  0A82  00F5               	movwf	??_NVMRead
  9634  0A83  0875               	movf	??_NVMRead,w
  9635  0A84  07F7               	addwf	NVMRead@i,f
  9636  0A85  2A63               	goto	l3704
  9637  0A86                     __end_of_NVMRead:	
  9638                           
  9639                           	psect	text54
  9640  08FE                     __ptext54:	
  9641 ;; *************** function _DINTask *****************
  9642 ;; Defined at:
  9643 ;;		line 80 in file "DIN.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;		None
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;		None
  9648 ;; Return value:  Size  Location     Type
  9649 ;;		None               void
  9650 ;; Registers used:
  9651 ;;		wreg, status,2, status,0
  9652 ;; Tracked objects:
  9653 ;;		On entry : 0/0
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;Total ram usage:        1 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:    2
  9664 ;; This function calls:
  9665 ;;		Nothing
  9666 ;; This function is called by:
  9667 ;;		_main
  9668 ;; This function uses a non-reentrant model
  9669 ;;
  9670                           
  9671                           
  9672                           ;psect for function _DINTask
  9673  08FE                     _DINTask:	
  9674                           
  9675                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9676                           
  9677                           ;incstack = 0
  9678                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9679  08FE  0020               	movlb	0	; select bank0
  9680  08FF  01EF               	clrf	_u_in_sta_tmpTask
  9681                           
  9682                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9683  0900  1D0D               	btfss	13,2	;volatile
  9684                           
  9685                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9686  0901  146F               	bsf	_u_in_sta_tmpTask,0
  9687                           
  9688                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9689  0902  086F               	movf	_u_in_sta_tmpTask,w
  9690  0903  3901               	andlw	1
  9691  0904  00F1               	movwf	??_DINTask
  9692  0905  087C               	movf	_u_in_sta_currTask,w
  9693  0906  3901               	andlw	1
  9694  0907  0671               	xorwf	??_DINTask,w
  9695  0908  1903               	skipnz
  9696  0909  2911               	goto	l3818
  9697                           
  9698                           ;DIN.c: 87: {
  9699                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9700  090A  107C               	bcf	_u_in_sta_currTask,0
  9701  090B  1C6F               	btfss	_u_in_sta_tmpTask,0
  9702  090C  290E               	goto	l3814
  9703  090D  147C               	bsf	_u_in_sta_currTask,0
  9704  090E                     l3814:	
  9705                           
  9706                           ;DIN.c: 89: tmrDbncSel=0;
  9707  090E  0020               	movlb	0	; select bank0
  9708  090F  01EB               	clrf	_tmrDbncSel
  9709                           
  9710                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9711  0910  146E               	bsf	_u_flg_din,0
  9712  0911                     l3818:	
  9713                           
  9714                           ;DIN.c: 91: }
  9715                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9716  0911  1C7C               	btfss	_u_in_sta_currTask,0
  9717  0912  2915               	goto	l3822
  9718                           
  9719                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9720  0913  14EE               	bsf	_u_flg_din,1
  9721  0914  0008               	return
  9722  0915                     l3822:	
  9723                           
  9724                           ;DIN.c: 96: else
  9725                           ;DIN.c: 97: {
  9726                           ;DIN.c: 98: tmrLongSel=0;
  9727  0915  0021               	movlb	1	; select bank1
  9728  0916  01AB               	clrf	_tmrLongSel^(0+128)
  9729  0917  01AC               	clrf	(_tmrLongSel+1)^(0+128)
  9730                           
  9731                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9732  0918  0020               	movlb	0	; select bank0
  9733  0919  10EE               	bcf	_u_flg_din,1
  9734  091A  0008               	return
  9735  091B                     __end_of_DINTask:	
  9736                           
  9737                           	psect	text55
  9738  1767                     __ptext55:	
  9739 ;; *************** function _DINInit *****************
  9740 ;; Defined at:
  9741 ;;		line 25 in file "DIN.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;  sta             1    wreg     unsigned char 
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;  sta             1    1[COMMON] unsigned char 
  9746 ;; Return value:  Size  Location     Type
  9747 ;;		None               void
  9748 ;; Registers used:
  9749 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9750 ;; Tracked objects:
  9751 ;;		On entry : 0/0
  9752 ;;		On exit  : 0/0
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;Total ram usage:        1 bytes
  9760 ;; Hardware stack levels used:    1
  9761 ;; Hardware stack levels required when called:    2
  9762 ;; This function calls:
  9763 ;;		Nothing
  9764 ;; This function is called by:
  9765 ;;		_main
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769                           
  9770                           ;psect for function _DINInit
  9771  1767                     _DINInit:	
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9775                           ;DINInit@sta stored from wreg
  9776  1767  00F1               	movwf	DINInit@sta
  9777                           
  9778                           ;DIN.c: 26: switch(sta)
  9779  1768  2F72               	goto	l3782
  9780  1769                     l3778:	
  9781                           ;DIN.c: 27: {
  9782                           ;DIN.c: 31: case 1:
  9783                           
  9784                           
  9785                           ;DIN.c: 33: u_flg_din.val=0;
  9786  1769  0020               	movlb	0	; select bank0
  9787  176A  01EE               	clrf	_u_flg_din
  9788                           
  9789                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9790  176B  01FC               	clrf	_u_in_sta_currTask
  9791                           
  9792                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9793  176C  01EF               	clrf	_u_in_sta_tmpTask
  9794                           
  9795                           ;DIN.c: 36: u_in_ev_up.val=0;
  9796  176D  0021               	movlb	1	; select bank1
  9797  176E  01B7               	clrf	_u_in_ev_up^(0+128)
  9798                           
  9799                           ;DIN.c: 37: u_in_ev_down.val=0;
  9800  176F  01B5               	clrf	_u_in_ev_down^(0+128)
  9801                           
  9802                           ;DIN.c: 38: u_in_ev_long.val=0;
  9803  1770  01B6               	clrf	_u_in_ev_long^(0+128)
  9804                           
  9805                           ;DIN.c: 43: }
  9806                           
  9807                           ;DIN.c: 39: break;
  9808  1771  0008               	return
  9809  1772                     l3782:	
  9810  1772  0871               	movf	DINInit@sta,w
  9811                           
  9812                           ; Switch size 1, requested type "space"
  9813                           ; Number of cases is 1, Range of values is 1 to 1
  9814                           ; switch strategies available:
  9815                           ; Name         Instructions Cycles
  9816                           ; simple_byte            4     3 (average)
  9817                           ; direct_byte           11     9 (fixed)
  9818                           ; jumptable            263     9 (fixed)
  9819                           ;	Chosen strategy is simple_byte
  9820  1773  3A01               	xorlw	1	; case 1
  9821  1774  1903               	skipnz
  9822  1775  2F69               	goto	l3778
  9823  1776  2F77               	goto	l301
  9824  1777                     l301:	
  9825  1777  0008               	return
  9826  1778                     __end_of_DINInit:	
  9827                           
  9828                           	psect	text56
  9829  1722                     __ptext56:	
  9830 ;; *************** function _NVMInit *****************
  9831 ;; Defined at:
  9832 ;;		line 7 in file "NVM.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;  sta             1    wreg     unsigned char 
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;  sta             1    1[COMMON] unsigned char 
  9837 ;; Return value:  Size  Location     Type
  9838 ;;		None               void
  9839 ;; Registers used:
  9840 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;Total ram usage:        1 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:    2
  9853 ;; This function calls:
  9854 ;;		Nothing
  9855 ;; This function is called by:
  9856 ;;		_main
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           
  9861                           ;psect for function _NVMInit
  9862  1722                     _NVMInit:	
  9863                           
  9864                           ;incstack = 0
  9865                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  9866                           ;NVMInit@sta stored from wreg
  9867  1722  00F1               	movwf	NVMInit@sta
  9868                           
  9869                           ;NVM.c: 8: switch(sta)
  9870  1723  2F27               	goto	l3690
  9871  1724                     l3686:	
  9872                           ;NVM.c: 9: {
  9873                           ;NVM.c: 10: case 0:
  9874                           
  9875                           
  9876                           ;NVM.c: 12: PMCON1=0b00000000;
  9877  1724  0023               	movlb	3	; select bank3
  9878  1725  0195               	clrf	21	;volatile
  9879                           
  9880                           ;NVM.c: 20: }
  9881                           
  9882                           ;NVM.c: 13: break;
  9883  1726  0008               	return
  9884  1727                     l3690:	
  9885  1727  0871               	movf	NVMInit@sta,w
  9886                           
  9887                           ; Switch size 1, requested type "space"
  9888                           ; Number of cases is 1, Range of values is 0 to 0
  9889                           ; switch strategies available:
  9890                           ; Name         Instructions Cycles
  9891                           ; simple_byte            4     3 (average)
  9892                           ; direct_byte            8     6 (fixed)
  9893                           ; jumptable            260     6 (fixed)
  9894                           ;	Chosen strategy is simple_byte
  9895  1728  3A00               	xorlw	0	; case 0
  9896  1729  1903               	skipnz
  9897  172A  2F24               	goto	l3686
  9898  172B  2F2C               	goto	l244
  9899  172C                     l244:	
  9900  172C  0008               	return
  9901  172D                     __end_of_NVMInit:	
  9902                           
  9903                           	psect	text57
  9904  1717                     __ptext57:	
  9905 ;; *************** function _LEDInit *****************
  9906 ;; Defined at:
  9907 ;;		line 8 in file "LED.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;  sta             1    wreg     unsigned char 
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;  sta             1    1[COMMON] unsigned char 
  9912 ;; Return value:  Size  Location     Type
  9913 ;;		None               void
  9914 ;; Registers used:
  9915 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9916 ;; Tracked objects:
  9917 ;;		On entry : 0/0
  9918 ;;		On exit  : 0/0
  9919 ;;		Unchanged: 0/0
  9920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;Total ram usage:        1 bytes
  9926 ;; Hardware stack levels used:    1
  9927 ;; Hardware stack levels required when called:    2
  9928 ;; This function calls:
  9929 ;;		Nothing
  9930 ;; This function is called by:
  9931 ;;		_main
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _LEDInit
  9937  1717                     _LEDInit:	
  9938                           
  9939                           ;incstack = 0
  9940                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  9941                           ;LEDInit@sta stored from wreg
  9942  1717  00F1               	movwf	LEDInit@sta
  9943                           
  9944                           ;LED.c: 9: switch(sta)
  9945  1718  2F1C               	goto	l3652
  9946  1719                     l204:	
  9947                           ;LED.c: 10: {
  9948                           ;LED.c: 17: case 2:
  9949                           
  9950                           
  9951                           ;LED.c: 19: LATCbits.LATC7=1;
  9952  1719  0022               	movlb	2	; select bank2
  9953  171A  178E               	bsf	14,7	;volatile
  9954                           
  9955                           ;LED.c: 21: }
  9956                           
  9957                           ;LED.c: 20: break;
  9958  171B  0008               	return
  9959  171C                     l3652:	
  9960  171C  0871               	movf	LEDInit@sta,w
  9961                           
  9962                           ; Switch size 1, requested type "space"
  9963                           ; Number of cases is 1, Range of values is 2 to 2
  9964                           ; switch strategies available:
  9965                           ; Name         Instructions Cycles
  9966                           ; simple_byte            4     3 (average)
  9967                           ; direct_byte           11     9 (fixed)
  9968                           ; jumptable            263     9 (fixed)
  9969                           ;	Chosen strategy is simple_byte
  9970  171D  3A02               	xorlw	2	; case 2
  9971  171E  1903               	skipnz
  9972  171F  2F19               	goto	l204
  9973  1720  2F21               	goto	l206
  9974  1721                     l206:	
  9975  1721  0008               	return
  9976  1722                     __end_of_LEDInit:	
  9977                           
  9978                           	psect	text58
  9979  0AD3                     __ptext58:	
  9980 ;; *************** function _ADCInit *****************
  9981 ;; Defined at:
  9982 ;;		line 36 in file "ADC.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;  state           1    wreg     unsigned char 
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;  state           1    2[COMMON] unsigned char 
  9987 ;; Return value:  Size  Location     Type
  9988 ;;		None               void
  9989 ;; Registers used:
  9990 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9991 ;; Tracked objects:
  9992 ;;		On entry : 0/0
  9993 ;;		On exit  : 0/0
  9994 ;;		Unchanged: 0/0
  9995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;Total ram usage:        2 bytes
 10001 ;; Hardware stack levels used:    1
 10002 ;; Hardware stack levels required when called:    2
 10003 ;; This function calls:
 10004 ;;		Nothing
 10005 ;; This function is called by:
 10006 ;;		_main
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           
 10011                           ;psect for function _ADCInit
 10012  0AD3                     _ADCInit:	
 10013                           
 10014                           ;incstack = 0
 10015                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
 10016                           ;ADCInit@state stored from wreg
 10017  0AD3  00F2               	movwf	ADCInit@state
 10018                           
 10019                           ;ADC.c: 37: switch(state)
 10020  0AD4  2AF4               	goto	l3442
 10021  0AD5                     l3430:	
 10022                           ;ADC.c: 38: {
 10023                           ;ADC.c: 39: case 0:
 10024                           
 10025                           
 10026                           ;ADC.c: 41: ADCON0=0b00101101; ADCON1=0b00000011; FVRCON=0b10000001; ANSELB|=0b00011000;;
 10027  0AD5  302D               	movlw	45
 10028  0AD6  0021               	movlb	1	; select bank1
 10029  0AD7  009D               	movwf	29	;volatile
 10030  0AD8  3003               	movlw	3
 10031  0AD9  009E               	movwf	30	;volatile
 10032  0ADA  3081               	movlw	129
 10033  0ADB  0022               	movlb	2	; select bank2
 10034  0ADC  0097               	movwf	23	;volatile
 10035  0ADD  3018               	movlw	24
 10036  0ADE  00F1               	movwf	??_ADCInit
 10037  0ADF  0871               	movf	??_ADCInit,w
 10038  0AE0  0023               	movlb	3	; select bank3
 10039  0AE1  048D               	iorwf	13,f	;volatile
 10040                           
 10041                           ;ADC.c: 42: break;
 10042  0AE2  0008               	return
 10043  0AE3                     l3434:	
 10044                           ;ADC.c: 43: case 1:
 10045                           
 10046                           
 10047                           ;ADC.c: 45: adc_ch=ADC_CH_OFF;
 10048  0AE3  0021               	movlb	1	; select bank1
 10049  0AE4  01AD               	clrf	_adc_ch^(0+128)
 10050                           
 10051                           ;ADC.c: 46: batt=0;
 10052  0AE5  01AE               	clrf	_batt^(0+128)
 10053                           
 10054                           ;ADC.c: 47: temp=0;
 10055  0AE6  01B3               	clrf	_temp^(0+128)
 10056                           
 10057                           ;ADC.c: 48: battV=0;
 10058  0AE7  3000               	movlw	0
 10059  0AE8  00A3               	movwf	_battV^(0+128)
 10060  0AE9  3000               	movlw	0
 10061  0AEA  00A4               	movwf	(_battV+1)^(0+128)
 10062  0AEB  3000               	movlw	0
 10063  0AEC  00A5               	movwf	(_battV+2)^(0+128)
 10064                           
 10065                           ;ADC.c: 49: tempC=0;
 10066  0AED  3000               	movlw	0
 10067  0AEE  00A6               	movwf	_tempC^(0+128)
 10068  0AEF  3000               	movlw	0
 10069  0AF0  00A7               	movwf	(_tempC+1)^(0+128)
 10070  0AF1  3000               	movlw	0
 10071  0AF2  00A8               	movwf	(_tempC+2)^(0+128)
 10072                           
 10073                           ;ADC.c: 54: }
 10074                           
 10075                           ;ADC.c: 50: break;
 10076  0AF3  0008               	return
 10077  0AF4                     l3442:	
 10078  0AF4  0872               	movf	ADCInit@state,w
 10079                           
 10080                           ; Switch size 1, requested type "space"
 10081                           ; Number of cases is 2, Range of values is 0 to 1
 10082                           ; switch strategies available:
 10083                           ; Name         Instructions Cycles
 10084                           ; simple_byte            7     4 (average)
 10085                           ; direct_byte           10     6 (fixed)
 10086                           ; jumptable            260     6 (fixed)
 10087                           ;	Chosen strategy is simple_byte
 10088  0AF5  3A00               	xorlw	0	; case 0
 10089  0AF6  1903               	skipnz
 10090  0AF7  2AD5               	goto	l3430
 10091  0AF8  3A01               	xorlw	1	; case 1
 10092  0AF9  1903               	skipnz
 10093  0AFA  2AE3               	goto	l3434
 10094  0AFB  2AFC               	goto	l119
 10095  0AFC                     l119:	
 10096  0AFC  0008               	return
 10097  0AFD                     __end_of_ADCInit:	
 10098                           
 10099                           	psect	text59
 10100  0938                     __ptext59:	
 10101 ;; *************** function _SPIInit *****************
 10102 ;; Defined at:
 10103 ;;		line 9 in file "SPI.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;  state           1    wreg     unsigned char 
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;  state           1    2[COMMON] unsigned char 
 10108 ;; Return value:  Size  Location     Type
 10109 ;;		None               void
 10110 ;; Registers used:
 10111 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10112 ;; Tracked objects:
 10113 ;;		On entry : 0/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;Total ram usage:        2 bytes
 10122 ;; Hardware stack levels used:    1
 10123 ;; Hardware stack levels required when called:    2
 10124 ;; This function calls:
 10125 ;;		Nothing
 10126 ;; This function is called by:
 10127 ;;		_main
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function _SPIInit
 10133  0938                     _SPIInit:	
 10134                           
 10135                           ;incstack = 0
 10136                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
 10137                           ;SPIInit@state stored from wreg
 10138  0938  00F2               	movwf	SPIInit@state
 10139                           
 10140                           ;SPI.c: 10: switch(state)
 10141  0939  294A               	goto	l3408
 10142  093A                     l56:	
 10143                           ;SPI.c: 11: {
 10144                           ;SPI.c: 12: case 0:
 10145                           
 10146                           
 10147                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
 10148  093A  0021               	movlb	1	; select bank1
 10149  093B  160E               	bsf	14,4	;volatile
 10150  093C  30D7               	movlw	215
 10151  093D  00F1               	movwf	??_SPIInit
 10152  093E  0871               	movf	??_SPIInit,w
 10153  093F  058E               	andwf	14,f	;volatile
 10154  0940  0024               	movlb	4	; select bank4
 10155  0941  1295               	bcf	21,5	;volatile
 10156  0942  0191               	clrf	17	;volatile
 10157  0943  3001               	movlw	1
 10158  0944  0095               	movwf	21	;volatile
 10159  0945  0196               	clrf	22	;volatile
 10160  0946  3040               	movlw	64
 10161  0947  0094               	movwf	20	;volatile
 10162  0948  1695               	bsf	21,5	;volatile
 10163                           
 10164                           ;SPI.c: 22: }
 10165                           
 10166                           ;SPI.c: 21: break;
 10167                           
 10168                           ;SPI.c: 19: case 2:
 10169                           
 10170                           ;SPI.c: 18: break;
 10171                           
 10172                           ;SPI.c: 16: case 1:
 10173                           
 10174                           ;SPI.c: 15: break;
 10175  0949  0008               	return
 10176  094A                     l3408:	
 10177  094A  0872               	movf	SPIInit@state,w
 10178                           
 10179                           ; Switch size 1, requested type "space"
 10180                           ; Number of cases is 3, Range of values is 0 to 2
 10181                           ; switch strategies available:
 10182                           ; Name         Instructions Cycles
 10183                           ; simple_byte           10     6 (average)
 10184                           ; direct_byte           12     6 (fixed)
 10185                           ; jumptable            260     6 (fixed)
 10186                           ;	Chosen strategy is simple_byte
 10187  094B  3A00               	xorlw	0	; case 0
 10188  094C  1903               	skipnz
 10189  094D  293A               	goto	l56
 10190  094E  3A01               	xorlw	1	; case 1
 10191  094F  1903               	skipnz
 10192  0950  2955               	goto	l60
 10193  0951  3A03               	xorlw	3	; case 2
 10194  0952  1903               	skipnz
 10195  0953  2955               	goto	l60
 10196  0954  2955               	goto	l60
 10197  0955                     l60:	
 10198  0955  0008               	return
 10199  0956                     __end_of_SPIInit:	
 10200                           
 10201                           	psect	text60
 10202  0A18                     __ptext60:	
 10203 ;; *************** function _OUTInit *****************
 10204 ;; Defined at:
 10205 ;;		line 7 in file "OUT.c"
 10206 ;; Parameters:    Size  Location     Type
 10207 ;;  sta             1    wreg     unsigned char 
 10208 ;; Auto vars:     Size  Location     Type
 10209 ;;  sta             1    2[COMMON] unsigned char 
 10210 ;; Return value:  Size  Location     Type
 10211 ;;		None               void
 10212 ;; Registers used:
 10213 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;Total ram usage:        2 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:    2
 10226 ;; This function calls:
 10227 ;;		Nothing
 10228 ;; This function is called by:
 10229 ;;		_main
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _OUTInit
 10235  0A18                     _OUTInit:	
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 10239                           ;OUTInit@sta stored from wreg
 10240  0A18  00F2               	movwf	OUTInit@sta
 10241                           
 10242                           ;OUT.c: 8: switch(sta)
 10243  0A19  2A36               	goto	l3388
 10244  0A1A                     l3374:	
 10245                           ;OUT.c: 9: {
 10246                           ;OUT.c: 10: case 0:
 10247                           
 10248                           
 10249                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00011111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00011000; ANSELC&=0b00000000; PORTB&=0b11011111; PORTC&=0b01111111; PORTC|=0b
      +                          10000000;
 10250  0A1A  0021               	movlb	1	; select bank1
 10251  0A1B  018C               	clrf	12	;volatile
 10252  0A1C  301F               	movlw	31
 10253  0A1D  00F1               	movwf	??_OUTInit
 10254  0A1E  0871               	movf	??_OUTInit,w
 10255  0A1F  058D               	andwf	13,f	;volatile
 10256  0A20  3010               	movlw	16
 10257  0A21  00F1               	movwf	??_OUTInit
 10258  0A22  0871               	movf	??_OUTInit,w
 10259  0A23  058E               	andwf	14,f	;volatile
 10260  0A24  0023               	movlb	3	; select bank3
 10261  0A25  018C               	clrf	12	;volatile
 10262  0A26  3018               	movlw	24
 10263  0A27  00F1               	movwf	??_OUTInit
 10264  0A28  0871               	movf	??_OUTInit,w
 10265  0A29  058D               	andwf	13,f	;volatile
 10266  0A2A  018E               	clrf	14	;volatile
 10267  0A2B  30DF               	movlw	223
 10268  0A2C  00F1               	movwf	??_OUTInit
 10269  0A2D  0871               	movf	??_OUTInit,w
 10270  0A2E  0020               	movlb	0	; select bank0
 10271  0A2F  058D               	andwf	13,f	;volatile
 10272  0A30  307F               	movlw	127
 10273  0A31  00F1               	movwf	??_OUTInit
 10274  0A32  0871               	movf	??_OUTInit,w
 10275  0A33  058E               	andwf	14,f	;volatile
 10276  0A34  178E               	bsf	14,7	;volatile
 10277                           
 10278                           ;OUT.c: 20: }
 10279                           
 10280                           ;OUT.c: 13: break;
 10281  0A35  0008               	return
 10282  0A36                     l3388:	
 10283  0A36  0872               	movf	OUTInit@sta,w
 10284                           
 10285                           ; Switch size 1, requested type "space"
 10286                           ; Number of cases is 1, Range of values is 0 to 0
 10287                           ; switch strategies available:
 10288                           ; Name         Instructions Cycles
 10289                           ; simple_byte            4     3 (average)
 10290                           ; direct_byte            8     6 (fixed)
 10291                           ; jumptable            260     6 (fixed)
 10292                           ;	Chosen strategy is simple_byte
 10293  0A37  3A00               	xorlw	0	; case 0
 10294  0A38  1903               	skipnz
 10295  0A39  2A1A               	goto	l3374
 10296  0A3A  2A3B               	goto	l36
 10297  0A3B                     l36:	
 10298  0A3B  0008               	return
 10299  0A3C                     __end_of_OUTInit:	
 10300                           
 10301                           	psect	text61
 10302  17E9                     __ptext61:	
 10303 ;; *************** function _INInit *****************
 10304 ;; Defined at:
 10305 ;;		line 7 in file "IN.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  sta             1    wreg     unsigned char 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  sta             1    2[COMMON] unsigned char 
 10310 ;; Return value:  Size  Location     Type
 10311 ;;		None               void
 10312 ;; Registers used:
 10313 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10314 ;; Tracked objects:
 10315 ;;		On entry : 0/0
 10316 ;;		On exit  : 0/0
 10317 ;;		Unchanged: 0/0
 10318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;Total ram usage:        2 bytes
 10324 ;; Hardware stack levels used:    1
 10325 ;; Hardware stack levels required when called:    2
 10326 ;; This function calls:
 10327 ;;		Nothing
 10328 ;; This function is called by:
 10329 ;;		_main
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           
 10334                           ;psect for function _INInit
 10335  17E9                     _INInit:	
 10336                           
 10337                           ;incstack = 0
 10338                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 10339                           ;INInit@sta stored from wreg
 10340  17E9  00F2               	movwf	INInit@sta
 10341                           
 10342                           ;IN.c: 8: switch(sta)
 10343  17EA  2FFA               	goto	l3370
 10344  17EB                     l3362:	
 10345                           ;IN.c: 9: {
 10346                           ;IN.c: 10: case 0:
 10347                           
 10348                           
 10349                           ;IN.c: 12: TRISB|=0b00010111; TRISC|=0b00010000; ANSELB&=0b11111010; WPUB=0b00000111;
 10350  17EB  3017               	movlw	23
 10351  17EC  00F1               	movwf	??_INInit
 10352  17ED  0871               	movf	??_INInit,w
 10353  17EE  0021               	movlb	1	; select bank1
 10354  17EF  048D               	iorwf	13,f	;volatile
 10355  17F0  160E               	bsf	14,4	;volatile
 10356  17F1  30FA               	movlw	250
 10357  17F2  00F1               	movwf	??_INInit
 10358  17F3  0871               	movf	??_INInit,w
 10359  17F4  0023               	movlb	3	; select bank3
 10360  17F5  058D               	andwf	13,f	;volatile
 10361  17F6  3007               	movlw	7
 10362  17F7  0024               	movlb	4	; select bank4
 10363  17F8  008D               	movwf	13	;volatile
 10364                           
 10365                           ;IN.c: 20: }
 10366                           
 10367                           ;IN.c: 13: break;
 10368  17F9  0008               	return
 10369  17FA                     l3370:	
 10370  17FA  0872               	movf	INInit@sta,w
 10371                           
 10372                           ; Switch size 1, requested type "space"
 10373                           ; Number of cases is 1, Range of values is 0 to 0
 10374                           ; switch strategies available:
 10375                           ; Name         Instructions Cycles
 10376                           ; simple_byte            4     3 (average)
 10377                           ; direct_byte            8     6 (fixed)
 10378                           ; jumptable            260     6 (fixed)
 10379                           ;	Chosen strategy is simple_byte
 10380  17FB  3A00               	xorlw	0	; case 0
 10381  17FC  1903               	skipnz
 10382  17FD  2FEB               	goto	l3362
 10383  17FE  2FFF               	goto	l14
 10384  17FF                     l14:	
 10385  17FF  0008               	return
 10386  1800                     __end_of_INInit:	
 10387                           
 10388                           	psect	text62
 10389  0757                     __ptext62:	
 10390 ;; *************** function ___ftdiv *****************
 10391 ;; Defined at:
 10392 ;;		line 50 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftdiv.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;  f2              3   32[BANK0 ] float 
 10395 ;;  f1              3   35[BANK0 ] float 
 10396 ;; Auto vars:     Size  Location     Type
 10397 ;;  f3              3   43[BANK0 ] float 
 10398 ;;  sign            1   47[BANK0 ] unsigned char 
 10399 ;;  exp             1   46[BANK0 ] unsigned char 
 10400 ;;  cntr            1   42[BANK0 ] unsigned char 
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  3   32[BANK0 ] float 
 10403 ;; Registers used:
 10404 ;;		wreg, status,2, status,0, pclath, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10410 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;Total ram usage:       16 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:    3
 10417 ;; This function calls:
 10418 ;;		___ftpack
 10419 ;; This function is called by:
 10420 ;;		_ADCConv
 10421 ;;		_exp
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           
 10426                           ;psect for function ___ftdiv
 10427  0757                     ___ftdiv:	
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10431  0757  0020               	movlb	0	; select bank0
 10432  0758  0843               	movf	___ftdiv@f1,w
 10433  0759  00C6               	movwf	??___ftdiv
 10434  075A  0844               	movf	___ftdiv@f1+1,w
 10435  075B  00C7               	movwf	??___ftdiv+1
 10436  075C  0845               	movf	___ftdiv@f1+2,w
 10437  075D  00C8               	movwf	??___ftdiv+2
 10438  075E  1003               	clrc
 10439  075F  0D47               	rlf	??___ftdiv+1,w
 10440  0760  0D48               	rlf	??___ftdiv+2,w
 10441  0761  00C9               	movwf	??___ftdiv+3
 10442  0762  0849               	movf	??___ftdiv+3,w
 10443  0763  00CE               	movwf	___ftdiv@exp
 10444  0764  08CE               	movf	___ftdiv@exp,f
 10445  0765  1D03               	skipz
 10446  0766  2F6E               	goto	l5434
 10447  0767  3000               	movlw	0
 10448  0768  00C0               	movwf	?___ftdiv
 10449  0769  3000               	movlw	0
 10450  076A  00C1               	movwf	?___ftdiv+1
 10451  076B  3000               	movlw	0
 10452  076C  00C2               	movwf	?___ftdiv+2
 10453  076D  0008               	return
 10454  076E                     l5434:	
 10455  076E  0840               	movf	___ftdiv@f2,w
 10456  076F  00C6               	movwf	??___ftdiv
 10457  0770  0841               	movf	___ftdiv@f2+1,w
 10458  0771  00C7               	movwf	??___ftdiv+1
 10459  0772  0842               	movf	___ftdiv@f2+2,w
 10460  0773  00C8               	movwf	??___ftdiv+2
 10461  0774  1003               	clrc
 10462  0775  0D47               	rlf	??___ftdiv+1,w
 10463  0776  0D48               	rlf	??___ftdiv+2,w
 10464  0777  00C9               	movwf	??___ftdiv+3
 10465  0778  0849               	movf	??___ftdiv+3,w
 10466  0779  00CF               	movwf	___ftdiv@sign
 10467  077A  08CF               	movf	___ftdiv@sign,f
 10468  077B  1D03               	skipz
 10469  077C  2F84               	goto	l5440
 10470  077D  3000               	movlw	0
 10471  077E  00C0               	movwf	?___ftdiv
 10472  077F  3000               	movlw	0
 10473  0780  00C1               	movwf	?___ftdiv+1
 10474  0781  3000               	movlw	0
 10475  0782  00C2               	movwf	?___ftdiv+2
 10476  0783  0008               	return
 10477  0784                     l5440:	
 10478  0784  3000               	movlw	0
 10479  0785  00CB               	movwf	___ftdiv@f3
 10480  0786  3000               	movlw	0
 10481  0787  00CC               	movwf	___ftdiv@f3+1
 10482  0788  3000               	movlw	0
 10483  0789  00CD               	movwf	___ftdiv@f3+2
 10484  078A  3089               	movlw	137
 10485  078B  074F               	addwf	___ftdiv@sign,w
 10486  078C  00C6               	movwf	??___ftdiv
 10487  078D  0846               	movf	??___ftdiv,w
 10488  078E  02CE               	subwf	___ftdiv@exp,f
 10489  078F  0843               	movf	___ftdiv@f1,w
 10490  0790  00C6               	movwf	??___ftdiv
 10491  0791  0844               	movf	___ftdiv@f1+1,w
 10492  0792  00C7               	movwf	??___ftdiv+1
 10493  0793  0845               	movf	___ftdiv@f1+2,w
 10494  0794  00C8               	movwf	??___ftdiv+2
 10495  0795  3010               	movlw	16
 10496  0796                     u4275:	
 10497  0796  36C8               	lsrf	??___ftdiv+2,f
 10498  0797  0CC7               	rrf	??___ftdiv+1,f
 10499  0798  0CC6               	rrf	??___ftdiv,f
 10500  0799  0B89               	decfsz	9,f
 10501  079A  2F96               	goto	u4275
 10502  079B  0846               	movf	??___ftdiv,w
 10503  079C  00C9               	movwf	??___ftdiv+3
 10504  079D  0849               	movf	??___ftdiv+3,w
 10505  079E  00CF               	movwf	___ftdiv@sign
 10506  079F  0840               	movf	___ftdiv@f2,w
 10507  07A0  00C6               	movwf	??___ftdiv
 10508  07A1  0841               	movf	___ftdiv@f2+1,w
 10509  07A2  00C7               	movwf	??___ftdiv+1
 10510  07A3  0842               	movf	___ftdiv@f2+2,w
 10511  07A4  00C8               	movwf	??___ftdiv+2
 10512  07A5  3010               	movlw	16
 10513  07A6                     u4285:	
 10514  07A6  36C8               	lsrf	??___ftdiv+2,f
 10515  07A7  0CC7               	rrf	??___ftdiv+1,f
 10516  07A8  0CC6               	rrf	??___ftdiv,f
 10517  07A9  0B89               	decfsz	9,f
 10518  07AA  2FA6               	goto	u4285
 10519  07AB  0846               	movf	??___ftdiv,w
 10520  07AC  00C9               	movwf	??___ftdiv+3
 10521  07AD  0849               	movf	??___ftdiv+3,w
 10522  07AE  06CF               	xorwf	___ftdiv@sign,f
 10523  07AF  3080               	movlw	128
 10524  07B0  00C6               	movwf	??___ftdiv
 10525  07B1  0846               	movf	??___ftdiv,w
 10526  07B2  05CF               	andwf	___ftdiv@sign,f
 10527  07B3  17C4               	bsf	___ftdiv@f1+1,7
 10528  07B4  30FF               	movlw	255
 10529  07B5  05C3               	andwf	___ftdiv@f1,f
 10530  07B6  30FF               	movlw	255
 10531  07B7  05C4               	andwf	___ftdiv@f1+1,f
 10532  07B8  3000               	movlw	0
 10533  07B9  05C5               	andwf	___ftdiv@f1+2,f
 10534  07BA  17C1               	bsf	___ftdiv@f2+1,7
 10535  07BB  30FF               	movlw	255
 10536  07BC  05C0               	andwf	___ftdiv@f2,f
 10537  07BD  30FF               	movlw	255
 10538  07BE  05C1               	andwf	___ftdiv@f2+1,f
 10539  07BF  3000               	movlw	0
 10540  07C0  05C2               	andwf	___ftdiv@f2+2,f
 10541  07C1  3018               	movlw	24
 10542  07C2  00C6               	movwf	??___ftdiv
 10543  07C3  0846               	movf	??___ftdiv,w
 10544  07C4  00CA               	movwf	___ftdiv@cntr
 10545  07C5                     l5454:	
 10546  07C5  3001               	movlw	1
 10547  07C6                     u4295:	
 10548  07C6  35CB               	lslf	___ftdiv@f3,f
 10549  07C7  0DCC               	rlf	___ftdiv@f3+1,f
 10550  07C8  0DCD               	rlf	___ftdiv@f3+2,f
 10551  07C9  0B89               	decfsz	9,f
 10552  07CA  2FC6               	goto	u4295
 10553  07CB  0842               	movf	___ftdiv@f2+2,w
 10554  07CC  0245               	subwf	___ftdiv@f1+2,w
 10555  07CD  1D03               	skipz
 10556  07CE  2FD5               	goto	u4305
 10557  07CF  0841               	movf	___ftdiv@f2+1,w
 10558  07D0  0244               	subwf	___ftdiv@f1+1,w
 10559  07D1  1D03               	skipz
 10560  07D2  2FD5               	goto	u4305
 10561  07D3  0840               	movf	___ftdiv@f2,w
 10562  07D4  0243               	subwf	___ftdiv@f1,w
 10563  07D5                     u4305:	
 10564  07D5  1C03               	skipc
 10565  07D6  2FDE               	goto	l5462
 10566  07D7  0840               	movf	___ftdiv@f2,w
 10567  07D8  02C3               	subwf	___ftdiv@f1,f
 10568  07D9  0841               	movf	___ftdiv@f2+1,w
 10569  07DA  3BC4               	subwfb	___ftdiv@f1+1,f
 10570  07DB  0842               	movf	___ftdiv@f2+2,w
 10571  07DC  3BC5               	subwfb	___ftdiv@f1+2,f
 10572  07DD  144B               	bsf	___ftdiv@f3,0
 10573  07DE                     l5462:	
 10574  07DE  3001               	movlw	1
 10575  07DF                     u4315:	
 10576  07DF  35C3               	lslf	___ftdiv@f1,f
 10577  07E0  0DC4               	rlf	___ftdiv@f1+1,f
 10578  07E1  0DC5               	rlf	___ftdiv@f1+2,f
 10579  07E2  0B89               	decfsz	9,f
 10580  07E3  2FDF               	goto	u4315
 10581  07E4  3001               	movlw	1
 10582  07E5  02CA               	subwf	___ftdiv@cntr,f
 10583  07E6  1D03               	btfss	3,2
 10584  07E7  2FC5               	goto	l5454
 10585  07E8  084B               	movf	___ftdiv@f3,w
 10586  07E9  00F1               	movwf	?___ftpack
 10587  07EA  084C               	movf	___ftdiv@f3+1,w
 10588  07EB  00F2               	movwf	?___ftpack+1
 10589  07EC  084D               	movf	___ftdiv@f3+2,w
 10590  07ED  00F3               	movwf	?___ftpack+2
 10591  07EE  084E               	movf	___ftdiv@exp,w
 10592  07EF  00C6               	movwf	??___ftdiv
 10593  07F0  0846               	movf	??___ftdiv,w
 10594  07F1  00F4               	movwf	?___ftpack+3
 10595  07F2  084F               	movf	___ftdiv@sign,w
 10596  07F3  00C7               	movwf	??___ftdiv+1
 10597  07F4  0847               	movf	??___ftdiv+1,w
 10598  07F5  00F5               	movwf	?___ftpack+4
 10599  07F6  318D  25BA         	fcall	___ftpack
 10600  07F8  0871               	movf	?___ftpack,w
 10601  07F9  0020               	movlb	0	; select bank0
 10602  07FA  00C0               	movwf	?___ftdiv
 10603  07FB  0872               	movf	?___ftpack+1,w
 10604  07FC  00C1               	movwf	?___ftdiv+1
 10605  07FD  0873               	movf	?___ftpack+2,w
 10606  07FE  00C2               	movwf	?___ftdiv+2
 10607  07FF  0008               	return
 10608  0800                     __end_of___ftdiv:	
 10609                           
 10610                           	psect	text63
 10611  0DBA                     __ptext63:	
 10612 ;; *************** function ___ftpack *****************
 10613 ;; Defined at:
 10614 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
 10615 ;; Parameters:    Size  Location     Type
 10616 ;;  arg             3    1[COMMON] unsigned um
 10617 ;;  exp             1    4[COMMON] unsigned char 
 10618 ;;  sign            1    5[COMMON] unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;		None
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  3    1[COMMON] float 
 10623 ;; Registers used:
 10624 ;;		wreg, status,2, status,0
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10630 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;Total ram usage:        8 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    2
 10637 ;; This function calls:
 10638 ;;		Nothing
 10639 ;; This function is called by:
 10640 ;;		___altoft
 10641 ;;		___awtoft
 10642 ;;		___ftadd
 10643 ;;		___ftdiv
 10644 ;;		___ftmul
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           
 10649                           ;psect for function ___ftpack
 10650  0DBA                     ___ftpack:	
 10651                           
 10652                           ;incstack = 0
 10653                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10654  0DBA  0874               	movf	___ftpack@exp,w
 10655  0DBB  1903               	btfsc	3,2
 10656  0DBC  2DC2               	goto	l5264
 10657  0DBD  0873               	movf	___ftpack@arg+2,w
 10658  0DBE  0472               	iorwf	___ftpack@arg+1,w
 10659  0DBF  0471               	iorwf	___ftpack@arg,w
 10660  0DC0  1D03               	skipz
 10661  0DC1  2DD3               	goto	l5270
 10662  0DC2                     l5264:	
 10663  0DC2  3000               	movlw	0
 10664  0DC3  00F1               	movwf	?___ftpack
 10665  0DC4  3000               	movlw	0
 10666  0DC5  00F2               	movwf	?___ftpack+1
 10667  0DC6  3000               	movlw	0
 10668  0DC7  00F3               	movwf	?___ftpack+2
 10669  0DC8  0008               	return
 10670  0DC9                     l5268:	
 10671  0DC9  3001               	movlw	1
 10672  0DCA  00F6               	movwf	??___ftpack
 10673  0DCB  0876               	movf	??___ftpack,w
 10674  0DCC  07F4               	addwf	___ftpack@exp,f
 10675  0DCD  3001               	movlw	1
 10676  0DCE                     u3845:	
 10677  0DCE  36F3               	lsrf	___ftpack@arg+2,f
 10678  0DCF  0CF2               	rrf	___ftpack@arg+1,f
 10679  0DD0  0CF1               	rrf	___ftpack@arg,f
 10680  0DD1  0B89               	decfsz	9,f
 10681  0DD2  2DCE               	goto	u3845
 10682  0DD3                     l5270:	
 10683  0DD3  30FE               	movlw	254
 10684  0DD4  0573               	andwf	___ftpack@arg+2,w
 10685  0DD5  1903               	btfsc	3,2
 10686  0DD6  2DEC               	goto	l871
 10687  0DD7  2DC9               	goto	l5268
 10688  0DD8                     l5272:	
 10689  0DD8  3001               	movlw	1
 10690  0DD9  00F6               	movwf	??___ftpack
 10691  0DDA  0876               	movf	??___ftpack,w
 10692  0DDB  07F4               	addwf	___ftpack@exp,f
 10693  0DDC  3001               	movlw	1
 10694  0DDD  07F1               	addwf	___ftpack@arg,f
 10695  0DDE  3000               	movlw	0
 10696  0DDF  1803               	skipnc
 10697  0DE0  3001               	movlw	1
 10698  0DE1  07F2               	addwf	___ftpack@arg+1,f
 10699  0DE2  3000               	movlw	0
 10700  0DE3  1803               	skipnc
 10701  0DE4  3001               	movlw	1
 10702  0DE5  07F3               	addwf	___ftpack@arg+2,f
 10703  0DE6  3001               	movlw	1
 10704  0DE7                     u3865:	
 10705  0DE7  36F3               	lsrf	___ftpack@arg+2,f
 10706  0DE8  0CF2               	rrf	___ftpack@arg+1,f
 10707  0DE9  0CF1               	rrf	___ftpack@arg,f
 10708  0DEA  0B89               	decfsz	9,f
 10709  0DEB  2DE7               	goto	u3865
 10710  0DEC                     l871:	
 10711  0DEC  30FF               	movlw	255
 10712  0DED  0573               	andwf	___ftpack@arg+2,w
 10713  0DEE  1903               	btfsc	3,2
 10714  0DEF  2DF9               	goto	l5280
 10715  0DF0  2DD8               	goto	l5272
 10716  0DF1                     l5278:	
 10717  0DF1  3001               	movlw	1
 10718  0DF2  02F4               	subwf	___ftpack@exp,f
 10719  0DF3  3001               	movlw	1
 10720  0DF4                     u3885:	
 10721  0DF4  35F1               	lslf	___ftpack@arg,f
 10722  0DF5  0DF2               	rlf	___ftpack@arg+1,f
 10723  0DF6  0DF3               	rlf	___ftpack@arg+2,f
 10724  0DF7  0B89               	decfsz	9,f
 10725  0DF8  2DF4               	goto	u3885
 10726  0DF9                     l5280:	
 10727  0DF9  1FF2               	btfss	___ftpack@arg+1,7
 10728  0DFA  2DF1               	goto	l5278
 10729  0DFB  1874               	btfsc	___ftpack@exp,0
 10730  0DFC  2E03               	goto	l877
 10731  0DFD  30FF               	movlw	255
 10732  0DFE  05F1               	andwf	___ftpack@arg,f
 10733  0DFF  307F               	movlw	127
 10734  0E00  05F2               	andwf	___ftpack@arg+1,f
 10735  0E01  30FF               	movlw	255
 10736  0E02  05F3               	andwf	___ftpack@arg+2,f
 10737  0E03                     l877:	
 10738  0E03  1003               	clrc
 10739  0E04  0CF4               	rrf	___ftpack@exp,f
 10740  0E05  0874               	movf	___ftpack@exp,w
 10741  0E06  00F6               	movwf	??___ftpack
 10742  0E07  01F7               	clrf	??___ftpack+1
 10743  0E08  01F8               	clrf	??___ftpack+2
 10744  0E09  3010               	movlw	16
 10745  0E0A                     u3915:	
 10746  0E0A  35F6               	lslf	??___ftpack,f
 10747  0E0B  0DF7               	rlf	??___ftpack+1,f
 10748  0E0C  0DF8               	rlf	??___ftpack+2,f
 10749  0E0D  0B89               	decfsz	9,f
 10750  0E0E  2E0A               	goto	u3915
 10751  0E0F  0876               	movf	??___ftpack,w
 10752  0E10  04F1               	iorwf	___ftpack@arg,f
 10753  0E11  0877               	movf	??___ftpack+1,w
 10754  0E12  04F2               	iorwf	___ftpack@arg+1,f
 10755  0E13  0878               	movf	??___ftpack+2,w
 10756  0E14  04F3               	iorwf	___ftpack@arg+2,f
 10757  0E15  0875               	movf	___ftpack@sign,w
 10758  0E16  1903               	btfsc	3,2
 10759  0E17  0008               	return
 10760  0E18  17F3               	bsf	___ftpack@arg+2,7
 10761  0E19  0008               	return
 10762  0E1A                     __end_of___ftpack:	
 10763                           
 10764                           	psect	text64
 10765  0B5F                     __ptext64:	
 10766 ;; *************** function _frexp *****************
 10767 ;; Defined at:
 10768 ;;		line 255 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\frexp.c"
 10769 ;; Parameters:    Size  Location     Type
 10770 ;;  value           3    1[COMMON] float 
 10771 ;;  eptr            1    4[COMMON] PTR int 
 10772 ;;		 -> log@exponent(2), floor@expon(2), 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  3    1[COMMON] PTR int 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;Total ram usage:        6 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:    2
 10791 ;; This function calls:
 10792 ;;		Nothing
 10793 ;; This function is called by:
 10794 ;;		_floor
 10795 ;;		_log
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           
 10800                           ;psect for function _frexp
 10801  0B5F                     _frexp:	
 10802                           
 10803                           ;incstack = 0
 10804                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 10805  0B5F  0873               	movf	frexp@value+2,w
 10806  0B60  0472               	iorwf	frexp@value+1,w
 10807  0B61  0471               	iorwf	frexp@value,w
 10808  0B62  1D03               	skipz
 10809  0B63  2B71               	goto	l4332
 10810  0B64  0874               	movf	frexp@eptr,w
 10811  0B65  0086               	movwf	6
 10812  0B66  0187               	clrf	7
 10813  0B67  3000               	movlw	0
 10814  0B68  3FC0               	movwi [0]fsr1
 10815  0B69  3FC1               	movwi [1]fsr1
 10816  0B6A  3000               	movlw	0
 10817  0B6B  00F1               	movwf	?_frexp
 10818  0B6C  3000               	movlw	0
 10819  0B6D  00F2               	movwf	?_frexp+1
 10820  0B6E  3000               	movlw	0
 10821  0B6F  00F3               	movwf	?_frexp+2
 10822  0B70  0008               	return
 10823  0B71                     l4332:	
 10824  0B71  0873               	movf	frexp@value+2,w
 10825  0B72  397F               	andlw	127
 10826  0B73  00F5               	movwf	??_frexp
 10827  0B74  01F6               	clrf	??_frexp+1
 10828  0B75  35F5               	lslf	??_frexp,f
 10829  0B76  0DF6               	rlf	??_frexp+1,f
 10830  0B77  0874               	movf	frexp@eptr,w
 10831  0B78  0086               	movwf	6
 10832  0B79  0187               	clrf	7
 10833  0B7A  0875               	movf	??_frexp,w
 10834  0B7B  3FC0               	movwi [0]fsr1
 10835  0B7C  0876               	movf	??_frexp+1,w
 10836  0B7D  3FC1               	movwi [1]fsr1
 10837  0B7E  0D72               	rlf	frexp@value+1,w
 10838  0B7F  0D72               	rlf	frexp@value+1,w
 10839  0B80  3901               	andlw	1
 10840  0B81  00F5               	movwf	??_frexp
 10841  0B82  01F6               	clrf	??_frexp+1
 10842  0B83  0874               	movf	frexp@eptr,w
 10843  0B84  0086               	movwf	6
 10844  0B85  0187               	clrf	7
 10845  0B86  0875               	movf	??_frexp,w
 10846  0B87  0481               	iorwf	1,f
 10847  0B88  3141               	addfsr 1,1
 10848  0B89  0876               	movf	??_frexp+1,w
 10849  0B8A  0481               	iorwf	1,f
 10850  0B8B  0874               	movf	frexp@eptr,w
 10851  0B8C  0086               	movwf	6
 10852  0B8D  0187               	clrf	7
 10853  0B8E  3082               	movlw	130
 10854  0B8F  0781               	addwf	1,f
 10855  0B90  3141               	addfsr 1,1
 10856  0B91  30FF               	movlw	255
 10857  0B92  3D81               	addwfc	1,f
 10858  0B93  317F               	addfsr 1,-1
 10859  0B94  0873               	movf	frexp@value+2,w
 10860  0B95  3980               	andlw	-128
 10861  0B96  383F               	iorlw	63
 10862  0B97  00F3               	movwf	frexp@value+2
 10863  0B98  13F2               	bcf	frexp@value+1,7
 10864  0B99  0008               	return
 10865  0B9A                     __end_of_frexp:	
 10866                           
 10867                           	psect	intentry
 10868  0004                     __pintentry:	
 10869 ;; *************** function _INTIsr *****************
 10870 ;; Defined at:
 10871 ;;		line 38 in file "Sensore.c"
 10872 ;; Parameters:    Size  Location     Type
 10873 ;;		None
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;		None
 10876 ;; Return value:  Size  Location     Type
 10877 ;;		None               void
 10878 ;; Registers used:
 10879 ;;		wreg, status,2, status,0, pclath, cstack
 10880 ;; Tracked objects:
 10881 ;;		On entry : 0/0
 10882 ;;		On exit  : 0/0
 10883 ;;		Unchanged: 0/0
 10884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10888 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10889 ;;Total ram usage:        1 bytes
 10890 ;; Hardware stack levels used:    1
 10891 ;; Hardware stack levels required when called:    1
 10892 ;; This function calls:
 10893 ;;		_SYSInt
 10894 ;; This function is called by:
 10895 ;;		Interrupt level 1
 10896 ;; This function uses a non-reentrant model
 10897 ;;
 10898                           
 10899  0004                     _INTIsr:	
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 10903  0004  3180               	pagesel	$
 10904  0005  0020               	movlb	0	; select bank0
 10905  0006  087F               	movf	127,w
 10906  0007  00F0               	movwf	??_INTIsr
 10907                           
 10908                           ;Sensore.c: 40: if(INTCONbits.T0IF==1)
 10909  0008  1D0B               	btfss	11,2	;volatile
 10910  0009  280D               	goto	i1l4618
 10911                           
 10912                           ;Sensore.c: 41: {
 10913                           ;Sensore.c: 43: INTCONbits.T0IF=0;
 10914  000A  110B               	bcf	11,2	;volatile
 10915                           
 10916                           ;Sensore.c: 46: SYSInt();
 10917  000B  3196  26DE         	fcall	_SYSInt
 10918  000D                     i1l4618:	
 10919                           
 10920                           ;Sensore.c: 47: }
 10921                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
 10922  000D  0027               	movlb	7	; select bank7
 10923  000E  1916               	btfsc	22,2	;volatile
 10924                           
 10925                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
 10926  000F  1116               	bcf	22,2	;volatile
 10927  0010  0870               	movf	??_INTIsr,w
 10928  0011  0020               	movlb	0	; select bank0
 10929  0012  00FF               	movwf	127
 10930  0013  0009               	retfie
 10931  0014                     __end_of_INTIsr:	
 10932                           
 10933                           	psect	text66
 10934  16DE                     __ptext66:	
 10935 ;; *************** function _SYSInt *****************
 10936 ;; Defined at:
 10937 ;;		line 36 in file "SYS.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;		None
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;		None
 10942 ;; Return value:  Size  Location     Type
 10943 ;;		None               void
 10944 ;; Registers used:
 10945 ;;		wreg
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;Total ram usage:        0 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; This function calls:
 10958 ;;		Nothing
 10959 ;; This function is called by:
 10960 ;;		_INTIsr
 10961 ;; This function uses a non-reentrant model
 10962 ;;
 10963                           
 10964                           
 10965                           ;psect for function _SYSInt
 10966  16DE                     _SYSInt:	
 10967                           
 10968                           ;SYS.c: 38: u_SYS_STA.TICK=1;
 10969                           
 10970                           ;incstack = 0
 10971                           ; Regs used in _SYSInt: [wreg]
 10972  16DE  0021               	movlb	1	; select bank1
 10973  16DF  1434               	bsf	_u_SYS_STA^(0+128),0
 10974                           
 10975                           ;SYS.c: 41: TMR0=255-156;
 10976  16E0  3063               	movlw	99
 10977  16E1  0020               	movlb	0	; select bank0
 10978  16E2  0095               	movwf	21	;volatile
 10979  16E3  0008               	return
 10980  16E4                     __end_of_SYSInt:	
 10981  0002                     
 10982                           	psect	functab
 10983  0100                     __pfunctab:	
 10984  0100                     __fptable:	
 10985  0100                     fptable:	
 10986  0100  3181               	movlp	high fptable
 10987  0101  0782               	addwf	2,f
 10988  0102                     fpbase:	
 10989  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
 10990  0103                     fp__exp:	
 10991  0103                     entry__exp:	
 10992  0103  3183  2B19         	ljmp	_exp
 10993  0105                     fp__log:	
 10994  0105                     entry__log:	
 10995  0105  3186  2EA5         	ljmp	_log
 10996  0107                     __end_of__fptable:	
 10997  007E                     btemp	set	126	;btemp
 10998  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    62
    Data        55
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80     20      75
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?_frexp	 size(1) Largest target is 3
		 -> ADCConv@tempV(BANK1[3]), 

    ?_ldexp	 size(1) Largest target is 0

    ?_eval_poly	 size(1) Largest target is 3
		 -> ADCConv@tempV(BANK1[3]), 

    ?___ftsub	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?_floor	long  size(1) Largest target is 0

    ?___altoft	float  size(1) Largest target is 0

    ?___ftpack	float  size(1) Largest target is 3
		 -> log(), ADCConv@tempV(BANK1[3]), 

    ?_ADCGetTempCCal	float  size(1) Largest target is 0

    ?_log	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 3
		 -> log(), ADCConv@tempV(BANK1[3]), 

    ?___ftneg	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?_exp	float  size(1) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), CC1Write@cc1Addr(BANK0[1]), 
		 -> CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _CC1Init->_CC1LoadREG
    _CC1LoadREG->_CC1Write
    _PGMSelLong->_PGMWriteNvm
    _PGMSelDown->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _RTXReadPkt->_CC1Read
    _RTXReadPkt->_PGMWriteNvm
    _RTXRcvPkt->_CC1Read
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _CC1Read->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _ADCConv->___awtoft
    _log->___awtoft
    _exp->___awtoft
    ___ftsub->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___altoft->___ftpack
    ___altoft->___fttol
    ___awtoft->___ftpack
    _LEDNormalFlash->_DLYDelay_ms
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead
    ___ftdiv->___awtoft

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PGMInit
    _SYSTask->_PGMSelDown
    _RTXAwake->_RTXInit
    _CC1LoadREG->_CC1Write
    _RTXTick->_RTXSendData
    _RTXTask->_RTXReadPkt
    _RTXSendRPgm->_RTXSndPkt
    _RTXStartSendData->_ADCConv
    _RTXSendData->_ADCGetTempCCal
    _RTXSndPkt->_CC1Write
    _ADCGetTempCCal->___ftadd
    _ADCConv->_exp
    _log->___ftdiv
    _exp->_ldexp
    ___ftsub->___ftadd
    _ldexp->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    _floor->___ftadd
    ___ftadd->___ftmul
    ___altoft->___fttol
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite
    ___ftdiv->___ftadd

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXStartSendData->_ADCConv

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   83185
                                             71 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _CC1Init
                            _LEDInit
                            _NVMInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   29872
                            _DINTick
                           _SLPSleep
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _RTXTick
                           _RTXAwake
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   24960
                        _DLYDelay_ms
                            _CC1Init
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   24335
                                             67 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              1     1      0     557
                                              2 BANK0      1     1      0
                        _DLYDelay_ms
                          _CC1Strobe
                         _CC1LoadREG
 ---------------------------------------------------------------------------------
 (4) _CC1LoadREG                                           1     1      0     260
                                             11 COMMON     1     1      0
                           _CC1Write
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    3127
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           0     0      0     724
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     473
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   27083
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0   27083
                                             69 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                   _RTXStartSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   24106
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (5) _RTXSendData                                          7     7      0    3127
                                             35 BANK0      7     7      0
                     _ADCGetTempCCal
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (6) _RTXSndPkt                                            6     5      1    1114
                                              2 BANK0      6     5      1
                          _CC1Strobe
                            _CC1Read
                           _CC1Write
 ---------------------------------------------------------------------------------
 (7) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (7) _CC1Read                                              5     3      2     390
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIRead                                              5     4      1     130
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (6) _LEDFastFlash                                         3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (6) _ADCGetTempCCal                                       3     0      3    1673
                                             32 BANK0      3     0      3
                            ___ftadd
                             ___ftge
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             22    22      0   20911
                                             65 BANK0      2     2      0
                                              0 BANK1     20    20      0
                                _exp
                                _log
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     162
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) _log                                                  6     3      3    6075
                                             48 BANK0      6     3      3
                           ___awtoft
                          _eval_poly
                              _frexp
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) _exp                                                 13    10      3   10766
                                             52 BANK0     13    10      3
                           ___awtoft
                              _floor
                          _eval_poly
                              _ldexp
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    1602
                                             32 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) _ldexp                                               10     5      5     453
                                             42 BANK0     10     5      5
                          _eval_poly (ARG)
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3      45
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           10     4      6    2683
                                             32 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6     800
                                              3 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               4     3      1      92
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (7) _floor                                                9     6      3    3033
                                             32 BANK0      9     6      3
                           ___altoft
                              _frexp
                            ___ftadd
                             ___ftge
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     252
                                              1 COMMON     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     136
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    1537
                                             19 BANK0     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                             ___bmul (ARG)
                              _frexp (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (8) ___altoft                                             8     4      4     516
                                              9 COMMON     2     2      0
                                              6 BANK0      6     2      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3     445
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (7) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6     732
                                             32 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (7) _frexp                                                6     2      4     224
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _CC1Init
     _DLYDelay_ms
     _CC1Strobe
       _SPIWrite
     _CC1LoadREG
       _CC1Write
         _SPIWrite
   _LEDInit
   _NVMInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _exp
           ___awtoft
             ___ftpack
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
             _frexp
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge
             ___fttol
           _eval_poly
             ___bmul
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___bmul
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftge (ARG)
             ___ftneg (ARG)
           ___ftdiv
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
           ___fttol
         _log
           ___awtoft
             ___ftpack
           _eval_poly
             ___bmul
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftge (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           _frexp (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
         ___ftdiv
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___lwdiv
       _DLYDelay_ms
       _RTXSendData
         _ADCGetTempCCal
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftge
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendData
         _ADCConv
           _exp
             ___awtoft
               ___ftpack
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               _frexp
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge
               ___fttol
             _eval_poly
               ___bmul
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _ldexp
               _eval_poly (ARG)
                 ___bmul
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftge (ARG)
               ___ftneg (ARG)
             ___ftdiv
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
             ___fttol
           _log
             ___awtoft
               ___ftpack
             _eval_poly
               ___bmul
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftdiv
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___lwdiv
         _DLYDelay_ms
         _RTXSendData
           _ADCGetTempCCal
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge
           _LEDFastFlash
             _DLYDelay_ms
           _RTXSndPkt
             _CC1Strobe
               _SPIWrite
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Write
               _SPIWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
   _SYSInit
   _SYSTask
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMTick
     _PGMPgmOff
     _PGMSelDown
       _PGMWriteNvm
         _NVMWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _RTXTick
       _RTXSendData
         _ADCGetTempCCal
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftge
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
     _RTXAwake
       _DLYDelay_ms
       _CC1Init
         _DLYDelay_ms
         _CC1Strobe
           _SPIWrite
         _CC1LoadREG
           _CC1Write
             _SPIWrite
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _exp
               ___awtoft
                 ___ftpack
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                 _frexp
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftge
                 ___fttol
               _eval_poly
                 ___bmul
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               _ldexp
                 _eval_poly (ARG)
                   ___bmul
                   ___ftadd
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___bmul (ARG)
                     _frexp (ARG)
                     ___ftmul (ARG)
                       ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftneg (ARG)
                   ___ftmul
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftge (ARG)
                 ___ftneg (ARG)
               ___ftdiv
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
               ___fttol
             _log
               ___awtoft
                 ___ftpack
               _eval_poly
                 ___bmul
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               _frexp
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftdiv
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___lwdiv
           _DLYDelay_ms
           _RTXSendData
             _ADCGetTempCCal
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Strobe
                 _SPIWrite
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Write
                 _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Nov 15 14:09:06 2014

       __size_of_CC1Strobe 0014               ___altoft@exp 002A                 __CFG_CP$ON 0000  
          SLPSleep@WPUBTmp 0022                          pc 0002             ___bmul@product 0073  
            ___altoft@sign 002B                         l14 17FF                         l36 0A3B  
                       l60 0955              ?_LEDFastFlash 0070                         l56 093A  
                       l65 099D                         l74 092E               ?_DLYDelay_ms 0071  
             ___ftadd@exp1 003F               ___ftadd@exp2 003E               ___ftadd@sign 003D  
                      l204 1719                        l124 0108                        l301 1777  
                      l133 0314                        l206 1721                        l119 0AFC  
                      l304 0AC0                        l153 087D                        l306 0ABE  
                      l244 172C                        l260 055E                        l181 08E1  
                      l271 05D4                        l263 0584                        l256 0544  
                      l249 0A75                        l273 05DB                        l266 058D  
                      l258 054F                        l259 0573                        l276 05ED  
                      l526 0EF1                        l609 0AAB                        l387 0862  
                      l484 0A5F                        l499 0D09                        l692 0C64  
                      l933 04DC                        l693 0CA5                        l694 0CA6  
                      l871 0DEC                        l877 0E03            __end_of_CC1Init 08E2  
          __end_of_CC1Read 08FE                        _exp 0319                        _log 06A5  
          __end_of_ADCConv 0319            __end_of_ADCInit 0AFD               __CFG_BORV$LO 0000  
                      wreg 0009                 _RTXReadPkt 0CB1            __end_of_DINInit 1778  
          __end_of_DINTask 091B            __end_of_DINTick 0AD3               __CFG_LVP$OFF 0000  
         _RTXStartSendData 1748            __end_of_LEDInit 1722               ___ftdiv@cntr 004A  
             ___ftdiv@sign 004F                       l5002 084E                       l5004 0851  
                     l5012 0859                       l3430 0AD5                       l4230 1780  
                     l3408 094A                       l3362 17EB                       l3370 17FA  
                     l3434 0AE3                       l3442 0AF4                       l5018 0848  
                     l4226 177A                       l4314 00A9                       l4074 0A88  
                     l5202 0B39                       l4332 0B71                       l5300 0BEA  
                     l5108 0EEB                       l5140 0CF0                       l4092 0AA0  
                     l5220 0B51                       l3374 0A1A                       l5302 0BFA  
                     l4318 00B1                       l5046 0A3F                       l5054 0A53  
                     l5214 0B47                       l3704 0A63                       l4096 0AA3  
                     l5048 0A44                       l5208 0B40                       l5314 09BD  
                     l5410 04EE                       l5226 0B58                       l3388 0A36  
                     l3652 171C                       l5404 04CE                       l5332 0F26  
                     l4284 004E                       l4604 00EF                       l5172 0D24  
                     l5270 0DD3                       l3822 0915                       l3814 090E  
                     l5414 0500                       l5406 04D8                       l4462 0BB0  
                     l5342 0F71                       l5510 067D                       l4294 0070  
                     l5078 0E8D                       l5280 0DF9                       l5272 0DD8  
                     l5264 0DC2                       l5440 0784                       l3752 05B0  
                     l5424 051B                       l5328 0F1E                       l5352 0DB3  
                     l4608 00F8                       l5434 076E                       l3690 1727  
                     l3818 0911                       l4466 0BC6                       l5506 0675  
                     l4714 09A2                       l5268 0DC9                       l5364 0465  
                     l4548 0F92                       l4820 038D                       l4724 0933  
                     l5278 0DF1                       l5462 07DE                       l5454 07C5  
                     l3686 1724                       l3782 1772                       l3766 05D6  
                     l3774 05E8                       l3758 05B6                       l5374 047B  
                     l4582 0FF7                       l4574 0FDD                       l4566 0FC2  
                     l4814 0363                       l4742 014C                       l4726 091C  
                     l4718 0994                       l5392 04A8                       l5368 046C  
                     l4576 0FE6                       l4568 0FD0                       l4808 0344  
                     l4760 01D3                       l3778 1769                       l5394 04B2  
                     l5386 0495                       l4578 0FE9                       l5482 061E  
                     l4842 0427                       l4940 0958                       l5396 04B7  
                     l5476 0608                       l4852 06C4                       l4596 00D1  
                     l4780 02EE                       l4764 01DF                       ?_exp 0054  
                     ?_log 0050                       l5398 04BB                       l5494 0659  
                     l4598 00DD                       l4782 02F9                       l4950 0976  
                     l5498 0661                       l4858 06D7                       l4786 0300  
                     l4788 030C                       l4876 0C41                       l4798 0326  
                     l4990 0E4D                       l4886 08CA                       l4894 08D8  
                     l4996 0E7A               __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020  
                     u3225 0FDE                       u3305 00F0                       u4115 0496  
                     u4205 04CF                       u3165 0F99                       _PIE1 0091  
                     _PIE2 0092                       u4305 07D5                       u3505 0883  
                     u4145 04A9                       u3265 00D4                       u4315 07DF  
                     u3195 0FC3                       u3285 00DE                       u4175 04BC  
                     u2655 0079                       u3295 00E8                       u4425 067E  
                     u3465 041E                       u4275 0796                       u4435 0684  
                     u4355 062A                       u4285 07A6                       u4365 063A  
                     u4295 07C6                       u4385 0662                       u4457 030F  
                     u3915 0E0A                       u4467 088A                       u4395 0668  
                     u3845 0DCE                       u3865 0DE7                       u3945 0BEF  
                     _PIR1 0011                       _PIR2 0012                       u3885 0DF4  
                     _TMR0 0015                       _WPUB 020D            __end_of_PGMInit 0863  
          __end_of_PGMTick 1767               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
                     _Rinf 00A0           __end_of_CC1Sleep 1706                       _batt 00AE  
                     _main 0C5E           __end_of_CC1Write 0A18               ___ftpack@arg 0071  
          __end_of_NVMInit 172D            __end_of_NVMRead 0A86               ___ftpack@exp 0074  
                     _temp 00B3            __end_of_SPIInit 0956            __end_of_SPIRead 09B2  
                     fsr0h 0005                       fsr1h 0007                       fsr0l 0004  
                     indf0 0000                       indf1 0001                       fsr1l 0006  
                     btemp 007E                       exp@x 0054                       log@x 0050  
          __end_of_OUTInit 0A3C              __CFG_BOREN$ON 0000                       start 0014  
          __end_of_RTXInit 0A60          NVMWrite@latchAddr 0063            __end_of_RTXTask 16EA  
          __end_of_RTXTick 173A              __CFG_IESO$OFF 0000            __end_of_SYSInit 0AAC  
          __end_of_SYSTask 0B5F          ___bmul@multiplier 0074               ___ftmul@cntr 0031  
             ___ftmul@sign 0032               _ADCConv$1530 00D5               _ADCConv$1531 00D8  
             _ADCConv$1529 00D2                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelDown 0070               ___fttol@exp1 0025  
              ?_PGMSelLong 0070                      ??_exp 0057                      ??_log 0053  
             ___fttol@lval 0021                _RTXSendData 0E84                _RTXSendRPgm 09D3  
             SPIInit@state 0072                      ?_main 0070            __end_of___ftadd 0533  
          __end_of___ftdiv 0800            __end_of___ftneg 16FE            __end_of___ftmul 06A5  
                    _T1CON 0018            __end_of___ftsub 08AD            __end_of___fttol 1000  
       __size_of_PGMPgmOff 0004                      _IOCBN 0395                      _IOCBP 0394  
          __end_of___lwdiv 00FF                      _PMADR 0191                      _PMDAT 0193  
                    _TMR1H 0017                      _TMR1L 0016                      _PORTB 000D  
                    _PORTC 000E                      _TRISA 008C                      _TRISB 008D  
                    _TRISC 008E              __CFG_PWRTE$ON 0000                      _battV 00A3  
              _sys_pgm_sta 00B2              ___awtoft@sign 0022          __end_of_CC1Strobe 17E9  
                    _floor 0EF4                      _ldexp 0041                      _frexp 0B5F  
                    _errno 00A9                      _tempC 00A6                      _pktRx 00B8  
                    _pktTx 00C1              ___ftpack@sign 0075                      main@i 0068  
                    fpbase 0102           __end_of_SLPSleep 0E84           __end_of_NVMWrite 05F1  
         __end_of_SPIWrite 0938           __end_of_RTXAwake 08C7          LEDNormalFlash@num 0078  
                    status 0003                      wtemp0 007E               ?_PGMCheckNvm 0070  
              exp@exponent 005E                ldexp@newexp 004D             __CFG_MCLRE$OFF 0000  
          __initialization 0016               DLYDelay_ms@i 0075                log@exponent 0054  
             __end_of_main 0CB1         __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0057  
                ??_CC1Init 007C                  ??_CC1Read 0079                  ??_ADCConv 0061  
  __size_of_ADCGetTempCCal 004C                  ??_ADCInit 0071             CC1Strobe@e_stb 0078  
             ??_CC1LoadREG 007B                     ??_main 0067                 _cc1PaTable 00E3  
            ___fttol@sign1 0020               CC1Init@state 0022                  ??_DINInit 0071  
             NVMWrite@addr 0071                  ??_DINTask 0071                  ??_DINTick 0071  
               _cc1InitVal 0120                  ??_LEDInit 0071               ?_PGMNvmReset 0070  
                ??_PGMInit 007C                  ??_PGMTick 0071                ?_RTXReadPkt 0070  
                   _ADCON0 009D                     _ADCON1 009E              SPIRead@dstPtr 0074  
                   ?_floor 0040                     ?_ldexp 004A                     ?_frexp 0071  
                ??_NVMInit 0071                  ??_NVMRead 0075           __end_of___altoft 0C12  
                   _ADRESH 009C                  ??_SPIInit 0071                  ??_SPIRead 0072  
           _LEDNormalFlash 0956                  ??_OUTInit 0071           __end_of___awtoft 09D3  
                   _ANSELA 018C                     _ANSELB 018D                     _ANSELC 018E  
         __end_of___ftpack 0E1A        __size_of_PGMReadNvm 0013                  ??_RTXInit 007C  
             ?_PGMWriteNvm 0070        __size_of_PGMSelDown 0013                  ??_RTXTask 007C  
                ??_RTXTick 007C                     i1l4618 000D        __size_of_PGMSelLong 0009  
                   _INTCON 000B                     _FVRCON 0117                  ??_SYSInit 0071  
                   _PMCON1 0195                     _PMCON2 0196                  ??_SYSTask 007C  
                   _INTIsr 0004                     _OSCCON 0099                     _INInit 17E9  
                   _WDTCON 0097                     _SSPBUF 0211           __end_of__fptable 0107  
            LEDFastFlash@i 0079          __end_of_PGMPgmOff 16DE                     _SYSInt 16DE  
       __end_of_CC1LoadREG 087B        RTXReadPkt@numRxByte 0066                     ___bmul 1778  
                   ___ftge 0B9A                     _adc_ch 00AD                  ??___ftadd 0039  
           __CFG_STVREN$ON 0000                  ??___ftdiv 0046                  ??___ftneg 0074  
                ??___ftmul 0029                  ??___ftsub 007C                  ??___fttol 0075  
                ??___lwdiv 0075                     _tmrPgm 006C                     fp__exp 0103  
                   fp__log 0105                     floor@i 0044                     floor@x 0040  
    ___ftmul@f3_as_product 002E                  ?_CC1Sleep 0070                     fptable 0100  
     __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077                     fptotal 0002  
   __end_of_LEDNormalFlash 0974          __end_of_RTXRcvPkt 1748          __end_of_RTXSndPkt 0D5E  
     __end_of_LEDFastFlash 0992           __end_ofexp@coeff 081F           __end_oflog@coeff 083A  
  __end_of__initialization 003E                 ___altoft@c 0026                 ___ftadd@f1 0033  
               ___ftadd@f2 0036                 ___ftge@ff1 0071                 ___ftge@ff2 0074  
             eval_poly@res 0047                 ___ftdiv@f1 0043                 ___ftdiv@f2 0040  
               ___ftdiv@f3 004B                 ___ftneg@f1 0071                 ___awtoft@c 0079  
      ___bmul@multiplicand 0071                 ___ftmul@f1 0023                 ___ftmul@f2 0026  
               ___ftsub@f1 0043                 ___ftsub@f2 0040                 ___fttol@f1 0071  
           __pcstackCOMMON 0070               __pidataBANK1 1706               __pidataBANK2 0AFD  
      __size_of_RTXReadPkt 0056   __end_of_RTXStartSendData 1757              __end_of_floor 0F79  
          NVMWrite@rowAddr 0060              __end_of_ldexp 00C9              __end_of_frexp 0B9A  
                ?_SLPSleep 0070                  ?_NVMWrite 0071            CC1Strobe@cc1Stb 0079  
                ?_SPIWrite 0071                 CC1Read@len 0078                 CC1Read@dst 0077  
               ??_CC1Sleep 007A                  ?_RTXAwake 0070                 ??_CC1Write 007A  
             CC1Write@addr 0020             ADCConv@sumBatt 00DB             ADCConv@sumTemp 00DD  
          ?_LEDNormalFlash 0070                    ??_floor 0043                    ??_ldexp 004F  
                  ??_frexp 0075                 __pbssBANK0 0069                 __pbssBANK1 00A0  
       __size_of_eval_poly 005C                    ?_INTIsr 0070                    ?_INInit 0070  
          __CFG_VCAPEN$OFF 0000               ADCConv@tempV 00DF                    ?_SYSInt 0070  
                INInit@sta 0072       __size_of_PGMCheckNvm 000C                 __pmaintext 0C5E  
                  ?___bmul 0071                    ?___ftge 0071               ??_PGMReadNvm 0078  
          CC1Write@cc1Addr 0021               ??_PGMSelDown 0065               ??_PGMSelLong 007C  
               __pintentry 0004               ?_RTXSendData 0070               ?_RTXSendRPgm 0070  
           _ADCGetTempCCal 0C12                    _CC1Init 08C7                    _CC1Read 08E2  
                ?___altoft 0026                    _ADCConv 0107                    _ADCInit 0AD3  
        _u_in_sta_currTask 007C                  ?___awtoft 0079                  ?___ftpack 0071  
               ??_SLPSleep 007A                 ??_NVMWrite 0075                 _cntSndData 0069  
               ??_SPIWrite 0074                    _DINInit 1767                 ??_RTXAwake 007C  
                  _DINTick 0AAC                    _DINTask 08FE               ADCInit@state 0072  
                  _LEDInit 1717         RTXSendData@valBatt 0047                    _PGMInit 084B  
                  _PGMTick 1757         RTXSendData@valTemp 0044                 _ldexp$1133 0051  
     __size_of_PGMNvmReset 0013                    _SSPCON1 0215                    _SSPCON2 0216  
                  _NVMInit 1722                    _NVMRead 0A60                    _SPIInit 0938  
                  _SPIRead 0992                    _SSPSTAT 0214                    _OUTInit 0A18  
               __stringtab 0800                    _RTXInit 0A3C                    _RTXTick 172D  
                  _RTXTask 16E4         __end_of_PGMReadNvm 179C                    _SYSInit 0A86  
                  _SYSTask 0B2C         __end_of_PGMSelDown 17D5         __end_of_PGMSelLong 1717  
                _CC1Strobe 17D5            __size_of_INTIsr 0010            __size_of_INInit 0017  
     __size_of_PGMWriteNvm 0013            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064     __end_of_ADCGetTempCCal 0C5E                  SPIWrite@i 0076  
          __size_of___bmul 0011            __size_of___ftge 003B                    ___ftadd 043D  
             RTXInit@state 0063                    ___ftdiv 0757                    ___ftneg 16F6  
                  ___ftmul 05F1                    ___ftsub 0894                    ___fttol 0F79  
                  ___lwdiv 00C9                 ??___altoft 0079                 ??___awtoft 0020  
               ??___ftpack 0076          __end_of_eval_poly 0DBA                    __ptext1 0B2C  
                  __ptext2 08AD                    __ptext3 0A3C                    __ptext4 08C7  
                  __ptext5 0863                    __ptext6 172D                    __ptext7 170E  
                  __ptext8 17C2                    __ptext9 16DA                    _flg_slp 00AF  
             __size_of_exp 0124               __size_of_log 00B2                    _pgm_cfg 00CA  
                  _pgm_flg 006A      __size_of_LEDFastFlash 001E                  _IOCBFbits 0396  
             ??_RTXReadPkt 0065                    clrloop0 16F1                    _rtx_flg 00B0  
             RTXRcvPkt@len 0020               RTXRcvPkt@dst 0023       end_of_initialization 003E  
               _u_in_ev_up 00B7                    exp@sign 0060                 ?_CC1Strobe 0070  
       RTXSndPkt@numRxByte 0025                    init_ram 16EA         RTXSndPkt@numTxByte 0026  
                  initloop 16EB               RTXSndPkt@len 0022               RTXSndPkt@src 0024  
             RTXSndPkt@sta 0027                  _PGMPgmOff 16DA            ?_ADCGetTempCCal 0040  
               _tmrDbncSel 006B         __end_of_RTXReadPkt 0D07                 DINInit@sta 0071  
             _LEDFastFlash 0974                  _PORTBbits 000D                 _tmrLongSel 00AB  
         __CFG_FOSC$INTOSC 0000          __size_of_CC1Sleep 0008          __size_of_CC1Write 0023  
              NVMRead@addr 0071                NVMRead@dest 0073                  _RTXRcvPkt 173A  
                _RTXSndPkt 0D07                ___ftdiv@exp 004E             __end_of_INTIsr 0014  
           __end_of_INInit 1800             __end_of_SYSInt 16E4                ___ftmul@exp 002D  
               ?_PGMPgmOff 0070                 LEDInit@sta 0071             DLYDelay_ms@val 0071  
           __end_of___bmul 1789          ?_RTXStartSendData 0070             __end_of___ftge 0BD5  
            ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C       __size_of_RTXSendData 0070  
         ??_LEDNormalFlash 0077       __size_of_RTXSendRPgm 0022                 floor@expon 0047  
             SYSInit@state 0072          __size_of_SLPSleep 006A          __size_of_NVMWrite 00BE  
        __size_of_SPIWrite 001D        start_initialization 0016                 eval_poly@d 0043  
               eval_poly@n 0044                 eval_poly@x 0040          __size_of_RTXAwake 001A  
               ldexp@value 004A                __end_of_exp 043D                __end_of_log 0757  
              CC1Read@addr 007A                NVMWrite@len 0074                   ??_INTIsr 0070  
               frexp@value 0071                   ??_INInit 0071                ??_CC1Strobe 0077  
               ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022                   ??_SYSInt 0070  
           CC1Read@cc1Addr 007B                   ??___bmul 0072                   ??___ftge 0077  
                 ?_CC1Init 0070                __pdataBANK1 00E3                   ?_CC1Read 0077  
              __pdataBANK2 0120                SPIWrite@len 0073                   ?_ADCConv 0070  
                 ?_ADCInit 0070          __size_of___altoft 003D                   ?_DINInit 0070  
                 ?_DINTask 0070                   ?_DINTick 0070          __size_of___awtoft 0021  
        __size_of___ftpack 0060                   ?_LEDInit 0070                __pbssCOMMON 007C  
            __pcstackBANK0 0020              __pcstackBANK1 00CF        __end_of_DLYDelay_ms 0894  
                _s_CC1_FLG 00B1                   ?_PGMInit 0070                   ?_PGMTick 0070  
        __size_of__fptable 0007                   ?_NVMInit 0070                   ?_NVMRead 0071  
                 ?_SPIInit 0070              ADCConv@cntSum 00E2                   ?_SPIRead 0071  
           NVMWrite@source 0073                   ?_OUTInit 0070               PGMInit@state 0066  
                 ?_RTXInit 0070                   ?_RTXTask 0070                   ?_RTXTick 0070  
              CC1Write@len 0079                   ?_SYSInit 0070                CC1Write@src 0077  
                 ?_SYSTask 0070              ??_PGMCheckNvm 007C                ADCConv@Rntc 00CF  
         ___lwdiv@dividend 0073                  __pfunctab 0100                ??_PGMPgmOff 0071  
                 ?___ftadd 0033                   ?___ftdiv 0040                   ?___ftneg 0071  
                 ?___ftmul 0023                   ?___ftsub 0040                   ?___fttol 0071  
                 ?___lwdiv 0071                  _u_SYS_STA 00B4                  __pstrings 0800  
         _u_in_sta_tmpTask 006F                   NVMRead@i 0077                   _CC1Sleep 16FE  
            ??_PGMNvmReset 0065                   SPIRead@i 0075                   _CC1Write 09F5  
                _eval_poly 0D5E           ___lwdiv@quotient 0076             __size_of_floor 0085  
           __size_of_ldexp 0088             __size_of_frexp 003B              ??_PGMWriteNvm 0078  
                _u_flg_din 006E                ??_RTXRcvPkt 0021                ??_RTXSndPkt 0023  
                 _LATAbits 010C                   _LATBbits 010D                   _LATCbits 010E  
         ??_ADCGetTempCCal 007C                  clear_ram0 16F0                   _PIR1bits 0011  
      __end_of_PGMCheckNvm 084B      SLPSleep@OPTION_REGTmp 0024                  _tmrRcvPkt 006D  
         __size_of_CC1Init 001B           __size_of_CC1Read 001C                   _SLPSleep 0E1A  
              _DLYDelay_ms 087B                 _CC1LoadREG 0863                   _NVMWrite 0533  
         __size_of_ADCConv 0212           __size_of_ADCInit 002A                 _ADCON0bits 009D  
                 _SPIWrite 091B                 NVMInit@sta 0071                 NVMRead@len 0074  
          LEDFastFlash@num 0078                   _RTXAwake 08AD           __size_of_DINInit 0011  
         __size_of_DINTask 001D           __size_of_DINTick 0027                 ?_eval_poly 0040  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0018  
         __size_of_PGMTick 0010        __end_of_PGMNvmReset 17C2           __size_of_NVMInit 000B  
         __size_of_NVMRead 0026           __size_of_SPIInit 001E           __size_of_SPIRead 0020  
             _u_in_ev_down 00B5            LEDNormalFlash@i 0079               _u_in_ev_long 00B6  
         __size_of_OUTInit 0024           __size_of_RTXInit 0024           __size_of_RTXTask 0006  
         __size_of_RTXTick 000D           __size_of_SYSInit 0026           __size_of_SYSTask 0033  
                frexp@eptr 0074                 OUTInit@sta 0072        __end_of_PGMWriteNvm 17AF  
                entry__exp 0103                  entry__log 0105           __size_of___ftadd 00F6  
         __size_of___ftdiv 00A9           __size_of___ftneg 0008                   ___altoft 0BD5  
         __size_of___ftmul 00B4           __size_of___ftsub 0019           __size_of___fttol 0087  
         __size_of___lwdiv 0036                   ___awtoft 09B2                   ___ftpack 0DBA  
       __end_of__stringtab 0801                   _exp$1092 005B                   _exp$1532 0058  
                 __fptable 0100            ___lwdiv@divisor 0071            ___lwdiv@counter 0078  
                 __ptext10 1757                   __ptext11 0E1A                   __ptext20 0E84  
                 __ptext12 16FE                   __ptext21 0D07                   __ptext13 0AAC  
                 __ptext30 00C9                   __ptext22 09F5                   __ptext14 0A86  
                 __ptext31 06A5                   __ptext23 08E2                   __ptext15 16E4  
                 __ptext40 0F79                   __ptext32 0319                   __ptext24 0992  
                 __ptext16 0CB1                   __ptext41 0B9A                   __ptext33 0894  
                 __ptext25 17D5                   __ptext17 09D3                   __ptext50 179C  
                 __ptext42 043D                   __ptext34 0041                   __ptext26 091B  
                 __ptext18 173A                   __ptext51 0533                   __ptext43 0BD5  
                 __ptext35 16F6                   __ptext27 0974                   __ptext19 1748  
                 __ptext60 0A18                   __ptext52 1789                   __ptext44 09B2  
                 __ptext36 0D5E                   __ptext28 0C12                   __ptext61 17E9  
                 __ptext53 0A60                   __ptext45 0956                   __ptext37 05F1  
                 __ptext29 0107                   __ptext62 0757                   __ptext54 08FE  
                 __ptext46 087B                   __ptext38 1778                   __ptext63 0DBA  
                 __ptext55 1767                   __ptext47 084B                   __ptext39 0EF4  
                 __ptext64 0B5F                   __ptext56 1722                   __ptext48 083F  
                 __ptext57 1717                   __ptext49 17AF                   __ptext66 16DE  
                 __ptext58 0AD3                   __ptext59 0938  __size_of_RTXStartSendData 000F  
      __end_of_nvm_pgm_cfg 083F              __size_of_main 0053                _PGMCheckNvm 083F  
            ??_RTXSendData 0043              ??_RTXSendRPgm 0028          SLPSleep@ADCON0Tmp 0026  
              ?_CC1LoadREG 0070                   exp@coeff 0801                   log@coeff 081F  
              _PGMNvmReset 17AF                 _INTCONbits 000B                ??_eval_poly 0046  
           SPIWrite@srcPtr 0071                   intlevel1 0100                _PGMWriteNvm 179C  
               _PMCON1bits 0195          __CFG_CLKOUTEN$OFF 0000        SLPSleep@TESTBATTtmp 0027  
               _PGMReadNvm 1789                 _PGMSelDown 17C2                 _PGMSelLong 170E  
        SLPSleep@INTCONTmp 0021          SLPSleep@FVRCONTmp 0025                 _OPTION_REG 0095  
      __end_of_RTXSendData 0EF4        __end_of_RTXSendRPgm 09F5                _nvm_pgm_cfg 083A  
         SLPSleep@IOCBNTmp 0020    __size_of_LEDNormalFlash 001E        __size_of_CC1LoadREG 0018  
        SLPSleep@WDTCONTmp 0023                 _SSPCONbits 0215  
