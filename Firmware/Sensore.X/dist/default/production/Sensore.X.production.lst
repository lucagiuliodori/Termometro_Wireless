

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Nov 15 14:20:57 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	functab,global,reloc=256,class=CODE,delta=2
    85                           	dabs	1,0x7E,2
    86  0000                     	;# 
    87  0001                     	;# 
    88  0002                     	;# 
    89  0003                     	;# 
    90  0004                     	;# 
    91  0005                     	;# 
    92  0006                     	;# 
    93  0007                     	;# 
    94  0008                     	;# 
    95  0009                     	;# 
    96  000A                     	;# 
    97  000B                     	;# 
    98  000C                     	;# 
    99  000D                     	;# 
   100  000E                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0016                     	;# 
   107  0017                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0095                     	;# 
   120  0096                     	;# 
   121  0097                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009E                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  0116                     	;# 
   133  0117                     	;# 
   134  011D                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  018E                     	;# 
   138  0191                     	;# 
   139  0191                     	;# 
   140  0192                     	;# 
   141  0193                     	;# 
   142  0193                     	;# 
   143  0194                     	;# 
   144  0195                     	;# 
   145  0196                     	;# 
   146  0197                     	;# 
   147  0199                     	;# 
   148  019A                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019D                     	;# 
   156  019E                     	;# 
   157  019F                     	;# 
   158  020D                     	;# 
   159  0210                     	;# 
   160  0211                     	;# 
   161  0211                     	;# 
   162  0212                     	;# 
   163  0212                     	;# 
   164  0213                     	;# 
   165  0213                     	;# 
   166  0214                     	;# 
   167  0214                     	;# 
   168  0215                     	;# 
   169  0215                     	;# 
   170  0215                     	;# 
   171  0216                     	;# 
   172  0216                     	;# 
   173  0217                     	;# 
   174  0217                     	;# 
   175  0291                     	;# 
   176  0291                     	;# 
   177  0292                     	;# 
   178  0293                     	;# 
   179  0298                     	;# 
   180  0298                     	;# 
   181  0299                     	;# 
   182  029A                     	;# 
   183  0394                     	;# 
   184  0395                     	;# 
   185  0396                     	;# 
   186  0FE4                     	;# 
   187  0FE5                     	;# 
   188  0FE6                     	;# 
   189  0FE7                     	;# 
   190  0FE8                     	;# 
   191  0FE9                     	;# 
   192  0FEA                     	;# 
   193  0FEB                     	;# 
   194  0FED                     	;# 
   195  0FEE                     	;# 
   196  0FEF                     	;# 
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0008                     	;# 
   206  0009                     	;# 
   207  000A                     	;# 
   208  000B                     	;# 
   209  000C                     	;# 
   210  000D                     	;# 
   211  000E                     	;# 
   212  0010                     	;# 
   213  0011                     	;# 
   214  0012                     	;# 
   215  0015                     	;# 
   216  0016                     	;# 
   217  0016                     	;# 
   218  0017                     	;# 
   219  0018                     	;# 
   220  0019                     	;# 
   221  001A                     	;# 
   222  001B                     	;# 
   223  001C                     	;# 
   224  008C                     	;# 
   225  008D                     	;# 
   226  008E                     	;# 
   227  0090                     	;# 
   228  0091                     	;# 
   229  0092                     	;# 
   230  0095                     	;# 
   231  0096                     	;# 
   232  0097                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009B                     	;# 
   237  009C                     	;# 
   238  009D                     	;# 
   239  009E                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  0116                     	;# 
   244  0117                     	;# 
   245  011D                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  018E                     	;# 
   249  0191                     	;# 
   250  0191                     	;# 
   251  0192                     	;# 
   252  0193                     	;# 
   253  0193                     	;# 
   254  0194                     	;# 
   255  0195                     	;# 
   256  0196                     	;# 
   257  0197                     	;# 
   258  0199                     	;# 
   259  019A                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019C                     	;# 
   265  019C                     	;# 
   266  019D                     	;# 
   267  019E                     	;# 
   268  019F                     	;# 
   269  020D                     	;# 
   270  0210                     	;# 
   271  0211                     	;# 
   272  0211                     	;# 
   273  0212                     	;# 
   274  0212                     	;# 
   275  0213                     	;# 
   276  0213                     	;# 
   277  0214                     	;# 
   278  0214                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0215                     	;# 
   282  0216                     	;# 
   283  0216                     	;# 
   284  0217                     	;# 
   285  0217                     	;# 
   286  0291                     	;# 
   287  0291                     	;# 
   288  0292                     	;# 
   289  0293                     	;# 
   290  0298                     	;# 
   291  0298                     	;# 
   292  0299                     	;# 
   293  029A                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  0FE4                     	;# 
   298  0FE5                     	;# 
   299  0FE6                     	;# 
   300  0FE7                     	;# 
   301  0FE8                     	;# 
   302  0FE9                     	;# 
   303  0FEA                     	;# 
   304  0FEB                     	;# 
   305  0FED                     	;# 
   306  0FEE                     	;# 
   307  0FEF                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  0008                     	;# 
   317  0009                     	;# 
   318  000A                     	;# 
   319  000B                     	;# 
   320  000C                     	;# 
   321  000D                     	;# 
   322  000E                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  008C                     	;# 
   336  008D                     	;# 
   337  008E                     	;# 
   338  0090                     	;# 
   339  0091                     	;# 
   340  0092                     	;# 
   341  0095                     	;# 
   342  0096                     	;# 
   343  0097                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009B                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  010C                     	;# 
   352  010D                     	;# 
   353  010E                     	;# 
   354  0116                     	;# 
   355  0117                     	;# 
   356  011D                     	;# 
   357  018C                     	;# 
   358  018D                     	;# 
   359  018E                     	;# 
   360  0191                     	;# 
   361  0191                     	;# 
   362  0192                     	;# 
   363  0193                     	;# 
   364  0193                     	;# 
   365  0194                     	;# 
   366  0195                     	;# 
   367  0196                     	;# 
   368  0197                     	;# 
   369  0199                     	;# 
   370  019A                     	;# 
   371  019B                     	;# 
   372  019B                     	;# 
   373  019B                     	;# 
   374  019B                     	;# 
   375  019C                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020D                     	;# 
   381  0210                     	;# 
   382  0211                     	;# 
   383  0211                     	;# 
   384  0212                     	;# 
   385  0212                     	;# 
   386  0213                     	;# 
   387  0213                     	;# 
   388  0214                     	;# 
   389  0214                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0216                     	;# 
   394  0216                     	;# 
   395  0217                     	;# 
   396  0217                     	;# 
   397  0291                     	;# 
   398  0291                     	;# 
   399  0292                     	;# 
   400  0293                     	;# 
   401  0298                     	;# 
   402  0298                     	;# 
   403  0299                     	;# 
   404  029A                     	;# 
   405  0394                     	;# 
   406  0395                     	;# 
   407  0396                     	;# 
   408  0FE4                     	;# 
   409  0FE5                     	;# 
   410  0FE6                     	;# 
   411  0FE7                     	;# 
   412  0FE8                     	;# 
   413  0FE9                     	;# 
   414  0FEA                     	;# 
   415  0FEB                     	;# 
   416  0FED                     	;# 
   417  0FEE                     	;# 
   418  0FEF                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0008                     	;# 
   428  0009                     	;# 
   429  000A                     	;# 
   430  000B                     	;# 
   431  000C                     	;# 
   432  000D                     	;# 
   433  000E                     	;# 
   434  0010                     	;# 
   435  0011                     	;# 
   436  0012                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0016                     	;# 
   440  0017                     	;# 
   441  0018                     	;# 
   442  0019                     	;# 
   443  001A                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  008C                     	;# 
   447  008D                     	;# 
   448  008E                     	;# 
   449  0090                     	;# 
   450  0091                     	;# 
   451  0092                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  010E                     	;# 
   465  0116                     	;# 
   466  0117                     	;# 
   467  011D                     	;# 
   468  018C                     	;# 
   469  018D                     	;# 
   470  018E                     	;# 
   471  0191                     	;# 
   472  0191                     	;# 
   473  0192                     	;# 
   474  0193                     	;# 
   475  0193                     	;# 
   476  0194                     	;# 
   477  0195                     	;# 
   478  0196                     	;# 
   479  0197                     	;# 
   480  0199                     	;# 
   481  019A                     	;# 
   482  019B                     	;# 
   483  019B                     	;# 
   484  019B                     	;# 
   485  019B                     	;# 
   486  019C                     	;# 
   487  019C                     	;# 
   488  019D                     	;# 
   489  019E                     	;# 
   490  019F                     	;# 
   491  020D                     	;# 
   492  0210                     	;# 
   493  0211                     	;# 
   494  0211                     	;# 
   495  0212                     	;# 
   496  0212                     	;# 
   497  0213                     	;# 
   498  0213                     	;# 
   499  0214                     	;# 
   500  0214                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0215                     	;# 
   504  0216                     	;# 
   505  0216                     	;# 
   506  0217                     	;# 
   507  0217                     	;# 
   508  0291                     	;# 
   509  0291                     	;# 
   510  0292                     	;# 
   511  0293                     	;# 
   512  0298                     	;# 
   513  0298                     	;# 
   514  0299                     	;# 
   515  029A                     	;# 
   516  0394                     	;# 
   517  0395                     	;# 
   518  0396                     	;# 
   519  0FE4                     	;# 
   520  0FE5                     	;# 
   521  0FE6                     	;# 
   522  0FE7                     	;# 
   523  0FE8                     	;# 
   524  0FE9                     	;# 
   525  0FEA                     	;# 
   526  0FEB                     	;# 
   527  0FED                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000D                     	;# 
   544  000E                     	;# 
   545  0010                     	;# 
   546  0011                     	;# 
   547  0012                     	;# 
   548  0015                     	;# 
   549  0016                     	;# 
   550  0016                     	;# 
   551  0017                     	;# 
   552  0018                     	;# 
   553  0019                     	;# 
   554  001A                     	;# 
   555  001B                     	;# 
   556  001C                     	;# 
   557  008C                     	;# 
   558  008D                     	;# 
   559  008E                     	;# 
   560  0090                     	;# 
   561  0091                     	;# 
   562  0092                     	;# 
   563  0095                     	;# 
   564  0096                     	;# 
   565  0097                     	;# 
   566  0099                     	;# 
   567  009A                     	;# 
   568  009B                     	;# 
   569  009B                     	;# 
   570  009C                     	;# 
   571  009D                     	;# 
   572  009E                     	;# 
   573  010C                     	;# 
   574  010D                     	;# 
   575  010E                     	;# 
   576  0116                     	;# 
   577  0117                     	;# 
   578  011D                     	;# 
   579  018C                     	;# 
   580  018D                     	;# 
   581  018E                     	;# 
   582  0191                     	;# 
   583  0191                     	;# 
   584  0192                     	;# 
   585  0193                     	;# 
   586  0193                     	;# 
   587  0194                     	;# 
   588  0195                     	;# 
   589  0196                     	;# 
   590  0197                     	;# 
   591  0199                     	;# 
   592  019A                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019C                     	;# 
   598  019C                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019F                     	;# 
   602  020D                     	;# 
   603  0210                     	;# 
   604  0211                     	;# 
   605  0211                     	;# 
   606  0212                     	;# 
   607  0212                     	;# 
   608  0213                     	;# 
   609  0213                     	;# 
   610  0214                     	;# 
   611  0214                     	;# 
   612  0215                     	;# 
   613  0215                     	;# 
   614  0215                     	;# 
   615  0216                     	;# 
   616  0216                     	;# 
   617  0217                     	;# 
   618  0217                     	;# 
   619  0291                     	;# 
   620  0291                     	;# 
   621  0292                     	;# 
   622  0293                     	;# 
   623  0298                     	;# 
   624  0298                     	;# 
   625  0299                     	;# 
   626  029A                     	;# 
   627  0394                     	;# 
   628  0395                     	;# 
   629  0396                     	;# 
   630  0FE4                     	;# 
   631  0FE5                     	;# 
   632  0FE6                     	;# 
   633  0FE7                     	;# 
   634  0FE8                     	;# 
   635  0FE9                     	;# 
   636  0FEA                     	;# 
   637  0FEB                     	;# 
   638  0FED                     	;# 
   639  0FEE                     	;# 
   640  0FEF                     	;# 
   641  0000                     	;# 
   642  0001                     	;# 
   643  0002                     	;# 
   644  0003                     	;# 
   645  0004                     	;# 
   646  0005                     	;# 
   647  0006                     	;# 
   648  0007                     	;# 
   649  0008                     	;# 
   650  0009                     	;# 
   651  000A                     	;# 
   652  000B                     	;# 
   653  000C                     	;# 
   654  000D                     	;# 
   655  000E                     	;# 
   656  0010                     	;# 
   657  0011                     	;# 
   658  0012                     	;# 
   659  0015                     	;# 
   660  0016                     	;# 
   661  0016                     	;# 
   662  0017                     	;# 
   663  0018                     	;# 
   664  0019                     	;# 
   665  001A                     	;# 
   666  001B                     	;# 
   667  001C                     	;# 
   668  008C                     	;# 
   669  008D                     	;# 
   670  008E                     	;# 
   671  0090                     	;# 
   672  0091                     	;# 
   673  0092                     	;# 
   674  0095                     	;# 
   675  0096                     	;# 
   676  0097                     	;# 
   677  0099                     	;# 
   678  009A                     	;# 
   679  009B                     	;# 
   680  009B                     	;# 
   681  009C                     	;# 
   682  009D                     	;# 
   683  009E                     	;# 
   684  010C                     	;# 
   685  010D                     	;# 
   686  010E                     	;# 
   687  0116                     	;# 
   688  0117                     	;# 
   689  011D                     	;# 
   690  018C                     	;# 
   691  018D                     	;# 
   692  018E                     	;# 
   693  0191                     	;# 
   694  0191                     	;# 
   695  0192                     	;# 
   696  0193                     	;# 
   697  0193                     	;# 
   698  0194                     	;# 
   699  0195                     	;# 
   700  0196                     	;# 
   701  0197                     	;# 
   702  0199                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019C                     	;# 
   709  019C                     	;# 
   710  019D                     	;# 
   711  019E                     	;# 
   712  019F                     	;# 
   713  020D                     	;# 
   714  0210                     	;# 
   715  0211                     	;# 
   716  0211                     	;# 
   717  0212                     	;# 
   718  0212                     	;# 
   719  0213                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0214                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0216                     	;# 
   727  0216                     	;# 
   728  0217                     	;# 
   729  0217                     	;# 
   730  0291                     	;# 
   731  0291                     	;# 
   732  0292                     	;# 
   733  0293                     	;# 
   734  0298                     	;# 
   735  0298                     	;# 
   736  0299                     	;# 
   737  029A                     	;# 
   738  0394                     	;# 
   739  0395                     	;# 
   740  0396                     	;# 
   741  0FE4                     	;# 
   742  0FE5                     	;# 
   743  0FE6                     	;# 
   744  0FE7                     	;# 
   745  0FE8                     	;# 
   746  0FE9                     	;# 
   747  0FEA                     	;# 
   748  0FEB                     	;# 
   749  0FED                     	;# 
   750  0FEE                     	;# 
   751  0FEF                     	;# 
   752  0000                     	;# 
   753  0001                     	;# 
   754  0002                     	;# 
   755  0003                     	;# 
   756  0004                     	;# 
   757  0005                     	;# 
   758  0006                     	;# 
   759  0007                     	;# 
   760  0008                     	;# 
   761  0009                     	;# 
   762  000A                     	;# 
   763  000B                     	;# 
   764  000C                     	;# 
   765  000D                     	;# 
   766  000E                     	;# 
   767  0010                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  0090                     	;# 
   783  0091                     	;# 
   784  0092                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  010C                     	;# 
   796  010D                     	;# 
   797  010E                     	;# 
   798  0116                     	;# 
   799  0117                     	;# 
   800  011D                     	;# 
   801  018C                     	;# 
   802  018D                     	;# 
   803  018E                     	;# 
   804  0191                     	;# 
   805  0191                     	;# 
   806  0192                     	;# 
   807  0193                     	;# 
   808  0193                     	;# 
   809  0194                     	;# 
   810  0195                     	;# 
   811  0196                     	;# 
   812  0197                     	;# 
   813  0199                     	;# 
   814  019A                     	;# 
   815  019B                     	;# 
   816  019B                     	;# 
   817  019B                     	;# 
   818  019B                     	;# 
   819  019C                     	;# 
   820  019C                     	;# 
   821  019D                     	;# 
   822  019E                     	;# 
   823  019F                     	;# 
   824  020D                     	;# 
   825  0210                     	;# 
   826  0211                     	;# 
   827  0211                     	;# 
   828  0212                     	;# 
   829  0212                     	;# 
   830  0213                     	;# 
   831  0213                     	;# 
   832  0214                     	;# 
   833  0214                     	;# 
   834  0215                     	;# 
   835  0215                     	;# 
   836  0215                     	;# 
   837  0216                     	;# 
   838  0216                     	;# 
   839  0217                     	;# 
   840  0217                     	;# 
   841  0291                     	;# 
   842  0291                     	;# 
   843  0292                     	;# 
   844  0293                     	;# 
   845  0298                     	;# 
   846  0298                     	;# 
   847  0299                     	;# 
   848  029A                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  0FE4                     	;# 
   853  0FE5                     	;# 
   854  0FE6                     	;# 
   855  0FE7                     	;# 
   856  0FE8                     	;# 
   857  0FE9                     	;# 
   858  0FEA                     	;# 
   859  0FEB                     	;# 
   860  0FED                     	;# 
   861  0FEE                     	;# 
   862  0FEF                     	;# 
   863  0000                     	;# 
   864  0001                     	;# 
   865  0002                     	;# 
   866  0003                     	;# 
   867  0004                     	;# 
   868  0005                     	;# 
   869  0006                     	;# 
   870  0007                     	;# 
   871  0008                     	;# 
   872  0009                     	;# 
   873  000A                     	;# 
   874  000B                     	;# 
   875  000C                     	;# 
   876  000D                     	;# 
   877  000E                     	;# 
   878  0010                     	;# 
   879  0011                     	;# 
   880  0012                     	;# 
   881  0015                     	;# 
   882  0016                     	;# 
   883  0016                     	;# 
   884  0017                     	;# 
   885  0018                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  008C                     	;# 
   891  008D                     	;# 
   892  008E                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0095                     	;# 
   897  0096                     	;# 
   898  0097                     	;# 
   899  0099                     	;# 
   900  009A                     	;# 
   901  009B                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  010C                     	;# 
   907  010D                     	;# 
   908  010E                     	;# 
   909  0116                     	;# 
   910  0117                     	;# 
   911  011D                     	;# 
   912  018C                     	;# 
   913  018D                     	;# 
   914  018E                     	;# 
   915  0191                     	;# 
   916  0191                     	;# 
   917  0192                     	;# 
   918  0193                     	;# 
   919  0193                     	;# 
   920  0194                     	;# 
   921  0195                     	;# 
   922  0196                     	;# 
   923  0197                     	;# 
   924  0199                     	;# 
   925  019A                     	;# 
   926  019B                     	;# 
   927  019B                     	;# 
   928  019B                     	;# 
   929  019B                     	;# 
   930  019C                     	;# 
   931  019C                     	;# 
   932  019D                     	;# 
   933  019E                     	;# 
   934  019F                     	;# 
   935  020D                     	;# 
   936  0210                     	;# 
   937  0211                     	;# 
   938  0211                     	;# 
   939  0212                     	;# 
   940  0212                     	;# 
   941  0213                     	;# 
   942  0213                     	;# 
   943  0214                     	;# 
   944  0214                     	;# 
   945  0215                     	;# 
   946  0215                     	;# 
   947  0215                     	;# 
   948  0216                     	;# 
   949  0216                     	;# 
   950  0217                     	;# 
   951  0217                     	;# 
   952  0291                     	;# 
   953  0291                     	;# 
   954  0292                     	;# 
   955  0293                     	;# 
   956  0298                     	;# 
   957  0298                     	;# 
   958  0299                     	;# 
   959  029A                     	;# 
   960  0394                     	;# 
   961  0395                     	;# 
   962  0396                     	;# 
   963  0FE4                     	;# 
   964  0FE5                     	;# 
   965  0FE6                     	;# 
   966  0FE7                     	;# 
   967  0FE8                     	;# 
   968  0FE9                     	;# 
   969  0FEA                     	;# 
   970  0FEB                     	;# 
   971  0FED                     	;# 
   972  0FEE                     	;# 
   973  0FEF                     	;# 
   974  0000                     	;# 
   975  0001                     	;# 
   976  0002                     	;# 
   977  0003                     	;# 
   978  0004                     	;# 
   979  0005                     	;# 
   980  0006                     	;# 
   981  0007                     	;# 
   982  0008                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0015                     	;# 
   993  0016                     	;# 
   994  0016                     	;# 
   995  0017                     	;# 
   996  0018                     	;# 
   997  0019                     	;# 
   998  001A                     	;# 
   999  001B                     	;# 
  1000  001C                     	;# 
  1001  008C                     	;# 
  1002  008D                     	;# 
  1003  008E                     	;# 
  1004  0090                     	;# 
  1005  0091                     	;# 
  1006  0092                     	;# 
  1007  0095                     	;# 
  1008  0096                     	;# 
  1009  0097                     	;# 
  1010  0099                     	;# 
  1011  009A                     	;# 
  1012  009B                     	;# 
  1013  009B                     	;# 
  1014  009C                     	;# 
  1015  009D                     	;# 
  1016  009E                     	;# 
  1017  010C                     	;# 
  1018  010D                     	;# 
  1019  010E                     	;# 
  1020  0116                     	;# 
  1021  0117                     	;# 
  1022  011D                     	;# 
  1023  018C                     	;# 
  1024  018D                     	;# 
  1025  018E                     	;# 
  1026  0191                     	;# 
  1027  0191                     	;# 
  1028  0192                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0197                     	;# 
  1035  0199                     	;# 
  1036  019A                     	;# 
  1037  019B                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019C                     	;# 
  1042  019C                     	;# 
  1043  019D                     	;# 
  1044  019E                     	;# 
  1045  019F                     	;# 
  1046  020D                     	;# 
  1047  0210                     	;# 
  1048  0211                     	;# 
  1049  0211                     	;# 
  1050  0212                     	;# 
  1051  0212                     	;# 
  1052  0213                     	;# 
  1053  0213                     	;# 
  1054  0214                     	;# 
  1055  0214                     	;# 
  1056  0215                     	;# 
  1057  0215                     	;# 
  1058  0215                     	;# 
  1059  0216                     	;# 
  1060  0216                     	;# 
  1061  0217                     	;# 
  1062  0217                     	;# 
  1063  0291                     	;# 
  1064  0291                     	;# 
  1065  0292                     	;# 
  1066  0293                     	;# 
  1067  0298                     	;# 
  1068  0298                     	;# 
  1069  0299                     	;# 
  1070  029A                     	;# 
  1071  0394                     	;# 
  1072  0395                     	;# 
  1073  0396                     	;# 
  1074  0FE4                     	;# 
  1075  0FE5                     	;# 
  1076  0FE6                     	;# 
  1077  0FE7                     	;# 
  1078  0FE8                     	;# 
  1079  0FE9                     	;# 
  1080  0FEA                     	;# 
  1081  0FEB                     	;# 
  1082  0FED                     	;# 
  1083  0FEE                     	;# 
  1084  0FEF                     	;# 
  1085  0000                     	;# 
  1086  0001                     	;# 
  1087  0002                     	;# 
  1088  0003                     	;# 
  1089  0004                     	;# 
  1090  0005                     	;# 
  1091  0006                     	;# 
  1092  0007                     	;# 
  1093  0008                     	;# 
  1094  0009                     	;# 
  1095  000A                     	;# 
  1096  000B                     	;# 
  1097  000C                     	;# 
  1098  000D                     	;# 
  1099  000E                     	;# 
  1100  0010                     	;# 
  1101  0011                     	;# 
  1102  0012                     	;# 
  1103  0015                     	;# 
  1104  0016                     	;# 
  1105  0016                     	;# 
  1106  0017                     	;# 
  1107  0018                     	;# 
  1108  0019                     	;# 
  1109  001A                     	;# 
  1110  001B                     	;# 
  1111  001C                     	;# 
  1112  008C                     	;# 
  1113  008D                     	;# 
  1114  008E                     	;# 
  1115  0090                     	;# 
  1116  0091                     	;# 
  1117  0092                     	;# 
  1118  0095                     	;# 
  1119  0096                     	;# 
  1120  0097                     	;# 
  1121  0099                     	;# 
  1122  009A                     	;# 
  1123  009B                     	;# 
  1124  009B                     	;# 
  1125  009C                     	;# 
  1126  009D                     	;# 
  1127  009E                     	;# 
  1128  010C                     	;# 
  1129  010D                     	;# 
  1130  010E                     	;# 
  1131  0116                     	;# 
  1132  0117                     	;# 
  1133  011D                     	;# 
  1134  018C                     	;# 
  1135  018D                     	;# 
  1136  018E                     	;# 
  1137  0191                     	;# 
  1138  0191                     	;# 
  1139  0192                     	;# 
  1140  0193                     	;# 
  1141  0193                     	;# 
  1142  0194                     	;# 
  1143  0195                     	;# 
  1144  0196                     	;# 
  1145  0197                     	;# 
  1146  0199                     	;# 
  1147  019A                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019C                     	;# 
  1153  019C                     	;# 
  1154  019D                     	;# 
  1155  019E                     	;# 
  1156  019F                     	;# 
  1157  020D                     	;# 
  1158  0210                     	;# 
  1159  0211                     	;# 
  1160  0211                     	;# 
  1161  0212                     	;# 
  1162  0212                     	;# 
  1163  0213                     	;# 
  1164  0213                     	;# 
  1165  0214                     	;# 
  1166  0214                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0215                     	;# 
  1170  0216                     	;# 
  1171  0216                     	;# 
  1172  0217                     	;# 
  1173  0217                     	;# 
  1174  0291                     	;# 
  1175  0291                     	;# 
  1176  0292                     	;# 
  1177  0293                     	;# 
  1178  0298                     	;# 
  1179  0298                     	;# 
  1180  0299                     	;# 
  1181  029A                     	;# 
  1182  0394                     	;# 
  1183  0395                     	;# 
  1184  0396                     	;# 
  1185  0FE4                     	;# 
  1186  0FE5                     	;# 
  1187  0FE6                     	;# 
  1188  0FE7                     	;# 
  1189  0FE8                     	;# 
  1190  0FE9                     	;# 
  1191  0FEA                     	;# 
  1192  0FEB                     	;# 
  1193  0FED                     	;# 
  1194  0FEE                     	;# 
  1195  0FEF                     	;# 
  1196  0000                     	;# 
  1197  0001                     	;# 
  1198  0002                     	;# 
  1199  0003                     	;# 
  1200  0004                     	;# 
  1201  0005                     	;# 
  1202  0006                     	;# 
  1203  0007                     	;# 
  1204  0008                     	;# 
  1205  0009                     	;# 
  1206  000A                     	;# 
  1207  000B                     	;# 
  1208  000C                     	;# 
  1209  000D                     	;# 
  1210  000E                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0015                     	;# 
  1215  0016                     	;# 
  1216  0016                     	;# 
  1217  0017                     	;# 
  1218  0018                     	;# 
  1219  0019                     	;# 
  1220  001A                     	;# 
  1221  001B                     	;# 
  1222  001C                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  0090                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0095                     	;# 
  1230  0096                     	;# 
  1231  0097                     	;# 
  1232  0099                     	;# 
  1233  009A                     	;# 
  1234  009B                     	;# 
  1235  009B                     	;# 
  1236  009C                     	;# 
  1237  009D                     	;# 
  1238  009E                     	;# 
  1239  010C                     	;# 
  1240  010D                     	;# 
  1241  010E                     	;# 
  1242  0116                     	;# 
  1243  0117                     	;# 
  1244  011D                     	;# 
  1245  018C                     	;# 
  1246  018D                     	;# 
  1247  018E                     	;# 
  1248  0191                     	;# 
  1249  0191                     	;# 
  1250  0192                     	;# 
  1251  0193                     	;# 
  1252  0193                     	;# 
  1253  0194                     	;# 
  1254  0195                     	;# 
  1255  0196                     	;# 
  1256  0197                     	;# 
  1257  0199                     	;# 
  1258  019A                     	;# 
  1259  019B                     	;# 
  1260  019B                     	;# 
  1261  019B                     	;# 
  1262  019B                     	;# 
  1263  019C                     	;# 
  1264  019C                     	;# 
  1265  019D                     	;# 
  1266  019E                     	;# 
  1267  019F                     	;# 
  1268  020D                     	;# 
  1269  0210                     	;# 
  1270  0211                     	;# 
  1271  0211                     	;# 
  1272  0212                     	;# 
  1273  0212                     	;# 
  1274  0213                     	;# 
  1275  0213                     	;# 
  1276  0214                     	;# 
  1277  0214                     	;# 
  1278  0215                     	;# 
  1279  0215                     	;# 
  1280  0215                     	;# 
  1281  0216                     	;# 
  1282  0216                     	;# 
  1283  0217                     	;# 
  1284  0217                     	;# 
  1285  0291                     	;# 
  1286  0291                     	;# 
  1287  0292                     	;# 
  1288  0293                     	;# 
  1289  0298                     	;# 
  1290  0298                     	;# 
  1291  0299                     	;# 
  1292  029A                     	;# 
  1293  0394                     	;# 
  1294  0395                     	;# 
  1295  0396                     	;# 
  1296  0FE4                     	;# 
  1297  0FE5                     	;# 
  1298  0FE6                     	;# 
  1299  0FE7                     	;# 
  1300  0FE8                     	;# 
  1301  0FE9                     	;# 
  1302  0FEA                     	;# 
  1303  0FEB                     	;# 
  1304  0FED                     	;# 
  1305  0FEE                     	;# 
  1306  0FEF                     	;# 
  1307  0000                     	;# 
  1308  0001                     	;# 
  1309  0002                     	;# 
  1310  0003                     	;# 
  1311  0004                     	;# 
  1312  0005                     	;# 
  1313  0006                     	;# 
  1314  0007                     	;# 
  1315  0008                     	;# 
  1316  0009                     	;# 
  1317  000A                     	;# 
  1318  000B                     	;# 
  1319  000C                     	;# 
  1320  000D                     	;# 
  1321  000E                     	;# 
  1322  0010                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0015                     	;# 
  1326  0016                     	;# 
  1327  0016                     	;# 
  1328  0017                     	;# 
  1329  0018                     	;# 
  1330  0019                     	;# 
  1331  001A                     	;# 
  1332  001B                     	;# 
  1333  001C                     	;# 
  1334  008C                     	;# 
  1335  008D                     	;# 
  1336  008E                     	;# 
  1337  0090                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0095                     	;# 
  1341  0096                     	;# 
  1342  0097                     	;# 
  1343  0099                     	;# 
  1344  009A                     	;# 
  1345  009B                     	;# 
  1346  009B                     	;# 
  1347  009C                     	;# 
  1348  009D                     	;# 
  1349  009E                     	;# 
  1350  010C                     	;# 
  1351  010D                     	;# 
  1352  010E                     	;# 
  1353  0116                     	;# 
  1354  0117                     	;# 
  1355  011D                     	;# 
  1356  018C                     	;# 
  1357  018D                     	;# 
  1358  018E                     	;# 
  1359  0191                     	;# 
  1360  0191                     	;# 
  1361  0192                     	;# 
  1362  0193                     	;# 
  1363  0193                     	;# 
  1364  0194                     	;# 
  1365  0195                     	;# 
  1366  0196                     	;# 
  1367  0197                     	;# 
  1368  0199                     	;# 
  1369  019A                     	;# 
  1370  019B                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019B                     	;# 
  1374  019C                     	;# 
  1375  019C                     	;# 
  1376  019D                     	;# 
  1377  019E                     	;# 
  1378  019F                     	;# 
  1379  020D                     	;# 
  1380  0210                     	;# 
  1381  0211                     	;# 
  1382  0211                     	;# 
  1383  0212                     	;# 
  1384  0212                     	;# 
  1385  0213                     	;# 
  1386  0213                     	;# 
  1387  0214                     	;# 
  1388  0214                     	;# 
  1389  0215                     	;# 
  1390  0215                     	;# 
  1391  0215                     	;# 
  1392  0216                     	;# 
  1393  0216                     	;# 
  1394  0217                     	;# 
  1395  0217                     	;# 
  1396  0291                     	;# 
  1397  0291                     	;# 
  1398  0292                     	;# 
  1399  0293                     	;# 
  1400  0298                     	;# 
  1401  0298                     	;# 
  1402  0299                     	;# 
  1403  029A                     	;# 
  1404  0394                     	;# 
  1405  0395                     	;# 
  1406  0396                     	;# 
  1407  0FE4                     	;# 
  1408  0FE5                     	;# 
  1409  0FE6                     	;# 
  1410  0FE7                     	;# 
  1411  0FE8                     	;# 
  1412  0FE9                     	;# 
  1413  0FEA                     	;# 
  1414  0FEB                     	;# 
  1415  0FED                     	;# 
  1416  0FEE                     	;# 
  1417  0FEF                     	;# 
  1418  0000                     	;# 
  1419  0001                     	;# 
  1420  0002                     	;# 
  1421  0003                     	;# 
  1422  0004                     	;# 
  1423  0005                     	;# 
  1424  0006                     	;# 
  1425  0007                     	;# 
  1426  0008                     	;# 
  1427  0009                     	;# 
  1428  000A                     	;# 
  1429  000B                     	;# 
  1430  000C                     	;# 
  1431  000D                     	;# 
  1432  000E                     	;# 
  1433  0010                     	;# 
  1434  0011                     	;# 
  1435  0012                     	;# 
  1436  0015                     	;# 
  1437  0016                     	;# 
  1438  0016                     	;# 
  1439  0017                     	;# 
  1440  0018                     	;# 
  1441  0019                     	;# 
  1442  001A                     	;# 
  1443  001B                     	;# 
  1444  001C                     	;# 
  1445  008C                     	;# 
  1446  008D                     	;# 
  1447  008E                     	;# 
  1448  0090                     	;# 
  1449  0091                     	;# 
  1450  0092                     	;# 
  1451  0095                     	;# 
  1452  0096                     	;# 
  1453  0097                     	;# 
  1454  0099                     	;# 
  1455  009A                     	;# 
  1456  009B                     	;# 
  1457  009B                     	;# 
  1458  009C                     	;# 
  1459  009D                     	;# 
  1460  009E                     	;# 
  1461  010C                     	;# 
  1462  010D                     	;# 
  1463  010E                     	;# 
  1464  0116                     	;# 
  1465  0117                     	;# 
  1466  011D                     	;# 
  1467  018C                     	;# 
  1468  018D                     	;# 
  1469  018E                     	;# 
  1470  0191                     	;# 
  1471  0191                     	;# 
  1472  0192                     	;# 
  1473  0193                     	;# 
  1474  0193                     	;# 
  1475  0194                     	;# 
  1476  0195                     	;# 
  1477  0196                     	;# 
  1478  0197                     	;# 
  1479  0199                     	;# 
  1480  019A                     	;# 
  1481  019B                     	;# 
  1482  019B                     	;# 
  1483  019B                     	;# 
  1484  019B                     	;# 
  1485  019C                     	;# 
  1486  019C                     	;# 
  1487  019D                     	;# 
  1488  019E                     	;# 
  1489  019F                     	;# 
  1490  020D                     	;# 
  1491  0210                     	;# 
  1492  0211                     	;# 
  1493  0211                     	;# 
  1494  0212                     	;# 
  1495  0212                     	;# 
  1496  0213                     	;# 
  1497  0213                     	;# 
  1498  0214                     	;# 
  1499  0214                     	;# 
  1500  0215                     	;# 
  1501  0215                     	;# 
  1502  0215                     	;# 
  1503  0216                     	;# 
  1504  0216                     	;# 
  1505  0217                     	;# 
  1506  0217                     	;# 
  1507  0291                     	;# 
  1508  0291                     	;# 
  1509  0292                     	;# 
  1510  0293                     	;# 
  1511  0298                     	;# 
  1512  0298                     	;# 
  1513  0299                     	;# 
  1514  029A                     	;# 
  1515  0394                     	;# 
  1516  0395                     	;# 
  1517  0396                     	;# 
  1518  0FE4                     	;# 
  1519  0FE5                     	;# 
  1520  0FE6                     	;# 
  1521  0FE7                     	;# 
  1522  0FE8                     	;# 
  1523  0FE9                     	;# 
  1524  0FEA                     	;# 
  1525  0FEB                     	;# 
  1526  0FED                     	;# 
  1527  0FEE                     	;# 
  1528  0FEF                     	;# 
  1529  0000                     	;# 
  1530  0001                     	;# 
  1531  0002                     	;# 
  1532  0003                     	;# 
  1533  0004                     	;# 
  1534  0005                     	;# 
  1535  0006                     	;# 
  1536  0007                     	;# 
  1537  0008                     	;# 
  1538  0009                     	;# 
  1539  000A                     	;# 
  1540  000B                     	;# 
  1541  000C                     	;# 
  1542  000D                     	;# 
  1543  000E                     	;# 
  1544  0010                     	;# 
  1545  0011                     	;# 
  1546  0012                     	;# 
  1547  0015                     	;# 
  1548  0016                     	;# 
  1549  0016                     	;# 
  1550  0017                     	;# 
  1551  0018                     	;# 
  1552  0019                     	;# 
  1553  001A                     	;# 
  1554  001B                     	;# 
  1555  001C                     	;# 
  1556  008C                     	;# 
  1557  008D                     	;# 
  1558  008E                     	;# 
  1559  0090                     	;# 
  1560  0091                     	;# 
  1561  0092                     	;# 
  1562  0095                     	;# 
  1563  0096                     	;# 
  1564  0097                     	;# 
  1565  0099                     	;# 
  1566  009A                     	;# 
  1567  009B                     	;# 
  1568  009B                     	;# 
  1569  009C                     	;# 
  1570  009D                     	;# 
  1571  009E                     	;# 
  1572  010C                     	;# 
  1573  010D                     	;# 
  1574  010E                     	;# 
  1575  0116                     	;# 
  1576  0117                     	;# 
  1577  011D                     	;# 
  1578  018C                     	;# 
  1579  018D                     	;# 
  1580  018E                     	;# 
  1581  0191                     	;# 
  1582  0191                     	;# 
  1583  0192                     	;# 
  1584  0193                     	;# 
  1585  0193                     	;# 
  1586  0194                     	;# 
  1587  0195                     	;# 
  1588  0196                     	;# 
  1589  0197                     	;# 
  1590  0199                     	;# 
  1591  019A                     	;# 
  1592  019B                     	;# 
  1593  019B                     	;# 
  1594  019B                     	;# 
  1595  019B                     	;# 
  1596  019C                     	;# 
  1597  019C                     	;# 
  1598  019D                     	;# 
  1599  019E                     	;# 
  1600  019F                     	;# 
  1601  020D                     	;# 
  1602  0210                     	;# 
  1603  0211                     	;# 
  1604  0211                     	;# 
  1605  0212                     	;# 
  1606  0212                     	;# 
  1607  0213                     	;# 
  1608  0213                     	;# 
  1609  0214                     	;# 
  1610  0214                     	;# 
  1611  0215                     	;# 
  1612  0215                     	;# 
  1613  0215                     	;# 
  1614  0216                     	;# 
  1615  0216                     	;# 
  1616  0217                     	;# 
  1617  0217                     	;# 
  1618  0291                     	;# 
  1619  0291                     	;# 
  1620  0292                     	;# 
  1621  0293                     	;# 
  1622  0298                     	;# 
  1623  0298                     	;# 
  1624  0299                     	;# 
  1625  029A                     	;# 
  1626  0394                     	;# 
  1627  0395                     	;# 
  1628  0396                     	;# 
  1629  0FE4                     	;# 
  1630  0FE5                     	;# 
  1631  0FE6                     	;# 
  1632  0FE7                     	;# 
  1633  0FE8                     	;# 
  1634  0FE9                     	;# 
  1635  0FEA                     	;# 
  1636  0FEB                     	;# 
  1637  0FED                     	;# 
  1638  0FEE                     	;# 
  1639  0FEF                     	;# 
  1640                           
  1641                           	psect	idataBANK1
  1642  1738                     __pidataBANK1:	
  1643                           
  1644                           ;initializer for _cc1PaTable
  1645  1738  3403               	retlw	3
  1646  1739  340F               	retlw	15
  1647  173A  341E               	retlw	30
  1648  173B  3427               	retlw	39
  1649  173C  3450               	retlw	80
  1650  173D  3481               	retlw	129
  1651  173E  34CB               	retlw	203
  1652  173F  34C2               	retlw	194
  1653                           
  1654                           	psect	idataBANK2
  1655  0B36                     __pidataBANK2:	
  1656                           
  1657                           ;initializer for _cc1InitVal
  1658  0B36  3447               	retlw	71
  1659  0B37  3446               	retlw	70
  1660  0B38  344E               	retlw	78
  1661  0B39  340B               	retlw	11
  1662  0B3A  34D3               	retlw	211
  1663  0B3B  3491               	retlw	145
  1664  0B3C  3409               	retlw	9
  1665  0B3D  3408               	retlw	8
  1666  0B3E  3404               	retlw	4
  1667  0B3F  3400               	retlw	0
  1668  0B40  3400               	retlw	0
  1669  0B41  3406               	retlw	6
  1670  0B42  3400               	retlw	0
  1671  0B43  3421               	retlw	33
  1672  0B44  3463               	retlw	99
  1673  0B45  3491               	retlw	145
  1674  0B46  34CA               	retlw	202
  1675  0B47  3483               	retlw	131
  1676  0B48  3402               	retlw	2
  1677  0B49  3402               	retlw	2
  1678  0B4A  343B               	retlw	59
  1679  0B4B  3434               	retlw	52
  1680  0B4C  3407               	retlw	7
  1681  0B4D  343F               	retlw	63
  1682  0B4E  3408               	retlw	8
  1683  0B4F  3416               	retlw	22
  1684  0B50  346C               	retlw	108
  1685  0B51  3403               	retlw	3
  1686  0B52  3440               	retlw	64
  1687  0B53  3491               	retlw	145
  1688  0B54  3487               	retlw	135
  1689  0B55  346B               	retlw	107
  1690  0B56  34FB               	retlw	251
  1691  0B57  3456               	retlw	86
  1692  0B58  3416               	retlw	22
  1693  0B59  34E9               	retlw	233
  1694  0B5A  342A               	retlw	42
  1695  0B5B  3400               	retlw	0
  1696  0B5C  341F               	retlw	31
  1697  0B5D  3441               	retlw	65
  1698  0B5E  3400               	retlw	0
  1699  0B5F  3459               	retlw	89
  1700  0B60  347F               	retlw	127
  1701  0B61  343F               	retlw	63
  1702  0B62  3481               	retlw	129
  1703  0B63  3435               	retlw	53
  1704  0B64  3409               	retlw	9
  1705                           
  1706                           	psect	strings
  1707  0800                     __pstrings:	
  1708  0800                     __stringtab:	
  1709  0800  3400               	retlw	0
  1710  0801                     __end_of__stringtab:	
  1711  0801                     exp@coeff:	
  1712  0801  3400               	retlw	0
  1713  0802  3480               	retlw	128
  1714  0803  343F               	retlw	63
  1715  0804  3472               	retlw	114
  1716  0805  3431               	retlw	49
  1717  0806  343F               	retlw	63
  1718  0807  34FE               	retlw	254
  1719  0808  3475               	retlw	117
  1720  0809  343E               	retlw	62
  1721  080A  3458               	retlw	88
  1722  080B  3463               	retlw	99
  1723  080C  343D               	retlw	61
  1724  080D  3495               	retlw	149
  1725  080E  341D               	retlw	29
  1726  080F  343C               	retlw	60
  1727  0810  34C5               	retlw	197
  1728  0811  34AE               	retlw	174
  1729  0812  343A               	retlw	58
  1730  0813  3479               	retlw	121
  1731  0814  3421               	retlw	33
  1732  0815  3439               	retlw	57
  1733  0816  3494               	retlw	148
  1734  0817  3480               	retlw	128
  1735  0818  3437               	retlw	55
  1736  0819  3493               	retlw	147
  1737  081A  34A7               	retlw	167
  1738  081B  3435               	retlw	53
  1739  081C  3456               	retlw	86
  1740  081D  3415               	retlw	21
  1741  081E  3434               	retlw	52
  1742  081F                     __end_ofexp@coeff:	
  1743  081F                     log@coeff:	
  1744  081F  3400               	retlw	0
  1745  0820  3400               	retlw	0
  1746  0821  3400               	retlw	0
  1747  0822  3400               	retlw	0
  1748  0823  3480               	retlw	128
  1749  0824  343F               	retlw	63
  1750  0825  34F0               	retlw	240
  1751  0826  34FF               	retlw	255
  1752  0827  34BE               	retlw	190
  1753  0828  34E2               	retlw	226
  1754  0829  34A9               	retlw	169
  1755  082A  343E               	retlw	62
  1756  082B  3483               	retlw	131
  1757  082C  3476               	retlw	118
  1758  082D  34BE               	retlw	190
  1759  082E  34AE               	retlw	174
  1760  082F  342B               	retlw	43
  1761  0830  343E               	retlw	62
  1762  0831  343C               	retlw	60
  1763  0832  34C3               	retlw	195
  1764  0833  34BD               	retlw	189
  1765  0834  34D2               	retlw	210
  1766  0835  3413               	retlw	19
  1767  0836  343D               	retlw	61
  1768  0837  3478               	retlw	120
  1769  0838  34D3               	retlw	211
  1770  0839  34BB               	retlw	187
  1771  083A                     __end_oflog@coeff:	
  1772  083A                     _nvm_pgm_cfg:	
  1773  083A  345C               	retlw	92
  1774  083B  34C5               	retlw	197
  1775  083C  3400               	retlw	0
  1776  083D  3400               	retlw	0
  1777  083E  3400               	retlw	0
  1778  083F                     __end_of_nvm_pgm_cfg:	
  1779  000B                     _INTCON	set	11
  1780  000B                     _INTCONbits	set	11
  1781  0011                     _PIR1	set	17
  1782  0011                     _PIR1bits	set	17
  1783  0012                     _PIR2	set	18
  1784  000D                     _PORTB	set	13
  1785  000D                     _PORTBbits	set	13
  1786  000E                     _PORTC	set	14
  1787  0018                     _T1CON	set	24
  1788  0015                     _TMR0	set	21
  1789  0017                     _TMR1H	set	23
  1790  0016                     _TMR1L	set	22
  1791  009D                     _ADCON0	set	157
  1792  009D                     _ADCON0bits	set	157
  1793  009E                     _ADCON1	set	158
  1794  009C                     _ADRESH	set	156
  1795  0095                     _OPTION_REG	set	149
  1796  0099                     _OSCCON	set	153
  1797  0091                     _PIE1	set	145
  1798  0092                     _PIE2	set	146
  1799  008C                     _TRISA	set	140
  1800  008D                     _TRISB	set	141
  1801  008E                     _TRISC	set	142
  1802  0097                     _WDTCON	set	151
  1803  0117                     _FVRCON	set	279
  1804  010C                     _LATAbits	set	268
  1805  010D                     _LATBbits	set	269
  1806  010E                     _LATCbits	set	270
  1807  0191                     _PMADR	set	401
  1808  0193                     _PMDAT	set	403
  1809  018C                     _ANSELA	set	396
  1810  018D                     _ANSELB	set	397
  1811  018E                     _ANSELC	set	398
  1812  0195                     _PMCON1	set	405
  1813  0195                     _PMCON1bits	set	405
  1814  0196                     _PMCON2	set	406
  1815  0211                     _SSPBUF	set	529
  1816  0215                     _SSPCON1	set	533
  1817  0216                     _SSPCON2	set	534
  1818  0215                     _SSPCONbits	set	533
  1819  0214                     _SSPSTAT	set	532
  1820  020D                     _WPUB	set	525
  1821  0396                     _IOCBFbits	set	918
  1822  0395                     _IOCBN	set	917
  1823  0394                     _IOCBP	set	916
  1824                           
  1825                           ; #config settings
  1826  0000                     
  1827                           	psect	cinit
  1828  0016                     start_initialization:	
  1829  0016                     __initialization:	
  1830                           
  1831                           ; Clear objects allocated to COMMON
  1832  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1833                           
  1834                           ; Clear objects allocated to BANK0
  1835  0017  3069               	movlw	low __pbssBANK0
  1836  0018  0084               	movwf	4
  1837  0019  3000               	movlw	high __pbssBANK0
  1838  001A  0085               	movwf	5
  1839  001B  3007               	movlw	7
  1840  001C  3188  2040  3180   	fcall	clear_ram0
  1841                           
  1842                           ; Clear objects allocated to BANK1
  1843  001F  30A0               	movlw	low __pbssBANK1
  1844  0020  0084               	movwf	4
  1845  0021  3000               	movlw	high __pbssBANK1
  1846  0022  0085               	movwf	5
  1847  0023  302F               	movlw	47
  1848  0024  3188  2040  3180   	fcall	clear_ram0
  1849                           
  1850                           ; Initialize objects allocated to BANK1
  1851  0027  3038               	movlw	low __pidataBANK1
  1852  0028  0084               	movwf	4
  1853  0029  3097               	movlw	(high __pidataBANK1)| (0+128)
  1854  002A  0085               	movwf	5
  1855  002B  30E3               	movlw	low __pdataBANK1
  1856  002C  0086               	movwf	6
  1857  002D  3000               	movlw	high __pdataBANK1
  1858  002E  0087               	movwf	7
  1859  002F  3008               	movlw	8
  1860  0030  3197  2722  3180   	fcall	init_ram
  1861                           
  1862                           ; Initialize objects allocated to BANK2
  1863  0033  3036               	movlw	low __pidataBANK2
  1864  0034  0084               	movwf	4
  1865  0035  308B               	movlw	(high __pidataBANK2)| (0+128)
  1866  0036  0085               	movwf	5
  1867  0037  3020               	movlw	low __pdataBANK2
  1868  0038  0086               	movwf	6
  1869  0039  3001               	movlw	high __pdataBANK2
  1870  003A  0087               	movwf	7
  1871  003B  302F               	movlw	47
  1872  003C  3197  2722         	fcall	init_ram
  1873  003E                     end_of_initialization:	
  1874                           ;End of C runtime variable initialization code
  1875                           
  1876  003E                     __end_of__initialization:	
  1877  003E  0020               	movlb	0
  1878  003F  318C  2C4B         	ljmp	_main	;jump to C main() function
  1879                           
  1880                           	psect	bssCOMMON
  1881  007C                     __pbssCOMMON:	
  1882  007C                     _u_in_sta_currTask:	
  1883  007C                     	ds	1
  1884                           
  1885                           	psect	bssBANK0
  1886  0069                     __pbssBANK0:	
  1887  0069                     _cntSndData:	
  1888  0069                     	ds	1
  1889  006A                     _pgm_flg:	
  1890  006A                     	ds	1
  1891  006B                     _tmrDbncSel:	
  1892  006B                     	ds	1
  1893  006C                     _tmrPgm:	
  1894  006C                     	ds	1
  1895  006D                     _tmrRcvPkt:	
  1896  006D                     	ds	1
  1897  006E                     _u_flg_din:	
  1898  006E                     	ds	1
  1899  006F                     _u_in_sta_tmpTask:	
  1900  006F                     	ds	1
  1901                           
  1902                           	psect	bssBANK1
  1903  00A0                     __pbssBANK1:	
  1904  00A0                     _Rinf:	
  1905  00A0                     	ds	3
  1906  00A3                     _battV:	
  1907  00A3                     	ds	3
  1908  00A6                     _tempC:	
  1909  00A6                     	ds	3
  1910  00A9                     _errno:	
  1911  00A9                     	ds	2
  1912  00AB                     _tmrLongSel:	
  1913  00AB                     	ds	2
  1914  00AD                     _adc_ch:	
  1915  00AD                     	ds	1
  1916  00AE                     _batt:	
  1917  00AE                     	ds	1
  1918  00AF                     _flg_slp:	
  1919  00AF                     	ds	1
  1920  00B0                     _rtx_flg:	
  1921  00B0                     	ds	1
  1922  00B1                     _s_CC1_FLG:	
  1923  00B1                     	ds	1
  1924  00B2                     _sys_pgm_sta:	
  1925  00B2                     	ds	1
  1926  00B3                     _temp:	
  1927  00B3                     	ds	1
  1928  00B4                     _u_SYS_STA:	
  1929  00B4                     	ds	1
  1930  00B5                     _u_in_ev_down:	
  1931  00B5                     	ds	1
  1932  00B6                     _u_in_ev_long:	
  1933  00B6                     	ds	1
  1934  00B7                     _u_in_ev_up:	
  1935  00B7                     	ds	1
  1936  00B8                     _pktRx:	
  1937  00B8                     	ds	9
  1938  00C1                     _pktTx:	
  1939  00C1                     	ds	9
  1940  00CA                     _pgm_cfg:	
  1941  00CA                     	ds	5
  1942                           
  1943                           	psect	dataBANK1
  1944  00E3                     __pdataBANK1:	
  1945  00E3                     _cc1PaTable:	
  1946  00E3                     	ds	8
  1947                           
  1948                           	psect	dataBANK2
  1949  0120                     __pdataBANK2:	
  1950  0120                     _cc1InitVal:	
  1951  0120                     	ds	47
  1952                           
  1953                           	psect	clrtext
  1954  0840                     clear_ram0:	
  1955                           ;	Called with FSR0 containing the base address, and
  1956                           ;	WREG with the size to clear
  1957                           
  1958  0840  0064               	clrwdt	;clear the watchdog before getting into this loop
  1959  0841                     clrloop0:	
  1960  0841  0180               	clrf	0	;clear RAM location pointed to by FSR
  1961  0842  3101               	addfsr 0,1
  1962  0843  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1963  0844  2841               	goto	clrloop0	;have we reached the end yet?
  1964  0845  3400               	retlw	0	;all done for this memory range, return
  1965                           
  1966                           	psect	inittext
  1967  1722                     init_ram:	
  1968  1722  00FE               	movwf	126
  1969  1723                     initloop:	
  1970  1723  0012               	moviw fsr0++
  1971  1724  001E               	movwi fsr1++
  1972  1725  0BFE               	decfsz	126,f
  1973  1726  2F23               	goto	initloop
  1974  1727  3400               	retlw	0
  1975                           
  1976                           	psect	cstackBANK1
  1977  00CF                     __pcstackBANK1:	
  1978  00CF                     ADCConv@Rntc:	
  1979                           
  1980                           ; 3 bytes @ 0x0
  1981  00CF                     	ds	3
  1982  00D2                     _ADCConv$1522:	
  1983                           
  1984                           ; 3 bytes @ 0x3
  1985  00D2                     	ds	3
  1986  00D5                     _ADCConv$1523:	
  1987                           
  1988                           ; 3 bytes @ 0x6
  1989  00D5                     	ds	3
  1990  00D8                     _ADCConv$1524:	
  1991                           
  1992                           ; 3 bytes @ 0x9
  1993  00D8                     	ds	3
  1994  00DB                     ADCConv@sumBatt:	
  1995                           
  1996                           ; 2 bytes @ 0xC
  1997  00DB                     	ds	2
  1998  00DD                     ADCConv@sumTemp:	
  1999                           
  2000                           ; 2 bytes @ 0xE
  2001  00DD                     	ds	2
  2002  00DF                     ADCConv@tempV:	
  2003                           
  2004                           ; 3 bytes @ 0x10
  2005  00DF                     	ds	3
  2006  00E2                     ADCConv@cntSum:	
  2007                           
  2008                           ; 1 bytes @ 0x13
  2009  00E2                     	ds	1
  2010                           
  2011                           	psect	cstackCOMMON
  2012  0070                     __pcstackCOMMON:	
  2013  0070                     ?_CC1Strobe:	
  2014  0070                     ?_CC1LoadREG:	
  2015                           ; 0 bytes @ 0x0
  2016                           
  2017  0070                     ?_PGMReadNvm:	
  2018                           ; 0 bytes @ 0x0
  2019                           
  2020  0070                     ?_PGMCheckNvm:	
  2021                           ; 0 bytes @ 0x0
  2022                           
  2023  0070                     ?_PGMNvmReset:	
  2024                           ; 0 bytes @ 0x0
  2025                           
  2026  0070                     ?_RTXStartSendData:	
  2027                           ; 0 bytes @ 0x0
  2028                           
  2029  0070                     ?_RTXSendData:	
  2030                           ; 0 bytes @ 0x0
  2031                           
  2032  0070                     ?_RTXReadPkt:	
  2033                           ; 0 bytes @ 0x0
  2034                           
  2035  0070                     ?_RTXSendRPgm:	
  2036                           ; 0 bytes @ 0x0
  2037                           
  2038  0070                     ?_INInit:	
  2039                           ; 0 bytes @ 0x0
  2040                           
  2041  0070                     ?_OUTInit:	
  2042                           ; 0 bytes @ 0x0
  2043                           
  2044  0070                     ?_SPIInit:	
  2045                           ; 0 bytes @ 0x0
  2046                           
  2047  0070                     ?_ADCInit:	
  2048                           ; 0 bytes @ 0x0
  2049                           
  2050  0070                     ?_ADCConv:	
  2051                           ; 0 bytes @ 0x0
  2052                           
  2053  0070                     ?_CC1Init:	
  2054                           ; 0 bytes @ 0x0
  2055                           
  2056  0070                     ?_CC1Sleep:	
  2057                           ; 0 bytes @ 0x0
  2058                           
  2059  0070                     ?_LEDInit:	
  2060                           ; 0 bytes @ 0x0
  2061                           
  2062  0070                     ?_LEDNormalFlash:	
  2063                           ; 0 bytes @ 0x0
  2064                           
  2065  0070                     ?_LEDFastFlash:	
  2066                           ; 0 bytes @ 0x0
  2067                           
  2068  0070                     ?_NVMInit:	
  2069                           ; 0 bytes @ 0x0
  2070                           
  2071  0070                     ?_DINInit:	
  2072                           ; 0 bytes @ 0x0
  2073                           
  2074  0070                     ?_DINTick:	
  2075                           ; 0 bytes @ 0x0
  2076                           
  2077  0070                     ?_DINTask:	
  2078                           ; 0 bytes @ 0x0
  2079                           
  2080  0070                     ?_SLPSleep:	
  2081                           ; 0 bytes @ 0x0
  2082                           
  2083  0070                     ?_PGMInit:	
  2084                           ; 0 bytes @ 0x0
  2085                           
  2086  0070                     ?_PGMTick:	
  2087                           ; 0 bytes @ 0x0
  2088                           
  2089  0070                     ?_PGMWriteNvm:	
  2090                           ; 0 bytes @ 0x0
  2091                           
  2092  0070                     ?_PGMPgmOff:	
  2093                           ; 0 bytes @ 0x0
  2094                           
  2095  0070                     ?_PGMSelDown:	
  2096                           ; 0 bytes @ 0x0
  2097                           
  2098  0070                     ?_PGMSelLong:	
  2099                           ; 0 bytes @ 0x0
  2100                           
  2101  0070                     ?_RTXInit:	
  2102                           ; 0 bytes @ 0x0
  2103                           
  2104  0070                     ?_RTXTick:	
  2105                           ; 0 bytes @ 0x0
  2106                           
  2107  0070                     ?_RTXTask:	
  2108                           ; 0 bytes @ 0x0
  2109                           
  2110  0070                     ?_RTXAwake:	
  2111                           ; 0 bytes @ 0x0
  2112                           
  2113  0070                     ?_SYSInit:	
  2114                           ; 0 bytes @ 0x0
  2115                           
  2116  0070                     ?_SYSInt:	
  2117                           ; 0 bytes @ 0x0
  2118                           
  2119  0070                     ??_SYSInt:	
  2120                           ; 0 bytes @ 0x0
  2121                           
  2122  0070                     ?_SYSTask:	
  2123                           ; 0 bytes @ 0x0
  2124                           
  2125  0070                     ?_INTIsr:	
  2126                           ; 0 bytes @ 0x0
  2127                           
  2128  0070                     ??_INTIsr:	
  2129                           ; 0 bytes @ 0x0
  2130                           
  2131  0070                     ?_main:	
  2132                           ; 0 bytes @ 0x0
  2133                           
  2134                           
  2135                           ; 0 bytes @ 0x0
  2136  0070                     	ds	1
  2137  0071                     ??_INInit:	
  2138  0071                     ??_OUTInit:	
  2139                           ; 0 bytes @ 0x1
  2140                           
  2141  0071                     ??_SPIInit:	
  2142                           ; 0 bytes @ 0x1
  2143                           
  2144  0071                     ?_SPIRead:	
  2145                           ; 0 bytes @ 0x1
  2146                           
  2147  0071                     ?_SPIWrite:	
  2148                           ; 0 bytes @ 0x1
  2149                           
  2150  0071                     ??_ADCInit:	
  2151                           ; 0 bytes @ 0x1
  2152                           
  2153  0071                     ?_DLYDelay_ms:	
  2154                           ; 0 bytes @ 0x1
  2155                           
  2156  0071                     ??_LEDInit:	
  2157                           ; 0 bytes @ 0x1
  2158                           
  2159  0071                     ??_NVMInit:	
  2160                           ; 0 bytes @ 0x1
  2161                           
  2162  0071                     ?_NVMRead:	
  2163                           ; 0 bytes @ 0x1
  2164                           
  2165  0071                     ?_NVMWrite:	
  2166                           ; 0 bytes @ 0x1
  2167                           
  2168  0071                     ??_DINInit:	
  2169                           ; 0 bytes @ 0x1
  2170                           
  2171  0071                     ??_DINTick:	
  2172                           ; 0 bytes @ 0x1
  2173                           
  2174  0071                     ??_DINTask:	
  2175                           ; 0 bytes @ 0x1
  2176                           
  2177  0071                     ??_PGMTick:	
  2178                           ; 0 bytes @ 0x1
  2179                           
  2180  0071                     ??_PGMPgmOff:	
  2181                           ; 0 bytes @ 0x1
  2182                           
  2183  0071                     ??_SYSInit:	
  2184                           ; 0 bytes @ 0x1
  2185                           
  2186  0071                     ?___ftge:	
  2187                           ; 0 bytes @ 0x1
  2188                           
  2189  0071                     ?___bmul:	
  2190                           ; 1 bit 
  2191                           
  2192  0071                     ?___lwdiv:	
  2193                           ; 1 bytes @ 0x1
  2194                           
  2195  0071                     ?___ftpack:	
  2196                           ; 2 bytes @ 0x1
  2197                           
  2198  0071                     ?_frexp:	
  2199                           ; 3 bytes @ 0x1
  2200                           
  2201  0071                     ?___ftneg:	
  2202                           ; 3 bytes @ 0x1
  2203                           
  2204  0071                     ?___fttol:	
  2205                           ; 3 bytes @ 0x1
  2206                           
  2207  0071                     SPIRead@len:	
  2208                           ; 4 bytes @ 0x1
  2209                           
  2210  0071                     LEDInit@sta:	
  2211                           ; 1 bytes @ 0x1
  2212                           
  2213  0071                     NVMInit@sta:	
  2214                           ; 1 bytes @ 0x1
  2215                           
  2216  0071                     DINInit@sta:	
  2217                           ; 1 bytes @ 0x1
  2218                           
  2219  0071                     ___bmul@multiplicand:	
  2220                           ; 1 bytes @ 0x1
  2221                           
  2222  0071                     SPIWrite@srcPtr:	
  2223                           ; 1 bytes @ 0x1
  2224                           
  2225  0071                     DLYDelay_ms@val:	
  2226                           ; 2 bytes @ 0x1
  2227                           
  2228  0071                     NVMRead@addr:	
  2229                           ; 2 bytes @ 0x1
  2230                           
  2231  0071                     NVMWrite@addr:	
  2232                           ; 2 bytes @ 0x1
  2233                           
  2234  0071                     ___lwdiv@divisor:	
  2235                           ; 2 bytes @ 0x1
  2236                           
  2237  0071                     ___ftpack@arg:	
  2238                           ; 2 bytes @ 0x1
  2239                           
  2240  0071                     frexp@value:	
  2241                           ; 3 bytes @ 0x1
  2242                           
  2243  0071                     ___ftge@ff1:	
  2244                           ; 3 bytes @ 0x1
  2245                           
  2246  0071                     ___ftneg@f1:	
  2247                           ; 3 bytes @ 0x1
  2248                           
  2249  0071                     ___fttol@f1:	
  2250                           ; 3 bytes @ 0x1
  2251                           
  2252                           
  2253                           ; 3 bytes @ 0x1
  2254  0071                     	ds	1
  2255  0072                     ??_SPIRead:	
  2256  0072                     ??___bmul:	
  2257                           ; 0 bytes @ 0x2
  2258                           
  2259  0072                     INInit@sta:	
  2260                           ; 0 bytes @ 0x2
  2261                           
  2262  0072                     OUTInit@sta:	
  2263                           ; 1 bytes @ 0x2
  2264                           
  2265  0072                     SPIInit@state:	
  2266                           ; 1 bytes @ 0x2
  2267                           
  2268  0072                     ADCInit@state:	
  2269                           ; 1 bytes @ 0x2
  2270                           
  2271  0072                     SYSInit@state:	
  2272                           ; 1 bytes @ 0x2
  2273                           
  2274                           
  2275                           ; 1 bytes @ 0x2
  2276  0072                     	ds	1
  2277  0073                     ??_DLYDelay_ms:	
  2278  0073                     SPIWrite@len:	
  2279                           ; 0 bytes @ 0x3
  2280                           
  2281  0073                     NVMRead@dest:	
  2282                           ; 1 bytes @ 0x3
  2283                           
  2284  0073                     NVMWrite@source:	
  2285                           ; 1 bytes @ 0x3
  2286                           
  2287  0073                     ___bmul@product:	
  2288                           ; 1 bytes @ 0x3
  2289                           
  2290  0073                     ___lwdiv@dividend:	
  2291                           ; 1 bytes @ 0x3
  2292                           
  2293                           
  2294                           ; 2 bytes @ 0x3
  2295  0073                     	ds	1
  2296  0074                     ??_SPIWrite:	
  2297  0074                     ??___ftneg:	
  2298                           ; 0 bytes @ 0x4
  2299                           
  2300  0074                     SPIRead@dstPtr:	
  2301                           ; 0 bytes @ 0x4
  2302                           
  2303  0074                     NVMRead@len:	
  2304                           ; 1 bytes @ 0x4
  2305                           
  2306  0074                     NVMWrite@len:	
  2307                           ; 1 bytes @ 0x4
  2308                           
  2309  0074                     ___bmul@multiplier:	
  2310                           ; 1 bytes @ 0x4
  2311                           
  2312  0074                     ___ftpack@exp:	
  2313                           ; 1 bytes @ 0x4
  2314                           
  2315  0074                     frexp@eptr:	
  2316                           ; 1 bytes @ 0x4
  2317                           
  2318  0074                     ___ftge@ff2:	
  2319                           ; 1 bytes @ 0x4
  2320                           
  2321                           
  2322                           ; 3 bytes @ 0x4
  2323  0074                     	ds	1
  2324  0075                     ??_frexp:	
  2325  0075                     ??_NVMRead:	
  2326                           ; 0 bytes @ 0x5
  2327                           
  2328  0075                     ??_NVMWrite:	
  2329                           ; 0 bytes @ 0x5
  2330                           
  2331  0075                     ??___fttol:	
  2332                           ; 0 bytes @ 0x5
  2333                           
  2334  0075                     ??___lwdiv:	
  2335                           ; 0 bytes @ 0x5
  2336                           
  2337  0075                     SPIRead@i:	
  2338                           ; 0 bytes @ 0x5
  2339                           
  2340  0075                     ___ftpack@sign:	
  2341                           ; 1 bytes @ 0x5
  2342                           
  2343  0075                     DLYDelay_ms@i:	
  2344                           ; 1 bytes @ 0x5
  2345                           
  2346                           
  2347                           ; 2 bytes @ 0x5
  2348  0075                     	ds	1
  2349  0076                     ??___ftpack:	
  2350  0076                     SPIWrite@i:	
  2351                           ; 0 bytes @ 0x6
  2352                           
  2353  0076                     ___lwdiv@quotient:	
  2354                           ; 1 bytes @ 0x6
  2355                           
  2356                           
  2357                           ; 2 bytes @ 0x6
  2358  0076                     	ds	1
  2359  0077                     ??_CC1Strobe:	
  2360  0077                     ?_CC1Read:	
  2361                           ; 0 bytes @ 0x7
  2362                           
  2363  0077                     ?_CC1Write:	
  2364                           ; 0 bytes @ 0x7
  2365                           
  2366  0077                     ??_LEDNormalFlash:	
  2367                           ; 0 bytes @ 0x7
  2368                           
  2369  0077                     ??_LEDFastFlash:	
  2370                           ; 0 bytes @ 0x7
  2371                           
  2372  0077                     ??___ftge:	
  2373                           ; 0 bytes @ 0x7
  2374                           
  2375  0077                     CC1Read@dst:	
  2376                           ; 0 bytes @ 0x7
  2377                           
  2378  0077                     NVMRead@i:	
  2379                           ; 1 bytes @ 0x7
  2380                           
  2381  0077                     CC1Write@src:	
  2382                           ; 1 bytes @ 0x7
  2383                           
  2384                           
  2385                           ; 2 bytes @ 0x7
  2386  0077                     	ds	1
  2387  0078                     ??_PGMReadNvm:	
  2388  0078                     ??_PGMWriteNvm:	
  2389                           ; 0 bytes @ 0x8
  2390                           
  2391  0078                     CC1Strobe@e_stb:	
  2392                           ; 0 bytes @ 0x8
  2393                           
  2394  0078                     CC1Read@len:	
  2395                           ; 1 bytes @ 0x8
  2396                           
  2397  0078                     LEDNormalFlash@num:	
  2398                           ; 1 bytes @ 0x8
  2399                           
  2400  0078                     LEDFastFlash@num:	
  2401                           ; 1 bytes @ 0x8
  2402                           
  2403  0078                     ___lwdiv@counter:	
  2404                           ; 1 bytes @ 0x8
  2405                           
  2406                           
  2407                           ; 1 bytes @ 0x8
  2408  0078                     	ds	1
  2409  0079                     ??_CC1Read:	
  2410  0079                     ??___altoft:	
  2411                           ; 0 bytes @ 0x9
  2412                           
  2413  0079                     ?___awtoft:	
  2414                           ; 0 bytes @ 0x9
  2415                           
  2416  0079                     CC1Strobe@cc1Stb:	
  2417                           ; 3 bytes @ 0x9
  2418                           
  2419  0079                     CC1Write@len:	
  2420                           ; 1 bytes @ 0x9
  2421                           
  2422  0079                     LEDNormalFlash@i:	
  2423                           ; 1 bytes @ 0x9
  2424                           
  2425  0079                     LEDFastFlash@i:	
  2426                           ; 1 bytes @ 0x9
  2427                           
  2428  0079                     ___awtoft@c:	
  2429                           ; 1 bytes @ 0x9
  2430                           
  2431                           
  2432                           ; 2 bytes @ 0x9
  2433  0079                     	ds	1
  2434  007A                     ??_CC1Write:	
  2435  007A                     ??_CC1Sleep:	
  2436                           ; 0 bytes @ 0xA
  2437                           
  2438  007A                     ??_SLPSleep:	
  2439                           ; 0 bytes @ 0xA
  2440                           
  2441  007A                     CC1Read@addr:	
  2442                           ; 0 bytes @ 0xA
  2443                           
  2444                           
  2445                           ; 1 bytes @ 0xA
  2446  007A                     	ds	1
  2447  007B                     ??_CC1LoadREG:	
  2448  007B                     CC1Read@cc1Addr:	
  2449                           ; 0 bytes @ 0xB
  2450                           
  2451                           
  2452                           ; 1 bytes @ 0xB
  2453  007B                     	ds	1
  2454  007C                     ??_PGMCheckNvm:	
  2455  007C                     ??_RTXStartSendData:	
  2456                           ; 0 bytes @ 0xC
  2457                           
  2458  007C                     ??_CC1Init:	
  2459                           ; 0 bytes @ 0xC
  2460                           
  2461  007C                     ??_PGMInit:	
  2462                           ; 0 bytes @ 0xC
  2463                           
  2464  007C                     ??_PGMSelLong:	
  2465                           ; 0 bytes @ 0xC
  2466                           
  2467  007C                     ??_RTXInit:	
  2468                           ; 0 bytes @ 0xC
  2469                           
  2470  007C                     ??_RTXTick:	
  2471                           ; 0 bytes @ 0xC
  2472                           
  2473  007C                     ??_RTXTask:	
  2474                           ; 0 bytes @ 0xC
  2475                           
  2476  007C                     ??_RTXAwake:	
  2477                           ; 0 bytes @ 0xC
  2478                           
  2479  007C                     ??_SYSTask:	
  2480                           ; 0 bytes @ 0xC
  2481                           
  2482  007C                     ??___ftsub:	
  2483                           ; 0 bytes @ 0xC
  2484                           
  2485                           
  2486                           	psect	cstackBANK0
  2487  0020                     __pcstackBANK0:	
  2488                           ; 0 bytes @ 0xC
  2489                           
  2490  0020                     ?_RTXRcvPkt:	
  2491  0020                     ??___awtoft:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0020                     CC1Write@addr:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0020                     SLPSleep@IOCBNTmp:	
  2498                           ; 1 bytes @ 0x0
  2499                           
  2500  0020                     RTXRcvPkt@len:	
  2501                           ; 1 bytes @ 0x0
  2502                           
  2503  0020                     ___fttol@sign1:	
  2504                           ; 1 bytes @ 0x0
  2505                           
  2506  0020                     NVMWrite@bufTmpRow:	
  2507                           ; 1 bytes @ 0x0
  2508                           
  2509                           
  2510                           ; 64 bytes @ 0x0
  2511  0020                     	ds	1
  2512  0021                     ??_RTXRcvPkt:	
  2513  0021                     CC1Write@cc1Addr:	
  2514                           ; 0 bytes @ 0x1
  2515                           
  2516  0021                     SLPSleep@INTCONTmp:	
  2517                           ; 1 bytes @ 0x1
  2518                           
  2519  0021                     ___fttol@lval:	
  2520                           ; 1 bytes @ 0x1
  2521                           
  2522                           
  2523                           ; 4 bytes @ 0x1
  2524  0021                     	ds	1
  2525  0022                     ?_RTXSndPkt:	
  2526  0022                     CC1Init@state:	
  2527                           ; 0 bytes @ 0x2
  2528                           
  2529  0022                     SLPSleep@WPUBTmp:	
  2530                           ; 1 bytes @ 0x2
  2531                           
  2532  0022                     RTXSndPkt@len:	
  2533                           ; 1 bytes @ 0x2
  2534                           
  2535  0022                     ___awtoft@sign:	
  2536                           ; 1 bytes @ 0x2
  2537                           
  2538                           
  2539                           ; 1 bytes @ 0x2
  2540  0022                     	ds	1
  2541  0023                     ??_RTXSndPkt:	
  2542  0023                     ?___ftmul:	
  2543                           ; 0 bytes @ 0x3
  2544                           
  2545  0023                     SLPSleep@WDTCONTmp:	
  2546                           ; 3 bytes @ 0x3
  2547                           
  2548  0023                     RTXRcvPkt@dst:	
  2549                           ; 1 bytes @ 0x3
  2550                           
  2551  0023                     ___ftmul@f1:	
  2552                           ; 1 bytes @ 0x3
  2553                           
  2554                           
  2555                           ; 3 bytes @ 0x3
  2556  0023                     	ds	1
  2557  0024                     SLPSleep@OPTION_REGTmp:	
  2558  0024                     RTXSndPkt@src:	
  2559                           ; 1 bytes @ 0x4
  2560                           
  2561                           
  2562                           ; 1 bytes @ 0x4
  2563  0024                     	ds	1
  2564  0025                     SLPSleep@FVRCONTmp:	
  2565  0025                     RTXSndPkt@numRxByte:	
  2566                           ; 1 bytes @ 0x5
  2567                           
  2568  0025                     ___fttol@exp1:	
  2569                           ; 1 bytes @ 0x5
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0x5
  2573  0025                     	ds	1
  2574  0026                     ?___altoft:	
  2575  0026                     SLPSleep@ADCON0Tmp:	
  2576                           ; 3 bytes @ 0x6
  2577                           
  2578  0026                     RTXSndPkt@numTxByte:	
  2579                           ; 1 bytes @ 0x6
  2580                           
  2581  0026                     ___ftmul@f2:	
  2582                           ; 1 bytes @ 0x6
  2583                           
  2584  0026                     ___altoft@c:	
  2585                           ; 3 bytes @ 0x6
  2586                           
  2587                           
  2588                           ; 4 bytes @ 0x6
  2589  0026                     	ds	1
  2590  0027                     SLPSleep@TESTBATTtmp:	
  2591  0027                     RTXSndPkt@sta:	
  2592                           ; 1 bytes @ 0x7
  2593                           
  2594                           
  2595                           ; 1 bytes @ 0x7
  2596  0027                     	ds	1
  2597  0028                     ??_RTXSendRPgm:	
  2598                           
  2599                           ; 0 bytes @ 0x8
  2600  0028                     	ds	1
  2601  0029                     ??___ftmul:	
  2602                           
  2603                           ; 0 bytes @ 0x9
  2604  0029                     	ds	1
  2605  002A                     ___altoft@exp:	
  2606                           
  2607                           ; 1 bytes @ 0xA
  2608  002A                     	ds	1
  2609  002B                     ___altoft@sign:	
  2610                           
  2611                           ; 1 bytes @ 0xB
  2612  002B                     	ds	2
  2613  002D                     ___ftmul@exp:	
  2614                           
  2615                           ; 1 bytes @ 0xD
  2616  002D                     	ds	1
  2617  002E                     ___ftmul@f3_as_product:	
  2618                           
  2619                           ; 3 bytes @ 0xE
  2620  002E                     	ds	3
  2621  0031                     ___ftmul@cntr:	
  2622                           
  2623                           ; 1 bytes @ 0x11
  2624  0031                     	ds	1
  2625  0032                     ___ftmul@sign:	
  2626                           
  2627                           ; 1 bytes @ 0x12
  2628  0032                     	ds	1
  2629  0033                     ?___ftadd:	
  2630  0033                     ___ftadd@f1:	
  2631                           ; 3 bytes @ 0x13
  2632                           
  2633                           
  2634                           ; 3 bytes @ 0x13
  2635  0033                     	ds	3
  2636  0036                     ___ftadd@f2:	
  2637                           
  2638                           ; 3 bytes @ 0x16
  2639  0036                     	ds	3
  2640  0039                     ??___ftadd:	
  2641                           
  2642                           ; 0 bytes @ 0x19
  2643  0039                     	ds	4
  2644  003D                     ___ftadd@sign:	
  2645                           
  2646                           ; 1 bytes @ 0x1D
  2647  003D                     	ds	1
  2648  003E                     ___ftadd@exp2:	
  2649                           
  2650                           ; 1 bytes @ 0x1E
  2651  003E                     	ds	1
  2652  003F                     ___ftadd@exp1:	
  2653                           
  2654                           ; 1 bytes @ 0x1F
  2655  003F                     	ds	1
  2656  0040                     ??_RTXSendData:	
  2657  0040                     ?_floor:	
  2658                           ; 0 bytes @ 0x20
  2659                           
  2660  0040                     ?_eval_poly:	
  2661                           ; 3 bytes @ 0x20
  2662                           
  2663  0040                     ?___ftdiv:	
  2664                           ; 3 bytes @ 0x20
  2665                           
  2666  0040                     ?___ftsub:	
  2667                           ; 3 bytes @ 0x20
  2668                           
  2669  0040                     floor@x:	
  2670                           ; 3 bytes @ 0x20
  2671                           
  2672  0040                     ___ftdiv@f2:	
  2673                           ; 3 bytes @ 0x20
  2674                           
  2675  0040                     ___ftsub@f2:	
  2676                           ; 3 bytes @ 0x20
  2677                           
  2678  0040                     eval_poly@x:	
  2679                           ; 3 bytes @ 0x20
  2680                           
  2681                           
  2682                           ; 3 bytes @ 0x20
  2683  0040                     	ds	1
  2684  0041                     RTXSendData@valTemp:	
  2685                           
  2686                           ; 3 bytes @ 0x21
  2687  0041                     	ds	2
  2688  0043                     ??_floor:	
  2689  0043                     eval_poly@d:	
  2690                           ; 0 bytes @ 0x23
  2691                           
  2692  0043                     ___ftdiv@f1:	
  2693                           ; 1 bytes @ 0x23
  2694                           
  2695  0043                     ___ftsub@f1:	
  2696                           ; 3 bytes @ 0x23
  2697                           
  2698                           
  2699                           ; 3 bytes @ 0x23
  2700  0043                     	ds	1
  2701  0044                     eval_poly@n:	
  2702  0044                     RTXSendData@valBatt:	
  2703                           ; 2 bytes @ 0x24
  2704                           
  2705  0044                     floor@i:	
  2706                           ; 3 bytes @ 0x24
  2707                           
  2708                           
  2709                           ; 3 bytes @ 0x24
  2710  0044                     	ds	2
  2711  0046                     ??_eval_poly:	
  2712  0046                     ??___ftdiv:	
  2713                           ; 0 bytes @ 0x26
  2714                           
  2715                           
  2716                           ; 0 bytes @ 0x26
  2717  0046                     	ds	1
  2718  0047                     floor@expon:	
  2719  0047                     eval_poly@res:	
  2720                           ; 2 bytes @ 0x27
  2721                           
  2722                           
  2723                           ; 3 bytes @ 0x27
  2724  0047                     	ds	3
  2725  004A                     ?_ldexp:	
  2726  004A                     ___ftdiv@cntr:	
  2727                           ; 3 bytes @ 0x2A
  2728                           
  2729  004A                     ldexp@value:	
  2730                           ; 1 bytes @ 0x2A
  2731                           
  2732                           
  2733                           ; 3 bytes @ 0x2A
  2734  004A                     	ds	1
  2735  004B                     ___ftdiv@f3:	
  2736                           
  2737                           ; 3 bytes @ 0x2B
  2738  004B                     	ds	2
  2739  004D                     ldexp@newexp:	
  2740                           
  2741                           ; 2 bytes @ 0x2D
  2742  004D                     	ds	1
  2743  004E                     ___ftdiv@exp:	
  2744                           
  2745                           ; 1 bytes @ 0x2E
  2746  004E                     	ds	1
  2747  004F                     ??_ldexp:	
  2748  004F                     ___ftdiv@sign:	
  2749                           ; 0 bytes @ 0x2F
  2750                           
  2751                           
  2752                           ; 1 bytes @ 0x2F
  2753  004F                     	ds	1
  2754  0050                     ?_log:	
  2755  0050                     log@x:	
  2756                           ; 3 bytes @ 0x30
  2757                           
  2758                           
  2759                           ; 3 bytes @ 0x30
  2760  0050                     	ds	1
  2761  0051                     _ldexp$1131:	
  2762                           
  2763                           ; 3 bytes @ 0x31
  2764  0051                     	ds	2
  2765  0053                     ??_log:	
  2766                           
  2767                           ; 0 bytes @ 0x33
  2768  0053                     	ds	1
  2769  0054                     ?_exp:	
  2770  0054                     log@exponent:	
  2771                           ; 3 bytes @ 0x34
  2772                           
  2773  0054                     exp@x:	
  2774                           ; 2 bytes @ 0x34
  2775                           
  2776                           
  2777                           ; 3 bytes @ 0x34
  2778  0054                     	ds	3
  2779  0057                     ??_exp:	
  2780                           
  2781                           ; 0 bytes @ 0x37
  2782  0057                     	ds	1
  2783  0058                     _exp$1525:	
  2784                           
  2785                           ; 3 bytes @ 0x38
  2786  0058                     	ds	3
  2787  005B                     _exp$1090:	
  2788                           
  2789                           ; 3 bytes @ 0x3B
  2790  005B                     	ds	3
  2791  005E                     exp@exponent:	
  2792                           
  2793                           ; 2 bytes @ 0x3E
  2794  005E                     	ds	2
  2795  0060                     exp@sign:	
  2796  0060                     NVMWrite@rowAddr:	
  2797                           ; 1 bytes @ 0x40
  2798                           
  2799                           
  2800                           ; 2 bytes @ 0x40
  2801  0060                     	ds	1
  2802  0061                     ??_ADCConv:	
  2803                           
  2804                           ; 0 bytes @ 0x41
  2805  0061                     	ds	1
  2806  0062                     NVMWrite@i:	
  2807                           
  2808                           ; 1 bytes @ 0x42
  2809  0062                     	ds	1
  2810  0063                     NVMWrite@latchAddr:	
  2811  0063                     RTXInit@state:	
  2812                           ; 1 bytes @ 0x43
  2813                           
  2814                           
  2815                           ; 1 bytes @ 0x43
  2816  0063                     	ds	1
  2817  0064                     NVMWrite@j:	
  2818                           
  2819                           ; 1 bytes @ 0x44
  2820  0064                     	ds	1
  2821  0065                     ??_PGMNvmReset:	
  2822  0065                     ??_RTXReadPkt:	
  2823                           ; 0 bytes @ 0x45
  2824                           
  2825  0065                     ??_PGMSelDown:	
  2826                           ; 0 bytes @ 0x45
  2827                           
  2828                           
  2829                           ; 0 bytes @ 0x45
  2830  0065                     	ds	1
  2831  0066                     PGMInit@state:	
  2832  0066                     RTXReadPkt@numRxByte:	
  2833                           ; 1 bytes @ 0x46
  2834                           
  2835                           
  2836                           ; 1 bytes @ 0x46
  2837  0066                     	ds	1
  2838  0067                     ??_main:	
  2839                           
  2840                           ; 0 bytes @ 0x47
  2841  0067                     	ds	1
  2842  0068                     main@i:	
  2843                           
  2844                           ; 1 bytes @ 0x48
  2845  0068                     	ds	1
  2846                           
  2847                           	psect	maintext
  2848  0C4B                     __pmaintext:	
  2849 ;;
  2850 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2851 ;;
  2852 ;; *************** function _main *****************
  2853 ;; Defined at:
  2854 ;;		line 55 in file "Sensore.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;		None
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  i               1   72[BANK0 ] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;		None               void
  2861 ;; Registers used:
  2862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2863 ;; Tracked objects:
  2864 ;;		On entry : 17F/0
  2865 ;;		On exit  : 0/0
  2866 ;;		Unchanged: 0/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2872 ;;Total ram usage:        2 bytes
  2873 ;; Hardware stack levels required when called:   11
  2874 ;; This function calls:
  2875 ;;		_INInit
  2876 ;;		_OUTInit
  2877 ;;		_SPIInit
  2878 ;;		_ADCInit
  2879 ;;		_CC1Init
  2880 ;;		_LEDInit
  2881 ;;		_NVMInit
  2882 ;;		_DINInit
  2883 ;;		_DINTask
  2884 ;;		_PGMInit
  2885 ;;		_RTXInit
  2886 ;;		_RTXTask
  2887 ;;		_SYSInit
  2888 ;;		_SYSTask
  2889 ;; This function is called by:
  2890 ;;		Startup code after reset
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function _main
  2896  0C4B                     _main:	
  2897                           
  2898                           ;Sensore.c: 56: unsigned char i;
  2899                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2900                           
  2901                           ;incstack = 0
  2902                           ; Regs used in _main: [allreg]
  2903  0C4B  0020               	movlb	0	; select bank0
  2904  0C4C  01E8               	clrf	main@i
  2905  0C4D  3003               	movlw	3
  2906  0C4E  0268               	subwf	main@i,w
  2907  0C4F  1803               	btfsc	3,0
  2908  0C50  2C92               	goto	l686
  2909  0C51                     l685:	
  2910  0C51  0064               	clrwdt	;# 
  2911                           
  2912                           ;Sensore.c: 63: SYSInit(i);
  2913  0C52  0020               	movlb	0	; select bank0
  2914  0C53  0868               	movf	main@i,w
  2915  0C54  318A  22BF  318C   	fcall	_SYSInit
  2916                           
  2917                           ;Sensore.c: 64: INInit(i);
  2918  0C57  0020               	movlb	0	; select bank0
  2919  0C58  0868               	movf	main@i,w
  2920  0C59  3188  206D  318C   	fcall	_INInit
  2921                           
  2922                           ;Sensore.c: 65: OUTInit(i);
  2923  0C5C  0020               	movlb	0	; select bank0
  2924  0C5D  0868               	movf	main@i,w
  2925  0C5E  318A  2251  318C   	fcall	_OUTInit
  2926                           
  2927                           ;Sensore.c: 66: DINInit(i);
  2928  0C61  0020               	movlb	0	; select bank0
  2929  0C62  0868               	movf	main@i,w
  2930  0C63  3197  27A5  318C   	fcall	_DINInit
  2931                           
  2932                           ;Sensore.c: 67: LEDInit(i);
  2933  0C66  0020               	movlb	0	; select bank0
  2934  0C67  0868               	movf	main@i,w
  2935  0C68  3197  2749  318C   	fcall	_LEDInit
  2936                           
  2937                           ;Sensore.c: 68: SPIInit(i);
  2938  0C6B  0020               	movlb	0	; select bank0
  2939  0C6C  0868               	movf	main@i,w
  2940  0C6D  3189  2171  318C   	fcall	_SPIInit
  2941                           
  2942                           ;Sensore.c: 69: CC1Init(i);
  2943  0C70  0020               	movlb	0	; select bank0
  2944  0C71  0868               	movf	main@i,w
  2945  0C72  3189  2100  318C   	fcall	_CC1Init
  2946                           
  2947                           ;Sensore.c: 70: NVMInit(i);
  2948  0C75  0020               	movlb	0	; select bank0
  2949  0C76  0868               	movf	main@i,w
  2950  0C77  3197  2754  318C   	fcall	_NVMInit
  2951                           
  2952                           ;Sensore.c: 71: RTXInit(i);
  2953  0C7A  0020               	movlb	0	; select bank0
  2954  0C7B  0868               	movf	main@i,w
  2955  0C7C  318A  2275  318C   	fcall	_RTXInit
  2956                           
  2957                           ;Sensore.c: 72: PGMInit(i);
  2958  0C7F  0020               	movlb	0	; select bank0
  2959  0C80  0868               	movf	main@i,w
  2960  0C81  3188  2084  318C   	fcall	_PGMInit
  2961                           
  2962                           ;Sensore.c: 73: ADCInit(i);
  2963  0C84  0020               	movlb	0	; select bank0
  2964  0C85  0868               	movf	main@i,w
  2965  0C86  318B  230C  318C   	fcall	_ADCInit
  2966  0C89  3001               	movlw	1
  2967  0C8A  0020               	movlb	0	; select bank0
  2968  0C8B  00E7               	movwf	??_main
  2969  0C8C  0867               	movf	??_main,w
  2970  0C8D  07E8               	addwf	main@i,f
  2971  0C8E  3003               	movlw	3
  2972  0C8F  0268               	subwf	main@i,w
  2973  0C90  1C03               	skipc
  2974  0C91  2C51               	goto	l685
  2975  0C92                     l686:	
  2976                           
  2977                           ;Sensore.c: 74: }
  2978                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2979  0C92  178B               	bsf	11,7	;volatile
  2980  0C93                     l687:	
  2981                           ;Sensore.c: 80: while(1)
  2982                           
  2983  0C93  0064               	clrwdt	;# 
  2984                           
  2985                           ;Sensore.c: 84: SYSTask();
  2986  0C94  318B  2365  318C   	fcall	_SYSTask
  2987                           
  2988                           ;Sensore.c: 85: DINTask();
  2989  0C97  3189  2137  318C   	fcall	_DINTask
  2990                           
  2991                           ;Sensore.c: 86: RTXTask();
  2992  0C9A  3197  271C  318C   	fcall	_RTXTask
  2993  0C9D  2C93               	goto	l687
  2994  0C9E                     __end_of_main:	
  2995                           
  2996                           	psect	text1
  2997  0B65                     __ptext1:	
  2998 ;; *************** function _SYSTask *****************
  2999 ;; Defined at:
  3000 ;;		line 45 in file "SYS.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;		None               void
  3007 ;; Registers used:
  3008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3018 ;;Total ram usage:        0 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:   10
  3021 ;; This function calls:
  3022 ;;		_DINTick
  3023 ;;		_SLPSleep
  3024 ;;		_PGMTick
  3025 ;;		_PGMPgmOff
  3026 ;;		_PGMSelDown
  3027 ;;		_PGMSelLong
  3028 ;;		_RTXTick
  3029 ;;		_RTXAwake
  3030 ;; This function is called by:
  3031 ;;		_main
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           
  3036                           ;psect for function _SYSTask
  3037  0B65                     _SYSTask:	
  3038                           
  3039                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  3040                           
  3041                           ;incstack = 0
  3042                           ; Regs used in _SYSTask: [allreg]
  3043  0B65  0021               	movlb	1	; select bank1
  3044  0B66  1C34               	btfss	_u_SYS_STA^(0+128),0
  3045  0B67  2B72               	goto	l5115
  3046                           
  3047                           ;SYS.c: 48: {
  3048                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  3049  0B68  1034               	bcf	_u_SYS_STA^(0+128),0
  3050                           
  3051                           ;SYS.c: 53: RTXTick();
  3052  0B69  3197  276B  318B   	fcall	_RTXTick
  3053                           
  3054                           ;SYS.c: 54: DINTick();
  3055  0B6C  318A  22E5  318B   	fcall	_DINTick
  3056                           
  3057                           ;SYS.c: 55: PGMTick();
  3058  0B6F  3197  2795  318B   	fcall	_PGMTick
  3059  0B72                     l5115:	
  3060                           
  3061                           ;SYS.c: 56: }
  3062                           ;SYS.c: 58: if(u_in_ev_down.sel)
  3063  0B72  0021               	movlb	1	; select bank1
  3064  0B73  1C35               	btfss	_u_in_ev_down^(0+128),0
  3065  0B74  2B79               	goto	l5121
  3066                           
  3067                           ;SYS.c: 59: {
  3068                           ;SYS.c: 61: u_in_ev_down.sel=0;
  3069  0B75  1035               	bcf	_u_in_ev_down^(0+128),0
  3070                           
  3071                           ;SYS.c: 62: PGMSelDown();
  3072  0B76  3188  2046  318B   	fcall	_PGMSelDown
  3073  0B79                     l5121:	
  3074                           
  3075                           ;SYS.c: 63: }
  3076                           ;SYS.c: 64: if(u_in_ev_long.sel)
  3077  0B79  0021               	movlb	1	; select bank1
  3078  0B7A  1C36               	btfss	_u_in_ev_long^(0+128),0
  3079  0B7B  2B80               	goto	l5127
  3080                           
  3081                           ;SYS.c: 65: {
  3082                           ;SYS.c: 67: u_in_ev_long.sel=0;
  3083  0B7C  1036               	bcf	_u_in_ev_long^(0+128),0
  3084                           
  3085                           ;SYS.c: 68: PGMSelLong();
  3086  0B7D  3197  2740  318B   	fcall	_PGMSelLong
  3087  0B80                     l5127:	
  3088                           
  3089                           ;SYS.c: 69: }
  3090                           ;SYS.c: 72: if(flg_slp.goSleep)
  3091  0B80  0021               	movlb	1	; select bank1
  3092  0B81  1C2F               	btfss	_flg_slp^(0+128),0
  3093  0B82  2B8A               	goto	l5133
  3094                           
  3095                           ;SYS.c: 73: {
  3096                           ;SYS.c: 75: flg_slp.goSleep=0;
  3097  0B83  102F               	bcf	_flg_slp^(0+128),0
  3098                           
  3099                           ;SYS.c: 77: if(!(!PORTBbits.RB2))
  3100  0B84  0020               	movlb	0	; select bank0
  3101  0B85  1D0D               	btfss	13,2	;volatile
  3102  0B86  2B8A               	goto	l5133
  3103                           
  3104                           ;SYS.c: 78: SLPSleep();
  3105  0B87  318E  2607  318B   	fcall	_SLPSleep
  3106  0B8A                     l5133:	
  3107                           
  3108                           ;SYS.c: 79: }
  3109                           ;SYS.c: 82: if(rtx_flg.pgmDone)
  3110  0B8A  0021               	movlb	1	; select bank1
  3111  0B8B  1C30               	btfss	_rtx_flg^(0+128),0
  3112  0B8C  2B91               	goto	l5139
  3113                           
  3114                           ;SYS.c: 83: {
  3115                           ;SYS.c: 85: rtx_flg.pgmDone=0;
  3116  0B8D  1030               	bcf	_rtx_flg^(0+128),0
  3117                           
  3118                           ;SYS.c: 87: PGMPgmOff();
  3119  0B8E  3197  2712  318B   	fcall	_PGMPgmOff
  3120  0B91                     l5139:	
  3121                           
  3122                           ;SYS.c: 88: }
  3123                           ;SYS.c: 91: if(flg_slp.exitSleep)
  3124  0B91  0021               	movlb	1	; select bank1
  3125  0B92  1CAF               	btfss	_flg_slp^(0+128),1
  3126  0B93  0008               	return
  3127                           
  3128                           ;SYS.c: 92: {
  3129                           ;SYS.c: 94: flg_slp.exitSleep=0;
  3130  0B94  10AF               	bcf	_flg_slp^(0+128),1
  3131                           
  3132                           ;SYS.c: 96: RTXAwake();
  3133  0B95  3188  20E6         	fcall	_RTXAwake
  3134  0B97  0008               	return
  3135  0B98                     __end_of_SYSTask:	
  3136                           
  3137                           	psect	text2
  3138  08E6                     __ptext2:	
  3139 ;; *************** function _RTXAwake *****************
  3140 ;; Defined at:
  3141 ;;		line 90 in file "RTX.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;		None
  3146 ;; Return value:  Size  Location     Type
  3147 ;;		None               void
  3148 ;; Registers used:
  3149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3159 ;;Total ram usage:        0 bytes
  3160 ;; Hardware stack levels used:    1
  3161 ;; Hardware stack levels required when called:    9
  3162 ;; This function calls:
  3163 ;;		_DLYDelay_ms
  3164 ;;		_CC1Init
  3165 ;;		_RTXInit
  3166 ;; This function is called by:
  3167 ;;		_SYSTask
  3168 ;; This function uses a non-reentrant model
  3169 ;;
  3170                           
  3171                           
  3172                           ;psect for function _RTXAwake
  3173  08E6                     _RTXAwake:	
  3174                           
  3175                           ;RTX.c: 92: LATAbits.LATA5=0;
  3176                           
  3177                           ;incstack = 0
  3178                           ; Regs used in _RTXAwake: [allreg]
  3179  08E6  0022               	movlb	2	; select bank2
  3180  08E7  128C               	bcf	12,5	;volatile
  3181                           
  3182                           ;RTX.c: 93: DLYDelay_ms(1);
  3183  08E8  3001               	movlw	1
  3184  08E9  00F1               	movwf	?_DLYDelay_ms
  3185  08EA  3000               	movlw	0
  3186  08EB  00F2               	movwf	?_DLYDelay_ms+1
  3187  08EC  3188  20B4  3188   	fcall	_DLYDelay_ms
  3188                           
  3189                           ;RTX.c: 94: LATAbits.LATA5=1;
  3190  08EF  0022               	movlb	2	; select bank2
  3191  08F0  168C               	bsf	12,5	;volatile
  3192                           
  3193                           ;RTX.c: 95: DLYDelay_ms(1);
  3194  08F1  3001               	movlw	1
  3195  08F2  00F1               	movwf	?_DLYDelay_ms
  3196  08F3  3000               	movlw	0
  3197  08F4  00F2               	movwf	?_DLYDelay_ms+1
  3198  08F5  3188  20B4  3188   	fcall	_DLYDelay_ms
  3199                           
  3200                           ;RTX.c: 98: CC1Init(2);
  3201  08F8  3002               	movlw	2
  3202  08F9  3189  2100  3188   	fcall	_CC1Init
  3203                           
  3204                           ;RTX.c: 101: RTXInit(2);
  3205  08FC  3002               	movlw	2
  3206  08FD  318A  2275         	fcall	_RTXInit
  3207  08FF  0008               	return
  3208  0900                     __end_of_RTXAwake:	
  3209                           
  3210                           	psect	text3
  3211  0A75                     __ptext3:	
  3212 ;; *************** function _RTXInit *****************
  3213 ;; Defined at:
  3214 ;;		line 49 in file "RTX.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  state           1    wreg     unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  state           1   67[BANK0 ] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;		None               void
  3221 ;; Registers used:
  3222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3232 ;;Total ram usage:        1 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    8
  3235 ;; This function calls:
  3236 ;;		_CC1Strobe
  3237 ;;		_RTXStartSendData
  3238 ;; This function is called by:
  3239 ;;		_RTXAwake
  3240 ;;		_main
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           
  3245                           ;psect for function _RTXInit
  3246  0A75                     _RTXInit:	
  3247                           
  3248                           ;incstack = 0
  3249                           ; Regs used in _RTXInit: [allreg]
  3250                           ;RTXInit@state stored from wreg
  3251  0A75  0020               	movlb	0	; select bank0
  3252  0A76  00E3               	movwf	RTXInit@state
  3253                           
  3254                           ;RTX.c: 50: switch(state)
  3255  0A77  2A8C               	goto	l4967
  3256  0A78                     l4959:	
  3257                           ;RTX.c: 55: case 1:
  3258                           
  3259                           ;RTX.c: 54: break;
  3260                           
  3261                           ;RTX.c: 51: {
  3262                           ;RTX.c: 52: case 0:
  3263                           
  3264                           
  3265                           ;RTX.c: 57: tmrRcvPkt=0;
  3266  0A78  01ED               	clrf	_tmrRcvPkt
  3267                           
  3268                           ;RTX.c: 58: cntSndData=0;
  3269  0A79  01E9               	clrf	_cntSndData
  3270                           
  3271                           ;RTX.c: 59: rtx_flg.val=0;
  3272  0A7A  0021               	movlb	1	; select bank1
  3273  0A7B  01B0               	clrf	_rtx_flg^(0+128)
  3274                           
  3275                           ;RTX.c: 60: break;
  3276  0A7C  0008               	return
  3277  0A7D                     l4961:	
  3278                           ;RTX.c: 61: case 2:
  3279                           
  3280                           
  3281                           ;RTX.c: 63: CC1Strobe(SIDLE);
  3282  0A7D  3036               	movlw	54
  3283  0A7E  3188  2059  318A   	fcall	_CC1Strobe
  3284                           
  3285                           ;RTX.c: 64: CC1Strobe(SCAL);
  3286  0A81  3033               	movlw	51
  3287  0A82  3188  2059  318A   	fcall	_CC1Strobe
  3288                           
  3289                           ;RTX.c: 65: CC1Strobe(SRX);
  3290  0A85  3034               	movlw	52
  3291  0A86  3188  2059  318A   	fcall	_CC1Strobe
  3292                           
  3293                           ;RTX.c: 66: RTXStartSendData();
  3294  0A89  3197  2786         	fcall	_RTXStartSendData
  3295                           
  3296                           ;RTX.c: 68: }
  3297                           
  3298                           ;RTX.c: 67: break;
  3299  0A8B  0008               	return
  3300  0A8C                     l4967:	
  3301  0A8C  0020               	movlb	0	; select bank0
  3302  0A8D  0863               	movf	RTXInit@state,w
  3303                           
  3304                           ; Switch size 1, requested type "space"
  3305                           ; Number of cases is 3, Range of values is 0 to 2
  3306                           ; switch strategies available:
  3307                           ; Name         Instructions Cycles
  3308                           ; simple_byte           10     6 (average)
  3309                           ; direct_byte           12     6 (fixed)
  3310                           ; jumptable            260     6 (fixed)
  3311                           ;	Chosen strategy is simple_byte
  3312  0A8E  3A00               	xorlw	0	; case 0
  3313  0A8F  1903               	skipnz
  3314  0A90  2A98               	goto	l477
  3315  0A91  3A01               	xorlw	1	; case 1
  3316  0A92  1903               	skipnz
  3317  0A93  2A78               	goto	l4959
  3318  0A94  3A03               	xorlw	3	; case 2
  3319  0A95  1903               	skipnz
  3320  0A96  2A7D               	goto	l4961
  3321  0A97  2A98               	goto	l477
  3322  0A98                     l477:	
  3323  0A98  0008               	return
  3324  0A99                     __end_of_RTXInit:	
  3325                           
  3326                           	psect	text4
  3327  0900                     __ptext4:	
  3328 ;; *************** function _CC1Init *****************
  3329 ;; Defined at:
  3330 ;;		line 75 in file "CC1.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  state           1    wreg     unsigned char 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  state           1    2[BANK0 ] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;		None               void
  3337 ;; Registers used:
  3338 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3347 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3348 ;;Total ram usage:        1 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    5
  3351 ;; This function calls:
  3352 ;;		_DLYDelay_ms
  3353 ;;		_CC1Strobe
  3354 ;;		_CC1LoadREG
  3355 ;; This function is called by:
  3356 ;;		_RTXAwake
  3357 ;;		_main
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _CC1Init
  3363  0900                     _CC1Init:	
  3364                           
  3365                           ;incstack = 0
  3366                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3367                           ;CC1Init@state stored from wreg
  3368  0900  0020               	movlb	0	; select bank0
  3369  0901  00A2               	movwf	CC1Init@state
  3370                           
  3371                           ;CC1.c: 76: switch(state)
  3372  0902  2911               	goto	l4807
  3373  0903                     l4799:	
  3374                           ;CC1.c: 84: case 2:
  3375                           
  3376                           ;CC1.c: 83: break;
  3377                           
  3378                           ;CC1.c: 77: {
  3379                           ;CC1.c: 81: case 1:
  3380                           
  3381                           
  3382                           ;CC1.c: 86: CC1Strobe(SRES);
  3383  0903  3030               	movlw	48
  3384  0904  3188  2059  3189   	fcall	_CC1Strobe
  3385                           
  3386                           ;CC1.c: 87: DLYDelay_ms(5);
  3387  0907  3005               	movlw	5
  3388  0908  00F1               	movwf	?_DLYDelay_ms
  3389  0909  3000               	movlw	0
  3390  090A  00F2               	movwf	?_DLYDelay_ms+1
  3391  090B  3188  20B4  3189   	fcall	_DLYDelay_ms
  3392                           
  3393                           ;CC1.c: 88: CC1LoadREG();
  3394  090E  3188  209C         	fcall	_CC1LoadREG
  3395                           
  3396                           ;CC1.c: 90: }
  3397                           
  3398                           ;CC1.c: 89: break;
  3399  0910  0008               	return
  3400  0911                     l4807:	
  3401  0911  0020               	movlb	0	; select bank0
  3402  0912  0822               	movf	CC1Init@state,w
  3403                           
  3404                           ; Switch size 1, requested type "space"
  3405                           ; Number of cases is 2, Range of values is 1 to 2
  3406                           ; switch strategies available:
  3407                           ; Name         Instructions Cycles
  3408                           ; simple_byte            7     4 (average)
  3409                           ; direct_byte           13     9 (fixed)
  3410                           ; jumptable            263     9 (fixed)
  3411                           ;	Chosen strategy is simple_byte
  3412  0913  3A01               	xorlw	1	; case 1
  3413  0914  1903               	skipnz
  3414  0915  291A               	goto	l176
  3415  0916  3A03               	xorlw	3	; case 2
  3416  0917  1903               	skipnz
  3417  0918  2903               	goto	l4799
  3418  0919  291A               	goto	l176
  3419  091A                     l176:	
  3420  091A  0008               	return
  3421  091B                     __end_of_CC1Init:	
  3422                           
  3423                           	psect	text5
  3424  089C                     __ptext5:	
  3425 ;; *************** function _CC1LoadREG *****************
  3426 ;; Defined at:
  3427 ;;		line 156 in file "CC1.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;		None               void
  3434 ;; Registers used:
  3435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3444 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;Total ram usage:        1 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    4
  3448 ;; This function calls:
  3449 ;;		_CC1Write
  3450 ;; This function is called by:
  3451 ;;		_CC1Init
  3452 ;; This function uses a non-reentrant model
  3453 ;;
  3454                           
  3455                           
  3456                           ;psect for function _CC1LoadREG
  3457  089C                     _CC1LoadREG:	
  3458                           
  3459                           ;CC1.c: 157: CC1Write(0x00,cc1InitVal,0x2E);
  3460                           
  3461                           ;incstack = 0
  3462                           ; Regs used in _CC1LoadREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3463  089C  3020               	movlw	low _cc1InitVal
  3464  089D  00F7               	movwf	?_CC1Write
  3465  089E  3001               	movlw	high _cc1InitVal
  3466  089F  00F8               	movwf	?_CC1Write+1
  3467  08A0  302E               	movlw	46
  3468  08A1  00FB               	movwf	??_CC1LoadREG
  3469  08A2  087B               	movf	??_CC1LoadREG,w
  3470  08A3  00F9               	movwf	?_CC1Write+2
  3471  08A4  3000               	movlw	0
  3472  08A5  318A  222E  3188   	fcall	_CC1Write
  3473                           
  3474                           ;CC1.c: 158: CC1Write(0x3E,cc1PaTable,8);
  3475  08A8  30E3               	movlw	low _cc1PaTable
  3476  08A9  00F7               	movwf	?_CC1Write
  3477  08AA  3000               	movlw	high _cc1PaTable
  3478  08AB  00F8               	movwf	?_CC1Write+1
  3479  08AC  3008               	movlw	8
  3480  08AD  00FB               	movwf	??_CC1LoadREG
  3481  08AE  087B               	movf	??_CC1LoadREG,w
  3482  08AF  00F9               	movwf	?_CC1Write+2
  3483  08B0  303E               	movlw	62
  3484  08B1  318A  222E         	fcall	_CC1Write
  3485  08B3  0008               	return
  3486  08B4                     __end_of_CC1LoadREG:	
  3487                           
  3488                           	psect	text6
  3489  176B                     __ptext6:	
  3490 ;; *************** function _RTXTick *****************
  3491 ;; Defined at:
  3492 ;;		line 72 in file "RTX.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;		None
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;		None               void
  3499 ;; Registers used:
  3500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3510 ;;Total ram usage:        0 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    6
  3513 ;; This function calls:
  3514 ;;		_RTXSendData
  3515 ;; This function is called by:
  3516 ;;		_SYSTask
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           
  3521                           ;psect for function _RTXTick
  3522  176B                     _RTXTick:	
  3523                           
  3524                           ;RTX.c: 74: if(tmrRcvPkt)
  3525                           
  3526                           ;incstack = 0
  3527                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3528  176B  0020               	movlb	0	; select bank0
  3529  176C  086D               	movf	_tmrRcvPkt,w
  3530  176D  1903               	btfsc	3,2
  3531  176E  0008               	return
  3532                           
  3533                           ;RTX.c: 75: {
  3534                           ;RTX.c: 76: tmrRcvPkt--;
  3535  176F  3001               	movlw	1
  3536  1770  02ED               	subwf	_tmrRcvPkt,f
  3537                           
  3538                           ;RTX.c: 77: if(!(tmrRcvPkt))
  3539  1771  08ED               	movf	_tmrRcvPkt,f
  3540  1772  1D03               	skipz
  3541  1773  0008               	return
  3542                           
  3543                           ;RTX.c: 78: RTXSendData();
  3544  1774  318E  2671         	fcall	_RTXSendData
  3545  1776  0020               	movlb	0	; select bank0
  3546  1777  0008               	return
  3547  1778                     __end_of_RTXTick:	
  3548                           
  3549                           	psect	text7
  3550  1740                     __ptext7:	
  3551 ;; *************** function _PGMSelLong *****************
  3552 ;; Defined at:
  3553 ;;		line 116 in file "PGM.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;		None               void
  3560 ;; Registers used:
  3561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    4
  3574 ;; This function calls:
  3575 ;;		_LEDNormalFlash
  3576 ;;		_PGMWriteNvm
  3577 ;; This function is called by:
  3578 ;;		_SYSTask
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           
  3583                           ;psect for function _PGMSelLong
  3584  1740                     _PGMSelLong:	
  3585                           
  3586                           ;PGM.c: 118: pgm_cfg.menu=0;
  3587                           
  3588                           ;incstack = 0
  3589                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3590  1740  0021               	movlb	1	; select bank1
  3591  1741  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  3592                           
  3593                           ;PGM.c: 120: PGMWriteNvm();
  3594  1742  3197  27DA  3197   	fcall	_PGMWriteNvm
  3595                           
  3596                           ;PGM.c: 122: LEDNormalFlash(3);
  3597  1745  3003               	movlw	3
  3598  1746  3189  218F         	fcall	_LEDNormalFlash
  3599  1748  0008               	return
  3600  1749                     __end_of_PGMSelLong:	
  3601                           
  3602                           	psect	text8
  3603  0846                     __ptext8:	
  3604 ;; *************** function _PGMSelDown *****************
  3605 ;; Defined at:
  3606 ;;		line 102 in file "PGM.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;Total ram usage:        1 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		_PGMWriteNvm
  3629 ;; This function is called by:
  3630 ;;		_SYSTask
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           
  3635                           ;psect for function _PGMSelDown
  3636  0846                     _PGMSelDown:	
  3637                           
  3638                           ;PGM.c: 104: pgm_flg.pgmonoff=1;
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in _PGMSelDown: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3642  0846  0020               	movlb	0	; select bank0
  3643  0847  146A               	bsf	_pgm_flg,0
  3644                           
  3645                           ;PGM.c: 106: LATCbits.LATC7=0;
  3646  0848  0022               	movlb	2	; select bank2
  3647  0849  138E               	bcf	14,7	;volatile
  3648                           
  3649                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  3650  084A  0020               	movlb	0	; select bank0
  3651  084B  0816               	movf	22,w	;volatile
  3652  084C  0617               	xorwf	23,w	;volatile
  3653  084D  00E5               	movwf	??_PGMSelDown
  3654  084E  0865               	movf	??_PGMSelDown,w
  3655  084F  0021               	movlb	1	; select bank1
  3656  0850  00CD               	movwf	(_pgm_cfg^(0+128)+3)
  3657                           
  3658                           ;PGM.c: 110: PGMWriteNvm();
  3659  0851  3197  27DA         	fcall	_PGMWriteNvm
  3660                           
  3661                           ;PGM.c: 112: tmrPgm=100;
  3662  0853  3064               	movlw	100
  3663  0854  0020               	movlb	0	; select bank0
  3664  0855  00E5               	movwf	??_PGMSelDown
  3665  0856  0865               	movf	??_PGMSelDown,w
  3666  0857  00EC               	movwf	_tmrPgm
  3667  0858  0008               	return
  3668  0859                     __end_of_PGMSelDown:	
  3669                           
  3670                           	psect	text9
  3671  1712                     __ptext9:	
  3672 ;; *************** function _PGMPgmOff *****************
  3673 ;; Defined at:
  3674 ;;		line 94 in file "PGM.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;		None               void
  3681 ;; Registers used:
  3682 ;;		status,2
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3692 ;;Total ram usage:        0 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    2
  3695 ;; This function calls:
  3696 ;;		Nothing
  3697 ;; This function is called by:
  3698 ;;		_SYSTask
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _PGMPgmOff
  3704  1712                     _PGMPgmOff:	
  3705                           
  3706                           ;PGM.c: 96: tmrPgm=0;
  3707                           
  3708                           ;incstack = 0
  3709                           ; Regs used in _PGMPgmOff: [status,2]
  3710  1712  0020               	movlb	0	; select bank0
  3711  1713  01EC               	clrf	_tmrPgm
  3712                           
  3713                           ;PGM.c: 98: pgm_flg.pgmonoff=0;
  3714  1714  106A               	bcf	_pgm_flg,0
  3715  1715  0008               	return
  3716  1716                     __end_of_PGMPgmOff:	
  3717                           
  3718                           	psect	text10
  3719  1795                     __ptext10:	
  3720 ;; *************** function _PGMTick *****************
  3721 ;; Defined at:
  3722 ;;		line 46 in file "PGM.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;		None               void
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    2
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_SYSTask
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _PGMTick
  3752  1795                     _PGMTick:	
  3753                           
  3754                           ;PGM.c: 48: if(tmrPgm)
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3758  1795  0020               	movlb	0	; select bank0
  3759  1796  086C               	movf	_tmrPgm,w
  3760  1797  1903               	btfsc	3,2
  3761  1798  0008               	return
  3762                           
  3763                           ;PGM.c: 49: {
  3764                           ;PGM.c: 50: tmrPgm--;
  3765  1799  3001               	movlw	1
  3766  179A  02EC               	subwf	_tmrPgm,f
  3767                           
  3768                           ;PGM.c: 51: if(!(tmrPgm))
  3769  179B  08EC               	movf	_tmrPgm,f
  3770  179C  1D03               	skipz
  3771  179D  0008               	return
  3772                           
  3773                           ;PGM.c: 52: {
  3774                           ;PGM.c: 54: pgm_flg.pgmonoff=0;
  3775  179E  106A               	bcf	_pgm_flg,0
  3776                           
  3777                           ;PGM.c: 56: LATCbits.LATC7=1;
  3778  179F  0022               	movlb	2	; select bank2
  3779  17A0  178E               	bsf	14,7	;volatile
  3780                           
  3781                           ;PGM.c: 58: flg_slp.goSleep=1;
  3782  17A1  0021               	movlb	1	; select bank1
  3783  17A2  142F               	bsf	_flg_slp^(0+128),0
  3784  17A3  0020               	movlb	0	; select bank0
  3785  17A4  0008               	return
  3786  17A5                     __end_of_PGMTick:	
  3787                           
  3788                           	psect	text11
  3789  0E07                     __ptext11:	
  3790 ;; *************** function _SLPSleep *****************
  3791 ;; Defined at:
  3792 ;;		line 7 in file "SLP.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;		None
  3795 ;; Auto vars:     Size  Location     Type
  3796 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  3797 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  3798 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  3799 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  3800 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  3801 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  3802 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  3803 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  3804 ;; Return value:  Size  Location     Type
  3805 ;;		None               void
  3806 ;; Registers used:
  3807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3814 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3816 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3817 ;;Total ram usage:        9 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    5
  3820 ;; This function calls:
  3821 ;;		_CC1Sleep
  3822 ;; This function is called by:
  3823 ;;		_SYSTask
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           
  3828                           ;psect for function _SLPSleep
  3829  0E07                     _SLPSleep:	
  3830                           
  3831                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  3832                           ;SLP.c: 10: CC1Sleep();
  3833                           
  3834                           ;incstack = 0
  3835                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3836  0E07  3197  2730  318E   	fcall	_CC1Sleep
  3837                           
  3838                           ;SLP.c: 12: WPUBTmp=WPUB;
  3839  0E0A  0024               	movlb	4	; select bank4
  3840  0E0B  080D               	movf	13,w	;volatile
  3841  0E0C  00FA               	movwf	??_SLPSleep
  3842  0E0D  087A               	movf	??_SLPSleep,w
  3843  0E0E  0020               	movlb	0	; select bank0
  3844  0E0F  00A2               	movwf	SLPSleep@WPUBTmp
  3845                           
  3846                           ;SLP.c: 13: WPUB=0b00000100;
  3847  0E10  3004               	movlw	4
  3848  0E11  0024               	movlb	4	; select bank4
  3849  0E12  008D               	movwf	13	;volatile
  3850                           
  3851                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3852  0E13  0021               	movlb	1	; select bank1
  3853  0E14  081D               	movf	29,w	;volatile
  3854  0E15  00FA               	movwf	??_SLPSleep
  3855  0E16  087A               	movf	??_SLPSleep,w
  3856  0E17  0020               	movlb	0	; select bank0
  3857  0E18  00A6               	movwf	SLPSleep@ADCON0Tmp
  3858                           
  3859                           ;SLP.c: 16: ADCON0=0b00000000;
  3860  0E19  0021               	movlb	1	; select bank1
  3861  0E1A  019D               	clrf	29	;volatile
  3862                           
  3863                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3864  0E1B  0022               	movlb	2	; select bank2
  3865  0E1C  0817               	movf	23,w	;volatile
  3866  0E1D  00FA               	movwf	??_SLPSleep
  3867  0E1E  087A               	movf	??_SLPSleep,w
  3868  0E1F  0020               	movlb	0	; select bank0
  3869  0E20  00A5               	movwf	SLPSleep@FVRCONTmp
  3870                           
  3871                           ;SLP.c: 19: FVRCON=0b00000000;
  3872  0E21  0022               	movlb	2	; select bank2
  3873  0E22  0197               	clrf	23	;volatile
  3874                           
  3875                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3876  0E23  0027               	movlb	7	; select bank7
  3877  0E24  0815               	movf	21,w	;volatile
  3878  0E25  00FA               	movwf	??_SLPSleep
  3879  0E26  087A               	movf	??_SLPSleep,w
  3880  0E27  0020               	movlb	0	; select bank0
  3881  0E28  00A0               	movwf	SLPSleep@IOCBNTmp
  3882                           
  3883                           ;SLP.c: 22: INTCONTmp=INTCON;
  3884  0E29  080B               	movf	11,w	;volatile
  3885  0E2A  00FA               	movwf	??_SLPSleep
  3886  0E2B  087A               	movf	??_SLPSleep,w
  3887  0E2C  00A1               	movwf	SLPSleep@INTCONTmp
  3888                           
  3889                           ;SLP.c: 23: INTCON=0b10001000;
  3890  0E2D  3088               	movlw	136
  3891  0E2E  008B               	movwf	11	;volatile
  3892                           
  3893                           ;SLP.c: 24: IOCBN=0b00000100;
  3894  0E2F  3004               	movlw	4
  3895  0E30  0027               	movlb	7	; select bank7
  3896  0E31  0095               	movwf	21	;volatile
  3897                           
  3898                           ;SLP.c: 26: TESTBATTtmp=0;
  3899  0E32  0020               	movlb	0	; select bank0
  3900  0E33  01A7               	clrf	SLPSleep@TESTBATTtmp
  3901                           
  3902                           ;SLP.c: 27: if(LATBbits.LATB5)
  3903  0E34  0022               	movlb	2	; select bank2
  3904  0E35  1E8D               	btfss	13,5	;volatile
  3905  0E36  2E3A               	goto	l4903
  3906                           
  3907                           ;SLP.c: 28: TESTBATTtmp=1;
  3908  0E37  0020               	movlb	0	; select bank0
  3909  0E38  01A7               	clrf	SLPSleep@TESTBATTtmp
  3910  0E39  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3911  0E3A                     l4903:	
  3912                           
  3913                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3914  0E3A  0021               	movlb	1	; select bank1
  3915  0E3B  0817               	movf	23,w	;volatile
  3916  0E3C  00FA               	movwf	??_SLPSleep
  3917  0E3D  087A               	movf	??_SLPSleep,w
  3918  0E3E  0020               	movlb	0	; select bank0
  3919  0E3F  00A3               	movwf	SLPSleep@WDTCONTmp
  3920                           
  3921                           ;SLP.c: 31: WDTCON=0b00011011;
  3922  0E40  301B               	movlw	27
  3923  0E41  0021               	movlb	1	; select bank1
  3924  0E42  0097               	movwf	23	;volatile
  3925                           
  3926                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3927  0E43  0815               	movf	21,w	;volatile
  3928  0E44  00FA               	movwf	??_SLPSleep
  3929  0E45  087A               	movf	??_SLPSleep,w
  3930  0E46  0020               	movlb	0	; select bank0
  3931  0E47  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3932                           
  3933                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3934  0E48  300A               	movlw	10
  3935  0E49  0021               	movlb	1	; select bank1
  3936  0E4A  0095               	movwf	21	;volatile
  3937  0E4B  0064               	clrwdt	;# 
  3938  0E4C  0063               	sleep	;# 
  3939                           
  3940                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3941  0E4D  0020               	movlb	0	; select bank0
  3942  0E4E  0820               	movf	SLPSleep@IOCBNTmp,w
  3943  0E4F  0027               	movlb	7	; select bank7
  3944  0E50  0095               	movwf	21	;volatile
  3945                           
  3946                           ;SLP.c: 40: INTCON=INTCONTmp;
  3947  0E51  0020               	movlb	0	; select bank0
  3948  0E52  0821               	movf	SLPSleep@INTCONTmp,w
  3949  0E53  008B               	movwf	11	;volatile
  3950                           
  3951                           ;SLP.c: 41: WPUB=WPUBTmp;
  3952  0E54  0822               	movf	SLPSleep@WPUBTmp,w
  3953  0E55  0024               	movlb	4	; select bank4
  3954  0E56  008D               	movwf	13	;volatile
  3955                           
  3956                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3957  0E57  0020               	movlb	0	; select bank0
  3958  0E58  0826               	movf	SLPSleep@ADCON0Tmp,w
  3959  0E59  0021               	movlb	1	; select bank1
  3960  0E5A  009D               	movwf	29	;volatile
  3961                           
  3962                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3963  0E5B  0020               	movlb	0	; select bank0
  3964  0E5C  0825               	movf	SLPSleep@FVRCONTmp,w
  3965  0E5D  0022               	movlb	2	; select bank2
  3966  0E5E  0097               	movwf	23	;volatile
  3967                           
  3968                           ;SLP.c: 44: LATBbits.LATB5=0;
  3969  0E5F  128D               	bcf	13,5	;volatile
  3970                           
  3971                           ;SLP.c: 45: if(TESTBATTtmp)
  3972  0E60  0020               	movlb	0	; select bank0
  3973  0E61  0827               	movf	SLPSleep@TESTBATTtmp,w
  3974  0E62  1903               	btfsc	3,2
  3975  0E63  2E67               	goto	l4909
  3976                           
  3977                           ;SLP.c: 46: LATBbits.LATB5=1;
  3978  0E64  0022               	movlb	2	; select bank2
  3979  0E65  168D               	bsf	13,5	;volatile
  3980  0E66  0020               	movlb	0	; select bank0
  3981  0E67                     l4909:	
  3982                           
  3983                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3984  0E67  0020               	movlb	0	; select bank0
  3985  0E68  0823               	movf	SLPSleep@WDTCONTmp,w
  3986  0E69  0021               	movlb	1	; select bank1
  3987  0E6A  0097               	movwf	23	;volatile
  3988                           
  3989                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3990  0E6B  0020               	movlb	0	; select bank0
  3991  0E6C  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3992  0E6D  0021               	movlb	1	; select bank1
  3993  0E6E  0095               	movwf	21	;volatile
  3994                           
  3995                           ;SLP.c: 50: flg_slp.exitSleep=1;
  3996  0E6F  14AF               	bsf	_flg_slp^(0+128),1
  3997  0E70  0008               	return
  3998  0E71                     __end_of_SLPSleep:	
  3999                           
  4000                           	psect	text12
  4001  1730                     __ptext12:	
  4002 ;; *************** function _CC1Sleep *****************
  4003 ;; Defined at:
  4004 ;;		line 145 in file "CC1.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;		None
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;		None
  4009 ;; Return value:  Size  Location     Type
  4010 ;;		None               void
  4011 ;; Registers used:
  4012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;Total ram usage:        0 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; Hardware stack levels required when called:    4
  4025 ;; This function calls:
  4026 ;;		_CC1Strobe
  4027 ;; This function is called by:
  4028 ;;		_SLPSleep
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _CC1Sleep
  4034  1730                     _CC1Sleep:	
  4035                           
  4036                           ;CC1.c: 147: LATAbits.LATA5=0;
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4040  1730  0022               	movlb	2	; select bank2
  4041  1731  128C               	bcf	12,5	;volatile
  4042                           
  4043                           ;CC1.c: 149: CC1Strobe(SWOR);
  4044  1732  3038               	movlw	56
  4045  1733  3188  2059         	fcall	_CC1Strobe
  4046                           
  4047                           ;CC1.c: 151: LATAbits.LATA5=1;
  4048  1735  0022               	movlb	2	; select bank2
  4049  1736  168C               	bsf	12,5	;volatile
  4050  1737  0008               	return
  4051  1738                     __end_of_CC1Sleep:	
  4052                           
  4053                           	psect	text13
  4054  0AE5                     __ptext13:	
  4055 ;; *************** function _DINTick *****************
  4056 ;; Defined at:
  4057 ;;		line 47 in file "DIN.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;		None
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;		None               void
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4073 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;Total ram usage:        1 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    2
  4078 ;; This function calls:
  4079 ;;		Nothing
  4080 ;; This function is called by:
  4081 ;;		_SYSTask
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           
  4086                           ;psect for function _DINTick
  4087  0AE5                     _DINTick:	
  4088                           
  4089                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  4090                           
  4091                           ;incstack = 0
  4092                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  4093  0AE5  0020               	movlb	0	; select bank0
  4094  0AE6  1C6E               	btfss	_u_flg_din,0
  4095  0AE7  2AF9               	goto	l299
  4096                           
  4097                           ;DIN.c: 51: {
  4098                           ;DIN.c: 52: tmrDbncSel++;
  4099  0AE8  3001               	movlw	1
  4100  0AE9  00F1               	movwf	??_DINTick
  4101  0AEA  0871               	movf	??_DINTick,w
  4102  0AEB  07EB               	addwf	_tmrDbncSel,f
  4103                           
  4104                           ;DIN.c: 53: if(tmrDbncSel>5)
  4105  0AEC  3006               	movlw	6
  4106  0AED  026B               	subwf	_tmrDbncSel,w
  4107  0AEE  1C03               	skipc
  4108  0AEF  2AF9               	goto	l299
  4109                           
  4110                           ;DIN.c: 54: {
  4111                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  4112  0AF0  106E               	bcf	_u_flg_din,0
  4113                           
  4114                           ;DIN.c: 56: tmrDbncSel=0;
  4115  0AF1  01EB               	clrf	_tmrDbncSel
  4116                           
  4117                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  4118  0AF2  1C7C               	btfss	_u_in_sta_currTask,0
  4119  0AF3  2AF7               	goto	l301
  4120                           
  4121                           ;DIN.c: 59: u_in_ev_down.sel=1;
  4122  0AF4  0021               	movlb	1	; select bank1
  4123  0AF5  1435               	bsf	_u_in_ev_down^(0+128),0
  4124  0AF6  2AF9               	goto	l299
  4125  0AF7                     l301:	
  4126                           
  4127                           ;DIN.c: 60: else
  4128                           ;DIN.c: 61: u_in_ev_up.sel=1;
  4129  0AF7  0021               	movlb	1	; select bank1
  4130  0AF8  1437               	bsf	_u_in_ev_up^(0+128),0
  4131  0AF9                     l299:	
  4132                           
  4133                           ;DIN.c: 62: }
  4134                           ;DIN.c: 63: }
  4135                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  4136  0AF9  0020               	movlb	0	; select bank0
  4137  0AFA  1CEE               	btfss	_u_flg_din,1
  4138  0AFB  0008               	return
  4139                           
  4140                           ;DIN.c: 67: {
  4141                           ;DIN.c: 68: tmrLongSel++;
  4142  0AFC  3001               	movlw	1
  4143  0AFD  0021               	movlb	1	; select bank1
  4144  0AFE  07AB               	addwf	_tmrLongSel^(0+128),f
  4145  0AFF  3000               	movlw	0
  4146  0B00  3DAC               	addwfc	(_tmrLongSel+1)^(0+128),f
  4147                           
  4148                           ;DIN.c: 69: if(tmrLongSel>200)
  4149  0B01  3000               	movlw	0
  4150  0B02  022C               	subwf	(_tmrLongSel+1)^(0+128),w
  4151  0B03  30C9               	movlw	201
  4152  0B04  1903               	skipnz
  4153  0B05  022B               	subwf	_tmrLongSel^(0+128),w
  4154  0B06  1C03               	skipc
  4155  0B07  0008               	return
  4156                           
  4157                           ;DIN.c: 70: {
  4158                           ;DIN.c: 72: tmrLongSel=0;
  4159  0B08  01AB               	clrf	_tmrLongSel^(0+128)
  4160  0B09  01AC               	clrf	(_tmrLongSel+1)^(0+128)
  4161                           
  4162                           ;DIN.c: 74: u_in_ev_long.sel=1;
  4163  0B0A  1436               	bsf	_u_in_ev_long^(0+128),0
  4164  0B0B  0008               	return
  4165  0B0C                     __end_of_DINTick:	
  4166                           
  4167                           	psect	text14
  4168  0ABF                     __ptext14:	
  4169 ;; *************** function _SYSInit *****************
  4170 ;; Defined at:
  4171 ;;		line 18 in file "SYS.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  state           1    wreg     unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  state           1    2[COMMON] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;		None               void
  4178 ;; Registers used:
  4179 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4188 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4189 ;;Total ram usage:        2 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    2
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_main
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           
  4200                           ;psect for function _SYSInit
  4201  0ABF                     _SYSInit:	
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  4205                           ;SYSInit@state stored from wreg
  4206  0ABF  00F2               	movwf	SYSInit@state
  4207                           
  4208                           ;SYS.c: 19: switch(state)
  4209  0AC0  2ADC               	goto	l4025
  4210  0AC1                     l4003:	
  4211                           ;SYS.c: 20: {
  4212                           ;SYS.c: 21: case 0:
  4213                           
  4214                           
  4215                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  4216  0AC1  3006               	movlw	6
  4217  0AC2  0021               	movlb	1	; select bank1
  4218  0AC3  0095               	movwf	21	;volatile
  4219  0AC4  3073               	movlw	115
  4220  0AC5  0099               	movwf	25	;volatile
  4221  0AC6  3009               	movlw	9
  4222  0AC7  0097               	movwf	23	;volatile
  4223  0AC8  0027               	movlb	7	; select bank7
  4224  0AC9  0194               	clrf	20	;volatile
  4225  0ACA  0195               	clrf	21	;volatile
  4226  0ACB  3063               	movlw	99
  4227  0ACC  0020               	movlb	0	; select bank0
  4228  0ACD  0095               	movwf	21	;volatile
  4229  0ACE  168B               	bsf	11,5	;volatile
  4230  0ACF  30FB               	movlw	251
  4231  0AD0  00F1               	movwf	??_SYSInit
  4232  0AD1  0871               	movf	??_SYSInit,w
  4233  0AD2  058B               	andwf	11,f	;volatile
  4234  0AD3  0191               	clrf	17	;volatile
  4235  0AD4  0192               	clrf	18	;volatile
  4236  0AD5  0021               	movlb	1	; select bank1
  4237  0AD6  0191               	clrf	17	;volatile
  4238  0AD7  0192               	clrf	18	;volatile
  4239                           
  4240                           ;SYS.c: 24: break;
  4241  0AD8  0008               	return
  4242  0AD9                     l4021:	
  4243                           ;SYS.c: 25: case 1:
  4244                           
  4245                           
  4246                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  4247  0AD9  0021               	movlb	1	; select bank1
  4248  0ADA  01B4               	clrf	_u_SYS_STA^(0+128)
  4249                           
  4250                           ;SYS.c: 32: }
  4251                           
  4252                           ;SYS.c: 28: break;
  4253  0ADB  0008               	return
  4254  0ADC                     l4025:	
  4255  0ADC  0872               	movf	SYSInit@state,w
  4256                           
  4257                           ; Switch size 1, requested type "space"
  4258                           ; Number of cases is 2, Range of values is 0 to 1
  4259                           ; switch strategies available:
  4260                           ; Name         Instructions Cycles
  4261                           ; simple_byte            7     4 (average)
  4262                           ; direct_byte           10     6 (fixed)
  4263                           ; jumptable            260     6 (fixed)
  4264                           ;	Chosen strategy is simple_byte
  4265  0ADD  3A00               	xorlw	0	; case 0
  4266  0ADE  1903               	skipnz
  4267  0ADF  2AC1               	goto	l4003
  4268  0AE0  3A01               	xorlw	1	; case 1
  4269  0AE1  1903               	skipnz
  4270  0AE2  2AD9               	goto	l4021
  4271  0AE3  2AE4               	goto	l602
  4272  0AE4                     l602:	
  4273  0AE4  0008               	return
  4274  0AE5                     __end_of_SYSInit:	
  4275                           
  4276                           	psect	text15
  4277  171C                     __ptext15:	
  4278 ;; *************** function _RTXTask *****************
  4279 ;; Defined at:
  4280 ;;		line 83 in file "RTX.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;		None
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;		None               void
  4287 ;; Registers used:
  4288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4298 ;;Total ram usage:        0 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    9
  4301 ;; This function calls:
  4302 ;;		_RTXReadPkt
  4303 ;; This function is called by:
  4304 ;;		_main
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           
  4309                           ;psect for function _RTXTask
  4310  171C                     _RTXTask:	
  4311                           
  4312                           ;RTX.c: 85: if(!(PORTBbits.RB0))
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _RTXTask: [allreg]
  4316  171C  0020               	movlb	0	; select bank0
  4317  171D  180D               	btfsc	13,0	;volatile
  4318  171E  0008               	return
  4319                           
  4320                           ;RTX.c: 86: RTXReadPkt();
  4321  171F  318C  249E         	fcall	_RTXReadPkt
  4322  1721  0008               	return
  4323  1722                     __end_of_RTXTask:	
  4324                           
  4325                           	psect	text16
  4326  0C9E                     __ptext16:	
  4327 ;; *************** function _RTXReadPkt *****************
  4328 ;; Defined at:
  4329 ;;		line 135 in file "RTX.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;		None               void
  4336 ;; Registers used:
  4337 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;Total ram usage:        2 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    8
  4350 ;; This function calls:
  4351 ;;		_CC1Strobe
  4352 ;;		_CC1Read
  4353 ;;		_LEDNormalFlash
  4354 ;;		_PGMWriteNvm
  4355 ;;		_RTXStartSendData
  4356 ;;		_RTXRcvPkt
  4357 ;;		_RTXSendRPgm
  4358 ;; This function is called by:
  4359 ;;		_RTXTask
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           
  4364                           ;psect for function _RTXReadPkt
  4365  0C9E                     _RTXReadPkt:	
  4366                           
  4367                           ;RTX.c: 136: unsigned char numRxByte;
  4368                           ;RTX.c: 139: CC1Read(0x3B,(&(numRxByte)),1);
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _RTXReadPkt: [allreg]
  4372  0C9E  3066               	movlw	RTXReadPkt@numRxByte& (0+255)
  4373  0C9F  0020               	movlb	0	; select bank0
  4374  0CA0  00E5               	movwf	??_RTXReadPkt
  4375  0CA1  0865               	movf	??_RTXReadPkt,w
  4376  0CA2  00F7               	movwf	?_CC1Read
  4377  0CA3  01F8               	clrf	?_CC1Read+1
  4378  0CA4  0AF8               	incf	?_CC1Read+1,f
  4379  0CA5  303B               	movlw	59
  4380  0CA6  3189  211B  318C   	fcall	_CC1Read
  4381                           
  4382                           ;RTX.c: 140: while(numRxByte>=0x09)
  4383  0CA9  3009               	movlw	9
  4384  0CAA  0020               	movlb	0	; select bank0
  4385  0CAB  0266               	subwf	RTXReadPkt@numRxByte,w
  4386  0CAC  1C03               	btfss	3,0
  4387  0CAD  0008               	return
  4388  0CAE  0064               	clrwdt	;# 
  4389                           
  4390                           ;RTX.c: 144: RTXRcvPkt(pktRx,0x09);
  4391  0CAF  3009               	movlw	9
  4392  0CB0  0020               	movlb	0	; select bank0
  4393  0CB1  00E5               	movwf	??_RTXReadPkt
  4394  0CB2  0865               	movf	??_RTXReadPkt,w
  4395  0CB3  00A0               	movwf	?_RTXRcvPkt
  4396  0CB4  30B8               	movlw	_pktRx& (0+255)
  4397  0CB5  3197  2778  318C   	fcall	_RTXRcvPkt
  4398                           
  4399                           ;RTX.c: 146: if(pgm_flg.pgmonoff)
  4400  0CB8  0020               	movlb	0	; select bank0
  4401  0CB9  1C6A               	btfss	_pgm_flg,0
  4402  0CBA  2CDD               	goto	l5053
  4403                           
  4404                           ;RTX.c: 147: {
  4405                           ;RTX.c: 148: if(pktRx[0]==0x00)
  4406  0CBB  0021               	movlb	1	; select bank1
  4407  0CBC  08B8               	movf	_pktRx^(0+128),f
  4408  0CBD  1D03               	skipz
  4409  0CBE  2C9E               	goto	_RTXReadPkt
  4410                           
  4411                           ;RTX.c: 149: {
  4412                           ;RTX.c: 151: if(pktRx[2]==PGM)
  4413  0CBF  083A               	movf	(_pktRx^(0+128)+2),w
  4414  0CC0  3A01               	xorlw	1
  4415  0CC1  1D03               	skipz
  4416  0CC2  2C9E               	goto	_RTXReadPkt
  4417                           
  4418                           ;RTX.c: 152: {
  4419                           ;RTX.c: 154: pgm_cfg.baseId=pktRx[1];
  4420  0CC3  0839               	movf	(_pktRx^(0+128)+1),w
  4421  0CC4  0020               	movlb	0	; select bank0
  4422  0CC5  00E5               	movwf	??_RTXReadPkt
  4423  0CC6  0865               	movf	??_RTXReadPkt,w
  4424  0CC7  0021               	movlb	1	; select bank1
  4425  0CC8  00CE               	movwf	(_pgm_cfg^(0+128)+4)
  4426                           
  4427                           ;RTX.c: 156: pgm_cfg.menu=1;
  4428  0CC9  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  4429  0CCA  0ACC               	incf	(_pgm_cfg^(0+128)+2),f
  4430                           
  4431                           ;RTX.c: 157: PGMWriteNvm();
  4432  0CCB  3197  27DA  318C   	fcall	_PGMWriteNvm
  4433                           
  4434                           ;RTX.c: 159: RTXSendRPgm();
  4435  0CCE  318A  220C  318C   	fcall	_RTXSendRPgm
  4436                           
  4437                           ;RTX.c: 161: rtx_flg.pgmDone=1;
  4438  0CD1  0021               	movlb	1	; select bank1
  4439  0CD2  1430               	bsf	_rtx_flg^(0+128),0
  4440                           
  4441                           ;RTX.c: 163: tmrRcvPkt=0;
  4442  0CD3  0020               	movlb	0	; select bank0
  4443  0CD4  01ED               	clrf	_tmrRcvPkt
  4444                           
  4445                           ;RTX.c: 165: RTXStartSendData();
  4446  0CD5  3197  2786  318C   	fcall	_RTXStartSendData
  4447                           
  4448                           ;RTX.c: 167: LEDNormalFlash(3);
  4449  0CD8  3003               	movlw	3
  4450  0CD9  3189  218F  318C   	fcall	_LEDNormalFlash
  4451                           
  4452                           ;RTX.c: 168: }
  4453                           ;RTX.c: 169: }
  4454                           ;RTX.c: 170: }
  4455  0CDC  2C9E               	goto	_RTXReadPkt
  4456  0CDD                     l5053:	
  4457                           
  4458                           ;RTX.c: 171: else
  4459                           ;RTX.c: 172: {
  4460                           ;RTX.c: 173: if((pktRx[0]==pgm_cfg.sensId) && (pktRx[1]==pgm_cfg.baseId))
  4461  0CDD  0021               	movlb	1	; select bank1
  4462  0CDE  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4463  0CDF  0638               	xorwf	_pktRx^(0+128),w
  4464  0CE0  1D03               	skipz
  4465  0CE1  2C9E               	goto	_RTXReadPkt
  4466  0CE2  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4467  0CE3  0639               	xorwf	(_pktRx^(0+128)+1),w
  4468  0CE4  1D03               	skipz
  4469  0CE5  2C9E               	goto	_RTXReadPkt
  4470                           
  4471                           ;RTX.c: 174: {
  4472                           ;RTX.c: 176: if(pktRx[2]==rDAT)
  4473  0CE6  083A               	movf	(_pktRx^(0+128)+2),w
  4474  0CE7  3A80               	xorlw	128
  4475  0CE8  1D03               	skipz
  4476  0CE9  2C9E               	goto	_RTXReadPkt
  4477                           
  4478                           ;RTX.c: 177: {
  4479                           ;RTX.c: 179: CC1Strobe(SIDLE);
  4480  0CEA  3036               	movlw	54
  4481  0CEB  3188  2059  318C   	fcall	_CC1Strobe
  4482                           
  4483                           ;RTX.c: 181: tmrRcvPkt=0;
  4484  0CEE  0020               	movlb	0	; select bank0
  4485  0CEF  01ED               	clrf	_tmrRcvPkt
  4486                           
  4487                           ;RTX.c: 183: cntSndData=0;
  4488  0CF0  01E9               	clrf	_cntSndData
  4489                           
  4490                           ;RTX.c: 185: flg_slp.goSleep=1;
  4491  0CF1  0021               	movlb	1	; select bank1
  4492  0CF2  142F               	bsf	_flg_slp^(0+128),0
  4493  0CF3  2C9E               	goto	_RTXReadPkt
  4494  0CF4                     __end_of_RTXReadPkt:	
  4495                           ;RTX.c: 186: }
  4496                           ;RTX.c: 187: }
  4497                           ;RTX.c: 188: }
  4498                           ;RTX.c: 190: CC1Read(0x3B,(&(numRxByte)),1);
  4499                           
  4500                           
  4501                           	psect	text17
  4502  0A0C                     __ptext17:	
  4503 ;; *************** function _RTXSendRPgm *****************
  4504 ;; Defined at:
  4505 ;;		line 256 in file "RTX.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;		None               void
  4512 ;; Registers used:
  4513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;Total ram usage:        1 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    5
  4526 ;; This function calls:
  4527 ;;		_RTXSndPkt
  4528 ;; This function is called by:
  4529 ;;		_RTXReadPkt
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           
  4534                           ;psect for function _RTXSendRPgm
  4535  0A0C                     _RTXSendRPgm:	
  4536                           
  4537                           ;RTX.c: 258: pktTx[0]=pgm_cfg.baseId;
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4541  0A0C  0021               	movlb	1	; select bank1
  4542  0A0D  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4543  0A0E  0020               	movlb	0	; select bank0
  4544  0A0F  00A8               	movwf	??_RTXSendRPgm
  4545  0A10  0828               	movf	??_RTXSendRPgm,w
  4546  0A11  0021               	movlb	1	; select bank1
  4547  0A12  00C1               	movwf	_pktTx^(0+128)
  4548                           
  4549                           ;RTX.c: 259: pktTx[1]=pgm_cfg.sensId;
  4550  0A13  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4551  0A14  0020               	movlb	0	; select bank0
  4552  0A15  00A8               	movwf	??_RTXSendRPgm
  4553  0A16  0828               	movf	??_RTXSendRPgm,w
  4554  0A17  0021               	movlb	1	; select bank1
  4555  0A18  00C2               	movwf	(_pktTx^(0+128)+1)
  4556                           
  4557                           ;RTX.c: 260: pktTx[2]=rPGM;
  4558  0A19  3081               	movlw	129
  4559  0A1A  0020               	movlb	0	; select bank0
  4560  0A1B  00A8               	movwf	??_RTXSendRPgm
  4561  0A1C  0828               	movf	??_RTXSendRPgm,w
  4562  0A1D  0021               	movlb	1	; select bank1
  4563  0A1E  00C3               	movwf	(_pktTx^(0+128)+2)
  4564                           
  4565                           ;RTX.c: 261: pktTx[3]=0x00;
  4566  0A1F  01C4               	clrf	(_pktTx^(0+128)+3)
  4567                           
  4568                           ;RTX.c: 262: pktTx[4]=0x00;
  4569  0A20  01C5               	clrf	(_pktTx^(0+128)+4)
  4570                           
  4571                           ;RTX.c: 263: pktTx[5]=0x00;
  4572  0A21  01C6               	clrf	(_pktTx^(0+128)+5)
  4573                           
  4574                           ;RTX.c: 264: pktTx[6]=0x00;
  4575  0A22  01C7               	clrf	(_pktTx^(0+128)+6)
  4576                           
  4577                           ;RTX.c: 265: pktTx[7]=0x00;
  4578  0A23  01C8               	clrf	(_pktTx^(0+128)+7)
  4579                           
  4580                           ;RTX.c: 266: pktTx[8]=0x00;
  4581  0A24  01C9               	clrf	(_pktTx^(0+128)+8)
  4582                           
  4583                           ;RTX.c: 269: RTXSndPkt(pktTx,0x09);
  4584  0A25  3009               	movlw	9
  4585  0A26  0020               	movlb	0	; select bank0
  4586  0A27  00A8               	movwf	??_RTXSendRPgm
  4587  0A28  0828               	movf	??_RTXSendRPgm,w
  4588  0A29  00A2               	movwf	?_RTXSndPkt
  4589  0A2A  30C1               	movlw	_pktTx& (0+255)
  4590  0A2B  318C  24F4         	fcall	_RTXSndPkt
  4591  0A2D  0008               	return
  4592  0A2E                     __end_of_RTXSendRPgm:	
  4593                           
  4594                           	psect	text18
  4595  1778                     __ptext18:	
  4596 ;; *************** function _RTXRcvPkt *****************
  4597 ;; Defined at:
  4598 ;;		line 129 in file "RTX.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  dst             1    wreg     PTR unsigned char 
  4601 ;;		 -> pktRx(9), 
  4602 ;;  len             1    0[BANK0 ] unsigned char 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  4605 ;;		 -> pktRx(9), 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;		None               void
  4608 ;; Registers used:
  4609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4615 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;Total ram usage:        4 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		_CC1Read
  4624 ;; This function is called by:
  4625 ;;		_RTXReadPkt
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _RTXRcvPkt
  4631  1778                     _RTXRcvPkt:	
  4632                           
  4633                           ;incstack = 0
  4634                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4635                           ;RTXRcvPkt@dst stored from wreg
  4636  1778  0020               	movlb	0	; select bank0
  4637  1779  00A3               	movwf	RTXRcvPkt@dst
  4638                           
  4639                           ;RTX.c: 131: CC1Read(0x3F,dst,len);
  4640  177A  0823               	movf	RTXRcvPkt@dst,w
  4641  177B  00A1               	movwf	??_RTXRcvPkt
  4642  177C  0821               	movf	??_RTXRcvPkt,w
  4643  177D  00F7               	movwf	?_CC1Read
  4644  177E  0820               	movf	RTXRcvPkt@len,w
  4645  177F  00A2               	movwf	??_RTXRcvPkt+1
  4646  1780  0822               	movf	??_RTXRcvPkt+1,w
  4647  1781  00F8               	movwf	?_CC1Read+1
  4648  1782  303F               	movlw	63
  4649  1783  3189  211B         	fcall	_CC1Read
  4650  1785  0008               	return
  4651  1786                     __end_of_RTXRcvPkt:	
  4652                           
  4653                           	psect	text19
  4654  1786                     __ptext19:	
  4655 ;; *************** function _RTXStartSendData *****************
  4656 ;; Defined at:
  4657 ;;		line 195 in file "RTX.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;		None               void
  4664 ;; Registers used:
  4665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    7
  4678 ;; This function calls:
  4679 ;;		_ADCConv
  4680 ;;		_DLYDelay_ms
  4681 ;;		_RTXSendData
  4682 ;; This function is called by:
  4683 ;;		_RTXInit
  4684 ;;		_RTXReadPkt
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           
  4689                           ;psect for function _RTXStartSendData
  4690  1786                     _RTXStartSendData:	
  4691                           
  4692                           ;RTX.c: 197: DLYDelay_ms(100);
  4693                           
  4694                           ;incstack = 0
  4695                           ; Regs used in _RTXStartSendData: [allreg]
  4696  1786  3064               	movlw	100
  4697  1787  00F1               	movwf	?_DLYDelay_ms
  4698  1788  3000               	movlw	0
  4699  1789  00F2               	movwf	?_DLYDelay_ms+1
  4700  178A  3188  20B4  3197   	fcall	_DLYDelay_ms
  4701                           
  4702                           ;RTX.c: 199: ADCConv();
  4703  178D  3181  2107  3197   	fcall	_ADCConv
  4704                           
  4705                           ;RTX.c: 201: cntSndData=0;
  4706  1790  0020               	movlb	0	; select bank0
  4707  1791  01E9               	clrf	_cntSndData
  4708                           
  4709                           ;RTX.c: 202: RTXSendData();
  4710  1792  318E  2671         	fcall	_RTXSendData
  4711  1794  0008               	return
  4712  1795                     __end_of_RTXStartSendData:	
  4713                           
  4714                           	psect	text20
  4715  0E71                     __ptext20:	
  4716 ;; *************** function _RTXSendData *****************
  4717 ;; Defined at:
  4718 ;;		line 206 in file "RTX.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;		None
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  valBatt         3   36[BANK0 ] struct _RTX_DATA
  4723 ;;  valTemp         3   33[BANK0 ] struct _RTX_DATA
  4724 ;; Return value:  Size  Location     Type
  4725 ;;		None               void
  4726 ;; Registers used:
  4727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;Total ram usage:        7 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    5
  4740 ;; This function calls:
  4741 ;;		_LEDFastFlash
  4742 ;;		_RTXSndPkt
  4743 ;;		___ftadd
  4744 ;; This function is called by:
  4745 ;;		_RTXTick
  4746 ;;		_RTXStartSendData
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _RTXSendData
  4752  0E71                     _RTXSendData:	
  4753                           
  4754                           ;RTX.c: 207: tu_RTX_DATA valTemp,valBatt;
  4755                           ;RTX.c: 209: if(pgm_flg.pgmonoff)
  4756                           
  4757                           ;incstack = 0
  4758                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4759  0E71  0020               	movlb	0	; select bank0
  4760  0E72  1C6A               	btfss	_pgm_flg,0
  4761  0E73  2E7A               	goto	l4991
  4762                           
  4763                           ;RTX.c: 210: {
  4764                           ;RTX.c: 212: cntSndData=0;
  4765  0E74  01E9               	clrf	_cntSndData
  4766                           
  4767                           ;RTX.c: 214: tmrRcvPkt=100;
  4768  0E75  3064               	movlw	100
  4769  0E76  00C0               	movwf	??_RTXSendData
  4770  0E77  0840               	movf	??_RTXSendData,w
  4771  0E78  00ED               	movwf	_tmrRcvPkt
  4772                           
  4773                           ;RTX.c: 215: }
  4774  0E79  0008               	return
  4775  0E7A                     l4991:	
  4776                           
  4777                           ;RTX.c: 216: else
  4778                           ;RTX.c: 217: {
  4779                           ;RTX.c: 219: if(cntSndData<5)
  4780  0E7A  3005               	movlw	5
  4781  0E7B  0269               	subwf	_cntSndData,w
  4782  0E7C  1803               	skipnc
  4783  0E7D  2EF1               	goto	l519
  4784                           
  4785                           ;RTX.c: 220: {
  4786                           ;RTX.c: 222: if(pgm_cfg.menu)
  4787  0E7E  0021               	movlb	1	; select bank1
  4788  0E7F  084C               	movf	(_pgm_cfg^(0+128)+2),w
  4789  0E80  1903               	btfsc	3,2
  4790  0E81  2EEB               	goto	l5021
  4791                           
  4792                           ;RTX.c: 223: {
  4793                           ;RTX.c: 225: pktTx[0]=pgm_cfg.baseId;
  4794  0E82  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4795  0E83  0020               	movlb	0	; select bank0
  4796  0E84  00C0               	movwf	??_RTXSendData
  4797  0E85  0840               	movf	??_RTXSendData,w
  4798  0E86  0021               	movlb	1	; select bank1
  4799  0E87  00C1               	movwf	_pktTx^(0+128)
  4800                           
  4801                           ;RTX.c: 226: pktTx[1]=pgm_cfg.sensId;
  4802  0E88  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4803  0E89  0020               	movlb	0	; select bank0
  4804  0E8A  00C0               	movwf	??_RTXSendData
  4805  0E8B  0840               	movf	??_RTXSendData,w
  4806  0E8C  0021               	movlb	1	; select bank1
  4807  0E8D  00C2               	movwf	(_pktTx^(0+128)+1)
  4808                           
  4809                           ;RTX.c: 227: pktTx[2]=DAT;
  4810  0E8E  01C3               	clrf	(_pktTx^(0+128)+2)
  4811                           
  4812                           ;RTX.c: 228: valTemp.val=tempC+2;
  4813  0E8F  3000               	movlw	0
  4814  0E90  0020               	movlb	0	; select bank0
  4815  0E91  00B3               	movwf	?___ftadd
  4816  0E92  3000               	movlw	0
  4817  0E93  00B4               	movwf	?___ftadd+1
  4818  0E94  3040               	movlw	64
  4819  0E95  00B5               	movwf	?___ftadd+2
  4820  0E96  0021               	movlb	1	; select bank1
  4821  0E97  0826               	movf	_tempC^(0+128),w
  4822  0E98  0020               	movlb	0	; select bank0
  4823  0E99  00B6               	movwf	?___ftadd+3
  4824  0E9A  0021               	movlb	1	; select bank1
  4825  0E9B  0827               	movf	(_tempC+1)^(0+128),w
  4826  0E9C  0020               	movlb	0	; select bank0
  4827  0E9D  00B7               	movwf	?___ftadd+4
  4828  0E9E  0021               	movlb	1	; select bank1
  4829  0E9F  0828               	movf	(_tempC+2)^(0+128),w
  4830  0EA0  0020               	movlb	0	; select bank0
  4831  0EA1  00B8               	movwf	?___ftadd+5
  4832  0EA2  3184  243D  318E   	fcall	___ftadd
  4833  0EA5  0020               	movlb	0	; select bank0
  4834  0EA6  0833               	movf	?___ftadd,w
  4835  0EA7  00C1               	movwf	RTXSendData@valTemp
  4836  0EA8  0834               	movf	?___ftadd+1,w
  4837  0EA9  00C2               	movwf	RTXSendData@valTemp+1
  4838  0EAA  0835               	movf	?___ftadd+2,w
  4839  0EAB  00C3               	movwf	RTXSendData@valTemp+2
  4840                           
  4841                           ;RTX.c: 229: pktTx[3]=valTemp.val_byte[0];
  4842  0EAC  0841               	movf	RTXSendData@valTemp,w
  4843  0EAD  00C0               	movwf	??_RTXSendData
  4844  0EAE  0840               	movf	??_RTXSendData,w
  4845  0EAF  0021               	movlb	1	; select bank1
  4846  0EB0  00C4               	movwf	(_pktTx^(0+128)+3)
  4847                           
  4848                           ;RTX.c: 230: pktTx[4]=valTemp.val_byte[1];
  4849  0EB1  0020               	movlb	0	; select bank0
  4850  0EB2  0842               	movf	RTXSendData@valTemp+1,w
  4851  0EB3  00C0               	movwf	??_RTXSendData
  4852  0EB4  0840               	movf	??_RTXSendData,w
  4853  0EB5  0021               	movlb	1	; select bank1
  4854  0EB6  00C5               	movwf	(_pktTx^(0+128)+4)
  4855                           
  4856                           ;RTX.c: 231: pktTx[5]=valTemp.val_byte[2];
  4857  0EB7  0020               	movlb	0	; select bank0
  4858  0EB8  0843               	movf	RTXSendData@valTemp+2,w
  4859  0EB9  00C0               	movwf	??_RTXSendData
  4860  0EBA  0840               	movf	??_RTXSendData,w
  4861  0EBB  0021               	movlb	1	; select bank1
  4862  0EBC  00C6               	movwf	(_pktTx^(0+128)+5)
  4863                           
  4864                           ;RTX.c: 232: valBatt.val=battV;
  4865  0EBD  0823               	movf	_battV^(0+128),w
  4866  0EBE  0020               	movlb	0	; select bank0
  4867  0EBF  00C4               	movwf	RTXSendData@valBatt
  4868  0EC0  0021               	movlb	1	; select bank1
  4869  0EC1  0824               	movf	(_battV+1)^(0+128),w
  4870  0EC2  0020               	movlb	0	; select bank0
  4871  0EC3  00C5               	movwf	RTXSendData@valBatt+1
  4872  0EC4  0021               	movlb	1	; select bank1
  4873  0EC5  0825               	movf	(_battV+2)^(0+128),w
  4874  0EC6  0020               	movlb	0	; select bank0
  4875  0EC7  00C6               	movwf	RTXSendData@valBatt+2
  4876                           
  4877                           ;RTX.c: 233: pktTx[6]=valBatt.val_byte[0];
  4878  0EC8  0844               	movf	RTXSendData@valBatt,w
  4879  0EC9  00C0               	movwf	??_RTXSendData
  4880  0ECA  0840               	movf	??_RTXSendData,w
  4881  0ECB  0021               	movlb	1	; select bank1
  4882  0ECC  00C7               	movwf	(_pktTx^(0+128)+6)
  4883                           
  4884                           ;RTX.c: 234: pktTx[7]=valBatt.val_byte[1];
  4885  0ECD  0020               	movlb	0	; select bank0
  4886  0ECE  0845               	movf	RTXSendData@valBatt+1,w
  4887  0ECF  00C0               	movwf	??_RTXSendData
  4888  0ED0  0840               	movf	??_RTXSendData,w
  4889  0ED1  0021               	movlb	1	; select bank1
  4890  0ED2  00C8               	movwf	(_pktTx^(0+128)+7)
  4891                           
  4892                           ;RTX.c: 235: pktTx[8]=valBatt.val_byte[2];
  4893  0ED3  0020               	movlb	0	; select bank0
  4894  0ED4  0846               	movf	RTXSendData@valBatt+2,w
  4895  0ED5  00C0               	movwf	??_RTXSendData
  4896  0ED6  0840               	movf	??_RTXSendData,w
  4897  0ED7  0021               	movlb	1	; select bank1
  4898  0ED8  00C9               	movwf	(_pktTx^(0+128)+8)
  4899                           
  4900                           ;RTX.c: 238: RTXSndPkt(pktTx,0x09);
  4901  0ED9  3009               	movlw	9
  4902  0EDA  0020               	movlb	0	; select bank0
  4903  0EDB  00C0               	movwf	??_RTXSendData
  4904  0EDC  0840               	movf	??_RTXSendData,w
  4905  0EDD  00A2               	movwf	?_RTXSndPkt
  4906  0EDE  30C1               	movlw	_pktTx& (0+255)
  4907  0EDF  318C  24F4  318E   	fcall	_RTXSndPkt
  4908                           
  4909                           ;RTX.c: 241: cntSndData++;
  4910  0EE2  3001               	movlw	1
  4911  0EE3  0020               	movlb	0	; select bank0
  4912  0EE4  00C0               	movwf	??_RTXSendData
  4913  0EE5  0840               	movf	??_RTXSendData,w
  4914  0EE6  07E9               	addwf	_cntSndData,f
  4915                           
  4916                           ;RTX.c: 244: LEDFastFlash(1);
  4917  0EE7  3001               	movlw	1
  4918  0EE8  3189  21AD         	fcall	_LEDFastFlash
  4919  0EEA  0021               	movlb	1	; select bank1
  4920  0EEB                     l5021:	
  4921                           
  4922                           ;RTX.c: 245: }
  4923                           ;RTX.c: 248: tmrRcvPkt=100;
  4924  0EEB  3064               	movlw	100
  4925  0EEC  0020               	movlb	0	; select bank0
  4926  0EED  00C0               	movwf	??_RTXSendData
  4927  0EEE  0840               	movf	??_RTXSendData,w
  4928  0EEF  00ED               	movwf	_tmrRcvPkt
  4929                           
  4930                           ;RTX.c: 249: }
  4931  0EF0  0008               	return
  4932  0EF1                     l519:	
  4933                           
  4934                           ;RTX.c: 250: else
  4935                           ;RTX.c: 251: flg_slp.goSleep=1;
  4936  0EF1  0021               	movlb	1	; select bank1
  4937  0EF2  142F               	bsf	_flg_slp^(0+128),0
  4938  0EF3  0008               	return
  4939  0EF4                     __end_of_RTXSendData:	
  4940                           
  4941                           	psect	text21
  4942  0CF4                     __ptext21:	
  4943 ;; *************** function _RTXSndPkt *****************
  4944 ;; Defined at:
  4945 ;;		line 105 in file "RTX.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;  src             1    wreg     PTR unsigned char 
  4948 ;;		 -> pktTx(9), 
  4949 ;;  len             1    2[BANK0 ] unsigned char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  src             1    4[BANK0 ] PTR unsigned char 
  4952 ;;		 -> pktTx(9), 
  4953 ;;  sta             1    7[BANK0 ] unsigned char 
  4954 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4955 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  4956 ;; Return value:  Size  Location     Type
  4957 ;;		None               void
  4958 ;; Registers used:
  4959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 0/0
  4962 ;;		On exit  : 0/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4965 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;Total ram usage:        6 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:    4
  4972 ;; This function calls:
  4973 ;;		_CC1Strobe
  4974 ;;		_CC1Read
  4975 ;;		_CC1Write
  4976 ;; This function is called by:
  4977 ;;		_RTXSendData
  4978 ;;		_RTXSendRPgm
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           
  4983                           ;psect for function _RTXSndPkt
  4984  0CF4                     _RTXSndPkt:	
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4988                           ;RTXSndPkt@src stored from wreg
  4989  0CF4  0020               	movlb	0	; select bank0
  4990  0CF5  00A4               	movwf	RTXSndPkt@src
  4991  0CF6                     l492:	
  4992                           ;RTX.c: 106: unsigned char sta,numRxByte,numTxByte;
  4993                           ;RTX.c: 109: do
  4994                           
  4995  0CF6  0064               	clrwdt	;# 
  4996                           
  4997                           ;RTX.c: 112: CC1Read(0x35,(&(sta)),1);
  4998  0CF7  3027               	movlw	RTXSndPkt@sta& (0+255)
  4999  0CF8  0020               	movlb	0	; select bank0
  5000  0CF9  00A3               	movwf	??_RTXSndPkt
  5001  0CFA  0823               	movf	??_RTXSndPkt,w
  5002  0CFB  00F7               	movwf	?_CC1Read
  5003  0CFC  01F8               	clrf	?_CC1Read+1
  5004  0CFD  0AF8               	incf	?_CC1Read+1,f
  5005  0CFE  3035               	movlw	53
  5006  0CFF  3189  211B  318C   	fcall	_CC1Read
  5007                           
  5008                           ;RTX.c: 113: }
  5009                           ;RTX.c: 114: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  5010  0D02  301F               	movlw	31
  5011  0D03  0020               	movlb	0	; select bank0
  5012  0D04  0527               	andwf	RTXSndPkt@sta,w
  5013  0D05  00A3               	movwf	??_RTXSndPkt
  5014  0D06  0823               	movf	??_RTXSndPkt,w
  5015  0D07  3A0D               	xorlw	13
  5016  0D08  1903               	skipnz
  5017  0D09  2D11               	goto	l5085
  5018  0D0A  301F               	movlw	31
  5019  0D0B  0527               	andwf	RTXSndPkt@sta,w
  5020  0D0C  00A3               	movwf	??_RTXSndPkt
  5021  0D0D  0823               	movf	??_RTXSndPkt,w
  5022  0D0E  3A01               	xorlw	1
  5023  0D0F  1D03               	skipz
  5024  0D10  2CF6               	goto	l492
  5025  0D11                     l5085:	
  5026                           
  5027                           ;RTX.c: 116: CC1Strobe(SIDLE);
  5028  0D11  3036               	movlw	54
  5029  0D12  3188  2059  318C   	fcall	_CC1Strobe
  5030                           
  5031                           ;RTX.c: 117: CC1Read(0x3B,(&(numRxByte)),1);
  5032  0D15  3025               	movlw	RTXSndPkt@numRxByte& (0+255)
  5033  0D16  0020               	movlb	0	; select bank0
  5034  0D17  00A3               	movwf	??_RTXSndPkt
  5035  0D18  0823               	movf	??_RTXSndPkt,w
  5036  0D19  00F7               	movwf	?_CC1Read
  5037  0D1A  01F8               	clrf	?_CC1Read+1
  5038  0D1B  0AF8               	incf	?_CC1Read+1,f
  5039  0D1C  303B               	movlw	59
  5040  0D1D  3189  211B  318C   	fcall	_CC1Read
  5041                           
  5042                           ;RTX.c: 118: CC1Read(0x3A,(&(numTxByte)),1);
  5043  0D20  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  5044  0D21  0020               	movlb	0	; select bank0
  5045  0D22  00A3               	movwf	??_RTXSndPkt
  5046  0D23  0823               	movf	??_RTXSndPkt,w
  5047  0D24  00F7               	movwf	?_CC1Read
  5048  0D25  01F8               	clrf	?_CC1Read+1
  5049  0D26  0AF8               	incf	?_CC1Read+1,f
  5050  0D27  303A               	movlw	58
  5051  0D28  3189  211B  318C   	fcall	_CC1Read
  5052                           
  5053                           ;RTX.c: 120: CC1Strobe(SFTX);
  5054  0D2B  303B               	movlw	59
  5055  0D2C  3188  2059  318C   	fcall	_CC1Strobe
  5056                           
  5057                           ;RTX.c: 121: CC1Read(0x3A,(&(numTxByte)),1);
  5058  0D2F  3026               	movlw	RTXSndPkt@numTxByte& (0+255)
  5059  0D30  0020               	movlb	0	; select bank0
  5060  0D31  00A3               	movwf	??_RTXSndPkt
  5061  0D32  0823               	movf	??_RTXSndPkt,w
  5062  0D33  00F7               	movwf	?_CC1Read
  5063  0D34  01F8               	clrf	?_CC1Read+1
  5064  0D35  0AF8               	incf	?_CC1Read+1,f
  5065  0D36  303A               	movlw	58
  5066  0D37  3189  211B  318C   	fcall	_CC1Read
  5067                           
  5068                           ;RTX.c: 123: CC1Write(0x3F,src,len);
  5069  0D3A  0020               	movlb	0	; select bank0
  5070  0D3B  0824               	movf	RTXSndPkt@src,w
  5071  0D3C  00F7               	movwf	?_CC1Write
  5072  0D3D  3000               	movlw	0
  5073  0D3E  00F8               	movwf	?_CC1Write+1
  5074  0D3F  0822               	movf	RTXSndPkt@len,w
  5075  0D40  00A3               	movwf	??_RTXSndPkt
  5076  0D41  0823               	movf	??_RTXSndPkt,w
  5077  0D42  00F9               	movwf	?_CC1Write+2
  5078  0D43  303F               	movlw	63
  5079  0D44  318A  222E  318C   	fcall	_CC1Write
  5080                           
  5081                           ;RTX.c: 125: CC1Strobe(STX);
  5082  0D47  3035               	movlw	53
  5083  0D48  3188  2059         	fcall	_CC1Strobe
  5084  0D4A  0008               	return
  5085  0D4B                     __end_of_RTXSndPkt:	
  5086                           
  5087                           	psect	text22
  5088  0A2E                     __ptext22:	
  5089 ;; *************** function _CC1Write *****************
  5090 ;; Defined at:
  5091 ;;		line 127 in file "CC1.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  addr            1    wreg     unsigned char 
  5094 ;;  src             2    7[COMMON] PTR unsigned char 
  5095 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), 
  5096 ;;  len             1    9[COMMON] unsigned char 
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  addr            1    0[BANK0 ] unsigned char 
  5099 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;		None               void
  5102 ;; Registers used:
  5103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5109 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5112 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;Total ram usage:        6 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    3
  5116 ;; This function calls:
  5117 ;;		_SPIWrite
  5118 ;; This function is called by:
  5119 ;;		_CC1LoadREG
  5120 ;;		_RTXSndPkt
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124                           
  5125                           ;psect for function _CC1Write
  5126  0A2E                     _CC1Write:	
  5127                           
  5128                           ;incstack = 0
  5129                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5130                           ;CC1Write@addr stored from wreg
  5131  0A2E  0020               	movlb	0	; select bank0
  5132  0A2F  00A0               	movwf	CC1Write@addr
  5133                           
  5134                           ;CC1.c: 128: unsigned char cc1Addr;
  5135                           ;CC1.c: 131: LATAbits.LATA5=0;
  5136  0A30  0022               	movlb	2	; select bank2
  5137  0A31  128C               	bcf	12,5	;volatile
  5138                           
  5139                           ;CC1.c: 134: cc1Addr=((addr&0b00111111)|0b01000000);
  5140  0A32  0020               	movlb	0	; select bank0
  5141  0A33  0820               	movf	CC1Write@addr,w
  5142  0A34  393F               	andlw	63
  5143  0A35  3840               	iorlw	64
  5144  0A36  00FA               	movwf	??_CC1Write
  5145  0A37  087A               	movf	??_CC1Write,w
  5146  0A38  00A1               	movwf	CC1Write@cc1Addr
  5147                           
  5148                           ;CC1.c: 135: SPIWrite((&(cc1Addr)),1);
  5149  0A39  3021               	movlw	low CC1Write@cc1Addr
  5150  0A3A  00F1               	movwf	?_SPIWrite
  5151  0A3B  3000               	movlw	high CC1Write@cc1Addr
  5152  0A3C  00F2               	movwf	?_SPIWrite+1
  5153  0A3D  01F3               	clrf	?_SPIWrite+2
  5154  0A3E  0AF3               	incf	?_SPIWrite+2,f
  5155  0A3F  3189  2154  318A   	fcall	_SPIWrite
  5156                           
  5157                           ;CC1.c: 138: SPIWrite(src,len);
  5158  0A42  0878               	movf	CC1Write@src+1,w
  5159  0A43  01F2               	clrf	?_SPIWrite+1
  5160  0A44  07F2               	addwf	?_SPIWrite+1,f
  5161  0A45  0877               	movf	CC1Write@src,w
  5162  0A46  01F1               	clrf	?_SPIWrite
  5163  0A47  07F1               	addwf	?_SPIWrite,f
  5164  0A48  0879               	movf	CC1Write@len,w
  5165  0A49  00FA               	movwf	??_CC1Write
  5166  0A4A  087A               	movf	??_CC1Write,w
  5167  0A4B  00F3               	movwf	?_SPIWrite+2
  5168  0A4C  3189  2154         	fcall	_SPIWrite
  5169                           
  5170                           ;CC1.c: 141: LATAbits.LATA5=1;
  5171  0A4E  0022               	movlb	2	; select bank2
  5172  0A4F  168C               	bsf	12,5	;volatile
  5173  0A50  0008               	return
  5174  0A51                     __end_of_CC1Write:	
  5175                           
  5176                           	psect	text23
  5177  091B                     __ptext23:	
  5178 ;; *************** function _CC1Read *****************
  5179 ;; Defined at:
  5180 ;;		line 109 in file "CC1.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  addr            1    wreg     unsigned char 
  5183 ;;  dst             1    7[COMMON] PTR unsigned char 
  5184 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5185 ;;		 -> RTXSndPkt@sta(1), 
  5186 ;;  len             1    8[COMMON] unsigned char 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  addr            1   10[COMMON] unsigned char 
  5189 ;;  cc1Addr         1   11[COMMON] unsigned char 
  5190 ;; Return value:  Size  Location     Type
  5191 ;;		None               void
  5192 ;; Registers used:
  5193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5194 ;; Tracked objects:
  5195 ;;		On entry : 0/0
  5196 ;;		On exit  : 0/0
  5197 ;;		Unchanged: 0/0
  5198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5202 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5203 ;;Total ram usage:        5 bytes
  5204 ;; Hardware stack levels used:    1
  5205 ;; Hardware stack levels required when called:    3
  5206 ;; This function calls:
  5207 ;;		_SPIRead
  5208 ;;		_SPIWrite
  5209 ;; This function is called by:
  5210 ;;		_RTXSndPkt
  5211 ;;		_RTXRcvPkt
  5212 ;;		_RTXReadPkt
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           
  5217                           ;psect for function _CC1Read
  5218  091B                     _CC1Read:	
  5219                           
  5220                           ;incstack = 0
  5221                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5222                           ;CC1Read@addr stored from wreg
  5223  091B  00FA               	movwf	CC1Read@addr
  5224                           
  5225                           ;CC1.c: 110: unsigned char cc1Addr;
  5226                           ;CC1.c: 113: LATAbits.LATA5=0;
  5227  091C  0022               	movlb	2	; select bank2
  5228  091D  128C               	bcf	12,5	;volatile
  5229                           
  5230                           ;CC1.c: 116: cc1Addr=((addr&0b00111111)|0b11000000);
  5231  091E  087A               	movf	CC1Read@addr,w
  5232  091F  393F               	andlw	63
  5233  0920  38C0               	iorlw	192
  5234  0921  00F9               	movwf	??_CC1Read
  5235  0922  0879               	movf	??_CC1Read,w
  5236  0923  00FB               	movwf	CC1Read@cc1Addr
  5237                           
  5238                           ;CC1.c: 117: SPIWrite((&(cc1Addr)),1);
  5239  0924  307B               	movlw	low CC1Read@cc1Addr
  5240  0925  00F1               	movwf	?_SPIWrite
  5241  0926  3000               	movlw	high CC1Read@cc1Addr
  5242  0927  00F2               	movwf	?_SPIWrite+1
  5243  0928  01F3               	clrf	?_SPIWrite+2
  5244  0929  0AF3               	incf	?_SPIWrite+2,f
  5245  092A  3189  2154  3189   	fcall	_SPIWrite
  5246                           
  5247                           ;CC1.c: 120: SPIRead(dst,len);
  5248  092D  0878               	movf	CC1Read@len,w
  5249  092E  00F9               	movwf	??_CC1Read
  5250  092F  0879               	movf	??_CC1Read,w
  5251  0930  00F1               	movwf	?_SPIRead
  5252  0931  0877               	movf	CC1Read@dst,w
  5253  0932  3189  21CB         	fcall	_SPIRead
  5254                           
  5255                           ;CC1.c: 123: LATAbits.LATA5=1;
  5256  0934  0022               	movlb	2	; select bank2
  5257  0935  168C               	bsf	12,5	;volatile
  5258  0936  0008               	return
  5259  0937                     __end_of_CC1Read:	
  5260                           
  5261                           	psect	text24
  5262  09CB                     __ptext24:	
  5263 ;; *************** function _SPIRead *****************
  5264 ;; Defined at:
  5265 ;;		line 26 in file "SPI.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;  dstPtr          1    wreg     PTR unsigned char 
  5268 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5269 ;;		 -> RTXSndPkt@sta(1), 
  5270 ;;  len             1    1[COMMON] unsigned char 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  5273 ;;		 -> pktRx(9), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  5274 ;;		 -> RTXSndPkt@sta(1), 
  5275 ;;  i               1    5[COMMON] unsigned char 
  5276 ;; Return value:  Size  Location     Type
  5277 ;;		None               void
  5278 ;; Registers used:
  5279 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5280 ;; Tracked objects:
  5281 ;;		On entry : 0/0
  5282 ;;		On exit  : 0/0
  5283 ;;		Unchanged: 0/0
  5284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5285 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;Total ram usage:        5 bytes
  5290 ;; Hardware stack levels used:    1
  5291 ;; Hardware stack levels required when called:    2
  5292 ;; This function calls:
  5293 ;;		Nothing
  5294 ;; This function is called by:
  5295 ;;		_CC1Read
  5296 ;; This function uses a non-reentrant model
  5297 ;;
  5298                           
  5299                           
  5300                           ;psect for function _SPIRead
  5301  09CB                     _SPIRead:	
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5305                           ;SPIRead@dstPtr stored from wreg
  5306  09CB  00F4               	movwf	SPIRead@dstPtr
  5307                           
  5308                           ;SPI.c: 27: unsigned char i;
  5309                           ;SPI.c: 29: for(i=0;i<len;i++)
  5310  09CC  01F5               	clrf	SPIRead@i
  5311  09CD                     l4643:	
  5312  09CD  0871               	movf	SPIRead@len,w
  5313  09CE  0275               	subwf	SPIRead@i,w
  5314  09CF  1803               	btfsc	3,0
  5315  09D0  0008               	return
  5316                           
  5317                           ;SPI.c: 30: {
  5318                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5319  09D1  0020               	movlb	0	; select bank0
  5320  09D2  1191               	bcf	17,3	;volatile
  5321                           
  5322                           ;SPI.c: 32: SSPBUF=0xFF;
  5323  09D3  30FF               	movlw	255
  5324  09D4  0024               	movlb	4	; select bank4
  5325  09D5  0091               	movwf	17	;volatile
  5326  09D6                     l65:	
  5327                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5328                           
  5329  09D6  0020               	movlb	0	; select bank0
  5330  09D7  1991               	btfsc	17,3	;volatile
  5331  09D8  29DB               	goto	l4639
  5332                           
  5333                           ;SPI.c: 34: _nop();
  5334  09D9  0000               	nop
  5335  09DA  29D6               	goto	l65
  5336  09DB                     l4639:	
  5337                           
  5338                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5339  09DB  0024               	movlb	4	; select bank4
  5340  09DC  0811               	movf	17,w	;volatile
  5341  09DD  00F2               	movwf	??_SPIRead
  5342  09DE  0875               	movf	SPIRead@i,w
  5343  09DF  0774               	addwf	SPIRead@dstPtr,w
  5344  09E0  00F3               	movwf	??_SPIRead+1
  5345  09E1  0873               	movf	??_SPIRead+1,w
  5346  09E2  0086               	movwf	6
  5347  09E3  0187               	clrf	7
  5348  09E4  0872               	movf	??_SPIRead,w
  5349  09E5  0081               	movwf	1
  5350  09E6  3001               	movlw	1
  5351  09E7  00F2               	movwf	??_SPIRead
  5352  09E8  0872               	movf	??_SPIRead,w
  5353  09E9  07F5               	addwf	SPIRead@i,f
  5354  09EA  29CD               	goto	l4643
  5355  09EB                     __end_of_SPIRead:	
  5356                           
  5357                           	psect	text25
  5358  0859                     __ptext25:	
  5359 ;; *************** function _CC1Strobe *****************
  5360 ;; Defined at:
  5361 ;;		line 94 in file "CC1.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  e_stb           1    wreg     enum E1829
  5364 ;; Auto vars:     Size  Location     Type
  5365 ;;  e_stb           1    8[COMMON] enum E1829
  5366 ;;  cc1Stb          1    9[COMMON] unsigned char 
  5367 ;;  i               1    0        unsigned char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;Total ram usage:        3 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    3
  5384 ;; This function calls:
  5385 ;;		_SPIWrite
  5386 ;; This function is called by:
  5387 ;;		_CC1Init
  5388 ;;		_CC1Sleep
  5389 ;;		_RTXInit
  5390 ;;		_RTXSndPkt
  5391 ;;		_RTXReadPkt
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _CC1Strobe
  5397  0859                     _CC1Strobe:	
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5401                           ;CC1Strobe@e_stb stored from wreg
  5402  0859  00F8               	movwf	CC1Strobe@e_stb
  5403                           
  5404                           ;CC1.c: 95: unsigned char cc1Stb,i;
  5405                           ;CC1.c: 98: LATAbits.LATA5=0;
  5406  085A  0022               	movlb	2	; select bank2
  5407  085B  128C               	bcf	12,5	;volatile
  5408                           
  5409                           ;CC1.c: 101: cc1Stb=((e_stb&0b00111111)|0b10000000);
  5410  085C  0878               	movf	CC1Strobe@e_stb,w
  5411  085D  393F               	andlw	63
  5412  085E  3880               	iorlw	128
  5413  085F  00F7               	movwf	??_CC1Strobe
  5414  0860  0877               	movf	??_CC1Strobe,w
  5415  0861  00F9               	movwf	CC1Strobe@cc1Stb
  5416                           
  5417                           ;CC1.c: 102: SPIWrite((&(cc1Stb)),1);
  5418  0862  3079               	movlw	low CC1Strobe@cc1Stb
  5419  0863  00F1               	movwf	?_SPIWrite
  5420  0864  3000               	movlw	high CC1Strobe@cc1Stb
  5421  0865  00F2               	movwf	?_SPIWrite+1
  5422  0866  01F3               	clrf	?_SPIWrite+2
  5423  0867  0AF3               	incf	?_SPIWrite+2,f
  5424  0868  3189  2154         	fcall	_SPIWrite
  5425                           
  5426                           ;CC1.c: 105: LATAbits.LATA5=1;
  5427  086A  0022               	movlb	2	; select bank2
  5428  086B  168C               	bsf	12,5	;volatile
  5429  086C  0008               	return
  5430  086D                     __end_of_CC1Strobe:	
  5431                           
  5432                           	psect	text26
  5433  0954                     __ptext26:	
  5434 ;; *************** function _SPIWrite *****************
  5435 ;; Defined at:
  5436 ;;		line 40 in file "SPI.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  5439 ;;		 -> pktTx(9), cc1PaTable(8), cc1InitVal(47), CC1Write@cc1Addr(1), 
  5440 ;;		 -> CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  5441 ;;  len             1    3[COMMON] unsigned char 
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  i               1    6[COMMON] unsigned char 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;		None               void
  5446 ;; Registers used:
  5447 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5453 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;Total ram usage:        6 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    2
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_CC1Strobe
  5464 ;;		_CC1Read
  5465 ;;		_CC1Write
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           
  5470                           ;psect for function _SPIWrite
  5471  0954                     _SPIWrite:	
  5472                           
  5473                           ;SPI.c: 41: unsigned char i;
  5474                           ;SPI.c: 43: for(i=0;i<len;i++)
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  5478  0954  01F6               	clrf	SPIWrite@i
  5479  0955                     l4651:	
  5480  0955  0873               	movf	SPIWrite@len,w
  5481  0956  0276               	subwf	SPIWrite@i,w
  5482  0957  1803               	btfsc	3,0
  5483  0958  0008               	return
  5484                           
  5485                           ;SPI.c: 44: {
  5486                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  5487  0959  0020               	movlb	0	; select bank0
  5488  095A  1191               	bcf	17,3	;volatile
  5489                           
  5490                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  5491  095B  0876               	movf	SPIWrite@i,w
  5492  095C  00F4               	movwf	??_SPIWrite
  5493  095D  01F5               	clrf	??_SPIWrite+1
  5494  095E  0874               	movf	??_SPIWrite,w
  5495  095F  0771               	addwf	SPIWrite@srcPtr,w
  5496  0960  0086               	movwf	6
  5497  0961  0875               	movf	??_SPIWrite+1,w
  5498  0962  3D72               	addwfc	SPIWrite@srcPtr+1,w
  5499  0963  0087               	movwf	7
  5500  0964  0801               	movf	1,w
  5501  0965  0024               	movlb	4	; select bank4
  5502  0966  0091               	movwf	17	;volatile
  5503  0967                     l74:	
  5504                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  5505                           
  5506  0967  0020               	movlb	0	; select bank0
  5507  0968  1991               	btfsc	17,3	;volatile
  5508  0969  296C               	goto	l4649
  5509                           
  5510                           ;SPI.c: 48: _nop();
  5511  096A  0000               	nop
  5512  096B  2967               	goto	l74
  5513  096C                     l4649:	
  5514  096C  3001               	movlw	1
  5515  096D  00F4               	movwf	??_SPIWrite
  5516  096E  0874               	movf	??_SPIWrite,w
  5517  096F  07F6               	addwf	SPIWrite@i,f
  5518  0970  2955               	goto	l4651
  5519  0971                     __end_of_SPIWrite:	
  5520                           
  5521                           	psect	text27
  5522  09AD                     __ptext27:	
  5523 ;; *************** function _LEDFastFlash *****************
  5524 ;; Defined at:
  5525 ;;		line 39 in file "LED.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  num             1    wreg     unsigned char 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  num             1    8[COMMON] unsigned char 
  5530 ;;  i               1    9[COMMON] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;		None               void
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0, pclath, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;Total ram usage:        3 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    3
  5547 ;; This function calls:
  5548 ;;		_DLYDelay_ms
  5549 ;; This function is called by:
  5550 ;;		_RTXSendData
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           
  5555                           ;psect for function _LEDFastFlash
  5556  09AD                     _LEDFastFlash:	
  5557                           
  5558                           ;incstack = 0
  5559                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  5560                           ;LEDFastFlash@num stored from wreg
  5561  09AD  00F8               	movwf	LEDFastFlash@num
  5562                           
  5563                           ;LED.c: 40: unsigned char i;
  5564                           ;LED.c: 42: for(i=0;i<num;i++)
  5565  09AE  01F9               	clrf	LEDFastFlash@i
  5566  09AF                     l4863:	
  5567  09AF  0878               	movf	LEDFastFlash@num,w
  5568  09B0  0279               	subwf	LEDFastFlash@i,w
  5569  09B1  1803               	btfsc	3,0
  5570  09B2  0008               	return
  5571  09B3  0064               	clrwdt	;# 
  5572                           
  5573                           ;LED.c: 45: LATCbits.LATC7=0;
  5574  09B4  0022               	movlb	2	; select bank2
  5575  09B5  138E               	bcf	14,7	;volatile
  5576                           
  5577                           ;LED.c: 46: DLYDelay_ms(5);
  5578  09B6  3005               	movlw	5
  5579  09B7  00F1               	movwf	?_DLYDelay_ms
  5580  09B8  3000               	movlw	0
  5581  09B9  00F2               	movwf	?_DLYDelay_ms+1
  5582  09BA  3188  20B4  3189   	fcall	_DLYDelay_ms
  5583                           
  5584                           ;LED.c: 47: LATCbits.LATC7=1;
  5585  09BD  0022               	movlb	2	; select bank2
  5586  09BE  178E               	bsf	14,7	;volatile
  5587                           
  5588                           ;LED.c: 48: DLYDelay_ms(5);
  5589  09BF  3005               	movlw	5
  5590  09C0  00F1               	movwf	?_DLYDelay_ms
  5591  09C1  3000               	movlw	0
  5592  09C2  00F2               	movwf	?_DLYDelay_ms+1
  5593  09C3  3188  20B4  3189   	fcall	_DLYDelay_ms
  5594  09C6  3001               	movlw	1
  5595  09C7  00F7               	movwf	??_LEDFastFlash
  5596  09C8  0877               	movf	??_LEDFastFlash,w
  5597  09C9  07F9               	addwf	LEDFastFlash@i,f
  5598  09CA  29AF               	goto	l4863
  5599  09CB                     __end_of_LEDFastFlash:	
  5600                           
  5601                           	psect	text28
  5602  0107                     __ptext28:	
  5603 ;; *************** function _ADCConv *****************
  5604 ;; Defined at:
  5605 ;;		line 58 in file "ADC.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;		None
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  tempV           3   16[BANK1 ] float 
  5610 ;;  Rntc            3    0[BANK1 ] float 
  5611 ;;  sumTemp         2   14[BANK1 ] unsigned short 
  5612 ;;  sumBatt         2   12[BANK1 ] unsigned short 
  5613 ;;  cntSum          1   19[BANK1 ] unsigned char 
  5614 ;; Return value:  Size  Location     Type
  5615 ;;		None               void
  5616 ;; Registers used:
  5617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5618 ;; Tracked objects:
  5619 ;;		On entry : 0/0
  5620 ;;		On exit  : 0/0
  5621 ;;		Unchanged: 0/0
  5622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;      Totals:         0       2      20       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;Total ram usage:       22 bytes
  5628 ;; Hardware stack levels used:    1
  5629 ;; Hardware stack levels required when called:    6
  5630 ;; This function calls:
  5631 ;;		_exp
  5632 ;;		_log
  5633 ;;		___awtoft
  5634 ;;		___ftadd
  5635 ;;		___ftdiv
  5636 ;;		___ftmul
  5637 ;;		___ftneg
  5638 ;;		___lwdiv
  5639 ;; This function is called by:
  5640 ;;		_RTXStartSendData
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           
  5645                           ;psect for function _ADCConv
  5646  0107                     _ADCConv:	
  5647                           
  5648                           ;ADC.c: 64: {
  5649                           ;ADC.c: 66: switch(adc_ch)
  5650                           
  5651                           ;incstack = 0
  5652                           ; Regs used in _ADCConv: [allreg]
  5653                           ;ADC.c: 59: float Rntc,tempV;
  5654                           ;ADC.c: 60: unsigned short sumBatt,sumTemp;
  5655                           ;ADC.c: 61: unsigned char cntSum;
  5656                           ;ADC.c: 63: while(1)
  5657  0107  2B00               	goto	l4711
  5658  0108                     l124:	
  5659                           ;ADC.c: 67: {
  5660                           ;ADC.c: 68: case ADC_CH_OFF:
  5661                           
  5662                           
  5663                           ;ADC.c: 70: LATBbits.LATB5=1;
  5664  0108  0022               	movlb	2	; select bank2
  5665  0109  168D               	bsf	13,5	;volatile
  5666                           
  5667                           ;ADC.c: 72: Rinf=22000*exp(-3600/(25+273.15));
  5668  010A  3031               	movlw	49
  5669  010B  0020               	movlb	0	; select bank0
  5670  010C  00D4               	movwf	?_exp
  5671  010D  3041               	movlw	65
  5672  010E  00D5               	movwf	?_exp+1
  5673  010F  30C1               	movlw	193
  5674  0110  00D6               	movwf	?_exp+2
  5675  0111  3183  2319  3181   	fcall	_exp
  5676  0114  0020               	movlb	0	; select bank0
  5677  0115  0854               	movf	?_exp,w
  5678  0116  0021               	movlb	1	; select bank1
  5679  0117  00D2               	movwf	_ADCConv$1522^(0+128)
  5680  0118  0020               	movlb	0	; select bank0
  5681  0119  0855               	movf	?_exp+1,w
  5682  011A  0021               	movlb	1	; select bank1
  5683  011B  00D3               	movwf	(_ADCConv$1522+1)^(0+128)
  5684  011C  0020               	movlb	0	; select bank0
  5685  011D  0856               	movf	?_exp+2,w
  5686  011E  0021               	movlb	1	; select bank1
  5687  011F  00D4               	movwf	(_ADCConv$1522+2)^(0+128)
  5688                           
  5689                           ;ADC.c: 72: Rinf=22000*exp(-3600/(25+273.15));
  5690  0120  30E0               	movlw	224
  5691  0121  0020               	movlb	0	; select bank0
  5692  0122  00A3               	movwf	?___ftmul
  5693  0123  30AB               	movlw	171
  5694  0124  00A4               	movwf	?___ftmul+1
  5695  0125  3046               	movlw	70
  5696  0126  00A5               	movwf	?___ftmul+2
  5697  0127  0021               	movlb	1	; select bank1
  5698  0128  0852               	movf	_ADCConv$1522^(0+128),w
  5699  0129  0020               	movlb	0	; select bank0
  5700  012A  00A6               	movwf	?___ftmul+3
  5701  012B  0021               	movlb	1	; select bank1
  5702  012C  0853               	movf	(_ADCConv$1522+1)^(0+128),w
  5703  012D  0020               	movlb	0	; select bank0
  5704  012E  00A7               	movwf	?___ftmul+4
  5705  012F  0021               	movlb	1	; select bank1
  5706  0130  0854               	movf	(_ADCConv$1522+2)^(0+128),w
  5707  0131  0020               	movlb	0	; select bank0
  5708  0132  00A8               	movwf	?___ftmul+5
  5709  0133  3185  25F1  3181   	fcall	___ftmul
  5710  0136  0020               	movlb	0	; select bank0
  5711  0137  0823               	movf	?___ftmul,w
  5712  0138  0021               	movlb	1	; select bank1
  5713  0139  00A0               	movwf	_Rinf^(0+128)
  5714  013A  0020               	movlb	0	; select bank0
  5715  013B  0824               	movf	?___ftmul+1,w
  5716  013C  0021               	movlb	1	; select bank1
  5717  013D  00A1               	movwf	(_Rinf+1)^(0+128)
  5718  013E  0020               	movlb	0	; select bank0
  5719  013F  0825               	movf	?___ftmul+2,w
  5720  0140  0021               	movlb	1	; select bank1
  5721  0141  00A2               	movwf	(_Rinf+2)^(0+128)
  5722                           
  5723                           ;ADC.c: 74: sumBatt=0;
  5724  0142  01DB               	clrf	ADCConv@sumBatt^(0+128)
  5725  0143  01DC               	clrf	(ADCConv@sumBatt+1)^(0+128)
  5726                           
  5727                           ;ADC.c: 76: cntSum=0;
  5728  0144  01E2               	clrf	ADCConv@cntSum^(0+128)
  5729                           
  5730                           ;ADC.c: 78: ADCON1=0b00000011;
  5731  0145  3003               	movlw	3
  5732  0146  009E               	movwf	30	;volatile
  5733                           
  5734                           ;ADC.c: 79: ADCON0=0b00101101;
  5735  0147  302D               	movlw	45
  5736  0148  009D               	movwf	29	;volatile
  5737                           
  5738                           ;ADC.c: 80: adc_ch=ADC_CH_BATT;
  5739  0149  01AD               	clrf	_adc_ch^(0+128)
  5740  014A  0AAD               	incf	_adc_ch^(0+128),f
  5741                           
  5742                           ;ADC.c: 81: break;
  5743  014B  2B0C               	goto	l4713
  5744  014C                     l4667:	
  5745                           ;ADC.c: 82: case ADC_CH_BATT:
  5746                           
  5747                           
  5748                           ;ADC.c: 84: if(cntSum==10)
  5749  014C  0862               	movf	ADCConv@cntSum^(0+128),w
  5750  014D  3A0A               	xorlw	10
  5751  014E  1D03               	skipz
  5752  014F  29D3               	goto	l4685
  5753                           
  5754                           ;ADC.c: 85: {
  5755                           ;ADC.c: 87: batt=sumBatt/10;
  5756  0150  300A               	movlw	10
  5757  0151  00F1               	movwf	?___lwdiv
  5758  0152  3000               	movlw	0
  5759  0153  00F2               	movwf	?___lwdiv+1
  5760  0154  085C               	movf	(ADCConv@sumBatt+1)^(0+128),w
  5761  0155  01F4               	clrf	?___lwdiv+3
  5762  0156  07F4               	addwf	?___lwdiv+3,f
  5763  0157  085B               	movf	ADCConv@sumBatt^(0+128),w
  5764  0158  01F3               	clrf	?___lwdiv+2
  5765  0159  07F3               	addwf	?___lwdiv+2,f
  5766  015A  3180  20C9  3181   	fcall	___lwdiv
  5767  015D  0871               	movf	?___lwdiv,w
  5768  015E  0020               	movlb	0	; select bank0
  5769  015F  00E1               	movwf	??_ADCConv
  5770  0160  0861               	movf	??_ADCConv,w
  5771  0161  0021               	movlb	1	; select bank1
  5772  0162  00AE               	movwf	_batt^(0+128)
  5773                           
  5774                           ;ADC.c: 93: battV=batt*4*1.024/1024*11;
  5775  0163  3000               	movlw	0
  5776  0164  0020               	movlb	0	; select bank0
  5777  0165  00C0               	movwf	?___ftdiv
  5778  0166  3080               	movlw	128
  5779  0167  00C1               	movwf	?___ftdiv+1
  5780  0168  3044               	movlw	68
  5781  0169  00C2               	movwf	?___ftdiv+2
  5782  016A  3012               	movlw	18
  5783  016B  00A3               	movwf	?___ftmul
  5784  016C  3083               	movlw	131
  5785  016D  00A4               	movwf	?___ftmul+1
  5786  016E  303F               	movlw	63
  5787  016F  00A5               	movwf	?___ftmul+2
  5788  0170  0021               	movlb	1	; select bank1
  5789  0171  082E               	movf	_batt^(0+128),w
  5790  0172  0020               	movlb	0	; select bank0
  5791  0173  00E1               	movwf	??_ADCConv
  5792  0174  01E2               	clrf	??_ADCConv+1
  5793  0175  35E1               	lslf	??_ADCConv,f
  5794  0176  0DE2               	rlf	??_ADCConv+1,f
  5795  0177  35E1               	lslf	??_ADCConv,f
  5796  0178  0DE2               	rlf	??_ADCConv+1,f
  5797  0179  0861               	movf	??_ADCConv,w
  5798  017A  00F9               	movwf	?___awtoft
  5799  017B  0862               	movf	??_ADCConv+1,w
  5800  017C  00FA               	movwf	?___awtoft+1
  5801  017D  3189  21EB  3181   	fcall	___awtoft
  5802  0180  0879               	movf	?___awtoft,w
  5803  0181  0020               	movlb	0	; select bank0
  5804  0182  00A6               	movwf	?___ftmul+3
  5805  0183  087A               	movf	?___awtoft+1,w
  5806  0184  00A7               	movwf	?___ftmul+4
  5807  0185  087B               	movf	?___awtoft+2,w
  5808  0186  00A8               	movwf	?___ftmul+5
  5809  0187  3185  25F1  3181   	fcall	___ftmul
  5810  018A  0020               	movlb	0	; select bank0
  5811  018B  0823               	movf	?___ftmul,w
  5812  018C  00C3               	movwf	?___ftdiv+3
  5813  018D  0824               	movf	?___ftmul+1,w
  5814  018E  00C4               	movwf	?___ftdiv+4
  5815  018F  0825               	movf	?___ftmul+2,w
  5816  0190  00C5               	movwf	?___ftdiv+5
  5817  0191  3187  2757  3181   	fcall	___ftdiv
  5818  0194  0020               	movlb	0	; select bank0
  5819  0195  0840               	movf	?___ftdiv,w
  5820  0196  0021               	movlb	1	; select bank1
  5821  0197  00D5               	movwf	_ADCConv$1523^(0+128)
  5822  0198  0020               	movlb	0	; select bank0
  5823  0199  0841               	movf	?___ftdiv+1,w
  5824  019A  0021               	movlb	1	; select bank1
  5825  019B  00D6               	movwf	(_ADCConv$1523+1)^(0+128)
  5826  019C  0020               	movlb	0	; select bank0
  5827  019D  0842               	movf	?___ftdiv+2,w
  5828  019E  0021               	movlb	1	; select bank1
  5829  019F  00D7               	movwf	(_ADCConv$1523+2)^(0+128)
  5830                           
  5831                           ;ADC.c: 93: battV=batt*4*1.024/1024*11;
  5832  01A0  3000               	movlw	0
  5833  01A1  0020               	movlb	0	; select bank0
  5834  01A2  00A3               	movwf	?___ftmul
  5835  01A3  3030               	movlw	48
  5836  01A4  00A4               	movwf	?___ftmul+1
  5837  01A5  3041               	movlw	65
  5838  01A6  00A5               	movwf	?___ftmul+2
  5839  01A7  0021               	movlb	1	; select bank1
  5840  01A8  0855               	movf	_ADCConv$1523^(0+128),w
  5841  01A9  0020               	movlb	0	; select bank0
  5842  01AA  00A6               	movwf	?___ftmul+3
  5843  01AB  0021               	movlb	1	; select bank1
  5844  01AC  0856               	movf	(_ADCConv$1523+1)^(0+128),w
  5845  01AD  0020               	movlb	0	; select bank0
  5846  01AE  00A7               	movwf	?___ftmul+4
  5847  01AF  0021               	movlb	1	; select bank1
  5848  01B0  0857               	movf	(_ADCConv$1523+2)^(0+128),w
  5849  01B1  0020               	movlb	0	; select bank0
  5850  01B2  00A8               	movwf	?___ftmul+5
  5851  01B3  3185  25F1  3181   	fcall	___ftmul
  5852  01B6  0020               	movlb	0	; select bank0
  5853  01B7  0823               	movf	?___ftmul,w
  5854  01B8  0021               	movlb	1	; select bank1
  5855  01B9  00A3               	movwf	_battV^(0+128)
  5856  01BA  0020               	movlb	0	; select bank0
  5857  01BB  0824               	movf	?___ftmul+1,w
  5858  01BC  0021               	movlb	1	; select bank1
  5859  01BD  00A4               	movwf	(_battV+1)^(0+128)
  5860  01BE  0020               	movlb	0	; select bank0
  5861  01BF  0825               	movf	?___ftmul+2,w
  5862  01C0  0021               	movlb	1	; select bank1
  5863  01C1  00A5               	movwf	(_battV+2)^(0+128)
  5864                           
  5865                           ;ADC.c: 95: sumTemp=0;
  5866  01C2  01DD               	clrf	ADCConv@sumTemp^(0+128)
  5867  01C3  01DE               	clrf	(ADCConv@sumTemp+1)^(0+128)
  5868                           
  5869                           ;ADC.c: 97: cntSum=0;
  5870  01C4  01E2               	clrf	ADCConv@cntSum^(0+128)
  5871                           
  5872                           ;ADC.c: 99: LATBbits.LATB5=0;
  5873  01C5  0022               	movlb	2	; select bank2
  5874  01C6  128D               	bcf	13,5	;volatile
  5875                           
  5876                           ;ADC.c: 100: LATCbits.LATC6=1;
  5877  01C7  170E               	bsf	14,6	;volatile
  5878                           
  5879                           ;ADC.c: 102: ADCON1=0b00000000;
  5880  01C8  0021               	movlb	1	; select bank1
  5881  01C9  019E               	clrf	30	;volatile
  5882                           
  5883                           ;ADC.c: 103: ADCON0=0b00100101;
  5884  01CA  3025               	movlw	37
  5885  01CB  009D               	movwf	29	;volatile
  5886                           
  5887                           ;ADC.c: 104: adc_ch=ADC_CH_TEMP;
  5888  01CC  3002               	movlw	2
  5889  01CD  0020               	movlb	0	; select bank0
  5890  01CE  00E1               	movwf	??_ADCConv
  5891  01CF  0861               	movf	??_ADCConv,w
  5892  01D0  0021               	movlb	1	; select bank1
  5893  01D1  00AD               	movwf	_adc_ch^(0+128)
  5894                           
  5895                           ;ADC.c: 105: }
  5896  01D2  2B0C               	goto	l4713
  5897  01D3                     l4685:	
  5898                           
  5899                           ;ADC.c: 106: else
  5900                           ;ADC.c: 107: {
  5901                           ;ADC.c: 109: sumBatt+=ADRESH;
  5902  01D3  081C               	movf	28,w	;volatile
  5903  01D4  0020               	movlb	0	; select bank0
  5904  01D5  00E1               	movwf	??_ADCConv
  5905  01D6  01E2               	clrf	??_ADCConv+1
  5906  01D7  0861               	movf	??_ADCConv,w
  5907  01D8  0021               	movlb	1	; select bank1
  5908  01D9  07DB               	addwf	ADCConv@sumBatt^(0+128),f
  5909  01DA  0020               	movlb	0	; select bank0
  5910  01DB  0862               	movf	??_ADCConv+1,w
  5911  01DC  0021               	movlb	1	; select bank1
  5912  01DD  3DDC               	addwfc	(ADCConv@sumBatt+1)^(0+128),f
  5913  01DE  2AF9               	goto	l4707
  5914  01DF                     l4689:	
  5915                           ;ADC.c: 114: case ADC_CH_TEMP:
  5916                           
  5917                           ;ADC.c: 112: }
  5918                           ;ADC.c: 113: break;
  5919                           
  5920                           ;ADC.c: 111: cntSum++;
  5921                           
  5922                           
  5923                           ;ADC.c: 116: if(cntSum==10)
  5924  01DF  0862               	movf	ADCConv@cntSum^(0+128),w
  5925  01E0  3A0A               	xorlw	10
  5926  01E1  1D03               	skipz
  5927  01E2  2AEE               	goto	l4705
  5928                           
  5929                           ;ADC.c: 117: {
  5930                           ;ADC.c: 119: temp=sumTemp/10;
  5931  01E3  300A               	movlw	10
  5932  01E4  00F1               	movwf	?___lwdiv
  5933  01E5  3000               	movlw	0
  5934  01E6  00F2               	movwf	?___lwdiv+1
  5935  01E7  085E               	movf	(ADCConv@sumTemp+1)^(0+128),w
  5936  01E8  01F4               	clrf	?___lwdiv+3
  5937  01E9  07F4               	addwf	?___lwdiv+3,f
  5938  01EA  085D               	movf	ADCConv@sumTemp^(0+128),w
  5939  01EB  01F3               	clrf	?___lwdiv+2
  5940  01EC  07F3               	addwf	?___lwdiv+2,f
  5941  01ED  3180  20C9  3181   	fcall	___lwdiv
  5942  01F0  0871               	movf	?___lwdiv,w
  5943  01F1  0020               	movlb	0	; select bank0
  5944  01F2  00E1               	movwf	??_ADCConv
  5945  01F3  0861               	movf	??_ADCConv,w
  5946  01F4  0021               	movlb	1	; select bank1
  5947  01F5  00B3               	movwf	_temp^(0+128)
  5948                           
  5949                           ;ADC.c: 124: tempV=temp*4*(battV/1024);
  5950  01F6  0823               	movf	_battV^(0+128),w
  5951  01F7  0020               	movlb	0	; select bank0
  5952  01F8  00C3               	movwf	?___ftdiv+3
  5953  01F9  0021               	movlb	1	; select bank1
  5954  01FA  0824               	movf	(_battV+1)^(0+128),w
  5955  01FB  0020               	movlb	0	; select bank0
  5956  01FC  00C4               	movwf	?___ftdiv+4
  5957  01FD  0021               	movlb	1	; select bank1
  5958  01FE  0825               	movf	(_battV+2)^(0+128),w
  5959  01FF  0020               	movlb	0	; select bank0
  5960  0200  00C5               	movwf	?___ftdiv+5
  5961  0201  3000               	movlw	0
  5962  0202  00C0               	movwf	?___ftdiv
  5963  0203  3080               	movlw	128
  5964  0204  00C1               	movwf	?___ftdiv+1
  5965  0205  3044               	movlw	68
  5966  0206  00C2               	movwf	?___ftdiv+2
  5967  0207  3187  2757  3181   	fcall	___ftdiv
  5968  020A  0020               	movlb	0	; select bank0
  5969  020B  0840               	movf	?___ftdiv,w
  5970  020C  00A3               	movwf	?___ftmul
  5971  020D  0841               	movf	?___ftdiv+1,w
  5972  020E  00A4               	movwf	?___ftmul+1
  5973  020F  0842               	movf	?___ftdiv+2,w
  5974  0210  00A5               	movwf	?___ftmul+2
  5975  0211  0021               	movlb	1	; select bank1
  5976  0212  0833               	movf	_temp^(0+128),w
  5977  0213  0020               	movlb	0	; select bank0
  5978  0214  00E1               	movwf	??_ADCConv
  5979  0215  01E2               	clrf	??_ADCConv+1
  5980  0216  35E1               	lslf	??_ADCConv,f
  5981  0217  0DE2               	rlf	??_ADCConv+1,f
  5982  0218  35E1               	lslf	??_ADCConv,f
  5983  0219  0DE2               	rlf	??_ADCConv+1,f
  5984  021A  0861               	movf	??_ADCConv,w
  5985  021B  00F9               	movwf	?___awtoft
  5986  021C  0862               	movf	??_ADCConv+1,w
  5987  021D  00FA               	movwf	?___awtoft+1
  5988  021E  3189  21EB  3181   	fcall	___awtoft
  5989  0221  0879               	movf	?___awtoft,w
  5990  0222  0020               	movlb	0	; select bank0
  5991  0223  00A6               	movwf	?___ftmul+3
  5992  0224  087A               	movf	?___awtoft+1,w
  5993  0225  00A7               	movwf	?___ftmul+4
  5994  0226  087B               	movf	?___awtoft+2,w
  5995  0227  00A8               	movwf	?___ftmul+5
  5996  0228  3185  25F1  3181   	fcall	___ftmul
  5997  022B  0020               	movlb	0	; select bank0
  5998  022C  0823               	movf	?___ftmul,w
  5999  022D  0021               	movlb	1	; select bank1
  6000  022E  00DF               	movwf	ADCConv@tempV^(0+128)
  6001  022F  0020               	movlb	0	; select bank0
  6002  0230  0824               	movf	?___ftmul+1,w
  6003  0231  0021               	movlb	1	; select bank1
  6004  0232  00E0               	movwf	(ADCConv@tempV+1)^(0+128)
  6005  0233  0020               	movlb	0	; select bank0
  6006  0234  0825               	movf	?___ftmul+2,w
  6007  0235  0021               	movlb	1	; select bank1
  6008  0236  00E1               	movwf	(ADCConv@tempV+2)^(0+128)
  6009                           
  6010                           ;ADC.c: 126: Rntc=10000*tempV/(battV-tempV);
  6011  0237  0823               	movf	_battV^(0+128),w
  6012  0238  0020               	movlb	0	; select bank0
  6013  0239  00B3               	movwf	?___ftadd
  6014  023A  0021               	movlb	1	; select bank1
  6015  023B  0824               	movf	(_battV+1)^(0+128),w
  6016  023C  0020               	movlb	0	; select bank0
  6017  023D  00B4               	movwf	?___ftadd+1
  6018  023E  0021               	movlb	1	; select bank1
  6019  023F  0825               	movf	(_battV+2)^(0+128),w
  6020  0240  0020               	movlb	0	; select bank0
  6021  0241  00B5               	movwf	?___ftadd+2
  6022  0242  0021               	movlb	1	; select bank1
  6023  0243  085F               	movf	ADCConv@tempV^(0+128),w
  6024  0244  00F1               	movwf	?___ftneg
  6025  0245  0860               	movf	(ADCConv@tempV+1)^(0+128),w
  6026  0246  00F2               	movwf	?___ftneg+1
  6027  0247  0861               	movf	(ADCConv@tempV+2)^(0+128),w
  6028  0248  00F3               	movwf	?___ftneg+2
  6029  0249  3197  2728  3181   	fcall	___ftneg
  6030  024C  0871               	movf	?___ftneg,w
  6031  024D  0020               	movlb	0	; select bank0
  6032  024E  00B6               	movwf	?___ftadd+3
  6033  024F  0872               	movf	?___ftneg+1,w
  6034  0250  00B7               	movwf	?___ftadd+4
  6035  0251  0873               	movf	?___ftneg+2,w
  6036  0252  00B8               	movwf	?___ftadd+5
  6037  0253  3184  243D  3181   	fcall	___ftadd
  6038  0256  0020               	movlb	0	; select bank0
  6039  0257  0833               	movf	?___ftadd,w
  6040  0258  00C0               	movwf	?___ftdiv
  6041  0259  0834               	movf	?___ftadd+1,w
  6042  025A  00C1               	movwf	?___ftdiv+1
  6043  025B  0835               	movf	?___ftadd+2,w
  6044  025C  00C2               	movwf	?___ftdiv+2
  6045  025D  3040               	movlw	64
  6046  025E  00A3               	movwf	?___ftmul
  6047  025F  301C               	movlw	28
  6048  0260  00A4               	movwf	?___ftmul+1
  6049  0261  3046               	movlw	70
  6050  0262  00A5               	movwf	?___ftmul+2
  6051  0263  0021               	movlb	1	; select bank1
  6052  0264  085F               	movf	ADCConv@tempV^(0+128),w
  6053  0265  0020               	movlb	0	; select bank0
  6054  0266  00A6               	movwf	?___ftmul+3
  6055  0267  0021               	movlb	1	; select bank1
  6056  0268  0860               	movf	(ADCConv@tempV+1)^(0+128),w
  6057  0269  0020               	movlb	0	; select bank0
  6058  026A  00A7               	movwf	?___ftmul+4
  6059  026B  0021               	movlb	1	; select bank1
  6060  026C  0861               	movf	(ADCConv@tempV+2)^(0+128),w
  6061  026D  0020               	movlb	0	; select bank0
  6062  026E  00A8               	movwf	?___ftmul+5
  6063  026F  3185  25F1  3181   	fcall	___ftmul
  6064  0272  0020               	movlb	0	; select bank0
  6065  0273  0823               	movf	?___ftmul,w
  6066  0274  00C3               	movwf	?___ftdiv+3
  6067  0275  0824               	movf	?___ftmul+1,w
  6068  0276  00C4               	movwf	?___ftdiv+4
  6069  0277  0825               	movf	?___ftmul+2,w
  6070  0278  00C5               	movwf	?___ftdiv+5
  6071  0279  3187  2757  3181   	fcall	___ftdiv
  6072  027C  0020               	movlb	0	; select bank0
  6073  027D  0840               	movf	?___ftdiv,w
  6074  027E  0021               	movlb	1	; select bank1
  6075  027F  00CF               	movwf	ADCConv@Rntc^(0+128)
  6076  0280  0020               	movlb	0	; select bank0
  6077  0281  0841               	movf	?___ftdiv+1,w
  6078  0282  0021               	movlb	1	; select bank1
  6079  0283  00D0               	movwf	(ADCConv@Rntc+1)^(0+128)
  6080  0284  0020               	movlb	0	; select bank0
  6081  0285  0842               	movf	?___ftdiv+2,w
  6082  0286  0021               	movlb	1	; select bank1
  6083  0287  00D1               	movwf	(ADCConv@Rntc+2)^(0+128)
  6084                           
  6085                           ;ADC.c: 128: tempC=3600/log(Rntc/Rinf)-273.15;
  6086  0288  0820               	movf	_Rinf^(0+128),w
  6087  0289  0020               	movlb	0	; select bank0
  6088  028A  00C0               	movwf	?___ftdiv
  6089  028B  0021               	movlb	1	; select bank1
  6090  028C  0821               	movf	(_Rinf+1)^(0+128),w
  6091  028D  0020               	movlb	0	; select bank0
  6092  028E  00C1               	movwf	?___ftdiv+1
  6093  028F  0021               	movlb	1	; select bank1
  6094  0290  0822               	movf	(_Rinf+2)^(0+128),w
  6095  0291  0020               	movlb	0	; select bank0
  6096  0292  00C2               	movwf	?___ftdiv+2
  6097  0293  0021               	movlb	1	; select bank1
  6098  0294  084F               	movf	ADCConv@Rntc^(0+128),w
  6099  0295  0020               	movlb	0	; select bank0
  6100  0296  00C3               	movwf	?___ftdiv+3
  6101  0297  0021               	movlb	1	; select bank1
  6102  0298  0850               	movf	(ADCConv@Rntc+1)^(0+128),w
  6103  0299  0020               	movlb	0	; select bank0
  6104  029A  00C4               	movwf	?___ftdiv+4
  6105  029B  0021               	movlb	1	; select bank1
  6106  029C  0851               	movf	(ADCConv@Rntc+2)^(0+128),w
  6107  029D  0020               	movlb	0	; select bank0
  6108  029E  00C5               	movwf	?___ftdiv+5
  6109  029F  3187  2757  3181   	fcall	___ftdiv
  6110  02A2  0020               	movlb	0	; select bank0
  6111  02A3  0840               	movf	?___ftdiv,w
  6112  02A4  00D0               	movwf	?_log
  6113  02A5  0841               	movf	?___ftdiv+1,w
  6114  02A6  00D1               	movwf	?_log+1
  6115  02A7  0842               	movf	?___ftdiv+2,w
  6116  02A8  00D2               	movwf	?_log+2
  6117  02A9  3186  26A5  3181   	fcall	_log
  6118  02AC  0020               	movlb	0	; select bank0
  6119  02AD  0850               	movf	?_log,w
  6120  02AE  0021               	movlb	1	; select bank1
  6121  02AF  00D8               	movwf	_ADCConv$1524^(0+128)
  6122  02B0  0020               	movlb	0	; select bank0
  6123  02B1  0851               	movf	?_log+1,w
  6124  02B2  0021               	movlb	1	; select bank1
  6125  02B3  00D9               	movwf	(_ADCConv$1524+1)^(0+128)
  6126  02B4  0020               	movlb	0	; select bank0
  6127  02B5  0852               	movf	?_log+2,w
  6128  02B6  0021               	movlb	1	; select bank1
  6129  02B7  00DA               	movwf	(_ADCConv$1524+2)^(0+128)
  6130                           
  6131                           ;ADC.c: 128: tempC=3600/log(Rntc/Rinf)-273.15;
  6132  02B8  3093               	movlw	147
  6133  02B9  0020               	movlb	0	; select bank0
  6134  02BA  00B3               	movwf	?___ftadd
  6135  02BB  3088               	movlw	136
  6136  02BC  00B4               	movwf	?___ftadd+1
  6137  02BD  30C3               	movlw	195
  6138  02BE  00B5               	movwf	?___ftadd+2
  6139  02BF  0021               	movlb	1	; select bank1
  6140  02C0  0858               	movf	_ADCConv$1524^(0+128),w
  6141  02C1  0020               	movlb	0	; select bank0
  6142  02C2  00C0               	movwf	?___ftdiv
  6143  02C3  0021               	movlb	1	; select bank1
  6144  02C4  0859               	movf	(_ADCConv$1524+1)^(0+128),w
  6145  02C5  0020               	movlb	0	; select bank0
  6146  02C6  00C1               	movwf	?___ftdiv+1
  6147  02C7  0021               	movlb	1	; select bank1
  6148  02C8  085A               	movf	(_ADCConv$1524+2)^(0+128),w
  6149  02C9  0020               	movlb	0	; select bank0
  6150  02CA  00C2               	movwf	?___ftdiv+2
  6151  02CB  3000               	movlw	0
  6152  02CC  00C3               	movwf	?___ftdiv+3
  6153  02CD  3061               	movlw	97
  6154  02CE  00C4               	movwf	?___ftdiv+4
  6155  02CF  3045               	movlw	69
  6156  02D0  00C5               	movwf	?___ftdiv+5
  6157  02D1  3187  2757  3181   	fcall	___ftdiv
  6158  02D4  0020               	movlb	0	; select bank0
  6159  02D5  0840               	movf	?___ftdiv,w
  6160  02D6  00B6               	movwf	?___ftadd+3
  6161  02D7  0841               	movf	?___ftdiv+1,w
  6162  02D8  00B7               	movwf	?___ftadd+4
  6163  02D9  0842               	movf	?___ftdiv+2,w
  6164  02DA  00B8               	movwf	?___ftadd+5
  6165  02DB  3184  243D         	fcall	___ftadd
  6166  02DD  0020               	movlb	0	; select bank0
  6167  02DE  0833               	movf	?___ftadd,w
  6168  02DF  0021               	movlb	1	; select bank1
  6169  02E0  00A6               	movwf	_tempC^(0+128)
  6170  02E1  0020               	movlb	0	; select bank0
  6171  02E2  0834               	movf	?___ftadd+1,w
  6172  02E3  0021               	movlb	1	; select bank1
  6173  02E4  00A7               	movwf	(_tempC+1)^(0+128)
  6174  02E5  0020               	movlb	0	; select bank0
  6175  02E6  0835               	movf	?___ftadd+2,w
  6176  02E7  0021               	movlb	1	; select bank1
  6177  02E8  00A8               	movwf	(_tempC+2)^(0+128)
  6178                           
  6179                           ;ADC.c: 130: LATCbits.LATC6=0;
  6180  02E9  0022               	movlb	2	; select bank2
  6181  02EA  130E               	bcf	14,6	;volatile
  6182                           
  6183                           ;ADC.c: 132: adc_ch=ADC_CH_OFF;
  6184  02EB  0021               	movlb	1	; select bank1
  6185  02EC  01AD               	clrf	_adc_ch^(0+128)
  6186                           
  6187                           ;ADC.c: 133: return;
  6188  02ED  0008               	return
  6189  02EE                     l4705:	
  6190                           ;ADC.c: 134: }
  6191                           
  6192                           
  6193                           ;ADC.c: 135: else
  6194                           ;ADC.c: 136: {
  6195                           ;ADC.c: 138: sumTemp+=ADRESH;
  6196  02EE  081C               	movf	28,w	;volatile
  6197  02EF  0020               	movlb	0	; select bank0
  6198  02F0  00E1               	movwf	??_ADCConv
  6199  02F1  01E2               	clrf	??_ADCConv+1
  6200  02F2  0861               	movf	??_ADCConv,w
  6201  02F3  0021               	movlb	1	; select bank1
  6202  02F4  07DD               	addwf	ADCConv@sumTemp^(0+128),f
  6203  02F5  0020               	movlb	0	; select bank0
  6204  02F6  0862               	movf	??_ADCConv+1,w
  6205  02F7  0021               	movlb	1	; select bank1
  6206  02F8  3DDE               	addwfc	(ADCConv@sumTemp+1)^(0+128),f
  6207  02F9                     l4707:	
  6208                           
  6209                           ;ADC.c: 140: cntSum++;
  6210  02F9  3001               	movlw	1
  6211  02FA  0020               	movlb	0	; select bank0
  6212  02FB  00E1               	movwf	??_ADCConv
  6213  02FC  0861               	movf	??_ADCConv,w
  6214  02FD  0021               	movlb	1	; select bank1
  6215  02FE  07E2               	addwf	ADCConv@cntSum^(0+128),f
  6216                           
  6217                           ;ADC.c: 143: }
  6218                           
  6219                           ;ADC.c: 141: }
  6220                           ;ADC.c: 142: break;
  6221  02FF  2B0C               	goto	l4713
  6222  0300                     l4711:	
  6223  0300  0021               	movlb	1	; select bank1
  6224  0301  082D               	movf	_adc_ch^(0+128),w
  6225                           
  6226                           ; Switch size 1, requested type "space"
  6227                           ; Number of cases is 3, Range of values is 0 to 2
  6228                           ; switch strategies available:
  6229                           ; Name         Instructions Cycles
  6230                           ; simple_byte           10     6 (average)
  6231                           ; direct_byte           12     6 (fixed)
  6232                           ; jumptable            260     6 (fixed)
  6233                           ;	Chosen strategy is simple_byte
  6234  0302  3A00               	xorlw	0	; case 0
  6235  0303  1903               	skipnz
  6236  0304  2908               	goto	l124
  6237  0305  3A01               	xorlw	1	; case 1
  6238  0306  1903               	skipnz
  6239  0307  294C               	goto	l4667
  6240  0308  3A03               	xorlw	3	; case 2
  6241  0309  1903               	skipnz
  6242  030A  29DF               	goto	l4689
  6243  030B  2B0C               	goto	l4713
  6244  030C                     l4713:	
  6245                           
  6246                           ;ADC.c: 145: _delay((unsigned long)((10)*(8000000/4000000.0)));
  6247  030C  3006               	movlw	6
  6248  030D  0020               	movlb	0	; select bank0
  6249  030E  00E1               	movwf	??_ADCConv
  6250  030F                     u4427:	
  6251  030F  0BE1               	decfsz	??_ADCConv,f
  6252  0310  2B0F               	goto	u4427
  6253  0311  0000               	nop
  6254                           
  6255                           ;ADC.c: 147: ADCON0bits.GO=1;
  6256  0312  0021               	movlb	1	; select bank1
  6257  0313  149D               	bsf	29,1	;volatile
  6258  0314                     l133:	
  6259                           ;ADC.c: 149: while(ADCON0bits.GO)
  6260                           
  6261  0314  0021               	movlb	1	; select bank1
  6262  0315  1C9D               	btfss	29,1	;volatile
  6263  0316  2B00               	goto	l4711
  6264  0317  0064               	clrwdt	;# 
  6265  0318  2B14               	goto	l133
  6266  0319                     __end_of_ADCConv:	
  6267                           
  6268                           	psect	text29
  6269  00C9                     __ptext29:	
  6270 ;; *************** function ___lwdiv *****************
  6271 ;; Defined at:
  6272 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  divisor         2    1[COMMON] unsigned int 
  6275 ;;  dividend        2    3[COMMON] unsigned int 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  quotient        2    6[COMMON] unsigned int 
  6278 ;;  counter         1    8[COMMON] unsigned char 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  2    1[COMMON] unsigned int 
  6281 ;; Registers used:
  6282 ;;		wreg, status,2, status,0
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6288 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;Total ram usage:        8 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    2
  6295 ;; This function calls:
  6296 ;;		Nothing
  6297 ;; This function is called by:
  6298 ;;		_ADCConv
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function ___lwdiv
  6304  00C9                     ___lwdiv:	
  6305                           
  6306                           ;incstack = 0
  6307                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6308  00C9  01F6               	clrf	___lwdiv@quotient
  6309  00CA  01F7               	clrf	___lwdiv@quotient+1
  6310  00CB  0872               	movf	___lwdiv@divisor+1,w
  6311  00CC  0471               	iorwf	___lwdiv@divisor,w
  6312  00CD  1903               	skipnz
  6313  00CE  28F8               	goto	l4537
  6314  00CF  01F8               	clrf	___lwdiv@counter
  6315  00D0  0AF8               	incf	___lwdiv@counter,f
  6316  00D1                     l4525:	
  6317  00D1  1BF2               	btfsc	___lwdiv@divisor+1,7
  6318  00D2  28DD               	goto	l4527
  6319  00D3  3001               	movlw	1
  6320  00D4                     u3245:	
  6321  00D4  35F1               	lslf	___lwdiv@divisor,f
  6322  00D5  0DF2               	rlf	___lwdiv@divisor+1,f
  6323  00D6  0B89               	decfsz	9,f
  6324  00D7  28D4               	goto	u3245
  6325  00D8  3001               	movlw	1
  6326  00D9  00F5               	movwf	??___lwdiv
  6327  00DA  0875               	movf	??___lwdiv,w
  6328  00DB  07F8               	addwf	___lwdiv@counter,f
  6329  00DC  28D1               	goto	l4525
  6330  00DD                     l4527:	
  6331  00DD  3001               	movlw	1
  6332  00DE                     u3265:	
  6333  00DE  35F6               	lslf	___lwdiv@quotient,f
  6334  00DF  0DF7               	rlf	___lwdiv@quotient+1,f
  6335  00E0  0B89               	decfsz	9,f
  6336  00E1  28DE               	goto	u3265
  6337  00E2  0872               	movf	___lwdiv@divisor+1,w
  6338  00E3  0274               	subwf	___lwdiv@dividend+1,w
  6339  00E4  1D03               	skipz
  6340  00E5  28E8               	goto	u3275
  6341  00E6  0871               	movf	___lwdiv@divisor,w
  6342  00E7  0273               	subwf	___lwdiv@dividend,w
  6343  00E8                     u3275:	
  6344  00E8  1C03               	skipc
  6345  00E9  28EF               	goto	l4533
  6346  00EA  0871               	movf	___lwdiv@divisor,w
  6347  00EB  02F3               	subwf	___lwdiv@dividend,f
  6348  00EC  0872               	movf	___lwdiv@divisor+1,w
  6349  00ED  3BF4               	subwfb	___lwdiv@dividend+1,f
  6350  00EE  1476               	bsf	___lwdiv@quotient,0
  6351  00EF                     l4533:	
  6352  00EF  3001               	movlw	1
  6353  00F0                     u3285:	
  6354  00F0  36F2               	lsrf	___lwdiv@divisor+1,f
  6355  00F1  0CF1               	rrf	___lwdiv@divisor,f
  6356  00F2  0B89               	decfsz	9,f
  6357  00F3  28F0               	goto	u3285
  6358  00F4  3001               	movlw	1
  6359  00F5  02F8               	subwf	___lwdiv@counter,f
  6360  00F6  1D03               	btfss	3,2
  6361  00F7  28DD               	goto	l4527
  6362  00F8                     l4537:	
  6363  00F8  0877               	movf	___lwdiv@quotient+1,w
  6364  00F9  01F2               	clrf	?___lwdiv+1
  6365  00FA  07F2               	addwf	?___lwdiv+1,f
  6366  00FB  0876               	movf	___lwdiv@quotient,w
  6367  00FC  01F1               	clrf	?___lwdiv
  6368  00FD  07F1               	addwf	?___lwdiv,f
  6369  00FE  0008               	return
  6370  00FF                     __end_of___lwdiv:	
  6371                           
  6372                           	psect	text30
  6373  06A5                     __ptext30:	
  6374 ;; *************** function _log *****************
  6375 ;; Defined at:
  6376 ;;		line 6 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\log.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  x               3   48[BANK0 ] unsigned int 
  6379 ;; Auto vars:     Size  Location     Type
  6380 ;;  exponent        2   52[BANK0 ] int 
  6381 ;; Return value:  Size  Location     Type
  6382 ;;                  3   48[BANK0 ] int 
  6383 ;; Registers used:
  6384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6385 ;; Tracked objects:
  6386 ;;		On entry : 0/0
  6387 ;;		On exit  : 0/0
  6388 ;;		Unchanged: 0/0
  6389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6390 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;Total ram usage:        6 bytes
  6395 ;; Hardware stack levels used:    1
  6396 ;; Hardware stack levels required when called:    5
  6397 ;; This function calls:
  6398 ;;		___awtoft
  6399 ;;		_eval_poly
  6400 ;;		_frexp
  6401 ;;		___ftadd
  6402 ;;		___ftge
  6403 ;;		___ftmul
  6404 ;; This function is called by:
  6405 ;;		_ADCConv
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _log
  6411  06A5                     _log:	
  6412                           
  6413                           ;incstack = 0
  6414                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6415  06A5  0020               	movlb	0	; select bank0
  6416  06A6  0850               	movf	log@x,w
  6417  06A7  00F1               	movwf	?___ftge
  6418  06A8  0851               	movf	log@x+1,w
  6419  06A9  00F2               	movwf	?___ftge+1
  6420  06AA  0852               	movf	log@x+2,w
  6421  06AB  00F3               	movwf	?___ftge+2
  6422  06AC  3000               	movlw	0
  6423  06AD  00F4               	movwf	?___ftge+3
  6424  06AE  3000               	movlw	0
  6425  06AF  00F5               	movwf	?___ftge+4
  6426  06B0  3000               	movlw	0
  6427  06B1  00F6               	movwf	?___ftge+5
  6428  06B2  318B  23D3  3186   	fcall	___ftge
  6429  06B5  1803               	btfsc	3,0
  6430  06B6  2EC4               	goto	l4777
  6431  06B7  3021               	movlw	33
  6432  06B8  0021               	movlb	1	; select bank1
  6433  06B9  00A9               	movwf	_errno^(0+128)
  6434  06BA  3000               	movlw	0
  6435  06BB  00AA               	movwf	(_errno^(0+128)+1)
  6436  06BC  3000               	movlw	0
  6437  06BD  0020               	movlb	0	; select bank0
  6438  06BE  00D0               	movwf	?_log
  6439  06BF  3000               	movlw	0
  6440  06C0  00D1               	movwf	?_log+1
  6441  06C1  3000               	movlw	0
  6442  06C2  00D2               	movwf	?_log+2
  6443  06C3  0008               	return
  6444  06C4                     l4777:	
  6445  06C4  0020               	movlb	0	; select bank0
  6446  06C5  0852               	movf	log@x+2,w
  6447  06C6  0451               	iorwf	log@x+1,w
  6448  06C7  0450               	iorwf	log@x,w
  6449  06C8  1D03               	skipz
  6450  06C9  2ED7               	goto	l4783
  6451  06CA  3022               	movlw	34
  6452  06CB  0021               	movlb	1	; select bank1
  6453  06CC  00A9               	movwf	_errno^(0+128)
  6454  06CD  3000               	movlw	0
  6455  06CE  00AA               	movwf	(_errno^(0+128)+1)
  6456  06CF  3000               	movlw	0
  6457  06D0  0020               	movlb	0	; select bank0
  6458  06D1  00D0               	movwf	?_log
  6459  06D2  3000               	movlw	0
  6460  06D3  00D1               	movwf	?_log+1
  6461  06D4  3000               	movlw	0
  6462  06D5  00D2               	movwf	?_log+2
  6463  06D6  0008               	return
  6464  06D7                     l4783:	
  6465  06D7  3000               	movlw	0
  6466  06D8  00B3               	movwf	?___ftadd
  6467  06D9  3080               	movlw	128
  6468  06DA  00B4               	movwf	?___ftadd+1
  6469  06DB  30BF               	movlw	191
  6470  06DC  00B5               	movwf	?___ftadd+2
  6471  06DD  3000               	movlw	0
  6472  06DE  00A3               	movwf	?___ftmul
  6473  06DF  3000               	movlw	0
  6474  06E0  00A4               	movwf	?___ftmul+1
  6475  06E1  3040               	movlw	64
  6476  06E2  00A5               	movwf	?___ftmul+2
  6477  06E3  3054               	movlw	log@exponent& (0+255)
  6478  06E4  00D3               	movwf	??_log
  6479  06E5  0853               	movf	??_log,w
  6480  06E6  00F4               	movwf	?_frexp+3
  6481  06E7  0850               	movf	log@x,w
  6482  06E8  00F1               	movwf	?_frexp
  6483  06E9  0851               	movf	log@x+1,w
  6484  06EA  00F2               	movwf	?_frexp+1
  6485  06EB  0852               	movf	log@x+2,w
  6486  06EC  00F3               	movwf	?_frexp+2
  6487  06ED  318B  2398  3186   	fcall	_frexp
  6488  06F0  0871               	movf	?_frexp,w
  6489  06F1  0020               	movlb	0	; select bank0
  6490  06F2  00A6               	movwf	?___ftmul+3
  6491  06F3  0872               	movf	?_frexp+1,w
  6492  06F4  00A7               	movwf	?___ftmul+4
  6493  06F5  0873               	movf	?_frexp+2,w
  6494  06F6  00A8               	movwf	?___ftmul+5
  6495  06F7  3185  25F1  3186   	fcall	___ftmul
  6496  06FA  0020               	movlb	0	; select bank0
  6497  06FB  0823               	movf	?___ftmul,w
  6498  06FC  00B6               	movwf	?___ftadd+3
  6499  06FD  0824               	movf	?___ftmul+1,w
  6500  06FE  00B7               	movwf	?___ftadd+4
  6501  06FF  0825               	movf	?___ftmul+2,w
  6502  0700  00B8               	movwf	?___ftadd+5
  6503  0701  3184  243D  3186   	fcall	___ftadd
  6504  0704  0020               	movlb	0	; select bank0
  6505  0705  0833               	movf	?___ftadd,w
  6506  0706  00D0               	movwf	log@x
  6507  0707  0834               	movf	?___ftadd+1,w
  6508  0708  00D1               	movwf	log@x+1
  6509  0709  0835               	movf	?___ftadd+2,w
  6510  070A  00D2               	movwf	log@x+2
  6511  070B  30FF               	movlw	255
  6512  070C  07D4               	addwf	log@exponent,f
  6513  070D  30FF               	movlw	255
  6514  070E  3DD5               	addwfc	log@exponent+1,f
  6515  070F  0850               	movf	log@x,w
  6516  0710  00C0               	movwf	?_eval_poly
  6517  0711  0851               	movf	log@x+1,w
  6518  0712  00C1               	movwf	?_eval_poly+1
  6519  0713  0852               	movf	log@x+2,w
  6520  0714  00C2               	movwf	?_eval_poly+2
  6521  0715  301F               	movlw	(log@coeff| (0+32768))& (0+255)
  6522  0716  00D3               	movwf	??_log
  6523  0717  0853               	movf	??_log,w
  6524  0718  00C3               	movwf	?_eval_poly+3
  6525  0719  3008               	movlw	8
  6526  071A  00C4               	movwf	?_eval_poly+4
  6527  071B  3000               	movlw	0
  6528  071C  00C5               	movwf	?_eval_poly+5
  6529  071D  318D  254B  3186   	fcall	_eval_poly
  6530  0720  0020               	movlb	0	; select bank0
  6531  0721  0840               	movf	?_eval_poly,w
  6532  0722  00D0               	movwf	log@x
  6533  0723  0841               	movf	?_eval_poly+1,w
  6534  0724  00D1               	movwf	log@x+1
  6535  0725  0842               	movf	?_eval_poly+2,w
  6536  0726  00D2               	movwf	log@x+2
  6537  0727  0850               	movf	log@x,w
  6538  0728  00B3               	movwf	?___ftadd
  6539  0729  0851               	movf	log@x+1,w
  6540  072A  00B4               	movwf	?___ftadd+1
  6541  072B  0852               	movf	log@x+2,w
  6542  072C  00B5               	movwf	?___ftadd+2
  6543  072D  3072               	movlw	114
  6544  072E  00A3               	movwf	?___ftmul
  6545  072F  3031               	movlw	49
  6546  0730  00A4               	movwf	?___ftmul+1
  6547  0731  303F               	movlw	63
  6548  0732  00A5               	movwf	?___ftmul+2
  6549  0733  0855               	movf	log@exponent+1,w
  6550  0734  01FA               	clrf	?___awtoft+1
  6551  0735  07FA               	addwf	?___awtoft+1,f
  6552  0736  0854               	movf	log@exponent,w
  6553  0737  01F9               	clrf	?___awtoft
  6554  0738  07F9               	addwf	?___awtoft,f
  6555  0739  3189  21EB  3186   	fcall	___awtoft
  6556  073C  0879               	movf	?___awtoft,w
  6557  073D  0020               	movlb	0	; select bank0
  6558  073E  00A6               	movwf	?___ftmul+3
  6559  073F  087A               	movf	?___awtoft+1,w
  6560  0740  00A7               	movwf	?___ftmul+4
  6561  0741  087B               	movf	?___awtoft+2,w
  6562  0742  00A8               	movwf	?___ftmul+5
  6563  0743  3185  25F1  3186   	fcall	___ftmul
  6564  0746  0020               	movlb	0	; select bank0
  6565  0747  0823               	movf	?___ftmul,w
  6566  0748  00B6               	movwf	?___ftadd+3
  6567  0749  0824               	movf	?___ftmul+1,w
  6568  074A  00B7               	movwf	?___ftadd+4
  6569  074B  0825               	movf	?___ftmul+2,w
  6570  074C  00B8               	movwf	?___ftadd+5
  6571  074D  3184  243D         	fcall	___ftadd
  6572  074F  0020               	movlb	0	; select bank0
  6573  0750  0833               	movf	?___ftadd,w
  6574  0751  00D0               	movwf	?_log
  6575  0752  0834               	movf	?___ftadd+1,w
  6576  0753  00D1               	movwf	?_log+1
  6577  0754  0835               	movf	?___ftadd+2,w
  6578  0755  00D2               	movwf	?_log+2
  6579  0756  0008               	return
  6580  0757                     __end_of_log:	
  6581                           
  6582                           	psect	text31
  6583  0319                     __ptext31:	
  6584 ;; *************** function _exp *****************
  6585 ;; Defined at:
  6586 ;;		line 13 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\exp.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  x               3   52[BANK0 ] int 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  exponent        2   62[BANK0 ] int 
  6591 ;;  sign            1   64[BANK0 ] unsigned char 
  6592 ;; Return value:  Size  Location     Type
  6593 ;;                  3   52[BANK0 ] unsigned char 
  6594 ;; Registers used:
  6595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6596 ;; Tracked objects:
  6597 ;;		On entry : 0/0
  6598 ;;		On exit  : 0/0
  6599 ;;		Unchanged: 0/0
  6600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6601 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;Total ram usage:       13 bytes
  6606 ;; Hardware stack levels used:    1
  6607 ;; Hardware stack levels required when called:    5
  6608 ;; This function calls:
  6609 ;;		___awtoft
  6610 ;;		_floor
  6611 ;;		_eval_poly
  6612 ;;		_ldexp
  6613 ;;		___ftdiv
  6614 ;;		___ftge
  6615 ;;		___ftmul
  6616 ;;		___ftneg
  6617 ;;		___ftsub
  6618 ;;		___fttol
  6619 ;; This function is called by:
  6620 ;;		_ADCConv
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           
  6625                           ;psect for function _exp
  6626  0319                     _exp:	
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _exp: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  6630  0319  0020               	movlb	0	; select bank0
  6631  031A  0856               	movf	exp@x+2,w
  6632  031B  0455               	iorwf	exp@x+1,w
  6633  031C  0454               	iorwf	exp@x,w
  6634  031D  1D03               	skipz
  6635  031E  2B26               	goto	l4723
  6636  031F  3000               	movlw	0
  6637  0320  00D4               	movwf	?_exp
  6638  0321  3080               	movlw	128
  6639  0322  00D5               	movwf	?_exp+1
  6640  0323  303F               	movlw	63
  6641  0324  00D6               	movwf	?_exp+2
  6642  0325  0008               	return
  6643  0326                     l4723:	
  6644  0326  3072               	movlw	114
  6645  0327  00F1               	movwf	?___ftge
  6646  0328  3031               	movlw	49
  6647  0329  00F2               	movwf	?___ftge+1
  6648  032A  3044               	movlw	68
  6649  032B  00F3               	movwf	?___ftge+2
  6650  032C  0854               	movf	exp@x,w
  6651  032D  00F4               	movwf	?___ftge+3
  6652  032E  0855               	movf	exp@x+1,w
  6653  032F  00F5               	movwf	?___ftge+4
  6654  0330  0856               	movf	exp@x+2,w
  6655  0331  00F6               	movwf	?___ftge+5
  6656  0332  318B  23D3  3183   	fcall	___ftge
  6657  0335  1803               	btfsc	3,0
  6658  0336  2B44               	goto	l4733
  6659  0337  3022               	movlw	34
  6660  0338  0021               	movlb	1	; select bank1
  6661  0339  00A9               	movwf	_errno^(0+128)
  6662  033A  3000               	movlw	0
  6663  033B  00AA               	movwf	(_errno^(0+128)+1)
  6664  033C  30FF               	movlw	255
  6665  033D  0020               	movlb	0	; select bank0
  6666  033E  00D4               	movwf	?_exp
  6667  033F  307F               	movlw	127
  6668  0340  00D5               	movwf	?_exp+1
  6669  0341  307F               	movlw	127
  6670  0342  00D6               	movwf	?_exp+2
  6671  0343  0008               	return
  6672  0344                     l4733:	
  6673  0344  0020               	movlb	0	; select bank0
  6674  0345  0854               	movf	exp@x,w
  6675  0346  00F1               	movwf	?___ftge
  6676  0347  0855               	movf	exp@x+1,w
  6677  0348  00F2               	movwf	?___ftge+1
  6678  0349  0856               	movf	exp@x+2,w
  6679  034A  00F3               	movwf	?___ftge+2
  6680  034B  3049               	movlw	73
  6681  034C  00F4               	movwf	?___ftge+3
  6682  034D  303A               	movlw	58
  6683  034E  00F5               	movwf	?___ftge+4
  6684  034F  30C4               	movlw	196
  6685  0350  00F6               	movwf	?___ftge+5
  6686  0351  318B  23D3  3183   	fcall	___ftge
  6687  0354  1803               	btfsc	3,0
  6688  0355  2B63               	goto	l4739
  6689  0356  3022               	movlw	34
  6690  0357  0021               	movlb	1	; select bank1
  6691  0358  00A9               	movwf	_errno^(0+128)
  6692  0359  3000               	movlw	0
  6693  035A  00AA               	movwf	(_errno^(0+128)+1)
  6694  035B  3000               	movlw	0
  6695  035C  0020               	movlb	0	; select bank0
  6696  035D  00D4               	movwf	?_exp
  6697  035E  3000               	movlw	0
  6698  035F  00D5               	movwf	?_exp+1
  6699  0360  3000               	movlw	0
  6700  0361  00D6               	movwf	?_exp+2
  6701  0362  0008               	return
  6702  0363                     l4739:	
  6703  0363  0020               	movlb	0	; select bank0
  6704  0364  0854               	movf	exp@x,w
  6705  0365  00F1               	movwf	?___ftge
  6706  0366  0855               	movf	exp@x+1,w
  6707  0367  00F2               	movwf	?___ftge+1
  6708  0368  0856               	movf	exp@x+2,w
  6709  0369  00F3               	movwf	?___ftge+2
  6710  036A  3000               	movlw	0
  6711  036B  00F4               	movwf	?___ftge+3
  6712  036C  3000               	movlw	0
  6713  036D  00F5               	movwf	?___ftge+4
  6714  036E  3000               	movlw	0
  6715  036F  00F6               	movwf	?___ftge+5
  6716  0370  318B  23D3  3183   	fcall	___ftge
  6717  0373  3000               	movlw	0
  6718  0374  1C03               	btfss	3,0
  6719  0375  3001               	movlw	1
  6720  0376  0020               	movlb	0	; select bank0
  6721  0377  00D7               	movwf	??_exp
  6722  0378  0857               	movf	??_exp,w
  6723  0379  00E0               	movwf	exp@sign
  6724  037A  0860               	movf	exp@sign,w
  6725  037B  1903               	btfsc	3,2
  6726  037C  2B8D               	goto	l4745
  6727  037D  0854               	movf	exp@x,w
  6728  037E  00F1               	movwf	?___ftneg
  6729  037F  0855               	movf	exp@x+1,w
  6730  0380  00F2               	movwf	?___ftneg+1
  6731  0381  0856               	movf	exp@x+2,w
  6732  0382  00F3               	movwf	?___ftneg+2
  6733  0383  3197  2728  3183   	fcall	___ftneg
  6734  0386  0871               	movf	?___ftneg,w
  6735  0387  0020               	movlb	0	; select bank0
  6736  0388  00D4               	movwf	exp@x
  6737  0389  0872               	movf	?___ftneg+1,w
  6738  038A  00D5               	movwf	exp@x+1
  6739  038B  0873               	movf	?___ftneg+2,w
  6740  038C  00D6               	movwf	exp@x+2
  6741  038D                     l4745:	
  6742  038D  30AA               	movlw	170
  6743  038E  00A3               	movwf	?___ftmul
  6744  038F  30B8               	movlw	184
  6745  0390  00A4               	movwf	?___ftmul+1
  6746  0391  303F               	movlw	63
  6747  0392  00A5               	movwf	?___ftmul+2
  6748  0393  0854               	movf	exp@x,w
  6749  0394  00A6               	movwf	?___ftmul+3
  6750  0395  0855               	movf	exp@x+1,w
  6751  0396  00A7               	movwf	?___ftmul+4
  6752  0397  0856               	movf	exp@x+2,w
  6753  0398  00A8               	movwf	?___ftmul+5
  6754  0399  3185  25F1  3183   	fcall	___ftmul
  6755  039C  0020               	movlb	0	; select bank0
  6756  039D  0823               	movf	?___ftmul,w
  6757  039E  00D4               	movwf	exp@x
  6758  039F  0824               	movf	?___ftmul+1,w
  6759  03A0  00D5               	movwf	exp@x+1
  6760  03A1  0825               	movf	?___ftmul+2,w
  6761  03A2  00D6               	movwf	exp@x+2
  6762  03A3  0854               	movf	exp@x,w
  6763  03A4  00C0               	movwf	?_floor
  6764  03A5  0855               	movf	exp@x+1,w
  6765  03A6  00C1               	movwf	?_floor+1
  6766  03A7  0856               	movf	exp@x+2,w
  6767  03A8  00C2               	movwf	?_floor+2
  6768  03A9  318E  26F4  3183   	fcall	_floor
  6769  03AC  0020               	movlb	0	; select bank0
  6770  03AD  0840               	movf	?_floor,w
  6771  03AE  00D8               	movwf	_exp$1525
  6772  03AF  0841               	movf	?_floor+1,w
  6773  03B0  00D9               	movwf	_exp$1525+1
  6774  03B1  0842               	movf	?_floor+2,w
  6775  03B2  00DA               	movwf	_exp$1525+2
  6776  03B3  0858               	movf	_exp$1525,w
  6777  03B4  00F1               	movwf	?___fttol
  6778  03B5  0859               	movf	_exp$1525+1,w
  6779  03B6  00F2               	movwf	?___fttol+1
  6780  03B7  085A               	movf	_exp$1525+2,w
  6781  03B8  00F3               	movwf	?___fttol+2
  6782  03B9  318F  2779  3183   	fcall	___fttol
  6783  03BC  0872               	movf	?___fttol+1,w
  6784  03BD  0020               	movlb	0	; select bank0
  6785  03BE  01DF               	clrf	exp@exponent+1
  6786  03BF  07DF               	addwf	exp@exponent+1,f
  6787  03C0  0871               	movf	?___fttol,w
  6788  03C1  01DE               	clrf	exp@exponent
  6789  03C2  07DE               	addwf	exp@exponent,f
  6790  03C3  085F               	movf	exp@exponent+1,w
  6791  03C4  01FA               	clrf	?___awtoft+1
  6792  03C5  07FA               	addwf	?___awtoft+1,f
  6793  03C6  085E               	movf	exp@exponent,w
  6794  03C7  01F9               	clrf	?___awtoft
  6795  03C8  07F9               	addwf	?___awtoft,f
  6796  03C9  3189  21EB  3183   	fcall	___awtoft
  6797  03CC  0879               	movf	?___awtoft,w
  6798  03CD  0020               	movlb	0	; select bank0
  6799  03CE  00C0               	movwf	?___ftsub
  6800  03CF  087A               	movf	?___awtoft+1,w
  6801  03D0  00C1               	movwf	?___ftsub+1
  6802  03D1  087B               	movf	?___awtoft+2,w
  6803  03D2  00C2               	movwf	?___ftsub+2
  6804  03D3  0854               	movf	exp@x,w
  6805  03D4  00C3               	movwf	?___ftsub+3
  6806  03D5  0855               	movf	exp@x+1,w
  6807  03D6  00C4               	movwf	?___ftsub+4
  6808  03D7  0856               	movf	exp@x+2,w
  6809  03D8  00C5               	movwf	?___ftsub+5
  6810  03D9  3188  20CD  3183   	fcall	___ftsub
  6811  03DC  0020               	movlb	0	; select bank0
  6812  03DD  0840               	movf	?___ftsub,w
  6813  03DE  00D4               	movwf	exp@x
  6814  03DF  0841               	movf	?___ftsub+1,w
  6815  03E0  00D5               	movwf	exp@x+1
  6816  03E1  0842               	movf	?___ftsub+2,w
  6817  03E2  00D6               	movwf	exp@x+2
  6818  03E3  0854               	movf	exp@x,w
  6819  03E4  00C0               	movwf	?_eval_poly
  6820  03E5  0855               	movf	exp@x+1,w
  6821  03E6  00C1               	movwf	?_eval_poly+1
  6822  03E7  0856               	movf	exp@x+2,w
  6823  03E8  00C2               	movwf	?_eval_poly+2
  6824  03E9  3001               	movlw	(exp@coeff| (0+32768))& (0+255)
  6825  03EA  00D7               	movwf	??_exp
  6826  03EB  0857               	movf	??_exp,w
  6827  03EC  00C3               	movwf	?_eval_poly+3
  6828  03ED  3009               	movlw	9
  6829  03EE  00C4               	movwf	?_eval_poly+4
  6830  03EF  3000               	movlw	0
  6831  03F0  00C5               	movwf	?_eval_poly+5
  6832  03F1  318D  254B  3183   	fcall	_eval_poly
  6833  03F4  0020               	movlb	0	; select bank0
  6834  03F5  0840               	movf	?_eval_poly,w
  6835  03F6  00CA               	movwf	?_ldexp
  6836  03F7  0841               	movf	?_eval_poly+1,w
  6837  03F8  00CB               	movwf	?_ldexp+1
  6838  03F9  0842               	movf	?_eval_poly+2,w
  6839  03FA  00CC               	movwf	?_ldexp+2
  6840  03FB  085F               	movf	exp@exponent+1,w
  6841  03FC  01CE               	clrf	?_ldexp+4
  6842  03FD  07CE               	addwf	?_ldexp+4,f
  6843  03FE  085E               	movf	exp@exponent,w
  6844  03FF  01CD               	clrf	?_ldexp+3
  6845  0400  07CD               	addwf	?_ldexp+3,f
  6846  0401  3180  2041  3183   	fcall	_ldexp
  6847  0404  0020               	movlb	0	; select bank0
  6848  0405  084A               	movf	?_ldexp,w
  6849  0406  00D4               	movwf	exp@x
  6850  0407  084B               	movf	?_ldexp+1,w
  6851  0408  00D5               	movwf	exp@x+1
  6852  0409  084C               	movf	?_ldexp+2,w
  6853  040A  00D6               	movwf	exp@x+2
  6854  040B  0860               	movf	exp@sign,w
  6855  040C  1903               	btfsc	3,2
  6856  040D  0008               	return
  6857  040E  30FF               	movlw	255
  6858  040F  00DB               	movwf	_exp$1090
  6859  0410  307F               	movlw	127
  6860  0411  00DC               	movwf	_exp$1090+1
  6861  0412  307F               	movlw	127
  6862  0413  00DD               	movwf	_exp$1090+2
  6863  0414  0856               	movf	exp@x+2,w
  6864  0415  065D               	xorwf	_exp$1090+2,w
  6865  0416  1D03               	skipz
  6866  0417  2C1E               	goto	u3445
  6867  0418  0855               	movf	exp@x+1,w
  6868  0419  065C               	xorwf	_exp$1090+1,w
  6869  041A  1D03               	skipz
  6870  041B  2C1E               	goto	u3445
  6871  041C  0854               	movf	exp@x,w
  6872  041D  065B               	xorwf	_exp$1090,w
  6873  041E                     u3445:	
  6874  041E  1D03               	skipz
  6875  041F  2C27               	goto	l4767
  6876  0420  3000               	movlw	0
  6877  0421  00D4               	movwf	?_exp
  6878  0422  3000               	movlw	0
  6879  0423  00D5               	movwf	?_exp+1
  6880  0424  3000               	movlw	0
  6881  0425  00D6               	movwf	?_exp+2
  6882  0426  0008               	return
  6883  0427                     l4767:	
  6884  0427  0854               	movf	exp@x,w
  6885  0428  00C0               	movwf	?___ftdiv
  6886  0429  0855               	movf	exp@x+1,w
  6887  042A  00C1               	movwf	?___ftdiv+1
  6888  042B  0856               	movf	exp@x+2,w
  6889  042C  00C2               	movwf	?___ftdiv+2
  6890  042D  3000               	movlw	0
  6891  042E  00C3               	movwf	?___ftdiv+3
  6892  042F  3080               	movlw	128
  6893  0430  00C4               	movwf	?___ftdiv+4
  6894  0431  303F               	movlw	63
  6895  0432  00C5               	movwf	?___ftdiv+5
  6896  0433  3187  2757         	fcall	___ftdiv
  6897  0435  0020               	movlb	0	; select bank0
  6898  0436  0840               	movf	?___ftdiv,w
  6899  0437  00D4               	movwf	?_exp
  6900  0438  0841               	movf	?___ftdiv+1,w
  6901  0439  00D5               	movwf	?_exp+1
  6902  043A  0842               	movf	?___ftdiv+2,w
  6903  043B  00D6               	movwf	?_exp+2
  6904  043C  0008               	return
  6905  043D                     __end_of_exp:	
  6906                           
  6907                           	psect	text32
  6908  08CD                     __ptext32:	
  6909 ;; *************** function ___ftsub *****************
  6910 ;; Defined at:
  6911 ;;		line 17 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftsub.c"
  6912 ;; Parameters:    Size  Location     Type
  6913 ;;  f2              3   32[BANK0 ] float 
  6914 ;;  f1              3   35[BANK0 ] float 
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;		None
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  3   32[BANK0 ] float 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0, pclath, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6926 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6929 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;Total ram usage:        6 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    4
  6933 ;; This function calls:
  6934 ;;		___ftadd
  6935 ;; This function is called by:
  6936 ;;		_exp
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           
  6941                           ;psect for function ___ftsub
  6942  08CD                     ___ftsub:	
  6943                           
  6944                           ;incstack = 0
  6945                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6946  08CD  3080               	movlw	128
  6947  08CE  0020               	movlb	0	; select bank0
  6948  08CF  06C2               	xorwf	___ftsub@f2+2,f
  6949  08D0  0843               	movf	___ftsub@f1,w
  6950  08D1  00B3               	movwf	?___ftadd
  6951  08D2  0844               	movf	___ftsub@f1+1,w
  6952  08D3  00B4               	movwf	?___ftadd+1
  6953  08D4  0845               	movf	___ftsub@f1+2,w
  6954  08D5  00B5               	movwf	?___ftadd+2
  6955  08D6  0840               	movf	___ftsub@f2,w
  6956  08D7  00B6               	movwf	?___ftadd+3
  6957  08D8  0841               	movf	___ftsub@f2+1,w
  6958  08D9  00B7               	movwf	?___ftadd+4
  6959  08DA  0842               	movf	___ftsub@f2+2,w
  6960  08DB  00B8               	movwf	?___ftadd+5
  6961  08DC  3184  243D         	fcall	___ftadd
  6962  08DE  0020               	movlb	0	; select bank0
  6963  08DF  0833               	movf	?___ftadd,w
  6964  08E0  00C0               	movwf	?___ftsub
  6965  08E1  0834               	movf	?___ftadd+1,w
  6966  08E2  00C1               	movwf	?___ftsub+1
  6967  08E3  0835               	movf	?___ftadd+2,w
  6968  08E4  00C2               	movwf	?___ftsub+2
  6969  08E5  0008               	return
  6970  08E6                     __end_of___ftsub:	
  6971                           
  6972                           	psect	text33
  6973  0041                     __ptext33:	
  6974 ;; *************** function _ldexp *****************
  6975 ;; Defined at:
  6976 ;;		line 278 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\frexp.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  value           3   42[BANK0 ] float 
  6979 ;;  newexp          2   45[BANK0 ] int 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;		None
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  3   42[BANK0 ] int 
  6984 ;; Registers used:
  6985 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6991 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;Total ram usage:       10 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    3
  6998 ;; This function calls:
  6999 ;;		___ftge
  7000 ;;		___ftneg
  7001 ;; This function is called by:
  7002 ;;		_exp
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _ldexp
  7008  0041                     _ldexp:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _ldexp: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7012  0041  0020               	movlb	0	; select bank0
  7013  0042  084C               	movf	ldexp@value+2,w
  7014  0043  044B               	iorwf	ldexp@value+1,w
  7015  0044  044A               	iorwf	ldexp@value,w
  7016  0045  1D03               	skipz
  7017  0046  284E               	goto	l4213
  7018  0047  3000               	movlw	0
  7019  0048  00CA               	movwf	?_ldexp
  7020  0049  3000               	movlw	0
  7021  004A  00CB               	movwf	?_ldexp+1
  7022  004B  3000               	movlw	0
  7023  004C  00CC               	movwf	?_ldexp+2
  7024  004D  0008               	return
  7025  004E                     l4213:	
  7026  004E  084C               	movf	ldexp@value+2,w
  7027  004F  397F               	andlw	127
  7028  0050  00CF               	movwf	??_ldexp
  7029  0051  01D0               	clrf	??_ldexp+1
  7030  0052  35CF               	lslf	??_ldexp,f
  7031  0053  0DD0               	rlf	??_ldexp+1,f
  7032  0054  084F               	movf	??_ldexp,w
  7033  0055  07CD               	addwf	ldexp@newexp,f
  7034  0056  0850               	movf	??_ldexp+1,w
  7035  0057  3DCE               	addwfc	ldexp@newexp+1,f
  7036  0058  0D4B               	rlf	ldexp@value+1,w
  7037  0059  0D4B               	rlf	ldexp@value+1,w
  7038  005A  3901               	andlw	1
  7039  005B  00CF               	movwf	??_ldexp
  7040  005C  01D0               	clrf	??_ldexp+1
  7041  005D  084F               	movf	??_ldexp,w
  7042  005E  07CD               	addwf	ldexp@newexp,f
  7043  005F  0850               	movf	??_ldexp+1,w
  7044  0060  3DCE               	addwfc	ldexp@newexp+1,f
  7045  0061  1FCE               	btfss	ldexp@newexp+1,7
  7046  0062  2870               	goto	l4223
  7047  0063  3022               	movlw	34
  7048  0064  0021               	movlb	1	; select bank1
  7049  0065  00A9               	movwf	_errno^(0+128)
  7050  0066  3000               	movlw	0
  7051  0067  00AA               	movwf	(_errno^(0+128)+1)
  7052  0068  3000               	movlw	0
  7053  0069  0020               	movlb	0	; select bank0
  7054  006A  00CA               	movwf	?_ldexp
  7055  006B  3000               	movlw	0
  7056  006C  00CB               	movwf	?_ldexp+1
  7057  006D  3000               	movlw	0
  7058  006E  00CC               	movwf	?_ldexp+2
  7059  006F  0008               	return
  7060  0070                     l4223:	
  7061  0070  084E               	movf	ldexp@newexp+1,w
  7062  0071  3A80               	xorlw	128
  7063  0072  00FF               	movwf	127
  7064  0073  3081               	movlw	129
  7065  0074  027F               	subwf	127,w
  7066  0075  1D03               	skipz
  7067  0076  2879               	goto	u2635
  7068  0077  3000               	movlw	0
  7069  0078  024D               	subwf	ldexp@newexp,w
  7070  0079                     u2635:	
  7071  0079  1C03               	skipc
  7072  007A  28B1               	goto	l4247
  7073  007B  3022               	movlw	34
  7074  007C  0021               	movlb	1	; select bank1
  7075  007D  00A9               	movwf	_errno^(0+128)
  7076  007E  3000               	movlw	0
  7077  007F  00AA               	movwf	(_errno^(0+128)+1)
  7078  0080  0020               	movlb	0	; select bank0
  7079  0081  084A               	movf	ldexp@value,w
  7080  0082  00F1               	movwf	?___ftge
  7081  0083  084B               	movf	ldexp@value+1,w
  7082  0084  00F2               	movwf	?___ftge+1
  7083  0085  084C               	movf	ldexp@value+2,w
  7084  0086  00F3               	movwf	?___ftge+2
  7085  0087  3000               	movlw	0
  7086  0088  00F4               	movwf	?___ftge+3
  7087  0089  3000               	movlw	0
  7088  008A  00F5               	movwf	?___ftge+4
  7089  008B  3000               	movlw	0
  7090  008C  00F6               	movwf	?___ftge+5
  7091  008D  318B  23D3  3180   	fcall	___ftge
  7092  0090  1803               	btfsc	3,0
  7093  0091  28A9               	goto	l4243
  7094  0092  30FF               	movlw	255
  7095  0093  0020               	movlb	0	; select bank0
  7096  0094  00D1               	movwf	_ldexp$1131
  7097  0095  307F               	movlw	127
  7098  0096  00D2               	movwf	_ldexp$1131+1
  7099  0097  307F               	movlw	127
  7100  0098  00D3               	movwf	_ldexp$1131+2
  7101  0099  0851               	movf	_ldexp$1131,w
  7102  009A  00F1               	movwf	?___ftneg
  7103  009B  0852               	movf	_ldexp$1131+1,w
  7104  009C  00F2               	movwf	?___ftneg+1
  7105  009D  0853               	movf	_ldexp$1131+2,w
  7106  009E  00F3               	movwf	?___ftneg+2
  7107  009F  3197  2728         	fcall	___ftneg
  7108  00A1  0871               	movf	?___ftneg,w
  7109  00A2  0020               	movlb	0	; select bank0
  7110  00A3  00CA               	movwf	?_ldexp
  7111  00A4  0872               	movf	?___ftneg+1,w
  7112  00A5  00CB               	movwf	?_ldexp+1
  7113  00A6  0873               	movf	?___ftneg+2,w
  7114  00A7  00CC               	movwf	?_ldexp+2
  7115  00A8  0008               	return
  7116  00A9                     l4243:	
  7117  00A9  30FF               	movlw	255
  7118  00AA  0020               	movlb	0	; select bank0
  7119  00AB  00CA               	movwf	?_ldexp
  7120  00AC  307F               	movlw	127
  7121  00AD  00CB               	movwf	?_ldexp+1
  7122  00AE  307F               	movlw	127
  7123  00AF  00CC               	movwf	?_ldexp+2
  7124  00B0  0008               	return
  7125  00B1                     l4247:	
  7126  00B1  0020               	movlb	0	; select bank0
  7127  00B2  084E               	movf	ldexp@newexp+1,w
  7128  00B3  00D0               	movwf	??_ldexp+1
  7129  00B4  084D               	movf	ldexp@newexp,w
  7130  00B5  00CF               	movwf	??_ldexp
  7131  00B6  0D50               	rlf	??_ldexp+1,w
  7132  00B7  0CD0               	rrf	??_ldexp+1,f
  7133  00B8  0CCF               	rrf	??_ldexp,f
  7134  00B9  084C               	movf	ldexp@value+2,w
  7135  00BA  064F               	xorwf	??_ldexp,w
  7136  00BB  3980               	andlw	-128
  7137  00BC  064F               	xorwf	??_ldexp,w
  7138  00BD  00CC               	movwf	ldexp@value+2
  7139  00BE  084D               	movf	ldexp@newexp,w
  7140  00BF  3901               	andlw	1
  7141  00C0  00CF               	movwf	??_ldexp
  7142  00C1  0CCF               	rrf	??_ldexp,f
  7143  00C2  0CCF               	rrf	??_ldexp,f
  7144  00C3  084B               	movf	ldexp@value+1,w
  7145  00C4  064F               	xorwf	??_ldexp,w
  7146  00C5  397F               	andlw	-129
  7147  00C6  064F               	xorwf	??_ldexp,w
  7148  00C7  00CB               	movwf	ldexp@value+1
  7149  00C8  0008               	return
  7150  00C9                     __end_of_ldexp:	
  7151                           
  7152                           	psect	text34
  7153  1728                     __ptext34:	
  7154 ;; *************** function ___ftneg *****************
  7155 ;; Defined at:
  7156 ;;		line 16 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftneg.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  f1              3    1[COMMON] float 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  3    1[COMMON] float 
  7163 ;; Registers used:
  7164 ;;		wreg
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7170 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;Total ram usage:        3 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    2
  7177 ;; This function calls:
  7178 ;;		Nothing
  7179 ;; This function is called by:
  7180 ;;		_ADCConv
  7181 ;;		_exp
  7182 ;;		_ldexp
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           
  7187                           ;psect for function ___ftneg
  7188  1728                     ___ftneg:	
  7189                           
  7190                           ;incstack = 0
  7191                           ; Regs used in ___ftneg: [wreg]
  7192  1728  0873               	movf	___ftneg@f1+2,w
  7193  1729  0472               	iorwf	___ftneg@f1+1,w
  7194  172A  0471               	iorwf	___ftneg@f1,w
  7195  172B  1903               	skipnz
  7196  172C  0008               	return
  7197  172D  3080               	movlw	128
  7198  172E  06F3               	xorwf	___ftneg@f1+2,f
  7199  172F  0008               	return
  7200  1730                     __end_of___ftneg:	
  7201                           
  7202                           	psect	text35
  7203  0D4B                     __ptext35:	
  7204 ;; *************** function _eval_poly *****************
  7205 ;; Defined at:
  7206 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  x               3   32[BANK0 ] float 
  7209 ;;  d               1   35[BANK0 ] PTR const 
  7210 ;;		 -> log@coeff(27), exp@coeff(30), 
  7211 ;;  n               2   36[BANK0 ] int 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  res             3   39[BANK0 ] int 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  3   32[BANK0 ] int 
  7216 ;; Registers used:
  7217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7223 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;Total ram usage:       10 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    4
  7230 ;; This function calls:
  7231 ;;		___bmul
  7232 ;;		___ftadd
  7233 ;;		___ftmul
  7234 ;; This function is called by:
  7235 ;;		_exp
  7236 ;;		_log
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _eval_poly
  7242  0D4B                     _eval_poly:	
  7243                           
  7244                           ;incstack = 0
  7245                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7246  0D4B  0020               	movlb	0	; select bank0
  7247  0D4C  0843               	movf	eval_poly@d,w
  7248  0D4D  0084               	movwf	4
  7249  0D4E  3088               	movlw	(high __stringtab)| (0+128)
  7250  0D4F  0085               	movwf	5
  7251  0D50  3003               	movlw	3
  7252  0D51  00C6               	movwf	??_eval_poly
  7253  0D52  0846               	movf	??_eval_poly,w
  7254  0D53  00F1               	movwf	?___bmul
  7255  0D54  0844               	movf	eval_poly@n,w
  7256  0D55  3197  27B6  318D   	fcall	___bmul
  7257  0D58  0784               	addwf	4,f
  7258  0D59  1803               	skipnc
  7259  0D5A  0A85               	incf	5,f
  7260  0D5B  3F00               	moviw [0]fsr0
  7261  0D5C  0020               	movlb	0	; select bank0
  7262  0D5D  00C7               	movwf	eval_poly@res
  7263  0D5E  3F01               	moviw [1]fsr0
  7264  0D5F  00C8               	movwf	eval_poly@res+1
  7265  0D60  3F02               	moviw [2]fsr0
  7266  0D61                     L2:	
  7267  0D61  00C9               	movwf	eval_poly@res+2
  7268  0D62  0845               	movf	eval_poly@n+1,w
  7269  0D63  0444               	iorwf	eval_poly@n,w
  7270  0D64  1903               	btfsc	3,2
  7271  0D65  2DA0               	goto	l5265
  7272  0D66  0843               	movf	eval_poly@d,w
  7273  0D67  0084               	movwf	4
  7274  0D68  3088               	movlw	(high __stringtab)| (0+128)
  7275  0D69  0085               	movwf	5
  7276  0D6A  3003               	movlw	3
  7277  0D6B  00C6               	movwf	??_eval_poly
  7278  0D6C  0846               	movf	??_eval_poly,w
  7279  0D6D  00F1               	movwf	?___bmul
  7280  0D6E  30FF               	movlw	255
  7281  0D6F  07C4               	addwf	eval_poly@n,f
  7282  0D70  30FF               	movlw	255
  7283  0D71  3DC5               	addwfc	eval_poly@n+1,f
  7284  0D72  0844               	movf	eval_poly@n,w
  7285  0D73  3197  27B6  318D   	fcall	___bmul
  7286  0D76  0784               	addwf	4,f
  7287  0D77  1803               	skipnc
  7288  0D78  0A85               	incf	5,f
  7289  0D79  3F00               	moviw [0]fsr0
  7290  0D7A  0020               	movlb	0	; select bank0
  7291  0D7B  00B3               	movwf	?___ftadd
  7292  0D7C  3F01               	moviw [1]fsr0
  7293  0D7D  00B4               	movwf	?___ftadd+1
  7294  0D7E  3F02               	moviw [2]fsr0
  7295  0D7F  00B5               	movwf	?___ftadd+2
  7296  0D80  0847               	movf	eval_poly@res,w
  7297  0D81  00A3               	movwf	?___ftmul
  7298  0D82  0848               	movf	eval_poly@res+1,w
  7299  0D83  00A4               	movwf	?___ftmul+1
  7300  0D84  0849               	movf	eval_poly@res+2,w
  7301  0D85  00A5               	movwf	?___ftmul+2
  7302  0D86  0840               	movf	eval_poly@x,w
  7303  0D87  00A6               	movwf	?___ftmul+3
  7304  0D88  0841               	movf	eval_poly@x+1,w
  7305  0D89  00A7               	movwf	?___ftmul+4
  7306  0D8A  0842               	movf	eval_poly@x+2,w
  7307  0D8B  00A8               	movwf	?___ftmul+5
  7308  0D8C  3185  25F1  318D   	fcall	___ftmul
  7309  0D8F  0020               	movlb	0	; select bank0
  7310  0D90  0823               	movf	?___ftmul,w
  7311  0D91  00B6               	movwf	?___ftadd+3
  7312  0D92  0824               	movf	?___ftmul+1,w
  7313  0D93  00B7               	movwf	?___ftadd+4
  7314  0D94  0825               	movf	?___ftmul+2,w
  7315  0D95  00B8               	movwf	?___ftadd+5
  7316  0D96  3184  243D  318D   	fcall	___ftadd
  7317  0D99  0020               	movlb	0	; select bank0
  7318  0D9A  0833               	movf	?___ftadd,w
  7319  0D9B  00C7               	movwf	eval_poly@res
  7320  0D9C  0834               	movf	?___ftadd+1,w
  7321  0D9D  00C8               	movwf	eval_poly@res+1
  7322  0D9E  0835               	movf	?___ftadd+2,w
  7323  0D9F  2D61               	goto	L2
  7324  0DA0                     l5265:	
  7325  0DA0  0847               	movf	eval_poly@res,w
  7326  0DA1  00C0               	movwf	?_eval_poly
  7327  0DA2  0848               	movf	eval_poly@res+1,w
  7328  0DA3  00C1               	movwf	?_eval_poly+1
  7329  0DA4  0849               	movf	eval_poly@res+2,w
  7330  0DA5  00C2               	movwf	?_eval_poly+2
  7331  0DA6  0008               	return
  7332  0DA7                     __end_of_eval_poly:	
  7333                           
  7334                           	psect	text36
  7335  05F1                     __ptext36:	
  7336 ;; *************** function ___ftmul *****************
  7337 ;; Defined at:
  7338 ;;		line 52 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftmul.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  f1              3    3[BANK0 ] float 
  7341 ;;  f2              3    6[BANK0 ] float 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  f3_as_produc    3   14[BANK0 ] unsigned um
  7344 ;;  sign            1   18[BANK0 ] unsigned char 
  7345 ;;  cntr            1   17[BANK0 ] unsigned char 
  7346 ;;  exp             1   13[BANK0 ] unsigned char 
  7347 ;; Return value:  Size  Location     Type
  7348 ;;                  3    3[BANK0 ] float 
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0, pclath, cstack
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7356 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;Total ram usage:       16 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; Hardware stack levels required when called:    3
  7363 ;; This function calls:
  7364 ;;		___ftpack
  7365 ;; This function is called by:
  7366 ;;		_ADCConv
  7367 ;;		_exp
  7368 ;;		_log
  7369 ;;		_eval_poly
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function ___ftmul
  7375  05F1                     ___ftmul:	
  7376                           
  7377                           ;incstack = 0
  7378                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7379  05F1  0020               	movlb	0	; select bank0
  7380  05F2  0823               	movf	___ftmul@f1,w
  7381  05F3  00A9               	movwf	??___ftmul
  7382  05F4  0824               	movf	___ftmul@f1+1,w
  7383  05F5  00AA               	movwf	??___ftmul+1
  7384  05F6  0825               	movf	___ftmul@f1+2,w
  7385  05F7  00AB               	movwf	??___ftmul+2
  7386  05F8  1003               	clrc
  7387  05F9  0D2A               	rlf	??___ftmul+1,w
  7388  05FA  0D2B               	rlf	??___ftmul+2,w
  7389  05FB  00AC               	movwf	??___ftmul+3
  7390  05FC  082C               	movf	??___ftmul+3,w
  7391  05FD  00AD               	movwf	___ftmul@exp
  7392  05FE  08AD               	movf	___ftmul@exp,f
  7393  05FF  1D03               	skipz
  7394  0600  2E08               	goto	l5389
  7395  0601  3000               	movlw	0
  7396  0602  00A3               	movwf	?___ftmul
  7397  0603  3000               	movlw	0
  7398  0604  00A4               	movwf	?___ftmul+1
  7399  0605  3000               	movlw	0
  7400  0606  00A5               	movwf	?___ftmul+2
  7401  0607  0008               	return
  7402  0608                     l5389:	
  7403  0608  0826               	movf	___ftmul@f2,w
  7404  0609  00A9               	movwf	??___ftmul
  7405  060A  0827               	movf	___ftmul@f2+1,w
  7406  060B  00AA               	movwf	??___ftmul+1
  7407  060C  0828               	movf	___ftmul@f2+2,w
  7408  060D  00AB               	movwf	??___ftmul+2
  7409  060E  1003               	clrc
  7410  060F  0D2A               	rlf	??___ftmul+1,w
  7411  0610  0D2B               	rlf	??___ftmul+2,w
  7412  0611  00AC               	movwf	??___ftmul+3
  7413  0612  082C               	movf	??___ftmul+3,w
  7414  0613  00B2               	movwf	___ftmul@sign
  7415  0614  08B2               	movf	___ftmul@sign,f
  7416  0615  1D03               	skipz
  7417  0616  2E1E               	goto	l5395
  7418  0617  3000               	movlw	0
  7419  0618  00A3               	movwf	?___ftmul
  7420  0619  3000               	movlw	0
  7421  061A  00A4               	movwf	?___ftmul+1
  7422  061B  3000               	movlw	0
  7423  061C  00A5               	movwf	?___ftmul+2
  7424  061D  0008               	return
  7425  061E                     l5395:	
  7426  061E  0832               	movf	___ftmul@sign,w
  7427  061F  3E7B               	addlw	123
  7428  0620  00A9               	movwf	??___ftmul
  7429  0621  0829               	movf	??___ftmul,w
  7430  0622  07AD               	addwf	___ftmul@exp,f
  7431  0623  0823               	movf	___ftmul@f1,w
  7432  0624  00A9               	movwf	??___ftmul
  7433  0625  0824               	movf	___ftmul@f1+1,w
  7434  0626  00AA               	movwf	??___ftmul+1
  7435  0627  0825               	movf	___ftmul@f1+2,w
  7436  0628  00AB               	movwf	??___ftmul+2
  7437  0629  3010               	movlw	16
  7438  062A                     u4325:	
  7439  062A  36AB               	lsrf	??___ftmul+2,f
  7440  062B  0CAA               	rrf	??___ftmul+1,f
  7441  062C  0CA9               	rrf	??___ftmul,f
  7442  062D  0B89               	decfsz	9,f
  7443  062E  2E2A               	goto	u4325
  7444  062F  0829               	movf	??___ftmul,w
  7445  0630  00AC               	movwf	??___ftmul+3
  7446  0631  082C               	movf	??___ftmul+3,w
  7447  0632  00B2               	movwf	___ftmul@sign
  7448  0633  0826               	movf	___ftmul@f2,w
  7449  0634  00A9               	movwf	??___ftmul
  7450  0635  0827               	movf	___ftmul@f2+1,w
  7451  0636  00AA               	movwf	??___ftmul+1
  7452  0637  0828               	movf	___ftmul@f2+2,w
  7453  0638  00AB               	movwf	??___ftmul+2
  7454  0639  3010               	movlw	16
  7455  063A                     u4335:	
  7456  063A  36AB               	lsrf	??___ftmul+2,f
  7457  063B  0CAA               	rrf	??___ftmul+1,f
  7458  063C  0CA9               	rrf	??___ftmul,f
  7459  063D  0B89               	decfsz	9,f
  7460  063E  2E3A               	goto	u4335
  7461  063F  0829               	movf	??___ftmul,w
  7462  0640  00AC               	movwf	??___ftmul+3
  7463  0641  082C               	movf	??___ftmul+3,w
  7464  0642  06B2               	xorwf	___ftmul@sign,f
  7465  0643  3080               	movlw	128
  7466  0644  00A9               	movwf	??___ftmul
  7467  0645  0829               	movf	??___ftmul,w
  7468  0646  05B2               	andwf	___ftmul@sign,f
  7469  0647  17A4               	bsf	___ftmul@f1+1,7
  7470  0648  17A7               	bsf	___ftmul@f2+1,7
  7471  0649  30FF               	movlw	255
  7472  064A  05A6               	andwf	___ftmul@f2,f
  7473  064B  30FF               	movlw	255
  7474  064C  05A7               	andwf	___ftmul@f2+1,f
  7475  064D  3000               	movlw	0
  7476  064E  05A8               	andwf	___ftmul@f2+2,f
  7477  064F  3000               	movlw	0
  7478  0650  00AE               	movwf	___ftmul@f3_as_product
  7479  0651  3000               	movlw	0
  7480  0652  00AF               	movwf	___ftmul@f3_as_product+1
  7481  0653  3000               	movlw	0
  7482  0654  00B0               	movwf	___ftmul@f3_as_product+2
  7483  0655  3007               	movlw	7
  7484  0656  00A9               	movwf	??___ftmul
  7485  0657  0829               	movf	??___ftmul,w
  7486  0658  00B1               	movwf	___ftmul@cntr
  7487  0659                     l5407:	
  7488  0659  1C23               	btfss	___ftmul@f1,0
  7489  065A  2E61               	goto	l5411
  7490  065B  0826               	movf	___ftmul@f2,w
  7491  065C  07AE               	addwf	___ftmul@f3_as_product,f
  7492  065D  0827               	movf	___ftmul@f2+1,w
  7493  065E  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  7494  065F  0828               	movf	___ftmul@f2+2,w
  7495  0660  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  7496  0661                     l5411:	
  7497  0661  3001               	movlw	1
  7498  0662                     u4355:	
  7499  0662  36A5               	lsrf	___ftmul@f1+2,f
  7500  0663  0CA4               	rrf	___ftmul@f1+1,f
  7501  0664  0CA3               	rrf	___ftmul@f1,f
  7502  0665  0B89               	decfsz	9,f
  7503  0666  2E62               	goto	u4355
  7504  0667  3001               	movlw	1
  7505  0668                     u4365:	
  7506  0668  35A6               	lslf	___ftmul@f2,f
  7507  0669  0DA7               	rlf	___ftmul@f2+1,f
  7508  066A  0DA8               	rlf	___ftmul@f2+2,f
  7509  066B  0B89               	decfsz	9,f
  7510  066C  2E68               	goto	u4365
  7511  066D  3001               	movlw	1
  7512  066E  02B1               	subwf	___ftmul@cntr,f
  7513  066F  1D03               	btfss	3,2
  7514  0670  2E59               	goto	l5407
  7515  0671  3009               	movlw	9
  7516  0672  00A9               	movwf	??___ftmul
  7517  0673  0829               	movf	??___ftmul,w
  7518  0674  00B1               	movwf	___ftmul@cntr
  7519  0675                     l5419:	
  7520  0675  1C23               	btfss	___ftmul@f1,0
  7521  0676  2E7D               	goto	l5423
  7522  0677  0826               	movf	___ftmul@f2,w
  7523  0678  07AE               	addwf	___ftmul@f3_as_product,f
  7524  0679  0827               	movf	___ftmul@f2+1,w
  7525  067A  3DAF               	addwfc	___ftmul@f3_as_product+1,f
  7526  067B  0828               	movf	___ftmul@f2+2,w
  7527  067C  3DB0               	addwfc	___ftmul@f3_as_product+2,f
  7528  067D                     l5423:	
  7529  067D  3001               	movlw	1
  7530  067E                     u4395:	
  7531  067E  36A5               	lsrf	___ftmul@f1+2,f
  7532  067F  0CA4               	rrf	___ftmul@f1+1,f
  7533  0680  0CA3               	rrf	___ftmul@f1,f
  7534  0681  0B89               	decfsz	9,f
  7535  0682  2E7E               	goto	u4395
  7536  0683  3001               	movlw	1
  7537  0684                     u4405:	
  7538  0684  36B0               	lsrf	___ftmul@f3_as_product+2,f
  7539  0685  0CAF               	rrf	___ftmul@f3_as_product+1,f
  7540  0686  0CAE               	rrf	___ftmul@f3_as_product,f
  7541  0687  0B89               	decfsz	9,f
  7542  0688  2E84               	goto	u4405
  7543  0689  3001               	movlw	1
  7544  068A  02B1               	subwf	___ftmul@cntr,f
  7545  068B  1D03               	btfss	3,2
  7546  068C  2E75               	goto	l5419
  7547  068D  082E               	movf	___ftmul@f3_as_product,w
  7548  068E  00F1               	movwf	?___ftpack
  7549  068F  082F               	movf	___ftmul@f3_as_product+1,w
  7550  0690  00F2               	movwf	?___ftpack+1
  7551  0691  0830               	movf	___ftmul@f3_as_product+2,w
  7552  0692  00F3               	movwf	?___ftpack+2
  7553  0693  082D               	movf	___ftmul@exp,w
  7554  0694  00A9               	movwf	??___ftmul
  7555  0695  0829               	movf	??___ftmul,w
  7556  0696  00F4               	movwf	?___ftpack+3
  7557  0697  0832               	movf	___ftmul@sign,w
  7558  0698  00AA               	movwf	??___ftmul+1
  7559  0699  082A               	movf	??___ftmul+1,w
  7560  069A  00F5               	movwf	?___ftpack+4
  7561  069B  318D  25A7         	fcall	___ftpack
  7562  069D  0871               	movf	?___ftpack,w
  7563  069E  0020               	movlb	0	; select bank0
  7564  069F  00A3               	movwf	?___ftmul
  7565  06A0  0872               	movf	?___ftpack+1,w
  7566  06A1  00A4               	movwf	?___ftmul+1
  7567  06A2  0873               	movf	?___ftpack+2,w
  7568  06A3  00A5               	movwf	?___ftmul+2
  7569  06A4  0008               	return
  7570  06A5                     __end_of___ftmul:	
  7571                           
  7572                           	psect	text37
  7573  17B6                     __ptext37:	
  7574 ;; *************** function ___bmul *****************
  7575 ;; Defined at:
  7576 ;;		line 3 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\bmul.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  multiplier      1    wreg     unsigned char 
  7579 ;;  multiplicand    1    1[COMMON] unsigned char 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  multiplier      1    4[COMMON] unsigned char 
  7582 ;;  product         1    3[COMMON] unsigned char 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  1    wreg      unsigned char 
  7585 ;; Registers used:
  7586 ;;		wreg, status,2, status,0
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7592 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;Total ram usage:        4 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    2
  7599 ;; This function calls:
  7600 ;;		Nothing
  7601 ;; This function is called by:
  7602 ;;		_eval_poly
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           
  7607                           ;psect for function ___bmul
  7608  17B6                     ___bmul:	
  7609                           
  7610                           ;incstack = 0
  7611                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7612                           ;___bmul@multiplier stored from wreg
  7613  17B6  00F4               	movwf	___bmul@multiplier
  7614  17B7  01F3               	clrf	___bmul@product
  7615  17B8                     l4155:	
  7616  17B8  1C74               	btfss	___bmul@multiplier,0
  7617  17B9  2FBE               	goto	l4159
  7618  17BA  0871               	movf	___bmul@multiplicand,w
  7619  17BB  00F2               	movwf	??___bmul
  7620  17BC  0872               	movf	??___bmul,w
  7621  17BD  07F3               	addwf	___bmul@product,f
  7622  17BE                     l4159:	
  7623  17BE  1003               	clrc
  7624  17BF  0DF1               	rlf	___bmul@multiplicand,f
  7625  17C0  1003               	clrc
  7626  17C1  0CF4               	rrf	___bmul@multiplier,f
  7627  17C2  08F4               	movf	___bmul@multiplier,f
  7628  17C3  1D03               	skipz
  7629  17C4  2FB8               	goto	l4155
  7630  17C5  0873               	movf	___bmul@product,w
  7631  17C6  0008               	return
  7632  17C7                     __end_of___bmul:	
  7633                           
  7634                           	psect	text38
  7635  0EF4                     __ptext38:	
  7636 ;; *************** function _floor *****************
  7637 ;; Defined at:
  7638 ;;		line 14 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\floor.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  x               3   32[BANK0 ] unsigned char 
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;  i               3   36[BANK0 ] unsigned char 
  7643 ;;  expon           2   39[BANK0 ] int 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  3   32[BANK0 ] int 
  7646 ;; Registers used:
  7647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7653 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;Total ram usage:        9 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    4
  7660 ;; This function calls:
  7661 ;;		___altoft
  7662 ;;		_frexp
  7663 ;;		___ftadd
  7664 ;;		___ftge
  7665 ;;		___fttol
  7666 ;; This function is called by:
  7667 ;;		_exp
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _floor
  7673  0EF4                     _floor:	
  7674                           
  7675                           ;incstack = 0
  7676                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7677  0EF4  0020               	movlb	0	; select bank0
  7678  0EF5  0840               	movf	floor@x,w
  7679  0EF6  00F1               	movwf	?_frexp
  7680  0EF7  0841               	movf	floor@x+1,w
  7681  0EF8  00F2               	movwf	?_frexp+1
  7682  0EF9  0842               	movf	floor@x+2,w
  7683  0EFA  00F3               	movwf	?_frexp+2
  7684  0EFB  3047               	movlw	floor@expon& (0+255)
  7685  0EFC  00C3               	movwf	??_floor
  7686  0EFD  0843               	movf	??_floor,w
  7687  0EFE  00F4               	movwf	?_frexp+3
  7688  0EFF  318B  2398  318E   	fcall	_frexp
  7689  0F02  0020               	movlb	0	; select bank0
  7690  0F03  1FC8               	btfss	floor@expon+1,7
  7691  0F04  2F26               	goto	l5245
  7692  0F05  0840               	movf	floor@x,w
  7693  0F06  00F1               	movwf	?___ftge
  7694  0F07  0841               	movf	floor@x+1,w
  7695  0F08  00F2               	movwf	?___ftge+1
  7696  0F09  0842               	movf	floor@x+2,w
  7697  0F0A  00F3               	movwf	?___ftge+2
  7698  0F0B  3000               	movlw	0
  7699  0F0C  00F4               	movwf	?___ftge+3
  7700  0F0D  3000               	movlw	0
  7701  0F0E  00F5               	movwf	?___ftge+4
  7702  0F0F  3000               	movlw	0
  7703  0F10  00F6               	movwf	?___ftge+5
  7704  0F11  318B  23D3  318E   	fcall	___ftge
  7705  0F14  1803               	btfsc	3,0
  7706  0F15  2F1E               	goto	l5241
  7707  0F16  3000               	movlw	0
  7708  0F17  0020               	movlb	0	; select bank0
  7709  0F18  00C0               	movwf	?_floor
  7710  0F19  3080               	movlw	128
  7711  0F1A  00C1               	movwf	?_floor+1
  7712  0F1B  30BF               	movlw	191
  7713  0F1C  00C2               	movwf	?_floor+2
  7714  0F1D  0008               	return
  7715  0F1E                     l5241:	
  7716  0F1E  3000               	movlw	0
  7717  0F1F  0020               	movlb	0	; select bank0
  7718  0F20  00C0               	movwf	?_floor
  7719  0F21  3000               	movlw	0
  7720  0F22  00C1               	movwf	?_floor+1
  7721  0F23  3000               	movlw	0
  7722  0F24  00C2               	movwf	?_floor+2
  7723  0F25  0008               	return
  7724  0F26                     l5245:	
  7725  0F26  3000               	movlw	0
  7726  0F27  0248               	subwf	floor@expon+1,w
  7727  0F28  3015               	movlw	21
  7728  0F29  1903               	skipnz
  7729  0F2A  0247               	subwf	floor@expon,w
  7730  0F2B  1803               	btfsc	3,0
  7731  0F2C  0008               	return
  7732  0F2D  0840               	movf	floor@x,w
  7733  0F2E  00F1               	movwf	?___fttol
  7734  0F2F  0841               	movf	floor@x+1,w
  7735  0F30  00F2               	movwf	?___fttol+1
  7736  0F31  0842               	movf	floor@x+2,w
  7737  0F32  00F3               	movwf	?___fttol+2
  7738  0F33  318F  2779  318E   	fcall	___fttol
  7739  0F36  0874               	movf	?___fttol+3,w
  7740  0F37  0020               	movlb	0	; select bank0
  7741  0F38  00A9               	movwf	?___altoft+3
  7742  0F39  0873               	movf	?___fttol+2,w
  7743  0F3A  00A8               	movwf	?___altoft+2
  7744  0F3B  0872               	movf	?___fttol+1,w
  7745  0F3C  00A7               	movwf	?___altoft+1
  7746  0F3D  0871               	movf	?___fttol,w
  7747  0F3E  00A6               	movwf	?___altoft
  7748  0F3F  318C  240E  318E   	fcall	___altoft
  7749  0F42  0020               	movlb	0	; select bank0
  7750  0F43  0826               	movf	?___altoft,w
  7751  0F44  00C4               	movwf	floor@i
  7752  0F45  0827               	movf	?___altoft+1,w
  7753  0F46  00C5               	movwf	floor@i+1
  7754  0F47  0828               	movf	?___altoft+2,w
  7755  0F48  00C6               	movwf	floor@i+2
  7756  0F49  0840               	movf	floor@x,w
  7757  0F4A  00F1               	movwf	?___ftge
  7758  0F4B  0841               	movf	floor@x+1,w
  7759  0F4C  00F2               	movwf	?___ftge+1
  7760  0F4D  0842               	movf	floor@x+2,w
  7761  0F4E  00F3               	movwf	?___ftge+2
  7762  0F4F  0844               	movf	floor@i,w
  7763  0F50  00F4               	movwf	?___ftge+3
  7764  0F51  0845               	movf	floor@i+1,w
  7765  0F52  00F5               	movwf	?___ftge+4
  7766  0F53  0846               	movf	floor@i+2,w
  7767  0F54  00F6               	movwf	?___ftge+5
  7768  0F55  318B  23D3  318E   	fcall	___ftge
  7769  0F58  1803               	btfsc	3,0
  7770  0F59  2F71               	goto	l5255
  7771  0F5A  3000               	movlw	0
  7772  0F5B  0020               	movlb	0	; select bank0
  7773  0F5C  00B3               	movwf	?___ftadd
  7774  0F5D  3080               	movlw	128
  7775  0F5E  00B4               	movwf	?___ftadd+1
  7776  0F5F  30BF               	movlw	191
  7777  0F60  00B5               	movwf	?___ftadd+2
  7778  0F61  0844               	movf	floor@i,w
  7779  0F62  00B6               	movwf	?___ftadd+3
  7780  0F63  0845               	movf	floor@i+1,w
  7781  0F64  00B7               	movwf	?___ftadd+4
  7782  0F65  0846               	movf	floor@i+2,w
  7783  0F66  00B8               	movwf	?___ftadd+5
  7784  0F67  3184  243D         	fcall	___ftadd
  7785  0F69  0020               	movlb	0	; select bank0
  7786  0F6A  0833               	movf	?___ftadd,w
  7787  0F6B  00C0               	movwf	?_floor
  7788  0F6C  0834               	movf	?___ftadd+1,w
  7789  0F6D  00C1               	movwf	?_floor+1
  7790  0F6E  0835               	movf	?___ftadd+2,w
  7791  0F6F  00C2               	movwf	?_floor+2
  7792  0F70  0008               	return
  7793  0F71                     l5255:	
  7794  0F71  0020               	movlb	0	; select bank0
  7795  0F72  0844               	movf	floor@i,w
  7796  0F73  00C0               	movwf	?_floor
  7797  0F74  0845               	movf	floor@i+1,w
  7798  0F75  00C1               	movwf	?_floor+1
  7799  0F76  0846               	movf	floor@i+2,w
  7800  0F77  00C2               	movwf	?_floor+2
  7801  0F78  0008               	return
  7802  0F79                     __end_of_floor:	
  7803                           
  7804                           	psect	text39
  7805  0F79                     __ptext39:	
  7806 ;; *************** function ___fttol *****************
  7807 ;; Defined at:
  7808 ;;		line 45 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\fttol.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;  f1              3    1[COMMON] float 
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;  lval            4    1[BANK0 ] unsigned long 
  7813 ;;  exp1            1    5[BANK0 ] unsigned char 
  7814 ;;  sign1           1    0[BANK0 ] unsigned char 
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  4    1[COMMON] long 
  7817 ;; Registers used:
  7818 ;;		wreg, status,2, status,0
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7824 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;      Totals:         8       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;Total ram usage:       14 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    2
  7831 ;; This function calls:
  7832 ;;		Nothing
  7833 ;; This function is called by:
  7834 ;;		_exp
  7835 ;;		_floor
  7836 ;; This function uses a non-reentrant model
  7837 ;;
  7838                           
  7839                           
  7840                           ;psect for function ___fttol
  7841  0F79                     ___fttol:	
  7842                           
  7843                           ;incstack = 0
  7844                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7845  0F79  0871               	movf	___fttol@f1,w
  7846  0F7A  00F5               	movwf	??___fttol
  7847  0F7B  0872               	movf	___fttol@f1+1,w
  7848  0F7C  00F6               	movwf	??___fttol+1
  7849  0F7D  0873               	movf	___fttol@f1+2,w
  7850  0F7E  00F7               	movwf	??___fttol+2
  7851  0F7F  1003               	clrc
  7852  0F80  0D76               	rlf	??___fttol+1,w
  7853  0F81  0D77               	rlf	??___fttol+2,w
  7854  0F82  00F8               	movwf	??___fttol+3
  7855  0F83  0878               	movf	??___fttol+3,w
  7856  0F84  0020               	movlb	0	; select bank0
  7857  0F85  00A5               	movwf	___fttol@exp1
  7858  0F86  08A5               	movf	___fttol@exp1,f
  7859  0F87  1D03               	skipz
  7860  0F88  2F92               	goto	l4477
  7861  0F89  3000               	movlw	0
  7862  0F8A  00F4               	movwf	?___fttol+3
  7863  0F8B  3000               	movlw	0
  7864  0F8C  00F3               	movwf	?___fttol+2
  7865  0F8D  3000               	movlw	0
  7866  0F8E  00F2               	movwf	?___fttol+1
  7867  0F8F  3000               	movlw	0
  7868  0F90  00F1               	movwf	?___fttol
  7869  0F91  0008               	return
  7870  0F92                     l4477:	
  7871  0F92  0871               	movf	___fttol@f1,w
  7872  0F93  00F5               	movwf	??___fttol
  7873  0F94  0872               	movf	___fttol@f1+1,w
  7874  0F95  00F6               	movwf	??___fttol+1
  7875  0F96  0873               	movf	___fttol@f1+2,w
  7876  0F97  00F7               	movwf	??___fttol+2
  7877  0F98  3017               	movlw	23
  7878  0F99                     u3145:	
  7879  0F99  36F7               	lsrf	??___fttol+2,f
  7880  0F9A  0CF6               	rrf	??___fttol+1,f
  7881  0F9B  0CF5               	rrf	??___fttol,f
  7882  0F9C  0B89               	decfsz	9,f
  7883  0F9D  2F99               	goto	u3145
  7884  0F9E  0875               	movf	??___fttol,w
  7885  0F9F  00F8               	movwf	??___fttol+3
  7886  0FA0  0878               	movf	??___fttol+3,w
  7887  0FA1  00A0               	movwf	___fttol@sign1
  7888  0FA2  17F2               	bsf	___fttol@f1+1,7
  7889  0FA3  30FF               	movlw	255
  7890  0FA4  05F1               	andwf	___fttol@f1,f
  7891  0FA5  30FF               	movlw	255
  7892  0FA6  05F2               	andwf	___fttol@f1+1,f
  7893  0FA7  3000               	movlw	0
  7894  0FA8  05F3               	andwf	___fttol@f1+2,f
  7895  0FA9  0871               	movf	___fttol@f1,w
  7896  0FAA  00A1               	movwf	___fttol@lval
  7897  0FAB  0872               	movf	___fttol@f1+1,w
  7898  0FAC  00A2               	movwf	___fttol@lval+1
  7899  0FAD  0873               	movf	___fttol@f1+2,w
  7900  0FAE  00A3               	movwf	___fttol@lval+2
  7901  0FAF  01A4               	clrf	___fttol@lval+3
  7902  0FB0  308E               	movlw	142
  7903  0FB1  02A5               	subwf	___fttol@exp1,f
  7904  0FB2  1FA5               	btfss	___fttol@exp1,7
  7905  0FB3  2FD0               	goto	l4497
  7906  0FB4  0825               	movf	___fttol@exp1,w
  7907  0FB5  3A80               	xorlw	128
  7908  0FB6  3E8F               	addlw	143
  7909  0FB7  1803               	skipnc
  7910  0FB8  2FC2               	goto	l4495
  7911  0FB9  3000               	movlw	0
  7912  0FBA  00F4               	movwf	?___fttol+3
  7913  0FBB  3000               	movlw	0
  7914  0FBC  00F3               	movwf	?___fttol+2
  7915  0FBD  3000               	movlw	0
  7916  0FBE  00F2               	movwf	?___fttol+1
  7917  0FBF  3000               	movlw	0
  7918  0FC0  00F1               	movwf	?___fttol
  7919  0FC1  0008               	return
  7920  0FC2                     l4495:	
  7921  0FC2  3001               	movlw	1
  7922  0FC3                     u3175:	
  7923  0FC3  36A4               	lsrf	___fttol@lval+3,f
  7924  0FC4  0CA3               	rrf	___fttol@lval+2,f
  7925  0FC5  0CA2               	rrf	___fttol@lval+1,f
  7926  0FC6  0CA1               	rrf	___fttol@lval,f
  7927  0FC7  0B89               	decfsz	9,f
  7928  0FC8  2FC3               	goto	u3175
  7929  0FC9  3001               	movlw	1
  7930  0FCA  00F5               	movwf	??___fttol
  7931  0FCB  0875               	movf	??___fttol,w
  7932  0FCC  07A5               	addwf	___fttol@exp1,f
  7933  0FCD  1903               	btfsc	3,2
  7934  0FCE  2FE9               	goto	l4507
  7935  0FCF  2FC2               	goto	l4495
  7936  0FD0                     l4497:	
  7937  0FD0  3018               	movlw	24
  7938  0FD1  0225               	subwf	___fttol@exp1,w
  7939  0FD2  1C03               	skipc
  7940  0FD3  2FE6               	goto	l4505
  7941  0FD4  3000               	movlw	0
  7942  0FD5  00F4               	movwf	?___fttol+3
  7943  0FD6  3000               	movlw	0
  7944  0FD7  00F3               	movwf	?___fttol+2
  7945  0FD8  3000               	movlw	0
  7946  0FD9  00F2               	movwf	?___fttol+1
  7947  0FDA  3000               	movlw	0
  7948  0FDB  00F1               	movwf	?___fttol
  7949  0FDC  0008               	return
  7950  0FDD                     l4503:	
  7951  0FDD  3001               	movlw	1
  7952  0FDE                     u3205:	
  7953  0FDE  35A1               	lslf	___fttol@lval,f
  7954  0FDF  0DA2               	rlf	___fttol@lval+1,f
  7955  0FE0  0DA3               	rlf	___fttol@lval+2,f
  7956  0FE1  0DA4               	rlf	___fttol@lval+3,f
  7957  0FE2  0B89               	decfsz	9,f
  7958  0FE3  2FDE               	goto	u3205
  7959  0FE4  3001               	movlw	1
  7960  0FE5  02A5               	subwf	___fttol@exp1,f
  7961  0FE6                     l4505:	
  7962  0FE6  08A5               	movf	___fttol@exp1,f
  7963  0FE7  1D03               	skipz
  7964  0FE8  2FDD               	goto	l4503
  7965  0FE9                     l4507:	
  7966  0FE9  0820               	movf	___fttol@sign1,w
  7967  0FEA  1903               	btfsc	3,2
  7968  0FEB  2FF7               	goto	l4511
  7969  0FEC  09A1               	comf	___fttol@lval,f
  7970  0FED  09A2               	comf	___fttol@lval+1,f
  7971  0FEE  09A3               	comf	___fttol@lval+2,f
  7972  0FEF  09A4               	comf	___fttol@lval+3,f
  7973  0FF0  0AA1               	incf	___fttol@lval,f
  7974  0FF1  1903               	skipnz
  7975  0FF2  0AA2               	incf	___fttol@lval+1,f
  7976  0FF3  1903               	skipnz
  7977  0FF4  0AA3               	incf	___fttol@lval+2,f
  7978  0FF5  1903               	skipnz
  7979  0FF6  0AA4               	incf	___fttol@lval+3,f
  7980  0FF7                     l4511:	
  7981  0FF7  0824               	movf	___fttol@lval+3,w
  7982  0FF8  00F4               	movwf	?___fttol+3
  7983  0FF9  0823               	movf	___fttol@lval+2,w
  7984  0FFA  00F3               	movwf	?___fttol+2
  7985  0FFB  0822               	movf	___fttol@lval+1,w
  7986  0FFC  00F2               	movwf	?___fttol+1
  7987  0FFD  0821               	movf	___fttol@lval,w
  7988  0FFE  00F1               	movwf	?___fttol
  7989  0FFF  0008               	return
  7990  1000                     __end_of___fttol:	
  7991                           
  7992                           	psect	text40
  7993  0BD3                     __ptext40:	
  7994 ;; *************** function ___ftge *****************
  7995 ;; Defined at:
  7996 ;;		line 5 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftge.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  ff1             3    1[COMMON] float 
  7999 ;;  ff2             3    4[COMMON] float 
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;		None
  8002 ;; Return value:  Size  Location     Type
  8003 ;;		None               void
  8004 ;; Registers used:
  8005 ;;		wreg, status,2, status,0
  8006 ;; Tracked objects:
  8007 ;;		On entry : 0/0
  8008 ;;		On exit  : 0/0
  8009 ;;		Unchanged: 0/0
  8010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8011 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;Total ram usage:        9 bytes
  8016 ;; Hardware stack levels used:    1
  8017 ;; Hardware stack levels required when called:    2
  8018 ;; This function calls:
  8019 ;;		Nothing
  8020 ;; This function is called by:
  8021 ;;		_exp
  8022 ;;		_floor
  8023 ;;		_ldexp
  8024 ;;		_log
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           
  8029                           ;psect for function ___ftge
  8030  0BD3                     ___ftge:	
  8031                           
  8032                           ;incstack = 0
  8033                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8034  0BD3  1FF3               	btfss	___ftge@ff1+2,7
  8035  0BD4  2BE9               	goto	l4391
  8036  0BD5  0971               	comf	___ftge@ff1,w
  8037  0BD6  00F7               	movwf	??___ftge
  8038  0BD7  0972               	comf	___ftge@ff1+1,w
  8039  0BD8  00F8               	movwf	??___ftge+1
  8040  0BD9  0973               	comf	___ftge@ff1+2,w
  8041  0BDA  00F9               	movwf	??___ftge+2
  8042  0BDB  0AF7               	incf	??___ftge,f
  8043  0BDC  1903               	skipnz
  8044  0BDD  0AF8               	incf	??___ftge+1,f
  8045  0BDE  1903               	skipnz
  8046  0BDF  0AF9               	incf	??___ftge+2,f
  8047  0BE0  3000               	movlw	0
  8048  0BE1  0777               	addwf	??___ftge,w
  8049  0BE2  00F1               	movwf	___ftge@ff1
  8050  0BE3  3000               	movlw	0
  8051  0BE4  3D78               	addwfc	??___ftge+1,w
  8052  0BE5  00F2               	movwf	___ftge@ff1+1
  8053  0BE6  3080               	movlw	128
  8054  0BE7  3D79               	addwfc	??___ftge+2,w
  8055  0BE8  00F3               	movwf	___ftge@ff1+2
  8056  0BE9                     l4391:	
  8057  0BE9  1FF6               	btfss	___ftge@ff2+2,7
  8058  0BEA  2BFF               	goto	l4395
  8059  0BEB  0974               	comf	___ftge@ff2,w
  8060  0BEC  00F7               	movwf	??___ftge
  8061  0BED  0975               	comf	___ftge@ff2+1,w
  8062  0BEE  00F8               	movwf	??___ftge+1
  8063  0BEF  0976               	comf	___ftge@ff2+2,w
  8064  0BF0  00F9               	movwf	??___ftge+2
  8065  0BF1  0AF7               	incf	??___ftge,f
  8066  0BF2  1903               	skipnz
  8067  0BF3  0AF8               	incf	??___ftge+1,f
  8068  0BF4  1903               	skipnz
  8069  0BF5  0AF9               	incf	??___ftge+2,f
  8070  0BF6  3000               	movlw	0
  8071  0BF7  0777               	addwf	??___ftge,w
  8072  0BF8  00F4               	movwf	___ftge@ff2
  8073  0BF9  3000               	movlw	0
  8074  0BFA  3D78               	addwfc	??___ftge+1,w
  8075  0BFB  00F5               	movwf	___ftge@ff2+1
  8076  0BFC  3080               	movlw	128
  8077  0BFD  3D79               	addwfc	??___ftge+2,w
  8078  0BFE  00F6               	movwf	___ftge@ff2+2
  8079  0BFF                     l4395:	
  8080  0BFF  3080               	movlw	128
  8081  0C00  06F3               	xorwf	___ftge@ff1+2,f
  8082  0C01  3080               	movlw	128
  8083  0C02  06F6               	xorwf	___ftge@ff2+2,f
  8084  0C03  0876               	movf	___ftge@ff2+2,w
  8085  0C04  0273               	subwf	___ftge@ff1+2,w
  8086  0C05  1D03               	skipz
  8087  0C06  0008               	return
  8088  0C07  0875               	movf	___ftge@ff2+1,w
  8089  0C08  0272               	subwf	___ftge@ff1+1,w
  8090  0C09  1D03               	skipz
  8091  0C0A  0008               	return
  8092  0C0B  0874               	movf	___ftge@ff2,w
  8093  0C0C  0271               	subwf	___ftge@ff1,w
  8094  0C0D  0008               	return
  8095  0C0E                     __end_of___ftge:	
  8096                           
  8097                           	psect	text41
  8098  043D                     __ptext41:	
  8099 ;; *************** function ___ftadd *****************
  8100 ;; Defined at:
  8101 ;;		line 87 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftadd.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  f1              3   19[BANK0 ] float 
  8104 ;;  f2              3   22[BANK0 ] float 
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;  exp1            1   31[BANK0 ] unsigned char 
  8107 ;;  exp2            1   30[BANK0 ] unsigned char 
  8108 ;;  sign            1   29[BANK0 ] unsigned char 
  8109 ;; Return value:  Size  Location     Type
  8110 ;;                  3   19[BANK0 ] float 
  8111 ;; Registers used:
  8112 ;;		wreg, status,2, status,0, pclath, cstack
  8113 ;; Tracked objects:
  8114 ;;		On entry : 0/0
  8115 ;;		On exit  : 0/0
  8116 ;;		Unchanged: 0/0
  8117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8118 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8121 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8122 ;;Total ram usage:       13 bytes
  8123 ;; Hardware stack levels used:    1
  8124 ;; Hardware stack levels required when called:    3
  8125 ;; This function calls:
  8126 ;;		___ftpack
  8127 ;; This function is called by:
  8128 ;;		_ADCConv
  8129 ;;		_RTXSendData
  8130 ;;		_floor
  8131 ;;		___ftsub
  8132 ;;		_log
  8133 ;;		_eval_poly
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function ___ftadd
  8139  043D                     ___ftadd:	
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8143  043D  0020               	movlb	0	; select bank0
  8144  043E  0833               	movf	___ftadd@f1,w
  8145  043F  00B9               	movwf	??___ftadd
  8146  0440  0834               	movf	___ftadd@f1+1,w
  8147  0441  00BA               	movwf	??___ftadd+1
  8148  0442  0835               	movf	___ftadd@f1+2,w
  8149  0443  00BB               	movwf	??___ftadd+2
  8150  0444  1003               	clrc
  8151  0445  0D3A               	rlf	??___ftadd+1,w
  8152  0446  0D3B               	rlf	??___ftadd+2,w
  8153  0447  00BC               	movwf	??___ftadd+3
  8154  0448  083C               	movf	??___ftadd+3,w
  8155  0449  00BF               	movwf	___ftadd@exp1
  8156  044A  0836               	movf	___ftadd@f2,w
  8157  044B  00B9               	movwf	??___ftadd
  8158  044C  0837               	movf	___ftadd@f2+1,w
  8159  044D  00BA               	movwf	??___ftadd+1
  8160  044E  0838               	movf	___ftadd@f2+2,w
  8161  044F  00BB               	movwf	??___ftadd+2
  8162  0450  1003               	clrc
  8163  0451  0D3A               	rlf	??___ftadd+1,w
  8164  0452  0D3B               	rlf	??___ftadd+2,w
  8165  0453  00BC               	movwf	??___ftadd+3
  8166  0454  083C               	movf	??___ftadd+3,w
  8167  0455  00BE               	movwf	___ftadd@exp2
  8168  0456  083F               	movf	___ftadd@exp1,w
  8169  0457  1903               	btfsc	3,2
  8170  0458  2C65               	goto	l5277
  8171  0459  083E               	movf	___ftadd@exp2,w
  8172  045A  023F               	subwf	___ftadd@exp1,w
  8173  045B  1803               	skipnc
  8174  045C  2C6C               	goto	l5281
  8175  045D  033F               	decf	___ftadd@exp1,w
  8176  045E  3AFF               	xorlw	255
  8177  045F  073E               	addwf	___ftadd@exp2,w
  8178  0460  00B9               	movwf	??___ftadd
  8179  0461  3019               	movlw	25
  8180  0462  0239               	subwf	??___ftadd,w
  8181  0463  1C03               	skipc
  8182  0464  2C6C               	goto	l5281
  8183  0465                     l5277:	
  8184  0465  0836               	movf	___ftadd@f2,w
  8185  0466  00B3               	movwf	?___ftadd
  8186  0467  0837               	movf	___ftadd@f2+1,w
  8187  0468  00B4               	movwf	?___ftadd+1
  8188  0469  0838               	movf	___ftadd@f2+2,w
  8189  046A  00B5               	movwf	?___ftadd+2
  8190  046B  0008               	return
  8191  046C                     l5281:	
  8192  046C  083E               	movf	___ftadd@exp2,w
  8193  046D  1903               	btfsc	3,2
  8194  046E  0008               	return
  8195  046F  083F               	movf	___ftadd@exp1,w
  8196  0470  023E               	subwf	___ftadd@exp2,w
  8197  0471  1803               	skipnc
  8198  0472  2C7B               	goto	l5287
  8199  0473  033E               	decf	___ftadd@exp2,w
  8200  0474  3AFF               	xorlw	255
  8201  0475  073F               	addwf	___ftadd@exp1,w
  8202  0476  00B9               	movwf	??___ftadd
  8203  0477  3019               	movlw	25
  8204  0478  0239               	subwf	??___ftadd,w
  8205  0479  1803               	btfsc	3,0
  8206  047A  0008               	return
  8207  047B                     l5287:	
  8208  047B  3006               	movlw	6
  8209  047C  00B9               	movwf	??___ftadd
  8210  047D  0839               	movf	??___ftadd,w
  8211  047E  00BD               	movwf	___ftadd@sign
  8212  047F  1BB5               	btfsc	___ftadd@f1+2,7
  8213  0480  17BD               	bsf	___ftadd@sign,7
  8214  0481  1BB8               	btfsc	___ftadd@f2+2,7
  8215  0482  173D               	bsf	___ftadd@sign,6
  8216  0483  17B4               	bsf	___ftadd@f1+1,7
  8217  0484  30FF               	movlw	255
  8218  0485  05B3               	andwf	___ftadd@f1,f
  8219  0486  30FF               	movlw	255
  8220  0487  05B4               	andwf	___ftadd@f1+1,f
  8221  0488  3000               	movlw	0
  8222  0489  05B5               	andwf	___ftadd@f1+2,f
  8223  048A  17B7               	bsf	___ftadd@f2+1,7
  8224  048B  30FF               	movlw	255
  8225  048C  05B6               	andwf	___ftadd@f2,f
  8226  048D  30FF               	movlw	255
  8227  048E  05B7               	andwf	___ftadd@f2+1,f
  8228  048F  3000               	movlw	0
  8229  0490  05B8               	andwf	___ftadd@f2+2,f
  8230  0491  083E               	movf	___ftadd@exp2,w
  8231  0492  023F               	subwf	___ftadd@exp1,w
  8232  0493  1803               	skipnc
  8233  0494  2CB7               	goto	l5309
  8234  0495                     l5299:	
  8235  0495  3001               	movlw	1
  8236  0496                     u4085:	
  8237  0496  35B6               	lslf	___ftadd@f2,f
  8238  0497  0DB7               	rlf	___ftadd@f2+1,f
  8239  0498  0DB8               	rlf	___ftadd@f2+2,f
  8240  0499  0B89               	decfsz	9,f
  8241  049A  2C96               	goto	u4085
  8242  049B  3001               	movlw	1
  8243  049C  02BE               	subwf	___ftadd@exp2,f
  8244  049D  083E               	movf	___ftadd@exp2,w
  8245  049E  063F               	xorwf	___ftadd@exp1,w
  8246  049F  1903               	skipnz
  8247  04A0  2CB2               	goto	l5307
  8248  04A1  3001               	movlw	1
  8249  04A2  02BD               	subwf	___ftadd@sign,f
  8250  04A3  083D               	movf	___ftadd@sign,w
  8251  04A4  3907               	andlw	7
  8252  04A5  1903               	btfsc	3,2
  8253  04A6  2CB2               	goto	l5307
  8254  04A7  2C95               	goto	l5299
  8255  04A8                     l5305:	
  8256  04A8  3001               	movlw	1
  8257  04A9                     u4115:	
  8258  04A9  36B5               	lsrf	___ftadd@f1+2,f
  8259  04AA  0CB4               	rrf	___ftadd@f1+1,f
  8260  04AB  0CB3               	rrf	___ftadd@f1,f
  8261  04AC  0B89               	decfsz	9,f
  8262  04AD  2CA9               	goto	u4115
  8263  04AE  3001               	movlw	1
  8264  04AF  00B9               	movwf	??___ftadd
  8265  04B0  0839               	movf	??___ftadd,w
  8266  04B1  07BF               	addwf	___ftadd@exp1,f
  8267  04B2                     l5307:	
  8268  04B2  083F               	movf	___ftadd@exp1,w
  8269  04B3  063E               	xorwf	___ftadd@exp2,w
  8270  04B4  1903               	btfsc	3,2
  8271  04B5  2CDC               	goto	l926
  8272  04B6  2CA8               	goto	l5305
  8273  04B7                     l5309:	
  8274  04B7  083F               	movf	___ftadd@exp1,w
  8275  04B8  023E               	subwf	___ftadd@exp2,w
  8276  04B9  1803               	skipnc
  8277  04BA  2CDC               	goto	l926
  8278  04BB                     l5311:	
  8279  04BB  3001               	movlw	1
  8280  04BC                     u4145:	
  8281  04BC  35B3               	lslf	___ftadd@f1,f
  8282  04BD  0DB4               	rlf	___ftadd@f1+1,f
  8283  04BE  0DB5               	rlf	___ftadd@f1+2,f
  8284  04BF  0B89               	decfsz	9,f
  8285  04C0  2CBC               	goto	u4145
  8286  04C1  3001               	movlw	1
  8287  04C2  02BF               	subwf	___ftadd@exp1,f
  8288  04C3  083E               	movf	___ftadd@exp2,w
  8289  04C4  063F               	xorwf	___ftadd@exp1,w
  8290  04C5  1903               	skipnz
  8291  04C6  2CD8               	goto	l5319
  8292  04C7  3001               	movlw	1
  8293  04C8  02BD               	subwf	___ftadd@sign,f
  8294  04C9  083D               	movf	___ftadd@sign,w
  8295  04CA  3907               	andlw	7
  8296  04CB  1903               	btfsc	3,2
  8297  04CC  2CD8               	goto	l5319
  8298  04CD  2CBB               	goto	l5311
  8299  04CE                     l5317:	
  8300  04CE  3001               	movlw	1
  8301  04CF                     u4175:	
  8302  04CF  36B8               	lsrf	___ftadd@f2+2,f
  8303  04D0  0CB7               	rrf	___ftadd@f2+1,f
  8304  04D1  0CB6               	rrf	___ftadd@f2,f
  8305  04D2  0B89               	decfsz	9,f
  8306  04D3  2CCF               	goto	u4175
  8307  04D4  3001               	movlw	1
  8308  04D5  00B9               	movwf	??___ftadd
  8309  04D6  0839               	movf	??___ftadd,w
  8310  04D7  07BE               	addwf	___ftadd@exp2,f
  8311  04D8                     l5319:	
  8312  04D8  083F               	movf	___ftadd@exp1,w
  8313  04D9  063E               	xorwf	___ftadd@exp2,w
  8314  04DA  1D03               	skipz
  8315  04DB  2CCE               	goto	l5317
  8316  04DC                     l926:	
  8317  04DC  1FBD               	btfss	___ftadd@sign,7
  8318  04DD  2CEE               	goto	l5323
  8319  04DE  30FF               	movlw	255
  8320  04DF  06B3               	xorwf	___ftadd@f1,f
  8321  04E0  30FF               	movlw	255
  8322  04E1  06B4               	xorwf	___ftadd@f1+1,f
  8323  04E2  30FF               	movlw	255
  8324  04E3  06B5               	xorwf	___ftadd@f1+2,f
  8325  04E4  3001               	movlw	1
  8326  04E5  07B3               	addwf	___ftadd@f1,f
  8327  04E6  3000               	movlw	0
  8328  04E7  1803               	skipnc
  8329  04E8  3001               	movlw	1
  8330  04E9  07B4               	addwf	___ftadd@f1+1,f
  8331  04EA  3000               	movlw	0
  8332  04EB  1803               	skipnc
  8333  04EC  3001               	movlw	1
  8334  04ED  07B5               	addwf	___ftadd@f1+2,f
  8335  04EE                     l5323:	
  8336  04EE  1F3D               	btfss	___ftadd@sign,6
  8337  04EF  2D00               	goto	l5327
  8338  04F0  30FF               	movlw	255
  8339  04F1  06B6               	xorwf	___ftadd@f2,f
  8340  04F2  30FF               	movlw	255
  8341  04F3  06B7               	xorwf	___ftadd@f2+1,f
  8342  04F4  30FF               	movlw	255
  8343  04F5  06B8               	xorwf	___ftadd@f2+2,f
  8344  04F6  3001               	movlw	1
  8345  04F7  07B6               	addwf	___ftadd@f2,f
  8346  04F8  3000               	movlw	0
  8347  04F9  1803               	skipnc
  8348  04FA  3001               	movlw	1
  8349  04FB  07B7               	addwf	___ftadd@f2+1,f
  8350  04FC  3000               	movlw	0
  8351  04FD  1803               	skipnc
  8352  04FE  3001               	movlw	1
  8353  04FF  07B8               	addwf	___ftadd@f2+2,f
  8354  0500                     l5327:	
  8355  0500  01BD               	clrf	___ftadd@sign
  8356  0501  0833               	movf	___ftadd@f1,w
  8357  0502  07B6               	addwf	___ftadd@f2,f
  8358  0503  0834               	movf	___ftadd@f1+1,w
  8359  0504  3DB7               	addwfc	___ftadd@f2+1,f
  8360  0505  0835               	movf	___ftadd@f1+2,w
  8361  0506  3DB8               	addwfc	___ftadd@f2+2,f
  8362  0507  1FB8               	btfss	___ftadd@f2+2,7
  8363  0508  2D1B               	goto	l5337
  8364  0509  30FF               	movlw	255
  8365  050A  06B6               	xorwf	___ftadd@f2,f
  8366  050B  30FF               	movlw	255
  8367  050C  06B7               	xorwf	___ftadd@f2+1,f
  8368  050D  30FF               	movlw	255
  8369  050E  06B8               	xorwf	___ftadd@f2+2,f
  8370  050F  3001               	movlw	1
  8371  0510  07B6               	addwf	___ftadd@f2,f
  8372  0511  3000               	movlw	0
  8373  0512  1803               	skipnc
  8374  0513  3001               	movlw	1
  8375  0514  07B7               	addwf	___ftadd@f2+1,f
  8376  0515  3000               	movlw	0
  8377  0516  1803               	skipnc
  8378  0517  3001               	movlw	1
  8379  0518  07B8               	addwf	___ftadd@f2+2,f
  8380  0519  01BD               	clrf	___ftadd@sign
  8381  051A  0ABD               	incf	___ftadd@sign,f
  8382  051B                     l5337:	
  8383  051B  0836               	movf	___ftadd@f2,w
  8384  051C  00F1               	movwf	?___ftpack
  8385  051D  0837               	movf	___ftadd@f2+1,w
  8386  051E  00F2               	movwf	?___ftpack+1
  8387  051F  0838               	movf	___ftadd@f2+2,w
  8388  0520  00F3               	movwf	?___ftpack+2
  8389  0521  083F               	movf	___ftadd@exp1,w
  8390  0522  00B9               	movwf	??___ftadd
  8391  0523  0839               	movf	??___ftadd,w
  8392  0524  00F4               	movwf	?___ftpack+3
  8393  0525  083D               	movf	___ftadd@sign,w
  8394  0526  00BA               	movwf	??___ftadd+1
  8395  0527  083A               	movf	??___ftadd+1,w
  8396  0528  00F5               	movwf	?___ftpack+4
  8397  0529  318D  25A7         	fcall	___ftpack
  8398  052B  0871               	movf	?___ftpack,w
  8399  052C  0020               	movlb	0	; select bank0
  8400  052D  00B3               	movwf	?___ftadd
  8401  052E  0872               	movf	?___ftpack+1,w
  8402  052F  00B4               	movwf	?___ftadd+1
  8403  0530  0873               	movf	?___ftpack+2,w
  8404  0531  00B5               	movwf	?___ftadd+2
  8405  0532  0008               	return
  8406  0533                     __end_of___ftadd:	
  8407                           
  8408                           	psect	text42
  8409  0C0E                     __ptext42:	
  8410 ;; *************** function ___altoft *****************
  8411 ;; Defined at:
  8412 ;;		line 43 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\altoft.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  c               4    6[BANK0 ] long 
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;  sign            1   11[BANK0 ] unsigned char 
  8417 ;;  exp             1   10[BANK0 ] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  3    6[BANK0 ] float 
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, status,0, pclath, cstack
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8427 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;Total ram usage:        8 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    3
  8434 ;; This function calls:
  8435 ;;		___ftpack
  8436 ;; This function is called by:
  8437 ;;		_floor
  8438 ;; This function uses a non-reentrant model
  8439 ;;
  8440                           
  8441                           
  8442                           ;psect for function ___altoft
  8443  0C0E                     ___altoft:	
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  8447  0C0E  0020               	movlb	0	; select bank0
  8448  0C0F  01AB               	clrf	___altoft@sign
  8449  0C10  308E               	movlw	142
  8450  0C11  00F9               	movwf	??___altoft
  8451  0C12  0879               	movf	??___altoft,w
  8452  0C13  00AA               	movwf	___altoft@exp
  8453  0C14  1FA9               	btfss	___altoft@c+3,7
  8454  0C15  2C23               	goto	l5213
  8455  0C16  09A6               	comf	___altoft@c,f
  8456  0C17  09A7               	comf	___altoft@c+1,f
  8457  0C18  09A8               	comf	___altoft@c+2,f
  8458  0C19  09A9               	comf	___altoft@c+3,f
  8459  0C1A  0AA6               	incf	___altoft@c,f
  8460  0C1B  1903               	skipnz
  8461  0C1C  0AA7               	incf	___altoft@c+1,f
  8462  0C1D  1903               	skipnz
  8463  0C1E  0AA8               	incf	___altoft@c+2,f
  8464  0C1F  1903               	skipnz
  8465  0C20  0AA9               	incf	___altoft@c+3,f
  8466  0C21  01AB               	clrf	___altoft@sign
  8467  0C22  0AAB               	incf	___altoft@sign,f
  8468  0C23                     l5213:	
  8469  0C23  30FF               	movlw	255
  8470  0C24  0529               	andwf	___altoft@c+3,w
  8471  0C25  1903               	btfsc	3,2
  8472  0C26  2C33               	goto	l5215
  8473  0C27  3001               	movlw	1
  8474  0C28                     u3915:	
  8475  0C28  36A9               	lsrf	___altoft@c+3,f
  8476  0C29  0CA8               	rrf	___altoft@c+2,f
  8477  0C2A  0CA7               	rrf	___altoft@c+1,f
  8478  0C2B  0CA6               	rrf	___altoft@c,f
  8479  0C2C  0B89               	decfsz	9,f
  8480  0C2D  2C28               	goto	u3915
  8481  0C2E  3001               	movlw	1
  8482  0C2F  00F9               	movwf	??___altoft
  8483  0C30  0879               	movf	??___altoft,w
  8484  0C31  07AA               	addwf	___altoft@exp,f
  8485  0C32  2C23               	goto	l5213
  8486  0C33                     l5215:	
  8487  0C33  0826               	movf	___altoft@c,w
  8488  0C34  00F1               	movwf	?___ftpack
  8489  0C35  0827               	movf	___altoft@c+1,w
  8490  0C36  00F2               	movwf	?___ftpack+1
  8491  0C37  0828               	movf	___altoft@c+2,w
  8492  0C38  00F3               	movwf	?___ftpack+2
  8493  0C39  082A               	movf	___altoft@exp,w
  8494  0C3A  00F9               	movwf	??___altoft
  8495  0C3B  0879               	movf	??___altoft,w
  8496  0C3C  00F4               	movwf	?___ftpack+3
  8497  0C3D  082B               	movf	___altoft@sign,w
  8498  0C3E  00FA               	movwf	??___altoft+1
  8499  0C3F  087A               	movf	??___altoft+1,w
  8500  0C40  00F5               	movwf	?___ftpack+4
  8501  0C41  318D  25A7         	fcall	___ftpack
  8502  0C43  0871               	movf	?___ftpack,w
  8503  0C44  0020               	movlb	0	; select bank0
  8504  0C45  00A6               	movwf	?___altoft
  8505  0C46  0872               	movf	?___ftpack+1,w
  8506  0C47  00A7               	movwf	?___altoft+1
  8507  0C48  0873               	movf	?___ftpack+2,w
  8508  0C49  00A8               	movwf	?___altoft+2
  8509  0C4A  0008               	return
  8510  0C4B                     __end_of___altoft:	
  8511                           
  8512                           	psect	text43
  8513  09EB                     __ptext43:	
  8514 ;; *************** function ___awtoft *****************
  8515 ;; Defined at:
  8516 ;;		line 33 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\awtoft.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  c               2    9[COMMON] int 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  sign            1    2[BANK0 ] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  3    9[COMMON] float 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0, pclath, cstack
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8530 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;Total ram usage:        6 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    3
  8537 ;; This function calls:
  8538 ;;		___ftpack
  8539 ;; This function is called by:
  8540 ;;		_ADCConv
  8541 ;;		_exp
  8542 ;;		_log
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function ___awtoft
  8548  09EB                     ___awtoft:	
  8549                           
  8550                           ;incstack = 0
  8551                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8552  09EB  0020               	movlb	0	; select bank0
  8553  09EC  01A2               	clrf	___awtoft@sign
  8554  09ED  1FFA               	btfss	___awtoft@c+1,7
  8555  09EE  29F6               	goto	l5227
  8556  09EF  09F9               	comf	___awtoft@c,f
  8557  09F0  09FA               	comf	___awtoft@c+1,f
  8558  09F1  0AF9               	incf	___awtoft@c,f
  8559  09F2  1903               	skipnz
  8560  09F3  0AFA               	incf	___awtoft@c+1,f
  8561  09F4  01A2               	clrf	___awtoft@sign
  8562  09F5  0AA2               	incf	___awtoft@sign,f
  8563  09F6                     l5227:	
  8564  09F6  0879               	movf	___awtoft@c,w
  8565  09F7  00F1               	movwf	?___ftpack
  8566  09F8  087A               	movf	___awtoft@c+1,w
  8567  09F9  00F2               	movwf	?___ftpack+1
  8568  09FA  01F3               	clrf	?___ftpack+2
  8569  09FB  308E               	movlw	142
  8570  09FC  00A0               	movwf	??___awtoft
  8571  09FD  0820               	movf	??___awtoft,w
  8572  09FE  00F4               	movwf	?___ftpack+3
  8573  09FF  0822               	movf	___awtoft@sign,w
  8574  0A00  00A1               	movwf	??___awtoft+1
  8575  0A01  0821               	movf	??___awtoft+1,w
  8576  0A02  00F5               	movwf	?___ftpack+4
  8577  0A03  318D  25A7         	fcall	___ftpack
  8578  0A05  0871               	movf	?___ftpack,w
  8579  0A06  00F9               	movwf	?___awtoft
  8580  0A07  0872               	movf	?___ftpack+1,w
  8581  0A08  00FA               	movwf	?___awtoft+1
  8582  0A09  0873               	movf	?___ftpack+2,w
  8583  0A0A  00FB               	movwf	?___awtoft+2
  8584  0A0B  0008               	return
  8585  0A0C                     __end_of___awtoft:	
  8586                           
  8587                           	psect	text44
  8588  098F                     __ptext44:	
  8589 ;; *************** function _LEDNormalFlash *****************
  8590 ;; Defined at:
  8591 ;;		line 25 in file "LED.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;  num             1    wreg     unsigned char 
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;  num             1    8[COMMON] unsigned char 
  8596 ;;  i               1    9[COMMON] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;		None               void
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0, pclath, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;Total ram usage:        3 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    3
  8613 ;; This function calls:
  8614 ;;		_DLYDelay_ms
  8615 ;; This function is called by:
  8616 ;;		_PGMSelLong
  8617 ;;		_RTXReadPkt
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           
  8622                           ;psect for function _LEDNormalFlash
  8623  098F                     _LEDNormalFlash:	
  8624                           
  8625                           ;incstack = 0
  8626                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  8627                           ;LEDNormalFlash@num stored from wreg
  8628  098F  00F8               	movwf	LEDNormalFlash@num
  8629                           
  8630                           ;LED.c: 26: unsigned char i;
  8631                           ;LED.c: 28: for(i=0;i<num;i++)
  8632  0990  01F9               	clrf	LEDNormalFlash@i
  8633  0991                     l4853:	
  8634  0991  0878               	movf	LEDNormalFlash@num,w
  8635  0992  0279               	subwf	LEDNormalFlash@i,w
  8636  0993  1803               	btfsc	3,0
  8637  0994  0008               	return
  8638  0995  0064               	clrwdt	;# 
  8639                           
  8640                           ;LED.c: 31: LATCbits.LATC7=0;
  8641  0996  0022               	movlb	2	; select bank2
  8642  0997  138E               	bcf	14,7	;volatile
  8643                           
  8644                           ;LED.c: 32: DLYDelay_ms(200);
  8645  0998  30C8               	movlw	200
  8646  0999  00F1               	movwf	?_DLYDelay_ms
  8647  099A  3000               	movlw	0
  8648  099B  00F2               	movwf	?_DLYDelay_ms+1
  8649  099C  3188  20B4  3189   	fcall	_DLYDelay_ms
  8650                           
  8651                           ;LED.c: 33: LATCbits.LATC7=1;
  8652  099F  0022               	movlb	2	; select bank2
  8653  09A0  178E               	bsf	14,7	;volatile
  8654                           
  8655                           ;LED.c: 34: DLYDelay_ms(200);
  8656  09A1  30C8               	movlw	200
  8657  09A2  00F1               	movwf	?_DLYDelay_ms
  8658  09A3  3000               	movlw	0
  8659  09A4  00F2               	movwf	?_DLYDelay_ms+1
  8660  09A5  3188  20B4  3189   	fcall	_DLYDelay_ms
  8661  09A8  3001               	movlw	1
  8662  09A9  00F7               	movwf	??_LEDNormalFlash
  8663  09AA  0877               	movf	??_LEDNormalFlash,w
  8664  09AB  07F9               	addwf	LEDNormalFlash@i,f
  8665  09AC  2991               	goto	l4853
  8666  09AD                     __end_of_LEDNormalFlash:	
  8667                           
  8668                           	psect	text45
  8669  08B4                     __ptext45:	
  8670 ;; *************** function _DLYDelay_ms *****************
  8671 ;; Defined at:
  8672 ;;		line 18 in file "DLY.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;  val             2    1[COMMON] unsigned short 
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;  i               2    5[COMMON] unsigned short 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;		None               void
  8679 ;; Registers used:
  8680 ;;		wreg, status,2
  8681 ;; Tracked objects:
  8682 ;;		On entry : 0/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8686 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;Total ram usage:        6 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:    2
  8693 ;; This function calls:
  8694 ;;		Nothing
  8695 ;; This function is called by:
  8696 ;;		_CC1Init
  8697 ;;		_LEDNormalFlash
  8698 ;;		_LEDFastFlash
  8699 ;;		_RTXAwake
  8700 ;;		_RTXStartSendData
  8701 ;;		_LEDVFastFlash
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           
  8706                           ;psect for function _DLYDelay_ms
  8707  08B4                     _DLYDelay_ms:	
  8708                           
  8709                           ;DLY.c: 19: unsigned short i;
  8710                           ;DLY.c: 21: for(i=0;i<val;i++)
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  8714  08B4  01F5               	clrf	DLYDelay_ms@i
  8715  08B5  01F6               	clrf	DLYDelay_ms@i+1
  8716  08B6                     l148:	
  8717  08B6  0872               	movf	DLYDelay_ms@val+1,w
  8718  08B7  0276               	subwf	DLYDelay_ms@i+1,w
  8719  08B8  1D03               	skipz
  8720  08B9  28BC               	goto	u3475
  8721  08BA  0871               	movf	DLYDelay_ms@val,w
  8722  08BB  0275               	subwf	DLYDelay_ms@i,w
  8723  08BC                     u3475:	
  8724  08BC  1803               	btfsc	3,0
  8725  08BD  0008               	return
  8726  08BE  0064               	clrwdt	;# 
  8727                           
  8728                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  8729  08BF  3003               	movlw	3
  8730  08C0  00F4               	movwf	??_DLYDelay_ms+1
  8731  08C1  3097               	movlw	151
  8732  08C2  00F3               	movwf	??_DLYDelay_ms
  8733  08C3                     u4437:	
  8734  08C3  0BF3               	decfsz	??_DLYDelay_ms,f
  8735  08C4  28C3               	goto	u4437
  8736  08C5  0BF4               	decfsz	??_DLYDelay_ms+1,f
  8737  08C6  28C3               	goto	u4437
  8738  08C7  28C8               	nop2
  8739  08C8  3001               	movlw	1
  8740  08C9  07F5               	addwf	DLYDelay_ms@i,f
  8741  08CA  3000               	movlw	0
  8742  08CB  3DF6               	addwfc	DLYDelay_ms@i+1,f
  8743  08CC  28B6               	goto	l148
  8744  08CD                     __end_of_DLYDelay_ms:	
  8745                           
  8746                           	psect	text46
  8747  0884                     __ptext46:	
  8748 ;; *************** function _PGMInit *****************
  8749 ;; Defined at:
  8750 ;;		line 25 in file "PGM.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;  state           1    wreg     unsigned char 
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;  state           1   70[BANK0 ] unsigned char 
  8755 ;; Return value:  Size  Location     Type
  8756 ;;		None               void
  8757 ;; Registers used:
  8758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;Total ram usage:        1 bytes
  8769 ;; Hardware stack levels used:    1
  8770 ;; Hardware stack levels required when called:    6
  8771 ;; This function calls:
  8772 ;;		_PGMReadNvm
  8773 ;;		_PGMCheckNvm
  8774 ;; This function is called by:
  8775 ;;		_main
  8776 ;; This function uses a non-reentrant model
  8777 ;;
  8778                           
  8779                           
  8780                           ;psect for function _PGMInit
  8781  0884                     _PGMInit:	
  8782                           
  8783                           ;incstack = 0
  8784                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8785                           ;PGMInit@state stored from wreg
  8786  0884  0020               	movlb	0	; select bank0
  8787  0885  00E6               	movwf	PGMInit@state
  8788                           
  8789                           ;PGM.c: 26: switch(state)
  8790  0886  2892               	goto	l4925
  8791  0887                     l4915:	
  8792                           ;PGM.c: 27: {
  8793                           ;PGM.c: 28: case 0:
  8794                           
  8795                           
  8796                           ;PGM.c: 30: T1CON=0b00000001;
  8797  0887  3001               	movlw	1
  8798  0888  0098               	movwf	24	;volatile
  8799                           
  8800                           ;PGM.c: 31: break;
  8801  0889  0008               	return
  8802  088A                     l4917:	
  8803                           ;PGM.c: 32: case 1:
  8804                           
  8805                           
  8806                           ;PGM.c: 34: tmrPgm=0;
  8807  088A  01EC               	clrf	_tmrPgm
  8808                           
  8809                           ;PGM.c: 35: pgm_flg.val=0;
  8810  088B  01EA               	clrf	_pgm_flg
  8811                           
  8812                           ;PGM.c: 36: PGMReadNvm();
  8813  088C  3197  27C7  3188   	fcall	_PGMReadNvm
  8814                           
  8815                           ;PGM.c: 37: PGMCheckNvm();
  8816  088F  3197  275F         	fcall	_PGMCheckNvm
  8817                           
  8818                           ;PGM.c: 42: }
  8819                           
  8820                           ;PGM.c: 38: break;
  8821  0891  0008               	return
  8822  0892                     l4925:	
  8823  0892  0020               	movlb	0	; select bank0
  8824  0893  0866               	movf	PGMInit@state,w
  8825                           
  8826                           ; Switch size 1, requested type "space"
  8827                           ; Number of cases is 2, Range of values is 0 to 1
  8828                           ; switch strategies available:
  8829                           ; Name         Instructions Cycles
  8830                           ; simple_byte            7     4 (average)
  8831                           ; direct_byte           10     6 (fixed)
  8832                           ; jumptable            260     6 (fixed)
  8833                           ;	Chosen strategy is simple_byte
  8834  0894  3A00               	xorlw	0	; case 0
  8835  0895  1903               	skipnz
  8836  0896  2887               	goto	l4915
  8837  0897  3A01               	xorlw	1	; case 1
  8838  0898  1903               	skipnz
  8839  0899  288A               	goto	l4917
  8840  089A  289B               	goto	l382
  8841  089B                     l382:	
  8842  089B  0008               	return
  8843  089C                     __end_of_PGMInit:	
  8844                           
  8845                           	psect	text47
  8846  175F                     __ptext47:	
  8847 ;; *************** function _PGMCheckNvm *****************
  8848 ;; Defined at:
  8849 ;;		line 74 in file "PGM.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;		None
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;		None
  8854 ;; Return value:  Size  Location     Type
  8855 ;;		None               void
  8856 ;; Registers used:
  8857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;Total ram usage:        0 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    5
  8870 ;; This function calls:
  8871 ;;		_PGMNvmReset
  8872 ;; This function is called by:
  8873 ;;		_PGMInit
  8874 ;; This function uses a non-reentrant model
  8875 ;;
  8876                           
  8877                           
  8878                           ;psect for function _PGMCheckNvm
  8879  175F                     _PGMCheckNvm:	
  8880                           
  8881                           ;PGM.c: 75: if(pgm_cfg.valChk1!=0xC5 || pgm_cfg.valChk2!=0x5C)
  8882                           
  8883                           ;incstack = 0
  8884                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8885  175F  0021               	movlb	1	; select bank1
  8886  1760  084A               	movf	_pgm_cfg^(0+128),w
  8887  1761  3AC5               	xorlw	197
  8888  1762  1D03               	skipz
  8889  1763  2F68               	goto	l4931
  8890  1764  084B               	movf	(_pgm_cfg^(0+128)+1),w
  8891  1765  3A5C               	xorlw	92
  8892  1766  1903               	skipnz
  8893  1767  0008               	return
  8894  1768                     l4931:	
  8895                           
  8896                           ;PGM.c: 76: PGMNvmReset();
  8897  1768  3197  27ED         	fcall	_PGMNvmReset
  8898  176A  0008               	return
  8899  176B                     __end_of_PGMCheckNvm:	
  8900                           
  8901                           	psect	text48
  8902  17ED                     __ptext48:	
  8903 ;; *************** function _PGMNvmReset *****************
  8904 ;; Defined at:
  8905 ;;		line 80 in file "PGM.c"
  8906 ;; Parameters:    Size  Location     Type
  8907 ;;		None
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;		None
  8910 ;; Return value:  Size  Location     Type
  8911 ;;		None               void
  8912 ;; Registers used:
  8913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;Total ram usage:        1 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    4
  8926 ;; This function calls:
  8927 ;;		_PGMWriteNvm
  8928 ;; This function is called by:
  8929 ;;		_PGMCheckNvm
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           
  8934                           ;psect for function _PGMNvmReset
  8935  17ED                     _PGMNvmReset:	
  8936                           
  8937                           ;PGM.c: 82: pgm_cfg.valChk1=0xC5;
  8938                           
  8939                           ;incstack = 0
  8940                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8941  17ED  30C5               	movlw	197
  8942  17EE  0020               	movlb	0	; select bank0
  8943  17EF  00E5               	movwf	??_PGMNvmReset
  8944  17F0  0865               	movf	??_PGMNvmReset,w
  8945  17F1  0021               	movlb	1	; select bank1
  8946  17F2  00CA               	movwf	_pgm_cfg^(0+128)
  8947                           
  8948                           ;PGM.c: 83: pgm_cfg.valChk2=0x5C;
  8949  17F3  305C               	movlw	92
  8950  17F4  0020               	movlb	0	; select bank0
  8951  17F5  00E5               	movwf	??_PGMNvmReset
  8952  17F6  0865               	movf	??_PGMNvmReset,w
  8953  17F7  0021               	movlb	1	; select bank1
  8954  17F8  00CB               	movwf	(_pgm_cfg^(0+128)+1)
  8955                           
  8956                           ;PGM.c: 84: pgm_cfg.menu=0x00;
  8957  17F9  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  8958                           
  8959                           ;PGM.c: 85: pgm_cfg.sensId=0x00;
  8960  17FA  01CD               	clrf	(_pgm_cfg^(0+128)+3)
  8961                           
  8962                           ;PGM.c: 86: pgm_cfg.baseId=0x00;
  8963  17FB  01CE               	clrf	(_pgm_cfg^(0+128)+4)
  8964                           
  8965                           ;PGM.c: 88: PGMWriteNvm();
  8966  17FC  3197  27DA         	fcall	_PGMWriteNvm
  8967  17FE  0001               	reset	;# 
  8968  17FF  0008               	return
  8969  1800                     __end_of_PGMNvmReset:	
  8970                           
  8971                           	psect	text49
  8972  17DA                     __ptext49:	
  8973 ;; *************** function _PGMWriteNvm *****************
  8974 ;; Defined at:
  8975 ;;		line 69 in file "PGM.c"
  8976 ;; Parameters:    Size  Location     Type
  8977 ;;		None
  8978 ;; Auto vars:     Size  Location     Type
  8979 ;;		None
  8980 ;; Return value:  Size  Location     Type
  8981 ;;		None               void
  8982 ;; Registers used:
  8983 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8984 ;; Tracked objects:
  8985 ;;		On entry : 0/0
  8986 ;;		On exit  : 0/0
  8987 ;;		Unchanged: 0/0
  8988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;Total ram usage:        4 bytes
  8994 ;; Hardware stack levels used:    1
  8995 ;; Hardware stack levels required when called:    3
  8996 ;; This function calls:
  8997 ;;		_NVMWrite
  8998 ;; This function is called by:
  8999 ;;		_PGMNvmReset
  9000 ;;		_PGMSelDown
  9001 ;;		_PGMSelLong
  9002 ;;		_RTXReadPkt
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           
  9007                           ;psect for function _PGMWriteNvm
  9008  17DA                     _PGMWriteNvm:	
  9009                           
  9010                           ;PGM.c: 70: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  9011                           
  9012                           ;incstack = 0
  9013                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9014  17DA  303A               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9015  17DB  00F8               	movwf	??_PGMWriteNvm
  9016  17DC  3088               	movlw	(high __stringtab)| (0+128)
  9017  17DD  00F9               	movwf	??_PGMWriteNvm+1
  9018  17DE  0878               	movf	??_PGMWriteNvm,w
  9019  17DF  00F1               	movwf	?_NVMWrite
  9020  17E0  0879               	movf	??_PGMWriteNvm+1,w
  9021  17E1  00F2               	movwf	?_NVMWrite+1
  9022  17E2  30CA               	movlw	_pgm_cfg& (0+255)
  9023  17E3  00FA               	movwf	??_PGMWriteNvm+2
  9024  17E4  087A               	movf	??_PGMWriteNvm+2,w
  9025  17E5  00F3               	movwf	?_NVMWrite+2
  9026  17E6  3005               	movlw	5
  9027  17E7  00FB               	movwf	??_PGMWriteNvm+3
  9028  17E8  087B               	movf	??_PGMWriteNvm+3,w
  9029  17E9  00F4               	movwf	?_NVMWrite+3
  9030  17EA  3185  2533         	fcall	_NVMWrite
  9031  17EC  0008               	return
  9032  17ED                     __end_of_PGMWriteNvm:	
  9033                           
  9034                           	psect	text50
  9035  0533                     __ptext50:	
  9036 ;; *************** function _NVMWrite *****************
  9037 ;; Defined at:
  9038 ;;		line 39 in file "NVM.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  addr            2    1[COMMON] unsigned short 
  9041 ;;  source          1    3[COMMON] PTR unsigned char 
  9042 ;;		 -> pgm_cfg(5), 
  9043 ;;  len             1    4[COMMON] unsigned char 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  9046 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  9047 ;;  j               1   68[BANK0 ] unsigned char 
  9048 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  9049 ;;  i               1   66[BANK0 ] unsigned char 
  9050 ;; Return value:  Size  Location     Type
  9051 ;;		None               void
  9052 ;; Registers used:
  9053 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9054 ;; Tracked objects:
  9055 ;;		On entry : 0/0
  9056 ;;		On exit  : 0/0
  9057 ;;		Unchanged: 0/0
  9058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;Total ram usage:       76 bytes
  9064 ;; Hardware stack levels used:    1
  9065 ;; Hardware stack levels required when called:    2
  9066 ;; This function calls:
  9067 ;;		Nothing
  9068 ;; This function is called by:
  9069 ;;		_PGMWriteNvm
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           
  9074                           ;psect for function _NVMWrite
  9075  0533                     _NVMWrite:	
  9076                           
  9077                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  9078                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  9079                           ;NVM.c: 43: INTCONbits.GIE=0;
  9080                           
  9081                           ;incstack = 0
  9082                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  9083  0533  138B               	bcf	11,7	;volatile
  9084                           
  9085                           ;NVM.c: 44: PMCON1bits.WREN=1;
  9086  0534  0023               	movlb	3	; select bank3
  9087  0535  1515               	bsf	21,2	;volatile
  9088                           
  9089                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  9090  0536  1315               	bcf	21,6	;volatile
  9091                           
  9092                           ;NVM.c: 48: i=0;
  9093  0537  0020               	movlb	0	; select bank0
  9094  0538  01E2               	clrf	NVMWrite@i
  9095                           
  9096                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  9097  0539  30E0               	movlw	224
  9098  053A  0571               	andwf	NVMWrite@addr,w
  9099  053B  00E0               	movwf	NVMWrite@rowAddr
  9100  053C  30FF               	movlw	255
  9101  053D  0572               	andwf	NVMWrite@addr+1,w
  9102  053E  00E1               	movwf	NVMWrite@rowAddr+1
  9103                           
  9104                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  9105  053F  0871               	movf	NVMWrite@addr,w
  9106  0540  391F               	andlw	31
  9107  0541  00F5               	movwf	??_NVMWrite
  9108  0542  0875               	movf	??_NVMWrite,w
  9109  0543  00E3               	movwf	NVMWrite@latchAddr
  9110  0544                     l251:	
  9111                           ;NVM.c: 52: while(i<len)
  9112                           
  9113  0544  0874               	movf	NVMWrite@len,w
  9114  0545  0262               	subwf	NVMWrite@i,w
  9115  0546  1803               	btfsc	3,0
  9116  0547  2DED               	goto	l271
  9117  0548  0064               	clrwdt	;# 
  9118                           
  9119                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9120  0549  0020               	movlb	0	; select bank0
  9121  054A  01E4               	clrf	NVMWrite@j
  9122  054B  3020               	movlw	32
  9123  054C  0264               	subwf	NVMWrite@j,w
  9124  054D  1803               	btfsc	3,0
  9125  054E  2D73               	goto	l254
  9126  054F                     l253:	
  9127  054F  0064               	clrwdt	;# 
  9128                           
  9129                           ;NVM.c: 60: PMADR=(rowAddr+j);
  9130  0550  0020               	movlb	0	; select bank0
  9131  0551  0864               	movf	NVMWrite@j,w
  9132  0552  0760               	addwf	NVMWrite@rowAddr,w
  9133  0553  00F5               	movwf	??_NVMWrite
  9134  0554  0861               	movf	NVMWrite@rowAddr+1,w
  9135  0555  1803               	skipnc
  9136  0556  0A61               	incf	NVMWrite@rowAddr+1,w
  9137  0557  00F6               	movwf	??_NVMWrite+1
  9138  0558  0875               	movf	??_NVMWrite,w
  9139  0559  0023               	movlb	3	; select bank3
  9140  055A  0091               	movwf	17	;volatile
  9141  055B  0876               	movf	??_NVMWrite+1,w
  9142  055C  0092               	movwf	18	;volatile
  9143                           
  9144                           ;NVM.c: 61: PMCON1bits.RD=1;
  9145  055D  1415               	bsf	21,0	;volatile
  9146  055E                     l255:	
  9147                           ;NVM.c: 62: while(PMCON1bits.RD);
  9148                           
  9149  055E  1815               	btfsc	21,0	;volatile
  9150  055F  2D5E               	goto	l255
  9151                           
  9152                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  9153  0560  0020               	movlb	0	; select bank0
  9154  0561  3564               	lslf	NVMWrite@j,w
  9155  0562  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9156  0563  0086               	movwf	6
  9157  0564  0187               	clrf	7
  9158  0565  0023               	movlb	3	; select bank3
  9159  0566  0813               	movf	19,w	;volatile
  9160  0567  3FC0               	movwi [0]fsr1
  9161  0568  0814               	movf	20,w	;volatile
  9162  0569  3FC1               	movwi [1]fsr1
  9163  056A  3001               	movlw	1
  9164  056B  00F5               	movwf	??_NVMWrite
  9165  056C  0875               	movf	??_NVMWrite,w
  9166  056D  0020               	movlb	0	; select bank0
  9167  056E  07E4               	addwf	NVMWrite@j,f
  9168  056F  3020               	movlw	32
  9169  0570  0264               	subwf	NVMWrite@j,w
  9170  0571  1C03               	skipc
  9171  0572  2D4F               	goto	l253
  9172  0573                     l254:	
  9173                           
  9174                           ;NVM.c: 64: }
  9175                           ;NVM.c: 67: PMCON1bits.FREE=1;
  9176  0573  0023               	movlb	3	; select bank3
  9177  0574  1615               	bsf	21,4	;volatile
  9178                           
  9179                           ;NVM.c: 68: PMADR=rowAddr;
  9180  0575  0020               	movlb	0	; select bank0
  9181  0576  0861               	movf	NVMWrite@rowAddr+1,w
  9182  0577  0023               	movlb	3	; select bank3
  9183  0578  0192               	clrf	18	;volatile
  9184  0579  0792               	addwf	18,f	;volatile
  9185  057A  0020               	movlb	0	; select bank0
  9186  057B  0860               	movf	NVMWrite@rowAddr,w
  9187  057C  0023               	movlb	3	; select bank3
  9188  057D  0191               	clrf	17	;volatile
  9189  057E  0791               	addwf	17,f	;volatile
  9190                           
  9191                           ;NVM.c: 69: PMCON2=0x55;
  9192  057F  3055               	movlw	85
  9193  0580  0096               	movwf	22	;volatile
  9194                           
  9195                           ;NVM.c: 70: PMCON2=0xAA;
  9196  0581  30AA               	movlw	170
  9197  0582  0096               	movwf	22	;volatile
  9198                           
  9199                           ;NVM.c: 71: PMCON1bits.WR=1;
  9200  0583  1495               	bsf	21,1	;volatile
  9201  0584                     l258:	
  9202                           ;NVM.c: 72: while(PMCON1bits.WR);
  9203                           
  9204  0584  1895               	btfsc	21,1	;volatile
  9205  0585  2D84               	goto	l258
  9206                           
  9207                           ;NVM.c: 73: _nop();
  9208  0586  0000               	nop
  9209                           
  9210                           ;NVM.c: 74: _nop();
  9211  0587  0000               	nop
  9212                           
  9213                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  9214  0588  3020               	movlw	32
  9215  0589  0020               	movlb	0	; select bank0
  9216  058A  0263               	subwf	NVMWrite@latchAddr,w
  9217  058B  1803               	btfsc	3,0
  9218  058C  2DB0               	goto	l3681
  9219  058D                     l261:	
  9220  058D  0064               	clrwdt	;# 
  9221                           
  9222                           ;NVM.c: 81: if(i>=len)
  9223  058E  0874               	movf	NVMWrite@len,w
  9224  058F  0020               	movlb	0	; select bank0
  9225  0590  0262               	subwf	NVMWrite@i,w
  9226  0591  1803               	btfsc	3,0
  9227  0592  2DB0               	goto	l3681
  9228                           
  9229                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  9230                           
  9231                           ;NVM.c: 82: break;
  9232  0593  0862               	movf	NVMWrite@i,w
  9233  0594  0773               	addwf	NVMWrite@source,w
  9234  0595  00F5               	movwf	??_NVMWrite
  9235  0596  0875               	movf	??_NVMWrite,w
  9236  0597  0086               	movwf	6
  9237  0598  0187               	clrf	7
  9238  0599  0801               	movf	1,w
  9239  059A  00F6               	movwf	??_NVMWrite+1
  9240  059B  01F7               	clrf	??_NVMWrite+2
  9241  059C  3563               	lslf	NVMWrite@latchAddr,w
  9242  059D  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9243  059E  0086               	movwf	6
  9244  059F  0187               	clrf	7
  9245  05A0  0876               	movf	??_NVMWrite+1,w
  9246  05A1  3FC0               	movwi [0]fsr1
  9247  05A2  0877               	movf	??_NVMWrite+2,w
  9248  05A3  3FC1               	movwi [1]fsr1
  9249                           
  9250                           ;NVM.c: 85: i++;
  9251  05A4  3001               	movlw	1
  9252  05A5  00F5               	movwf	??_NVMWrite
  9253  05A6  0875               	movf	??_NVMWrite,w
  9254  05A7  07E2               	addwf	NVMWrite@i,f
  9255  05A8  3001               	movlw	1
  9256  05A9  00F5               	movwf	??_NVMWrite
  9257  05AA  0875               	movf	??_NVMWrite,w
  9258  05AB  07E3               	addwf	NVMWrite@latchAddr,f
  9259  05AC  3020               	movlw	32
  9260  05AD  0263               	subwf	NVMWrite@latchAddr,w
  9261  05AE  1C03               	skipc
  9262  05AF  2D8D               	goto	l261
  9263  05B0                     l3681:	
  9264                           
  9265                           ;NVM.c: 86: }
  9266                           ;NVM.c: 88: latchAddr=0;
  9267  05B0  01E3               	clrf	NVMWrite@latchAddr
  9268                           
  9269                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9270  05B1  01E4               	clrf	NVMWrite@j
  9271  05B2  3020               	movlw	32
  9272  05B3  0264               	subwf	NVMWrite@j,w
  9273  05B4  1803               	btfsc	3,0
  9274  05B5  2DE8               	goto	l3703
  9275  05B6                     l3687:	
  9276                           
  9277                           ;NVM.c: 92: {
  9278                           ;NVM.c: 94: PMADR=(rowAddr+j);
  9279  05B6  0864               	movf	NVMWrite@j,w
  9280  05B7  0760               	addwf	NVMWrite@rowAddr,w
  9281  05B8  00F5               	movwf	??_NVMWrite
  9282  05B9  0861               	movf	NVMWrite@rowAddr+1,w
  9283  05BA  1803               	skipnc
  9284  05BB  0A61               	incf	NVMWrite@rowAddr+1,w
  9285  05BC  00F6               	movwf	??_NVMWrite+1
  9286  05BD  0875               	movf	??_NVMWrite,w
  9287  05BE  0023               	movlb	3	; select bank3
  9288  05BF  0091               	movwf	17	;volatile
  9289  05C0  0876               	movf	??_NVMWrite+1,w
  9290  05C1  0092               	movwf	18	;volatile
  9291                           
  9292                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  9293  05C2  0020               	movlb	0	; select bank0
  9294  05C3  3564               	lslf	NVMWrite@j,w
  9295  05C4  3E20               	addlw	NVMWrite@bufTmpRow& (0+255)
  9296  05C5  0086               	movwf	6
  9297  05C6  0187               	clrf	7
  9298  05C7  3F40               	moviw [0]fsr1
  9299  05C8  0023               	movlb	3	; select bank3
  9300  05C9  0093               	movwf	19	;volatile
  9301  05CA  3F41               	moviw [1]fsr1
  9302  05CB  0094               	movwf	20	;volatile
  9303                           
  9304                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  9305  05CC  0020               	movlb	0	; select bank0
  9306  05CD  0864               	movf	NVMWrite@j,w
  9307  05CE  3A1F               	xorlw	31
  9308  05CF  1D03               	skipz
  9309  05D0  2DD4               	goto	l266
  9310                           
  9311                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  9312  05D1  0023               	movlb	3	; select bank3
  9313  05D2  1295               	bcf	21,5	;volatile
  9314  05D3  2DD6               	goto	l3695
  9315  05D4                     l266:	
  9316                           
  9317                           ;NVM.c: 99: else
  9318                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  9319  05D4  0023               	movlb	3	; select bank3
  9320  05D5  1695               	bsf	21,5	;volatile
  9321  05D6                     l3695:	
  9322                           
  9323                           ;NVM.c: 101: PMCON2=0x55;
  9324  05D6  3055               	movlw	85
  9325  05D7  0096               	movwf	22	;volatile
  9326                           
  9327                           ;NVM.c: 102: PMCON2=0xAA;
  9328  05D8  30AA               	movlw	170
  9329  05D9  0096               	movwf	22	;volatile
  9330                           
  9331                           ;NVM.c: 103: PMCON1bits.WR=1;
  9332  05DA  1495               	bsf	21,1	;volatile
  9333  05DB                     l268:	
  9334                           ;NVM.c: 104: while(PMCON1bits.WR);
  9335                           
  9336  05DB  1895               	btfsc	21,1	;volatile
  9337  05DC  2DDB               	goto	l268
  9338                           
  9339                           ;NVM.c: 105: _nop();
  9340  05DD  0000               	nop
  9341                           
  9342                           ;NVM.c: 106: _nop();
  9343  05DE  0000               	nop
  9344  05DF  3001               	movlw	1
  9345  05E0  00F5               	movwf	??_NVMWrite
  9346  05E1  0875               	movf	??_NVMWrite,w
  9347  05E2  0020               	movlb	0	; select bank0
  9348  05E3  07E4               	addwf	NVMWrite@j,f
  9349  05E4  3020               	movlw	32
  9350  05E5  0264               	subwf	NVMWrite@j,w
  9351  05E6  1C03               	skipc
  9352  05E7  2DB6               	goto	l3687
  9353  05E8                     l3703:	
  9354                           
  9355                           ;NVM.c: 107: }
  9356                           ;NVM.c: 109: rowAddr+=0x0020;
  9357  05E8  3020               	movlw	32
  9358  05E9  07E0               	addwf	NVMWrite@rowAddr,f
  9359  05EA  3000               	movlw	0
  9360  05EB  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  9361  05EC  2D44               	goto	l251
  9362  05ED                     l271:	
  9363                           
  9364                           ;NVM.c: 110: }
  9365                           ;NVM.c: 112: INTCONbits.GIE=1;
  9366  05ED  178B               	bsf	11,7	;volatile
  9367                           
  9368                           ;NVM.c: 113: PMCON1bits.WREN=0;
  9369  05EE  0023               	movlb	3	; select bank3
  9370  05EF  1115               	bcf	21,2	;volatile
  9371  05F0  0008               	return
  9372  05F1                     __end_of_NVMWrite:	
  9373                           
  9374                           	psect	text51
  9375  17C7                     __ptext51:	
  9376 ;; *************** function _PGMReadNvm *****************
  9377 ;; Defined at:
  9378 ;;		line 64 in file "PGM.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;		None               void
  9385 ;; Registers used:
  9386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;Total ram usage:        4 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    3
  9399 ;; This function calls:
  9400 ;;		_NVMRead
  9401 ;; This function is called by:
  9402 ;;		_PGMInit
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _PGMReadNvm
  9408  17C7                     _PGMReadNvm:	
  9409                           
  9410                           ;PGM.c: 65: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  9411                           
  9412                           ;incstack = 0
  9413                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9414  17C7  303A               	movlw	(_nvm_pgm_cfg| (0+32768))& (0+255)
  9415  17C8  00F8               	movwf	??_PGMReadNvm
  9416  17C9  3088               	movlw	(high __stringtab)| (0+128)
  9417  17CA  00F9               	movwf	??_PGMReadNvm+1
  9418  17CB  0878               	movf	??_PGMReadNvm,w
  9419  17CC  00F1               	movwf	?_NVMRead
  9420  17CD  0879               	movf	??_PGMReadNvm+1,w
  9421  17CE  00F2               	movwf	?_NVMRead+1
  9422  17CF  30CA               	movlw	_pgm_cfg& (0+255)
  9423  17D0  00FA               	movwf	??_PGMReadNvm+2
  9424  17D1  087A               	movf	??_PGMReadNvm+2,w
  9425  17D2  00F3               	movwf	?_NVMRead+2
  9426  17D3  3005               	movlw	5
  9427  17D4  00FB               	movwf	??_PGMReadNvm+3
  9428  17D5  087B               	movf	??_PGMReadNvm+3,w
  9429  17D6  00F4               	movwf	?_NVMRead+3
  9430  17D7  318A  2299         	fcall	_NVMRead
  9431  17D9  0008               	return
  9432  17DA                     __end_of_PGMReadNvm:	
  9433                           
  9434                           	psect	text52
  9435  0A99                     __ptext52:	
  9436 ;; *************** function _NVMRead *****************
  9437 ;; Defined at:
  9438 ;;		line 24 in file "NVM.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  addr            2    1[COMMON] unsigned short 
  9441 ;;  dest            1    3[COMMON] PTR unsigned char 
  9442 ;;		 -> pgm_cfg(5), 
  9443 ;;  len             1    4[COMMON] unsigned char 
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;  i               1    7[COMMON] unsigned char 
  9446 ;; Return value:  Size  Location     Type
  9447 ;;		None               void
  9448 ;; Registers used:
  9449 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9455 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;Total ram usage:        7 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    2
  9462 ;; This function calls:
  9463 ;;		Nothing
  9464 ;; This function is called by:
  9465 ;;		_PGMReadNvm
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           
  9470                           ;psect for function _NVMRead
  9471  0A99                     _NVMRead:	
  9472                           
  9473                           ;NVM.c: 25: unsigned char i;
  9474                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  9475                           
  9476                           ;incstack = 0
  9477                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  9478  0A99  0023               	movlb	3	; select bank3
  9479  0A9A  1315               	bcf	21,6	;volatile
  9480                           
  9481                           ;NVM.c: 28: for(i=0;i<len;i++)
  9482  0A9B  01F7               	clrf	NVMRead@i
  9483  0A9C                     l3633:	
  9484  0A9C  0874               	movf	NVMRead@len,w
  9485  0A9D  0277               	subwf	NVMRead@i,w
  9486  0A9E  1803               	btfsc	3,0
  9487  0A9F  0008               	return
  9488  0AA0  0064               	clrwdt	;# 
  9489                           
  9490                           ;NVM.c: 31: PMADR=(addr+i);
  9491  0AA1  0877               	movf	NVMRead@i,w
  9492  0AA2  0771               	addwf	NVMRead@addr,w
  9493  0AA3  00F5               	movwf	??_NVMRead
  9494  0AA4  0872               	movf	NVMRead@addr+1,w
  9495  0AA5  1803               	skipnc
  9496  0AA6  0A72               	incf	NVMRead@addr+1,w
  9497  0AA7  00F6               	movwf	??_NVMRead+1
  9498  0AA8  0875               	movf	??_NVMRead,w
  9499  0AA9  0023               	movlb	3	; select bank3
  9500  0AAA  0091               	movwf	17	;volatile
  9501  0AAB  0876               	movf	??_NVMRead+1,w
  9502  0AAC  0092               	movwf	18	;volatile
  9503                           
  9504                           ;NVM.c: 32: PMCON1bits.RD=1;
  9505  0AAD  1415               	bsf	21,0	;volatile
  9506  0AAE                     l244:	
  9507                           ;NVM.c: 33: while(PMCON1bits.RD);
  9508                           
  9509  0AAE  1815               	btfsc	21,0	;volatile
  9510  0AAF  2AAE               	goto	l244
  9511                           
  9512                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  9513  0AB0  0813               	movf	19,w	;volatile
  9514  0AB1  00F5               	movwf	??_NVMRead
  9515  0AB2  0877               	movf	NVMRead@i,w
  9516  0AB3  0773               	addwf	NVMRead@dest,w
  9517  0AB4  00F6               	movwf	??_NVMRead+1
  9518  0AB5  0876               	movf	??_NVMRead+1,w
  9519  0AB6  0086               	movwf	6
  9520  0AB7  0187               	clrf	7
  9521  0AB8  0875               	movf	??_NVMRead,w
  9522  0AB9  0081               	movwf	1
  9523  0ABA  3001               	movlw	1
  9524  0ABB  00F5               	movwf	??_NVMRead
  9525  0ABC  0875               	movf	??_NVMRead,w
  9526  0ABD  07F7               	addwf	NVMRead@i,f
  9527  0ABE  2A9C               	goto	l3633
  9528  0ABF                     __end_of_NVMRead:	
  9529                           
  9530                           	psect	text53
  9531  0937                     __ptext53:	
  9532 ;; *************** function _DINTask *****************
  9533 ;; Defined at:
  9534 ;;		line 80 in file "DIN.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;		None               void
  9541 ;; Registers used:
  9542 ;;		wreg, status,2, status,0
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9551 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;Total ram usage:        1 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:    2
  9555 ;; This function calls:
  9556 ;;		Nothing
  9557 ;; This function is called by:
  9558 ;;		_main
  9559 ;; This function uses a non-reentrant model
  9560 ;;
  9561                           
  9562                           
  9563                           ;psect for function _DINTask
  9564  0937                     _DINTask:	
  9565                           
  9566                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9567                           
  9568                           ;incstack = 0
  9569                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9570  0937  0020               	movlb	0	; select bank0
  9571  0938  01EF               	clrf	_u_in_sta_tmpTask
  9572                           
  9573                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9574  0939  1D0D               	btfss	13,2	;volatile
  9575                           
  9576                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9577  093A  146F               	bsf	_u_in_sta_tmpTask,0
  9578                           
  9579                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9580  093B  086F               	movf	_u_in_sta_tmpTask,w
  9581  093C  3901               	andlw	1
  9582  093D  00F1               	movwf	??_DINTask
  9583  093E  087C               	movf	_u_in_sta_currTask,w
  9584  093F  3901               	andlw	1
  9585  0940  0671               	xorwf	??_DINTask,w
  9586  0941  1903               	skipnz
  9587  0942  294A               	goto	l3747
  9588                           
  9589                           ;DIN.c: 87: {
  9590                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9591  0943  107C               	bcf	_u_in_sta_currTask,0
  9592  0944  1C6F               	btfss	_u_in_sta_tmpTask,0
  9593  0945  2947               	goto	l3743
  9594  0946  147C               	bsf	_u_in_sta_currTask,0
  9595  0947                     l3743:	
  9596                           
  9597                           ;DIN.c: 89: tmrDbncSel=0;
  9598  0947  0020               	movlb	0	; select bank0
  9599  0948  01EB               	clrf	_tmrDbncSel
  9600                           
  9601                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9602  0949  146E               	bsf	_u_flg_din,0
  9603  094A                     l3747:	
  9604                           
  9605                           ;DIN.c: 91: }
  9606                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9607  094A  1C7C               	btfss	_u_in_sta_currTask,0
  9608  094B  294E               	goto	l3751
  9609                           
  9610                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9611  094C  14EE               	bsf	_u_flg_din,1
  9612  094D  0008               	return
  9613  094E                     l3751:	
  9614                           
  9615                           ;DIN.c: 96: else
  9616                           ;DIN.c: 97: {
  9617                           ;DIN.c: 98: tmrLongSel=0;
  9618  094E  0021               	movlb	1	; select bank1
  9619  094F  01AB               	clrf	_tmrLongSel^(0+128)
  9620  0950  01AC               	clrf	(_tmrLongSel+1)^(0+128)
  9621                           
  9622                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9623  0951  0020               	movlb	0	; select bank0
  9624  0952  10EE               	bcf	_u_flg_din,1
  9625  0953  0008               	return
  9626  0954                     __end_of_DINTask:	
  9627                           
  9628                           	psect	text54
  9629  17A5                     __ptext54:	
  9630 ;; *************** function _DINInit *****************
  9631 ;; Defined at:
  9632 ;;		line 25 in file "DIN.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;  sta             1    wreg     unsigned char 
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  sta             1    1[COMMON] unsigned char 
  9637 ;; Return value:  Size  Location     Type
  9638 ;;		None               void
  9639 ;; Registers used:
  9640 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;Total ram usage:        1 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; Hardware stack levels required when called:    2
  9653 ;; This function calls:
  9654 ;;		Nothing
  9655 ;; This function is called by:
  9656 ;;		_main
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           
  9661                           ;psect for function _DINInit
  9662  17A5                     _DINInit:	
  9663                           
  9664                           ;incstack = 0
  9665                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9666                           ;DINInit@sta stored from wreg
  9667  17A5  00F1               	movwf	DINInit@sta
  9668                           
  9669                           ;DIN.c: 26: switch(sta)
  9670  17A6  2FB0               	goto	l3711
  9671  17A7                     l3707:	
  9672                           ;DIN.c: 27: {
  9673                           ;DIN.c: 31: case 1:
  9674                           
  9675                           
  9676                           ;DIN.c: 33: u_flg_din.val=0;
  9677  17A7  0020               	movlb	0	; select bank0
  9678  17A8  01EE               	clrf	_u_flg_din
  9679                           
  9680                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9681  17A9  01FC               	clrf	_u_in_sta_currTask
  9682                           
  9683                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9684  17AA  01EF               	clrf	_u_in_sta_tmpTask
  9685                           
  9686                           ;DIN.c: 36: u_in_ev_up.val=0;
  9687  17AB  0021               	movlb	1	; select bank1
  9688  17AC  01B7               	clrf	_u_in_ev_up^(0+128)
  9689                           
  9690                           ;DIN.c: 37: u_in_ev_down.val=0;
  9691  17AD  01B5               	clrf	_u_in_ev_down^(0+128)
  9692                           
  9693                           ;DIN.c: 38: u_in_ev_long.val=0;
  9694  17AE  01B6               	clrf	_u_in_ev_long^(0+128)
  9695                           
  9696                           ;DIN.c: 43: }
  9697                           
  9698                           ;DIN.c: 39: break;
  9699  17AF  0008               	return
  9700  17B0                     l3711:	
  9701  17B0  0871               	movf	DINInit@sta,w
  9702                           
  9703                           ; Switch size 1, requested type "space"
  9704                           ; Number of cases is 1, Range of values is 1 to 1
  9705                           ; switch strategies available:
  9706                           ; Name         Instructions Cycles
  9707                           ; simple_byte            4     3 (average)
  9708                           ; direct_byte           11     9 (fixed)
  9709                           ; jumptable            263     9 (fixed)
  9710                           ;	Chosen strategy is simple_byte
  9711  17B1  3A01               	xorlw	1	; case 1
  9712  17B2  1903               	skipnz
  9713  17B3  2FA7               	goto	l3707
  9714  17B4  2FB5               	goto	l296
  9715  17B5                     l296:	
  9716  17B5  0008               	return
  9717  17B6                     __end_of_DINInit:	
  9718                           
  9719                           	psect	text55
  9720  1754                     __ptext55:	
  9721 ;; *************** function _NVMInit *****************
  9722 ;; Defined at:
  9723 ;;		line 7 in file "NVM.c"
  9724 ;; Parameters:    Size  Location     Type
  9725 ;;  sta             1    wreg     unsigned char 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  sta             1    1[COMMON] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;		None               void
  9730 ;; Registers used:
  9731 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/0
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;Total ram usage:        1 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; Hardware stack levels required when called:    2
  9744 ;; This function calls:
  9745 ;;		Nothing
  9746 ;; This function is called by:
  9747 ;;		_main
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           
  9752                           ;psect for function _NVMInit
  9753  1754                     _NVMInit:	
  9754                           
  9755                           ;incstack = 0
  9756                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  9757                           ;NVMInit@sta stored from wreg
  9758  1754  00F1               	movwf	NVMInit@sta
  9759                           
  9760                           ;NVM.c: 8: switch(sta)
  9761  1755  2F59               	goto	l3619
  9762  1756                     l3615:	
  9763                           ;NVM.c: 9: {
  9764                           ;NVM.c: 10: case 0:
  9765                           
  9766                           
  9767                           ;NVM.c: 12: PMCON1=0b00000000;
  9768  1756  0023               	movlb	3	; select bank3
  9769  1757  0195               	clrf	21	;volatile
  9770                           
  9771                           ;NVM.c: 20: }
  9772                           
  9773                           ;NVM.c: 13: break;
  9774  1758  0008               	return
  9775  1759                     l3619:	
  9776  1759  0871               	movf	NVMInit@sta,w
  9777                           
  9778                           ; Switch size 1, requested type "space"
  9779                           ; Number of cases is 1, Range of values is 0 to 0
  9780                           ; switch strategies available:
  9781                           ; Name         Instructions Cycles
  9782                           ; simple_byte            4     3 (average)
  9783                           ; direct_byte            8     6 (fixed)
  9784                           ; jumptable            260     6 (fixed)
  9785                           ;	Chosen strategy is simple_byte
  9786  175A  3A00               	xorlw	0	; case 0
  9787  175B  1903               	skipnz
  9788  175C  2F56               	goto	l3615
  9789  175D  2F5E               	goto	l239
  9790  175E                     l239:	
  9791  175E  0008               	return
  9792  175F                     __end_of_NVMInit:	
  9793                           
  9794                           	psect	text56
  9795  1749                     __ptext56:	
  9796 ;; *************** function _LEDInit *****************
  9797 ;; Defined at:
  9798 ;;		line 8 in file "LED.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;  sta             1    wreg     unsigned char 
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  sta             1    1[COMMON] unsigned char 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        1 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    2
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_main
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           
  9827                           ;psect for function _LEDInit
  9828  1749                     _LEDInit:	
  9829                           
  9830                           ;incstack = 0
  9831                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  9832                           ;LEDInit@sta stored from wreg
  9833  1749  00F1               	movwf	LEDInit@sta
  9834                           
  9835                           ;LED.c: 9: switch(sta)
  9836  174A  2F4E               	goto	l3581
  9837  174B                     l199:	
  9838                           ;LED.c: 10: {
  9839                           ;LED.c: 17: case 2:
  9840                           
  9841                           
  9842                           ;LED.c: 19: LATCbits.LATC7=1;
  9843  174B  0022               	movlb	2	; select bank2
  9844  174C  178E               	bsf	14,7	;volatile
  9845                           
  9846                           ;LED.c: 21: }
  9847                           
  9848                           ;LED.c: 20: break;
  9849  174D  0008               	return
  9850  174E                     l3581:	
  9851  174E  0871               	movf	LEDInit@sta,w
  9852                           
  9853                           ; Switch size 1, requested type "space"
  9854                           ; Number of cases is 1, Range of values is 2 to 2
  9855                           ; switch strategies available:
  9856                           ; Name         Instructions Cycles
  9857                           ; simple_byte            4     3 (average)
  9858                           ; direct_byte           11     9 (fixed)
  9859                           ; jumptable            263     9 (fixed)
  9860                           ;	Chosen strategy is simple_byte
  9861  174F  3A02               	xorlw	2	; case 2
  9862  1750  1903               	skipnz
  9863  1751  2F4B               	goto	l199
  9864  1752  2F53               	goto	l201
  9865  1753                     l201:	
  9866  1753  0008               	return
  9867  1754                     __end_of_LEDInit:	
  9868                           
  9869                           	psect	text57
  9870  0B0C                     __ptext57:	
  9871 ;; *************** function _ADCInit *****************
  9872 ;; Defined at:
  9873 ;;		line 36 in file "ADC.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;  state           1    wreg     unsigned char 
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  state           1    2[COMMON] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;		None               void
  9880 ;; Registers used:
  9881 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;Total ram usage:        2 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    2
  9894 ;; This function calls:
  9895 ;;		Nothing
  9896 ;; This function is called by:
  9897 ;;		_main
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           
  9902                           ;psect for function _ADCInit
  9903  0B0C                     _ADCInit:	
  9904                           
  9905                           ;incstack = 0
  9906                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  9907                           ;ADCInit@state stored from wreg
  9908  0B0C  00F2               	movwf	ADCInit@state
  9909                           
  9910                           ;ADC.c: 37: switch(state)
  9911  0B0D  2B2D               	goto	l3383
  9912  0B0E                     l3371:	
  9913                           ;ADC.c: 38: {
  9914                           ;ADC.c: 39: case 0:
  9915                           
  9916                           
  9917                           ;ADC.c: 41: ADCON0=0b00101101; ADCON1=0b00000011; FVRCON=0b10000001; ANSELB|=0b00011000;;
  9918  0B0E  302D               	movlw	45
  9919  0B0F  0021               	movlb	1	; select bank1
  9920  0B10  009D               	movwf	29	;volatile
  9921  0B11  3003               	movlw	3
  9922  0B12  009E               	movwf	30	;volatile
  9923  0B13  3081               	movlw	129
  9924  0B14  0022               	movlb	2	; select bank2
  9925  0B15  0097               	movwf	23	;volatile
  9926  0B16  3018               	movlw	24
  9927  0B17  00F1               	movwf	??_ADCInit
  9928  0B18  0871               	movf	??_ADCInit,w
  9929  0B19  0023               	movlb	3	; select bank3
  9930  0B1A  048D               	iorwf	13,f	;volatile
  9931                           
  9932                           ;ADC.c: 42: break;
  9933  0B1B  0008               	return
  9934  0B1C                     l3375:	
  9935                           ;ADC.c: 43: case 1:
  9936                           
  9937                           
  9938                           ;ADC.c: 45: adc_ch=ADC_CH_OFF;
  9939  0B1C  0021               	movlb	1	; select bank1
  9940  0B1D  01AD               	clrf	_adc_ch^(0+128)
  9941                           
  9942                           ;ADC.c: 46: batt=0;
  9943  0B1E  01AE               	clrf	_batt^(0+128)
  9944                           
  9945                           ;ADC.c: 47: temp=0;
  9946  0B1F  01B3               	clrf	_temp^(0+128)
  9947                           
  9948                           ;ADC.c: 48: battV=0;
  9949  0B20  3000               	movlw	0
  9950  0B21  00A3               	movwf	_battV^(0+128)
  9951  0B22  3000               	movlw	0
  9952  0B23  00A4               	movwf	(_battV+1)^(0+128)
  9953  0B24  3000               	movlw	0
  9954  0B25  00A5               	movwf	(_battV+2)^(0+128)
  9955                           
  9956                           ;ADC.c: 49: tempC=0;
  9957  0B26  3000               	movlw	0
  9958  0B27  00A6               	movwf	_tempC^(0+128)
  9959  0B28  3000               	movlw	0
  9960  0B29  00A7               	movwf	(_tempC+1)^(0+128)
  9961  0B2A  3000               	movlw	0
  9962  0B2B  00A8               	movwf	(_tempC+2)^(0+128)
  9963                           
  9964                           ;ADC.c: 54: }
  9965                           
  9966                           ;ADC.c: 50: break;
  9967  0B2C  0008               	return
  9968  0B2D                     l3383:	
  9969  0B2D  0872               	movf	ADCInit@state,w
  9970                           
  9971                           ; Switch size 1, requested type "space"
  9972                           ; Number of cases is 2, Range of values is 0 to 1
  9973                           ; switch strategies available:
  9974                           ; Name         Instructions Cycles
  9975                           ; simple_byte            7     4 (average)
  9976                           ; direct_byte           10     6 (fixed)
  9977                           ; jumptable            260     6 (fixed)
  9978                           ;	Chosen strategy is simple_byte
  9979  0B2E  3A00               	xorlw	0	; case 0
  9980  0B2F  1903               	skipnz
  9981  0B30  2B0E               	goto	l3371
  9982  0B31  3A01               	xorlw	1	; case 1
  9983  0B32  1903               	skipnz
  9984  0B33  2B1C               	goto	l3375
  9985  0B34  2B35               	goto	l119
  9986  0B35                     l119:	
  9987  0B35  0008               	return
  9988  0B36                     __end_of_ADCInit:	
  9989                           
  9990                           	psect	text58
  9991  0971                     __ptext58:	
  9992 ;; *************** function _SPIInit *****************
  9993 ;; Defined at:
  9994 ;;		line 9 in file "SPI.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;  state           1    wreg     unsigned char 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;  state           1    2[COMMON] unsigned char 
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;Total ram usage:        2 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    2
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_main
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           
 10023                           ;psect for function _SPIInit
 10024  0971                     _SPIInit:	
 10025                           
 10026                           ;incstack = 0
 10027                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
 10028                           ;SPIInit@state stored from wreg
 10029  0971  00F2               	movwf	SPIInit@state
 10030                           
 10031                           ;SPI.c: 10: switch(state)
 10032  0972  2983               	goto	l3349
 10033  0973                     l56:	
 10034                           ;SPI.c: 11: {
 10035                           ;SPI.c: 12: case 0:
 10036                           
 10037                           
 10038                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
 10039  0973  0021               	movlb	1	; select bank1
 10040  0974  160E               	bsf	14,4	;volatile
 10041  0975  30D7               	movlw	215
 10042  0976  00F1               	movwf	??_SPIInit
 10043  0977  0871               	movf	??_SPIInit,w
 10044  0978  058E               	andwf	14,f	;volatile
 10045  0979  0024               	movlb	4	; select bank4
 10046  097A  1295               	bcf	21,5	;volatile
 10047  097B  0191               	clrf	17	;volatile
 10048  097C  3001               	movlw	1
 10049  097D  0095               	movwf	21	;volatile
 10050  097E  0196               	clrf	22	;volatile
 10051  097F  3040               	movlw	64
 10052  0980  0094               	movwf	20	;volatile
 10053  0981  1695               	bsf	21,5	;volatile
 10054                           
 10055                           ;SPI.c: 22: }
 10056                           
 10057                           ;SPI.c: 21: break;
 10058                           
 10059                           ;SPI.c: 19: case 2:
 10060                           
 10061                           ;SPI.c: 18: break;
 10062                           
 10063                           ;SPI.c: 16: case 1:
 10064                           
 10065                           ;SPI.c: 15: break;
 10066  0982  0008               	return
 10067  0983                     l3349:	
 10068  0983  0872               	movf	SPIInit@state,w
 10069                           
 10070                           ; Switch size 1, requested type "space"
 10071                           ; Number of cases is 3, Range of values is 0 to 2
 10072                           ; switch strategies available:
 10073                           ; Name         Instructions Cycles
 10074                           ; simple_byte           10     6 (average)
 10075                           ; direct_byte           12     6 (fixed)
 10076                           ; jumptable            260     6 (fixed)
 10077                           ;	Chosen strategy is simple_byte
 10078  0984  3A00               	xorlw	0	; case 0
 10079  0985  1903               	skipnz
 10080  0986  2973               	goto	l56
 10081  0987  3A01               	xorlw	1	; case 1
 10082  0988  1903               	skipnz
 10083  0989  298E               	goto	l60
 10084  098A  3A03               	xorlw	3	; case 2
 10085  098B  1903               	skipnz
 10086  098C  298E               	goto	l60
 10087  098D  298E               	goto	l60
 10088  098E                     l60:	
 10089  098E  0008               	return
 10090  098F                     __end_of_SPIInit:	
 10091                           
 10092                           	psect	text59
 10093  0A51                     __ptext59:	
 10094 ;; *************** function _OUTInit *****************
 10095 ;; Defined at:
 10096 ;;		line 7 in file "OUT.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  sta             1    wreg     unsigned char 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;  sta             1    2[COMMON] unsigned char 
 10101 ;; Return value:  Size  Location     Type
 10102 ;;		None               void
 10103 ;; Registers used:
 10104 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;Total ram usage:        2 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:    2
 10117 ;; This function calls:
 10118 ;;		Nothing
 10119 ;; This function is called by:
 10120 ;;		_main
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function _OUTInit
 10126  0A51                     _OUTInit:	
 10127                           
 10128                           ;incstack = 0
 10129                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 10130                           ;OUTInit@sta stored from wreg
 10131  0A51  00F2               	movwf	OUTInit@sta
 10132                           
 10133                           ;OUT.c: 8: switch(sta)
 10134  0A52  2A6F               	goto	l3329
 10135  0A53                     l3315:	
 10136                           ;OUT.c: 9: {
 10137                           ;OUT.c: 10: case 0:
 10138                           
 10139                           
 10140                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00011111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00011000; ANSELC&=0b00000000; PORTB&=0b11011111; PORTC&=0b01111111; PORTC|=0b
      +                          10000000;
 10141  0A53  0021               	movlb	1	; select bank1
 10142  0A54  018C               	clrf	12	;volatile
 10143  0A55  301F               	movlw	31
 10144  0A56  00F1               	movwf	??_OUTInit
 10145  0A57  0871               	movf	??_OUTInit,w
 10146  0A58  058D               	andwf	13,f	;volatile
 10147  0A59  3010               	movlw	16
 10148  0A5A  00F1               	movwf	??_OUTInit
 10149  0A5B  0871               	movf	??_OUTInit,w
 10150  0A5C  058E               	andwf	14,f	;volatile
 10151  0A5D  0023               	movlb	3	; select bank3
 10152  0A5E  018C               	clrf	12	;volatile
 10153  0A5F  3018               	movlw	24
 10154  0A60  00F1               	movwf	??_OUTInit
 10155  0A61  0871               	movf	??_OUTInit,w
 10156  0A62  058D               	andwf	13,f	;volatile
 10157  0A63  018E               	clrf	14	;volatile
 10158  0A64  30DF               	movlw	223
 10159  0A65  00F1               	movwf	??_OUTInit
 10160  0A66  0871               	movf	??_OUTInit,w
 10161  0A67  0020               	movlb	0	; select bank0
 10162  0A68  058D               	andwf	13,f	;volatile
 10163  0A69  307F               	movlw	127
 10164  0A6A  00F1               	movwf	??_OUTInit
 10165  0A6B  0871               	movf	??_OUTInit,w
 10166  0A6C  058E               	andwf	14,f	;volatile
 10167  0A6D  178E               	bsf	14,7	;volatile
 10168                           
 10169                           ;OUT.c: 20: }
 10170                           
 10171                           ;OUT.c: 13: break;
 10172  0A6E  0008               	return
 10173  0A6F                     l3329:	
 10174  0A6F  0872               	movf	OUTInit@sta,w
 10175                           
 10176                           ; Switch size 1, requested type "space"
 10177                           ; Number of cases is 1, Range of values is 0 to 0
 10178                           ; switch strategies available:
 10179                           ; Name         Instructions Cycles
 10180                           ; simple_byte            4     3 (average)
 10181                           ; direct_byte            8     6 (fixed)
 10182                           ; jumptable            260     6 (fixed)
 10183                           ;	Chosen strategy is simple_byte
 10184  0A70  3A00               	xorlw	0	; case 0
 10185  0A71  1903               	skipnz
 10186  0A72  2A53               	goto	l3315
 10187  0A73  2A74               	goto	l36
 10188  0A74                     l36:	
 10189  0A74  0008               	return
 10190  0A75                     __end_of_OUTInit:	
 10191                           
 10192                           	psect	text60
 10193  086D                     __ptext60:	
 10194 ;; *************** function _INInit *****************
 10195 ;; Defined at:
 10196 ;;		line 7 in file "IN.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  sta             1    wreg     unsigned char 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  sta             1    2[COMMON] unsigned char 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;		None               void
 10203 ;; Registers used:
 10204 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        2 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    2
 10217 ;; This function calls:
 10218 ;;		Nothing
 10219 ;; This function is called by:
 10220 ;;		_main
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           
 10225                           ;psect for function _INInit
 10226  086D                     _INInit:	
 10227                           
 10228                           ;incstack = 0
 10229                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 10230                           ;INInit@sta stored from wreg
 10231  086D  00F2               	movwf	INInit@sta
 10232                           
 10233                           ;IN.c: 8: switch(sta)
 10234  086E  287E               	goto	l3311
 10235  086F                     l3303:	
 10236                           ;IN.c: 9: {
 10237                           ;IN.c: 10: case 0:
 10238                           
 10239                           
 10240                           ;IN.c: 12: TRISB|=0b00010111; TRISC|=0b00010000; ANSELB&=0b11111010; WPUB=0b00000111;
 10241  086F  3017               	movlw	23
 10242  0870  00F1               	movwf	??_INInit
 10243  0871  0871               	movf	??_INInit,w
 10244  0872  0021               	movlb	1	; select bank1
 10245  0873  048D               	iorwf	13,f	;volatile
 10246  0874  160E               	bsf	14,4	;volatile
 10247  0875  30FA               	movlw	250
 10248  0876  00F1               	movwf	??_INInit
 10249  0877  0871               	movf	??_INInit,w
 10250  0878  0023               	movlb	3	; select bank3
 10251  0879  058D               	andwf	13,f	;volatile
 10252  087A  3007               	movlw	7
 10253  087B  0024               	movlb	4	; select bank4
 10254  087C  008D               	movwf	13	;volatile
 10255                           
 10256                           ;IN.c: 20: }
 10257                           
 10258                           ;IN.c: 13: break;
 10259  087D  0008               	return
 10260  087E                     l3311:	
 10261  087E  0872               	movf	INInit@sta,w
 10262                           
 10263                           ; Switch size 1, requested type "space"
 10264                           ; Number of cases is 1, Range of values is 0 to 0
 10265                           ; switch strategies available:
 10266                           ; Name         Instructions Cycles
 10267                           ; simple_byte            4     3 (average)
 10268                           ; direct_byte            8     6 (fixed)
 10269                           ; jumptable            260     6 (fixed)
 10270                           ;	Chosen strategy is simple_byte
 10271  087F  3A00               	xorlw	0	; case 0
 10272  0880  1903               	skipnz
 10273  0881  286F               	goto	l3303
 10274  0882  2883               	goto	l14
 10275  0883                     l14:	
 10276  0883  0008               	return
 10277  0884                     __end_of_INInit:	
 10278                           
 10279                           	psect	text61
 10280  0757                     __ptext61:	
 10281 ;; *************** function ___ftdiv *****************
 10282 ;; Defined at:
 10283 ;;		line 50 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\ftdiv.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;  f2              3   32[BANK0 ] float 
 10286 ;;  f1              3   35[BANK0 ] float 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  f3              3   43[BANK0 ] float 
 10289 ;;  sign            1   47[BANK0 ] unsigned char 
 10290 ;;  exp             1   46[BANK0 ] unsigned char 
 10291 ;;  cntr            1   42[BANK0 ] unsigned char 
 10292 ;; Return value:  Size  Location     Type
 10293 ;;                  3   32[BANK0 ] float 
 10294 ;; Registers used:
 10295 ;;		wreg, status,2, status,0, pclath, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10301 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;Total ram usage:       16 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    3
 10308 ;; This function calls:
 10309 ;;		___ftpack
 10310 ;; This function is called by:
 10311 ;;		_ADCConv
 10312 ;;		_exp
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           
 10317                           ;psect for function ___ftdiv
 10318  0757                     ___ftdiv:	
 10319                           
 10320                           ;incstack = 0
 10321                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10322  0757  0020               	movlb	0	; select bank0
 10323  0758  0843               	movf	___ftdiv@f1,w
 10324  0759  00C6               	movwf	??___ftdiv
 10325  075A  0844               	movf	___ftdiv@f1+1,w
 10326  075B  00C7               	movwf	??___ftdiv+1
 10327  075C  0845               	movf	___ftdiv@f1+2,w
 10328  075D  00C8               	movwf	??___ftdiv+2
 10329  075E  1003               	clrc
 10330  075F  0D47               	rlf	??___ftdiv+1,w
 10331  0760  0D48               	rlf	??___ftdiv+2,w
 10332  0761  00C9               	movwf	??___ftdiv+3
 10333  0762  0849               	movf	??___ftdiv+3,w
 10334  0763  00CE               	movwf	___ftdiv@exp
 10335  0764  08CE               	movf	___ftdiv@exp,f
 10336  0765  1D03               	skipz
 10337  0766  2F6E               	goto	l5347
 10338  0767  3000               	movlw	0
 10339  0768  00C0               	movwf	?___ftdiv
 10340  0769  3000               	movlw	0
 10341  076A  00C1               	movwf	?___ftdiv+1
 10342  076B  3000               	movlw	0
 10343  076C  00C2               	movwf	?___ftdiv+2
 10344  076D  0008               	return
 10345  076E                     l5347:	
 10346  076E  0840               	movf	___ftdiv@f2,w
 10347  076F  00C6               	movwf	??___ftdiv
 10348  0770  0841               	movf	___ftdiv@f2+1,w
 10349  0771  00C7               	movwf	??___ftdiv+1
 10350  0772  0842               	movf	___ftdiv@f2+2,w
 10351  0773  00C8               	movwf	??___ftdiv+2
 10352  0774  1003               	clrc
 10353  0775  0D47               	rlf	??___ftdiv+1,w
 10354  0776  0D48               	rlf	??___ftdiv+2,w
 10355  0777  00C9               	movwf	??___ftdiv+3
 10356  0778  0849               	movf	??___ftdiv+3,w
 10357  0779  00CF               	movwf	___ftdiv@sign
 10358  077A  08CF               	movf	___ftdiv@sign,f
 10359  077B  1D03               	skipz
 10360  077C  2F84               	goto	l5353
 10361  077D  3000               	movlw	0
 10362  077E  00C0               	movwf	?___ftdiv
 10363  077F  3000               	movlw	0
 10364  0780  00C1               	movwf	?___ftdiv+1
 10365  0781  3000               	movlw	0
 10366  0782  00C2               	movwf	?___ftdiv+2
 10367  0783  0008               	return
 10368  0784                     l5353:	
 10369  0784  3000               	movlw	0
 10370  0785  00CB               	movwf	___ftdiv@f3
 10371  0786  3000               	movlw	0
 10372  0787  00CC               	movwf	___ftdiv@f3+1
 10373  0788  3000               	movlw	0
 10374  0789  00CD               	movwf	___ftdiv@f3+2
 10375  078A  3089               	movlw	137
 10376  078B  074F               	addwf	___ftdiv@sign,w
 10377  078C  00C6               	movwf	??___ftdiv
 10378  078D  0846               	movf	??___ftdiv,w
 10379  078E  02CE               	subwf	___ftdiv@exp,f
 10380  078F  0843               	movf	___ftdiv@f1,w
 10381  0790  00C6               	movwf	??___ftdiv
 10382  0791  0844               	movf	___ftdiv@f1+1,w
 10383  0792  00C7               	movwf	??___ftdiv+1
 10384  0793  0845               	movf	___ftdiv@f1+2,w
 10385  0794  00C8               	movwf	??___ftdiv+2
 10386  0795  3010               	movlw	16
 10387  0796                     u4245:	
 10388  0796  36C8               	lsrf	??___ftdiv+2,f
 10389  0797  0CC7               	rrf	??___ftdiv+1,f
 10390  0798  0CC6               	rrf	??___ftdiv,f
 10391  0799  0B89               	decfsz	9,f
 10392  079A  2F96               	goto	u4245
 10393  079B  0846               	movf	??___ftdiv,w
 10394  079C  00C9               	movwf	??___ftdiv+3
 10395  079D  0849               	movf	??___ftdiv+3,w
 10396  079E  00CF               	movwf	___ftdiv@sign
 10397  079F  0840               	movf	___ftdiv@f2,w
 10398  07A0  00C6               	movwf	??___ftdiv
 10399  07A1  0841               	movf	___ftdiv@f2+1,w
 10400  07A2  00C7               	movwf	??___ftdiv+1
 10401  07A3  0842               	movf	___ftdiv@f2+2,w
 10402  07A4  00C8               	movwf	??___ftdiv+2
 10403  07A5  3010               	movlw	16
 10404  07A6                     u4255:	
 10405  07A6  36C8               	lsrf	??___ftdiv+2,f
 10406  07A7  0CC7               	rrf	??___ftdiv+1,f
 10407  07A8  0CC6               	rrf	??___ftdiv,f
 10408  07A9  0B89               	decfsz	9,f
 10409  07AA  2FA6               	goto	u4255
 10410  07AB  0846               	movf	??___ftdiv,w
 10411  07AC  00C9               	movwf	??___ftdiv+3
 10412  07AD  0849               	movf	??___ftdiv+3,w
 10413  07AE  06CF               	xorwf	___ftdiv@sign,f
 10414  07AF  3080               	movlw	128
 10415  07B0  00C6               	movwf	??___ftdiv
 10416  07B1  0846               	movf	??___ftdiv,w
 10417  07B2  05CF               	andwf	___ftdiv@sign,f
 10418  07B3  17C4               	bsf	___ftdiv@f1+1,7
 10419  07B4  30FF               	movlw	255
 10420  07B5  05C3               	andwf	___ftdiv@f1,f
 10421  07B6  30FF               	movlw	255
 10422  07B7  05C4               	andwf	___ftdiv@f1+1,f
 10423  07B8  3000               	movlw	0
 10424  07B9  05C5               	andwf	___ftdiv@f1+2,f
 10425  07BA  17C1               	bsf	___ftdiv@f2+1,7
 10426  07BB  30FF               	movlw	255
 10427  07BC  05C0               	andwf	___ftdiv@f2,f
 10428  07BD  30FF               	movlw	255
 10429  07BE  05C1               	andwf	___ftdiv@f2+1,f
 10430  07BF  3000               	movlw	0
 10431  07C0  05C2               	andwf	___ftdiv@f2+2,f
 10432  07C1  3018               	movlw	24
 10433  07C2  00C6               	movwf	??___ftdiv
 10434  07C3  0846               	movf	??___ftdiv,w
 10435  07C4  00CA               	movwf	___ftdiv@cntr
 10436  07C5                     l5367:	
 10437  07C5  3001               	movlw	1
 10438  07C6                     u4265:	
 10439  07C6  35CB               	lslf	___ftdiv@f3,f
 10440  07C7  0DCC               	rlf	___ftdiv@f3+1,f
 10441  07C8  0DCD               	rlf	___ftdiv@f3+2,f
 10442  07C9  0B89               	decfsz	9,f
 10443  07CA  2FC6               	goto	u4265
 10444  07CB  0842               	movf	___ftdiv@f2+2,w
 10445  07CC  0245               	subwf	___ftdiv@f1+2,w
 10446  07CD  1D03               	skipz
 10447  07CE  2FD5               	goto	u4275
 10448  07CF  0841               	movf	___ftdiv@f2+1,w
 10449  07D0  0244               	subwf	___ftdiv@f1+1,w
 10450  07D1  1D03               	skipz
 10451  07D2  2FD5               	goto	u4275
 10452  07D3  0840               	movf	___ftdiv@f2,w
 10453  07D4  0243               	subwf	___ftdiv@f1,w
 10454  07D5                     u4275:	
 10455  07D5  1C03               	skipc
 10456  07D6  2FDE               	goto	l5375
 10457  07D7  0840               	movf	___ftdiv@f2,w
 10458  07D8  02C3               	subwf	___ftdiv@f1,f
 10459  07D9  0841               	movf	___ftdiv@f2+1,w
 10460  07DA  3BC4               	subwfb	___ftdiv@f1+1,f
 10461  07DB  0842               	movf	___ftdiv@f2+2,w
 10462  07DC  3BC5               	subwfb	___ftdiv@f1+2,f
 10463  07DD  144B               	bsf	___ftdiv@f3,0
 10464  07DE                     l5375:	
 10465  07DE  3001               	movlw	1
 10466  07DF                     u4285:	
 10467  07DF  35C3               	lslf	___ftdiv@f1,f
 10468  07E0  0DC4               	rlf	___ftdiv@f1+1,f
 10469  07E1  0DC5               	rlf	___ftdiv@f1+2,f
 10470  07E2  0B89               	decfsz	9,f
 10471  07E3  2FDF               	goto	u4285
 10472  07E4  3001               	movlw	1
 10473  07E5  02CA               	subwf	___ftdiv@cntr,f
 10474  07E6  1D03               	btfss	3,2
 10475  07E7  2FC5               	goto	l5367
 10476  07E8  084B               	movf	___ftdiv@f3,w
 10477  07E9  00F1               	movwf	?___ftpack
 10478  07EA  084C               	movf	___ftdiv@f3+1,w
 10479  07EB  00F2               	movwf	?___ftpack+1
 10480  07EC  084D               	movf	___ftdiv@f3+2,w
 10481  07ED  00F3               	movwf	?___ftpack+2
 10482  07EE  084E               	movf	___ftdiv@exp,w
 10483  07EF  00C6               	movwf	??___ftdiv
 10484  07F0  0846               	movf	??___ftdiv,w
 10485  07F1  00F4               	movwf	?___ftpack+3
 10486  07F2  084F               	movf	___ftdiv@sign,w
 10487  07F3  00C7               	movwf	??___ftdiv+1
 10488  07F4  0847               	movf	??___ftdiv+1,w
 10489  07F5  00F5               	movwf	?___ftpack+4
 10490  07F6  318D  25A7         	fcall	___ftpack
 10491  07F8  0871               	movf	?___ftpack,w
 10492  07F9  0020               	movlb	0	; select bank0
 10493  07FA  00C0               	movwf	?___ftdiv
 10494  07FB  0872               	movf	?___ftpack+1,w
 10495  07FC  00C1               	movwf	?___ftdiv+1
 10496  07FD  0873               	movf	?___ftpack+2,w
 10497  07FE  00C2               	movwf	?___ftdiv+2
 10498  07FF  0008               	return
 10499  0800                     __end_of___ftdiv:	
 10500                           
 10501                           	psect	text62
 10502  0DA7                     __ptext62:	
 10503 ;; *************** function ___ftpack *****************
 10504 ;; Defined at:
 10505 ;;		line 63 in file "C:\Programmi\Microchip\xc8\v1.21\sources\pic\float.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;  arg             3    1[COMMON] unsigned um
 10508 ;;  exp             1    4[COMMON] unsigned char 
 10509 ;;  sign            1    5[COMMON] unsigned char 
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;		None
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  3    1[COMMON] float 
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0
 10516 ;; Tracked objects:
 10517 ;;		On entry : 0/0
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10521 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;Total ram usage:        8 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    2
 10528 ;; This function calls:
 10529 ;;		Nothing
 10530 ;; This function is called by:
 10531 ;;		___altoft
 10532 ;;		___awtoft
 10533 ;;		___ftadd
 10534 ;;		___ftdiv
 10535 ;;		___ftmul
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           
 10540                           ;psect for function ___ftpack
 10541  0DA7                     ___ftpack:	
 10542                           
 10543                           ;incstack = 0
 10544                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10545  0DA7  0874               	movf	___ftpack@exp,w
 10546  0DA8  1903               	btfsc	3,2
 10547  0DA9  2DAF               	goto	l5177
 10548  0DAA  0873               	movf	___ftpack@arg+2,w
 10549  0DAB  0472               	iorwf	___ftpack@arg+1,w
 10550  0DAC  0471               	iorwf	___ftpack@arg,w
 10551  0DAD  1D03               	skipz
 10552  0DAE  2DC0               	goto	l5183
 10553  0DAF                     l5177:	
 10554  0DAF  3000               	movlw	0
 10555  0DB0  00F1               	movwf	?___ftpack
 10556  0DB1  3000               	movlw	0
 10557  0DB2  00F2               	movwf	?___ftpack+1
 10558  0DB3  3000               	movlw	0
 10559  0DB4  00F3               	movwf	?___ftpack+2
 10560  0DB5  0008               	return
 10561  0DB6                     l5181:	
 10562  0DB6  3001               	movlw	1
 10563  0DB7  00F6               	movwf	??___ftpack
 10564  0DB8  0876               	movf	??___ftpack,w
 10565  0DB9  07F4               	addwf	___ftpack@exp,f
 10566  0DBA  3001               	movlw	1
 10567  0DBB                     u3815:	
 10568  0DBB  36F3               	lsrf	___ftpack@arg+2,f
 10569  0DBC  0CF2               	rrf	___ftpack@arg+1,f
 10570  0DBD  0CF1               	rrf	___ftpack@arg,f
 10571  0DBE  0B89               	decfsz	9,f
 10572  0DBF  2DBB               	goto	u3815
 10573  0DC0                     l5183:	
 10574  0DC0  30FE               	movlw	254
 10575  0DC1  0573               	andwf	___ftpack@arg+2,w
 10576  0DC2  1903               	btfsc	3,2
 10577  0DC3  2DD9               	goto	l864
 10578  0DC4  2DB6               	goto	l5181
 10579  0DC5                     l5185:	
 10580  0DC5  3001               	movlw	1
 10581  0DC6  00F6               	movwf	??___ftpack
 10582  0DC7  0876               	movf	??___ftpack,w
 10583  0DC8  07F4               	addwf	___ftpack@exp,f
 10584  0DC9  3001               	movlw	1
 10585  0DCA  07F1               	addwf	___ftpack@arg,f
 10586  0DCB  3000               	movlw	0
 10587  0DCC  1803               	skipnc
 10588  0DCD  3001               	movlw	1
 10589  0DCE  07F2               	addwf	___ftpack@arg+1,f
 10590  0DCF  3000               	movlw	0
 10591  0DD0  1803               	skipnc
 10592  0DD1  3001               	movlw	1
 10593  0DD2  07F3               	addwf	___ftpack@arg+2,f
 10594  0DD3  3001               	movlw	1
 10595  0DD4                     u3835:	
 10596  0DD4  36F3               	lsrf	___ftpack@arg+2,f
 10597  0DD5  0CF2               	rrf	___ftpack@arg+1,f
 10598  0DD6  0CF1               	rrf	___ftpack@arg,f
 10599  0DD7  0B89               	decfsz	9,f
 10600  0DD8  2DD4               	goto	u3835
 10601  0DD9                     l864:	
 10602  0DD9  30FF               	movlw	255
 10603  0DDA  0573               	andwf	___ftpack@arg+2,w
 10604  0DDB  1903               	btfsc	3,2
 10605  0DDC  2DE6               	goto	l5193
 10606  0DDD  2DC5               	goto	l5185
 10607  0DDE                     l5191:	
 10608  0DDE  3001               	movlw	1
 10609  0DDF  02F4               	subwf	___ftpack@exp,f
 10610  0DE0  3001               	movlw	1
 10611  0DE1                     u3855:	
 10612  0DE1  35F1               	lslf	___ftpack@arg,f
 10613  0DE2  0DF2               	rlf	___ftpack@arg+1,f
 10614  0DE3  0DF3               	rlf	___ftpack@arg+2,f
 10615  0DE4  0B89               	decfsz	9,f
 10616  0DE5  2DE1               	goto	u3855
 10617  0DE6                     l5193:	
 10618  0DE6  1FF2               	btfss	___ftpack@arg+1,7
 10619  0DE7  2DDE               	goto	l5191
 10620  0DE8  1874               	btfsc	___ftpack@exp,0
 10621  0DE9  2DF0               	goto	l870
 10622  0DEA  30FF               	movlw	255
 10623  0DEB  05F1               	andwf	___ftpack@arg,f
 10624  0DEC  307F               	movlw	127
 10625  0DED  05F2               	andwf	___ftpack@arg+1,f
 10626  0DEE  30FF               	movlw	255
 10627  0DEF  05F3               	andwf	___ftpack@arg+2,f
 10628  0DF0                     l870:	
 10629  0DF0  1003               	clrc
 10630  0DF1  0CF4               	rrf	___ftpack@exp,f
 10631  0DF2  0874               	movf	___ftpack@exp,w
 10632  0DF3  00F6               	movwf	??___ftpack
 10633  0DF4  01F7               	clrf	??___ftpack+1
 10634  0DF5  01F8               	clrf	??___ftpack+2
 10635  0DF6  3010               	movlw	16
 10636  0DF7                     u3885:	
 10637  0DF7  35F6               	lslf	??___ftpack,f
 10638  0DF8  0DF7               	rlf	??___ftpack+1,f
 10639  0DF9  0DF8               	rlf	??___ftpack+2,f
 10640  0DFA  0B89               	decfsz	9,f
 10641  0DFB  2DF7               	goto	u3885
 10642  0DFC  0876               	movf	??___ftpack,w
 10643  0DFD  04F1               	iorwf	___ftpack@arg,f
 10644  0DFE  0877               	movf	??___ftpack+1,w
 10645  0DFF  04F2               	iorwf	___ftpack@arg+1,f
 10646  0E00  0878               	movf	??___ftpack+2,w
 10647  0E01  04F3               	iorwf	___ftpack@arg+2,f
 10648  0E02  0875               	movf	___ftpack@sign,w
 10649  0E03  1903               	btfsc	3,2
 10650  0E04  0008               	return
 10651  0E05  17F3               	bsf	___ftpack@arg+2,7
 10652  0E06  0008               	return
 10653  0E07                     __end_of___ftpack:	
 10654                           
 10655                           	psect	text63
 10656  0B98                     __ptext63:	
 10657 ;; *************** function _frexp *****************
 10658 ;; Defined at:
 10659 ;;		line 255 in file "C:\Programmi\Microchip\xc8\v1.21\sources\common\frexp.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  value           3    1[COMMON] float 
 10662 ;;  eptr            1    4[COMMON] PTR int 
 10663 ;;		 -> log@exponent(2), floor@expon(2), 
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;		None
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  3    1[COMMON] PTR int 
 10668 ;; Registers used:
 10669 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;Total ram usage:        6 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    2
 10682 ;; This function calls:
 10683 ;;		Nothing
 10684 ;; This function is called by:
 10685 ;;		_floor
 10686 ;;		_log
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           
 10691                           ;psect for function _frexp
 10692  0B98                     _frexp:	
 10693                           
 10694                           ;incstack = 0
 10695                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
 10696  0B98  0873               	movf	frexp@value+2,w
 10697  0B99  0472               	iorwf	frexp@value+1,w
 10698  0B9A  0471               	iorwf	frexp@value,w
 10699  0B9B  1D03               	skipz
 10700  0B9C  2BAA               	goto	l4261
 10701  0B9D  0874               	movf	frexp@eptr,w
 10702  0B9E  0086               	movwf	6
 10703  0B9F  0187               	clrf	7
 10704  0BA0  3000               	movlw	0
 10705  0BA1  3FC0               	movwi [0]fsr1
 10706  0BA2  3FC1               	movwi [1]fsr1
 10707  0BA3  3000               	movlw	0
 10708  0BA4  00F1               	movwf	?_frexp
 10709  0BA5  3000               	movlw	0
 10710  0BA6  00F2               	movwf	?_frexp+1
 10711  0BA7  3000               	movlw	0
 10712  0BA8  00F3               	movwf	?_frexp+2
 10713  0BA9  0008               	return
 10714  0BAA                     l4261:	
 10715  0BAA  0873               	movf	frexp@value+2,w
 10716  0BAB  397F               	andlw	127
 10717  0BAC  00F5               	movwf	??_frexp
 10718  0BAD  01F6               	clrf	??_frexp+1
 10719  0BAE  35F5               	lslf	??_frexp,f
 10720  0BAF  0DF6               	rlf	??_frexp+1,f
 10721  0BB0  0874               	movf	frexp@eptr,w
 10722  0BB1  0086               	movwf	6
 10723  0BB2  0187               	clrf	7
 10724  0BB3  0875               	movf	??_frexp,w
 10725  0BB4  3FC0               	movwi [0]fsr1
 10726  0BB5  0876               	movf	??_frexp+1,w
 10727  0BB6  3FC1               	movwi [1]fsr1
 10728  0BB7  0D72               	rlf	frexp@value+1,w
 10729  0BB8  0D72               	rlf	frexp@value+1,w
 10730  0BB9  3901               	andlw	1
 10731  0BBA  00F5               	movwf	??_frexp
 10732  0BBB  01F6               	clrf	??_frexp+1
 10733  0BBC  0874               	movf	frexp@eptr,w
 10734  0BBD  0086               	movwf	6
 10735  0BBE  0187               	clrf	7
 10736  0BBF  0875               	movf	??_frexp,w
 10737  0BC0  0481               	iorwf	1,f
 10738  0BC1  3141               	addfsr 1,1
 10739  0BC2  0876               	movf	??_frexp+1,w
 10740  0BC3  0481               	iorwf	1,f
 10741  0BC4  0874               	movf	frexp@eptr,w
 10742  0BC5  0086               	movwf	6
 10743  0BC6  0187               	clrf	7
 10744  0BC7  3082               	movlw	130
 10745  0BC8  0781               	addwf	1,f
 10746  0BC9  3141               	addfsr 1,1
 10747  0BCA  30FF               	movlw	255
 10748  0BCB  3D81               	addwfc	1,f
 10749  0BCC  317F               	addfsr 1,-1
 10750  0BCD  0873               	movf	frexp@value+2,w
 10751  0BCE  3980               	andlw	-128
 10752  0BCF  383F               	iorlw	63
 10753  0BD0  00F3               	movwf	frexp@value+2
 10754  0BD1  13F2               	bcf	frexp@value+1,7
 10755  0BD2  0008               	return
 10756  0BD3                     __end_of_frexp:	
 10757                           
 10758                           	psect	intentry
 10759  0004                     __pintentry:	
 10760 ;; *************** function _INTIsr *****************
 10761 ;; Defined at:
 10762 ;;		line 38 in file "Sensore.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;		None               void
 10769 ;; Registers used:
 10770 ;;		wreg, status,2, status,0, pclath, cstack
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10779 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;Total ram usage:        1 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    1
 10783 ;; This function calls:
 10784 ;;		_SYSInt
 10785 ;; This function is called by:
 10786 ;;		Interrupt level 1
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790  0004                     _INTIsr:	
 10791                           
 10792                           ;incstack = 0
 10793                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 10794  0004  3180               	pagesel	$
 10795  0005  0020               	movlb	0	; select bank0
 10796  0006  087F               	movf	127,w
 10797  0007  00F0               	movwf	??_INTIsr
 10798                           
 10799                           ;Sensore.c: 40: if(INTCONbits.T0IF==1)
 10800  0008  1D0B               	btfss	11,2	;volatile
 10801  0009  280D               	goto	i1l4547
 10802                           
 10803                           ;Sensore.c: 41: {
 10804                           ;Sensore.c: 43: INTCONbits.T0IF=0;
 10805  000A  110B               	bcf	11,2	;volatile
 10806                           
 10807                           ;Sensore.c: 46: SYSInt();
 10808  000B  3197  2716         	fcall	_SYSInt
 10809  000D                     i1l4547:	
 10810                           
 10811                           ;Sensore.c: 47: }
 10812                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
 10813  000D  0027               	movlb	7	; select bank7
 10814  000E  1916               	btfsc	22,2	;volatile
 10815                           
 10816                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
 10817  000F  1116               	bcf	22,2	;volatile
 10818  0010  0870               	movf	??_INTIsr,w
 10819  0011  0020               	movlb	0	; select bank0
 10820  0012  00FF               	movwf	127
 10821  0013  0009               	retfie
 10822  0014                     __end_of_INTIsr:	
 10823                           
 10824                           	psect	text65
 10825  1716                     __ptext65:	
 10826 ;; *************** function _SYSInt *****************
 10827 ;; Defined at:
 10828 ;;		line 36 in file "SYS.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;		None
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;		None
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:        0 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; This function calls:
 10849 ;;		Nothing
 10850 ;; This function is called by:
 10851 ;;		_INTIsr
 10852 ;; This function uses a non-reentrant model
 10853 ;;
 10854                           
 10855                           
 10856                           ;psect for function _SYSInt
 10857  1716                     _SYSInt:	
 10858                           
 10859                           ;SYS.c: 38: u_SYS_STA.TICK=1;
 10860                           
 10861                           ;incstack = 0
 10862                           ; Regs used in _SYSInt: [wreg]
 10863  1716  0021               	movlb	1	; select bank1
 10864  1717  1434               	bsf	_u_SYS_STA^(0+128),0
 10865                           
 10866                           ;SYS.c: 41: TMR0=255-156;
 10867  1718  3063               	movlw	99
 10868  1719  0020               	movlb	0	; select bank0
 10869  171A  0095               	movwf	21	;volatile
 10870  171B  0008               	return
 10871  171C                     __end_of_SYSInt:	
 10872  0002                     
 10873                           	psect	functab
 10874  0100                     __pfunctab:	
 10875  0100                     __fptable:	
 10876  0100                     fptable:	
 10877  0100  3181               	movlp	high fptable
 10878  0101  0782               	addwf	2,f
 10879  0102                     fpbase:	
 10880  0102  2902               	goto	fpbase	; Call via a null pointer and you will get stuck here.
 10881  0103                     fp__exp:	
 10882  0103                     entry__exp:	
 10883  0103  3183  2B19         	ljmp	_exp
 10884  0105                     fp__log:	
 10885  0105                     entry__log:	
 10886  0105  3186  2EA5         	ljmp	_log
 10887  0107                     __end_of__fptable:	
 10888  007E                     btemp	set	126	;btemp
 10889  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    62
    Data        55
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80     20      75
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?_frexp	 size(1) Largest target is 3
		 -> ADCConv@tempV(BANK1[3]), 

    ?_ldexp	 size(1) Largest target is 0

    ?_eval_poly	 size(1) Largest target is 3
		 -> ADCConv@tempV(BANK1[3]), 

    ?___ftsub	float  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?_floor	long  size(1) Largest target is 0

    ?___altoft	float  size(1) Largest target is 0

    ?___ftpack	float  size(1) Largest target is 3
		 -> log(), ADCConv@tempV(BANK1[3]), 

    ?_log	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 3
		 -> log(), ADCConv@tempV(BANK1[3]), 

    ?___ftneg	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?_exp	float  size(1) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 9
		 -> pktTx(BANK1[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[9]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), CC1Write@cc1Addr(BANK0[1]), 
		 -> CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 9
		 -> pktRx(BANK1[9]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _CC1Init->_CC1LoadREG
    _CC1LoadREG->_CC1Write
    _PGMSelLong->_PGMWriteNvm
    _PGMSelDown->_PGMWriteNvm
    _CC1Sleep->_CC1Strobe
    _RTXReadPkt->_CC1Read
    _RTXReadPkt->_PGMWriteNvm
    _RTXRcvPkt->_CC1Read
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _CC1Read->_SPIWrite
    _CC1Strobe->_SPIWrite
    _LEDFastFlash->_DLYDelay_ms
    _ADCConv->___awtoft
    _log->___awtoft
    _exp->___awtoft
    ___ftsub->___awtoft
    ___ftmul->___awtoft
    ___ftadd->___awtoft
    ___altoft->___ftpack
    ___altoft->___fttol
    ___awtoft->___ftpack
    _LEDNormalFlash->_DLYDelay_ms
    _PGMInit->_PGMReadNvm
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _PGMReadNvm->_NVMRead
    ___ftdiv->___awtoft

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_PGMInit
    _SYSTask->_PGMSelDown
    _RTXAwake->_RTXInit
    _CC1LoadREG->_CC1Write
    _RTXTick->_RTXSendData
    _RTXTask->_RTXReadPkt
    _RTXSendRPgm->_RTXSndPkt
    _RTXStartSendData->_ADCConv
    _RTXSendData->___ftadd
    _RTXSndPkt->_CC1Write
    _ADCConv->_exp
    _log->___ftdiv
    _exp->_ldexp
    ___ftsub->___ftadd
    _ldexp->_eval_poly
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    _floor->___ftadd
    ___ftadd->___ftmul
    ___altoft->___fttol
    _PGMCheckNvm->_PGMNvmReset
    _PGMWriteNvm->_NVMWrite
    ___ftdiv->___ftadd

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXStartSendData->_ADCConv

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   82641
                                             71 BANK0      2     2      0
                             _INInit
                            _OUTInit
                            _SPIInit
                            _ADCInit
                            _CC1Init
                            _LEDInit
                            _NVMInit
                            _DINInit
                            _DINTask
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   29600
                            _DINTick
                           _SLPSleep
                            _PGMTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _RTXTick
                           _RTXAwake
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   24824
                        _DLYDelay_ms
                            _CC1Init
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   24199
                                             67 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              1     1      0     557
                                              2 BANK0      1     1      0
                        _DLYDelay_ms
                          _CC1Strobe
                         _CC1LoadREG
 ---------------------------------------------------------------------------------
 (4) _CC1LoadREG                                           1     1      0     260
                                             11 COMMON     1     1      0
                           _CC1Write
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    2991
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           0     0      0     724
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     473
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     198
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   26947
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0   26947
                                             69 BANK0      2     2      0
                          _CC1Strobe
                            _CC1Read
                     _LEDNormalFlash
                        _PGMWriteNvm
                   _RTXStartSendData
                          _RTXRcvPkt
                        _RTXSendRPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    1114
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1     452
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   23970
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (5) _RTXSendData                                          7     7      0    2991
                                             32 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
                            ___ftadd
 ---------------------------------------------------------------------------------
 (6) _RTXSndPkt                                            6     5      1    1114
                                              2 BANK0      6     5      1
                          _CC1Strobe
                            _CC1Read
                           _CC1Write
 ---------------------------------------------------------------------------------
 (7) _CC1Write                                             6     3      3     260
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (7) _CC1Read                                              5     3      2     390
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIRead                                              5     4      1     130
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (7) _CC1Strobe                                            4     4      0     198
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (8) _SPIWrite                                             6     3      3     130
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (6) _LEDFastFlash                                         3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             22    22      0   20911
                                             65 BANK0      2     2      0
                                              0 BANK1     20    20      0
                                _exp
                                _log
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     162
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) _log                                                  6     3      3    6075
                                             48 BANK0      6     3      3
                           ___awtoft
                          _eval_poly
                              _frexp
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) _exp                                                 13    10      3   10766
                                             52 BANK0     13    10      3
                           ___awtoft
                              _floor
                          _eval_poly
                              _ldexp
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    1602
                                             32 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) _ldexp                                               10     5      5     453
                                             42 BANK0     10     5      5
                          _eval_poly (ARG)
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3      45
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           10     4      6    2683
                                             32 BANK0     10     4      6
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6     800
                                              3 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               4     3      1      92
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (7) _floor                                                9     6      3    3033
                                             32 BANK0      9     6      3
                           ___altoft
                              _frexp
                            ___ftadd
                             ___ftge
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     252
                                              1 COMMON     8     4      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     136
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    1537
                                             19 BANK0     13     7      6
                           ___ftpack
                           ___awtoft (ARG)
                             ___bmul (ARG)
                              _frexp (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (8) ___altoft                                             8     4      4     516
                                              9 COMMON     2     2      0
                                              6 BANK0      6     2      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3     445
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     136
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (7) _DLYDelay_ms                                          6     4      2      68
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0     753
                                             70 BANK0      1     1      0
                         _PGMReadNvm
                        _PGMCheckNvm
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     588
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     588
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          4     4      0     588
                                              8 COMMON     4     4      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     588
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           4     4      0     134
                                              8 COMMON     4     4      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     134
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6     732
                                             32 BANK0     16    10      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (7) _frexp                                                6     2      4     224
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     312
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INInit
   _OUTInit
   _SPIInit
   _ADCInit
   _CC1Init
     _DLYDelay_ms
     _CC1Strobe
       _SPIWrite
     _CC1LoadREG
       _CC1Write
         _SPIWrite
   _LEDInit
   _NVMInit
   _DINInit
   _DINTask
   _PGMInit
     _PGMReadNvm
       _NVMRead
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _exp
           ___awtoft
             ___ftpack
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
             _frexp
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge
             ___fttol
           _eval_poly
             ___bmul
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _ldexp
             _eval_poly (ARG)
               ___bmul
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___ftge (ARG)
             ___ftneg (ARG)
           ___ftdiv
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
           ___fttol
         _log
           ___awtoft
             ___ftpack
           _eval_poly
             ___bmul
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           _frexp
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftge (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           _frexp (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
         ___ftdiv
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___lwdiv
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           _frexp (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
   _RTXTask
     _RTXReadPkt
       _CC1Strobe
         _SPIWrite
       _CC1Read
         _SPIRead
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendData
         _ADCConv
           _exp
             ___awtoft
               ___ftpack
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               _frexp
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge
               ___fttol
             _eval_poly
               ___bmul
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _ldexp
               _eval_poly (ARG)
                 ___bmul
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               ___ftge (ARG)
               ___ftneg (ARG)
             ___ftdiv
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
             ___fttol
           _log
             ___awtoft
               ___ftpack
             _eval_poly
               ___bmul
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             _frexp
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftdiv (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftge (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftdiv
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
           ___ftmul
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___lwdiv
         _DLYDelay_ms
         _RTXSendData
           _LEDFastFlash
             _DLYDelay_ms
           _RTXSndPkt
             _CC1Strobe
               _SPIWrite
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Write
               _SPIWrite
           ___ftadd
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             ___bmul (ARG)
             _frexp (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg (ARG)
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
   _SYSInit
   _SYSTask
     _DINTick
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite
     _PGMTick
     _PGMPgmOff
     _PGMSelDown
       _PGMWriteNvm
         _NVMWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Strobe
             _SPIWrite
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___bmul (ARG)
           _frexp (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg (ARG)
     _RTXAwake
       _DLYDelay_ms
       _CC1Init
         _DLYDelay_ms
         _CC1Strobe
           _SPIWrite
         _CC1LoadREG
           _CC1Write
             _SPIWrite
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _exp
               ___awtoft
                 ___ftpack
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                 _frexp
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftge
                 ___fttol
               _eval_poly
                 ___bmul
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               _ldexp
                 _eval_poly (ARG)
                   ___bmul
                   ___ftadd
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     ___bmul (ARG)
                     _frexp (ARG)
                     ___ftmul (ARG)
                       ___ftpack
                       ___awtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftneg (ARG)
                   ___ftmul
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                 ___ftge (ARG)
                 ___ftneg (ARG)
               ___ftdiv
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge
               ___ftmul
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
               ___fttol
             _log
               ___awtoft
                 ___ftpack
               _eval_poly
                 ___bmul
                 ___ftadd
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
               _frexp
               ___ftadd
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   ___bmul (ARG)
                   _frexp (ARG)
                   ___ftmul (ARG)
                     ___ftpack
                     ___awtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftneg (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftge (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftdiv
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 ___bmul (ARG)
                 _frexp (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)
             ___ftmul
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___lwdiv
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Strobe
                 _SPIWrite
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Write
                 _SPIWrite
             ___ftadd
               ___ftpack
               ___awtoft (ARG)
                 ___ftpack
               ___bmul (ARG)
               _frexp (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg (ARG)

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D7      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Nov 15 14:20:57 2014

       __size_of_CC1Strobe 0014               ___altoft@exp 002A                 __CFG_CP$ON 0000  
          SLPSleep@WPUBTmp 0022                          pc 0002             ___bmul@product 0073  
            ___altoft@sign 002B                         l14 0883                         l36 0A74  
                       l60 098E              ?_LEDFastFlash 0070                         l56 0973  
                       l65 09D6                         l74 0967               ?_DLYDelay_ms 0071  
             ___ftadd@exp1 003F               ___ftadd@exp2 003E               ___ftadd@sign 003D  
                      l201 1753                        l124 0108                        l133 0314  
                      l301 0AF7                        l119 0B35                        l251 0544  
                      l244 0AAE                        l148 08B6                        l261 058D  
                      l253 054F                        l254 0573                        l239 175E  
                      l271 05ED                        l255 055E                        l176 091A  
                      l266 05D4                        l258 0584                        l602 0AE4  
                      l268 05DB                        l382 089B                        l199 174B  
                      l519 0EF1                        l296 17B5                        l299 0AF9  
                      l492 0CF6                        l477 0A98                        l685 0C51  
                      l870 0DF0                        l926 04DC                        l686 0C92  
                      l687 0C93                        l864 0DD9            __end_of_CC1Init 091B  
          __end_of_CC1Read 0937                        _exp 0319                        _log 06A5  
          __end_of_ADCConv 0319            __end_of_ADCInit 0B36               __CFG_BORV$LO 0000  
                      wreg 0009                 _RTXReadPkt 0C9E            __end_of_DINInit 17B6  
          __end_of_DINTask 0954            __end_of_DINTick 0B0C               __CFG_LVP$OFF 0000  
         _RTXStartSendData 1786            __end_of_LEDInit 1754               ___ftdiv@cntr 004A  
             ___ftdiv@sign 004F                       l4003 0AC1                       l4021 0AD9  
                     l3303 086F                       l3311 087E                       l4025 0ADC  
                     l3315 0A53                       l4213 004E                       l5021 0EEB  
                     l4223 0070                       l3329 0A6F                       l5121 0B79  
                     l3371 0B0E                       l4155 17B8                       l4243 00A9  
                     l5115 0B72                       l4261 0BAA                       l3349 0983  
                     l5213 0C23                       l5053 0CDD                       l5133 0B8A  
                     l3375 0B1C                       l3383 0B2D                       l3615 1756  
                     l3711 17B0                       l3703 05E8                       l5215 0C33  
                     l5311 04BB                       l4511 0FF7                       l4503 0FDD  
                     l4159 17BE                       l4247 00B1                       l5127 0B80  
                     l3633 0A9C                       l5305 04A8                       l4505 0FE6  
                     l5241 0F1E                       l3619 1759                       l3707 17A7  
                     l5227 09F6                       l5323 04EE                       l5307 04B2  
                     l4507 0FE9                       l5411 0661                       l5139 0B91  
                     l5181 0DB6                       l3581 174E                       l5317 04CE  
                     l5309 04B7                       l5245 0F26                       l4533 00EF  
                     l4525 00D1                       l5085 0D11                       l5191 0DDE  
                     l5183 0DC0                       l3751 094E                       l3743 0947  
                     l5327 0500                       l5319 04D8                       l4391 0BE9  
                     l5255 0F71                       l5423 067D                       l5407 0659  
                     l4527 00DD                       l4711 0300                       l5193 0DE6  
                     l5185 0DC5                       l5177 0DAF                       l5353 0784  
                     l3681 05B0                       l5337 051B                       l5281 046C  
                     l5265 0DA0                       l4537 00F8                       l4705 02EE  
                     l4713 030C                       l5347 076E                       l3747 094A  
                     l4395 0BFF                       l5419 0675                       l4723 0326  
                     l4707 02F9                       l4651 0955                       l4643 09CD  
                     l5277 0465                       l4477 0F92                       l4733 0344  
                     l5375 07DE                       l5367 07C5                       l3695 05D6  
                     l3687 05B6                       l5287 047B                       l4495 0FC2  
                     l4639 09DB                       l4903 0E3A                       l4807 0911  
                     l4497 0FD0                       l4745 038D                       l4649 096C  
                     l4931 1768                       l4915 0887                       l5299 0495  
                     l5395 061E                       l4739 0363                       l4667 014C  
                     ?_exp 0054                       l4917 088A                       l4925 0892  
                     l4853 0991                       l5389 0608                       l4685 01D3  
                     l4909 0E67                       ?_log 0050                       l4767 0427  
                     l4783 06D7                       l4863 09AF                       l4777 06C4  
                     l4689 01DF                       l4961 0A7D                       l4991 0E7A  
                     l4799 0903                       l4959 0A78                       l4967 0A8C  
             __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020                       u3205 0FDE  
                     u3145 0F99                       u4115 04A9                       u3245 00D4  
                     u3175 0FC3                       _PIE1 0091                       _PIE2 0092  
                     u4145 04BC                       u3265 00DE                       u2635 0079  
                     u3275 00E8                       u4245 0796                       u4085 0496  
                     u4405 0684                       u4325 062A                       u3445 041E  
                     u3285 00F0                       u4255 07A6                       u4175 04CF  
                     u4335 063A                       u4265 07C6                       u4275 07D5  
                     u3475 08BC                       u4355 0662                       u4427 030F  
                     u4285 07DF                       u4437 08C3                       u4365 0668  
                     u3815 0DBB                       u3835 0DD4                       u3915 0C28  
                     u4395 067E                       u3855 0DE1                       _PIR1 0011  
                     _PIR2 0012                       u3885 0DF7                       _TMR0 0015  
                     _WPUB 020D            __end_of_PGMInit 089C            __end_of_PGMTick 17A5  
             __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000                       _Rinf 00A0  
         __end_of_CC1Sleep 1738                       _batt 00AE                       _main 0C4B  
         __end_of_CC1Write 0A51               ___ftpack@arg 0071            __end_of_NVMInit 175F  
          __end_of_NVMRead 0ABF               ___ftpack@exp 0074                       _temp 00B3  
          __end_of_SPIInit 098F            __end_of_SPIRead 09EB                       fsr0h 0005  
                     fsr1h 0007                       fsr0l 0004                       indf0 0000  
                     indf1 0001                       fsr1l 0006                       btemp 007E  
                     exp@x 0054                       log@x 0050            __end_of_OUTInit 0A75  
            __CFG_BOREN$ON 0000                       start 0014            __end_of_RTXInit 0A99  
        NVMWrite@latchAddr 0063            __end_of_RTXTask 1722            __end_of_RTXTick 1778  
            __CFG_IESO$OFF 0000            __end_of_SYSInit 0AE5            __end_of_SYSTask 0B98  
        ___bmul@multiplier 0074               ___ftmul@cntr 0031               ___ftmul@sign 0032  
             _ADCConv$1522 00D2               _ADCConv$1523 00D5               _ADCConv$1524 00D8  
              ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000             ??_LEDFastFlash 0077  
              ?_PGMSelDown 0070               ___fttol@exp1 0025                ?_PGMSelLong 0070  
                    ??_exp 0057                      ??_log 0053               ___fttol@lval 0021  
              _RTXSendData 0E71                _RTXSendRPgm 0A0C               SPIInit@state 0072  
                    ?_main 0070            __end_of___ftadd 0533            __end_of___ftdiv 0800  
          __end_of___ftneg 1730            __end_of___ftmul 06A5                      _T1CON 0018  
          __end_of___ftsub 08E6            __end_of___fttol 1000         __size_of_PGMPgmOff 0004  
                    _IOCBN 0395                      _IOCBP 0394            __end_of___lwdiv 00FF  
                    _PMADR 0191                      _PMDAT 0193                      _TMR1H 0017  
                    _TMR1L 0016                      _PORTB 000D                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
            __CFG_PWRTE$ON 0000                      _battV 00A3                _sys_pgm_sta 00B2  
            ___awtoft@sign 0022          __end_of_CC1Strobe 086D                      _floor 0EF4  
                    _ldexp 0041                      _frexp 0B98                      _errno 00A9  
                    _tempC 00A6                      _pktRx 00B8                      _pktTx 00C1  
            ___ftpack@sign 0075                      main@i 0068                      fpbase 0102  
         __end_of_SLPSleep 0E71           __end_of_NVMWrite 05F1           __end_of_SPIWrite 0971  
         __end_of_RTXAwake 0900          LEDNormalFlash@num 0078                      status 0003  
                    wtemp0 007E               ?_PGMCheckNvm 0070                exp@exponent 005E  
              ldexp@newexp 004D             __CFG_MCLRE$OFF 0000            __initialization 0016  
             DLYDelay_ms@i 0075                log@exponent 0054               __end_of_main 0C9E  
       __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0057                  ??_CC1Init 007C  
                ??_CC1Read 0079                  ??_ADCConv 0061                  ??_ADCInit 0071  
           CC1Strobe@e_stb 0078               ??_CC1LoadREG 007B                     ??_main 0067  
               _cc1PaTable 00E3              ___fttol@sign1 0020               CC1Init@state 0022  
                ??_DINInit 0071               NVMWrite@addr 0071                  ??_DINTask 0071  
                ??_DINTick 0071                 _cc1InitVal 0120                  ??_LEDInit 0071  
             ?_PGMNvmReset 0070                  ??_PGMInit 007C                  ??_PGMTick 0071  
              ?_RTXReadPkt 0070                     _ADCON0 009D                     _ADCON1 009E  
            SPIRead@dstPtr 0074                     ?_floor 0040                     ?_ldexp 004A  
                   ?_frexp 0071                  ??_NVMInit 0071                  ??_NVMRead 0075  
         __end_of___altoft 0C4B                     _ADRESH 009C                  ??_SPIInit 0071  
                ??_SPIRead 0072             _LEDNormalFlash 098F                  ??_OUTInit 0071  
         __end_of___awtoft 0A0C                     _ANSELA 018C                     _ANSELB 018D  
                   _ANSELC 018E           __end_of___ftpack 0E07        __size_of_PGMReadNvm 0013  
                ??_RTXInit 007C               ?_PGMWriteNvm 0070        __size_of_PGMSelDown 0013  
                ??_RTXTask 007C                  ??_RTXTick 007C                     i1l4547 000D  
      __size_of_PGMSelLong 0009                     _INTCON 000B                     _FVRCON 0117  
                ??_SYSInit 0071                     _PMCON1 0195                     _PMCON2 0196  
                ??_SYSTask 007C                     _INTIsr 0004                     _OSCCON 0099  
                   _INInit 086D                     _WDTCON 0097                     _SSPBUF 0211  
         __end_of__fptable 0107              LEDFastFlash@i 0079          __end_of_PGMPgmOff 1716  
                   _SYSInt 1716         __end_of_CC1LoadREG 08B4        RTXReadPkt@numRxByte 0066  
                   ___bmul 17B6                     ___ftge 0BD3                     _adc_ch 00AD  
                ??___ftadd 0039             __CFG_STVREN$ON 0000                  ??___ftdiv 0046  
                ??___ftneg 0074                  ??___ftmul 0029                  ??___ftsub 007C  
                ??___fttol 0075                  ??___lwdiv 0075                     _tmrPgm 006C  
                   fp__exp 0103                     fp__log 0105                     floor@i 0044  
                   floor@x 0040      ___ftmul@f3_as_product 002E                  ?_CC1Sleep 0070  
                   fptable 0100       __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077  
                   fptotal 0002     __end_of_LEDNormalFlash 09AD          __end_of_RTXRcvPkt 1786  
        __end_of_RTXSndPkt 0D4B       __end_of_LEDFastFlash 09CB           __end_ofexp@coeff 081F  
         __end_oflog@coeff 083A    __end_of__initialization 003E                 ___altoft@c 0026  
               ___ftadd@f1 0033                 ___ftadd@f2 0036                 ___ftge@ff1 0071  
               ___ftge@ff2 0074               eval_poly@res 0047                 ___ftdiv@f1 0043  
               ___ftdiv@f2 0040                 ___ftdiv@f3 004B                 ___ftneg@f1 0071  
               ___awtoft@c 0079        ___bmul@multiplicand 0071                 ___ftmul@f1 0023  
               ___ftmul@f2 0026                 ___ftsub@f1 0043                 ___ftsub@f2 0040  
               ___fttol@f1 0071             __pcstackCOMMON 0070               __pidataBANK1 1738  
             __pidataBANK2 0B36        __size_of_RTXReadPkt 0056   __end_of_RTXStartSendData 1795  
            __end_of_floor 0F79            NVMWrite@rowAddr 0060              __end_of_ldexp 00C9  
            __end_of_frexp 0BD3                  ?_SLPSleep 0070                  ?_NVMWrite 0071  
          CC1Strobe@cc1Stb 0079                  ?_SPIWrite 0071                 CC1Read@len 0078  
               CC1Read@dst 0077                 ??_CC1Sleep 007A                  ?_RTXAwake 0070  
               ??_CC1Write 007A               CC1Write@addr 0020             ADCConv@sumBatt 00DB  
           ADCConv@sumTemp 00DD            ?_LEDNormalFlash 0070                    ??_floor 0043  
                  ??_ldexp 004F                    ??_frexp 0075                 __pbssBANK0 0069  
               __pbssBANK1 00A0         __size_of_eval_poly 005C                    ?_INTIsr 0070  
                  ?_INInit 0070            __CFG_VCAPEN$OFF 0000               ADCConv@tempV 00DF  
                  ?_SYSInt 0070                  INInit@sta 0072       __size_of_PGMCheckNvm 000C  
               __pmaintext 0C4B                    ?___bmul 0071                    ?___ftge 0071  
             ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021               ??_PGMSelDown 0065  
             ??_PGMSelLong 007C                 __pintentry 0004               ?_RTXSendData 0070  
             ?_RTXSendRPgm 0070                    _CC1Init 0900                    _CC1Read 091B  
                ?___altoft 0026                    _ADCConv 0107                    _ADCInit 0B0C  
        _u_in_sta_currTask 007C                  ?___awtoft 0079                  ?___ftpack 0071  
               ??_SLPSleep 007A                 ??_NVMWrite 0075                 _cntSndData 0069  
               ??_SPIWrite 0074                    _DINInit 17A5                 ??_RTXAwake 007C  
                  _DINTick 0AE5                    _DINTask 0937               ADCInit@state 0072  
                  _LEDInit 1749         RTXSendData@valBatt 0044                    _PGMInit 0884  
                  _PGMTick 1795         RTXSendData@valTemp 0041                 _ldexp$1131 0051  
     __size_of_PGMNvmReset 0013                    _SSPCON1 0215                    _SSPCON2 0216  
                  _NVMInit 1754                    _NVMRead 0A99                    _SPIInit 0971  
                  _SPIRead 09CB                    _SSPSTAT 0214                    _OUTInit 0A51  
               __stringtab 0800                    _RTXInit 0A75                    _RTXTick 176B  
                  _RTXTask 171C         __end_of_PGMReadNvm 17DA                    _SYSInit 0ABF  
                  _SYSTask 0B65         __end_of_PGMSelDown 0859         __end_of_PGMSelLong 1749  
                _CC1Strobe 0859            __size_of_INTIsr 0010            __size_of_INInit 0017  
     __size_of_PGMWriteNvm 0013            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064                  SPIWrite@i 0076            __size_of___bmul 0011  
          __size_of___ftge 003B                    ___ftadd 043D               RTXInit@state 0063  
                  ___ftdiv 0757                    ___ftneg 1728                    ___ftmul 05F1  
                  ___ftsub 08CD                    ___fttol 0F79                    ___lwdiv 00C9  
               ??___altoft 0079                 ??___awtoft 0020                 ??___ftpack 0076  
        __end_of_eval_poly 0DA7                    __ptext1 0B65                    __ptext2 08E6  
                  __ptext3 0A75                    __ptext4 0900                    __ptext5 089C  
                  __ptext6 176B                    __ptext7 1740                    __ptext8 0846  
                  __ptext9 1712                    _flg_slp 00AF               __size_of_exp 0124  
             __size_of_log 00B2                    _pgm_cfg 00CA                    _pgm_flg 006A  
    __size_of_LEDFastFlash 001E                  _IOCBFbits 0396               ??_RTXReadPkt 0065  
                  clrloop0 0841                    _rtx_flg 00B0               RTXRcvPkt@len 0020  
             RTXRcvPkt@dst 0023       end_of_initialization 003E                 _u_in_ev_up 00B7  
                  exp@sign 0060                 ?_CC1Strobe 0070         RTXSndPkt@numRxByte 0025  
                  init_ram 1722         RTXSndPkt@numTxByte 0026                    initloop 1723  
             RTXSndPkt@len 0022               RTXSndPkt@src 0024               RTXSndPkt@sta 0027  
                _PGMPgmOff 1712                 _tmrDbncSel 006B         __end_of_RTXReadPkt 0CF4  
               DINInit@sta 0071               _LEDFastFlash 09AD                  _PORTBbits 000D  
               _tmrLongSel 00AB           __CFG_FOSC$INTOSC 0000          __size_of_CC1Sleep 0008  
        __size_of_CC1Write 0023                NVMRead@addr 0071                NVMRead@dest 0073  
                _RTXRcvPkt 1778                  _RTXSndPkt 0CF4                ___ftdiv@exp 004E  
           __end_of_INTIsr 0014             __end_of_INInit 0884             __end_of_SYSInt 171C  
              ___ftmul@exp 002D                 ?_PGMPgmOff 0070                 LEDInit@sta 0071  
           DLYDelay_ms@val 0071             __end_of___bmul 17C7          ?_RTXStartSendData 0070  
           __end_of___ftge 0C0E              ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C  
     __size_of_RTXSendData 0083           ??_LEDNormalFlash 0077       __size_of_RTXSendRPgm 0022  
               floor@expon 0047               SYSInit@state 0072          __size_of_SLPSleep 006A  
        __size_of_NVMWrite 00BE          __size_of_SPIWrite 001D        start_initialization 0016  
               eval_poly@d 0043                 eval_poly@n 0044                 eval_poly@x 0040  
        __size_of_RTXAwake 001A                 ldexp@value 004A                __end_of_exp 043D  
              __end_of_log 0757                CC1Read@addr 007A                NVMWrite@len 0074  
                 ??_INTIsr 0070                 frexp@value 0071                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022  
                 ??_SYSInt 0070             CC1Read@cc1Addr 007B                   ??___bmul 0072  
                 ??___ftge 0077                   ?_CC1Init 0070                __pdataBANK1 00E3  
                 ?_CC1Read 0077                __pdataBANK2 0120                SPIWrite@len 0073  
                 ?_ADCConv 0070                   ?_ADCInit 0070          __size_of___altoft 003D  
                 ?_DINInit 0070                   ?_DINTask 0070                   ?_DINTick 0070  
        __size_of___awtoft 0021          __size_of___ftpack 0060                   ?_LEDInit 0070  
              __pbssCOMMON 007C              __pcstackBANK0 0020              __pcstackBANK1 00CF  
      __end_of_DLYDelay_ms 08CD                  _s_CC1_FLG 00B1                   ?_PGMInit 0070  
                 ?_PGMTick 0070          __size_of__fptable 0007                   ?_NVMInit 0070  
                 ?_NVMRead 0071                   ?_SPIInit 0070              ADCConv@cntSum 00E2  
                 ?_SPIRead 0071             NVMWrite@source 0073                   ?_OUTInit 0070  
             PGMInit@state 0066                   ?_RTXInit 0070                   ?_RTXTask 0070  
                 ?_RTXTick 0070                CC1Write@len 0079                   ?_SYSInit 0070  
              CC1Write@src 0077                   ?_SYSTask 0070              ??_PGMCheckNvm 007C  
              ADCConv@Rntc 00CF           ___lwdiv@dividend 0073                  __pfunctab 0100  
              ??_PGMPgmOff 0071                   ?___ftadd 0033                   ?___ftdiv 0040  
                 ?___ftneg 0071                   ?___ftmul 0023                   ?___ftsub 0040  
                 ?___fttol 0071                   ?___lwdiv 0071                  _u_SYS_STA 00B4  
                __pstrings 0800           _u_in_sta_tmpTask 006F                   NVMRead@i 0077  
                 _CC1Sleep 1730              ??_PGMNvmReset 0065                   SPIRead@i 0075  
                 _CC1Write 0A2E                  _eval_poly 0D4B           ___lwdiv@quotient 0076  
           __size_of_floor 0085             __size_of_ldexp 0088             __size_of_frexp 003B  
            ??_PGMWriteNvm 0078                  _u_flg_din 006E                ??_RTXRcvPkt 0021  
              ??_RTXSndPkt 0023                   _LATAbits 010C                   _LATBbits 010D  
                 _LATCbits 010E                  clear_ram0 0840                   _PIR1bits 0011  
      __end_of_PGMCheckNvm 176B      SLPSleep@OPTION_REGTmp 0024                  _tmrRcvPkt 006D  
         __size_of_CC1Init 001B           __size_of_CC1Read 001C                   _SLPSleep 0E07  
              _DLYDelay_ms 08B4                 _CC1LoadREG 089C                   _NVMWrite 0533  
         __size_of_ADCConv 0212           __size_of_ADCInit 002A                 _ADCON0bits 009D  
                 _SPIWrite 0954                 NVMInit@sta 0071                 NVMRead@len 0074  
          LEDFastFlash@num 0078                   _RTXAwake 08E6           __size_of_DINInit 0011  
         __size_of_DINTask 001D           __size_of_DINTick 0027                 ?_eval_poly 0040  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0018  
         __size_of_PGMTick 0010        __end_of_PGMNvmReset 1800           __size_of_NVMInit 000B  
         __size_of_NVMRead 0026           __size_of_SPIInit 001E           __size_of_SPIRead 0020  
             _u_in_ev_down 00B5            LEDNormalFlash@i 0079               _u_in_ev_long 00B6  
         __size_of_OUTInit 0024           __size_of_RTXInit 0024           __size_of_RTXTask 0006  
         __size_of_RTXTick 000D           __size_of_SYSInit 0026           __size_of_SYSTask 0033  
                frexp@eptr 0074                 OUTInit@sta 0072        __end_of_PGMWriteNvm 17ED  
                entry__exp 0103                  entry__log 0105           __size_of___ftadd 00F6  
         __size_of___ftdiv 00A9           __size_of___ftneg 0008                   ___altoft 0C0E  
         __size_of___ftmul 00B4           __size_of___ftsub 0019           __size_of___fttol 0087  
         __size_of___lwdiv 0036                   ___awtoft 09EB                   ___ftpack 0DA7  
       __end_of__stringtab 0801                   _exp$1090 005B                   _exp$1525 0058  
                 __fptable 0100            ___lwdiv@divisor 0071            ___lwdiv@counter 0078  
                 __ptext10 1795                   __ptext11 0E07                   __ptext20 0E71  
                 __ptext12 1730                   __ptext21 0CF4                   __ptext13 0AE5  
                 __ptext30 06A5                   __ptext22 0A2E                   __ptext14 0ABF  
                 __ptext31 0319                   __ptext23 091B                   __ptext15 171C  
                 __ptext40 0BD3                   __ptext32 08CD                   __ptext24 09CB  
                 __ptext16 0C9E                   __ptext41 043D                   __ptext33 0041  
                 __ptext25 0859                   __ptext17 0A0C                   __ptext50 0533  
                 __ptext42 0C0E                   __ptext34 1728                   __ptext26 0954  
                 __ptext18 1778                   __ptext51 17C7                   __ptext43 09EB  
                 __ptext35 0D4B                   __ptext27 09AD                   __ptext19 1786  
                 __ptext60 086D                   __ptext52 0A99                   __ptext44 098F  
                 __ptext36 05F1                   __ptext28 0107                   __ptext61 0757  
                 __ptext53 0937                   __ptext45 08B4                   __ptext37 17B6  
                 __ptext29 00C9                   __ptext62 0DA7                   __ptext54 17A5  
                 __ptext46 0884                   __ptext38 0EF4                   __ptext63 0B98  
                 __ptext55 1754                   __ptext47 175F                   __ptext39 0F79  
                 __ptext56 1749                   __ptext48 17ED                   __ptext65 1716  
                 __ptext57 0B0C                   __ptext49 17DA                   __ptext58 0971  
                 __ptext59 0A51  __size_of_RTXStartSendData 000F        __end_of_nvm_pgm_cfg 083F  
            __size_of_main 0053                _PGMCheckNvm 175F              ??_RTXSendData 0040  
            ??_RTXSendRPgm 0028          SLPSleep@ADCON0Tmp 0026                ?_CC1LoadREG 0070  
                 exp@coeff 0801                   log@coeff 081F                _PGMNvmReset 17ED  
               _INTCONbits 000B                ??_eval_poly 0046             SPIWrite@srcPtr 0071  
                 intlevel1 0100                _PGMWriteNvm 17DA                 _PMCON1bits 0195  
        __CFG_CLKOUTEN$OFF 0000        SLPSleep@TESTBATTtmp 0027                 _PGMReadNvm 17C7  
               _PGMSelDown 0846                 _PGMSelLong 1740          SLPSleep@INTCONTmp 0021  
        SLPSleep@FVRCONTmp 0025                 _OPTION_REG 0095        __end_of_RTXSendData 0EF4  
      __end_of_RTXSendRPgm 0A2E                _nvm_pgm_cfg 083A           SLPSleep@IOCBNTmp 0020  
  __size_of_LEDNormalFlash 001E        __size_of_CC1LoadREG 0018          SLPSleep@WDTCONTmp 0023  
               _SSPCONbits 0215  
